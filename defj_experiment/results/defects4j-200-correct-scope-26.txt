========================================================================
Example Number: 1
Parent Code is: 
( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
-------------------------------------------------------------------------------
Child code is: 
( int ) ( ( v - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (11 (214{val=(}) (39{val=int}) (215{val=)}) (36 (214{val=(}) (27 (27 (36 (214{val=(}) (27 (800{val=value}) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)})) (203{val=/}) (36 (214{val=(}) (27 (22 (315{val=this}) (235{val=.}) (800{val=upperBound})) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)}))) (202{val=*}) (34{val=NUMBER_CONSTANT})) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (11 (214{val=(}) (39{val=int}) (215{val=)}) (36 (214{val=(}) (27 (27 (36 (214{val=(}) (27 (800{val=v}) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)})) (203{val=/}) (36 (214{val=(}) (27 (22 (315{val=this}) (235{val=.}) (800{val=upperBound})) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)}))) (202{val=*}) (34{val=NUMBER_CONSTANT})) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/24/parent/source_org_jfree_chart_renderer_GrayPaintScale.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 30
Wrong
========================================================================
False

0
Tree	(
Code	(
Distance : 23

1
Tree	( v / value - / )
Code	( v / value - / )
Distance : 19

2
Tree	NUMBER_CONSTANT
Code	NUMBER_CONSTANT
Distance : 23

3
Tree	compiler
Code	compiler
Distance : 24

4
Tree	null
Code	null
Distance : 24

5
Tree	new
Code	new
Distance : 24

6
Tree	STRING_CONSTANT
Code	STRING_CONSTANT
Distance : 24

7
Tree	Math
Code	Math
Distance : 24

8
Tree	SimpleDependencyInfo
Code	SimpleDependencyInfo
Distance : 24

9
Tree	( value / value - / )
Code	( value / value - / )
Distance : 20

10
Tree	==
Code	==
Distance : 24

11
Tree	( value / value - /= )
Code	( value / value - /= )
Distance : 20

12
Tree	preloadEs6RuntimeFunction
Code	preloadEs6RuntimeFunction
Distance : 24

13
Tree	( value / v - / )
Code	( value / v - / )
Distance : 19

14
Tree	( value / lowerBound - / )
Code	( value / lowerBound - / )
Distance : 20

15
Tree	( value / value - extends )
Code	( value / value - extends )
Distance : 20

16
Tree	( value / value - *= )
Code	( value / value - *= )
Distance : 20

17
Tree	( long ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( long ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

18
Tree	( lowerBound / value - / )
Code	( lowerBound / value - / )
Distance : 19

19
Tree	( int ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

20
Tree	( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 1

21
Tree	( int ) ( ( value - this . lowerBound ) / ( this . v - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . v - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

22
Tree	( int ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

23
Tree	( double ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( double ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

24
Tree	( int ) ( ( v - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( v - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 1

25
Tree	( int ) ( ( value - this . upperBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . upperBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

26
Tree	( int ) ( ( value - this . lowerBound ) / ( this . value - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . value - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

27
Tree	( value / value - * )
Code	( value / value - * )
Distance : 19

28
Tree	( value / value - += )
Code	( value / value - += )
Distance : 20

29
Tree	( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 2

========================================================================


========================================================================
Example Number: 2
Parent Code is: 
{ super ( paint , stroke , paint , stroke , alpha ) ; this . value = value ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( paint , stroke , outlinePaint , outlineStroke , alpha ) ; this . value = value ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=alpha}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=value})) (204{val==}) (800{val=value})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=outlinePaint}) (234{val=,}) (800{val=outlineStroke}) (234{val=,}) (800{val=alpha}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=value})) (204{val==}) (800{val=value})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/20/parent/source_org_jfree_chart_plot_ValueMarker.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super ( alpha ) ; this . value = value ; }
Code	{ super ( alpha ) ; this . value = value ; }
Distance : 8

1
Tree	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , stroke , paint ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , stroke , paint ) ; this . value = value ; }
Distance : 6

2
Tree	{ super ( paint ) ; this . value = new int [] { value } ; }
Code	{ super ( paint ) ; this . value = new int [] { value } ; }
Distance : 13

3
Tree	{ super ( paint , stroke , alpha , alpha ) ; this . value = value ; }
Code	{ super ( paint , stroke , alpha , alpha ) ; this . value = value ; }
Distance : 3

4
Tree	{ super ( LocalizedFormats.DIMENSIONS_MISMATCH , stroke , paint ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.DIMENSIONS_MISMATCH , stroke , paint ) ; this . value = value ; }
Distance : 6

5
Tree	{ super ( paint ) ; this . value = value ; fireChangeEvent }
Code	{ super ( paint ) ; this . value = value ; fireChangeEvent }
Distance : 9

6
Tree	{ super ( value ) ; this . value = new double [] { value } ; }
Code	{ super ( value ) ; this . value = new double [] { value } ; }
Distance : 14

7
Tree	{ super ( System.out , stroke , paint ) ; this . value = value ; }
Code	{ super ( System.out , stroke , paint ) ; this . value = value ; }
Distance : 6

8
Tree	{ super ( paint ) ; this . value = fromSources ( value ) ; }
Code	{ super ( paint ) ; this . value = fromSources ( value ) ; }
Distance : 11

9
Tree	{ super ( paint , stroke , paint ) ; this . value = new int [] { value } ; }
Code	{ super ( paint , stroke , paint ) ; this . value = new int [] { value } ; }
Distance : 10

10
Tree	{ super ( outlineStroke ) ; this . value = value ; }
Code	{ super ( outlineStroke ) ; this . value = value ; }
Distance : 8

11
Tree	{ super ( paint ) ; this . value = checkNonNullThrowable ( value ) ; }
Code	{ super ( paint ) ; this . value = checkNonNullThrowable ( value ) ; }
Distance : 11

12
Tree	{ super ( paint ? relativeAccuracy : LanguageMode.NO_TRANSPILE ) ; this . value = value ; }
Code	{ super ( paint ? relativeAccuracy : LanguageMode.NO_TRANSPILE ) ; this . value = value ; }
Distance : 8

13
Tree	{ super ( paint ) ; this . value = value ; private }
Code	{ super ( paint ) ; this . value = value ; private }
Distance : 9

14
Tree	{ super ( paint ) ; this . value = AllowedSolutions.ANY_SIDE ( value ) ; }
Code	{ super ( paint ) ; this . value = AllowedSolutions.ANY_SIDE ( value ) ; }
Distance : 11

15
Tree	{ super ( paint , stroke ) ; this . value = new int [] { value } ; }
Code	{ super ( paint , stroke ) ; this . value = new int [] { value } ; }
Distance : 11

16
Tree	{ super ( ComposableFunction.COSH , stroke , paint ) ; this . value = value ; }
Code	{ super ( ComposableFunction.COSH , stroke , paint ) ; this . value = value ; }
Distance : 6

17
Tree	{ super ( LocalizedFormats.FAILED_FRACTION_CONVERSION , stroke , paint ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.FAILED_FRACTION_CONVERSION , stroke , paint ) ; this . value = value ; }
Distance : 6

18
Tree	{ super ( paint , stroke , paint ) ; this . value = value . toLowerCase () ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value . toLowerCase () ; }
Distance : 8

19
Tree	{ super ( paint ) ; this . value = value . getFirstChild () ; }
Code	{ super ( paint ) ; this . value = value . getFirstChild () ; }
Distance : 11

20
Tree	{ super ( paint ) ; this . value = round ( value ) ; }
Code	{ super ( paint ) ; this . value = round ( value ) ; }
Distance : 11

21
Tree	{ super ( paint ) ; this . value = getNumber ( value ) ; }
Code	{ super ( paint ) ; this . value = getNumber ( value ) ; }
Distance : 11

22
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = value . charAt () ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = value . charAt () ; }
Distance : 6

23
Tree	{ super ( ComposableFunction.ATAN , stroke , paint ) ; this . value = value ; }
Code	{ super ( ComposableFunction.ATAN , stroke , paint ) ; this . value = value ; }
Distance : 6

24
Tree	{ super ( paint ? absoluteAccuracy : LanguageMode.NO_TRANSPILE ) ; this . value = value ; }
Code	{ super ( paint ? absoluteAccuracy : LanguageMode.NO_TRANSPILE ) ; this . value = value ; }
Distance : 8

25
Tree	{ super ( stroke , stroke , paint , alpha ) ; this . value = value . value () ; }
Code	{ super ( stroke , stroke , paint , alpha ) ; this . value = value . value () ; }
Distance : 7

26
Tree	{ super ( ComposableFunction.COSH , stroke ) ; this . value = value ; }
Code	{ super ( ComposableFunction.COSH , stroke ) ; this . value = value ; }
Distance : 7

27
Tree	{ super ( paint , stroke , stroke ) ; this . value = value ; }
Code	{ super ( paint , stroke , stroke ) ; this . value = value ; }
Distance : 5

28
Tree	{ super ( LocalizedFormats.FAILED_FRACTION_CONVERSION , stroke ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.FAILED_FRACTION_CONVERSION , stroke ) ; this . value = value ; }
Distance : 7

29
Tree	{ super ( ComposableFunction.ATAN , stroke ) ; this . value = value ; }
Code	{ super ( ComposableFunction.ATAN , stroke ) ; this . value = value ; }
Distance : 7

30
Tree	{ super ( ComposableFunction.SIN , stroke , paint ) ; this . value = value ; }
Code	{ super ( ComposableFunction.SIN , stroke , paint ) ; this . value = value ; }
Distance : 6

31
Tree	{ super ( ComposableFunction.SIN , stroke ) ; this . value = value ; }
Code	{ super ( ComposableFunction.SIN , stroke ) ; this . value = value ; }
Distance : 7

32
Tree	{ super ( stroke , stroke ) ; }
Code	{ super ( stroke , stroke ) ; }
Distance : 13

33
Tree	{ super ( LocalizedFormats.EVALUATION_FAILED , stroke ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.EVALUATION_FAILED , stroke ) ; this . value = value ; }
Distance : 7

34
Tree	{ super ( paint ) ; this . value = value ; if }
Code	{ super ( paint ) ; this . value = value ; if }
Distance : 9

35
Tree	{ super ( alpha ) ; this . value = new double [] { value } ; }
Code	{ super ( alpha ) ; this . value = new double [] { value } ; }
Distance : 13

36
Tree	{ super ( paint ? relativeAccuracy : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) ; this . value = value ; }
Code	{ super ( paint ? relativeAccuracy : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) ; this . value = value ; }
Distance : 8

37
Tree	{ super ( alpha , stroke ) ; this . value = value ; }
Code	{ super ( alpha , stroke ) ; this . value = value ; }
Distance : 7

38
Tree	{ super ( paint ) ; this . stroke = value ; }
Code	{ super ( paint ) ; this . stroke = value ; }
Distance : 9

39
Tree	{ super ( paint ? stroke : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) ; this . value = value ; }
Code	{ super ( paint ? stroke : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) ; this . value = value ; }
Distance : 7

40
Tree	{ super ( paint ) ; this . value = getValue ( value ) ; }
Code	{ super ( paint ) ; this . value = getValue ( value ) ; }
Distance : 11

41
Tree	{ super ( stroke , stroke , paint , alpha ) ; this . value = value ; }
Code	{ super ( stroke , stroke , paint , alpha ) ; this . value = value ; }
Distance : 4

42
Tree	{ super ( outlineStroke , stroke , paint , alpha ) ; this . value = new double [] { value } ; }
Code	{ super ( outlineStroke , stroke , paint , alpha ) ; this . value = new double [] { value } ; }
Distance : 9

43
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = value . abs () ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = value . abs () ; }
Distance : 6

44
Tree	{ super ( paint ? relativeAccuracy : LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED ) ; this . value = value ; }
Code	{ super ( paint ? relativeAccuracy : LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED ) ; this . value = value ; }
Distance : 8

45
Tree	{ super ( value ) ; this . value = value ; }
Code	{ super ( value ) ; this . value = value ; }
Distance : 9

46
Tree	{ super ( paint ) ; this . value = value ; for }
Code	{ super ( paint ) ; this . value = value ; for }
Distance : 9

47
Tree	{ super ( paint ) ; this . value = value ; this }
Code	{ super ( paint ) ; this . value = value ; this }
Distance : 9

48
Tree	{ super ( outlineStroke , stroke ) ; this . value = value ; }
Code	{ super ( outlineStroke , stroke ) ; this . value = value ; }
Distance : 7

49
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = value . value () ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = value . value () ; }
Distance : 6

50
Tree	{ super ( paint ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( paint ) ; this . value = checkNotNull ( value ) ; }
Distance : 11

51
Tree	{ super ( outlineStroke , stroke , paint , alpha ) ; this . value = value ; }
Code	{ super ( outlineStroke , stroke , paint , alpha ) ; this . value = value ; }
Distance : 4

52
Tree	{ super ( alpha , stroke , paint ) ; this . value = value ; }
Code	{ super ( alpha , stroke , paint ) ; this . value = value ; }
Distance : 6

53
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = new short [] { value } ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = new short [] { value } ; }
Distance : 8

54
Tree	{ super ( alpha , stroke ) ; }
Code	{ super ( alpha , stroke ) ; }
Distance : 13

55
Tree	{ super ( paint , stroke , outlineStroke ) ; this . value = value ; }
Code	{ super ( paint , stroke , outlineStroke ) ; this . value = value ; }
Distance : 4

56
Tree	{ super ( outlineStroke , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( outlineStroke , stroke ) ; this . value = new double [] { value } ; }
Distance : 12

57
Tree	{ super ( paint , stroke , paint ) ; this . value = new short [] { value } ; }
Code	{ super ( paint , stroke , paint ) ; this . value = new short [] { value } ; }
Distance : 10

58
Tree	{ super ( paint , stroke , paint , outlineStroke ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , stroke , paint , outlineStroke ) ; this . value = new double [] { value } ; }
Distance : 8

59
Tree	{ super ( stroke ) ; this . value = value . value () ; }
Code	{ super ( stroke ) ; this . value = value . value () ; }
Distance : 11

60
Tree	{ super ( paint ) ; this . value = value . getSimplifiedName () ; }
Code	{ super ( paint ) ; this . value = value . getSimplifiedName () ; }
Distance : 11

61
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = value . getFirstChild () ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = value . getFirstChild () ; }
Distance : 6

62
Tree	{ super ( outlinePaint ) ; this . value = value ; }
Code	{ super ( outlinePaint ) ; this . value = value ; }
Distance : 8

63
Tree	{ super ( LocalizedFormats.EVALUATION_FAILED , stroke , paint ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.EVALUATION_FAILED , stroke , paint ) ; this . value = value ; }
Distance : 6

64
Tree	{ super ( paint , stroke ) ; this . value = new short [] { value } ; }
Code	{ super ( paint , stroke ) ; this . value = new short [] { value } ; }
Distance : 11

65
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = stroke ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = stroke ; }
Distance : 9

66
Tree	{ super ( paint ) ; this . value = paint ; }
Code	{ super ( paint ) ; this . value = paint ; }
Distance : 9

67
Tree	{ super ( paint ) ; this . value = value . instance () ; }
Code	{ super ( paint ) ; this . value = value . instance () ; }
Distance : 11

68
Tree	{ super ( value , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( value , stroke ) ; this . value = new double [] { value } ; }
Distance : 12

69
Tree	{ super ( paint ) ; this . value = value . toLowerCase () ; }
Code	{ super ( paint ) ; this . value = value . toLowerCase () ; }
Distance : 11

70
Tree	{ super ( paint ) ; this . value = value ; else }
Code	{ super ( paint ) ; this . value = value ; else }
Distance : 9

71
Tree	{ super ( paint ) ; this . value = value . charAt () ; }
Code	{ super ( paint ) ; this . value = value . charAt () ; }
Distance : 11

72
Tree	{ super ( Token.PARAM_LIST , stroke , paint ) ; this . value = value ; }
Code	{ super ( Token.PARAM_LIST , stroke , paint ) ; this . value = value ; }
Distance : 6

73
Tree	{ super ( null , stroke , paint , alpha , alpha , value ) ; this . value = value ; }
Code	{ super ( null , stroke , paint , alpha , alpha , value ) ; this . value = value ; }
Distance : 5

74
Tree	{ super ( paint , stroke , paint ) ; this . value = value . sample () ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value . sample () ; }
Distance : 8

75
Tree	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , stroke ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , stroke ) ; this . value = value ; }
Distance : 7

76
Tree	{ super ( paint , stroke ) ; this . value = alpha ; }
Code	{ super ( paint , stroke ) ; this . value = alpha ; }
Distance : 7

77
Tree	{ super ( paint ? stroke : LanguageMode.NO_TRANSPILE ) ; this . value = value ; }
Code	{ super ( paint ? stroke : LanguageMode.NO_TRANSPILE ) ; this . value = value ; }
Distance : 7

78
Tree	{ super ( paint , stroke , paint ) ; this . value = new float [] { value } ; }
Code	{ super ( paint , stroke , paint ) ; this . value = new float [] { value } ; }
Distance : 10

79
Tree	{ super ( stroke , stroke , paint ) ; this . value = value . value () ; }
Code	{ super ( stroke , stroke , paint ) ; this . value = value . value () ; }
Distance : 9

80
Tree	{ super ( stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( stroke ) ; this . value = new double [] { value } ; }
Distance : 13

81
Tree	{ super ( stroke , stroke ) ; this . value = value ; }
Code	{ super ( stroke , stroke ) ; this . value = value ; }
Distance : 7

82
Tree	{ super ( outlineStroke , stroke , paint ) ; this . value = new double [] { value } ; }
Code	{ super ( outlineStroke , stroke , paint ) ; this . value = new double [] { value } ; }
Distance : 11

83
Tree	{ super ( paint , outlineStroke ) ; }
Code	{ super ( paint , outlineStroke ) ; }
Distance : 12

84
Tree	{ super ( paint ? imaginary : LanguageMode.NO_TRANSPILE ) ; this . value = value ; }
Code	{ super ( paint ? imaginary : LanguageMode.NO_TRANSPILE ) ; this . value = value ; }
Distance : 8

85
Tree	{ super ( paint , stroke , paint ) ; this . value = value . format () ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value . format () ; }
Distance : 8

86
Tree	{ super ( value , stroke , paint ) ; this . value = new double [] { value } ; }
Code	{ super ( value , stroke , paint ) ; this . value = new double [] { value } ; }
Distance : 11

87
Tree	{ super ( paint ) ; this . value = new byte [] { value } ; }
Code	{ super ( paint ) ; this . value = new byte [] { value } ; }
Distance : 13

88
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . alpha = value ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . alpha = value ; }
Distance : 9

89
Tree	{ super ( paint , stroke ) ; this . value = new byte [] { value } ; }
Code	{ super ( paint , stroke ) ; this . value = new byte [] { value } ; }
Distance : 11

90
Tree	{ super ( paint , value ) ; }
Code	{ super ( paint , value ) ; }
Distance : 13

91
Tree	{ super ( paint , stroke , paint ) ; this . value = value . getFirstChild () ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value . getFirstChild () ; }
Distance : 8

92
Tree	{ super ( paint ) ; this . value = stroke ; }
Code	{ super ( paint ) ; this . value = stroke ; }
Distance : 9

93
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = paint ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = paint ; }
Distance : 9

94
Tree	{ super ( paint , stroke , paint , outlineStroke ) ; this . value = value ; }
Code	{ super ( paint , stroke , paint , outlineStroke ) ; this . value = value ; }
Distance : 3

95
Tree	{ super ( value , stroke , paint ) ; this . value = value ; }
Code	{ super ( value , stroke , paint ) ; this . value = value ; }
Distance : 6

96
Tree	{ super ( alpha , stroke , paint ) ; this . value = new double [] { value } ; }
Code	{ super ( alpha , stroke , paint ) ; this . value = new double [] { value } ; }
Distance : 11

97
Tree	{ super ( paint , stroke , alpha ) ; this . value = value ; }
Code	{ super ( paint , stroke , alpha ) ; this . value = value ; }
Distance : 4

98
Tree	{ super ( alpha , stroke ) ; this . value = value . value () ; }
Code	{ super ( alpha , stroke ) ; this . value = value . value () ; }
Distance : 10

99
Tree	{ super ( paint , stroke , paint ) ; this . value = value . getName () ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value . getName () ; }
Distance : 8

100
Tree	{ super ( outlineStroke , stroke ) ; }
Code	{ super ( outlineStroke , stroke ) ; }
Distance : 13

101
Tree	{ super ( paint ? LocalizedFormats.NUMBER_TOO_SMALL : LanguageMode.NO_TRANSPILE ) ; this . value = value ; }
Code	{ super ( paint ? LocalizedFormats.NUMBER_TOO_SMALL : LanguageMode.NO_TRANSPILE ) ; this . value = value ; }
Distance : 8

102
Tree	{ super ( paint ) ; this . value = getName ( value ) ; }
Code	{ super ( paint ) ; this . value = getName ( value ) ; }
Distance : 11

103
Tree	{ super ( paint ) ; this . value = updateScopeForAssignment ( value ) ; }
Code	{ super ( paint ) ; this . value = updateScopeForAssignment ( value ) ; }
Distance : 11

104
Tree	{ super ( paint , stroke ) ; this . value = value . sample () ; }
Code	{ super ( paint , stroke ) ; this . value = value . sample () ; }
Distance : 9

105
Tree	{ super ( paint ? relativeAccuracy : extraInterfaces ) ; this . value = value ; }
Code	{ super ( paint ? relativeAccuracy : extraInterfaces ) ; this . value = value ; }
Distance : 8

106
Tree	{ super ( null , stroke , paint , alpha , alpha , outlineStroke ) ; this . value = value ; }
Code	{ super ( null , stroke , paint , alpha , alpha , outlineStroke ) ; this . value = value ; }
Distance : 5

107
Tree	{ super ( paint , stroke , paint ) ; this . stroke = value ; }
Code	{ super ( paint , stroke , paint ) ; this . stroke = value ; }
Distance : 6

108
Tree	{ super ( null , stroke , paint , alpha , alpha , paint ) ; this . value = value ; }
Code	{ super ( null , stroke , paint , alpha , alpha , paint ) ; this . value = value ; }
Distance : 5

109
Tree	{ super ( paint , stroke ) ; this . value = value . charAt () ; }
Code	{ super ( paint , stroke ) ; this . value = value . charAt () ; }
Distance : 9

110
Tree	{ super ( null , stroke , paint , alpha , stroke , alpha ) ; this . value = value ; }
Code	{ super ( null , stroke , paint , alpha , stroke , alpha ) ; this . value = value ; }
Distance : 5

111
Tree	{ super ( paint , stroke , stroke , alpha ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , stroke , stroke , alpha ) ; this . value = new double [] { value } ; }
Distance : 8

112
Tree	{ super ( stroke , stroke ) ; this . value = value . value () ; }
Code	{ super ( stroke , stroke ) ; this . value = value . value () ; }
Distance : 10

113
Tree	{ super ( paint , stroke , paint ) ; this . value = value . valueOf () ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value . valueOf () ; }
Distance : 8

114
Tree	{ super ( stroke ) ; this . value = value ; }
Code	{ super ( stroke ) ; this . value = value ; }
Distance : 8

115
Tree	{ super ( outlineStroke ) ; this . value = value . value () ; }
Code	{ super ( outlineStroke ) ; this . value = value . value () ; }
Distance : 11

116
Tree	{ super ( paint , stroke , paint ) ; this . value = value . abs () ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value . abs () ; }
Distance : 8

117
Tree	{ super ( LocalizedFormats.DIMENSIONS_MISMATCH , stroke ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.DIMENSIONS_MISMATCH , stroke ) ; this . value = value ; }
Distance : 7

118
Tree	{ super ( outlineStroke ) ; this . value = new double [] { value } ; }
Code	{ super ( outlineStroke ) ; this . value = new double [] { value } ; }
Distance : 13

119
Tree	{ super ( alpha ) ; this . value = value . value () ; }
Code	{ super ( alpha ) ; this . value = value . value () ; }
Distance : 11

120
Tree	{ super ( System.out , stroke ) ; this . value = value ; }
Code	{ super ( System.out , stroke ) ; this . value = value ; }
Distance : 7

121
Tree	{ super ( paint , stroke , paint ) ; this . value = value . charAt () ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value . charAt () ; }
Distance : 8

122
Tree	{ super ( paint , stroke , paint , paint ) ; this . value = value ; }
Code	{ super ( paint , stroke , paint , paint ) ; this . value = value ; }
Distance : 4

123
Tree	{ super ( paint , stroke ) ; this . value = value . format () ; }
Code	{ super ( paint , stroke ) ; this . value = value . format () ; }
Distance : 9

124
Tree	{ super ( paint , stroke , paint , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , stroke , paint , stroke ) ; this . value = new double [] { value } ; }
Distance : 9

125
Tree	{ super ( paint , alpha ) ; }
Code	{ super ( paint , alpha ) ; }
Distance : 12

126
Tree	{ super ( paint ) ; this . value = value ; }
Code	{ super ( paint ) ; this . value = value ; }
Distance : 8

127
Tree	{ super ( paint , stroke ) ; this . value = value . toLowerCase () ; }
Code	{ super ( paint , stroke ) ; this . value = value . toLowerCase () ; }
Distance : 9

128
Tree	{ super ( null , stroke , paint , alpha , alpha , stroke ) ; this . value = value ; }
Code	{ super ( null , stroke , paint , alpha , alpha , stroke ) ; this . value = value ; }
Distance : 5

129
Tree	{ super ( paint ? relativeAccuracy : paint ) ; this . value = value ; }
Code	{ super ( paint ? relativeAccuracy : paint ) ; this . value = value ; }
Distance : 8

130
Tree	{ super ( null , stroke , paint , outlineStroke , alpha , alpha ) ; this . value = value ; }
Code	{ super ( null , stroke , paint , outlineStroke , alpha , alpha ) ; this . value = value ; }
Distance : 4

131
Tree	{ super ( paint , stroke ) ; this . value = value ; }
Code	{ super ( paint , stroke ) ; this . value = value ; }
Distance : 6

132
Tree	{ super ( paint , stroke , paint ) ; this . value = value ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value ; }
Distance : 5

133
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = value ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = value ; }
Distance : 3

134
Tree	{ super ( null , stroke , stroke , alpha , alpha , alpha ) ; this . value = value ; }
Code	{ super ( null , stroke , stroke , alpha , alpha , alpha ) ; this . value = value ; }
Distance : 5

135
Tree	{ super ( paint , stroke ) ; this . value = value . value () ; }
Code	{ super ( paint , stroke ) ; this . value = value . value () ; }
Distance : 9

136
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = new double [] { value } ; }
Distance : 8

137
Tree	{ super ( paint ) ; this . value = new double [] { value } ; }
Code	{ super ( paint ) ; this . value = new double [] { value } ; }
Distance : 13

138
Tree	{ super ( paint , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , stroke ) ; this . value = new double [] { value } ; }
Distance : 11

139
Tree	{ super ( paint , stroke ) ; this . stroke = value ; }
Code	{ super ( paint , stroke ) ; this . stroke = value ; }
Distance : 7

140
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = value . sample () ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = value . sample () ; }
Distance : 6

141
Tree	{ super ( paint , stroke ) ; this . value = value . valueOf () ; }
Code	{ super ( paint , stroke ) ; this . value = value . valueOf () ; }
Distance : 9

142
Tree	{ super ( paint , stroke , paint ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , stroke , paint ) ; this . value = new double [] { value } ; }
Distance : 10

143
Tree	{ super ( outlinePaint , stroke ) ; this . value = value ; }
Code	{ super ( outlinePaint , stroke ) ; this . value = value ; }
Distance : 7

144
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . stroke = value ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . stroke = value ; }
Distance : 9

145
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . paint = value ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . paint = value ; }
Distance : 9

146
Tree	{ super ( paint , alpha ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , alpha ) ; this . value = new double [] { value } ; }
Distance : 11

147
Tree	{ super ( paint , stroke ) ; this . value = stroke ; }
Code	{ super ( paint , stroke ) ; this . value = stroke ; }
Distance : 7

148
Tree	{ super ( paint ) ; this . value = value . value () ; }
Code	{ super ( paint ) ; this . value = value . value () ; }
Distance : 11

149
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = value ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = value ; }
Distance : 8

150
Tree	{ super ( outlinePaint , stroke ) ; }
Code	{ super ( outlinePaint , stroke ) ; }
Distance : 13

151
Tree	{ super ( value , stroke ) ; }
Code	{ super ( value , stroke ) ; }
Distance : 13

152
Tree	{ super ( Token.PARAM_LIST , stroke ) ; this . value = value ; }
Code	{ super ( Token.PARAM_LIST , stroke ) ; this . value = value ; }
Distance : 7

153
Tree	{ super ( paint ) ; this . value = value . valueOf () ; }
Code	{ super ( paint ) ; this . value = value . valueOf () ; }
Distance : 11

154
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = new int [] { value } ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = new int [] { value } ; }
Distance : 8

155
Tree	{ super ( paint ) ; this . value = value ; disableTypeCheck }
Code	{ super ( paint ) ; this . value = value ; disableTypeCheck }
Distance : 9

156
Tree	{ super ( paint , stroke , stroke , alpha ) ; this . value = value ; }
Code	{ super ( paint , stroke , stroke , alpha ) ; this . value = value ; }
Distance : 3

157
Tree	{ super ( stroke , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( stroke , stroke ) ; this . value = new double [] { value } ; }
Distance : 12

158
Tree	{ super ( paint ) ; this . value = new long [] { value } ; }
Code	{ super ( paint ) ; this . value = new long [] { value } ; }
Distance : 13

159
Tree	{ super ( paint , stroke , paint ) ; this . value = value . value () ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value . value () ; }
Distance : 8

160
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = value . toLowerCase () ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = value . toLowerCase () ; }
Distance : 6

161
Tree	{ super ( paint , stroke ) ; }
Code	{ super ( paint , stroke ) ; }
Distance : 12

162
Tree	{ super ( paint , paint ) ; }
Code	{ super ( paint , paint ) ; }
Distance : 13

163
Tree	{ super ( stroke , stroke , paint , alpha ) ; this . value = new double [] { value } ; }
Code	{ super ( stroke , stroke , paint , alpha ) ; this . value = new double [] { value } ; }
Distance : 9

164
Tree	{ super ( paint ) ; this . value = getLastCompiler ( value ) ; }
Code	{ super ( paint ) ; this . value = getLastCompiler ( value ) ; }
Distance : 11

165
Tree	{ super ( LocalizedFormats.NOT_POSITIVE_SCALE , stroke ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.NOT_POSITIVE_SCALE , stroke ) ; this . value = value ; }
Distance : 7

166
Tree	{ super ( stroke , stroke , paint ) ; this . value = new double [] { value } ; }
Code	{ super ( stroke , stroke , paint ) ; this . value = new double [] { value } ; }
Distance : 11

167
Tree	{ super ( paint , stroke ) ; this . value = value . instance () ; }
Code	{ super ( paint , stroke ) ; this . value = value . instance () ; }
Distance : 9

168
Tree	{ super ( value , stroke ) ; this . value = value ; }
Code	{ super ( value , stroke ) ; this . value = value ; }
Distance : 7

169
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . outlineStroke = value ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . outlineStroke = value ; }
Distance : 9

170
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = value . format () ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = value . format () ; }
Distance : 6

171
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . outlinePaint = value ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . outlinePaint = value ; }
Distance : 9

172
Tree	{ super ( alpha , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( alpha , stroke ) ; this . value = new double [] { value } ; }
Distance : 12

173
Tree	{ super ( null , stroke , paint , alpha , alpha , alpha ) ; this . value = value ; }
Code	{ super ( null , stroke , paint , alpha , alpha , alpha ) ; this . value = value ; }
Distance : 5

174
Tree	{ super ( paint , stroke , paint , stroke ) ; this . value = value ; }
Code	{ super ( paint , stroke , paint , stroke ) ; this . value = value ; }
Distance : 4

175
Tree	{ super ( paint ) ; this . value = new float [] { value } ; }
Code	{ super ( paint ) ; this . value = new float [] { value } ; }
Distance : 13

176
Tree	{ super ( paint , stroke , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , stroke , stroke ) ; this . value = new double [] { value } ; }
Distance : 10

177
Tree	{ super ( null , stroke , paint , stroke , alpha , alpha ) ; this . value = value ; }
Code	{ super ( null , stroke , paint , stroke , alpha , alpha ) ; this . value = value ; }
Distance : 5

178
Tree	{ super ( paint , alpha ) ; this . value = value ; }
Code	{ super ( paint , alpha ) ; this . value = value ; }
Distance : 6

179
Tree	{ super ( paint ) ; this . value = value ; synchronized }
Code	{ super ( paint ) ; this . value = value ; synchronized }
Distance : 9

180
Tree	{ super ( stroke , stroke , paint ) ; this . value = value ; }
Code	{ super ( stroke , stroke , paint ) ; this . value = value ; }
Distance : 6

181
Tree	{ super ( paint ) ; this . value = new short [] { value } ; }
Code	{ super ( paint ) ; this . value = new short [] { value } ; }
Distance : 13

182
Tree	{ super ( outlineStroke , stroke , paint ) ; this . value = value ; }
Code	{ super ( outlineStroke , stroke , paint ) ; this . value = value ; }
Distance : 6

183
Tree	{ super ( LocalizedFormats.NOT_POSITIVE_SCALE , stroke , paint ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.NOT_POSITIVE_SCALE , stroke , paint ) ; this . value = value ; }
Distance : 6

184
Tree	{ super ( paint ) ; this . value = value ; super }
Code	{ super ( paint ) ; this . value = value ; super }
Distance : 9

185
Tree	{ super ( alpha , stroke , paint , alpha ) ; this . value = value ; }
Code	{ super ( alpha , stroke , paint , alpha ) ; this . value = value ; }
Distance : 4

186
Tree	{ super ( paint , alpha , paint ) ; this . value = value ; }
Code	{ super ( paint , alpha , paint ) ; this . value = value ; }
Distance : 6

187
Tree	{ super ( paint , stroke , paint , stroke ) ; this . value = value . value () ; }
Code	{ super ( paint , stroke , paint , stroke ) ; this . value = value . value () ; }
Distance : 7

188
Tree	{ super ( paint , stroke , paint ) ; this . value = new byte [] { value } ; }
Code	{ super ( paint , stroke , paint ) ; this . value = new byte [] { value } ; }
Distance : 10

189
Tree	{ super ( value , stroke , paint , alpha ) ; this . value = value ; }
Code	{ super ( value , stroke , paint , alpha ) ; this . value = value ; }
Distance : 4

190
Tree	{ super ( paint ) ; this . value = alpha ; }
Code	{ super ( paint ) ; this . value = alpha ; }
Distance : 9

191
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = value . valueOf () ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = value . valueOf () ; }
Distance : 6

192
Tree	{ super ( paint , stroke ) ; this . value = value . getFirstChild () ; }
Code	{ super ( paint , stroke ) ; this . value = value . getFirstChild () ; }
Distance : 9

193
Tree	{ super ( paint ) ; this . value = value ; ++ }
Code	{ super ( paint ) ; this . value = value ; ++ }
Distance : 9

194
Tree	{ super ( paint , stroke ) ; this . value = new float [] { value } ; }
Code	{ super ( paint , stroke ) ; this . value = new float [] { value } ; }
Distance : 11

195
Tree	{ super ( alpha , stroke , paint , alpha ) ; this . value = new double [] { value } ; }
Code	{ super ( alpha , stroke , paint , alpha ) ; this . value = new double [] { value } ; }
Distance : 9

196
Tree	{ super ( null , stroke , alpha , alpha , alpha , alpha ) ; this . value = value ; }
Code	{ super ( null , stroke , alpha , alpha , alpha , alpha ) ; this . value = value ; }
Distance : 5

197
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = alpha ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = alpha ; }
Distance : 9

198
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = new byte [] { value } ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = new byte [] { value } ; }
Distance : 8

199
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = outlineStroke ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = outlineStroke ; }
Distance : 9

========================================================================


========================================================================
Example Number: 3
Parent Code is: 
if ( index < NUMBER_CONSTANT ) { return; }
-------------------------------------------------------------------------------
Child code is: 
if ( index < NUMBER_CONSTANT ) { throw new UnknownKeyException ( STRING_CONSTANT + key + STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=index}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (500{val=return;}) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=index}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=UnknownKeyException})) (214{val=(}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (800{val=key}) (200{val=+}) (45{val=STRING_CONSTANT})) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/18/parent/source_org_jfree_data_DefaultKeyedValues.java
-------------------------------------------------------------------------------
Edit Distance : 11
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( index < NUMBER_CONSTANT ) { return; }
Code	if ( index < NUMBER_CONSTANT ) { return; }
Distance : 11

1
Tree	if ( index . abs ( index ) ) { return; }
Code	if ( index . abs ( index ) ) { return; }
Distance : 14

2
Tree	if ( ! index . abs ( index ) ) { return; }
Code	if ( ! index . abs ( index ) ) { return; }
Distance : 15

3
Tree	if ( size () == null ) { return; }
Code	if ( size () == null ) { return; }
Distance : 15

4
Tree	if ( index < NUMBER_CONSTANT ) { super(); }
Code	if ( index < NUMBER_CONSTANT ) { super(); }
Distance : 11

5
Tree	if ( index . valueOf ( index ) > index ) { return; }
Code	if ( index . valueOf ( index ) > index ) { return; }
Distance : 14

6
Tree	if ( index != null ) { break; }
Code	if ( index != null ) { break; }
Distance : 13

7
Tree	if ( index != key ) { return; }
Code	if ( index != key ) { return; }
Distance : 13

8
Tree	if ( ! index . getTolerance () ) { return; }
Code	if ( ! index . getTolerance () ) { return; }
Distance : 15

9
Tree	if ( index != index ) { break; }
Code	if ( index != index ) { break; }
Distance : 13

10
Tree	if ( index < NUMBER_CONSTANT ) { continue; }
Code	if ( index < NUMBER_CONSTANT ) { continue; }
Distance : 11

11
Tree	if ( index . isHoistScope ( index ) > index ) { return; }
Code	if ( index . isHoistScope ( index ) > index ) { return; }
Distance : 14

12
Tree	if ( index . index ( index ) > index ) { return; }
Code	if ( index . index ( index ) > index ) { return; }
Distance : 14

13
Tree	if ( index != null ) { super(); }
Code	if ( index != null ) { super(); }
Distance : 13

14
Tree	if ( ! index . isEnhancedFor ( index , false ) ) { return; }
Code	if ( ! index . isEnhancedFor ( index , false ) ) { return; }
Distance : 15

15
Tree	if ( index != index ) { null }
Code	if ( index != index ) { null }
Distance : 13

16
Tree	if ( key != null ) { return; }
Code	if ( key != null ) { return; }
Distance : 14

17
Tree	if ( ! index . index () ) { return; }
Code	if ( ! index . index () ) { return; }
Distance : 15

18
Tree	if ( ! index . isEnhancedFor () ) { return; }
Code	if ( ! index . isEnhancedFor () ) { return; }
Distance : 15

19
Tree	if ( key != index ) { return; }
Code	if ( key != index ) { return; }
Distance : 14

20
Tree	if ( index . isNaN ( index ) == null ) { return; }
Code	if ( index . isNaN ( index ) == null ) { return; }
Distance : 14

21
Tree	if ( ! getTolerance ( index ) ) { return; }
Code	if ( ! getTolerance ( index ) ) { return; }
Distance : 15

22
Tree	if ( index . toBooleanObject ( index ) ) { return; }
Code	if ( index . toBooleanObject ( index ) ) { return; }
Distance : 14

23
Tree	if ( index != null ) { null }
Code	if ( index != null ) { null }
Distance : 13

24
Tree	if ( index != TracerMode.OFF ) { return; }
Code	if ( index != TracerMode.OFF ) { return; }
Distance : 13

25
Tree	if ( key < NUMBER_CONSTANT ) { break; }
Code	if ( key < NUMBER_CONSTANT ) { break; }
Distance : 12

26
Tree	if ( index != null ) { return; }
Code	if ( index != null ) { return; }
Distance : 13

27
Tree	if ( ! key ) { super(); }
Code	if ( ! key ) { super(); }
Distance : 14

28
Tree	if ( ! index . getTolerance ( index , false ) ) { return; }
Code	if ( ! index . getTolerance ( index , false ) ) { return; }
Distance : 15

29
Tree	if ( ! key ) { return; }
Code	if ( ! key ) { return; }
Distance : 14

30
Tree	if ( ! key ) { continue; }
Code	if ( ! key ) { continue; }
Distance : 14

31
Tree	if ( index > index ) { continue; }
Code	if ( index > index ) { continue; }
Distance : 13

32
Tree	if ( ! index . getDataset ( index , false ) ) { return; }
Code	if ( ! index . getDataset ( index , false ) ) { return; }
Distance : 15

33
Tree	if ( index . valueOf ( index ) == null ) { return; }
Code	if ( index . valueOf ( index ) == null ) { return; }
Distance : 14

34
Tree	if ( ! index . toBooleanObject ( index ) ) { return; }
Code	if ( ! index . toBooleanObject ( index ) ) { return; }
Distance : 15

35
Tree	if ( ! returnChar ( index ) ) { return; }
Code	if ( ! returnChar ( index ) ) { return; }
Distance : 15

36
Tree	if ( index < NUMBER_CONSTANT ) { default: }
Code	if ( index < NUMBER_CONSTANT ) { default: }
Distance : 11

37
Tree	if ( key < NUMBER_CONSTANT ) { super(); }
Code	if ( key < NUMBER_CONSTANT ) { super(); }
Distance : 12

38
Tree	if ( ! index ) { super(); }
Code	if ( ! index ) { super(); }
Distance : 14

39
Tree	if ( key < NUMBER_CONSTANT ) { continue; }
Code	if ( key < NUMBER_CONSTANT ) { continue; }
Distance : 12

40
Tree	if ( index > key ) { return; }
Code	if ( index > key ) { return; }
Distance : 13

41
Tree	if ( ! index ) { continue; }
Code	if ( ! index ) { continue; }
Distance : 14

42
Tree	if ( index != index ) { return; }
Code	if ( index != index ) { return; }
Distance : 13

43
Tree	if ( ! index . valueOf ( index ) ) { return; }
Code	if ( ! index . valueOf ( index ) ) { return; }
Distance : 15

44
Tree	if ( ! getGoalType ( index ) ) { return; }
Code	if ( ! getGoalType ( index ) ) { return; }
Distance : 15

45
Tree	if ( ! index . isHoistScope ( index , false ) ) { return; }
Code	if ( ! index . isHoistScope ( index , false ) ) { return; }
Distance : 15

46
Tree	if ( ! index . equal ( index , false ) ) { return; }
Code	if ( ! index . equal ( index , false ) ) { return; }
Distance : 15

47
Tree	if ( index . getParent ( index , false ) ) { return; }
Code	if ( index . getParent ( index , false ) ) { return; }
Distance : 14

48
Tree	if ( ! index . index ( index , false ) ) { return; }
Code	if ( ! index . index ( index , false ) ) { return; }
Distance : 15

49
Tree	if ( index > index ) { super(); }
Code	if ( index > index ) { super(); }
Distance : 13

50
Tree	if ( index . isHoistScope () ) { return; }
Code	if ( index . isHoistScope () ) { return; }
Distance : 14

51
Tree	if ( index . abs () ) { return; }
Code	if ( index . abs () ) { return; }
Distance : 14

52
Tree	if ( index . abs ( index ) > index ) { return; }
Code	if ( index . abs ( index ) > index ) { return; }
Distance : 14

53
Tree	if ( index > key ) { break; }
Code	if ( index > key ) { break; }
Distance : 13

54
Tree	if ( index != null < index . getTimeZone ( index ) ) { return; }
Code	if ( index != null < index . getTimeZone ( index ) ) { return; }
Distance : 14

55
Tree	if ( index <= NUMBER_CONSTANT ) { null }
Code	if ( index <= NUMBER_CONSTANT ) { null }
Distance : 12

56
Tree	if ( index <= NUMBER_CONSTANT ) { continue; }
Code	if ( index <= NUMBER_CONSTANT ) { continue; }
Distance : 12

57
Tree	if ( index . getParent ( index ) ) { return; }
Code	if ( index . getParent ( index ) ) { return; }
Distance : 14

58
Tree	if ( index . toBooleanObject () ) { return; }
Code	if ( index . toBooleanObject () ) { return; }
Distance : 14

59
Tree	if ( ! isPowerOf2 ( index ) ) { return; }
Code	if ( ! isPowerOf2 ( index ) ) { return; }
Distance : 15

60
Tree	if ( index <= NUMBER_CONSTANT ) { super(); }
Code	if ( index <= NUMBER_CONSTANT ) { super(); }
Distance : 12

61
Tree	if ( ! index . getDataset ( index ) ) { return; }
Code	if ( ! index . getDataset ( index ) ) { return; }
Distance : 15

62
Tree	if ( ! index . isHoistScope ( index ) ) { return; }
Code	if ( ! index . isHoistScope ( index ) ) { return; }
Distance : 15

63
Tree	if ( index > index ) { null }
Code	if ( index > index ) { null }
Distance : 13

64
Tree	if ( index != null < index . getDaysInYearMax ( index ) ) { return; }
Code	if ( index != null < index . getDaysInYearMax ( index ) ) { return; }
Distance : 14

65
Tree	if ( index != null < index . getParent ( index ) ) { return; }
Code	if ( index != null < index . getParent ( index ) ) { return; }
Distance : 14

66
Tree	if ( index != return; ) { return; }
Code	if ( index != return; ) { return; }
Distance : 13

67
Tree	if ( index . abs ( index ) == null ) { return; }
Code	if ( index . abs ( index ) == null ) { return; }
Distance : 14

68
Tree	if ( ! index ) { null }
Code	if ( ! index ) { null }
Distance : 14

69
Tree	if ( ! index . getTolerance ( index ) ) { return; }
Code	if ( ! index . getTolerance ( index ) ) { return; }
Distance : 15

70
Tree	if ( index > index ) { return; }
Code	if ( index > index ) { return; }
Distance : 13

71
Tree	if ( index != IncrementalCheckMode.GENERATE_IJS ) { return; }
Code	if ( index != IncrementalCheckMode.GENERATE_IJS ) { return; }
Distance : 13

72
Tree	if ( ! index . valueOf ( index , false ) ) { return; }
Code	if ( ! index . valueOf ( index , false ) ) { return; }
Distance : 15

73
Tree	if ( ! index . equal ( index ) ) { return; }
Code	if ( ! index . equal ( index ) ) { return; }
Distance : 15

74
Tree	if ( index . getParent () ) { return; }
Code	if ( index . getParent () ) { return; }
Distance : 14

75
Tree	if ( index . isNaN () ) { return; }
Code	if ( index . isNaN () ) { return; }
Distance : 14

76
Tree	if ( index . valueOf ( index ) ) { return; }
Code	if ( index . valueOf ( index ) ) { return; }
Distance : 14

77
Tree	if ( ! index . abs () ) { return; }
Code	if ( ! index . abs () ) { return; }
Distance : 15

78
Tree	if ( ! index ) { return; }
Code	if ( ! index ) { return; }
Distance : 14

79
Tree	if ( index != null ) { default: }
Code	if ( index != null ) { default: }
Distance : 13

80
Tree	if ( index () == null ) { return; }
Code	if ( index () == null ) { return; }
Distance : 14

81
Tree	if ( index . abs ( index , false ) ) { return; }
Code	if ( index . abs ( index , false ) ) { return; }
Distance : 14

82
Tree	if ( ! index . toBooleanObject ( index , false ) ) { return; }
Code	if ( ! index . toBooleanObject ( index , false ) ) { return; }
Distance : 15

83
Tree	if ( index != f.length ) { return; }
Code	if ( index != f.length ) { return; }
Distance : 13

84
Tree	if ( index . isEnhancedFor ( index ) ) { return; }
Code	if ( index . isEnhancedFor ( index ) ) { return; }
Distance : 14

85
Tree	if ( index . equal ( index ) ) { return; }
Code	if ( index . equal ( index ) ) { return; }
Distance : 14

86
Tree	if ( index != data.length ) { return; }
Code	if ( index != data.length ) { return; }
Distance : 13

87
Tree	if ( index . getParent ( index ) == null ) { return; }
Code	if ( index . getParent ( index ) == null ) { return; }
Distance : 14

88
Tree	if ( ! index . getParent ( index , false ) ) { return; }
Code	if ( ! index . getParent ( index , false ) ) { return; }
Distance : 15

89
Tree	if ( ! index . index ( index ) ) { return; }
Code	if ( ! index . index ( index ) ) { return; }
Distance : 15

90
Tree	if ( index . toBooleanObject ( index ) == null ) { return; }
Code	if ( index . toBooleanObject ( index ) == null ) { return; }
Distance : 14

91
Tree	if ( index <= NUMBER_CONSTANT ) { return; }
Code	if ( index <= NUMBER_CONSTANT ) { return; }
Distance : 12

92
Tree	if ( index . getDataset ( index ) ) { return; }
Code	if ( index . getDataset ( index ) ) { return; }
Distance : 14

93
Tree	if ( ! index . abs ( index , false ) ) { return; }
Code	if ( ! index . abs ( index , false ) ) { return; }
Distance : 15

94
Tree	if ( ! index . toBooleanObject () ) { return; }
Code	if ( ! index . toBooleanObject () ) { return; }
Distance : 15

95
Tree	if ( ! index . valueOf () ) { return; }
Code	if ( ! index . valueOf () ) { return; }
Distance : 15

96
Tree	if ( ! index . getParent () ) { return; }
Code	if ( ! index . getParent () ) { return; }
Distance : 15

97
Tree	if ( ! getDataset ( index ) ) { return; }
Code	if ( ! getDataset ( index ) ) { return; }
Distance : 15

98
Tree	if ( index != v.length ) { return; }
Code	if ( index != v.length ) { return; }
Distance : 13

99
Tree	if ( index . valueOf () ) { return; }
Code	if ( index . valueOf () ) { return; }
Distance : 14

100
Tree	if ( index ( index ) ) { return; }
Code	if ( index ( index ) ) { return; }
Distance : 14

101
Tree	if ( index != TypeInferenceMode.CHECKED ) { return; }
Code	if ( index != TypeInferenceMode.CHECKED ) { return; }
Distance : 13

102
Tree	if ( index . isHoistScope ( index ) ) { return; }
Code	if ( index . isHoistScope ( index ) ) { return; }
Distance : 14

103
Tree	if ( index . toBooleanObject ( index , false ) ) { return; }
Code	if ( index . toBooleanObject ( index , false ) ) { return; }
Distance : 14

104
Tree	if ( index . getParent ( index ) > index ) { return; }
Code	if ( index . getParent ( index ) > index ) { return; }
Distance : 14

105
Tree	if ( ! types ( index ) ) { return; }
Code	if ( ! types ( index ) ) { return; }
Distance : 15

106
Tree	if ( index . isEnhancedFor ( index , false ) ) { return; }
Code	if ( index . isEnhancedFor ( index , false ) ) { return; }
Distance : 14

107
Tree	if ( index . isNaN ( index ) ) { return; }
Code	if ( index . isNaN ( index ) ) { return; }
Distance : 14

108
Tree	if ( index . equal ( index , false ) ) { return; }
Code	if ( index . equal ( index , false ) ) { return; }
Distance : 14

109
Tree	if ( index . getDataset ( index , false ) ) { return; }
Code	if ( index . getDataset ( index , false ) ) { return; }
Distance : 14

110
Tree	if ( index < NUMBER_CONSTANT ) { break; }
Code	if ( index < NUMBER_CONSTANT ) { break; }
Distance : 11

111
Tree	if ( ! getNumber ( index ) ) { return; }
Code	if ( ! getNumber ( index ) ) { return; }
Distance : 15

112
Tree	if ( index . isEnhancedFor () ) { return; }
Code	if ( index . isEnhancedFor () ) { return; }
Distance : 14

113
Tree	if ( index . equal () ) { return; }
Code	if ( index . equal () ) { return; }
Distance : 14

114
Tree	if ( index . getDataset () ) { return; }
Code	if ( index . getDataset () ) { return; }
Distance : 14

115
Tree	if ( ! isClinitMethod ( index ) ) { return; }
Code	if ( ! isClinitMethod ( index ) ) { return; }
Distance : 15

116
Tree	if ( isEquals () == null ) { return; }
Code	if ( isEquals () == null ) { return; }
Distance : 15

117
Tree	if ( index . isEnhancedFor ( index ) > index ) { return; }
Code	if ( index . isEnhancedFor ( index ) > index ) { return; }
Distance : 14

118
Tree	if ( index . equal ( index ) > index ) { return; }
Code	if ( index . equal ( index ) > index ) { return; }
Distance : 14

119
Tree	if ( index . getDataset ( index ) > index ) { return; }
Code	if ( index . getDataset ( index ) > index ) { return; }
Distance : 14

120
Tree	if ( isEquals ( index ) ) { return; }
Code	if ( isEquals ( index ) ) { return; }
Distance : 15

121
Tree	if ( ! index . isEnhancedFor ( index ) ) { return; }
Code	if ( ! index . isEnhancedFor ( index ) ) { return; }
Distance : 15

122
Tree	if ( ! index . getDataset () ) { return; }
Code	if ( ! index . getDataset () ) { return; }
Distance : 15

123
Tree	if ( array () == null ) { return; }
Code	if ( array () == null ) { return; }
Distance : 15

124
Tree	if ( getNumber () == null ) { return; }
Code	if ( getNumber () == null ) { return; }
Distance : 15

125
Tree	if ( array ( index ) ) { return; }
Code	if ( array ( index ) ) { return; }
Distance : 15

126
Tree	if ( index . isHoistScope ( index ) == null ) { return; }
Code	if ( index . isHoistScope ( index ) == null ) { return; }
Distance : 14

127
Tree	if ( index != v.data ) { return; }
Code	if ( index != v.data ) { return; }
Distance : 13

128
Tree	if ( index . index ( index ) == null ) { return; }
Code	if ( index . index ( index ) == null ) { return; }
Distance : 14

129
Tree	if ( index . index ( index , false ) ) { return; }
Code	if ( index . index ( index , false ) ) { return; }
Distance : 14

130
Tree	if ( index != null ) { continue; }
Code	if ( index != null ) { continue; }
Distance : 13

131
Tree	if ( index < NUMBER_CONSTANT ) { null }
Code	if ( index < NUMBER_CONSTANT ) { null }
Distance : 11

132
Tree	if ( index . toBooleanObject ( index ) > index ) { return; }
Code	if ( index . toBooleanObject ( index ) > index ) { return; }
Distance : 14

133
Tree	if ( index . toBooleanObject ( index ) == return; ) { return; }
Code	if ( index . toBooleanObject ( index ) == return; ) { return; }
Distance : 14

134
Tree	if ( index . valueOf ( index , false ) ) { return; }
Code	if ( index . valueOf ( index , false ) ) { return; }
Distance : 14

135
Tree	if ( index . isEnhancedFor ( index ) == null ) { return; }
Code	if ( index . isEnhancedFor ( index ) == null ) { return; }
Distance : 14

136
Tree	if ( getParent ( index ) ) { return; }
Code	if ( getParent ( index ) ) { return; }
Distance : 15

137
Tree	if ( getNumber ( index ) ) { return; }
Code	if ( getNumber ( index ) ) { return; }
Distance : 15

138
Tree	if ( abs ( index ) ) { return; }
Code	if ( abs ( index ) ) { return; }
Distance : 15

139
Tree	if ( abs () ) { return; }
Code	if ( abs () ) { return; }
Distance : 14

140
Tree	if ( values.length ( index ) ) { return; }
Code	if ( values.length ( index ) ) { return; }
Distance : 15

141
Tree	if ( values.length () ) { return; }
Code	if ( values.length () ) { return; }
Distance : 14

142
Tree	if ( abs () == null ) { return; }
Code	if ( abs () == null ) { return; }
Distance : 15

143
Tree	if ( getParent () ) { return; }
Code	if ( getParent () ) { return; }
Distance : 14

144
Tree	if ( index . isNaN ( index ) > index ) { return; }
Code	if ( index . isNaN ( index ) > index ) { return; }
Distance : 14

145
Tree	if ( index != MathUtils.TWO_PI ) { return; }
Code	if ( index != MathUtils.TWO_PI ) { return; }
Distance : 13

146
Tree	if ( index != index ) { super(); }
Code	if ( index != index ) { super(); }
Distance : 13

147
Tree	if ( isNaN ( index ) ) { return; }
Code	if ( isNaN ( index ) ) { return; }
Distance : 15

148
Tree	if ( isEquals () ) { return; }
Code	if ( isEquals () ) { return; }
Distance : 14

149
Tree	if ( index != Double.NaN ) { return; }
Code	if ( index != Double.NaN ) { return; }
Distance : 13

150
Tree	if ( size ( index ) ) { return; }
Code	if ( size ( index ) ) { return; }
Distance : 15

151
Tree	if ( ! index . isHoistScope () ) { return; }
Code	if ( ! index . isHoistScope () ) { return; }
Distance : 15

152
Tree	if ( index != LocalizedFormats.CARDAN_ANGLES_SINGULARITY ) { return; }
Code	if ( index != LocalizedFormats.CARDAN_ANGLES_SINGULARITY ) { return; }
Distance : 13

153
Tree	if ( values.length () == null ) { return; }
Code	if ( values.length () == null ) { return; }
Distance : 15

154
Tree	if ( index != null < index . isNaN ( index ) ) { return; }
Code	if ( index != null < index . isNaN ( index ) ) { return; }
Distance : 14

155
Tree	if ( index > key ) { continue; }
Code	if ( index > key ) { continue; }
Distance : 13

156
Tree	if ( index != null < index . getMethod ( index ) ) { return; }
Code	if ( index != null < index . getMethod ( index ) ) { return; }
Distance : 14

157
Tree	if ( index . isNaN ( index , false ) ) { return; }
Code	if ( index . isNaN ( index , false ) ) { return; }
Distance : 14

158
Tree	if ( index != index ) { continue; }
Code	if ( index != index ) { continue; }
Distance : 13

159
Tree	if ( isNaN () ) { return; }
Code	if ( isNaN () ) { return; }
Distance : 14

160
Tree	if ( index != null < index . getString ( index ) ) { return; }
Code	if ( index != null < index . getString ( index ) ) { return; }
Distance : 14

161
Tree	if ( index != null < index . getVertices ( index ) ) { return; }
Code	if ( index != null < index . getVertices ( index ) ) { return; }
Distance : 14

162
Tree	if ( size () ) { return; }
Code	if ( size () ) { return; }
Distance : 14

163
Tree	if ( getDimension ( index ) ) { return; }
Code	if ( getDimension ( index ) ) { return; }
Distance : 15

164
Tree	if ( ! index . getParent ( index ) ) { return; }
Code	if ( ! index . getParent ( index ) ) { return; }
Distance : 15

165
Tree	if ( index . isHoistScope ( index , false ) ) { return; }
Code	if ( index . isHoistScope ( index , false ) ) { return; }
Distance : 14

166
Tree	if ( ! index . equal () ) { return; }
Code	if ( ! index . equal () ) { return; }
Distance : 15

167
Tree	if ( index () ) { return; }
Code	if ( index () ) { return; }
Distance : 13

168
Tree	if ( index > index ) { break; }
Code	if ( index > index ) { break; }
Distance : 13

169
Tree	if ( ! getRandomGenerator ( index ) ) { return; }
Code	if ( ! getRandomGenerator ( index ) ) { return; }
Distance : 15

170
Tree	if ( index . index ( index ) ) { return; }
Code	if ( index . index ( index ) ) { return; }
Distance : 14

171
Tree	if ( ! allDefinitionsEquivalent ( index ) ) { return; }
Code	if ( ! allDefinitionsEquivalent ( index ) ) { return; }
Distance : 15

172
Tree	if ( getDimension () ) { return; }
Code	if ( getDimension () ) { return; }
Distance : 14

173
Tree	if ( isNaN () == null ) { return; }
Code	if ( isNaN () == null ) { return; }
Distance : 15

174
Tree	if ( array () ) { return; }
Code	if ( array () ) { return; }
Distance : 14

175
Tree	if ( index . index () ) { return; }
Code	if ( index . index () ) { return; }
Distance : 14

176
Tree	if ( getDimension () == null ) { return; }
Code	if ( getDimension () == null ) { return; }
Distance : 15

177
Tree	if ( index != null < index . getColumnDimension ( index ) ) { return; }
Code	if ( index != null < index . getColumnDimension ( index ) ) { return; }
Distance : 14

178
Tree	if ( index . abs ( index ) == return; ) { return; }
Code	if ( index . abs ( index ) == return; ) { return; }
Distance : 14

179
Tree	if ( index != super(); ) { return; }
Code	if ( index != super(); ) { return; }
Distance : 13

180
Tree	if ( key > index ) { return; }
Code	if ( key > index ) { return; }
Distance : 14

181
Tree	if ( index != null < index . getSimplifiedName ( index ) ) { return; }
Code	if ( index != null < index . getSimplifiedName ( index ) ) { return; }
Distance : 14

182
Tree	if ( index != key ) { break; }
Code	if ( index != key ) { break; }
Distance : 13

183
Tree	if ( key <= NUMBER_CONSTANT ) { return; }
Code	if ( key <= NUMBER_CONSTANT ) { return; }
Distance : 13

184
Tree	if ( getNumber () ) { return; }
Code	if ( getNumber () ) { return; }
Distance : 14

185
Tree	if ( index != key ) { super(); }
Code	if ( index != key ) { super(); }
Distance : 13

186
Tree	if ( index > index ) { default: }
Code	if ( index > index ) { default: }
Distance : 13

187
Tree	if ( getParent () == null ) { return; }
Code	if ( getParent () == null ) { return; }
Distance : 15

188
Tree	if ( index <= NUMBER_CONSTANT ) { break; }
Code	if ( index <= NUMBER_CONSTANT ) { break; }
Distance : 12

189
Tree	if ( key <= NUMBER_CONSTANT ) { break; }
Code	if ( key <= NUMBER_CONSTANT ) { break; }
Distance : 13

190
Tree	if ( index != break; ) { return; }
Code	if ( index != break; ) { return; }
Distance : 13

191
Tree	if ( ! index ) { break; }
Code	if ( ! index ) { break; }
Distance : 14

192
Tree	if ( index <= NUMBER_CONSTANT ) { default: }
Code	if ( index <= NUMBER_CONSTANT ) { default: }
Distance : 12

193
Tree	if ( index != null < index . toBooleanObject ( index ) ) { return; }
Code	if ( index != null < index . toBooleanObject ( index ) ) { return; }
Distance : 14

194
Tree	if ( ! index ) { default: }
Code	if ( ! index ) { default: }
Distance : 14

195
Tree	if ( key < NUMBER_CONSTANT ) { return; }
Code	if ( key < NUMBER_CONSTANT ) { return; }
Distance : 12

196
Tree	if ( key <= NUMBER_CONSTANT ) { continue; }
Code	if ( key <= NUMBER_CONSTANT ) { continue; }
Distance : 13

197
Tree	if ( ! key ) { break; }
Code	if ( ! key ) { break; }
Distance : 14

198
Tree	if ( key <= NUMBER_CONSTANT ) { super(); }
Code	if ( key <= NUMBER_CONSTANT ) { super(); }
Distance : 13

199
Tree	if ( index != index ) { default: }
Code	if ( index != index ) { default: }
Distance : 13

========================================================================


========================================================================
Example Number: 4
Parent Code is: 
if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( categoryKeys.length != getCategoryCount () ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (40{val=categoryKeys.length}) (242{val=!=}) (22 (2 (22 (315{val=this}) (235{val=.}) (801{val=startData})) (221{val=[}) (34{val=NUMBER_CONSTANT}) (222{val=]})) (235{val=.}) (800{val=length}))) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (40{val=categoryKeys.length}) (242{val=!=}) (32 (802{val=getCategoryCount}) (216{val=()}))) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/16/parent/source_org_jfree_data_category_DefaultIntervalCategoryDataset.java
-------------------------------------------------------------------------------
Edit Distance : 8
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } [
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } [
Distance : 24

1
Tree	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } ParamChecks
Code	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } ParamChecks
Distance : 13

2
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } [
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } [
Distance : 24

3
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } Override
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } Override
Distance : 19

4
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } MathRuntimeException
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } MathRuntimeException
Distance : 19

5
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } mock
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } mock
Distance : 19

6
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } array
Distance : 19

7
Tree	if ( length * length . startData ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } -
Code	if ( length * length . startData ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } -
Distance : 13

8
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } [
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } [
Distance : 19

9
Tree	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } p
Code	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } p
Distance : 22

10
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } array
Distance : 24

11
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } class
Distance : 18

12
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } array
Distance : 18

13
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } mock
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } mock
Distance : 18

14
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } Override
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } Override
Distance : 19

15
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } MathRuntimeException
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } MathRuntimeException
Distance : 18

16
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } f
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } f
Distance : 18

17
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } [
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } [
Distance : 18

18
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } -
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } -
Distance : 18

19
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } MathRuntimeException
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } MathRuntimeException
Distance : 24

20
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } MathRuntimeException
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } MathRuntimeException
Distance : 19

21
Tree	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } f
Code	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } f
Distance : 13

22
Tree	if ( length * length . startData ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } Class
Code	if ( length * length . startData ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } Class
Distance : 13

23
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } [
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } [
Distance : 19

24
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Override
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Override
Distance : 24

25
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } notifyListeners
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } notifyListeners
Distance : 24

26
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } class
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } class
Distance : 24

27
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } array
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } array
Distance : 24

28
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } -
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } -
Distance : 19

29
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } mock
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } mock
Distance : 24

30
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Override
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Override
Distance : 24

31
Tree	if ( length * length . startData ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } {}
Code	if ( length * length . startData ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } {}
Distance : 13

32
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } MathRuntimeException
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } MathRuntimeException
Distance : 24

33
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } mock
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } mock
Distance : 24

34
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } notifyListeners
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } notifyListeners
Distance : 24

35
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } MathRuntimeException
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } MathRuntimeException
Distance : 24

36
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } class
Distance : 24

37
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } f
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } f
Distance : 24

38
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } notifyListeners
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } notifyListeners
Distance : 19

39
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } f
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } f
Distance : 19

40
Tree	if ( length * length . ] ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } Test
Code	if ( length * length . ] ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } Test
Distance : 13

41
Tree	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) <=
Code	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) <=
Distance : 16

42
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } f
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } f
Distance : 24

43
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } mock
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } mock
Distance : 19

44
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } class
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } class
Distance : 19

45
Tree	if ( ( length / length < NUMBER_CONSTANT ) == super(); ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) == super(); ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 21

46
Tree	if ( ( length / length < NUMBER_CONSTANT ) == continue; ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) == continue; ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 21

47
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 25

48
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , null ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , null ) ; }
Distance : 15

49
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Distance : 17

50
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

51
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 13

52
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

53
Tree	if ( ( length / length < NUMBER_CONSTANT ) == break; ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) == break; ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 21

54
Tree	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; }
Code	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; }
Distance : 12

55
Tree	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) ++
Code	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) ++
Distance : 16

56
Tree	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) else
Code	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) else
Distance : 16

57
Tree	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) private
Code	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) private
Distance : 16

58
Tree	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) ^
Code	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) ^
Distance : 16

59
Tree	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) >=
Code	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) >=
Distance : 16

60
Tree	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) &
Code	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) &
Distance : 16

61
Tree	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) {}
Code	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) {}
Distance : 16

62
Tree	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) %
Code	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) %
Distance : 16

63
Tree	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 21

64
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } array
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } array
Distance : 19

65
Tree	if ( ( length / length < NUMBER_CONSTANT ) == default: ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) == default: ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 21

66
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; }
Distance : 20

67
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } -
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } -
Distance : 19

68
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } notifyListeners
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } notifyListeners
Distance : 19

69
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } notifyListeners
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } notifyListeners
Distance : 24

70
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } array
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } array
Distance : 24

71
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } mock
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } mock
Distance : 24

72
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } MathRuntimeException
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } MathRuntimeException
Distance : 24

73
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } class
Distance : 24

74
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Override
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Override
Distance : 24

75
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; }
Distance : 22

76
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } f
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } f
Distance : 24

77
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } -
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } -
Distance : 24

78
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , default: ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , default: ) ; }
Distance : 15

79
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; }
Distance : 17

80
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; }
Distance : 17

81
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , break; ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , break; ) ; }
Distance : 15

82
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , continue; ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , continue; ) ; }
Distance : 15

83
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , super(); ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , super(); ) ; }
Distance : 15

84
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 25

85
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } class
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } class
Distance : 24

86
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length . [ () . IllegalArgumentException () ) ; } -
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length . [ () . IllegalArgumentException () ) ; } -
Distance : 22

87
Tree	if ( length * length . ] ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; }
Code	if ( length * length . ] ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; }
Distance : 12

88
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } notifyListeners
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } notifyListeners
Distance : 26

89
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } class
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } class
Distance : 18

90
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } f
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } f
Distance : 14

91
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } array
Distance : 18

92
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != . ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length . [ () . . () ) ; } [
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != . ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length . [ () . . () ) ; } [
Distance : 22

93
Tree	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } value
Code	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } value
Distance : 22

94
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } MathRuntimeException
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } MathRuntimeException
Distance : 18

95
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; } array
Distance : 23

96
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } f
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } f
Distance : 18

97
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , null ) ; } i
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , null ) ; } i
Distance : 16

98
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } class
Distance : 18

99
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } class
Distance : 26

100
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } array
Distance : 26

101
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } notifyListeners
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } notifyListeners
Distance : 18

102
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } MathRuntimeException
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } MathRuntimeException
Distance : 26

103
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , null ) ; } value
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , null ) ; } value
Distance : 16

104
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Override
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Override
Distance : 26

105
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } mock
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } mock
Distance : 18

106
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } MathRuntimeException
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } MathRuntimeException
Distance : 18

107
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } class
Distance : 18

108
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } [
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } [
Distance : 18

109
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } notifyListeners
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } notifyListeners
Distance : 14

110
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } class
Distance : 14

111
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } array
Distance : 14

112
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } mock
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } mock
Distance : 14

113
Tree	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } options
Code	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } options
Distance : 22

114
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } MathRuntimeException
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } MathRuntimeException
Distance : 14

115
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } MathRuntimeException
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } MathRuntimeException
Distance : 18

116
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } notifyListeners
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } notifyListeners
Distance : 18

117
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } -
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } -
Distance : 18

118
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } [
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } [
Distance : 18

119
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } f
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } f
Distance : 18

120
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } Override
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } Override
Distance : 18

121
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } Override
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } Override
Distance : 14

122
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } array
Distance : 18

123
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , null ) ; } options
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , null ) ; } options
Distance : 16

124
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } -
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } -
Distance : 26

125
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } mock
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } mock
Distance : 21

126
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } MathRuntimeException
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } MathRuntimeException
Distance : 21

127
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } Override
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } Override
Distance : 21

128
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; } -
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; } -
Distance : 23

129
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } -
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } -
Distance : 26

130
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } f
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } f
Distance : 21

131
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } -
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } -
Distance : 21

132
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } notifyListeners
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } notifyListeners
Distance : 26

133
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } class
Distance : 26

134
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; } [
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; } [
Distance : 23

135
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; } f
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; } f
Distance : 23

136
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; } Override
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; } Override
Distance : 23

137
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; } MathRuntimeException
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; } MathRuntimeException
Distance : 23

138
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } mock
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } mock
Distance : 18

139
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; } mock
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; } mock
Distance : 23

140
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } array
Distance : 21

141
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } f
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } f
Distance : 26

142
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; } class
Distance : 23

143
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } -
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } -
Distance : 18

144
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length . ( () . IllegalArgumentException () ) ; } notifyListeners
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length . ( () . IllegalArgumentException () ) ; } notifyListeners
Distance : 22

145
Tree	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } i
Code	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } i
Distance : 22

146
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length . [ () . throw () ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length . [ () . throw () ) ; } class
Distance : 22

147
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length . [ () . throw () ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length . [ () . throw () ) ; } array
Distance : 22

148
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length . [ () . throw () ) ; } mock
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length . [ () . throw () ) ; } mock
Distance : 22

149
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } notifyListeners
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } notifyListeners
Distance : 18

150
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } notifyListeners
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } notifyListeners
Distance : 21

151
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length . [ () . ( () ) ; } Override
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length . [ () . ( () ) ; } Override
Distance : 22

152
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } [
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } [
Distance : 26

153
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } Override
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } Override
Distance : 18

154
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , null ) ; } p
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , null ) ; } p
Distance : 16

155
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } -
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } -
Distance : 14

156
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } [
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } [
Distance : 26

157
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } [
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } [
Distance : 18

158
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length . [ () . . () ) ; } f
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length . [ () . . () ) ; } f
Distance : 22

159
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } Override
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } Override
Distance : 18

160
Tree	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) /
Code	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) /
Distance : 16

161
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; }
Distance : 17

162
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } class
Distance : 19

163
Tree	if ( length * length . ] ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } Preconditions
Code	if ( length * length . ] ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } Preconditions
Distance : 13

164
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; }
Distance : 18

165
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; }
Distance : 18

166
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

167
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length . [ () . throw () ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length . [ () . throw () ) ; }
Distance : 21

168
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } -
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } -
Distance : 24

169
Tree	if ( length * length . ] ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } MathRuntimeException
Code	if ( length * length . ] ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } MathRuntimeException
Distance : 13

170
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

171
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } [
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } [
Distance : 14

172
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } mock
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } mock
Distance : 26

173
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } -
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } -
Distance : 18

174
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } array
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } array
Distance : 18

175
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } class
Distance : 21

176
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } [
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } [
Distance : 21

177
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } f
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } f
Distance : 26

178
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Override
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Override
Distance : 26

179
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } MathRuntimeException
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } MathRuntimeException
Distance : 26

180
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } mock
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } mock
Distance : 26

181
Tree	if ( ( length / length < NUMBER_CONSTANT ) == return; ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) == return; ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 21

182
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . IllegalArgumentException ( STRING_CONSTANT , return; ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . IllegalArgumentException ( STRING_CONSTANT , return; ) ; }
Distance : 15

183
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } Override
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } Override
Distance : 18

184
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length . [ () . IllegalArgumentException () ) ; } MathRuntimeException
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length . [ () . IllegalArgumentException () ) ; } MathRuntimeException
Distance : 22

185
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } -
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } -
Distance : 24

186
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } mock
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } mock
Distance : 18

187
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; } notifyListeners
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; } notifyListeners
Distance : 23

188
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } array
Distance : 26

189
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } f
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } f
Distance : 19

190
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } -
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } -
Distance : 24

191
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } [
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } [
Distance : 24

192
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } f
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } f
Distance : 24

193
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } array
Distance : 24

194
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Override
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Override
Distance : 24

195
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } [
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } [
Distance : 24

196
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } notifyListeners
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } notifyListeners
Distance : 24

197
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } mock
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } mock
Distance : 24

198
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } notifyListeners
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } notifyListeners
Distance : 18

199
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } f
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } f
Distance : 18

========================================================================


========================================================================
Example Number: 5
Parent Code is: 
this . dataset = dataset ;
-------------------------------------------------------------------------------
Child code is: 
setDataset ( dataset ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=dataset})) (204{val==}) (800{val=dataset})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (802{val=setDataset}) (214{val=(}) (800{val=dataset}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/12/parent/source_org_jfree_chart_plot_MultiplePiePlot.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	this . dataset = dataset . setDataset () ; array
Code	this . dataset = dataset . setDataset () ; array
Distance : 8

1
Tree	dataset = NUMBER_CONSTANT / dataset ; notifyListeners
Code	dataset = NUMBER_CONSTANT / dataset ; notifyListeners
Distance : 6

2
Tree	dataset = NUMBER_CONSTANT / dataset ; class
Code	dataset = NUMBER_CONSTANT / dataset ; class
Distance : 6

3
Tree	this . dataset = dataset . setDataset ( dataset ) ; [
Code	this . dataset = dataset . setDataset ( dataset ) ; [
Distance : 7

4
Tree	this . dataset = dataset . setDataset ( dataset ) ; f
Code	this . dataset = dataset . setDataset ( dataset ) ; f
Distance : 7

5
Tree	this . dataset = dataset . setDataset ( dataset ) ; Override
Code	this . dataset = dataset . setDataset ( dataset ) ; Override
Distance : 7

6
Tree	this . dataset = dataset . setDataset ( dataset ) ; MathRuntimeException
Code	this . dataset = dataset . setDataset ( dataset ) ; MathRuntimeException
Distance : 7

7
Tree	this . dataset = dataset . setDataset ( dataset ) ; mock
Code	this . dataset = dataset . setDataset ( dataset ) ; mock
Distance : 7

8
Tree	this . dataset = dataset . setDataset ( dataset ) ; array
Code	this . dataset = dataset . setDataset ( dataset ) ; array
Distance : 7

9
Tree	this . dataset = dataset . setDataset ( dataset ) ; class
Code	this . dataset = dataset . setDataset ( dataset ) ; class
Distance : 7

10
Tree	this . dataset = dataset . setDataset ( dataset ) ; notifyListeners
Code	this . dataset = dataset . setDataset ( dataset ) ; notifyListeners
Distance : 7

11
Tree	dataset = NUMBER_CONSTANT / dataset ; mock
Code	dataset = NUMBER_CONSTANT / dataset ; mock
Distance : 6

12
Tree	dataset = dataset ;
Code	dataset = dataset ;
Distance : 3

13
Tree	this . dataset = dataset . setDataset () ; MathRuntimeException
Code	this . dataset = dataset . setDataset () ; MathRuntimeException
Distance : 8

14
Tree	this . dataset = dataset ; array
Code	this . dataset = dataset ; array
Distance : 5

15
Tree	this . dataset = dataset . setDataset () ; Override
Code	this . dataset = dataset . setDataset () ; Override
Distance : 8

16
Tree	this . dataset = setDataset ( dataset ) ; Override
Code	this . dataset = setDataset ( dataset ) ; Override
Distance : 5

17
Tree	this . dataset = setDataset ( dataset ) ; mock
Code	this . dataset = setDataset ( dataset ) ; mock
Distance : 5

18
Tree	this . dataset = setDataset ( dataset ) ; array
Code	this . dataset = setDataset ( dataset ) ; array
Distance : 5

19
Tree	dataset = NUMBER_CONSTANT / dataset ; Override
Code	dataset = NUMBER_CONSTANT / dataset ; Override
Distance : 6

20
Tree	this . dataset = setDataset ( dataset ) ; class
Code	this . dataset = setDataset ( dataset ) ; class
Distance : 5

21
Tree	this . dataset = dataset ; -
Code	this . dataset = dataset ; -
Distance : 5

22
Tree	this . dataset = dataset ; [
Code	this . dataset = dataset ; [
Distance : 5

23
Tree	this . dataset = dataset ; f
Code	this . dataset = dataset ; f
Distance : 5

24
Tree	this . dataset = dataset ; Override
Code	this . dataset = dataset ; Override
Distance : 5

25
Tree	this . dataset = dataset ; MathRuntimeException
Code	this . dataset = dataset ; MathRuntimeException
Distance : 5

26
Tree	this . dataset = dataset ; mock
Code	this . dataset = dataset ; mock
Distance : 5

27
Tree	this . dataset = dataset ; class
Code	this . dataset = dataset ; class
Distance : 5

28
Tree	this . dataset = dataset . setDataset () ; mock
Code	this . dataset = dataset . setDataset () ; mock
Distance : 8

29
Tree	this . dataset = setDataset ( dataset ) ; -
Code	this . dataset = setDataset ( dataset ) ; -
Distance : 5

30
Tree	this . dataset = setDataset ( dataset ) ; f
Code	this . dataset = setDataset ( dataset ) ; f
Distance : 5

31
Tree	this . dataset = setDataset ( dataset ) ; MathRuntimeException
Code	this . dataset = setDataset ( dataset ) ; MathRuntimeException
Distance : 5

32
Tree	dataset = NUMBER_CONSTANT / dataset ; MathRuntimeException
Code	dataset = NUMBER_CONSTANT / dataset ; MathRuntimeException
Distance : 6

33
Tree	this . dataset = ( dataset ) dataset . setDataset () ; -
Code	this . dataset = ( dataset ) dataset . setDataset () ; -
Distance : 9

34
Tree	this . dataset = ( dataset ) dataset . setDataset () ; f
Code	this . dataset = ( dataset ) dataset . setDataset () ; f
Distance : 9

35
Tree	dataset = NUMBER_CONSTANT / dataset ;
Code	dataset = NUMBER_CONSTANT / dataset ;
Distance : 5

36
Tree	this . dataset = new Coordinates3D ( dataset ) ;
Code	this . dataset = new Coordinates3D ( dataset ) ;
Distance : 6

37
Tree	dataset = new Coordinates3D <> () ;
Code	dataset = new Coordinates3D <> () ;
Distance : 6

38
Tree	this . dataset = Coordinates3D ;
Code	this . dataset = Coordinates3D ;
Distance : 4

39
Tree	dataset = new Coordinates3D ( dataset ) ;
Code	dataset = new Coordinates3D ( dataset ) ;
Distance : 4

40
Tree	dataset = true ;
Code	dataset = true ;
Distance : 4

41
Tree	dataset = Coordinates3D ;
Code	dataset = Coordinates3D ;
Distance : 4

42
Tree	dataset = dataset ;
Code	dataset = dataset ;
Distance : 3

43
Tree	dataset = new dataset <> () ;
Code	dataset = new dataset <> () ;
Distance : 5

44
Tree	this . dataset = new dataset ( dataset ) ;
Code	this . dataset = new dataset ( dataset ) ;
Distance : 6

45
Tree	dataset = new dataset ( dataset ) ;
Code	dataset = new dataset ( dataset ) ;
Distance : 4

46
Tree	this . dataset = includeInterval ;
Code	this . dataset = includeInterval ;
Distance : 4

47
Tree	this . dataset = getSolver ;
Code	this . dataset = getSolver ;
Distance : 4

48
Tree	dataset = PlotOrientation.VERTICAL ;
Code	dataset = PlotOrientation.VERTICAL ;
Distance : 4

49
Tree	this . dataset = setDataset ( dataset ) ; [
Code	this . dataset = setDataset ( dataset ) ; [
Distance : 5

50
Tree	this . dataset = x.length ;
Code	this . dataset = x.length ;
Distance : 4

51
Tree	dataset = DatasetUtils ;
Code	dataset = DatasetUtils ;
Distance : 4

52
Tree	this . dataset = PlotOrientation.VERTICAL ;
Code	this . dataset = PlotOrientation.VERTICAL ;
Distance : 4

53
Tree	dataset = MathUtils.SAFE_MIN ;
Code	dataset = MathUtils.SAFE_MIN ;
Distance : 4

54
Tree	this . dataset = MathUtils.SAFE_MIN ;
Code	this . dataset = MathUtils.SAFE_MIN ;
Distance : 4

55
Tree	this . dataset = Color.RED ;
Code	this . dataset = Color.RED ;
Distance : 4

56
Tree	dataset = axis ;
Code	dataset = axis ;
Distance : 4

57
Tree	this . dataset = ch ;
Code	this . dataset = ch ;
Distance : 4

58
Tree	this . dataset = new ArrayRealVector ( dataset ) ;
Code	this . dataset = new ArrayRealVector ( dataset ) ;
Distance : 6

59
Tree	this . dataset = new getParent ( dataset ) ;
Code	this . dataset = new getParent ( dataset ) ;
Distance : 6

60
Tree	this . dataset = new Cartesian3D ( dataset ) ;
Code	this . dataset = new Cartesian3D ( dataset ) ;
Distance : 6

61
Tree	dataset = new getSolver <> () ;
Code	dataset = new getSolver <> () ;
Distance : 6

62
Tree	dataset = false ;
Code	dataset = false ;
Distance : 4

63
Tree	this . dataset = dataset . setDataset () ; [
Code	this . dataset = dataset . setDataset () ; [
Distance : 8

64
Tree	this . dataset = dataset . setDataset () ; f
Code	this . dataset = dataset . setDataset () ; f
Distance : 8

65
Tree	this . dataset = hotspot ;
Code	this . dataset = hotspot ;
Distance : 4

66
Tree	dataset = setDataset () ; -
Code	dataset = setDataset () ; -
Distance : 5

67
Tree	this . dataset = dataset ;
Code	this . dataset = dataset ;
Distance : 4

68
Tree	setDataset () ; MathRuntimeException
Code	setDataset () ; MathRuntimeException
Distance : 4

69
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ; array
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ; array
Distance : 5

70
Tree	this . dataset = null ; i
Code	this . dataset = null ; i
Distance : 5

71
Tree	dataset = setDataset () ; notifyListeners
Code	dataset = setDataset () ; notifyListeners
Distance : 5

72
Tree	dataset = setDataset () ; array
Code	dataset = setDataset () ; array
Distance : 5

73
Tree	dataset = setDataset () ; mock
Code	dataset = setDataset () ; mock
Distance : 5

74
Tree	dataset = setDataset () ; MathRuntimeException
Code	dataset = setDataset () ; MathRuntimeException
Distance : 5

75
Tree	dataset = setDataset () ; Override
Code	dataset = setDataset () ; Override
Distance : 5

76
Tree	dataset = setDataset () ; f
Code	dataset = setDataset () ; f
Distance : 5

77
Tree	this . dataset = true ; ParamChecks
Code	this . dataset = true ; ParamChecks
Distance : 5

78
Tree	this . dataset = true ; {}
Code	this . dataset = true ; {}
Distance : 5

79
Tree	dataset = NUMBER_CONSTANT / dataset ; [
Code	dataset = NUMBER_CONSTANT / dataset ; [
Distance : 6

80
Tree	dataset . setDataset ( dataset ) ; MathRuntimeException
Code	dataset . setDataset ( dataset ) ; MathRuntimeException
Distance : 3

81
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ; notifyListeners
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ; notifyListeners
Distance : 5

82
Tree	this . dataset = null ; options
Code	this . dataset = null ; options
Distance : 5

83
Tree	dataset = setDataset () ; [
Code	dataset = setDataset () ; [
Distance : 5

84
Tree	dataset . setDataset ( dataset ) ; f
Code	dataset . setDataset ( dataset ) ; f
Distance : 3

85
Tree	this . dataset = true ; MathRuntimeException
Code	this . dataset = true ; MathRuntimeException
Distance : 5

86
Tree	dataset . setDataset ( dataset ) ; Override
Code	dataset . setDataset ( dataset ) ; Override
Distance : 3

87
Tree	dataset . setDataset ( dataset ) ; mock
Code	dataset . setDataset ( dataset ) ; mock
Distance : 3

88
Tree	dataset . setDataset ( dataset ) ; array
Code	dataset . setDataset ( dataset ) ; array
Distance : 3

89
Tree	dataset . setDataset ( dataset ) ; class
Code	dataset . setDataset ( dataset ) ; class
Distance : 3

90
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ; -
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ; -
Distance : 5

91
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ; [
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ; [
Distance : 5

92
Tree	dataset = NUMBER_CONSTANT / dataset ; f
Code	dataset = NUMBER_CONSTANT / dataset ; f
Distance : 6

93
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ; f
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ; f
Distance : 5

94
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ; Override
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ; Override
Distance : 5

95
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ; MathRuntimeException
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ; MathRuntimeException
Distance : 5

96
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ; mock
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ; mock
Distance : 5

97
Tree	dataset . setDataset ( dataset ) ; [
Code	dataset . setDataset ( dataset ) ; [
Distance : 3

98
Tree	this . dataset = null ; p
Code	this . dataset = null ; p
Distance : 5

99
Tree	this . dataset = null ; value
Code	this . dataset = null ; value
Distance : 5

100
Tree	dataset = dataset . setDataset ( dataset ) ; notifyListeners
Code	dataset = dataset . setDataset ( dataset ) ; notifyListeners
Distance : 5

101
Tree	this . dataset = true ; -
Code	this . dataset = true ; -
Distance : 5

102
Tree	this . dataset = true ; Class
Code	this . dataset = true ; Class
Distance : 5

103
Tree	this . dataset = true ; Test
Code	this . dataset = true ; Test
Distance : 5

104
Tree	dataset = dataset . setDataset ( dataset ) ; -
Code	dataset = dataset . setDataset ( dataset ) ; -
Distance : 5

105
Tree	dataset = dataset . setDataset ( dataset ) ; [
Code	dataset = dataset . setDataset ( dataset ) ; [
Distance : 5

106
Tree	dataset = dataset . setDataset ( dataset ) ; f
Code	dataset = dataset . setDataset ( dataset ) ; f
Distance : 5

107
Tree	dataset = dataset . setDataset ( dataset ) ; Override
Code	dataset = dataset . setDataset ( dataset ) ; Override
Distance : 5

108
Tree	dataset = dataset . setDataset ( dataset ) ; MathRuntimeException
Code	dataset = dataset . setDataset ( dataset ) ; MathRuntimeException
Distance : 5

109
Tree	dataset = dataset . setDataset ( dataset ) ; mock
Code	dataset = dataset . setDataset ( dataset ) ; mock
Distance : 5

110
Tree	dataset = dataset . setDataset ( dataset ) ; array
Code	dataset = dataset . setDataset ( dataset ) ; array
Distance : 5

111
Tree	this . dataset = true ; Preconditions
Code	this . dataset = true ; Preconditions
Distance : 5

112
Tree	dataset = true ; Test
Code	dataset = true ; Test
Distance : 5

113
Tree	dataset = true ; Class
Code	dataset = true ; Class
Distance : 5

114
Tree	setDataset () ; -
Code	setDataset () ; -
Distance : 4

115
Tree	dataset = true ; {}
Code	dataset = true ; {}
Distance : 5

116
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ; class
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ; class
Distance : 5

117
Tree	dataset = true ; ParamChecks
Code	dataset = true ; ParamChecks
Distance : 5

118
Tree	setDataset () ; [
Code	setDataset () ; [
Distance : 4

119
Tree	setDataset () ; f
Code	setDataset () ; f
Distance : 4

120
Tree	this . dataset = true ; f
Code	this . dataset = true ; f
Distance : 5

121
Tree	setDataset () ; mock
Code	setDataset () ; mock
Distance : 4

122
Tree	setDataset () ; array
Code	setDataset () ; array
Distance : 4

123
Tree	dataset = true ; f
Code	dataset = true ; f
Distance : 5

124
Tree	setDataset () ; notifyListeners
Code	setDataset () ; notifyListeners
Distance : 4

125
Tree	setDataset () ; class
Code	setDataset () ; class
Distance : 4

126
Tree	dataset = true ; Preconditions
Code	dataset = true ; Preconditions
Distance : 5

127
Tree	dataset = true ; -
Code	dataset = true ; -
Distance : 5

128
Tree	this . dataset = dataset ;
Code	this . dataset = dataset ;
Distance : 4

129
Tree	this . dataset = dataset ; notifyListeners
Code	this . dataset = dataset ; notifyListeners
Distance : 5

130
Tree	this . dataset = setDataset ( dataset ) ; notifyListeners
Code	this . dataset = setDataset ( dataset ) ; notifyListeners
Distance : 5

131
Tree	dataset = dataset ; notifyListeners
Code	dataset = dataset ; notifyListeners
Distance : 4

132
Tree	this . dataset = null ;
Code	this . dataset = null ;
Distance : 4

133
Tree	this . dataset = false ;
Code	this . dataset = false ;
Distance : 4

134
Tree	this . dataset = true ;
Code	this . dataset = true ;
Distance : 4

135
Tree	dataset . setDataset ( dataset ) ; notifyListeners
Code	dataset . setDataset ( dataset ) ; notifyListeners
Distance : 3

136
Tree	dataset = hotspot ;
Code	dataset = hotspot ;
Distance : 4

137
Tree	dataset = x.length ;
Code	dataset = x.length ;
Distance : 4

138
Tree	setDataset () ; Override
Code	setDataset () ; Override
Distance : 4

139
Tree	dataset = setDataset () ; class
Code	dataset = setDataset () ; class
Distance : 5

140
Tree	dataset . setDataset ( dataset ) ; -
Code	dataset . setDataset ( dataset ) ; -
Distance : 3

141
Tree	dataset = getSolver ;
Code	dataset = getSolver ;
Distance : 4

142
Tree	dataset = new Cartesian3D <> () ;
Code	dataset = new Cartesian3D <> () ;
Distance : 6

143
Tree	dataset = dataset ; class
Code	dataset = dataset ; class
Distance : 4

144
Tree	dataset = new ArrayRealVector <> () ;
Code	dataset = new ArrayRealVector <> () ;
Distance : 6

145
Tree	dataset = new Cartesian3D ( dataset ) ;
Code	dataset = new Cartesian3D ( dataset ) ;
Distance : 4

146
Tree	dataset = dataset . setDataset ( dataset ) ;
Code	dataset = dataset . setDataset ( dataset ) ;
Distance : 4

147
Tree	dataset = dataset ; array
Code	dataset = dataset ; array
Distance : 4

148
Tree	dataset = new ArrayRealVector ( dataset ) ;
Code	dataset = new ArrayRealVector ( dataset ) ;
Distance : 4

149
Tree	this . dataset = new x.length ( dataset ) ;
Code	this . dataset = new x.length ( dataset ) ;
Distance : 6

150
Tree	this . dataset = default: ;
Code	this . dataset = default: ;
Distance : 4

151
Tree	this . dataset = ( dataset ) dataset . setDataset () ; Override
Code	this . dataset = ( dataset ) dataset . setDataset () ; Override
Distance : 9

152
Tree	dataset = dataset ; mock
Code	dataset = dataset ; mock
Distance : 4

153
Tree	this . dataset = ( dataset ) dataset . setDataset () ; MathRuntimeException
Code	this . dataset = ( dataset ) dataset . setDataset () ; MathRuntimeException
Distance : 9

154
Tree	this . dataset = ( dataset ) dataset . setDataset () ; array
Code	this . dataset = ( dataset ) dataset . setDataset () ; array
Distance : 9

155
Tree	dataset = dataset ; MathRuntimeException
Code	dataset = dataset ; MathRuntimeException
Distance : 4

156
Tree	dataset = new getParent <> () ;
Code	dataset = new getParent <> () ;
Distance : 6

157
Tree	dataset = new point <> () ;
Code	dataset = new point <> () ;
Distance : 6

158
Tree	this . dataset = ( dataset ) dataset . setDataset () ; mock
Code	this . dataset = ( dataset ) dataset . setDataset () ; mock
Distance : 9

159
Tree	this . dataset = ( dataset ) dataset . setDataset () ; [
Code	this . dataset = ( dataset ) dataset . setDataset () ; [
Distance : 9

160
Tree	this . dataset = new ch ( dataset ) ;
Code	this . dataset = new ch ( dataset ) ;
Distance : 6

161
Tree	dataset = dataset ; Override
Code	dataset = dataset ; Override
Distance : 4

162
Tree	this . dataset = new getSolver ( dataset ) ;
Code	this . dataset = new getSolver ( dataset ) ;
Distance : 6

163
Tree	this . dataset = ( dataset ) dataset . setDataset () ; class
Code	this . dataset = ( dataset ) dataset . setDataset () ; class
Distance : 9

164
Tree	dataset = dataset ; f
Code	dataset = dataset ; f
Distance : 4

165
Tree	dataset = dataset ; [
Code	dataset = dataset ; [
Distance : 4

166
Tree	dataset = dataset ; -
Code	dataset = dataset ; -
Distance : 4

167
Tree	this . dataset = dataset . setDataset () ;
Code	this . dataset = dataset . setDataset () ;
Distance : 7

168
Tree	dataset = new getParent ( dataset ) ;
Code	dataset = new getParent ( dataset ) ;
Distance : 4

169
Tree	this . dataset = ( dataset ) dataset . setDataset () ;
Code	this . dataset = ( dataset ) dataset . setDataset () ;
Distance : 8

170
Tree	dataset = NUMBER_CONSTANT / dataset ; array
Code	dataset = NUMBER_CONSTANT / dataset ; array
Distance : 6

171
Tree	this . dataset = super(); ;
Code	this . dataset = super(); ;
Distance : 4

172
Tree	dataset = new point ( dataset ) ;
Code	dataset = new point ( dataset ) ;
Distance : 4

173
Tree	this . dataset = continue; ;
Code	this . dataset = continue; ;
Distance : 4

174
Tree	this . dataset = new point ( dataset ) ;
Code	this . dataset = new point ( dataset ) ;
Distance : 6

175
Tree	this . dataset = setDataset ( dataset ) ;
Code	this . dataset = setDataset ( dataset ) ;
Distance : 4

176
Tree	this . dataset = break; ;
Code	this . dataset = break; ;
Distance : 4

177
Tree	dataset = new includeInterval <> () ;
Code	dataset = new includeInterval <> () ;
Distance : 6

178
Tree	setDataset () ;
Code	setDataset () ;
Distance : 3

179
Tree	dataset = setDataset () ;
Code	dataset = setDataset () ;
Distance : 4

180
Tree	dataset = new Range ( dataset ) ;
Code	dataset = new Range ( dataset ) ;
Distance : 4

181
Tree	dataset = new ch ( dataset ) ;
Code	dataset = new ch ( dataset ) ;
Distance : 4

182
Tree	this . dataset = new includeInterval ( dataset ) ;
Code	this . dataset = new includeInterval ( dataset ) ;
Distance : 6

183
Tree	dataset = new includeInterval ( dataset ) ;
Code	dataset = new includeInterval ( dataset ) ;
Distance : 4

184
Tree	this . dataset = dataset . setDataset ( dataset ) ; -
Code	this . dataset = dataset . setDataset ( dataset ) ; -
Distance : 7

185
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ;
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ;
Distance : 4

186
Tree	dataset = new Range <> () ;
Code	dataset = new Range <> () ;
Distance : 6

187
Tree	this . dataset = dataset . setDataset () ; notifyListeners
Code	this . dataset = dataset . setDataset () ; notifyListeners
Distance : 8

188
Tree	this . dataset = ( dataset ) dataset . setDataset () ; notifyListeners
Code	this . dataset = ( dataset ) dataset . setDataset () ; notifyListeners
Distance : 9

189
Tree	this . dataset = return; ;
Code	this . dataset = return; ;
Distance : 4

190
Tree	dataset = includeInterval ;
Code	dataset = includeInterval ;
Distance : 4

191
Tree	this . dataset = dataset . setDataset ( dataset ) ;
Code	this . dataset = dataset . setDataset ( dataset ) ;
Distance : 6

192
Tree	dataset = new getSolver ( dataset ) ;
Code	dataset = new getSolver ( dataset ) ;
Distance : 4

193
Tree	dataset = new ch <> () ;
Code	dataset = new ch <> () ;
Distance : 6

194
Tree	dataset . setDataset ( dataset ) ;
Code	dataset . setDataset ( dataset ) ;
Distance : 2

195
Tree	this . dataset = dataset . setDataset () ; -
Code	this . dataset = dataset . setDataset () ; -
Distance : 8

196
Tree	this . dataset = dataset . setDataset () ; class
Code	this . dataset = dataset . setDataset () ; class
Distance : 8

197
Tree	dataset = true ; MathRuntimeException
Code	dataset = true ; MathRuntimeException
Distance : 5

198
Tree	dataset = NUMBER_CONSTANT / dataset ; -
Code	dataset = NUMBER_CONSTANT / dataset ; -
Distance : 6

199
Tree	dataset = dataset . setDataset ( dataset ) ; class
Code	dataset = dataset . setDataset ( dataset ) ; class
Distance : 5

========================================================================


========================================================================
Example Number: 6
Parent Code is: 
PathIterator iterator2 = p1 . getPathIterator ( null ) ;
-------------------------------------------------------------------------------
Child code is: 
PathIterator iterator2 = p2 . getPathIterator ( null ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=PathIterator})) (59 (800{val=iterator2}) (204{val==}) (32 (800{val=p1}) (235{val=.}) (802{val=getPathIterator}) (214{val=(}) (500{val=null}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=PathIterator})) (59 (800{val=iterator2}) (204{val==}) (32 (800{val=p2}) (235{val=.}) (802{val=getPathIterator}) (214{val=(}) (500{val=null}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/11/parent/source_org_jfree_chart_util_ShapeUtilities.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	PathIterator iterator2 = Double.NaN . getPathIterator ( NUMBER_CONSTANT ) ;
Code	PathIterator iterator2 = Double.NaN . getPathIterator ( NUMBER_CONSTANT ) ;
Distance : 2

1
Tree	PathIterator iterator2 = FastMath.PI . getPathIterator ( NUMBER_CONSTANT ) ;
Code	PathIterator iterator2 = FastMath.PI . getPathIterator ( NUMBER_CONSTANT ) ;
Distance : 2

2
Tree	PathIterator iterator2 = MultiplePiePlot . getPathIterator ( NUMBER_CONSTANT ) ;
Code	PathIterator iterator2 = MultiplePiePlot . getPathIterator ( NUMBER_CONSTANT ) ;
Distance : 2

3
Tree	PathIterator iterator2 = generator . getPathIterator ( NUMBER_CONSTANT ) ;
Code	PathIterator iterator2 = generator . getPathIterator ( NUMBER_CONSTANT ) ;
Distance : 2

4
Tree	PathIterator iterator2 = LazyHolder.FACTORY . getPathIterator ( NUMBER_CONSTANT ) ;
Code	PathIterator iterator2 = LazyHolder.FACTORY . getPathIterator ( NUMBER_CONSTANT ) ;
Distance : 2

5
Tree	PathIterator iterator2 = ModuleLoader.ResolutionMode.BROWSER . getPathIterator ( NUMBER_CONSTANT ) ;
Code	PathIterator iterator2 = ModuleLoader.ResolutionMode.BROWSER . getPathIterator ( NUMBER_CONSTANT ) ;
Distance : 2

6
Tree	PathIterator iterator2 = visitor . getPathIterator ( NUMBER_CONSTANT ) ;
Code	PathIterator iterator2 = visitor . getPathIterator ( NUMBER_CONSTANT ) ;
Distance : 2

7
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , RotationConvention.FRAME_TRANSFORM ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 4

8
Tree	PathIterator p2 = p2 . getPathIterator ( STRING_CONSTANT , true ) ;
Code	PathIterator p2 = p2 . getPathIterator ( STRING_CONSTANT , true ) ;
Distance : 4

9
Tree	final PathIterator iterator2 = p2 . getPathIterator ( null ) ;
Code	final PathIterator iterator2 = p2 . getPathIterator ( null ) ;
Distance : 1

10
Tree	PathIterator p2 = p1 . getPathIterator ( super(); ) ;
Code	PathIterator p2 = p1 . getPathIterator ( super(); ) ;
Distance : 3

11
Tree	PathIterator iterator2 = p2 . getPathIterator ( ( null [] ) null ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( ( null [] ) null ) ;
Distance : 4

12
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Distance : 1

13
Tree	PathIterator p1 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	PathIterator p1 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 6

14
Tree	PathIterator p2 = p1 . getPathIterator ( null ) ;
Code	PathIterator p2 = p1 . getPathIterator ( null ) ;
Distance : 2

15
Tree	PathIterator p2 = p1 . getPathIterator ( p2 . class ) ;
Code	PathIterator p2 = p1 . getPathIterator ( p2 . class ) ;
Distance : 5

16
Tree	PathIterator p1 = p1 . getPathIterator ( STRING_CONSTANT , false ) ;
Code	PathIterator p1 = p1 . getPathIterator ( STRING_CONSTANT , false ) ;
Distance : 5

17
Tree	PathIterator p2 = p2 . getPathIterator ( p1 ) ;
Code	PathIterator p2 = p2 . getPathIterator ( p1 ) ;
Distance : 2

18
Tree	PathIterator p1 = this . p1 . getPathIterator () ;
Code	PathIterator p1 = this . p1 . getPathIterator () ;
Distance : 6

19
Tree	PathIterator iterator2 = p2 . getPathIterator ( null ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( null ) ;
Distance : 0

20
Tree	PathIterator iterator2 = p2 . getPathIterator ( p2 . class ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( p2 . class ) ;
Distance : 3

21
Tree	PathIterator p1 = p1 . getPathIterator ( p2 . class ) ;
Code	PathIterator p1 = p1 . getPathIterator ( p2 . class ) ;
Distance : 5

22
Tree	PathIterator p1 = p1 . getPathIterator ( null ) ;
Code	PathIterator p1 = p1 . getPathIterator ( null ) ;
Distance : 2

23
Tree	PathIterator p2 = p2 . getPathIterator ( ( p1 ) null ) ;
Code	PathIterator p2 = p2 . getPathIterator ( ( p1 ) null ) ;
Distance : 4

24
Tree	PathIterator iterator2 = p1 . getPathIterator ( NUMBER_CONSTANT ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( NUMBER_CONSTANT ) ;
Distance : 2

25
Tree	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 13

26
Tree	PathIterator iterator2 = p1 . getPathIterator ( STRING_CONSTANT , true ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( STRING_CONSTANT , true ) ;
Distance : 4

27
Tree	PathIterator p2 = p2 . getPathIterator ( p1 . class ) ;
Code	PathIterator p2 = p2 . getPathIterator ( p1 . class ) ;
Distance : 4

28
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , Strictness.LENIENT ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , Strictness.LENIENT ) ;
Distance : 4

29
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , FunctionFlavor.ASYNCHRONOUS ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , FunctionFlavor.ASYNCHRONOUS ) ;
Distance : 4

30
Tree	PathIterator p2 = getPathIterator ( null . getPathIterator ( null ) ) ;
Code	PathIterator p2 = getPathIterator ( null . getPathIterator ( null ) ) ;
Distance : 5

31
Tree	PathIterator p1 = getPathIterator ( null . getPathIterator ( null ) ) ;
Code	PathIterator p1 = getPathIterator ( null . getPathIterator ( null ) ) ;
Distance : 5

32
Tree	PathIterator p1 = p1 . getPathIterator () ;
Code	PathIterator p1 = p1 . getPathIterator () ;
Distance : 5

33
Tree	PathIterator p2 = p2 . getPathIterator ( null ) ;
Code	PathIterator p2 = p2 . getPathIterator ( null ) ;
Distance : 1

34
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , TiesStrategy.MINIMUM ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , TiesStrategy.MINIMUM ) ;
Distance : 4

35
Tree	PathIterator p2 = p1 . getPathIterator ( p1 , this . iterator2 ) ;
Code	PathIterator p2 = p1 . getPathIterator ( p1 , this . iterator2 ) ;
Distance : 7

36
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , iterator2 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , iterator2 . getPathIterator ( null ) ) ;
Distance : 8

37
Tree	PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) super(); ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) super(); ) ;
Distance : 5

38
Tree	PathIterator iterator2 = getPathIterator ( ( null [] ) super(); ) ;
Code	PathIterator iterator2 = getPathIterator ( ( null [] ) super(); ) ;
Distance : 6

39
Tree	PathIterator iterator2 = getPathIterator ( ( null [] ) continue; ) ;
Code	PathIterator iterator2 = getPathIterator ( ( null [] ) continue; ) ;
Distance : 6

40
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , flags.outputWrapper ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , flags.outputWrapper ) ;
Distance : 4

41
Tree	PathIterator iterator2 = getPathIterator ( ( null [] ) return; ) ;
Code	PathIterator iterator2 = getPathIterator ( ( null [] ) return; ) ;
Distance : 6

42
Tree	PathIterator p1 = p2 . getPathIterator ( null ) ;
Code	PathIterator p1 = p2 . getPathIterator ( null ) ;
Distance : 1

43
Tree	synchronized PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Code	synchronized PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Distance : 2

44
Tree	PathIterator p2 = getPathIterator ( p1 . getPathIterator ( null ) ) ;
Code	PathIterator p2 = getPathIterator ( p1 . getPathIterator ( null ) ) ;
Distance : 5

45
Tree	PathIterator p2 = getPathIterator ( ( null [] ) super(); ) ;
Code	PathIterator p2 = getPathIterator ( ( null [] ) super(); ) ;
Distance : 7

46
Tree	PathIterator p2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	PathIterator p2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

47
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , p2 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , p2 . getPathIterator ( null ) ) ;
Distance : 7

48
Tree	PathIterator iterator2 = p2 . getPathIterator ( p1 , iterator2 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( p1 , iterator2 . getPathIterator ( null ) ) ;
Distance : 7

49
Tree	PathIterator iterator2 = p1 . getPathIterator ( p2 ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p2 ) ;
Distance : 2

50
Tree	PathIterator p1 = p1 . getPathIterator ( p1 , iterator2 . getPathIterator ( null ) ) ;
Code	PathIterator p1 = p1 . getPathIterator ( p1 , iterator2 . getPathIterator ( null ) ) ;
Distance : 9

51
Tree	PathIterator p2 = p1 . getPathIterator ( STRING_CONSTANT , true ) ;
Code	PathIterator p2 = p1 . getPathIterator ( STRING_CONSTANT , true ) ;
Distance : 5

52
Tree	PathIterator iterator2 = p2 . getPathIterator ( p1 , this . iterator2 ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( p1 , this . iterator2 ) ;
Distance : 5

53
Tree	PathIterator iterator2 = getPathIterator ( ( null [] ) break; ) ;
Code	PathIterator iterator2 = getPathIterator ( ( null [] ) break; ) ;
Distance : 6

54
Tree	PathIterator p2 = p1 . getPathIterator ( STRING_CONSTANT ) ;
Code	PathIterator p2 = p1 . getPathIterator ( STRING_CONSTANT ) ;
Distance : 3

55
Tree	PathIterator p2 = p1 . getPathIterator () ;
Code	PathIterator p2 = p1 . getPathIterator () ;
Distance : 5

56
Tree	PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 5

57
Tree	PathIterator iterator2 = getPathIterator ( p1 . getPathIterator ( super(); ) ) ;
Code	PathIterator iterator2 = getPathIterator ( p1 . getPathIterator ( super(); ) ) ;
Distance : 5

58
Tree	PathIterator p2 = p1 . getPathIterator ( null , null ) ;
Code	PathIterator p2 = p1 . getPathIterator ( null , null ) ;
Distance : 4

59
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , Strictness.SILENT ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , Strictness.SILENT ) ;
Distance : 4

60
Tree	PathIterator iterator2 = p1 . getPathIterator ( super(); ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( super(); ) ;
Distance : 2

61
Tree	PathIterator p1 = p1 . getPathIterator ( p1 , this . getPathIterator ) ;
Code	PathIterator p1 = p1 . getPathIterator ( p1 , this . getPathIterator ) ;
Distance : 7

62
Tree	synchronized PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	synchronized PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 6

63
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 ) ;
Distance : 2

64
Tree	PathIterator iterator2 = p1 . getPathIterator ( STRING_CONSTANT ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( STRING_CONSTANT ) ;
Distance : 2

65
Tree	PathIterator p1 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	PathIterator p1 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

66
Tree	abstract PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Code	abstract PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Distance : 2

67
Tree	PathIterator iterator2 = p1 . getPathIterator ( p2 , iterator2 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p2 , iterator2 . getPathIterator ( null ) ) ;
Distance : 7

68
Tree	private PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Code	private PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Distance : 2

69
Tree	PathIterator iterator2 = p1 . getPathIterator ( null . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null . getPathIterator ( null ) ) ;
Distance : 6

70
Tree	PathIterator iterator2 = p1 . getPathIterator () ;
Code	PathIterator iterator2 = p1 . getPathIterator () ;
Distance : 4

71
Tree	PathIterator p2 = p1 . getPathIterator ( p1 ) ;
Code	PathIterator p2 = p1 . getPathIterator ( p1 ) ;
Distance : 3

72
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , this . p2 ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , this . p2 ) ;
Distance : 6

73
Tree	PathIterator p2 = p1 . getPathIterator ( p1 , iterator2 . getPathIterator ( null ) ) ;
Code	PathIterator p2 = p1 . getPathIterator ( p1 , iterator2 . getPathIterator ( null ) ) ;
Distance : 9

74
Tree	PathIterator iterator2 = p2 . getPathIterator ( STRING_CONSTANT , true ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( STRING_CONSTANT , true ) ;
Distance : 3

75
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , p1 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , p1 . getPathIterator ( null ) ) ;
Distance : 8

76
Tree	PathIterator iterator2 = this . p1 . getPathIterator () ;
Code	PathIterator iterator2 = this . p1 . getPathIterator () ;
Distance : 5

77
Tree	PathIterator p1 = getPathIterator ( ( null [] ) super(); ) ;
Code	PathIterator p1 = getPathIterator ( ( null [] ) super(); ) ;
Distance : 7

78
Tree	PathIterator p1 = p1 . getPathIterator ( STRING_CONSTANT , true ) ;
Code	PathIterator p1 = p1 . getPathIterator ( STRING_CONSTANT , true ) ;
Distance : 5

79
Tree	final PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Code	final PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Distance : 2

80
Tree	PathIterator p1 = p2 . getPathIterator ( STRING_CONSTANT , true ) ;
Code	PathIterator p1 = p2 . getPathIterator ( STRING_CONSTANT , true ) ;
Distance : 4

81
Tree	PathIterator iterator2 = p2 . getPathIterator ( STRING_CONSTANT ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( STRING_CONSTANT ) ;
Distance : 1

82
Tree	PathIterator iterator2 = p1 . getPathIterator ( ( p2 ) null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( ( p2 ) null ) ;
Distance : 4

83
Tree	PathIterator p2 = p2 . getPathIterator ( STRING_CONSTANT ) ;
Code	PathIterator p2 = p2 . getPathIterator ( STRING_CONSTANT ) ;
Distance : 2

84
Tree	PathIterator p2 = p1 . getPathIterator ( ( p1 ) null ) ;
Code	PathIterator p2 = p1 . getPathIterator ( ( p1 ) null ) ;
Distance : 5

85
Tree	PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) continue; ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) continue; ) ;
Distance : 5

86
Tree	PathIterator iterator2 = p1 . getPathIterator ( null , null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null , null ) ;
Distance : 3

87
Tree	PathIterator p1 = p1 . getPathIterator ( STRING_CONSTANT ) ;
Code	PathIterator p1 = p1 . getPathIterator ( STRING_CONSTANT ) ;
Distance : 3

88
Tree	PathIterator p2 = p1 . getPathIterator ( p1 . class ) ;
Code	PathIterator p2 = p1 . getPathIterator ( p1 . class ) ;
Distance : 5

89
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Distance : 1

90
Tree	PathIterator iterator2 = p2 . getPathIterator ( ( p1 ) null ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( ( p1 ) null ) ;
Distance : 3

91
Tree	PathIterator p1 = getPathIterator ( p1 . getPathIterator ( null ) ) ;
Code	PathIterator p1 = getPathIterator ( p1 . getPathIterator ( null ) ) ;
Distance : 5

92
Tree	PathIterator iterator2 = p2 . getPathIterator ( p1 . class ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( p1 . class ) ;
Distance : 3

93
Tree	PathIterator p1 = p1 . getPathIterator ( ( p1 ) null ) ;
Code	PathIterator p1 = p1 . getPathIterator ( ( p1 ) null ) ;
Distance : 5

94
Tree	PathIterator p1 = p2 . getPathIterator ( STRING_CONSTANT ) ;
Code	PathIterator p1 = p2 . getPathIterator ( STRING_CONSTANT ) ;
Distance : 2

95
Tree	PathIterator p2 = p1 . getPathIterator ( p1 . getPathIterator ( null ) ) ;
Code	PathIterator p2 = p1 . getPathIterator ( p1 . getPathIterator ( null ) ) ;
Distance : 7

96
Tree	PathIterator p1 = p1 . getPathIterator ( p1 . class ) ;
Code	PathIterator p1 = p1 . getPathIterator ( p1 . class ) ;
Distance : 5

97
Tree	PathIterator iterator2 = p1 . getPathIterator ( p2 , p2 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p2 , p2 . getPathIterator ( null ) ) ;
Distance : 7

98
Tree	PathIterator p2 = getPathIterator ( ( null [] ) continue; ) ;
Code	PathIterator p2 = getPathIterator ( ( null [] ) continue; ) ;
Distance : 7

99
Tree	PathIterator iterator2 = this . p1 . getPathIterator () ; wanted
Code	PathIterator iterator2 = this . p1 . getPathIterator () ; wanted
Distance : 6

100
Tree	PathIterator p2 = p1 . getPathIterator ( STRING_CONSTANT ) ;
Code	PathIterator p2 = p1 . getPathIterator ( STRING_CONSTANT ) ;
Distance : 3

101
Tree	abstract PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	abstract PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 6

102
Tree	PathIterator p1 = p2 . getPathIterator () ;
Code	PathIterator p1 = p2 . getPathIterator () ;
Distance : 4

103
Tree	PathIterator iterator2 = p1 . getPathIterator ( null , iterator2 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null , iterator2 . getPathIterator ( null ) ) ;
Distance : 8

104
Tree	PathIterator p2 = p1 . getPathIterator () ;
Code	PathIterator p2 = p1 . getPathIterator () ;
Distance : 5

105
Tree	PathIterator p1 = p2 . getPathIterator ( null , null ) ;
Code	PathIterator p1 = p2 . getPathIterator ( null , null ) ;
Distance : 3

106
Tree	PathIterator iterator2 = p1 . getPathIterator ( STRING_CONSTANT ) ; wanted
Code	PathIterator iterator2 = p1 . getPathIterator ( STRING_CONSTANT ) ; wanted
Distance : 3

107
Tree	PathIterator p2 = p1 . getPathIterator ( ( p2 ) null ) ;
Code	PathIterator p2 = p1 . getPathIterator ( ( p2 ) null ) ;
Distance : 5

108
Tree	PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) return; ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) return; ) ;
Distance : 5

109
Tree	private PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	private PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 6

110
Tree	PathIterator iterator2 = p1 . getPathIterator ( null , this . iterator2 ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null , this . iterator2 ) ;
Distance : 5

111
Tree	final PathIterator iterator2 = p2 . getPathIterator ( ( null [] ) null ) ;
Code	final PathIterator iterator2 = p2 . getPathIterator ( ( null [] ) null ) ;
Distance : 5

112
Tree	public PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	public PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 6

113
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , this . p1 ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , this . p1 ) ;
Distance : 6

114
Tree	final PathIterator p1 = p1 . getPathIterator ( null ) ;
Code	final PathIterator p1 = p1 . getPathIterator ( null ) ;
Distance : 3

115
Tree	PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) break; ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) break; ) ;
Distance : 5

116
Tree	PathIterator iterator2 = this . getPathIterator . getPathIterator () ;
Code	PathIterator iterator2 = this . getPathIterator . getPathIterator () ;
Distance : 4

117
Tree	PathIterator p2 = p1 . getPathIterator ( p2 . getPathIterator ( null ) ) ;
Code	PathIterator p2 = p1 . getPathIterator ( p2 . getPathIterator ( null ) ) ;
Distance : 6

118
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Distance : 1

119
Tree	PathIterator iterator2 = getPathIterator ( null . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = getPathIterator ( null . getPathIterator ( null ) ) ;
Distance : 4

120
Tree	PathIterator iterator2 = p2 . getPathIterator ( p2 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( p2 . getPathIterator ( null ) ) ;
Distance : 5

121
Tree	final PathIterator p1 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	final PathIterator p1 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 7

122
Tree	PathIterator iterator2 = p2 . getPathIterator () ;
Code	PathIterator iterator2 = p2 . getPathIterator () ;
Distance : 3

123
Tree	PathIterator p2 = p1 . getPathIterator ( STRING_CONSTANT , false ) ;
Code	PathIterator p2 = p1 . getPathIterator ( STRING_CONSTANT , false ) ;
Distance : 5

124
Tree	PathIterator p2 = p2 . getPathIterator () ;
Code	PathIterator p2 = p2 . getPathIterator () ;
Distance : 4

125
Tree	PathIterator iterator2 = p1 . getPathIterator () ; wanted
Code	PathIterator iterator2 = p1 . getPathIterator () ; wanted
Distance : 5

126
Tree	abstract PathIterator p2 = p1 . getPathIterator ( null ) ;
Code	abstract PathIterator p2 = p1 . getPathIterator ( null ) ;
Distance : 3

127
Tree	PathIterator iterator2 = p1 . getPathIterator ( p2 , this . p1 ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p2 , this . p1 ) ;
Distance : 6

128
Tree	PathIterator p1 = p1 . getPathIterator ( ( p2 ) null ) ;
Code	PathIterator p1 = p1 . getPathIterator ( ( p2 ) null ) ;
Distance : 5

129
Tree	PathIterator p1 = p1 . getPathIterator ( p2 . getPathIterator ( null ) ) ;
Code	PathIterator p1 = p1 . getPathIterator ( p2 . getPathIterator ( null ) ) ;
Distance : 6

130
Tree	PathIterator p1 = getPathIterator ( p2 . getPathIterator ( null ) ) ;
Code	PathIterator p1 = getPathIterator ( p2 . getPathIterator ( null ) ) ;
Distance : 4

131
Tree	PathIterator p1 = getPathIterator ( ( null [] ) null ) ;
Code	PathIterator p1 = getPathIterator ( ( null [] ) null ) ;
Distance : 7

132
Tree	PathIterator iterator2 = p1 . getPathIterator ( p2 , this . getPathIterator ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p2 , this . getPathIterator ) ;
Distance : 6

133
Tree	PathIterator iterator2 = p2 . getPathIterator ( null , null ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( null , null ) ;
Distance : 2

134
Tree	static PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Code	static PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Distance : 2

135
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , TransformType.INVERSE ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , TransformType.INVERSE ) ;
Distance : 4

136
Tree	PathIterator iterator2 = p1 . getPathIterator ( p2 . class ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p2 . class ) ;
Distance : 4

137
Tree	PathIterator p2 = p1 . getPathIterator ( p1 , this . p1 ) ;
Code	PathIterator p2 = p1 . getPathIterator ( p1 , this . p1 ) ;
Distance : 7

138
Tree	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 14

139
Tree	PathIterator iterator2 = p1 . getPathIterator ( ( null ) null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( ( null ) null ) ;
Distance : 4

140
Tree	public PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Code	public PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Distance : 2

141
Tree	PathIterator iterator2 = p2 . getPathIterator ( p1 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( p1 . getPathIterator ( null ) ) ;
Distance : 5

142
Tree	PathIterator p2 = p1 . getPathIterator ( p1 , p2 . getPathIterator ( null ) ) ;
Code	PathIterator p2 = p1 . getPathIterator ( p1 , p2 . getPathIterator ( null ) ) ;
Distance : 8

143
Tree	PathIterator p1 = p1 . getPathIterator ( p1 . getPathIterator ( null ) ) ;
Code	PathIterator p1 = p1 . getPathIterator ( p1 . getPathIterator ( null ) ) ;
Distance : 7

144
Tree	PathIterator p2 = p2 . getPathIterator ( p1 . getPathIterator ( null ) ) ;
Code	PathIterator p2 = p2 . getPathIterator ( p1 . getPathIterator ( null ) ) ;
Distance : 6

145
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , this . iterator2 ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , this . iterator2 ) ;
Distance : 6

146
Tree	PathIterator iterator2 = p1 . getPathIterator ( null , super(); ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null , super(); ) ;
Distance : 3

147
Tree	PathIterator p2 = p2 . getPathIterator ( ( null [] ) null ) ;
Code	PathIterator p2 = p2 . getPathIterator ( ( null [] ) null ) ;
Distance : 5

148
Tree	PathIterator iterator2 = getPathIterator ( p1 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = getPathIterator ( p1 . getPathIterator ( null ) ) ;
Distance : 4

149
Tree	PathIterator iterator2 = p1 . getPathIterator ( null . class ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null . class ) ;
Distance : 3

150
Tree	PathIterator iterator2 = p1 . getPathIterator ( continue; ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( continue; ) ;
Distance : 2

151
Tree	PathIterator p1 = p2 . getPathIterator ( ( null [] ) null ) ;
Code	PathIterator p1 = p2 . getPathIterator ( ( null [] ) null ) ;
Distance : 5

152
Tree	PathIterator iterator2 = p1 . getPathIterator ( continue; , null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( continue; , null ) ;
Distance : 3

153
Tree	final PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	final PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 6

154
Tree	PathIterator iterator2 = p1 . getPathIterator ( p2 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p2 . getPathIterator ( null ) ) ;
Distance : 5

155
Tree	PathIterator iterator2 = this . p2 . getPathIterator () ;
Code	PathIterator iterator2 = this . p2 . getPathIterator () ;
Distance : 5

156
Tree	final PathIterator p2 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	final PathIterator p2 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 7

157
Tree	abstract PathIterator p2 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	abstract PathIterator p2 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 7

158
Tree	PathIterator iterator2 = getPathIterator ( p2 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = getPathIterator ( p2 . getPathIterator ( null ) ) ;
Distance : 3

159
Tree	PathIterator p2 = getPathIterator ( ( null [] ) null ) ;
Code	PathIterator p2 = getPathIterator ( ( null [] ) null ) ;
Distance : 7

160
Tree	PathIterator iterator2 = p2 . getPathIterator ( ( p2 ) null ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( ( p2 ) null ) ;
Distance : 3

161
Tree	PathIterator p2 = getPathIterator ( p2 . getPathIterator ( null ) ) ;
Code	PathIterator p2 = getPathIterator ( p2 . getPathIterator ( null ) ) ;
Distance : 4

162
Tree	PathIterator p1 = p1 . getPathIterator () ;
Code	PathIterator p1 = p1 . getPathIterator () ;
Distance : 5

163
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , LocalizedFormats.INTERNAL_ERROR ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , LocalizedFormats.INTERNAL_ERROR ) ;
Distance : 4

164
Tree	PathIterator p1 = p1 . getPathIterator ( null , null ) ;
Code	PathIterator p1 = p1 . getPathIterator ( null , null ) ;
Distance : 4

165
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Distance : 4

166
Tree	PathIterator p2 = p2 . getPathIterator ( null , null ) ;
Code	PathIterator p2 = p2 . getPathIterator ( null , null ) ;
Distance : 3

167
Tree	PathIterator iterator2 = p2 . getPathIterator ( p1 ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( p1 ) ;
Distance : 1

168
Tree	PathIterator p2 = p1 . getPathIterator ( p2 ) ;
Code	PathIterator p2 = p1 . getPathIterator ( p2 ) ;
Distance : 3

169
Tree	PathIterator p2 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	PathIterator p2 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 6

170
Tree	static PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	static PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 6

171
Tree	PathIterator iterator2 = Color.BLUE . getPathIterator ( NUMBER_CONSTANT ) ;
Code	PathIterator iterator2 = Color.BLUE . getPathIterator ( NUMBER_CONSTANT ) ;
Distance : 2

172
Tree	PathIterator p1 = p1 . getPathIterator ( STRING_CONSTANT ) ;
Code	PathIterator p1 = p1 . getPathIterator ( STRING_CONSTANT ) ;
Distance : 3

173
Tree	PathIterator iterator2 = p1 . getPathIterator ( ( p1 ) null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( ( p1 ) null ) ;
Distance : 4

174
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , c.seriesList ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , c.seriesList ) ;
Distance : 4

175
Tree	PathIterator p1 = p1 . getPathIterator ( p1 ) ;
Code	PathIterator p1 = p1 . getPathIterator ( p1 ) ;
Distance : 3

176
Tree	PathIterator p2 = this . p1 . getPathIterator () ;
Code	PathIterator p2 = this . p1 . getPathIterator () ;
Distance : 6

177
Tree	PathIterator iterator2 = yDot1 . getPathIterator ( NUMBER_CONSTANT ) ;
Code	PathIterator iterator2 = yDot1 . getPathIterator ( NUMBER_CONSTANT ) ;
Distance : 2

178
Tree	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; {}
Code	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; {}
Distance : 14

179
Tree	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; toString
Code	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; toString
Distance : 14

180
Tree	PathIterator iterator2 = p2 . getPathIterator ( p2 ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( p2 ) ;
Distance : 1

181
Tree	PathIterator p2 = this . iterator2 . getPathIterator () ;
Code	PathIterator p2 = this . iterator2 . getPathIterator () ;
Distance : 6

182
Tree	PathIterator p1 = this . getPathIterator . getPathIterator () ;
Code	PathIterator p1 = this . getPathIterator . getPathIterator () ;
Distance : 5

183
Tree	PathIterator iterator2 = p1 . getPathIterator ( super(); , null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( super(); , null ) ;
Distance : 3

184
Tree	PathIterator iterator2 = getPathIterator ( ( null [] ) null ) ;
Code	PathIterator iterator2 = getPathIterator ( ( null [] ) null ) ;
Distance : 6

185
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 . getPathIterator ( null ) ) ;
Distance : 6

186
Tree	PathIterator p2 = this . p2 . getPathIterator () ;
Code	PathIterator p2 = this . p2 . getPathIterator () ;
Distance : 6

187
Tree	PathIterator iterator2 = p1 . getPathIterator ( STRING_CONSTANT ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( STRING_CONSTANT ) ;
Distance : 2

188
Tree	PathIterator iterator2 = p1 . getPathIterator () ;
Code	PathIterator iterator2 = p1 . getPathIterator () ;
Distance : 4

189
Tree	PathIterator iterator2 = p1 . getPathIterator ( null , null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null , null ) ;
Distance : 3

190
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 . class ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 . class ) ;
Distance : 4

191
Tree	PathIterator iterator2 = p2 . getPathIterator ( STRING_CONSTANT , false ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( STRING_CONSTANT , false ) ;
Distance : 3

192
Tree	final PathIterator p2 = p1 . getPathIterator ( null ) ;
Code	final PathIterator p2 = p1 . getPathIterator ( null ) ;
Distance : 3

193
Tree	PathIterator p1 = p1 . getPathIterator ( p2 ) ;
Code	PathIterator p1 = p1 . getPathIterator ( p2 ) ;
Distance : 3

194
Tree	PathIterator iterator2 = p1 . getPathIterator ( STRING_CONSTANT , false ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( STRING_CONSTANT , false ) ;
Distance : 4

195
Tree	PathIterator p1 = this . p2 . getPathIterator () ;
Code	PathIterator p1 = this . p2 . getPathIterator () ;
Distance : 6

196
Tree	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; p
Code	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; p
Distance : 14

197
Tree	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; ParamChecks
Code	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; ParamChecks
Distance : 14

198
Tree	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Preconditions
Code	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Preconditions
Distance : 14

199
Tree	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; &&
Code	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; &&
Distance : 14

========================================================================


========================================================================
Example Number: 7
Parent Code is: 
{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; }
-------------------------------------------------------------------------------
Child code is: 
{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (800{val=toolTipText}) (200{val=+}) (45{val=STRING_CONSTANT})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=ImageMapUtilities}) (235{val=.}) (802{val=htmlEscape}) (214{val=(}) (800{val=toolTipText}) (215{val=)})) (200{val=+}) (45{val=STRING_CONSTANT})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/10/parent/source_org_jfree_chart_imagemap_StandardToolTipTagFragmentGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	{ return toolTipText . htmlEscape ( Any.ANY , System.out ) ; }
Code	{ return toolTipText . htmlEscape ( Any.ANY , System.out ) ; }
Distance : 7

1
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Distance : 3

2
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText . htmlEscape ( toolTipText ) ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText . htmlEscape ( toolTipText ) ) ; }
Distance : 8

3
Tree	{ return htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

4
Tree	{ return ( int ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( int ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

5
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Distance : 3

6
Tree	{ return toolTipText . htmlEscape ( Any.ANY , iValues.length ) ; }
Code	{ return toolTipText . htmlEscape ( Any.ANY , iValues.length ) ; }
Distance : 7

7
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText . htmlEscape ( ImageMapUtilities ) ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText . htmlEscape ( ImageMapUtilities ) ) ; }
Distance : 10

8
Tree	{ return toolTipText . htmlEscape ( java.util.Locale.US , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( java.util.Locale.US , toolTipText ) ; }
Distance : 7

9
Tree	{ return toolTipText . htmlEscape ( Any.ANY , StringUtils.EMPTY ) ; }
Code	{ return toolTipText . htmlEscape ( Any.ANY , StringUtils.EMPTY ) ; }
Distance : 7

10
Tree	{ return new MatchersPrinter ( toolTipText ) ; }
Code	{ return new MatchersPrinter ( toolTipText ) ; }
Distance : 7

11
Tree	{ return new ThreadSafeDelegatingErrorManager ( toolTipText ) ; }
Code	{ return new ThreadSafeDelegatingErrorManager ( toolTipText ) ; }
Distance : 7

12
Tree	{ return new SerializableBoundedType ( toolTipText ) ; }
Code	{ return new SerializableBoundedType ( toolTipText ) ; }
Distance : 7

13
Tree	{ return toolTipText . htmlEscape ( Any.ANY , Feature.STRING_CONTINUATION ) ; }
Code	{ return toolTipText . htmlEscape ( Any.ANY , Feature.STRING_CONTINUATION ) ; }
Distance : 7

14
Tree	{ return new Median ( toolTipText ) ; }
Code	{ return new Median ( toolTipText ) ; }
Distance : 7

15
Tree	{ return new MatchersPrinter ( ImageMapUtilities ) ; }
Code	{ return new MatchersPrinter ( ImageMapUtilities ) ; }
Distance : 8

16
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 5

17
Tree	{ return new SerializableBoundedType ( ImageMapUtilities ) ; }
Code	{ return new SerializableBoundedType ( ImageMapUtilities ) ; }
Distance : 8

18
Tree	{ return toolTipText . htmlEscape ( toolTipText , ImageMapUtilities . htmlEscape ( toolTipText ) ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , ImageMapUtilities . htmlEscape ( toolTipText ) ) ; }
Distance : 8

19
Tree	{ return toolTipText . htmlEscape ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Code	{ return toolTipText . htmlEscape ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Distance : 6

20
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText ) ; }
Distance : 4

21
Tree	{ return ( byte ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( byte ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

22
Tree	{ return ! ImageMapUtilities . htmlEscape ( toolTipText ) ; }
Code	{ return ! ImageMapUtilities . htmlEscape ( toolTipText ) ; }
Distance : 4

23
Tree	{ return ( double ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( double ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

24
Tree	{ return ( long ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( long ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

25
Tree	{ return ( char ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( char ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

26
Tree	{ return htmlEscape ( toolTipText , toolTipText ) ; } options
Code	{ return htmlEscape ( toolTipText , toolTipText ) ; } options
Distance : 8

27
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText . htmlEscape ( toolTipText ) ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText . htmlEscape ( toolTipText ) ) ; }
Distance : 8

28
Tree	{ return htmlEscape ( toolTipText , toolTipText ) ; } &&
Code	{ return htmlEscape ( toolTipText , toolTipText ) ; } &&
Distance : 8

29
Tree	{ return htmlEscape ( toolTipText , toolTipText ) ; } T
Code	{ return htmlEscape ( toolTipText , toolTipText ) ; } T
Distance : 8

30
Tree	{ return TimeUnit.MILLISECONDS ; }
Code	{ return TimeUnit.MILLISECONDS ; }
Distance : 10

31
Tree	{ return LazyHolder.INSTANCE ; }
Code	{ return LazyHolder.INSTANCE ; }
Distance : 10

32
Tree	{ return Format.TYPED ; }
Code	{ return Format.TYPED ; }
Distance : 10

33
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Distance : 6

34
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , null , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , null , toolTipText ) ; }
Distance : 7

35
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Distance : 2

36
Tree	{ return htmlEscape () . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return htmlEscape () . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 6

37
Tree	{ return toolTipText ; } {}
Code	{ return toolTipText ; } {}
Distance : 10

38
Tree	{ return toolTipText ; } MathRuntimeException
Code	{ return toolTipText ; } MathRuntimeException
Distance : 10

39
Tree	{ return ! toolTipText . htmlEscape ( toolTipText ) ; }
Code	{ return ! toolTipText . htmlEscape ( toolTipText ) ; }
Distance : 5

40
Tree	{ return toolTipText . htmlEscape ( Any.ANY , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( Any.ANY , toolTipText ) ; }
Distance : 7

41
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; } wanted
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; } wanted
Distance : 4

42
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } T
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } T
Distance : 5

43
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } p
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } p
Distance : 5

44
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } options
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } options
Distance : 5

45
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } source
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } source
Distance : 5

46
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } toString
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } toString
Distance : 5

47
Tree	{ return toolTipText . htmlEscape ( toolTipText ) ; } toString
Code	{ return toolTipText . htmlEscape ( toolTipText ) ; } toString
Distance : 6

48
Tree	{ return ! toolTipText . htmlEscape ( toolTipText ) ; } T
Code	{ return ! toolTipText . htmlEscape ( toolTipText ) ; } T
Distance : 6

49
Tree	{ return toolTipText . htmlEscape ( toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText ) ; }
Distance : 5

50
Tree	{ return toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 6

51
Tree	{ return ( float ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( float ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

52
Tree	{ return ! toolTipText . htmlEscape ( toolTipText ) ; } p
Code	{ return ! toolTipText . htmlEscape ( toolTipText ) ; } p
Distance : 6

53
Tree	{ return ! toolTipText . htmlEscape ( toolTipText ) ; } &&
Code	{ return ! toolTipText . htmlEscape ( toolTipText ) ; } &&
Distance : 6

54
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } &&
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } &&
Distance : 5

55
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , ImageMapUtilities . htmlEscape ( toolTipText ) ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , ImageMapUtilities . htmlEscape ( toolTipText ) ) ; }
Distance : 8

56
Tree	{ return toolTipText . htmlEscape ( Any.ANY , p2.vector ) ; }
Code	{ return toolTipText . htmlEscape ( Any.ANY , p2.vector ) ; }
Distance : 7

57
Tree	{ return toolTipText . htmlEscape ( Any.ANY ) ; }
Code	{ return toolTipText . htmlEscape ( Any.ANY ) ; }
Distance : 6

58
Tree	{ return toolTipText . htmlEscape ( Any.ANY , JUnitRule.Strictness.WARN ) ; }
Code	{ return toolTipText . htmlEscape ( Any.ANY , JUnitRule.Strictness.WARN ) ; }
Distance : 7

59
Tree	{ return toolTipText . htmlEscape ( Nullability.EXPLICIT , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( Nullability.EXPLICIT , toolTipText ) ; }
Distance : 7

60
Tree	{ return toolTipText . htmlEscape ( java.util.Locale.US , Any.ANY ) ; }
Code	{ return toolTipText . htmlEscape ( java.util.Locale.US , Any.ANY ) ; }
Distance : 7

61
Tree	{ return htmlEscape () . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Code	{ return htmlEscape () . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Distance : 7

62
Tree	{ return toolTipText . htmlEscape ( LocalizedFormats.NO_DATA , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( LocalizedFormats.NO_DATA , toolTipText ) ; }
Distance : 7

63
Tree	{ return new HashMap ( ImageMapUtilities ) ; }
Code	{ return new HashMap ( ImageMapUtilities ) ; }
Distance : 8

64
Tree	{ return toolTipText . htmlEscape ( Any.ANY , Locale.US ) ; }
Code	{ return toolTipText . htmlEscape ( Any.ANY , Locale.US ) ; }
Distance : 7

65
Tree	{ return ImageMapUtilities ; }
Code	{ return ImageMapUtilities ; }
Distance : 9

66
Tree	{ return toolTipText . htmlEscape ( Any.ANY , yArray.length ) ; }
Code	{ return toolTipText . htmlEscape ( Any.ANY , yArray.length ) ; }
Distance : 7

67
Tree	{ return new ThreadSafeDelegatingErrorManager ( ImageMapUtilities ) ; }
Code	{ return new ThreadSafeDelegatingErrorManager ( ImageMapUtilities ) ; }
Distance : 8

68
Tree	{ return toolTipText . htmlEscape ( Any.ANY , Any.ANY ) ; }
Code	{ return toolTipText . htmlEscape ( Any.ANY , Any.ANY ) ; }
Distance : 7

69
Tree	{ return toolTipText . htmlEscape ( toolTipText ) ; } source
Code	{ return toolTipText . htmlEscape ( toolTipText ) ; } source
Distance : 6

70
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 4

71
Tree	{ return true ; }
Code	{ return true ; }
Distance : 10

72
Tree	{ return ( short ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( short ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

73
Tree	{ return toolTipText . htmlEscape ( Nullability.EXPLICIT ) ; }
Code	{ return toolTipText . htmlEscape ( Nullability.EXPLICIT ) ; }
Distance : 6

74
Tree	{ return entry.map . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return entry.map . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

75
Tree	{ return ! toolTipText . htmlEscape ( toolTipText ) ; } options
Code	{ return ! toolTipText . htmlEscape ( toolTipText ) ; } options
Distance : 6

76
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 3

77
Tree	{ return toolTipText . htmlEscape ( LocalizedFormats.INVALID_ITERATIONS_LIMITS , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( LocalizedFormats.INVALID_ITERATIONS_LIMITS , toolTipText ) ; }
Distance : 7

78
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; } Math
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; } Math
Distance : 4

79
Tree	{ return new Median ( ImageMapUtilities ) ; }
Code	{ return new Median ( ImageMapUtilities ) ; }
Distance : 8

80
Tree	{ return false ; } Class
Code	{ return false ; } Class
Distance : 11

81
Tree	{ return iConverters.length . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return iConverters.length . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

82
Tree	{ return ! toolTipText . htmlEscape ( toolTipText ) ; } source
Code	{ return ! toolTipText . htmlEscape ( toolTipText ) ; } source
Distance : 6

83
Tree	{ return toolTipText ; } ParamChecks
Code	{ return toolTipText ; } ParamChecks
Distance : 10

84
Tree	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

85
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new HashSet () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new HashSet () ) + STRING_CONSTANT ; }
Distance : 4

86
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 5

87
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 5

88
Tree	{ return entry.map . htmlEscape ( toolTipText , toolTipText , ImageMapUtilities ) ; }
Code	{ return entry.map . htmlEscape ( toolTipText , toolTipText , ImageMapUtilities ) ; }
Distance : 8

89
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new Object () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new Object () ) + STRING_CONSTANT ; }
Distance : 4

90
Tree	{ return toolTipText . htmlEscape ( LocalizedFormats.NO_DATA ) ; }
Code	{ return toolTipText . htmlEscape ( LocalizedFormats.NO_DATA ) ; }
Distance : 6

91
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new DummyLocalizable () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new DummyLocalizable () ) + STRING_CONSTANT ; }
Distance : 4

92
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new ConsoleMockitoLogger () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new ConsoleMockitoLogger () ) + STRING_CONSTANT ; }
Distance : 4

93
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new ThreadSafeDelegatingErrorManager () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new ThreadSafeDelegatingErrorManager () ) + STRING_CONSTANT ; }
Distance : 4

94
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new SerializableBoundedType () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new SerializableBoundedType () ) + STRING_CONSTANT ; }
Distance : 4

95
Tree	{ return toolTipText ; } -
Code	{ return toolTipText ; } -
Distance : 10

96
Tree	{ return toolTipText . htmlEscape ( toolTipText , null , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , null , toolTipText ) ; }
Distance : 8

97
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new NoDataException () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new NoDataException () ) + STRING_CONSTANT ; }
Distance : 4

98
Tree	{ return htmlEscape ( toolTipText , toolTipText ) ; } source
Code	{ return htmlEscape ( toolTipText , toolTipText ) ; } source
Distance : 8

99
Tree	{ return ( void ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( void ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

100
Tree	{ return toolTipText ; } Preconditions
Code	{ return toolTipText ; } Preconditions
Distance : 10

101
Tree	{ return htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 7

102
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new SerializableTypeVariable () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new SerializableTypeVariable () ) + STRING_CONSTANT ; }
Distance : 4

103
Tree	{ return htmlEscape ( toolTipText , toolTipText ) ; } toString
Code	{ return htmlEscape ( toolTipText , toolTipText ) ; } toString
Distance : 8

104
Tree	{ return ( int ) ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( int ) ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

105
Tree	{ return false ; }
Code	{ return false ; }
Distance : 10

106
Tree	{ return com.google.protobuf.GeneratedMessageV3 . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

107
Tree	{ return ! toolTipText . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return ! toolTipText . htmlEscape ( ImageMapUtilities ) ; }
Distance : 6

108
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText . htmlEscape ( ImageMapUtilities ) ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText . htmlEscape ( ImageMapUtilities ) ) ; }
Distance : 9

109
Tree	{ return iConverters.length . htmlEscape ( toolTipText , toolTipText , ImageMapUtilities ) ; }
Code	{ return iConverters.length . htmlEscape ( toolTipText , toolTipText , ImageMapUtilities ) ; }
Distance : 8

110
Tree	{ return org.joda.time.gwt.util.Arrays . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

111
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 7

112
Tree	{ return org.joda.time.gwt.util.Arrays ; }
Code	{ return org.joda.time.gwt.util.Arrays ; }
Distance : 10

113
Tree	{ return ! toolTipText . htmlEscape ( toolTipText ) ; } toString
Code	{ return ! toolTipText . htmlEscape ( toolTipText ) ; } toString
Distance : 6

114
Tree	{ return StringUtils.EMPTY ; }
Code	{ return StringUtils.EMPTY ; }
Distance : 10

115
Tree	{ return toolTipText . htmlEscape ( toolTipText , null , ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , null , ImageMapUtilities ) ; }
Distance : 8

116
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities ) ; }
Distance : 6

117
Tree	{ return org.joda.time.gwt.util.Arrays . htmlEscape ( toolTipText , toolTipText , ImageMapUtilities ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . htmlEscape ( toolTipText , toolTipText , ImageMapUtilities ) ; }
Distance : 8

118
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , null , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , null , toolTipText ) ; }
Distance : 9

119
Tree	{ return ( boolean ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( boolean ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

120
Tree	{ return StringUtils.EMPTY . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return StringUtils.EMPTY . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

121
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) + STRING_CONSTANT ; }
Distance : 3

122
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Distance : 0

123
Tree	{ return entry.map ; }
Code	{ return entry.map ; }
Distance : 10

124
Tree	{ return CompilerOptions.J2clPassMode . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return CompilerOptions.J2clPassMode . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

125
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } p
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } p
Distance : 2

126
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } &&
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } &&
Distance : 2

127
Tree	{ return iConverters.length ; }
Code	{ return iConverters.length ; }
Distance : 10

128
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } T
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } T
Distance : 2

129
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 3

130
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new EndsWith () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new EndsWith () ) + STRING_CONSTANT ; }
Distance : 4

131
Tree	{ return StringUtils.EMPTY . htmlEscape ( toolTipText , toolTipText , ImageMapUtilities ) ; }
Code	{ return StringUtils.EMPTY . htmlEscape ( toolTipText , toolTipText , ImageMapUtilities ) ; }
Distance : 8

132
Tree	{ return toolTipText . htmlEscape ( toolTipText ) ; } options
Code	{ return toolTipText . htmlEscape ( toolTipText ) ; } options
Distance : 6

133
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 6

134
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

135
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new Returns () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new Returns () ) + STRING_CONSTANT ; }
Distance : 4

136
Tree	{ return com.google.protobuf.GeneratedMessageV3 ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 ; }
Distance : 10

137
Tree	{ return toolTipText ; }
Code	{ return toolTipText ; }
Distance : 9

138
Tree	{ return CompilerOptions.J2clPassMode ; }
Code	{ return CompilerOptions.J2clPassMode ; }
Distance : 10

139
Tree	{ return ! ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return ! ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ; }
Distance : 5

140
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , null , ImageMapUtilities ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , null , ImageMapUtilities ) ; }
Distance : 7

141
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ; }
Distance : 5

142
Tree	{ return toolTipText . htmlEscape ( toolTipText , return; , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , return; , toolTipText ) ; }
Distance : 8

143
Tree	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; } toString
Code	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; } toString
Distance : 7

144
Tree	{ return false ; } Preconditions
Code	{ return false ; } Preconditions
Distance : 11

145
Tree	{ return false ; } -
Code	{ return false ; } -
Distance : 11

146
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 2

147
Tree	{ return false ; } ParamChecks
Code	{ return false ; } ParamChecks
Distance : 11

148
Tree	{ return toolTipText . htmlEscape ( toolTipText , super(); , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , super(); , toolTipText ) ; }
Distance : 8

149
Tree	{ return false ; } f
Code	{ return false ; } f
Distance : 11

150
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Distance : 7

151
Tree	{ return false ; } {}
Code	{ return false ; } {}
Distance : 11

152
Tree	{ return htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 7

153
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Distance : 4

154
Tree	{ return new HashMap ( toolTipText ) ; }
Code	{ return new HashMap ( toolTipText ) ; }
Distance : 7

155
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 2

156
Tree	{ return false ; } MathRuntimeException
Code	{ return false ; } MathRuntimeException
Distance : 11

157
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape ( ImageMapUtilities ) ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape ( ImageMapUtilities ) ) ; }
Distance : 10

158
Tree	{ return false ; } Test
Code	{ return false ; } Test
Distance : 11

159
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , null , ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , null , ImageMapUtilities ) ; }
Distance : 9

160
Tree	{ return toolTipText . htmlEscape ( TimeZones.GMT_ID , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( TimeZones.GMT_ID , toolTipText ) ; }
Distance : 7

161
Tree	{ return toolTipText . htmlEscape ( LocalizedFormats.INVALID_ITERATIONS_LIMITS ) ; }
Code	{ return toolTipText . htmlEscape ( LocalizedFormats.INVALID_ITERATIONS_LIMITS ) ; }
Distance : 6

162
Tree	{ return toolTipText . htmlEscape ( FastDateParser.JAPANESE_IMPERIAL , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( FastDateParser.JAPANESE_IMPERIAL , toolTipText ) ; }
Distance : 7

163
Tree	{ return htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Code	{ return htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Distance : 8

164
Tree	{ return toolTipText . htmlEscape ( TimeZones.GMT_ID ) ; }
Code	{ return toolTipText . htmlEscape ( TimeZones.GMT_ID ) ; }
Distance : 6

165
Tree	{ return toolTipText . htmlEscape ( toolTipText ) ; } p
Code	{ return toolTipText . htmlEscape ( toolTipText ) ; } p
Distance : 6

166
Tree	{ return toolTipText . htmlEscape ( ComposableFunction.ATAN , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( ComposableFunction.ATAN , toolTipText ) ; }
Distance : 7

167
Tree	{ return toolTipText . htmlEscape ( RandomSource.MT_64 , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( RandomSource.MT_64 , toolTipText ) ; }
Distance : 7

168
Tree	{ return toolTipText . htmlEscape ( toolTipText , continue; , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , continue; , toolTipText ) ; }
Distance : 8

169
Tree	{ return toolTipText . htmlEscape ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , toolTipText ) ; }
Distance : 7

170
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , null , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , null , toolTipText ) ; }
Distance : 8

171
Tree	{ return toolTipText . htmlEscape ( FastDateParser.JAPANESE_IMPERIAL ) ; }
Code	{ return toolTipText . htmlEscape ( FastDateParser.JAPANESE_IMPERIAL ) ; }
Distance : 6

172
Tree	{ return toolTipText . htmlEscape ( ComposableFunction.ATAN ) ; }
Code	{ return toolTipText . htmlEscape ( ComposableFunction.ATAN ) ; }
Distance : 6

173
Tree	{ return toolTipText . htmlEscape ( RandomSource.MT_64 ) ; }
Code	{ return toolTipText . htmlEscape ( RandomSource.MT_64 ) ; }
Distance : 6

174
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText . htmlEscape ( toolTipText ) ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText . htmlEscape ( toolTipText ) ) ; }
Distance : 9

175
Tree	{ return htmlEscape ( toolTipText , toolTipText ) ; } p
Code	{ return htmlEscape ( toolTipText , toolTipText ) ; } p
Distance : 8

176
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 1

177
Tree	{ return htmlEscape () . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return htmlEscape () . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 7

178
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } options
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } options
Distance : 2

179
Tree	{ return DecompositionType.UNDECOMPOSABLE ; }
Code	{ return DecompositionType.UNDECOMPOSABLE ; }
Distance : 10

180
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape ( toolTipText ) ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape ( toolTipText ) ) ; }
Distance : 9

181
Tree	{ return toolTipText ; } Test
Code	{ return toolTipText ; } Test
Distance : 10

182
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 4

183
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText ) + STRING_CONSTANT ; }
Distance : 2

184
Tree	{ return toolTipText . htmlEscape ( toolTipText , ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ) ; }
Distance : 9

185
Tree	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; } source
Code	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; } source
Distance : 7

186
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Distance : 1

187
Tree	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; } options
Code	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; } options
Distance : 7

188
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } wanted
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } wanted
Distance : 7

189
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } Math
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; } Math
Distance : 7

190
Tree	{ return toolTipText . htmlEscape ( toolTipText ) ; } &&
Code	{ return toolTipText . htmlEscape ( toolTipText ) ; } &&
Distance : 6

191
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } source
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } source
Distance : 2

192
Tree	{ return toolTipText . htmlEscape ( java.util.Locale.US ) ; }
Code	{ return toolTipText . htmlEscape ( java.util.Locale.US ) ; }
Distance : 6

193
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } toString
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } toString
Distance : 2

194
Tree	{ return toolTipText ; } f
Code	{ return toolTipText ; } f
Distance : 10

195
Tree	{ return toolTipText . htmlEscape ( toolTipText ) ; } T
Code	{ return toolTipText . htmlEscape ( toolTipText ) ; } T
Distance : 6

196
Tree	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; } p
Code	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; } p
Distance : 7

197
Tree	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; } &&
Code	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; } &&
Distance : 7

198
Tree	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; } T
Code	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; } T
Distance : 7

199
Tree	{ return toolTipText ; } Class
Code	{ return toolTipText ; } Class
Distance : 10

========================================================================


========================================================================
Example Number: 8
Parent Code is: 
{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ this ( time , zone , Locale . getDefault () ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (17 (315{val=this}) (214{val=(}) (800{val=time}) (234{val=,}) (40{val=RegularTimePeriod.DEFAULT_TIME_ZONE}) (234{val=,}) (32 (800{val=Locale}) (235{val=.}) (802{val=getDefault}) (216{val=()})) (215{val=)}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (17 (315{val=this}) (214{val=(}) (800{val=time}) (234{val=,}) (800{val=zone}) (234{val=,}) (32 (800{val=Locale}) (235{val=.}) (802{val=getDefault}) (216{val=()})) (215{val=)}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/8/parent/source_org_jfree_data_time_Week.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; }
Distance : 8

1
Tree	{ this ( ( , Locale , zone ) ; }
Code	{ this ( ( , Locale , zone ) ; }
Distance : 6

2
Tree	{ this ( time , zone , Locale , time . getDefault () ) ; }
Code	{ this ( time , zone , Locale , time . getDefault () ) ; }
Distance : 2

3
Tree	{ super ( STRING_CONSTANT ) ; time = zone ; }
Code	{ super ( STRING_CONSTANT ) ; time = zone ; }
Distance : 10

4
Tree	{ this ( time , false ) ; }
Code	{ this ( time , false ) ; }
Distance : 6

5
Tree	{ this ( time , zone , Locale , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , zone , Locale , time . getDefault () , Locale . getDefault () ) ; }
Distance : 7

6
Tree	{ super(); time = time ; }
Code	{ super(); time = time ; }
Distance : 10

7
Tree	{ super ( time , time , time , Locale . getDefault () ) ; }
Code	{ super ( time , time , time , Locale . getDefault () ) ; }
Distance : 4

8
Tree	{ this ( time , time , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , time , Locale , Locale . getDefault () ) ; }
Distance : 3

9
Tree	{ this ( time , time , zone , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , time , zone , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 8

10
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 7

11
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , zone . getDefault () ) ; Locale = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , zone . getDefault () ) ; Locale = Locale ; }
Distance : 8

12
Tree	{ super ( time , null , null , Locale , Locale . getDefault () ) ; zone = Locale ; }
Code	{ super ( time , null , null , Locale , Locale . getDefault () ) ; zone = Locale ; }
Distance : 10

13
Tree	{ super ( time , null , null , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , null , null , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 10

14
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; zone = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; zone = Locale ; }
Distance : 8

15
Tree	{ this ( time , true ) ; }
Code	{ this ( time , true ) ; }
Distance : 6

16
Tree	{ this ( time , zone , time , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , zone , time , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 7

17
Tree	{ ; }
Code	{ ; }
Distance : 11

18
Tree	{ this ( time , zone , zone , Locale . getDefault () ) ; }
Code	{ this ( time , zone , zone , Locale . getDefault () ) ; }
Distance : 2

19
Tree	{ super ( time . getDefault () ) ; Locale = zone ; }
Code	{ super ( time . getDefault () ) ; Locale = zone ; }
Distance : 9

20
Tree	{ super ( time . getDefault () ) ; zone = time ; }
Code	{ super ( time . getDefault () ) ; zone = time ; }
Distance : 9

21
Tree	{ super ( zone . getDefault () ) ; zone = Locale ; }
Code	{ super ( zone . getDefault () ) ; zone = Locale ; }
Distance : 9

22
Tree	{ super ( time , time , Locale , time . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , time , Locale , time . getDefault () ) ; Locale . getDefault () ; }
Distance : 9

23
Tree	{ super ( time , time , zone , Locale . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , time , zone , Locale . getDefault () ) ; Locale . getDefault () ; }
Distance : 8

24
Tree	{ this ( ( , zone , zone ) ; }
Code	{ this ( ( , zone , zone ) ; }
Distance : 5

25
Tree	{ this ( zone . getDefault () , zone ) ; }
Code	{ this ( zone . getDefault () , zone ) ; }
Distance : 6

26
Tree	{ super ( time , zone . getDefault () ) ; zone = Locale ; }
Code	{ super ( time , zone . getDefault () ) ; zone = Locale ; }
Distance : 7

27
Tree	{ this ( ( , time , time ) ; }
Code	{ this ( ( , time , time ) ; }
Distance : 6

28
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; for }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; for }
Distance : 6

29
Tree	{ super ( time , Locale . getDefault () ) ; zone = Locale ; }
Code	{ super ( time , Locale . getDefault () ) ; zone = Locale ; }
Distance : 7

30
Tree	{ super ( time , zone , time , Locale . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , zone , time , Locale . getDefault () ) ; Locale . getDefault () ; }
Distance : 8

31
Tree	{ super ( time , Locale , time , Locale . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , Locale , time , Locale . getDefault () ) ; Locale . getDefault () ; }
Distance : 9

32
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; throw }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; throw }
Distance : 6

33
Tree	{ this ( time , time , zone ) ; }
Code	{ this ( time , time , zone ) ; }
Distance : 5

34
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; zone = zone ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; zone = zone ; }
Distance : 8

35
Tree	{ this ( zone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone . getDefault () , Locale . getDefault () ) ; }
Distance : 4

36
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; disableTypeCheck }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; disableTypeCheck }
Distance : 6

37
Tree	{ return; time = time ; }
Code	{ return; time = time ; }
Distance : 10

38
Tree	{ this ( zone , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 5

39
Tree	{ super ( time , zone , Locale , time . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , zone , Locale , time . getDefault () ) ; Locale . getDefault () ; }
Distance : 8

40
Tree	{ this ( time . getDefault () , time . getDefault () ) ; }
Code	{ this ( time . getDefault () , time . getDefault () ) ; }
Distance : 4

41
Tree	{ Locale = zone ; }
Code	{ Locale = zone ; }
Distance : 10

42
Tree	{ super ( time . getDefault () ) ; zone = Locale ; }
Code	{ super ( time . getDefault () ) ; zone = Locale ; }
Distance : 9

43
Tree	{ this ( Locale , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( Locale , time . getDefault () , Locale . getDefault () ) ; }
Distance : 5

44
Tree	{ this ( Locale . getDefault () , zone ) ; }
Code	{ this ( Locale . getDefault () , zone ) ; }
Distance : 6

45
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; checkNotNull }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; checkNotNull }
Distance : 6

46
Tree	{ this ( time , time , time , Locale . getDefault () ) ; }
Code	{ this ( time , time , time , Locale . getDefault () ) ; }
Distance : 3

47
Tree	{ Locale = Locale ; }
Code	{ Locale = Locale ; }
Distance : 10

48
Tree	{ this ( Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 4

49
Tree	{ this ( zone . getDefault () , zone . getDefault () ) ; }
Code	{ this ( zone . getDefault () , zone . getDefault () ) ; }
Distance : 5

50
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; else }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; else }
Distance : 6

51
Tree	{ super ( STRING_CONSTANT ) ; Locale = Locale ; }
Code	{ super ( STRING_CONSTANT ) ; Locale = Locale ; }
Distance : 9

52
Tree	{ this ( Locale . getDefault () , zone . getDefault () ) ; }
Code	{ this ( Locale . getDefault () , zone . getDefault () ) ; }
Distance : 5

53
Tree	{ this ( time , time , Locale , time . getDefault () ) ; }
Code	{ this ( time , time , Locale , time . getDefault () ) ; }
Distance : 3

54
Tree	{ this ( time , zone , time , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , zone , time , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 8

55
Tree	{ this ( time , zone , time , Locale . getDefault () ) ; }
Code	{ this ( time , zone , time , Locale . getDefault () ) ; }
Distance : 2

56
Tree	{ this ( zone , true ) ; }
Code	{ this ( zone , true ) ; }
Distance : 6

57
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; addMessage }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; addMessage }
Distance : 6

58
Tree	{ this ( time , time , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

59
Tree	{ super ( time , time . getDefault () ) ; zone = Locale ; }
Code	{ super ( time , time . getDefault () ) ; zone = Locale ; }
Distance : 8

60
Tree	{ super ( time . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time . getDefault () ) ; Locale = Locale ; }
Distance : 9

61
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; time = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; time = Locale ; }
Distance : 8

62
Tree	{ super ( time , time , zone , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , time , zone , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 7

63
Tree	{ this ( time , Locale , time , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , time , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

64
Tree	{ super ( STRING_CONSTANT ) ; zone = Locale ; }
Code	{ super ( STRING_CONSTANT ) ; zone = Locale ; }
Distance : 9

65
Tree	{ super ( time , zone , zone , Locale . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , zone , zone , Locale . getDefault () ) ; Locale . getDefault () ; }
Distance : 8

66
Tree	{ this ( time , Locale , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

67
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Distance : 6

68
Tree	{ this ( time , zone , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , zone , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 7

69
Tree	{ super ( STRING_CONSTANT ) ; zone = zone ; }
Code	{ super ( STRING_CONSTANT ) ; zone = zone ; }
Distance : 10

70
Tree	{ super ( time , null , null , Locale , Locale . getDefault () ) ; Locale = time ; }
Code	{ super ( time , null , null , Locale , Locale . getDefault () ) ; Locale = time ; }
Distance : 10

71
Tree	{ this ( time , zone , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , zone , Locale , Locale . getDefault () ) ; }
Distance : 2

72
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , zone . getDefault () ) ; zone = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , zone . getDefault () ) ; zone = Locale ; }
Distance : 8

73
Tree	{ this ( time , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time . getDefault () , Locale . getDefault () ) ; }
Distance : 4

74
Tree	{ this ( time , time , zone , Locale . getDefault () ) ; }
Code	{ this ( time , time , zone , Locale . getDefault () ) ; }
Distance : 2

75
Tree	{ super ( STRING_CONSTANT ) ; time = Locale ; }
Code	{ super ( STRING_CONSTANT ) ; time = Locale ; }
Distance : 10

76
Tree	{ this ( time , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , Locale , Locale . getDefault () ) ; }
Distance : 3

77
Tree	{ this ( time , Locale , time , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , time , Locale . getDefault () ) ; }
Distance : 3

78
Tree	{ super ( time , null , null , zone , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , null , null , zone , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 9

79
Tree	{ this ( time , zone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , zone . getDefault () , Locale . getDefault () ) ; }
Distance : 3

80
Tree	{ this ( time , Locale , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

81
Tree	{ this ( zone . getDefault () , time ) ; }
Code	{ this ( zone . getDefault () , time ) ; }
Distance : 6

82
Tree	{ super ( time , null , null , Locale , Locale . getDefault () ) ; time = Locale ; }
Code	{ super ( time , null , null , Locale , Locale . getDefault () ) ; time = Locale ; }
Distance : 10

83
Tree	{ this ( time , zone , zone , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , zone , zone , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 7

84
Tree	{ this ( time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time . getDefault () , Locale . getDefault () ) ; }
Distance : 3

85
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; this }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; this }
Distance : 6

86
Tree	{ super ( time , time , Locale , Locale . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , time , Locale , Locale . getDefault () ) ; Locale . getDefault () ; }
Distance : 9

87
Tree	{ super ( time , zone , Locale , time . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , zone , Locale , time . getDefault () ) ; Locale = Locale ; }
Distance : 7

88
Tree	{ super ( STRING_CONSTANT ) ; zone = time ; }
Code	{ super ( STRING_CONSTANT ) ; zone = time ; }
Distance : 10

89
Tree	{ this ( time , Locale , time , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , time , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

90
Tree	{ super ( time , zone . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , zone . getDefault () ) ; Locale = Locale ; }
Distance : 7

91
Tree	{ super ( time , zone , time , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , zone , time , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 7

92
Tree	{ this ( time , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 4

93
Tree	{ super ( time , zone , zone , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , zone , zone , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 7

94
Tree	{ super(); time = zone ; }
Code	{ super(); time = zone ; }
Distance : 9

95
Tree	{ super ( time , time , Locale , Locale . getDefault () ) ; }
Code	{ super ( time , time , Locale , Locale . getDefault () ) ; }
Distance : 4

96
Tree	{ super ( time , time , Locale , time . getDefault () ) ; }
Code	{ super ( time , time , Locale , time . getDefault () ) ; }
Distance : 4

97
Tree	{ this ( zone , false ) ; }
Code	{ this ( zone , false ) ; }
Distance : 6

98
Tree	{ super ( time , time , zone , Locale . getDefault () ) ; }
Code	{ super ( time , time , zone , Locale . getDefault () ) ; }
Distance : 3

99
Tree	{ this ( time . getDefault () , zone ) ; }
Code	{ this ( time . getDefault () , zone ) ; }
Distance : 6

100
Tree	{ super ( time . getDefault () ) ; time = Locale ; }
Code	{ super ( time . getDefault () ) ; time = Locale ; }
Distance : 9

101
Tree	{ super ( time , Locale , Locale , Locale . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , Locale , Locale , Locale . getDefault () ) ; Locale . getDefault () ; }
Distance : 9

102
Tree	{ return; time = Locale ; }
Code	{ return; time = Locale ; }
Distance : 9

103
Tree	{ super ( time , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 7

104
Tree	{ super ( time , null , null , Locale , zone . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , null , null , Locale , zone . getDefault () ) ; Locale = Locale ; }
Distance : 10

105
Tree	{ super(); time = Locale ; }
Code	{ super(); time = Locale ; }
Distance : 9

106
Tree	{ super ( time , time , time , Locale . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , time , time , Locale . getDefault () ) ; Locale . getDefault () ; }
Distance : 9

107
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , Locale . getDefault () ) ; zone = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , Locale . getDefault () ) ; zone = Locale ; }
Distance : 7

108
Tree	{ super ( time , time . getDefault () ) ; time = Locale ; }
Code	{ super ( time , time . getDefault () ) ; time = Locale ; }
Distance : 8

109
Tree	{ super ( time . getDefault () ) ; Locale = time ; }
Code	{ super ( time . getDefault () ) ; Locale = time ; }
Distance : 9

110
Tree	{ super ( time , zone , time , Locale . getDefault () ) ; }
Code	{ super ( time , zone , time , Locale . getDefault () ) ; }
Distance : 3

111
Tree	{ this ( ( , Locale , Locale ) ; }
Code	{ this ( ( , Locale , Locale ) ; }
Distance : 5

112
Tree	{ super ( time , zone , Locale , time . getDefault () ) ; }
Code	{ super ( time , zone , Locale , time . getDefault () ) ; }
Distance : 3

113
Tree	{ this ( time . getDefault () , time ) ; }
Code	{ this ( time . getDefault () , time ) ; }
Distance : 6

114
Tree	{ time = zone ; }
Code	{ time = zone ; }
Distance : 9

115
Tree	{ this ( time , time . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , time . getDefault () , zone . getDefault () ) ; }
Distance : 5

116
Tree	{ this ( time , time , Locale , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time , Locale , time . getDefault () , Locale . getDefault () ) ; }
Distance : 8

117
Tree	{ super ( zone . getDefault () ) ; Locale = Locale ; }
Code	{ super ( zone . getDefault () ) ; Locale = Locale ; }
Distance : 9

118
Tree	{ this ( zone , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone , time . getDefault () , Locale . getDefault () ) ; }
Distance : 5

119
Tree	{ super ( time , time . getDefault () ) ; Locale = zone ; }
Code	{ super ( time , time . getDefault () ) ; Locale = zone ; }
Distance : 8

120
Tree	{ zone = zone ; }
Code	{ zone = zone ; }
Distance : 10

121
Tree	{ this ( zone . getDefault () , time . getDefault () ) ; }
Code	{ this ( zone . getDefault () , time . getDefault () ) ; }
Distance : 5

122
Tree	{ this ( Locale . getDefault () , time . getDefault () ) ; }
Code	{ this ( Locale . getDefault () , time . getDefault () ) ; }
Distance : 5

123
Tree	{ continue; time = zone ; }
Code	{ continue; time = zone ; }
Distance : 9

124
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = zone ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = zone ; }
Distance : 8

125
Tree	{ super ( time , Locale , time , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , Locale , time , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 8

126
Tree	{ ; } Override
Code	{ ; } Override
Distance : 12

127
Tree	{ super ( time , super(); , null , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , super(); , null , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 10

128
Tree	{ super ( STRING_CONSTANT ) ; zone = Locale ; } wanted
Code	{ super ( STRING_CONSTANT ) ; zone = Locale ; } wanted
Distance : 10

129
Tree	{ super ( time , null , null , Locale , time . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , null , null , Locale , time . getDefault () ) ; Locale = Locale ; }
Distance : 10

130
Tree	{ this ( time , time , time , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , time , time , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

131
Tree	{ this ( ( , zone , Locale ) ; }
Code	{ this ( ( , zone , Locale ) ; }
Distance : 4

132
Tree	{ Locale = time ; }
Code	{ Locale = time ; }
Distance : 10

133
Tree	{ this ( Locale . getDefault () , Locale ) ; }
Code	{ this ( Locale . getDefault () , Locale ) ; }
Distance : 6

134
Tree	{ super ( time , zone , Locale , Locale . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , zone , Locale , Locale . getDefault () ) ; Locale . getDefault () ; }
Distance : 8

135
Tree	{ super ( time , zone , zone , Locale . getDefault () ) ; }
Code	{ super ( time , zone , zone , Locale . getDefault () ) ; }
Distance : 3

136
Tree	{ super ( time , zone , Locale , Locale . getDefault () ) ; }
Code	{ super ( time , zone , Locale , Locale . getDefault () ) ; }
Distance : 3

137
Tree	{ this ( time , time , zone , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time , zone , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 7

138
Tree	{ continue; time = Locale ; }
Code	{ continue; time = Locale ; }
Distance : 9

139
Tree	{ super ( time , Locale , Locale , Locale . getDefault () ) ; }
Code	{ super ( time , Locale , Locale , Locale . getDefault () ) ; }
Distance : 4

140
Tree	{ this ( time , zone . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , zone . getDefault () , zone . getDefault () ) ; }
Distance : 4

141
Tree	{ ; } MathRuntimeException
Code	{ ; } MathRuntimeException
Distance : 12

142
Tree	{ super ( time , null , null , Locale , Locale . getDefault () ) ; Locale = zone ; }
Code	{ super ( time , null , null , Locale , Locale . getDefault () ) ; Locale = zone ; }
Distance : 10

143
Tree	{ ; } mock
Code	{ ; } mock
Distance : 12

144
Tree	{ time = time ; } wanted
Code	{ time = time ; } wanted
Distance : 11

145
Tree	{ this ( ( , time , Locale ) ; }
Code	{ this ( ( , time , Locale ) ; }
Distance : 5

146
Tree	{ this ( time , false ) ; } i
Code	{ this ( time , false ) ; } i
Distance : 7

147
Tree	{ super ( time , null , null , time , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , null , null , time , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 10

148
Tree	{ ; } f
Code	{ ; } f
Distance : 12

149
Tree	{ super ( time , time , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , time , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 8

150
Tree	{ this ( time , zone , Locale , time , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , zone , Locale , time , Locale , Locale , Locale . getDefault () ) ; }
Distance : 8

151
Tree	{ this ( time , false ) ; } value
Code	{ this ( time , false ) ; } value
Distance : 7

152
Tree	{ this ( time , false ) ; } options
Code	{ this ( time , false ) ; } options
Distance : 7

153
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; private }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; private }
Distance : 6

154
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; fireChangeEvent }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; fireChangeEvent }
Distance : 6

155
Tree	{ this ( time , time , Locale , time , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , time , Locale , time , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

156
Tree	{ this ( time , false ) ; } p
Code	{ this ( time , false ) ; } p
Distance : 7

157
Tree	{ this ( zone . getDefault () , Locale ) ; }
Code	{ this ( zone . getDefault () , Locale ) ; }
Distance : 6

158
Tree	{ time = Locale ; }
Code	{ time = Locale ; }
Distance : 9

159
Tree	{ ; } [
Code	{ ; } [
Distance : 12

160
Tree	{ zone = time ; }
Code	{ zone = time ; }
Distance : 10

161
Tree	{ this ( Locale , false ) ; }
Code	{ this ( Locale , false ) ; }
Distance : 7

162
Tree	{ super ( STRING_CONSTANT ) ; Locale = time ; }
Code	{ super ( STRING_CONSTANT ) ; Locale = time ; }
Distance : 9

163
Tree	{ this ( time , zone , zone , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , zone , zone , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 8

164
Tree	{ this ( ( , time , Locale ) ; } wanted
Code	{ this ( ( , time , Locale ) ; } wanted
Distance : 6

165
Tree	{ super ( Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( Locale . getDefault () ) ; Locale = Locale ; }
Distance : 9

166
Tree	{ zone = Locale ; }
Code	{ zone = Locale ; }
Distance : 9

167
Tree	{ this ( time , Locale . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , Locale . getDefault () , zone . getDefault () ) ; }
Distance : 5

168
Tree	{ continue; time = time ; }
Code	{ continue; time = time ; }
Distance : 10

169
Tree	{ super ( time , zone , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , zone , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 7

170
Tree	{ this ( zone , zone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone , zone . getDefault () , Locale . getDefault () ) ; }
Distance : 4

171
Tree	{ ; } array
Code	{ ; } array
Distance : 12

172
Tree	{ ; } class
Code	{ ; } class
Distance : 12

173
Tree	{ super ( time , Locale , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , Locale , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 8

174
Tree	{ ; } notifyListeners
Code	{ ; } notifyListeners
Distance : 12

175
Tree	{ super ( time . getDefault () ) ; zone = zone ; }
Code	{ super ( time . getDefault () ) ; zone = zone ; }
Distance : 9

176
Tree	{ this ( Locale , true ) ; }
Code	{ this ( Locale , true ) ; }
Distance : 7

177
Tree	{ this ( time , time , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , time , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

178
Tree	{ this ( ( , Locale , time ) ; }
Code	{ this ( ( , Locale , time ) ; }
Distance : 6

179
Tree	{ this ( time , time , time , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time , time , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

180
Tree	{ time = time ; }
Code	{ time = time ; }
Distance : 10

181
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = time ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = time ; }
Distance : 8

182
Tree	{ this ( time . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time . getDefault () , zone . getDefault () ) ; }
Distance : 4

183
Tree	{ this ( time . getDefault () , Locale . getDefault () ) ; } wanted
Code	{ this ( time . getDefault () , Locale . getDefault () ) ; } wanted
Distance : 4

184
Tree	{ this ( ( , zone , time ) ; }
Code	{ this ( ( , zone , time ) ; }
Distance : 5

185
Tree	{ this ( time . getDefault () , Locale ) ; } wanted
Code	{ this ( time . getDefault () , Locale ) ; } wanted
Distance : 7

186
Tree	{ super ( time , time , Locale , time . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , time , Locale , time . getDefault () ) ; Locale = Locale ; }
Distance : 8

187
Tree	{ super ( STRING_CONSTANT ) ; Locale = zone ; }
Code	{ super ( STRING_CONSTANT ) ; Locale = zone ; }
Distance : 9

188
Tree	{ super ( STRING_CONSTANT ) ; time = time ; }
Code	{ super ( STRING_CONSTANT ) ; time = time ; }
Distance : 10

189
Tree	{ ; } -
Code	{ ; } -
Distance : 12

190
Tree	{ this ( Locale . getDefault () , time ) ; }
Code	{ this ( Locale . getDefault () , time ) ; }
Distance : 6

191
Tree	{ super ( time , zone . getDefault () ) ; time = Locale ; }
Code	{ super ( time , zone . getDefault () ) ; time = Locale ; }
Distance : 7

192
Tree	{ super ( time , Locale . getDefault () ) ; time = Locale ; }
Code	{ super ( time , Locale . getDefault () ) ; time = Locale ; }
Distance : 7

193
Tree	{ super ( time , time . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , time . getDefault () ) ; Locale = Locale ; }
Distance : 8

194
Tree	{ break; time = time ; }
Code	{ break; time = time ; }
Distance : 10

195
Tree	{ super ( time , Locale , time , Locale . getDefault () ) ; }
Code	{ super ( time , Locale , time , Locale . getDefault () ) ; }
Distance : 4

196
Tree	{ this ( time . getDefault () , Locale ) ; }
Code	{ this ( time . getDefault () , Locale ) ; }
Distance : 6

197
Tree	{ this ( time , zone , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , zone , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 8

198
Tree	{ super ( time , time , time , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , time , time , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 8

199
Tree	{ return; time = zone ; }
Code	{ return; time = zone ; }
Distance : 9

========================================================================


========================================================================
Example Number: 9
Parent Code is: 
if ( dataset != null ) { return result ; }
-------------------------------------------------------------------------------
Child code is: 
if ( dataset == null ) { return result ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=dataset}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=result}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=dataset}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=result}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/1/parent/source_org_jfree_chart_renderer_category_AbstractCategoryItemRenderer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( dataset . isEmptyOrNull ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . isEmptyOrNull ( dataset ) ) { return this . result . result ; }
Distance : 9

1
Tree	if ( ! dataset . findStackedRangeBounds ( dataset ) ) { return result ; }
Code	if ( ! dataset . findStackedRangeBounds ( dataset ) ) { return result ; }
Distance : 6

2
Tree	if ( dataset != null ) { return result . of ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . of ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

3
Tree	if ( dataset != null ) { return result . empty ( dataset ) ; }
Code	if ( dataset != null ) { return result . empty ( dataset ) ; }
Distance : 6

4
Tree	if ( dataset . getPrinter ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . getPrinter ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

5
Tree	if ( dataset != null ) { return result ; } else &
Code	if ( dataset != null ) { return result ; } else &
Distance : 3

6
Tree	if ( fft () ) { return result ; }
Code	if ( fft () ) { return result ; }
Distance : 3

7
Tree	if ( result ( result ) ) { return result ; }
Code	if ( result ( result ) ) { return result ; }
Distance : 4

8
Tree	if ( ! containsNow ( dataset ) ) { return result ; }
Code	if ( ! containsNow ( dataset ) ) { return result ; }
Distance : 5

9
Tree	if ( dataset . getPrinter ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . getPrinter ( dataset ) ) { return this . result . result ; }
Distance : 9

10
Tree	if ( dataset . isNaN ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . isNaN ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

11
Tree	if ( dataset != break; ) { return this . result ; }
Code	if ( dataset != break; ) { return this . result ; }
Distance : 4

12
Tree	if ( result != super(); ) { return result ; }
Code	if ( result != super(); ) { return result ; }
Distance : 3

13
Tree	if ( dataset != null ) { return this . result . booleanValue () ; }
Code	if ( dataset != null ) { return this . result . booleanValue () ; }
Distance : 6

14
Tree	if ( firstNonNull () ) { return result ; }
Code	if ( firstNonNull () ) { return result ; }
Distance : 3

15
Tree	if ( isBottom ( other.nominalType ) ) { return result ; }
Code	if ( isBottom ( other.nominalType ) ) { return result ; }
Distance : 4

16
Tree	if ( dataset != return; ) { return this . dataset ; }
Code	if ( dataset != return; ) { return this . dataset ; }
Distance : 5

17
Tree	if ( ! isPointInRect ( dataset ) ) { return result ; }
Code	if ( ! isPointInRect ( dataset ) ) { return result ; }
Distance : 5

18
Tree	if ( dataset != default: ) { return this . result ; }
Code	if ( dataset != default: ) { return this . result ; }
Distance : 4

19
Tree	if ( new indexOf ( dataset ) . that ( result ) ) { return result ; }
Code	if ( new indexOf ( dataset ) . that ( result ) ) { return result ; }
Distance : 9

20
Tree	if ( isEmptyType () ) { return result ; }
Code	if ( isEmptyType () ) { return result ; }
Distance : 3

21
Tree	if ( result ( dataset ) ) { return dataset ; }
Code	if ( result ( dataset ) ) { return dataset ; }
Distance : 5

22
Tree	if ( ! isBottom ( dataset ) ) { return result ; }
Code	if ( ! isBottom ( dataset ) ) { return result ; }
Distance : 5

23
Tree	if ( dataset ( result ) ) { return dataset ; }
Code	if ( dataset ( result ) ) { return dataset ; }
Distance : 4

24
Tree	if ( new indexOf ( dataset ) . getSolver ( result ) ) { return result ; }
Code	if ( new indexOf ( dataset ) . getSolver ( result ) ) { return result ; }
Distance : 9

25
Tree	if ( dataset != null ) { return result . getParent ( dataset ) ; }
Code	if ( dataset != null ) { return result . getParent ( dataset ) ; }
Distance : 6

26
Tree	if ( isBottom ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR ) ) { return result ; }
Code	if ( isBottom ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR ) ) { return result ; }
Distance : 4

27
Tree	if ( dataset . isEmptyType ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . isEmptyType ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

28
Tree	if ( dataset . isNaN ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . isNaN ( dataset ) ) { return this . result . result ; }
Distance : 9

29
Tree	if ( dataset . isEmptyType ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . isEmptyType ( dataset ) ) { return this . result . result ; }
Distance : 9

30
Tree	if ( dataset != null ) { return this . result . isEmptyType () ; }
Code	if ( dataset != null ) { return this . result . isEmptyType () ; }
Distance : 6

31
Tree	if ( dataset != null ) { return result . isNaN ( dataset ) ; }
Code	if ( dataset != null ) { return result . isNaN ( dataset ) ; }
Distance : 6

32
Tree	if ( new isBottom () . getParser ( dataset ) ) { return result ; }
Code	if ( new isBottom () . getParser ( dataset ) ) { return result ; }
Distance : 8

33
Tree	if ( isBottom ( TokenType.OPEN_PAREN ) ) { return result ; }
Code	if ( isBottom ( TokenType.OPEN_PAREN ) ) { return result ; }
Distance : 4

34
Tree	if ( result ( result ) ) { return dataset ; }
Code	if ( result ( result ) ) { return dataset ; }
Distance : 5

35
Tree	if ( dataset != null ) { return result ; } else short
Code	if ( dataset != null ) { return result ; } else short
Distance : 3

36
Tree	if ( ! dataset . getParent ( dataset ) ) { return result ; }
Code	if ( ! dataset . getParent ( dataset ) ) { return result ; }
Distance : 6

37
Tree	if ( dataset != null ) { return this . result . charAt () ; }
Code	if ( dataset != null ) { return this . result . charAt () ; }
Distance : 6

38
Tree	if ( ! isEmpty ( dataset ) ) { return result ; }
Code	if ( ! isEmpty ( dataset ) ) { return result ; }
Distance : 5

39
Tree	if ( dataset != null ) { return result . result ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . result ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

40
Tree	if ( ! dataset . equal ( dataset ) ) { return result ; }
Code	if ( ! dataset . equal ( dataset ) ) { return result ; }
Distance : 6

41
Tree	if ( dataset != null ) { return result ; } else else
Code	if ( dataset != null ) { return result ; } else else
Distance : 3

42
Tree	if ( dataset . != ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . != ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

43
Tree	if ( dataset . indexOf ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . indexOf ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

44
Tree	if ( dataset . != ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . != ( dataset ) ) { return this . result . result ; }
Distance : 9

45
Tree	if ( dataset != null ) { return this . result . indexOf () ; }
Code	if ( dataset != null ) { return this . result . indexOf () ; }
Distance : 6

46
Tree	if ( dataset != null ) { return result ; }
Code	if ( dataset != null ) { return result ; }
Distance : 1

47
Tree	if ( dataset . indexOf ( dataset ) ) { return result ; }
Code	if ( dataset . indexOf ( dataset ) ) { return result ; }
Distance : 5

48
Tree	if ( dataset . indexOf ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . indexOf ( dataset ) ) { return this . result . result ; }
Distance : 9

49
Tree	if ( dataset . isEmptyType ( dataset ) ) { return result ; }
Code	if ( dataset . isEmptyType ( dataset ) ) { return result ; }
Distance : 5

50
Tree	if ( dataset != null ) { return result ; } else extends
Code	if ( dataset != null ) { return result ; } else extends
Distance : 3

51
Tree	if ( dataset != null ) { return result ; } else %
Code	if ( dataset != null ) { return result ; } else %
Distance : 3

52
Tree	if ( isBottom ( dataset ) ) { return result ; }
Code	if ( isBottom ( dataset ) ) { return result ; }
Distance : 4

53
Tree	if ( dataset . indexOf () ) { return result ; }
Code	if ( dataset . indexOf () ) { return result ; }
Distance : 3

54
Tree	if ( ! dataset . isBottom ( dataset ) ) { return result ; }
Code	if ( ! dataset . isBottom ( dataset ) ) { return result ; }
Distance : 6

55
Tree	if ( dataset != null ) { return result . hashCode ( dataset ) ; }
Code	if ( dataset != null ) { return result . hashCode ( dataset ) ; }
Distance : 6

56
Tree	if ( dataset != null ) { return result ; } else :
Code	if ( dataset != null ) { return result ; } else :
Distance : 3

57
Tree	if ( ! isNonSingular ( dataset ) ) { return result ; }
Code	if ( ! isNonSingular ( dataset ) ) { return result ; }
Distance : 5

58
Tree	if ( fft ( dataset ) ) { return result ; }
Code	if ( fft ( dataset ) ) { return result ; }
Distance : 4

59
Tree	if ( new indexOf () . getParser ( dataset ) ) { return result ; }
Code	if ( new indexOf () . getParser ( dataset ) ) { return result ; }
Distance : 8

60
Tree	if ( firstNonBottom ( dataset ) ) { return result ; }
Code	if ( firstNonBottom ( dataset ) ) { return result ; }
Distance : 4

61
Tree	if ( isEmptyType ( dataset ) ) { return result ; }
Code	if ( isEmptyType ( dataset ) ) { return result ; }
Distance : 4

62
Tree	if ( dataset . getParent ( dataset ) ) { return result ; }
Code	if ( dataset . getParent ( dataset ) ) { return result ; }
Distance : 5

63
Tree	if ( new Coordinates3D ( dataset ) . indexOf ( result ) ) { return result ; }
Code	if ( new Coordinates3D ( dataset ) . indexOf ( result ) ) { return result ; }
Distance : 9

64
Tree	if ( firstNonNull ( dataset ) ) { return result ; }
Code	if ( firstNonNull ( dataset ) ) { return result ; }
Distance : 4

65
Tree	if ( dataset != null ) { return result ; } else +=
Code	if ( dataset != null ) { return result ; } else +=
Distance : 3

66
Tree	if ( new isBottom ( dataset ) . that ( result ) ) { return result ; }
Code	if ( new isBottom ( dataset ) . that ( result ) ) { return result ; }
Distance : 9

67
Tree	if ( dataset . isNaN () ) { return result ; }
Code	if ( dataset . isNaN () ) { return result ; }
Distance : 3

68
Tree	if ( isEmpty () ) { return result ; }
Code	if ( isEmpty () ) { return result ; }
Distance : 3

69
Tree	if ( dataset ( dataset ) ) { return result ; } wanted
Code	if ( dataset ( dataset ) ) { return result ; } wanted
Distance : 4

70
Tree	if ( dataset != null ) { return this . result . isPointInRect () ; }
Code	if ( dataset != null ) { return this . result . isPointInRect () ; }
Distance : 6

71
Tree	if ( firstNonBottom () ) { return result ; }
Code	if ( firstNonBottom () ) { return result ; }
Distance : 3

72
Tree	if ( dataset != null ) { return result . getFirstChild ( dataset ) ; }
Code	if ( dataset != null ) { return result . getFirstChild ( dataset ) ; }
Distance : 6

73
Tree	if ( new indexOf ( dataset ) . indexOf ( result ) ) { return result ; }
Code	if ( new indexOf ( dataset ) . indexOf ( result ) ) { return result ; }
Distance : 9

74
Tree	if ( new x1 () . indexOf ( dataset ) ) { return result ; }
Code	if ( new x1 () . indexOf ( dataset ) ) { return result ; }
Distance : 8

75
Tree	if ( isBottom ( dataset , dataset ) ) { return result ; }
Code	if ( isBottom ( dataset , dataset ) ) { return result ; }
Distance : 5

76
Tree	if ( dataset . equal () ) { return result ; }
Code	if ( dataset . equal () ) { return result ; }
Distance : 3

77
Tree	if ( dataset . isNaN ( dataset ) ) { return result ; }
Code	if ( dataset . isNaN ( dataset ) ) { return result ; }
Distance : 5

78
Tree	if ( dataset != null ) { return result . hasChildren ( dataset ) ; }
Code	if ( dataset != null ) { return result . hasChildren ( dataset ) ; }
Distance : 6

79
Tree	if ( ! dataset . isEmptyType ( dataset ) ) { return result ; }
Code	if ( ! dataset . isEmptyType ( dataset ) ) { return result ; }
Distance : 6

80
Tree	if ( dataset . isEmpty ( dataset ) ) { return result ; }
Code	if ( dataset . isEmpty ( dataset ) ) { return result ; }
Distance : 5

81
Tree	if ( new isBottom ( dataset ) . toFormatter ( result ) ) { return result ; }
Code	if ( new isBottom ( dataset ) . toFormatter ( result ) ) { return result ; }
Distance : 9

82
Tree	if ( dataset . isEmpty () ) { return result ; }
Code	if ( dataset . isEmpty () ) { return result ; }
Distance : 3

83
Tree	if ( dataset != null ) { return result ; } else super
Code	if ( dataset != null ) { return result ; } else super
Distance : 3

84
Tree	if ( result != null ) { return result ; }
Code	if ( result != null ) { return result ; }
Distance : 2

85
Tree	if ( dataset . != ( dataset ) ) { return result ; }
Code	if ( dataset . != ( dataset ) ) { return result ; }
Distance : 5

86
Tree	if ( ! dataset . indexOf ( dataset ) ) { return result ; }
Code	if ( ! dataset . indexOf ( dataset ) ) { return result ; }
Distance : 6

87
Tree	if ( dataset != null ) { return result ; } else ++
Code	if ( dataset != null ) { return result ; } else ++
Distance : 3

88
Tree	if ( dataset != null ) { return result . getFirstChild ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . getFirstChild ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

89
Tree	if ( new isBottom () . length ( dataset ) ) { return result ; }
Code	if ( new isBottom () . length ( dataset ) ) { return result ; }
Distance : 8

90
Tree	if ( dataset . isEmptyOrNull () ) { return result ; }
Code	if ( dataset . isEmptyOrNull () ) { return result ; }
Distance : 3

91
Tree	if ( indexOf ( dataset ) ) { return result ; }
Code	if ( indexOf ( dataset ) ) { return result ; }
Distance : 4

92
Tree	if ( new x1 ( dataset ) . indexOf ( result ) ) { return result ; }
Code	if ( new x1 ( dataset ) . indexOf ( result ) ) { return result ; }
Distance : 9

93
Tree	if ( dataset != null ) { return result . hashCode ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . hashCode ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

94
Tree	if ( dataset . equal ( dataset ) ) { return result ; }
Code	if ( dataset . equal ( dataset ) ) { return result ; }
Distance : 5

95
Tree	if ( dataset != null ) { return result ; } else instanceof
Code	if ( dataset != null ) { return result ; } else instanceof
Distance : 3

96
Tree	if ( dataset . isBottom () ) { return result ; }
Code	if ( dataset . isBottom () ) { return result ; }
Distance : 3

97
Tree	if ( isPointInRect ( dataset ) ) { return result ; }
Code	if ( isPointInRect ( dataset ) ) { return result ; }
Distance : 4

98
Tree	if ( dataset . equal ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . equal ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

99
Tree	if ( new ObjectUtils () . indexOf ( dataset ) ) { return result ; }
Code	if ( new ObjectUtils () . indexOf ( dataset ) ) { return result ; }
Distance : 8

100
Tree	if ( dataset != null ) { return result . abs ( dataset ) ; }
Code	if ( dataset != null ) { return result . abs ( dataset ) ; }
Distance : 6

101
Tree	if ( ! getDataset ( dataset ) ) { return result ; }
Code	if ( ! getDataset ( dataset ) ) { return result ; }
Distance : 5

102
Tree	if ( dataset . isEmptyOrNull ( dataset ) ) { return result ; }
Code	if ( dataset . isEmptyOrNull ( dataset ) ) { return result ; }
Distance : 5

103
Tree	if ( dataset != null ) { return result . hasChildren ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . hasChildren ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

104
Tree	if ( dataset ( dataset ) ) { return result ; }
Code	if ( dataset ( dataset ) ) { return result ; }
Distance : 3

105
Tree	if ( new isBottom () . getPrinter ( dataset ) ) { return result ; }
Code	if ( new isBottom () . getPrinter ( dataset ) ) { return result ; }
Distance : 8

106
Tree	if ( isBottom ( mockKey.mockedType ) ) { return result ; }
Code	if ( isBottom ( mockKey.mockedType ) ) { return result ; }
Distance : 4

107
Tree	if ( dataset . isEmpty ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . isEmpty ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

108
Tree	if ( isNoType ( dataset ) ) { return result ; }
Code	if ( isNoType ( dataset ) ) { return result ; }
Distance : 4

109
Tree	if ( dataset . getPrinter ( dataset ) ) { return result ; }
Code	if ( dataset . getPrinter ( dataset ) ) { return result ; }
Distance : 5

110
Tree	if ( new isBottom () . indexOf ( dataset ) ) { return result ; }
Code	if ( new isBottom () . indexOf ( dataset ) ) { return result ; }
Distance : 8

111
Tree	if ( dataset != null ) { return result . result ( dataset ) ; }
Code	if ( dataset != null ) { return result . result ( dataset ) ; }
Distance : 6

112
Tree	if ( isBottom () ) { return result ; }
Code	if ( isBottom () ) { return result ; }
Distance : 3

113
Tree	if ( new isBottom ( dataset ) . indexOf ( result ) ) { return result ; }
Code	if ( new isBottom ( dataset ) . indexOf ( result ) ) { return result ; }
Distance : 9

114
Tree	if ( isBottom ( currentScript.exportsToInline ) ) { return result ; }
Code	if ( isBottom ( currentScript.exportsToInline ) ) { return result ; }
Distance : 4

115
Tree	if ( isBottom ( Level.FINE ) ) { return result ; }
Code	if ( isBottom ( Level.FINE ) ) { return result ; }
Distance : 4

116
Tree	if ( isNoType () ) { return result ; }
Code	if ( isNoType () ) { return result ; }
Distance : 3

117
Tree	if ( ! dataset . getPrinter ( dataset ) ) { return result ; }
Code	if ( ! dataset . getPrinter ( dataset ) ) { return result ; }
Distance : 6

118
Tree	if ( dataset . isBottom ( dataset ) ) { return result ; }
Code	if ( dataset . isBottom ( dataset ) ) { return result ; }
Distance : 5

119
Tree	if ( dataset . getParent ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . getParent ( dataset ) ) { return this . result . result ; }
Distance : 9

120
Tree	if ( dataset != null ) { return this . result ; }
Code	if ( dataset != null ) { return this . result ; }
Distance : 3

121
Tree	if ( dataset != null ) { return result . abs ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . abs ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

122
Tree	if ( dataset != null ) { return result . of ( dataset ) ; }
Code	if ( dataset != null ) { return result . of ( dataset ) ; }
Distance : 6

123
Tree	if ( ! dataset . isEmptyOrNull ( dataset ) ) { return result ; }
Code	if ( ! dataset . isEmptyOrNull ( dataset ) ) { return result ; }
Distance : 6

124
Tree	if ( ! dataset . isEmpty ( dataset ) ) { return result ; }
Code	if ( ! dataset . isEmpty ( dataset ) ) { return result ; }
Distance : 6

125
Tree	if ( new Coordinates3D () . indexOf ( dataset ) ) { return result ; }
Code	if ( new Coordinates3D () . indexOf ( dataset ) ) { return result ; }
Distance : 8

126
Tree	if ( isBottom ( x.length ) ) { return result ; }
Code	if ( isBottom ( x.length ) ) { return result ; }
Distance : 4

127
Tree	if ( isBottom ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED ) ) { return result ; }
Code	if ( isBottom ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED ) ) { return result ; }
Distance : 4

128
Tree	if ( dataset . equal ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . equal ( dataset ) ) { return this . result . result ; }
Distance : 9

129
Tree	if ( ! isClinitMethod ( dataset ) ) { return result ; }
Code	if ( ! isClinitMethod ( dataset ) ) { return result ; }
Distance : 5

130
Tree	if ( new isBottom ( dataset ) . getSolver ( result ) ) { return result ; }
Code	if ( new isBottom ( dataset ) . getSolver ( result ) ) { return result ; }
Distance : 9

131
Tree	if ( isNonSingular () ) { return result ; }
Code	if ( isNonSingular () ) { return result ; }
Distance : 3

132
Tree	if ( ! isPowerOf2 ( dataset ) ) { return result ; }
Code	if ( ! isPowerOf2 ( dataset ) ) { return result ; }
Distance : 5

133
Tree	if ( dataset . != () ) { return result ; }
Code	if ( dataset . != () ) { return result ; }
Distance : 3

134
Tree	if ( dataset . getParent () ) { return result ; }
Code	if ( dataset . getParent () ) { return result ; }
Distance : 3

135
Tree	if ( dataset . isEmpty ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . isEmpty ( dataset ) ) { return this . result . result ; }
Distance : 9

136
Tree	if ( dataset != null ) { return this . result . instantiateGenericsWithUnknown () ; }
Code	if ( dataset != null ) { return this . result . instantiateGenericsWithUnknown () ; }
Distance : 6

137
Tree	if ( indexOf () ) { return result ; }
Code	if ( indexOf () ) { return result ; }
Distance : 3

138
Tree	if ( dataset != null ) { return this . result . createIllegalArgumentException () ; }
Code	if ( dataset != null ) { return this . result . createIllegalArgumentException () ; }
Distance : 6

139
Tree	if ( dataset != null ) { return result . call ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . call ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

140
Tree	if ( dataset != null ) { return this . result . isDeclaredSloppy () ; }
Code	if ( dataset != null ) { return this . result . isDeclaredSloppy () ; }
Distance : 6

141
Tree	if ( dataset . getPrinter () ) { return result ; }
Code	if ( dataset . getPrinter () ) { return result ; }
Distance : 3

142
Tree	if ( isBottom ( dataset , dataset , dataset ) ) { return result ; }
Code	if ( isBottom ( dataset , dataset , dataset ) ) { return result ; }
Distance : 7

143
Tree	if ( dataset != null ) { return this . result . isEmptyOrNull () ; }
Code	if ( dataset != null ) { return this . result . isEmptyOrNull () ; }
Distance : 6

144
Tree	if ( new isBottom () . isForIn ( dataset ) ) { return result ; }
Code	if ( new isBottom () . isForIn ( dataset ) ) { return result ; }
Distance : 8

145
Tree	if ( dataset != null ) { return result . empty ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . empty ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

146
Tree	if ( dataset . isBottom ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . isBottom ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

147
Tree	if ( result != null ) { return this . result ; }
Code	if ( result != null ) { return this . result ; }
Distance : 4

148
Tree	if ( isBottom ( dataset , result , result ) ) { return result ; }
Code	if ( isBottom ( dataset , result , result ) ) { return result ; }
Distance : 7

149
Tree	if ( dataset != null ) { return result . getParent ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . getParent ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

150
Tree	if ( isEmptyType ( dataset , dataset , result ) ) { return result ; }
Code	if ( isEmptyType ( dataset , dataset , result ) ) { return result ; }
Distance : 7

151
Tree	if ( isBottom ( dataset , result ) ) { return result ; }
Code	if ( isBottom ( dataset , result ) ) { return result ; }
Distance : 5

152
Tree	if ( isBottom ( isBottom ) ) { return result ; }
Code	if ( isBottom ( isBottom ) ) { return result ; }
Distance : 4

153
Tree	if ( dataset . isBottom ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . isBottom ( dataset ) ) { return this . result . result ; }
Distance : 9

154
Tree	if ( dataset != null ) { return result . isNaN ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . isNaN ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

155
Tree	if ( isPointInRect () ) { return result ; }
Code	if ( isPointInRect () ) { return result ; }
Distance : 3

156
Tree	if ( new indexOf () . indexOf ( dataset ) ) { return result ; }
Code	if ( new indexOf () . indexOf ( dataset ) ) { return result ; }
Distance : 8

157
Tree	if ( new ObjectUtils ( dataset ) . indexOf ( result ) ) { return result ; }
Code	if ( new ObjectUtils ( dataset ) . indexOf ( result ) ) { return result ; }
Distance : 9

158
Tree	if ( dataset . isEmptyType () ) { return result ; }
Code	if ( dataset . isEmptyType () ) { return result ; }
Distance : 3

159
Tree	if ( isEmpty ( dataset ) ) { return result ; }
Code	if ( isEmpty ( dataset ) ) { return result ; }
Distance : 4

160
Tree	if ( dataset != null ) { return result . call ( dataset ) ; }
Code	if ( dataset != null ) { return result . call ( dataset ) ; }
Distance : 6

161
Tree	if ( isBottom ( dataset , dataset , result ) ) { return result ; }
Code	if ( isBottom ( dataset , dataset , result ) ) { return result ; }
Distance : 7

162
Tree	if ( dataset . isEmptyOrNull ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . isEmptyOrNull ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

163
Tree	if ( firstNonBottom ( dataset , dataset , result ) ) { return result ; }
Code	if ( firstNonBottom ( dataset , dataset , result ) ) { return result ; }
Distance : 7

164
Tree	if ( isNonSingular ( dataset ) ) { return result ; }
Code	if ( isNonSingular ( dataset ) ) { return result ; }
Distance : 4

165
Tree	if ( isPointInRect ( dataset , dataset ) ) { return result ; }
Code	if ( isPointInRect ( dataset , dataset ) ) { return result ; }
Distance : 5

166
Tree	if ( isBottom ( Locale.ENGLISH ) ) { return result ; }
Code	if ( isBottom ( Locale.ENGLISH ) ) { return result ; }
Distance : 4

167
Tree	if ( indexOf ( dataset , result ) ) { return result ; }
Code	if ( indexOf ( dataset , result ) ) { return result ; }
Distance : 5

168
Tree	if ( isEmptyType ( dataset , dataset ) ) { return result ; }
Code	if ( isEmptyType ( dataset , dataset ) ) { return result ; }
Distance : 5

169
Tree	if ( isEmpty ( dataset , dataset , result ) ) { return result ; }
Code	if ( isEmpty ( dataset , dataset , result ) ) { return result ; }
Distance : 7

170
Tree	if ( dataset != super(); ) { return result ; }
Code	if ( dataset != super(); ) { return result ; }
Distance : 2

171
Tree	if ( isNonSingular ( dataset , dataset ) ) { return result ; }
Code	if ( isNonSingular ( dataset , dataset ) ) { return result ; }
Distance : 5

172
Tree	if ( ! dataset . isDeclaredSloppy ( dataset ) ) { return result ; }
Code	if ( ! dataset . isDeclaredSloppy ( dataset ) ) { return result ; }
Distance : 6

173
Tree	if ( fft ( dataset , dataset ) ) { return result ; }
Code	if ( fft ( dataset , dataset ) ) { return result ; }
Distance : 5

174
Tree	if ( dataset . getParent ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . getParent ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

175
Tree	if ( dataset != return; ) { return result ; }
Code	if ( dataset != return; ) { return result ; }
Distance : 2

176
Tree	if ( firstNonBottom ( dataset , dataset ) ) { return result ; }
Code	if ( firstNonBottom ( dataset , dataset ) ) { return result ; }
Distance : 5

177
Tree	if ( dataset != null ) { return this . dataset ; }
Code	if ( dataset != null ) { return this . dataset ; }
Distance : 4

178
Tree	if ( isPointInRect ( dataset , dataset , result ) ) { return result ; }
Code	if ( isPointInRect ( dataset , dataset , result ) ) { return result ; }
Distance : 7

179
Tree	if ( dataset != null ) { return this . result . findStackedRangeBounds () ; }
Code	if ( dataset != null ) { return this . result . findStackedRangeBounds () ; }
Distance : 6

180
Tree	if ( indexOf ( dataset , dataset , result ) ) { return result ; }
Code	if ( indexOf ( dataset , dataset , result ) ) { return result ; }
Distance : 7

181
Tree	if ( ! indexOf ( dataset ) ) { return result ; }
Code	if ( ! indexOf ( dataset ) ) { return result ; }
Distance : 5

182
Tree	if ( isEmpty ( dataset , dataset ) ) { return result ; }
Code	if ( isEmpty ( dataset , dataset ) ) { return result ; }
Distance : 5

183
Tree	if ( ! canCollapse ( dataset ) ) { return result ; }
Code	if ( ! canCollapse ( dataset ) ) { return result ; }
Distance : 5

184
Tree	if ( indexOf ( dataset , result , result ) ) { return result ; }
Code	if ( indexOf ( dataset , result , result ) ) { return result ; }
Distance : 7

185
Tree	if ( indexOf ( dataset , dataset ) ) { return result ; }
Code	if ( indexOf ( dataset , dataset ) ) { return result ; }
Distance : 5

186
Tree	if ( dataset != null ) { return dataset ; }
Code	if ( dataset != null ) { return dataset ; }
Distance : 2

187
Tree	if ( dataset != return; ) { return this . result ; }
Code	if ( dataset != return; ) { return this . result ; }
Distance : 4

188
Tree	if ( dataset != continue; ) { return result ; }
Code	if ( dataset != continue; ) { return result ; }
Distance : 2

189
Tree	if ( dataset != break; ) { return result ; }
Code	if ( dataset != break; ) { return result ; }
Distance : 2

190
Tree	if ( result ( dataset ) ) { return result ; }
Code	if ( result ( dataset ) ) { return result ; }
Distance : 4

191
Tree	if ( dataset != super(); ) { return this . result ; }
Code	if ( dataset != super(); ) { return this . result ; }
Distance : 4

192
Tree	if ( dataset != continue; ) { return this . result ; }
Code	if ( dataset != continue; ) { return this . result ; }
Distance : 4

193
Tree	if ( dataset ( dataset ) ) { return dataset ; }
Code	if ( dataset ( dataset ) ) { return dataset ; }
Distance : 4

194
Tree	if ( dataset != default: ) { return result ; }
Code	if ( dataset != default: ) { return result ; }
Distance : 2

195
Tree	if ( dataset ( result ) ) { return result ; }
Code	if ( dataset ( result ) ) { return result ; }
Distance : 3

196
Tree	if ( indexOf ( dataset , dataset , dataset ) ) { return result ; }
Code	if ( indexOf ( dataset , dataset , dataset ) ) { return result ; }
Distance : 7

197
Tree	if ( result != return; ) { return result ; }
Code	if ( result != return; ) { return result ; }
Distance : 3

198
Tree	if ( result != null ) { return this . dataset ; }
Code	if ( result != null ) { return this . dataset ; }
Distance : 5

199
Tree	if ( dataset ( dataset ) ) { return result ; } Math
Code	if ( dataset ( dataset ) ) { return result ; } Math
Distance : 4

========================================================================


========================================================================
Example Number: 10
Parent Code is: 
name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
-------------------------------------------------------------------------------
Child code is: 
! name.inExterns && name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (27 (27 (40{val=name.globalSets}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (40{val=name.localSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.aliasingGets}) (231{val=>}) (34{val=NUMBER_CONSTANT}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (27 (27 (38 (207{val=!}) (40{val=name.inExterns})) (249{val=&&}) (27 (40{val=name.globalSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.localSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.aliasingGets}) (231{val=>}) (34{val=NUMBER_CONSTANT}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/130/parent/src_com_google_javascript_jscomp_CollapseProperties.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 180
Wrong
========================================================================
False

0
Tree	objectMethodsGuru == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	objectMethodsGuru == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

1
Tree	dest.contractionCriterion == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	dest.contractionCriterion == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

2
Tree	objectMethodsGuru == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Code	objectMethodsGuru == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Distance : 10

3
Tree	convention == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	convention == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

4
Tree	packed == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	packed == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

5
Tree	bundler == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	bundler == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

6
Tree	decompMatrix == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	decompMatrix == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

7
Tree	findDeps == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	findDeps == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

8
Tree	the_mock_type == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	the_mock_type == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

9
Tree	name.globalSets . pluralize () && MILLIS_PER_DAY . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= MILLIS_PER_DAY
Code	name.globalSets . pluralize () && MILLIS_PER_DAY . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= MILLIS_PER_DAY
Distance : 14

10
Tree	name.globalSets . pluralize () && MILLIS_PER_DAY . contains ( NUMBER_CONSTANT - preserveAllTokens ) <= JAVA_1_8
Code	name.globalSets . pluralize () && MILLIS_PER_DAY . contains ( NUMBER_CONSTANT - preserveAllTokens ) <= JAVA_1_8
Distance : 14

11
Tree	name.globalSets . pluralize () && MILLIS_PER_DAY . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= dpi
Code	name.globalSets . pluralize () && MILLIS_PER_DAY . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= dpi
Distance : 14

12
Tree	the_mock_type == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Code	the_mock_type == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Distance : 10

13
Tree	name.globalSets . pluralize () && MILLIS_PER_DAY . contains ( NUMBER_CONSTANT - superEquals ) <= JAVA_1_8
Code	name.globalSets . pluralize () && MILLIS_PER_DAY . contains ( NUMBER_CONSTANT - superEquals ) <= JAVA_1_8
Distance : 14

14
Tree	- NUMBER_CONSTANT && name.localSets == null && &&
Code	- NUMBER_CONSTANT && name.localSets == null && &&
Distance : 9

15
Tree	name.globalSets . pluralize () && MILLIS . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= JAVA_1_8
Code	name.globalSets . pluralize () && MILLIS . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= JAVA_1_8
Distance : 14

16
Tree	name.globalSets . pluralize () && nextTime . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= JAVA_1_8
Code	name.globalSets . pluralize () && nextTime . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= JAVA_1_8
Distance : 14

17
Tree	name.globalSets . pluralize () && SECONDS_MILLIS . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= JAVA_1_8
Code	name.globalSets . pluralize () && SECONDS_MILLIS . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= JAVA_1_8
Distance : 14

18
Tree	name.globalSets . pluralize () && MILLIS_PER_DAY . getString ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= JAVA_1_8
Code	name.globalSets . pluralize () && MILLIS_PER_DAY . getString ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= JAVA_1_8
Distance : 14

19
Tree	! name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - zval.length )
Code	! name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - zval.length )
Distance : 11

20
Tree	! name.localSets && name.localSets == null && anyStringNull . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Code	! name.localSets && name.localSets == null && anyStringNull . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Distance : 11

21
Tree	! name.localSets && name.localSets == null && &
Code	! name.localSets && name.localSets == null && &
Distance : 9

22
Tree	! name.localSets && name.localSets == null && NUMBER_CONSTANT * JAVA_1_8
Code	! name.localSets && name.localSets == null && NUMBER_CONSTANT * JAVA_1_8
Distance : 9

23
Tree	! name.localSets && name.localSets == null && NUMBER_CONSTANT * slots
Code	! name.localSets && name.localSets == null && NUMBER_CONSTANT * slots
Distance : 9

24
Tree	! name.localSets && name.localSets == null && NUMBER_CONSTANT * isRead
Code	! name.localSets && name.localSets == null && NUMBER_CONSTANT * isRead
Distance : 9

25
Tree	! name.localSets && name.localSets == null && NUMBER_CONSTANT * superEquals
Code	! name.localSets && name.localSets == null && NUMBER_CONSTANT * superEquals
Distance : 9

26
Tree	! name.localSets && name.localSets == null && NUMBER_CONSTANT * maxUlps
Code	! name.localSets && name.localSets == null && NUMBER_CONSTANT * maxUlps
Distance : 9

27
Tree	! name.localSets && name.localSets == null && ++
Code	! name.localSets && name.localSets == null && ++
Distance : 9

28
Tree	! name.localSets && NUMBER_CONSTANT - MILLIS_PER_DAY && ^
Code	! name.localSets && NUMBER_CONSTANT - MILLIS_PER_DAY && ^
Distance : 10

29
Tree	! name.localSets && NUMBER_CONSTANT - MILLIS_PER_DAY && >=
Code	! name.localSets && NUMBER_CONSTANT - MILLIS_PER_DAY && >=
Distance : 10

30
Tree	! name.localSets && MILLIS_PER_DAY + NUMBER_CONSTANT && super
Code	! name.localSets && MILLIS_PER_DAY + NUMBER_CONSTANT && super
Distance : 10

31
Tree	! name.localSets && NUMBER_CONSTANT - MILLIS_PER_DAY && /
Code	! name.localSets && NUMBER_CONSTANT - MILLIS_PER_DAY && /
Distance : 10

32
Tree	! name.localSets && NUMBER_CONSTANT - zval.length && ^
Code	! name.localSets && NUMBER_CONSTANT - zval.length && ^
Distance : 10

33
Tree	! name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - preserveAllTokens )
Code	! name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - preserveAllTokens )
Distance : 11

34
Tree	! name.localSets && name.localSets == null && NUMBER_CONSTANT * argumentPosition
Code	! name.localSets && name.localSets == null && NUMBER_CONSTANT * argumentPosition
Distance : 9

35
Tree	! name.localSets && NUMBER_CONSTANT - zval.length && >=
Code	! name.localSets && NUMBER_CONSTANT - zval.length && >=
Distance : 10

36
Tree	! && && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - anyStringNull )
Code	! && && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - anyStringNull )
Distance : 11

37
Tree	! name.localSets && MILLIS_PER_DAY + NUMBER_CONSTANT && CHAR_CONS
Code	! name.localSets && MILLIS_PER_DAY + NUMBER_CONSTANT && CHAR_CONS
Distance : 10

38
Tree	! name.localSets && NUMBER_CONSTANT - zval.length && /
Code	! name.localSets && NUMBER_CONSTANT - zval.length && /
Distance : 10

39
Tree	! name.localSets && name.localSets == null && >=
Code	! name.localSets && name.localSets == null && >=
Distance : 9

40
Tree	! name.localSets && NUMBER_CONSTANT - MILLIS_PER_DAY && /=
Code	! name.localSets && NUMBER_CONSTANT - MILLIS_PER_DAY && /=
Distance : 10

41
Tree	! name.localSets && name.localSets == null == NUMBER_CONSTANT value
Code	! name.localSets && name.localSets == null == NUMBER_CONSTANT value
Distance : 9

42
Tree	! name.localSets && NUMBER_CONSTANT - MILLIS_PER_DAY && CHAR_CONS
Code	! name.localSets && NUMBER_CONSTANT - MILLIS_PER_DAY && CHAR_CONS
Distance : 10

43
Tree	! name.localSets && name.localSets == null && NUMBER_CONSTANT * uniqueId
Code	! name.localSets && name.localSets == null && NUMBER_CONSTANT * uniqueId
Distance : 9

44
Tree	! name.localSets && name.localSets == null && superEquals . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Code	! name.localSets && name.localSets == null && superEquals . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Distance : 11

45
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT [
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT [
Distance : 5

46
Tree	! name.localSets && name.localSets == null && NUMBER_CONSTANT * anyStringNull
Code	! name.localSets && name.localSets == null && NUMBER_CONSTANT * anyStringNull
Distance : 9

47
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT f
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT f
Distance : 5

48
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT Override
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT Override
Distance : 4

49
Tree	! name.localSets && name.localSets == null && /=
Code	! name.localSets && name.localSets == null && /=
Distance : 9

50
Tree	! name.localSets && name.localSets == null && slots . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Code	! name.localSets && name.localSets == null && slots . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Distance : 11

51
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT MathRuntimeException
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT MathRuntimeException
Distance : 4

52
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT mock
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT mock
Distance : 5

53
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT array
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT array
Distance : 4

54
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT class
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT class
Distance : 5

55
Tree	! name.localSets && NUMBER_CONSTANT - MILLIS_PER_DAY && &
Code	! name.localSets && NUMBER_CONSTANT - MILLIS_PER_DAY && &
Distance : 10

56
Tree	! name.localSets && NUMBER_CONSTANT - MILLIS_PER_DAY && &=
Code	! name.localSets && NUMBER_CONSTANT - MILLIS_PER_DAY && &=
Distance : 10

57
Tree	! name.localSets && absoluteZipPath + NUMBER_CONSTANT && super
Code	! name.localSets && absoluteZipPath + NUMBER_CONSTANT && super
Distance : 10

58
Tree	! name.localSets && zval.length + NUMBER_CONSTANT && super
Code	! name.localSets && zval.length + NUMBER_CONSTANT && super
Distance : 10

59
Tree	! name.localSets && MILLIS_PER_DAY + NUMBER_CONSTANT && /=
Code	! name.localSets && MILLIS_PER_DAY + NUMBER_CONSTANT && /=
Distance : 10

60
Tree	! name.localSets && SECONDS_MILLIS + NUMBER_CONSTANT && super
Code	! name.localSets && SECONDS_MILLIS + NUMBER_CONSTANT && super
Distance : 10

61
Tree	! name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - subtrahendMonth )
Code	! name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - subtrahendMonth )
Distance : 11

62
Tree	! name.localSets && slots + NUMBER_CONSTANT && super
Code	! name.localSets && slots + NUMBER_CONSTANT && super
Distance : 10

63
Tree	- lhsOfForInLoop && name.localSets == null && super
Code	- lhsOfForInLoop && name.localSets == null && super
Distance : 10

64
Tree	! name.localSets && MILLIS_PER_DAY + NUMBER_CONSTANT && ++
Code	! name.localSets && MILLIS_PER_DAY + NUMBER_CONSTANT && ++
Distance : 10

65
Tree	- objectMethodsGuru && name.localSets == null && super
Code	- objectMethodsGuru && name.localSets == null && super
Distance : 10

66
Tree	- embedded && name.localSets == null && super
Code	- embedded && name.localSets == null && super
Distance : 10

67
Tree	- objectMethodsGuru && name.localSets == null && super
Code	- objectMethodsGuru && name.localSets == null && super
Distance : 10

68
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT notifyListeners
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT notifyListeners
Distance : 4

69
Tree	- NUMBER_CONSTANT && name.localSets == null && ^
Code	- NUMBER_CONSTANT && name.localSets == null && ^
Distance : 9

70
Tree	! name.localSets && nextTime + NUMBER_CONSTANT && super
Code	! name.localSets && nextTime + NUMBER_CONSTANT && super
Distance : 10

71
Tree	- lowerParam && name.localSets == null && super
Code	- lowerParam && name.localSets == null && super
Distance : 10

72
Tree	name.globalSets . pluralize () && eachRefTypeIndexedByProperty . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= JAVA_1_8
Code	name.globalSets . pluralize () && eachRefTypeIndexedByProperty . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= JAVA_1_8
Distance : 14

73
Tree	- NUMBER_CONSTANT && name.localSets == null && &&
Code	- NUMBER_CONSTANT && name.localSets == null && &&
Distance : 9

74
Tree	- NUMBER_CONSTANT && name.localSets == null && ++
Code	- NUMBER_CONSTANT && name.localSets == null && ++
Distance : 9

75
Tree	- aliasExpanded && name.localSets == null && super
Code	- aliasExpanded && name.localSets == null && super
Distance : 10

76
Tree	- NUMBER_CONSTANT && name.localSets == null && >=
Code	- NUMBER_CONSTANT && name.localSets == null && >=
Distance : 9

77
Tree	- NUMBER_CONSTANT && name.localSets == null && ++
Code	- NUMBER_CONSTANT && name.localSets == null && ++
Distance : 9

78
Tree	- NUMBER_CONSTANT && name.localSets == null && >=
Code	- NUMBER_CONSTANT && name.localSets == null && >=
Distance : 9

79
Tree	- testAbstractClass && name.localSets == null && super
Code	- testAbstractClass && name.localSets == null && super
Distance : 10

80
Tree	! name.localSets && name.localSets == null && superEquals . of ( NUMBER_CONSTANT - superEquals )
Code	! name.localSets && name.localSets == null && superEquals . of ( NUMBER_CONSTANT - superEquals )
Distance : 11

81
Tree	- NUMBER_CONSTANT && name.localSets == null && /=
Code	- NUMBER_CONSTANT && name.localSets == null && /=
Distance : 9

82
Tree	! name.localSets && maxUlps + NUMBER_CONSTANT && super
Code	! name.localSets && maxUlps + NUMBER_CONSTANT && super
Distance : 10

83
Tree	- NUMBER_CONSTANT && name.localSets == null && &
Code	- NUMBER_CONSTANT && name.localSets == null && &
Distance : 9

84
Tree	- NUMBER_CONSTANT && name.localSets == null && /=
Code	- NUMBER_CONSTANT && name.localSets == null && /=
Distance : 9

85
Tree	- scopeType && name.localSets == null && super
Code	- scopeType && name.localSets == null && super
Distance : 10

86
Tree	- NUMBER_CONSTANT && name.localSets == null && &
Code	- NUMBER_CONSTANT && name.localSets == null && &
Distance : 9

87
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT -
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT -
Distance : 5

88
Tree	- lowerParam && name.localSets == null && super
Code	- lowerParam && name.localSets == null && super
Distance : 10

89
Tree	- aliasExpanded && name.localSets == null && super
Code	- aliasExpanded && name.localSets == null && super
Distance : 10

90
Tree	NUMBER_CONSTANT * ( MILLIS_PER_DAY * MILLIS_PER_DAY )
Code	NUMBER_CONSTANT * ( MILLIS_PER_DAY * MILLIS_PER_DAY )
Distance : 13

91
Tree	NUMBER_CONSTANT * ( nextTime * MILLIS_PER_DAY )
Code	NUMBER_CONSTANT * ( nextTime * MILLIS_PER_DAY )
Distance : 13

92
Tree	NUMBER_CONSTANT * ( MILLIS_PER_DAY * qrRankingThreshold )
Code	NUMBER_CONSTANT * ( MILLIS_PER_DAY * qrRankingThreshold )
Distance : 13

93
Tree	NUMBER_CONSTANT * ( nextTime * qrRankingThreshold )
Code	NUMBER_CONSTANT * ( nextTime * qrRankingThreshold )
Distance : 13

94
Tree	NUMBER_CONSTANT * ( MILLIS * MILLIS_PER_DAY )
Code	NUMBER_CONSTANT * ( MILLIS * MILLIS_PER_DAY )
Distance : 13

95
Tree	NUMBER_CONSTANT * ( MILLIS_PER_DAY * maxUlps )
Code	NUMBER_CONSTANT * ( MILLIS_PER_DAY * maxUlps )
Distance : 13

96
Tree	NUMBER_CONSTANT * ( MILLIS * qrRankingThreshold )
Code	NUMBER_CONSTANT * ( MILLIS * qrRankingThreshold )
Distance : 13

97
Tree	NUMBER_CONSTANT * ( nextTime * maxUlps )
Code	NUMBER_CONSTANT * ( nextTime * maxUlps )
Distance : 13

98
Tree	- name.localSets && name.localSets == null && super
Code	- name.localSets && name.localSets == null && super
Distance : 10

99
Tree	- name.localSets && name.localSets == null && CHAR_CONS
Code	- name.localSets && name.localSets == null && CHAR_CONS
Distance : 10

100
Tree	! name.localSets && name.localSets == null && super
Code	! name.localSets && name.localSets == null && super
Distance : 9

101
Tree	- name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Code	- name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Distance : 12

102
Tree	- name.localSets && name.localSets == null && &&
Code	- name.localSets && name.localSets == null && &&
Distance : 10

103
Tree	NUMBER_CONSTANT * ( MILLIS_PER_DAY * SECONDS_MILLIS )
Code	NUMBER_CONSTANT * ( MILLIS_PER_DAY * SECONDS_MILLIS )
Distance : 13

104
Tree	- name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - superEquals )
Code	- name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - superEquals )
Distance : 12

105
Tree	- name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - preserveAllTokens )
Code	- name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - preserveAllTokens )
Distance : 12

106
Tree	- name.localSets && name.localSets == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Code	- name.localSets && name.localSets == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Distance : 10

107
Tree	NUMBER_CONSTANT * ( nextTime * SECONDS_MILLIS )
Code	NUMBER_CONSTANT * ( nextTime * SECONDS_MILLIS )
Distance : 13

108
Tree	- name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - anyStringNull )
Code	- name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - anyStringNull )
Distance : 12

109
Tree	! name.localSets && name.localSets == null && super
Code	! name.localSets && name.localSets == null && super
Distance : 9

110
Tree	! name.localSets && name.localSets == null && extends
Code	! name.localSets && name.localSets == null && extends
Distance : 9

111
Tree	! name.localSets && name.localSets == null && ++
Code	! name.localSets && name.localSets == null && ++
Distance : 9

112
Tree	! name.localSets && name.localSets == null && NUMBER_CONSTANT * isLiteralObject
Code	! name.localSets && name.localSets == null && NUMBER_CONSTANT * isLiteralObject
Distance : 9

113
Tree	! name.localSets && name.localSets == continue; == NUMBER_CONSTANT
Code	! name.localSets && name.localSets == continue; == NUMBER_CONSTANT
Distance : 9

114
Tree	! name.localSets && name.localSets == null && >=
Code	! name.localSets && name.localSets == null && >=
Distance : 9

115
Tree	! name.localSets && name.localSets == null && else
Code	! name.localSets && name.localSets == null && else
Distance : 9

116
Tree	! name.localSets && name.localSets == return; == NUMBER_CONSTANT
Code	! name.localSets && name.localSets == return; == NUMBER_CONSTANT
Distance : 9

117
Tree	! name.localSets && name.localSets == break; == NUMBER_CONSTANT
Code	! name.localSets && name.localSets == break; == NUMBER_CONSTANT
Distance : 9

118
Tree	! name.localSets && name.localSets == null && /=
Code	! name.localSets && name.localSets == null && /=
Distance : 9

119
Tree	- sgY2 && name.localSets == null && super
Code	- sgY2 && name.localSets == null && super
Distance : 10

120
Tree	! name.localSets && name.localSets == null && ^
Code	! name.localSets && name.localSets == null && ^
Distance : 9

121
Tree	- testAbstractClass && name.localSets == null && super
Code	- testAbstractClass && name.localSets == null && super
Distance : 10

122
Tree	- scopeType && name.localSets == null && super
Code	- scopeType && name.localSets == null && super
Distance : 10

123
Tree	- sgY2 && name.localSets == null && super
Code	- sgY2 && name.localSets == null && super
Distance : 10

124
Tree	- NUMBER_CONSTANT && name.localSets == null && else
Code	- NUMBER_CONSTANT && name.localSets == null && else
Distance : 9

125
Tree	! name.localSets && name.localSets == super(); == NUMBER_CONSTANT
Code	! name.localSets && name.localSets == super(); == NUMBER_CONSTANT
Distance : 9

126
Tree	- NUMBER_CONSTANT && name.localSets == null && else
Code	- NUMBER_CONSTANT && name.localSets == null && else
Distance : 9

127
Tree	- NUMBER_CONSTANT && name.localSets == null && extends
Code	- NUMBER_CONSTANT && name.localSets == null && extends
Distance : 9

128
Tree	name.globalSets . pluralize () && MILLIS_PER_DAY . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= JAVA_1_8
Code	name.globalSets . pluralize () && MILLIS_PER_DAY . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= JAVA_1_8
Distance : 14

129
Tree	- NUMBER_CONSTANT && name.localSets == null && extends
Code	- NUMBER_CONSTANT && name.localSets == null && extends
Distance : 9

130
Tree	! name.localSets && name.localSets == default: == NUMBER_CONSTANT
Code	! name.localSets && name.localSets == default: == NUMBER_CONSTANT
Distance : 9

131
Tree	! name.localSets && name.localSets == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Code	! name.localSets && name.localSets == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Distance : 9

132
Tree	- NUMBER_CONSTANT && name.localSets == null && ^
Code	- NUMBER_CONSTANT && name.localSets == null && ^
Distance : 9

133
Tree	! name.localSets && name.localSets == null == NUMBER_CONSTANT i
Code	! name.localSets && name.localSets == null == NUMBER_CONSTANT i
Distance : 9

134
Tree	! name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Code	! name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Distance : 11

135
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
Distance : 3

136
Tree	! name.localSets && name.localSets == null == NUMBER_CONSTANT
Code	! name.localSets && name.localSets == null == NUMBER_CONSTANT
Distance : 9

137
Tree	! name.localSets && name.localSets == null && CHAR_CONS
Code	! name.localSets && name.localSets == null && CHAR_CONS
Distance : 9

138
Tree	- name.localSets && name.localSets == null && ++
Code	- name.localSets && name.localSets == null && ++
Distance : 10

139
Tree	- name.globalSets && name.localSets == null && NUMBER_CONSTANT * superEquals
Code	- name.globalSets && name.localSets == null && NUMBER_CONSTANT * superEquals
Distance : 9

140
Tree	- name.globalSets && name.localSets == null && >=
Code	- name.globalSets && name.localSets == null && >=
Distance : 9

141
Tree	- name.globalSets && name.localSets == null && /=
Code	- name.globalSets && name.localSets == null && /=
Distance : 9

142
Tree	- name.localSets && name.localSets == null && NUMBER_CONSTANT * maxUlps
Code	- name.localSets && name.localSets == null && NUMBER_CONSTANT * maxUlps
Distance : 10

143
Tree	- name.localSets && name.localSets == null && NUMBER_CONSTANT * argumentPosition
Code	- name.localSets && name.localSets == null && NUMBER_CONSTANT * argumentPosition
Distance : 10

144
Tree	- name.localSets && name.localSets == null && NUMBER_CONSTANT * osVersion
Code	- name.localSets && name.localSets == null && NUMBER_CONSTANT * osVersion
Distance : 10

145
Tree	- name.globalSets && name.localSets == null && NUMBER_CONSTANT * uniqueId
Code	- name.globalSets && name.localSets == null && NUMBER_CONSTANT * uniqueId
Distance : 9

146
Tree	- name.localSets && name.localSets == null && NUMBER_CONSTANT * JAVA_1_8
Code	- name.localSets && name.localSets == null && NUMBER_CONSTANT * JAVA_1_8
Distance : 10

147
Tree	- name.localSets && name.localSets == null && &
Code	- name.localSets && name.localSets == null && &
Distance : 10

148
Tree	! name.localSets && name.localSets == null && &&
Code	! name.localSets && name.localSets == null && &&
Distance : 9

149
Tree	- name.localSets && name.localSets == null && NUMBER_CONSTANT * slots
Code	- name.localSets && name.localSets == null && NUMBER_CONSTANT * slots
Distance : 10

150
Tree	! name.localSets && name.localSets == null && extends
Code	! name.localSets && name.localSets == null && extends
Distance : 9

151
Tree	! name.localSets && name.localSets == null && else
Code	! name.localSets && name.localSets == null && else
Distance : 9

152
Tree	! name.localSets && name.localSets == null && CHAR_CONS
Code	! name.localSets && name.localSets == null && CHAR_CONS
Distance : 9

153
Tree	! name.localSets && name.localSets == null && &
Code	! name.localSets && name.localSets == null && &
Distance : 9

154
Tree	! name.localSets && name.localSets == null && ^
Code	! name.localSets && name.localSets == null && ^
Distance : 9

155
Tree	- name.localSets && name.localSets == null && NUMBER_CONSTANT * isRead
Code	- name.localSets && name.localSets == null && NUMBER_CONSTANT * isRead
Distance : 10

156
Tree	! name.localSets && name.localSets == null && &&
Code	! name.localSets && name.localSets == null && &&
Distance : 9

157
Tree	! name.localSets && name.localSets == null == NUMBER_CONSTANT p
Code	! name.localSets && name.localSets == null == NUMBER_CONSTANT p
Distance : 9

158
Tree	! name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - superEquals )
Code	! name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - superEquals )
Distance : 11

159
Tree	! name.localSets && name.localSets == null == NUMBER_CONSTANT options
Code	! name.localSets && name.localSets == null == NUMBER_CONSTANT options
Distance : 9

160
Tree	- NUMBER_CONSTANT && name.localSets == null && super
Code	- NUMBER_CONSTANT && name.localSets == null && super
Distance : 9

161
Tree	- NUMBER_CONSTANT && name.localSets == null && super
Code	- NUMBER_CONSTANT && name.localSets == null && super
Distance : 9

162
Tree	- NUMBER_CONSTANT && name.localSets == null && CHAR_CONS
Code	- NUMBER_CONSTANT && name.localSets == null && CHAR_CONS
Distance : 9

163
Tree	- newInput && name.localSets == null && super
Code	- newInput && name.localSets == null && super
Distance : 10

164
Tree	- newInput && name.localSets == null && super
Code	- newInput && name.localSets == null && super
Distance : 10

165
Tree	- inbits && name.localSets == null && super
Code	- inbits && name.localSets == null && super
Distance : 10

166
Tree	- NUMBER_CONSTANT && name.localSets == null && CHAR_CONS
Code	- NUMBER_CONSTANT && name.localSets == null && CHAR_CONS
Distance : 9

167
Tree	- inbits && name.localSets == null && super
Code	- inbits && name.localSets == null && super
Distance : 10

168
Tree	- lhsOfForInLoop && name.localSets == null && super
Code	- lhsOfForInLoop && name.localSets == null && super
Distance : 10

169
Tree	- embedded && name.localSets == null && super
Code	- embedded && name.localSets == null && super
Distance : 10

170
Tree	- name.localSets && name.localSets == null && extends
Code	- name.localSets && name.localSets == null && extends
Distance : 10

171
Tree	- name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - subtrahendMonth )
Code	- name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - subtrahendMonth )
Distance : 12

172
Tree	- name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - JAVA_1_8 )
Code	- name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - JAVA_1_8 )
Distance : 12

173
Tree	- name.globalSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - zval.length )
Code	- name.globalSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - zval.length )
Distance : 12

174
Tree	- name.localSets && name.localSets == null && else
Code	- name.localSets && name.localSets == null && else
Distance : 10

175
Tree	- name.localSets && name.localSets == null && slots . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Code	- name.localSets && name.localSets == null && slots . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Distance : 12

176
Tree	- name.globalSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - ZERO )
Code	- name.globalSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - ZERO )
Distance : 12

177
Tree	- name.globalSets && name.localSets == null && superEquals . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Code	- name.globalSets && name.localSets == null && superEquals . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Distance : 12

178
Tree	- name.localSets && name.localSets == null && ^
Code	- name.localSets && name.localSets == null && ^
Distance : 10

179
Tree	- name.localSets && name.localSets == null && NUMBER_CONSTANT * anyStringNull
Code	- name.localSets && name.localSets == null && NUMBER_CONSTANT * anyStringNull
Distance : 10

========================================================================


========================================================================
Example Number: 11
Parent Code is: 
Context rhsContext = Context.OTHER ;
-------------------------------------------------------------------------------
Child code is: 
Context rhsContext = getContextForNoInOperator ( context ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Context})) (59 (800{val=rhsContext}) (204{val==}) (40{val=Context.OTHER})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Context})) (59 (800{val=rhsContext}) (204{val==}) (32 (802{val=getContextForNoInOperator}) (214{val=(}) (800{val=context}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/123/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Context rhsContext = NUMBER_CONSTANT ; Class
Code	Context rhsContext = NUMBER_CONSTANT ; Class
Distance : 5

1
Tree	Context rhsContext = context . Context.OTHER ( Context.OTHER ) ;
Code	Context rhsContext = context . Context.OTHER ( Context.OTHER ) ;
Distance : 4

2
Tree	Context context = Context.OTHER ( context ) ;
Code	Context context = Context.OTHER ( context ) ;
Distance : 2

3
Tree	Context rhsContext = new Context.OTHER ( Context , context ) ;
Code	Context rhsContext = new Context.OTHER ( Context , context ) ;
Distance : 4

4
Tree	Context rhsContext = Context.OTHER . Context.OTHER ( Context.OTHER , Context.OTHER ) ;
Code	Context rhsContext = Context.OTHER . Context.OTHER ( Context.OTHER , Context.OTHER ) ;
Distance : 6

5
Tree	Context context = context ? Context.OTHER : Context.OTHER ;
Code	Context context = context ? Context.OTHER : Context.OTHER ;
Distance : 6

6
Tree	Context context = Context.OTHER . Context.OTHER ( Context.OTHER ) ;
Code	Context context = Context.OTHER . Context.OTHER ( Context.OTHER ) ;
Distance : 5

7
Tree	Context context = new Context.OTHER ( Context , rhsContext ) ;
Code	Context context = new Context.OTHER ( Context , rhsContext ) ;
Distance : 6

8
Tree	Context rhsContext = Context.OTHER ; p
Code	Context rhsContext = Context.OTHER ; p
Distance : 5

9
Tree	Context rhsContext = Context.OTHER ; &&
Code	Context rhsContext = Context.OTHER ; &&
Distance : 5

10
Tree	Context rhsContext = Context.OTHER ; T
Code	Context rhsContext = Context.OTHER ; T
Distance : 5

11
Tree	Context rhsContext ; Class
Code	Context rhsContext ; Class
Distance : 6

12
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; &&
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; &&
Distance : 5

13
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; p
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; p
Distance : 5

14
Tree	Context rhsContext = NUMBER_CONSTANT ;
Code	Context rhsContext = NUMBER_CONSTANT ;
Distance : 4

15
Tree	Context rhsContext = NUMBER_CONSTANT ; MathRuntimeException
Code	Context rhsContext = NUMBER_CONSTANT ; MathRuntimeException
Distance : 5

16
Tree	Context rhsContext = NUMBER_CONSTANT ; {}
Code	Context rhsContext = NUMBER_CONSTANT ; {}
Distance : 5

17
Tree	Context rhsContext = NUMBER_CONSTANT ; f
Code	Context rhsContext = NUMBER_CONSTANT ; f
Distance : 5

18
Tree	Context rhsContext ; Preconditions
Code	Context rhsContext ; Preconditions
Distance : 6

19
Tree	Context rhsContext = Context.OTHER ; Test
Code	Context rhsContext = Context.OTHER ; Test
Distance : 5

20
Tree	Context rhsContext = STRING_CONSTANT ; Preconditions
Code	Context rhsContext = STRING_CONSTANT ; Preconditions
Distance : 5

21
Tree	Context rhsContext = Context.OTHER ; Class
Code	Context rhsContext = Context.OTHER ; Class
Distance : 5

22
Tree	Context rhsContext = NUMBER_CONSTANT ; Preconditions
Code	Context rhsContext = NUMBER_CONSTANT ; Preconditions
Distance : 5

23
Tree	Context rhsContext = Context.OTHER ; -
Code	Context rhsContext = Context.OTHER ; -
Distance : 5

24
Tree	Context rhsContext = Context.OTHER . Context.OTHER ( context ) ;
Code	Context rhsContext = Context.OTHER . Context.OTHER ( context ) ;
Distance : 3

25
Tree	Context rhsContext = STRING_CONSTANT ; {}
Code	Context rhsContext = STRING_CONSTANT ; {}
Distance : 5

26
Tree	Context rhsContext = STRING_CONSTANT ; Class
Code	Context rhsContext = STRING_CONSTANT ; Class
Distance : 5

27
Tree	Context rhsContext = Context.OTHER ; MathRuntimeException
Code	Context rhsContext = Context.OTHER ; MathRuntimeException
Distance : 5

28
Tree	Context rhsContext ; f
Code	Context rhsContext ; f
Distance : 6

29
Tree	Context rhsContext ; ParamChecks
Code	Context rhsContext ; ParamChecks
Distance : 6

30
Tree	Context rhsContext = NUMBER_CONSTANT ; -
Code	Context rhsContext = NUMBER_CONSTANT ; -
Distance : 5

31
Tree	Context rhsContext = NUMBER_CONSTANT ; ParamChecks
Code	Context rhsContext = NUMBER_CONSTANT ; ParamChecks
Distance : 5

32
Tree	Context rhsContext = STRING_CONSTANT ; MathRuntimeException
Code	Context rhsContext = STRING_CONSTANT ; MathRuntimeException
Distance : 5

33
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; toString
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; toString
Distance : 5

34
Tree	Context context = context . Context.OTHER () ;
Code	Context context = context . Context.OTHER () ;
Distance : 5

35
Tree	Context rhsContext = Context.OTHER . Context.OTHER ( Context.OTHER ) ;
Code	Context rhsContext = Context.OTHER . Context.OTHER ( Context.OTHER ) ;
Distance : 4

36
Tree	Context rhsContext = EventHandler.Action.CONTINUE ;
Code	Context rhsContext = EventHandler.Action.CONTINUE ;
Distance : 4

37
Tree	Context rhsContext = Cartesian2D.NaN ;
Code	Context rhsContext = Cartesian2D.NaN ;
Distance : 4

38
Tree	Context rhsContext = true ;
Code	Context rhsContext = true ;
Distance : 4

39
Tree	Context rhsContext = PivotSelectionRule.DANTZIG ;
Code	Context rhsContext = PivotSelectionRule.DANTZIG ;
Distance : 4

40
Tree	Context rhsContext = extractCauseUnchecked ;
Code	Context rhsContext = extractCauseUnchecked ;
Distance : 4

41
Tree	Context rhsContext = false ;
Code	Context rhsContext = false ;
Distance : 4

42
Tree	Context [] rhsContext = Context.OTHER ;
Code	Context [] rhsContext = Context.OTHER ;
Distance : 5

43
Tree	final Context rhsContext = Context.OTHER ;
Code	final Context rhsContext = Context.OTHER ;
Distance : 5

44
Tree	Context rhsContext = this . rhsContext ;
Code	Context rhsContext = this . rhsContext ;
Distance : 4

45
Tree	Context context = NUMBER_CONSTANT ;
Code	Context context = NUMBER_CONSTANT ;
Distance : 5

46
Tree	Context context = Context.OTHER ;
Code	Context context = Context.OTHER ;
Distance : 5

47
Tree	abstract Context rhsContext = Context.OTHER ;
Code	abstract Context rhsContext = Context.OTHER ;
Distance : 5

48
Tree	Context rhsContext = new Context.OTHER () ;
Code	Context rhsContext = new Context.OTHER () ;
Distance : 4

49
Tree	Context Context [] = Context.OTHER ;
Code	Context Context [] = Context.OTHER ;
Distance : 6

50
Tree	Context context = false ;
Code	Context context = false ;
Distance : 5

51
Tree	private Context rhsContext = Context.OTHER ;
Code	private Context rhsContext = Context.OTHER ;
Distance : 5

52
Tree	static Context rhsContext = Context.OTHER ;
Code	static Context rhsContext = Context.OTHER ;
Distance : 5

53
Tree	Context context = Context.OTHER . Context.OTHER () ;
Code	Context context = Context.OTHER . Context.OTHER () ;
Distance : 5

54
Tree	Context context = this . context ;
Code	Context context = this . context ;
Distance : 4

55
Tree	Context Context [] = context . Context.OTHER () ;
Code	Context Context [] = context . Context.OTHER () ;
Distance : 6

56
Tree	Context rhsContext = context ? Context.OTHER : Context.OTHER ;
Code	Context rhsContext = context ? Context.OTHER : Context.OTHER ;
Distance : 5

57
Tree	Context context = super . Context.OTHER () ;
Code	Context context = super . Context.OTHER () ;
Distance : 5

58
Tree	Context rhsContext = Context.OTHER ( context ) ;
Code	Context rhsContext = Context.OTHER ( context ) ;
Distance : 1

59
Tree	Context context = Context.OTHER ? Context.OTHER : Context.OTHER ;
Code	Context context = Context.OTHER ? Context.OTHER : Context.OTHER ;
Distance : 6

60
Tree	Context context = context ;
Code	Context context = context ;
Distance : 4

61
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ;
Code	Context rhsContext = Context.OTHER . Context.OTHER () ;
Distance : 4

62
Tree	protected Context rhsContext = Context.OTHER ;
Code	protected Context rhsContext = Context.OTHER ;
Distance : 5

63
Tree	final Context context = Context.OTHER ;
Code	final Context context = Context.OTHER ;
Distance : 6

64
Tree	public Context rhsContext = Context.OTHER ;
Code	public Context rhsContext = Context.OTHER ;
Distance : 5

65
Tree	Context [] context = Context.OTHER ;
Code	Context [] context = Context.OTHER ;
Distance : 6

66
Tree	Context rhsContext = super . Context.OTHER () ;
Code	Context rhsContext = super . Context.OTHER () ;
Distance : 4

67
Tree	Context context = Context.OTHER ;
Code	Context context = Context.OTHER ;
Distance : 5

68
Tree	Context rhsContext = STRING_CONSTANT ; Test
Code	Context rhsContext = STRING_CONSTANT ; Test
Distance : 5

69
Tree	Context rhsContext ;
Code	Context rhsContext ;
Distance : 5

70
Tree	Context rhsContext = super . Context.OTHER () ; Test
Code	Context rhsContext = super . Context.OTHER () ; Test
Distance : 5

71
Tree	Context Context [] = Context.OTHER ; MathRuntimeException
Code	Context Context [] = Context.OTHER ; MathRuntimeException
Distance : 7

72
Tree	Context [] rhsContext = Context.OTHER ; Class
Code	Context [] rhsContext = Context.OTHER ; Class
Distance : 6

73
Tree	Context rhsContext = super . Context.OTHER () ; ParamChecks
Code	Context rhsContext = super . Context.OTHER () ; ParamChecks
Distance : 5

74
Tree	Context Context [] = Context.OTHER . Context.OTHER () ; {}
Code	Context Context [] = Context.OTHER . Context.OTHER () ; {}
Distance : 7

75
Tree	Context rhsContext = super . Context.OTHER () ; {}
Code	Context rhsContext = super . Context.OTHER () ; {}
Distance : 5

76
Tree	Context rhsContext = true ; toString
Code	Context rhsContext = true ; toString
Distance : 5

77
Tree	Context rhsContext = super . Context.OTHER () ; MathRuntimeException
Code	Context rhsContext = super . Context.OTHER () ; MathRuntimeException
Distance : 5

78
Tree	Context rhsContext = new Context.OTHER ( Context , rhsContext ) ; wanted
Code	Context rhsContext = new Context.OTHER ( Context , rhsContext ) ; wanted
Distance : 6

79
Tree	Context rhsContext = Context.OTHER ( Context.OTHER ) ; T
Code	Context rhsContext = Context.OTHER ( Context.OTHER ) ; T
Distance : 3

80
Tree	Context Context [] = Context.OTHER . Context.OTHER () ; MathRuntimeException
Code	Context Context [] = Context.OTHER . Context.OTHER () ; MathRuntimeException
Distance : 7

81
Tree	Context rhsContext = true ; source
Code	Context rhsContext = true ; source
Distance : 5

82
Tree	Context rhsContext = true ; options
Code	Context rhsContext = true ; options
Distance : 5

83
Tree	Context rhsContext = true ; p
Code	Context rhsContext = true ; p
Distance : 5

84
Tree	Context rhsContext = true ; &&
Code	Context rhsContext = true ; &&
Distance : 5

85
Tree	Context rhsContext = true ; T
Code	Context rhsContext = true ; T
Distance : 5

86
Tree	Context [] rhsContext = Context.OTHER ; Test
Code	Context [] rhsContext = Context.OTHER ; Test
Distance : 6

87
Tree	Context rhsContext = super . Context.OTHER () ; Class
Code	Context rhsContext = super . Context.OTHER () ; Class
Distance : 5

88
Tree	Context rhsContext = this . rhsContext ; p
Code	Context rhsContext = this . rhsContext ; p
Distance : 5

89
Tree	Context rhsContext = this . rhsContext ; options
Code	Context rhsContext = this . rhsContext ; options
Distance : 5

90
Tree	Context rhsContext = Context.OTHER ( Context.OTHER ) ; &&
Code	Context rhsContext = Context.OTHER ( Context.OTHER ) ; &&
Distance : 3

91
Tree	Context rhsContext = Context.OTHER ( Context.OTHER ) ; source
Code	Context rhsContext = Context.OTHER ( Context.OTHER ) ; source
Distance : 3

92
Tree	Context rhsContext = Context.OTHER ? Context.OTHER : Context.OTHER ; T
Code	Context rhsContext = Context.OTHER ? Context.OTHER : Context.OTHER ; T
Distance : 6

93
Tree	Context rhsContext = Context.OTHER ? Context.OTHER : Context.OTHER ; toString
Code	Context rhsContext = Context.OTHER ? Context.OTHER : Context.OTHER ; toString
Distance : 6

94
Tree	Context Context [] = Context.OTHER . Context.OTHER () ; Test
Code	Context Context [] = Context.OTHER . Context.OTHER () ; Test
Distance : 7

95
Tree	Context rhsContext = Context.OTHER . Context.OTHER ( Context.OTHER , Context.OTHER ) ; Math
Code	Context rhsContext = Context.OTHER . Context.OTHER ( Context.OTHER , Context.OTHER ) ; Math
Distance : 7

96
Tree	Context rhsContext = new Context.OTHER () ; f
Code	Context rhsContext = new Context.OTHER () ; f
Distance : 5

97
Tree	Context rhsContext = new Context.OTHER () ; {}
Code	Context rhsContext = new Context.OTHER () ; {}
Distance : 5

98
Tree	Context rhsContext = new Context.OTHER () ; MathRuntimeException
Code	Context rhsContext = new Context.OTHER () ; MathRuntimeException
Distance : 5

99
Tree	Context rhsContext = new Context.OTHER () ; Class
Code	Context rhsContext = new Context.OTHER () ; Class
Distance : 5

100
Tree	Context rhsContext = new Context.OTHER () ; Test
Code	Context rhsContext = new Context.OTHER () ; Test
Distance : 5

101
Tree	Context rhsContext = this . rhsContext ; &&
Code	Context rhsContext = this . rhsContext ; &&
Distance : 5

102
Tree	Context rhsContext = new Context.OTHER ( Context , rhsContext ) ; Math
Code	Context rhsContext = new Context.OTHER ( Context , rhsContext ) ; Math
Distance : 6

103
Tree	Context rhsContext = Context.OTHER ? Context.OTHER : Context.OTHER ; options
Code	Context rhsContext = Context.OTHER ? Context.OTHER : Context.OTHER ; options
Distance : 6

104
Tree	Context rhsContext = Context.OTHER ? Context.OTHER : Context.OTHER ; p
Code	Context rhsContext = Context.OTHER ? Context.OTHER : Context.OTHER ; p
Distance : 6

105
Tree	Context rhsContext = Context.OTHER ? Context.OTHER : Context.OTHER ; &&
Code	Context rhsContext = Context.OTHER ? Context.OTHER : Context.OTHER ; &&
Distance : 6

106
Tree	Context rhsContext = Context.OTHER ( Context.OTHER ) ; toString
Code	Context rhsContext = Context.OTHER ( Context.OTHER ) ; toString
Distance : 3

107
Tree	Context rhsContext = super . Context.OTHER () ; Preconditions
Code	Context rhsContext = super . Context.OTHER () ; Preconditions
Distance : 5

108
Tree	Context Context [] = Context.OTHER ; -
Code	Context Context [] = Context.OTHER ; -
Distance : 7

109
Tree	Context Context [] = Context.OTHER ; ParamChecks
Code	Context Context [] = Context.OTHER ; ParamChecks
Distance : 7

110
Tree	Context Context [] = Context.OTHER ; f
Code	Context Context [] = Context.OTHER ; f
Distance : 7

111
Tree	Context Context [] = Context.OTHER ; {}
Code	Context Context [] = Context.OTHER ; {}
Distance : 7

112
Tree	Context rhsContext = Context.OTHER . Context.OTHER ( Context.OTHER ) ; wanted
Code	Context rhsContext = Context.OTHER . Context.OTHER ( Context.OTHER ) ; wanted
Distance : 5

113
Tree	Context rhsContext = Context.OTHER . Context.OTHER ( Context.OTHER ) ; Math
Code	Context rhsContext = Context.OTHER . Context.OTHER ( Context.OTHER ) ; Math
Distance : 5

114
Tree	Context context = this . rhsContext ;
Code	Context context = this . rhsContext ;
Distance : 5

115
Tree	Context rhsContext = Context.OTHER ;
Code	Context rhsContext = Context.OTHER ;
Distance : 4

116
Tree	Context rhsContext = Context.OTHER ( Context.OTHER ) ;
Code	Context rhsContext = Context.OTHER ( Context.OTHER ) ;
Distance : 2

117
Tree	Context rhsContext = Context.OTHER ? Context.OTHER : Context.OTHER ;
Code	Context rhsContext = Context.OTHER ? Context.OTHER : Context.OTHER ;
Distance : 5

118
Tree	Context rhsContext = Context.OTHER . Context.OTHER ( context , Context.OTHER ) ;
Code	Context rhsContext = Context.OTHER . Context.OTHER ( context , Context.OTHER ) ;
Distance : 5

119
Tree	Context rhsContext = STRING_CONSTANT ;
Code	Context rhsContext = STRING_CONSTANT ;
Distance : 4

120
Tree	Context Context [] = Context.OTHER . Context.OTHER () ;
Code	Context Context [] = Context.OTHER . Context.OTHER () ;
Distance : 6

121
Tree	Context rhsContext = source.contractionCriterion ;
Code	Context rhsContext = source.contractionCriterion ;
Distance : 4

122
Tree	abstract Context context = Context.OTHER ;
Code	abstract Context context = Context.OTHER ;
Distance : 6

123
Tree	Context rhsContext = context . Context.OTHER ( Context.OTHER , Context.OTHER ) ;
Code	Context rhsContext = context . Context.OTHER ( Context.OTHER , Context.OTHER ) ;
Distance : 6

124
Tree	Context rhsContext = new Context.OTHER ( context , context ) ;
Code	Context rhsContext = new Context.OTHER ( context , context ) ;
Distance : 4

125
Tree	Context rhsContext = getOrCreateName ;
Code	Context rhsContext = getOrCreateName ;
Distance : 4

126
Tree	Context context = new Context.OTHER () ;
Code	Context context = new Context.OTHER () ;
Distance : 5

127
Tree	synchronized Context context = Context.OTHER ;
Code	synchronized Context context = Context.OTHER ;
Distance : 6

128
Tree	Context rhsContext = requirePrinter ;
Code	Context rhsContext = requirePrinter ;
Distance : 4

129
Tree	Context context = Context.OTHER . Context.OTHER ( context ) ;
Code	Context context = Context.OTHER . Context.OTHER ( context ) ;
Distance : 4

130
Tree	Context context = context . Context.OTHER ( Context.OTHER ) ;
Code	Context context = context . Context.OTHER ( Context.OTHER ) ;
Distance : 5

131
Tree	Context rhsContext = binaryComparator ;
Code	Context rhsContext = binaryComparator ;
Distance : 4

132
Tree	Context rhsContext = STRING_CONSTANT ; f
Code	Context rhsContext = STRING_CONSTANT ; f
Distance : 5

133
Tree	Context rhsContext = context . Context.OTHER () ;
Code	Context rhsContext = context . Context.OTHER () ;
Distance : 4

134
Tree	Context rhsContext = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES ;
Code	Context rhsContext = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES ;
Distance : 4

135
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; options
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; options
Distance : 5

136
Tree	Context rhsContext = context . Context.OTHER ( context , Context.OTHER ) ;
Code	Context rhsContext = context . Context.OTHER ( context , Context.OTHER ) ;
Distance : 5

137
Tree	Context context = new Context.OTHER ( Context , context ) ;
Code	Context context = new Context.OTHER ( Context , context ) ;
Distance : 5

138
Tree	Context Context [] = Context.OTHER . Context.OTHER () ; Preconditions
Code	Context Context [] = Context.OTHER . Context.OTHER () ; Preconditions
Distance : 7

139
Tree	Context rhsContext = STRING_CONSTANT ; ParamChecks
Code	Context rhsContext = STRING_CONSTANT ; ParamChecks
Distance : 5

140
Tree	Context rhsContext ; MathRuntimeException
Code	Context rhsContext ; MathRuntimeException
Distance : 6

141
Tree	Context rhsContext = TimeZoneNumberRule.INSTANCE_COLON ;
Code	Context rhsContext = TimeZoneNumberRule.INSTANCE_COLON ;
Distance : 4

142
Tree	Context context = Context.OTHER . Context.OTHER ( Context.OTHER , Context.OTHER ) ;
Code	Context context = Context.OTHER . Context.OTHER ( Context.OTHER , Context.OTHER ) ;
Distance : 7

143
Tree	Context Context [] = Context.OTHER . Context.OTHER () ; -
Code	Context Context [] = Context.OTHER . Context.OTHER () ; -
Distance : 7

144
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; source
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; source
Distance : 5

145
Tree	Context rhsContext = Context.OTHER ; toString
Code	Context rhsContext = Context.OTHER ; toString
Distance : 5

146
Tree	Context rhsContext = STRING_CONSTANT ; -
Code	Context rhsContext = STRING_CONSTANT ; -
Distance : 5

147
Tree	Context rhsContext = new Context.OTHER ( context , rhsContext ) ;
Code	Context rhsContext = new Context.OTHER ( context , rhsContext ) ;
Distance : 4

148
Tree	Context rhsContext ; {}
Code	Context rhsContext ; {}
Distance : 6

149
Tree	Context Context [] = Context.OTHER ; Class
Code	Context Context [] = Context.OTHER ; Class
Distance : 7

150
Tree	Context Context [] = Context.OTHER . Context.OTHER () ; ParamChecks
Code	Context Context [] = Context.OTHER . Context.OTHER () ; ParamChecks
Distance : 7

151
Tree	Context [] rhsContext = Context.OTHER ; f
Code	Context [] rhsContext = Context.OTHER ; f
Distance : 6

152
Tree	Context rhsContext = this . context ;
Code	Context rhsContext = this . context ;
Distance : 3

153
Tree	Context [] rhsContext = Context.OTHER ; ParamChecks
Code	Context [] rhsContext = Context.OTHER ; ParamChecks
Distance : 6

154
Tree	Context rhsContext = Context.OTHER ; {}
Code	Context rhsContext = Context.OTHER ; {}
Distance : 5

155
Tree	Context rhsContext ; -
Code	Context rhsContext ; -
Distance : 6

156
Tree	Context rhsContext = NUMBER_CONSTANT ; Test
Code	Context rhsContext = NUMBER_CONSTANT ; Test
Distance : 5

157
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; T
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; T
Distance : 5

158
Tree	Context rhsContext = new Context.OTHER () ; ParamChecks
Code	Context rhsContext = new Context.OTHER () ; ParamChecks
Distance : 5

159
Tree	Context Context [] = Context.OTHER . Context.OTHER () ; f
Code	Context Context [] = Context.OTHER . Context.OTHER () ; f
Distance : 7

160
Tree	Context rhsContext = new Context.OTHER ( Context , rhsContext ) ;
Code	Context rhsContext = new Context.OTHER ( Context , rhsContext ) ;
Distance : 5

161
Tree	Context rhsContext ; Test
Code	Context rhsContext ; Test
Distance : 6

162
Tree	Context [] rhsContext = Context.OTHER ; -
Code	Context [] rhsContext = Context.OTHER ; -
Distance : 6

163
Tree	Context [] rhsContext = Context.OTHER ; Preconditions
Code	Context [] rhsContext = Context.OTHER ; Preconditions
Distance : 6

164
Tree	Context Context [] = Context.OTHER ; Test
Code	Context Context [] = Context.OTHER ; Test
Distance : 7

165
Tree	Context rhsContext = Context.OTHER ;
Code	Context rhsContext = Context.OTHER ;
Distance : 4

166
Tree	Context rhsContext = context . Context.OTHER ( context ) ;
Code	Context rhsContext = context . Context.OTHER ( context ) ;
Distance : 3

167
Tree	Context rhsContext = super . Context.OTHER () ; -
Code	Context rhsContext = super . Context.OTHER () ; -
Distance : 5

168
Tree	Context Context [] = Context.OTHER . Context.OTHER () ; Class
Code	Context Context [] = Context.OTHER . Context.OTHER () ; Class
Distance : 7

169
Tree	Context context = STRING_CONSTANT ;
Code	Context context = STRING_CONSTANT ;
Distance : 5

170
Tree	Context rhsContext = new Context.OTHER () ; -
Code	Context rhsContext = new Context.OTHER () ; -
Distance : 5

171
Tree	synchronized Context rhsContext = Context.OTHER ;
Code	synchronized Context rhsContext = Context.OTHER ;
Distance : 5

172
Tree	Context rhsContext = Context.OTHER ? Context.OTHER : Context.OTHER ; source
Code	Context rhsContext = Context.OTHER ? Context.OTHER : Context.OTHER ; source
Distance : 6

173
Tree	Context [] rhsContext = Context.OTHER ; MathRuntimeException
Code	Context [] rhsContext = Context.OTHER ; MathRuntimeException
Distance : 6

174
Tree	Context context = Context.OTHER ( Context.OTHER ) ;
Code	Context context = Context.OTHER ( Context.OTHER ) ;
Distance : 3

175
Tree	Context Context [] = context ;
Code	Context Context [] = context ;
Distance : 5

176
Tree	Context rhsContext = this . rhsContext ; source
Code	Context rhsContext = this . rhsContext ; source
Distance : 5

177
Tree	Context rhsContext = super . Context.OTHER () ; f
Code	Context rhsContext = super . Context.OTHER () ; f
Distance : 5

178
Tree	Context rhsContext = Context.OTHER . Context.OTHER ( Context.OTHER , Context.OTHER ) ; wanted
Code	Context rhsContext = Context.OTHER . Context.OTHER ( Context.OTHER , Context.OTHER ) ; wanted
Distance : 7

179
Tree	Context rhsContext = Context.OTHER ; Preconditions
Code	Context rhsContext = Context.OTHER ; Preconditions
Distance : 5

180
Tree	Context rhsContext = Context.OTHER ( Context.OTHER ) ; options
Code	Context rhsContext = Context.OTHER ( Context.OTHER ) ; options
Distance : 3

181
Tree	Context rhsContext = new Context.OTHER () ; Preconditions
Code	Context rhsContext = new Context.OTHER () ; Preconditions
Distance : 5

182
Tree	Context rhsContext = this . rhsContext ; toString
Code	Context rhsContext = this . rhsContext ; toString
Distance : 5

183
Tree	Context context ;
Code	Context context ;
Distance : 5

184
Tree	Context context = true ;
Code	Context context = true ;
Distance : 5

185
Tree	Context context = new Context.OTHER ( context , rhsContext ) ;
Code	Context context = new Context.OTHER ( context , rhsContext ) ;
Distance : 5

186
Tree	Context context = context . Context.OTHER ( context ) ;
Code	Context context = context . Context.OTHER ( context ) ;
Distance : 4

187
Tree	Context rhsContext = context ;
Code	Context rhsContext = context ;
Distance : 3

188
Tree	Context context = Context.OTHER . Context.OTHER ( context , Context.OTHER ) ;
Code	Context context = Context.OTHER . Context.OTHER ( context , Context.OTHER ) ;
Distance : 6

189
Tree	Context context = context . Context.OTHER ( Context.OTHER , Context.OTHER ) ;
Code	Context context = context . Context.OTHER ( Context.OTHER , Context.OTHER ) ;
Distance : 7

190
Tree	Context context = new Context.OTHER ( context , context ) ;
Code	Context context = new Context.OTHER ( context , context ) ;
Distance : 5

191
Tree	Context context = context . Context.OTHER ( context , Context.OTHER ) ;
Code	Context context = context . Context.OTHER ( context , Context.OTHER ) ;
Distance : 6

192
Tree	Context rhsContext = Context.OTHER ; ParamChecks
Code	Context rhsContext = Context.OTHER ; ParamChecks
Distance : 5

193
Tree	Context rhsContext = Context.OTHER ; f
Code	Context rhsContext = Context.OTHER ; f
Distance : 5

194
Tree	Context rhsContext = Context.OTHER ; source
Code	Context rhsContext = Context.OTHER ; source
Distance : 5

195
Tree	Context rhsContext = Context.OTHER ; options
Code	Context rhsContext = Context.OTHER ; options
Distance : 5

196
Tree	Context [] rhsContext = Context.OTHER ; {}
Code	Context [] rhsContext = Context.OTHER ; {}
Distance : 6

197
Tree	Context rhsContext = this . rhsContext ; T
Code	Context rhsContext = this . rhsContext ; T
Distance : 5

198
Tree	Context Context [] = Context.OTHER ; Preconditions
Code	Context Context [] = Context.OTHER ; Preconditions
Distance : 7

199
Tree	Context rhsContext = Context.OTHER ( Context.OTHER ) ; p
Code	Context rhsContext = Context.OTHER ( Context.OTHER ) ; p
Distance : 3

========================================================================


========================================================================
Example Number: 12
Parent Code is: 
{ return topType ; }
-------------------------------------------------------------------------------
Child code is: 
{ return topType . isAllType () ? getNativeType ( ARRAY_TYPE ) : topType ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (800{val=topType}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (32 (800{val=topType}) (235{val=.}) (802{val=isAllType}) (216{val=()})) (233{val=?}) (32 (802{val=getNativeType}) (214{val=(}) (800{val=ARRAY_TYPE}) (215{val=)})) (226{val=:}) (800{val=topType})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/111/parent/src_com_google_javascript_jscomp_type_ClosureReverseAbstractInterpreter.java
-------------------------------------------------------------------------------
Edit Distance : 10
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return ( ARRAY_TYPE ) isAllType ( { ) ; }
Code	{ return ( ARRAY_TYPE ) isAllType ( { ) ; }
Distance : 9

1
Tree	{ return isAllType () ? null : topType ; }
Code	{ return isAllType () ? null : topType ; }
Distance : 6

2
Tree	{ return getNativeType () ? null : topType ; }
Code	{ return getNativeType () ? null : topType ; }
Distance : 7

3
Tree	{ return isAllType () ? null : ARRAY_TYPE ; }
Code	{ return isAllType () ? null : ARRAY_TYPE ; }
Distance : 7

4
Tree	{ return getNativeType () ? null : ARRAY_TYPE ; }
Code	{ return getNativeType () ? null : ARRAY_TYPE ; }
Distance : 8

5
Tree	{ return ( topType ) getNativeType ( { ) ; }
Code	{ return ( topType ) getNativeType ( { ) ; }
Distance : 8

6
Tree	private int getNativeType () { return topType ; }
Code	private int getNativeType () { return topType ; }
Distance : 11

7
Tree	{ return topType . isAllType ( topType ) ; }
Code	{ return topType . isAllType ( topType ) ; }
Distance : 6

8
Tree	{ return ARRAY_TYPE . isAllType ( ARRAY_TYPE ) ; }
Code	{ return ARRAY_TYPE . isAllType ( ARRAY_TYPE ) ; }
Distance : 6

9
Tree	{ return topType . isAllType ( ARRAY_TYPE ) ; }
Code	{ return topType . isAllType ( ARRAY_TYPE ) ; }
Distance : 5

10
Tree	private boolean isAllType () { return ARRAY_TYPE ; }
Code	private boolean isAllType () { return ARRAY_TYPE ; }
Distance : 10

11
Tree	private int isAllType () { return ARRAY_TYPE ; }
Code	private int isAllType () { return ARRAY_TYPE ; }
Distance : 10

12
Tree	{ return ( ARRAY_TYPE . getNativeType () ? null : topType ) ; }
Code	{ return ( ARRAY_TYPE . getNativeType () ? null : topType ) ; }
Distance : 8

13
Tree	{ return ( topType ) { . getNativeType () ; }
Code	{ return ( topType ) { . getNativeType () ; }
Distance : 10

14
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 11

15
Tree	private int isAllType () { return this . topType ; }
Code	private int isAllType () { return this . topType ; }
Distance : 10

16
Tree	{ return ARRAY_TYPE ; } Test
Code	{ return ARRAY_TYPE ; } Test
Distance : 11

17
Tree	{ return isAllType () ; } {}
Code	{ return isAllType () ; } {}
Distance : 10

18
Tree	{ return this . ARRAY_TYPE . getNativeType () ; }
Code	{ return this . ARRAY_TYPE . getNativeType () ; }
Distance : 9

19
Tree	{ return this . topType . getNativeType () ; }
Code	{ return this . topType . getNativeType () ; }
Distance : 9

20
Tree	{ return this . ARRAY_TYPE . isAllType () ; }
Code	{ return this . ARRAY_TYPE . isAllType () ; }
Distance : 9

21
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 11

22
Tree	{ return null ; }
Code	{ return null ; }
Distance : 11

23
Tree	{ return PRECISE_YEAR_WEEK ; }
Code	{ return PRECISE_YEAR_WEEK ; }
Distance : 11

24
Tree	{ return LazyHolder.INSTANCE ; }
Code	{ return LazyHolder.INSTANCE ; }
Distance : 11

25
Tree	{ return Ref.Type.ALIASING_GET ; }
Code	{ return Ref.Type.ALIASING_GET ; }
Distance : 11

26
Tree	{ return new multiplicand ( this ) ; }
Code	{ return new multiplicand ( this ) ; }
Distance : 9

27
Tree	{ return IncrementalCheckMode.OFF ; }
Code	{ return IncrementalCheckMode.OFF ; }
Distance : 11

28
Tree	{ return iShort ; }
Code	{ return iShort ; }
Distance : 11

29
Tree	{ return ArrayUtils.EMPTY_STRING_ARRAY ; }
Code	{ return ArrayUtils.EMPTY_STRING_ARRAY ; }
Distance : 11

30
Tree	{ return this . topType ; } Class
Code	{ return this . topType ; } Class
Distance : 10

31
Tree	{ return new ConstantFuture ( this ) ; }
Code	{ return new ConstantFuture ( this ) ; }
Distance : 9

32
Tree	{ return new ZERO ( ARRAY_TYPE ) ; }
Code	{ return new ZERO ( ARRAY_TYPE ) ; }
Distance : 8

33
Tree	{ return new HarmonicFunction ( ARRAY_TYPE ) ; }
Code	{ return new HarmonicFunction ( ARRAY_TYPE ) ; }
Distance : 8

34
Tree	{ return ! isAllType () ; }
Code	{ return ! isAllType () ; }
Distance : 9

35
Tree	{ return isAllType () ; }
Code	{ return isAllType () ; }
Distance : 9

36
Tree	{ return getNativeType () ; }
Code	{ return getNativeType () ; }
Distance : 10

37
Tree	{ return ! getNativeType () ; }
Code	{ return ! getNativeType () ; }
Distance : 10

38
Tree	isAllType () ;
Code	isAllType () ;
Distance : 12

39
Tree	getNativeType () ;
Code	getNativeType () ;
Distance : 13

40
Tree	{ return new RealVectorFormat ( this ) ; }
Code	{ return new RealVectorFormat ( this ) ; }
Distance : 9

41
Tree	{ return this . topType ; } MathRuntimeException
Code	{ return this . topType ; } MathRuntimeException
Distance : 10

42
Tree	{ return false ; }
Code	{ return false ; }
Distance : 11

43
Tree	{ return ( topType ) { . isAllType () ; } Math
Code	{ return ( topType ) { . isAllType () ; } Math
Distance : 11

44
Tree	{ return ARRAY_TYPE . isAllType ( topType ) ; } wanted
Code	{ return ARRAY_TYPE . isAllType ( topType ) ; } wanted
Distance : 8

45
Tree	{ return ARRAY_TYPE . isAllType ( topType ) ; } Math
Code	{ return ARRAY_TYPE . isAllType ( topType ) ; } Math
Distance : 8

46
Tree	{ return ! isAllType () ; } ParamChecks
Code	{ return ! isAllType () ; } ParamChecks
Distance : 10

47
Tree	{ return ! isAllType () ; } -
Code	{ return ! isAllType () ; } -
Distance : 10

48
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 12

49
Tree	{ return false ; } Test
Code	{ return false ; } Test
Distance : 12

50
Tree	{ return false ; } Preconditions
Code	{ return false ; } Preconditions
Distance : 12

51
Tree	{ return ! isAllType () ; } Test
Code	{ return ! isAllType () ; } Test
Distance : 10

52
Tree	{ return ! isAllType () ; } Class
Code	{ return ! isAllType () ; } Class
Distance : 10

53
Tree	{ return ! isAllType () ; } MathRuntimeException
Code	{ return ! isAllType () ; } MathRuntimeException
Distance : 10

54
Tree	{ return false ; } Class
Code	{ return false ; } Class
Distance : 12

55
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 12

56
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 12

57
Tree	isAllType () ; Preconditions
Code	isAllType () ; Preconditions
Distance : 12

58
Tree	isAllType () ; -
Code	isAllType () ; -
Distance : 12

59
Tree	{ return ! isAllType () ; } {}
Code	{ return ! isAllType () ; } {}
Distance : 10

60
Tree	{ return false ; } f
Code	{ return false ; } f
Distance : 12

61
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 12

62
Tree	isAllType () ; ParamChecks
Code	isAllType () ; ParamChecks
Distance : 12

63
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 12

64
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 12

65
Tree	isAllType () ; f
Code	isAllType () ; f
Distance : 12

66
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 12

67
Tree	{ return false ; } ParamChecks
Code	{ return false ; } ParamChecks
Distance : 12

68
Tree	isAllType () ; {}
Code	isAllType () ; {}
Distance : 12

69
Tree	isAllType () ; MathRuntimeException
Code	isAllType () ; MathRuntimeException
Distance : 12

70
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 12

71
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 12

72
Tree	{ return false ; } -
Code	{ return false ; } -
Distance : 12

73
Tree	{ return new PRECISE_YEAR_WEEK ( this ) ; }
Code	{ return new PRECISE_YEAR_WEEK ( this ) ; }
Distance : 9

74
Tree	{ return new DormandPrince54FieldStepInterpolator ( this ) ; }
Code	{ return new DormandPrince54FieldStepInterpolator ( this ) ; }
Distance : 9

75
Tree	{ return isAllType () ? super(); : ARRAY_TYPE ; }
Code	{ return isAllType () ? super(); : ARRAY_TYPE ; }
Distance : 7

76
Tree	{ return getNativeType () ? return; : topType ; }
Code	{ return getNativeType () ? return; : topType ; }
Distance : 7

77
Tree	{ return ( ARRAY_TYPE ) getNativeType ( ARRAY_TYPE ) ; }
Code	{ return ( ARRAY_TYPE ) getNativeType ( ARRAY_TYPE ) ; }
Distance : 7

78
Tree	{ return ( ARRAY_TYPE . isAllType () ? null : topType ) ; }
Code	{ return ( ARRAY_TYPE . isAllType () ? null : topType ) ; }
Distance : 7

79
Tree	private double isAllType () { return topType ; }
Code	private double isAllType () { return topType ; }
Distance : 10

80
Tree	{ return ( topType . getNativeType () ? null : ARRAY_TYPE ) ; }
Code	{ return ( topType . getNativeType () ? null : ARRAY_TYPE ) ; }
Distance : 6

81
Tree	{ return ( topType ) ARRAY_TYPE . isAllType () ; }
Code	{ return ( topType ) ARRAY_TYPE . isAllType () ; }
Distance : 10

82
Tree	{ return ( topType ) isAllType ( { ) ; }
Code	{ return ( topType ) isAllType ( { ) ; }
Distance : 8

83
Tree	{ return this . topType ; } Preconditions
Code	{ return this . topType ; } Preconditions
Distance : 10

84
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 11

85
Tree	{ return ( ARRAY_TYPE . isAllType () ? null : ARRAY_TYPE ) ; }
Code	{ return ( ARRAY_TYPE . isAllType () ? null : ARRAY_TYPE ) ; }
Distance : 6

86
Tree	{ return new PomComparator ( ARRAY_TYPE ) ; }
Code	{ return new PomComparator ( ARRAY_TYPE ) ; }
Distance : 8

87
Tree	{ return this . topType ; } -
Code	{ return this . topType ; } -
Distance : 10

88
Tree	{ return new InMemoryClassLoader ( ARRAY_TYPE ) ; }
Code	{ return new InMemoryClassLoader ( ARRAY_TYPE ) ; }
Distance : 8

89
Tree	{ return new PomComparator ( topType ) ; }
Code	{ return new PomComparator ( topType ) ; }
Distance : 9

90
Tree	{ return isAllType () ? return; : topType ; }
Code	{ return isAllType () ? return; : topType ; }
Distance : 6

91
Tree	{ return topType . isAllType () ? super(); : topType ; }
Code	{ return topType . isAllType () ? super(); : topType ; }
Distance : 4

92
Tree	{ return new InMemoryClassLoader ( topType ) ; }
Code	{ return new InMemoryClassLoader ( topType ) ; }
Distance : 9

93
Tree	private boolean getNativeType () { return this . topType ; }
Code	private boolean getNativeType () { return this . topType ; }
Distance : 11

94
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 11

95
Tree	{ return new multiplicand ( ARRAY_TYPE ) ; }
Code	{ return new multiplicand ( ARRAY_TYPE ) ; }
Distance : 8

96
Tree	{ return new multiplicand ( topType ) ; }
Code	{ return new multiplicand ( topType ) ; }
Distance : 9

97
Tree	{ return new InitialGuess ( this ) ; }
Code	{ return new InitialGuess ( this ) ; }
Distance : 9

98
Tree	{ return new ConstantFuture ( ARRAY_TYPE ) ; }
Code	{ return new ConstantFuture ( ARRAY_TYPE ) ; }
Distance : 8

99
Tree	{ return this . topType ; } ParamChecks
Code	{ return this . topType ; } ParamChecks
Distance : 10

100
Tree	{ return new RealVectorFormat ( ARRAY_TYPE ) ; }
Code	{ return new RealVectorFormat ( ARRAY_TYPE ) ; }
Distance : 8

101
Tree	{ return ARRAY_TYPE ; }
Code	{ return ARRAY_TYPE ; }
Distance : 10

102
Tree	private int getNativeType () { return this . topType ; }
Code	private int getNativeType () { return this . topType ; }
Distance : 11

103
Tree	{ return isAllType () ; } MathRuntimeException
Code	{ return isAllType () ; } MathRuntimeException
Distance : 10

104
Tree	{ return isAllType () ; } Class
Code	{ return isAllType () ; } Class
Distance : 10

105
Tree	{ return topType ; }
Code	{ return topType ; }
Distance : 10

106
Tree	{ return isAllType () ; } Test
Code	{ return isAllType () ; } Test
Distance : 10

107
Tree	{ return this . topType ; } Test
Code	{ return this . topType ; } Test
Distance : 10

108
Tree	{ return ARRAY_TYPE . isAllType () ? super(); : topType ; }
Code	{ return ARRAY_TYPE . isAllType () ? super(); : topType ; }
Distance : 5

109
Tree	{ return ( topType . getNativeType () ? super(); : topType ) ; }
Code	{ return ( topType . getNativeType () ? super(); : topType ) ; }
Distance : 7

110
Tree	private boolean isAllType () { return this . ARRAY_TYPE ; }
Code	private boolean isAllType () { return this . ARRAY_TYPE ; }
Distance : 11

111
Tree	private boolean getNativeType () { return this . ARRAY_TYPE ; }
Code	private boolean getNativeType () { return this . ARRAY_TYPE ; }
Distance : 12

112
Tree	{ return ( topType . isAllType () ? super(); : topType ) ; }
Code	{ return ( topType . isAllType () ? super(); : topType ) ; }
Distance : 6

113
Tree	{ return ARRAY_TYPE ; } ParamChecks
Code	{ return ARRAY_TYPE ; } ParamChecks
Distance : 11

114
Tree	{ return this . topType ; } f
Code	{ return this . topType ; } f
Distance : 10

115
Tree	{ return ( topType ) ARRAY_TYPE . getNativeType () ; }
Code	{ return ( topType ) ARRAY_TYPE . getNativeType () ; }
Distance : 10

116
Tree	{ return true ; }
Code	{ return true ; }
Distance : 11

117
Tree	private int getNativeType () { return this . ARRAY_TYPE ; }
Code	private int getNativeType () { return this . ARRAY_TYPE ; }
Distance : 12

118
Tree	{ return this . topType ; }
Code	{ return this . topType ; }
Distance : 9

119
Tree	{ return this . topType ; } {}
Code	{ return this . topType ; } {}
Distance : 10

120
Tree	{ return ( topType ) isAllType ( ARRAY_TYPE ) ; }
Code	{ return ( topType ) isAllType ( ARRAY_TYPE ) ; }
Distance : 7

121
Tree	private double isAllType () { return this . topType ; }
Code	private double isAllType () { return this . topType ; }
Distance : 10

122
Tree	private int isAllType () { return this . ARRAY_TYPE ; }
Code	private int isAllType () { return this . ARRAY_TYPE ; }
Distance : 11

123
Tree	{ return this . ARRAY_TYPE ; }
Code	{ return this . ARRAY_TYPE ; }
Distance : 9

124
Tree	{ return ( ARRAY_TYPE ) ARRAY_TYPE . getNativeType () ; }
Code	{ return ( ARRAY_TYPE ) ARRAY_TYPE . getNativeType () ; }
Distance : 10

125
Tree	private double getNativeType () { return this . topType ; }
Code	private double getNativeType () { return this . topType ; }
Distance : 11

126
Tree	{ return ARRAY_TYPE ; } Class
Code	{ return ARRAY_TYPE ; } Class
Distance : 11

127
Tree	{ return ARRAY_TYPE ; } MathRuntimeException
Code	{ return ARRAY_TYPE ; } MathRuntimeException
Distance : 11

128
Tree	{ return ARRAY_TYPE ; } {}
Code	{ return ARRAY_TYPE ; } {}
Distance : 11

129
Tree	{ return ( ARRAY_TYPE ) isAllType ( ARRAY_TYPE ) ; }
Code	{ return ( ARRAY_TYPE ) isAllType ( ARRAY_TYPE ) ; }
Distance : 8

130
Tree	{ return ARRAY_TYPE ; } f
Code	{ return ARRAY_TYPE ; } f
Distance : 11

131
Tree	{ return getNativeType () ? super(); : topType ; }
Code	{ return getNativeType () ? super(); : topType ; }
Distance : 7

132
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 12

133
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 11

134
Tree	{ return this . topType . isAllType () ; } source
Code	{ return this . topType . isAllType () ; } source
Distance : 10

135
Tree	{ return ARRAY_TYPE . getNativeType () ? null : ARRAY_TYPE ; }
Code	{ return ARRAY_TYPE . getNativeType () ? null : ARRAY_TYPE ; }
Distance : 7

136
Tree	{ return this . topType . isAllType () ; } toString
Code	{ return this . topType . isAllType () ; } toString
Distance : 10

137
Tree	{ return isAllType () ? super(); : topType ; }
Code	{ return isAllType () ? super(); : topType ; }
Distance : 6

138
Tree	{ return getNativeType () ? super(); : ARRAY_TYPE ; }
Code	{ return getNativeType () ? super(); : ARRAY_TYPE ; }
Distance : 8

139
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 11

140
Tree	{ return topType . getNativeType () ? null : ARRAY_TYPE ; }
Code	{ return topType . getNativeType () ? null : ARRAY_TYPE ; }
Distance : 6

141
Tree	{ return ( topType ) getNativeType ( { ) ; } Math
Code	{ return ( topType ) getNativeType ( { ) ; } Math
Distance : 9

142
Tree	isAllType () ; Test
Code	isAllType () ; Test
Distance : 12

143
Tree	{ return ARRAY_TYPE . getNativeType () ? null : topType ; }
Code	{ return ARRAY_TYPE . getNativeType () ? null : topType ; }
Distance : 6

144
Tree	{ return topType . getNativeType () ? null : topType ; }
Code	{ return topType . getNativeType () ? null : topType ; }
Distance : 5

145
Tree	private double getNativeType () { return topType ; }
Code	private double getNativeType () { return topType ; }
Distance : 11

146
Tree	{ return ( ARRAY_TYPE ) { . getNativeType () ; }
Code	{ return ( ARRAY_TYPE ) { . getNativeType () ; }
Distance : 10

147
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 12

148
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 12

149
Tree	isAllType () ; Class
Code	isAllType () ; Class
Distance : 12

150
Tree	{ return ( topType ) getNativeType ( { ) ; } wanted
Code	{ return ( topType ) getNativeType ( { ) ; } wanted
Distance : 9

151
Tree	{ return new PomComparator ( this ) ; }
Code	{ return new PomComparator ( this ) ; }
Distance : 9

152
Tree	{ return new ZERO ( this ) ; }
Code	{ return new ZERO ( this ) ; }
Distance : 9

153
Tree	{ return new HarmonicFunction ( this ) ; }
Code	{ return new HarmonicFunction ( this ) ; }
Distance : 9

154
Tree	{ return ( ARRAY_TYPE ) getNativeType ( { ) ; }
Code	{ return ( ARRAY_TYPE ) getNativeType ( { ) ; }
Distance : 8

155
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 12

156
Tree	{ return ! isAllType () ; } Preconditions
Code	{ return ! isAllType () ; } Preconditions
Distance : 10

157
Tree	{ return ( topType ) { . isAllType () ; }
Code	{ return ( topType ) { . isAllType () ; }
Distance : 10

158
Tree	{ return ARRAY_TYPE . isAllType () ? null : ARRAY_TYPE ; }
Code	{ return ARRAY_TYPE . isAllType () ? null : ARRAY_TYPE ; }
Distance : 6

159
Tree	{ return topType . isAllType () ? null : ARRAY_TYPE ; }
Code	{ return topType . isAllType () ? null : ARRAY_TYPE ; }
Distance : 5

160
Tree	{ return ARRAY_TYPE . getNativeType ( topType ) ; }
Code	{ return ARRAY_TYPE . getNativeType ( topType ) ; }
Distance : 7

161
Tree	{ return topType . getNativeType ( topType ) ; }
Code	{ return topType . getNativeType ( topType ) ; }
Distance : 6

162
Tree	{ return ( topType . isAllType () ? null : ARRAY_TYPE ) ; }
Code	{ return ( topType . isAllType () ? null : ARRAY_TYPE ) ; }
Distance : 5

163
Tree	{ return ARRAY_TYPE . getNativeType ( ARRAY_TYPE ) ; }
Code	{ return ARRAY_TYPE . getNativeType ( ARRAY_TYPE ) ; }
Distance : 6

164
Tree	{ return new InMemoryClassLoader ( this ) ; }
Code	{ return new InMemoryClassLoader ( this ) ; }
Distance : 9

165
Tree	{ return topType . getNativeType ( ARRAY_TYPE ) ; }
Code	{ return topType . getNativeType ( ARRAY_TYPE ) ; }
Distance : 5

166
Tree	{ return ( ARRAY_TYPE ) ARRAY_TYPE . isAllType () ; }
Code	{ return ( ARRAY_TYPE ) ARRAY_TYPE . isAllType () ; }
Distance : 10

167
Tree	{ return ( ARRAY_TYPE . getNativeType () ? null : ARRAY_TYPE ) ; }
Code	{ return ( ARRAY_TYPE . getNativeType () ? null : ARRAY_TYPE ) ; }
Distance : 7

168
Tree	private boolean isAllType () { return this . topType ; }
Code	private boolean isAllType () { return this . topType ; }
Distance : 10

169
Tree	{ return multiplicand ; }
Code	{ return multiplicand ; }
Distance : 11

170
Tree	{ return com.google.protobuf.GeneratedMessageV3 ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 ; }
Distance : 11

171
Tree	{ return setShapeInternal ; }
Code	{ return setShapeInternal ; }
Distance : 11

172
Tree	{ return false ; } MathRuntimeException
Code	{ return false ; } MathRuntimeException
Distance : 12

173
Tree	{ return false ; } {}
Code	{ return false ; } {}
Distance : 12

174
Tree	private boolean getNativeType () { return ARRAY_TYPE ; }
Code	private boolean getNativeType () { return ARRAY_TYPE ; }
Distance : 11

175
Tree	{ return ! isAllType () ; } f
Code	{ return ! isAllType () ; } f
Distance : 10

176
Tree	{ return ( topType ) { . isAllType () ; } wanted
Code	{ return ( topType ) { . isAllType () ; } wanted
Distance : 11

177
Tree	{ return ( topType . getNativeType () ? null : topType ) ; }
Code	{ return ( topType . getNativeType () ? null : topType ) ; }
Distance : 7

178
Tree	private boolean isAllType () { return topType ; }
Code	private boolean isAllType () { return topType ; }
Distance : 10

179
Tree	private int isAllType () { return topType ; }
Code	private int isAllType () { return topType ; }
Distance : 10

180
Tree	{ return ARRAY_TYPE . isAllType () ? null : topType ; }
Code	{ return ARRAY_TYPE . isAllType () ? null : topType ; }
Distance : 5

181
Tree	{ return ( ARRAY_TYPE ) { . isAllType () ; }
Code	{ return ( ARRAY_TYPE ) { . isAllType () ; }
Distance : 10

182
Tree	{ return topType . isAllType () ? null : topType ; }
Code	{ return topType . isAllType () ? null : topType ; }
Distance : 4

183
Tree	{ return ( topType . isAllType () ? null : topType ) ; }
Code	{ return ( topType . isAllType () ? null : topType ) ; }
Distance : 6

184
Tree	{ return isAllType () ; } Preconditions
Code	{ return isAllType () ; } Preconditions
Distance : 10

185
Tree	{ return isAllType () ; } -
Code	{ return isAllType () ; } -
Distance : 10

186
Tree	{ return ARRAY_TYPE ; } -
Code	{ return ARRAY_TYPE ; } -
Distance : 11

187
Tree	{ return ( topType ) getNativeType ( ARRAY_TYPE ) ; }
Code	{ return ( topType ) getNativeType ( ARRAY_TYPE ) ; }
Distance : 7

188
Tree	{ return this . topType . isAllType () ; } &&
Code	{ return this . topType . isAllType () ; } &&
Distance : 10

189
Tree	{ return isAllType () ; } ParamChecks
Code	{ return isAllType () ; } ParamChecks
Distance : 10

190
Tree	{ return this . topType . isAllType () ; } options
Code	{ return this . topType . isAllType () ; } options
Distance : 10

191
Tree	{ return this . topType . isAllType () ; } p
Code	{ return this . topType . isAllType () ; } p
Distance : 10

192
Tree	{ return isAllType () ; } f
Code	{ return isAllType () ; } f
Distance : 10

193
Tree	{ return this . topType . isAllType () ; } T
Code	{ return this . topType . isAllType () ; } T
Distance : 10

194
Tree	private boolean getNativeType () { return topType ; }
Code	private boolean getNativeType () { return topType ; }
Distance : 11

195
Tree	{ return ARRAY_TYPE . isAllType ( topType ) ; }
Code	{ return ARRAY_TYPE . isAllType ( topType ) ; }
Distance : 7

196
Tree	{ return ARRAY_TYPE ; } Preconditions
Code	{ return ARRAY_TYPE ; } Preconditions
Distance : 11

197
Tree	{ return ZERO ; }
Code	{ return ZERO ; }
Distance : 11

198
Tree	{ return this . topType . isAllType () ; }
Code	{ return this . topType . isAllType () ; }
Distance : 9

199
Tree	private int getNativeType () { return ARRAY_TYPE ; }
Code	private int getNativeType () { return ARRAY_TYPE ; }
Distance : 11

========================================================================


========================================================================
Example Number: 13
Parent Code is: 
{ if ( assignLhsChild != null ) { return true ; } return false ; }
-------------------------------------------------------------------------------
Child code is: 
{ if ( assignLhsChild != null ) { return true ; } return parent != null && NodeUtil . isGet ( parent ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=assignLhsChild}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (9{val=true}) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (9{val=false}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=assignLhsChild}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (9{val=true}) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (27 (27 (800{val=parent}) (242{val=!=}) (500{val=null})) (249{val=&&}) (32 (800{val=NodeUtil}) (235{val=.}) (802{val=isGet}) (214{val=(}) (800{val=parent}) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/100/parent/src_com_google_javascript_jscomp_CheckGlobalThis.java
-------------------------------------------------------------------------------
Edit Distance : 10
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild , false ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild , false ) ) { return false ; } return false ; }
Distance : 19

1
Tree	{ if ( ! isGet ( parent , parent , false ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent , parent , false ) ) { return true ; } return false ; }
Distance : 19

2
Tree	{ if ( ! this . isGet ( parent ) ) { return true ; } return false ; }
Code	{ if ( ! this . isGet ( parent ) ) { return true ; } return false ; }
Distance : 17

3
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } false }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } false }
Distance : 18

4
Tree	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } return false ; }
Distance : 16

5
Tree	{ if ( assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 15

6
Tree	{ if ( ! this . isGet ( parent ) ) { return false ; } return false ; }
Code	{ if ( ! this . isGet ( parent ) ) { return false ; } return false ; }
Distance : 18

7
Tree	{ if ( assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Distance : 16

8
Tree	{ if ( ! parent . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 17

9
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } false }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } false }
Distance : 19

10
Tree	{ if ( assignLhsChild != null ) { return false ; } return parent . isGet ( assignLhsChild ) ; }
Code	{ if ( assignLhsChild != null ) { return false ; } return parent . isGet ( assignLhsChild ) ; }
Distance : 6

11
Tree	{ if ( NodeUtil != null ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( NodeUtil != null ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 7

12
Tree	{ if ( ! assignLhsChild ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( ! assignLhsChild ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 9

13
Tree	{ if ( ! NodeUtil ) { return false ; } return false ; }
Code	{ if ( ! NodeUtil ) { return false ; } return false ; }
Distance : 14

14
Tree	{ if ( ! parent ) { return false ; } return false ; }
Code	{ if ( ! parent ) { return false ; } return false ; }
Distance : 14

15
Tree	{ if ( ! isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 15

16
Tree	{ if ( parent != null ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( parent != null ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 7

17
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; }
Distance : 17

18
Tree	{ if ( ! isGet ( this , assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( this , assignLhsChild ) ) { return true ; } return false ; }
Distance : 17

19
Tree	{ if ( ! isGet ( assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild ) ) { return false ; } return false ; }
Distance : 16

20
Tree	{ if ( ! isGet ( this , assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( this , assignLhsChild ) ) { return false ; } return false ; }
Distance : 18

21
Tree	{ if ( assignLhsChild != return; ) { return true ; } return false ; }
Code	{ if ( assignLhsChild != return; ) { return true ; } return false ; }
Distance : 11

22
Tree	{ if ( ! assignLhsChild ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 7

23
Tree	{ if ( ! parent ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( ! parent ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 8

24
Tree	{ if ( ! assignLhsChild ) { return true ; } return false . isGet ( assignLhsChild ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return false . isGet ( assignLhsChild ) ; }
Distance : 9

25
Tree	{ if ( ! NodeUtil ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Distance : 8

26
Tree	{ if ( ! assignLhsChild ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 8

27
Tree	{ if ( ! this . isGet ( parent ) ) { return false ; } return true ; }
Code	{ if ( ! this . isGet ( parent ) ) { return false ; } return true ; }
Distance : 18

28
Tree	{ if ( ! NodeUtil ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( ! NodeUtil ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 9

29
Tree	{ if ( assignLhsChild != null ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( assignLhsChild != null ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 6

30
Tree	{ if ( assignLhsChild != null ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Distance : 5

31
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return false ; }
Distance : 16

32
Tree	{ if ( NodeUtil != null ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 6

33
Tree	{ if ( ! NodeUtil ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 7

34
Tree	{ if ( assignLhsChild != super(); ) { return true ; } return false ; }
Code	{ if ( assignLhsChild != super(); ) { return true ; } return false ; }
Distance : 11

35
Tree	{ if ( ! NodeUtil ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 8

36
Tree	{ if ( parent != null ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( parent != null ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 6

37
Tree	{ if ( assignLhsChild != null ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 4

38
Tree	{ if ( ! this . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! this . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Distance : 18

39
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return true ; } return false ; }
Distance : 16

40
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 16

41
Tree	{ if ( ! assignLhsChild ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Distance : 8

42
Tree	{ if ( ! isGet ( parent , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent , parent ) ) { return true ; } return false ; }
Distance : 17

43
Tree	{ if ( ! isGet ( NodeUtil ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil ) ) { return true ; } return false ; }
Distance : 15

44
Tree	{ if ( assignLhsChild != null ) { return true ; } return false . isGet ( assignLhsChild ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return false . isGet ( assignLhsChild ) ; }
Distance : 6

45
Tree	{ if ( ! isGet ( assignLhsChild , parent , false ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , false ) ) { return true ; } return false ; }
Distance : 18

46
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Distance : 17

47
Tree	{ if ( ! isGet ( NodeUtil , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , parent ) ) { return false ; } return false ; }
Distance : 18

48
Tree	{ if ( ! isGet ( NodeUtil ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil ) ) { return false ; } return false ; }
Distance : 16

49
Tree	{ if ( ! isGet ( this , NodeUtil ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( this , NodeUtil ) ) { return true ; } return false ; }
Distance : 17

50
Tree	{ if ( ! isGet ( parent , NodeUtil , false ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( parent , NodeUtil , false ) ) { return false ; } return false ; }
Distance : 20

51
Tree	{ if ( ! NodeUtil . isGet ( assignLhsChild ) ) { return true ; } false }
Code	{ if ( ! NodeUtil . isGet ( assignLhsChild ) ) { return true ; } false }
Distance : 19

52
Tree	{ if ( ! NodeUtil . isGet ( parent ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( parent ) ) { return true ; } return false ; }
Distance : 17

53
Tree	{ if ( ! parent ) { return true ; } return true ; }
Code	{ if ( ! parent ) { return true ; } return true ; }
Distance : 13

54
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } assertFalse }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } assertFalse }
Distance : 18

55
Tree	{ if ( ! this . isGet ( NodeUtil ) ) { return true ; } return false ; }
Code	{ if ( ! this . isGet ( NodeUtil ) ) { return true ; } return false ; }
Distance : 17

56
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 12

57
Tree	{ if ( ! NodeUtil . isGet ( assignLhsChild ) ) { return false ; } false }
Code	{ if ( ! NodeUtil . isGet ( assignLhsChild ) ) { return false ; } false }
Distance : 20

58
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 11

59
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return parent . isGet ( assignLhsChild ) ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return parent . isGet ( assignLhsChild ) ; }
Distance : 12

60
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 12

61
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent ) ) { return true ; } return false ; }
Distance : 18

62
Tree	{ if ( ! isGet ( parent , parent ) ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( ! isGet ( parent , parent ) ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 13

63
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 9

64
Tree	{ if ( ! NodeUtil . isGet ( parent ) ) { return false ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( parent ) ) { return false ; } return false ; }
Distance : 18

65
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Distance : 11

66
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false . isGet ( assignLhsChild ) ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false . isGet ( assignLhsChild ) ; }
Distance : 13

67
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Distance : 8

68
Tree	{ if ( ! isGet ( this , NodeUtil ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( this , NodeUtil ) ) { return false ; } return false ; }
Distance : 18

69
Tree	{ if ( NodeUtil . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( NodeUtil . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 16

70
Tree	{ if ( ! isGet ( assignLhsChild , null ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , null ) ) { return false ; } return false ; }
Distance : 16

71
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 11

72
Tree	{ if ( ! isGet ( NodeUtil , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , parent ) ) { return true ; } return false ; }
Distance : 17

73
Tree	{ if ( ! isGet ( parent , NodeUtil ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( parent , NodeUtil ) ) { return false ; } return false ; }
Distance : 18

74
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; }
Distance : 10

75
Tree	{ if ( assignLhsChild != continue; ) { return true ; } return false ; }
Code	{ if ( assignLhsChild != continue; ) { return true ; } return false ; }
Distance : 11

76
Tree	{ if ( assignLhsChild != null ) { return false ; } return false ; }
Code	{ if ( assignLhsChild != null ) { return false ; } return false ; }
Distance : 11

77
Tree	{ if ( assignLhsChild != return; ) { return false ; } return false ; }
Code	{ if ( assignLhsChild != return; ) { return false ; } return false ; }
Distance : 12

78
Tree	{ if ( ! assignLhsChild . isGet ( parent ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( parent ) ) { return false ; } return false ; }
Distance : 17

79
Tree	{ if ( ! NodeUtil ) { return true ; } return true ; }
Code	{ if ( ! NodeUtil ) { return true ; } return true ; }
Distance : 13

80
Tree	{ if ( ! isGet ( NodeUtil , parent , false ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , parent , false ) ) { return false ; } return false ; }
Distance : 20

81
Tree	{ if ( ! parent . isGet ( != ) ) { return false ; } return false ; }
Code	{ if ( ! parent . isGet ( != ) ) { return false ; } return false ; }
Distance : 17

82
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild , false ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild , false ) ) { return true ; } return false ; }
Distance : 18

83
Tree	{ if ( ! isGet ( NodeUtil , parent , false ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , parent , false ) ) { return true ; } return false ; }
Distance : 19

84
Tree	{ if ( ! isGet ( assignLhsChild , null , false ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , null , false ) ) { return false ; } return false ; }
Distance : 18

85
Tree	{ if ( ! isGet ( parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent ) ) { return true ; } return false ; }
Distance : 15

86
Tree	{ if ( ! assignLhsChild ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return false ; }
Distance : 13

87
Tree	{ if ( NodeUtil != null ) { return true ; } return false ; }
Code	{ if ( NodeUtil != null ) { return true ; } return false ; }
Distance : 11

88
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return false ; } return false ; }
Distance : 17

89
Tree	{ if ( ! assignLhsChild . isGet ( parent , parent ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( parent , parent ) ) { return true ; } return false ; }
Distance : 18

90
Tree	{ if ( ! parent . isGet ( assignLhsChild , parent ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( assignLhsChild , parent ) ) { return true ; } return false ; }
Distance : 18

91
Tree	{ if ( ! NodeUtil . isGet ( assignLhsChild , false ) ) { return false ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( assignLhsChild , false ) ) { return false ; } return false ; }
Distance : 19

92
Tree	{ if ( ! this . isGet ( NodeUtil ) ) { return false ; } return false ; }
Code	{ if ( ! this . isGet ( NodeUtil ) ) { return false ; } return false ; }
Distance : 18

93
Tree	{ if ( ! isGet ( parent ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( parent ) ) { return true ; } return true ; }
Distance : 15

94
Tree	{ if ( ! isGet ( this , parent ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( this , parent ) ) { return true ; } return true ; }
Distance : 17

95
Tree	{ if ( parent . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( parent . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 16

96
Tree	{ if ( ! isGet ( NodeUtil , parent , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , parent , parent ) ) { return true ; } return false ; }
Distance : 19

97
Tree	{ if ( ! assignLhsChild ) { return false ; } return true ; }
Code	{ if ( ! assignLhsChild ) { return false ; } return true ; }
Distance : 14

98
Tree	{ if ( ! isGet ( parent ) ) { return false ; } return true ; }
Code	{ if ( ! isGet ( parent ) ) { return false ; } return true ; }
Distance : 16

99
Tree	{ if ( ! isGet ( assignLhsChild ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild ) ) { return true ; } return true ; }
Distance : 15

100
Tree	{ if ( ! isGet ( this , parent ) ) { return false ; } return true ; }
Code	{ if ( ! isGet ( this , parent ) ) { return false ; } return true ; }
Distance : 18

101
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent ) ) { return false ; } return false ; }
Distance : 19

102
Tree	{ if ( ! isGet ( this , assignLhsChild ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( this , assignLhsChild ) ) { return true ; } return true ; }
Distance : 17

103
Tree	{ if ( ! this . isGet ( assignLhsChild ) ) { return true ; } return true ; }
Code	{ if ( ! this . isGet ( assignLhsChild ) ) { return true ; } return true ; }
Distance : 17

104
Tree	{ if ( ! this . isGet ( assignLhsChild ) ) { return false ; } return true ; }
Code	{ if ( ! this . isGet ( assignLhsChild ) ) { return false ; } return true ; }
Distance : 18

105
Tree	{ if ( ! isGet ( this , assignLhsChild ) ) { return false ; } return true ; }
Code	{ if ( ! isGet ( this , assignLhsChild ) ) { return false ; } return true ; }
Distance : 18

106
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } assertFalse }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } assertFalse }
Distance : 19

107
Tree	{ if ( ! NodeUtil . isGet ( assignLhsChild , false ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( assignLhsChild , false ) ) { return true ; } return false ; }
Distance : 18

108
Tree	{ if ( ! parent . isGet ( assignLhsChild , false ) ) { return false ; } return false ; }
Code	{ if ( ! parent . isGet ( assignLhsChild , false ) ) { return false ; } return false ; }
Distance : 19

109
Tree	{ if ( ! isGet ( assignLhsChild ) ) { return false ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild ) ) { return false ; } return true ; }
Distance : 16

110
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } FunctionEvaluationException }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } FunctionEvaluationException }
Distance : 18

111
Tree	{ if ( ! assignLhsChild . isGet ( parent , false ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( parent , false ) ) { return false ; } return false ; }
Distance : 19

112
Tree	{ if ( assignLhsChild . isGet ( parent ) ) { return true ; } return false ; }
Code	{ if ( assignLhsChild . isGet ( parent ) ) { return true ; } return false ; }
Distance : 15

113
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } super }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } super }
Distance : 18

114
Tree	{ if ( assignLhsChild . isGet ( parent ) ) { return false ; } return false ; }
Code	{ if ( assignLhsChild . isGet ( parent ) ) { return false ; } return false ; }
Distance : 16

115
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild , NodeUtil ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild , NodeUtil ) ) { return false ; } return false ; }
Distance : 19

116
Tree	{ if ( ! NodeUtil . isGet ( assignLhsChild , parent ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( assignLhsChild , parent ) ) { return true ; } return false ; }
Distance : 18

117
Tree	{ if ( ! assignLhsChild . isGet ( parent , false ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( parent , false ) ) { return true ; } return false ; }
Distance : 18

118
Tree	{ if ( NodeUtil . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( NodeUtil . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Distance : 17

119
Tree	{ if ( ! assignLhsChild ) { return true ; } return true ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return true ; }
Distance : 13

120
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } else }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } else }
Distance : 18

121
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent , NodeUtil . isGet ( false ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent , NodeUtil . isGet ( false ) ) ; }
Distance : 9

122
Tree	{ if ( assignLhsChild != null ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 5

123
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil , parent ) ) { return false ; } return false ; }
Distance : 19

124
Tree	{ if ( ! NodeUtil . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 17

125
Tree	{ if ( ! isGet ( parent , parent , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( parent , parent , parent ) ) { return false ; } return false ; }
Distance : 19

126
Tree	{ if ( ! isGet ( parent , parent ) ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( ! isGet ( parent , parent ) ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 12

127
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( assignLhsChild , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( assignLhsChild , NodeUtil . isGet ( parent ) ) ; }
Distance : 5

128
Tree	{ if ( ! parent . isGet ( assignLhsChild , false ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( assignLhsChild , false ) ) { return true ; } return false ; }
Distance : 18

129
Tree	{ if ( ! NodeUtil . isGet ( parent , false ) ) { return false ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( parent , false ) ) { return false ; } return false ; }
Distance : 20

130
Tree	{ if ( ! this . isGet ( parent ) ) { return true ; } return true ; }
Code	{ if ( ! this . isGet ( parent ) ) { return true ; } return true ; }
Distance : 17

131
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return NodeUtil . isGet ( parent ) ; }
Distance : 11

132
Tree	{ if ( ! assignLhsChild . isGet ( parent , parent ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( parent , parent ) ) { return false ; } return false ; }
Distance : 19

133
Tree	{ if ( ! isGet ( parent , parent , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent , parent , parent ) ) { return true ; } return false ; }
Distance : 19

134
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild , parent ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild , parent ) ) { return true ; } return false ; }
Distance : 18

135
Tree	{ if ( ! parent . isGet ( assignLhsChild , parent ) ) { return false ; } return false ; }
Code	{ if ( ! parent . isGet ( assignLhsChild , parent ) ) { return false ; } return false ; }
Distance : 19

136
Tree	{ if ( ! assignLhsChild ) { return false ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! assignLhsChild ) { return false ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 10

137
Tree	{ if ( ! assignLhsChild . isGet ( NodeUtil , false ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( NodeUtil , false ) ) { return false ; } return false ; }
Distance : 19

138
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( NodeUtil , parent . isGet ( parent ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( NodeUtil , parent . isGet ( parent ) ) ; }
Distance : 9

139
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( NodeUtil , parent . isGet ( parent ) ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( NodeUtil , parent . isGet ( parent ) ) ; }
Distance : 9

140
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild , parent ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild , parent ) ) { return false ; } return false ; }
Distance : 19

141
Tree	{ if ( assignLhsChild != null ) { return false ; } return isGet ( assignLhsChild , parent . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return false ; } return isGet ( assignLhsChild , parent . isGet ( parent ) ) ; }
Distance : 7

142
Tree	{ if ( parent . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( parent . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Distance : 17

143
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil , false ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil , false ) ) { return false ; } return false ; }
Distance : 19

144
Tree	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } false }
Code	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } false }
Distance : 18

145
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 6

146
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil , parent ) ) { return true ; } return false ; }
Distance : 18

147
Tree	{ if ( ! NodeUtil . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Distance : 18

148
Tree	{ if ( assignLhsChild . isGet ( NodeUtil ) ) { return true ; } return false ; }
Code	{ if ( assignLhsChild . isGet ( NodeUtil ) ) { return true ; } return false ; }
Distance : 15

149
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild , NodeUtil ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild , NodeUtil ) ) { return true ; } return false ; }
Distance : 18

150
Tree	{ if ( ! isGet ( assignLhsChild , parent , ; ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , ; ) ) { return false ; } return false ; }
Distance : 19

151
Tree	{ if ( ! isGet ( NodeUtil , parent , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , parent , parent ) ) { return false ; } return false ; }
Distance : 19

152
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Distance : 5

153
Tree	{ if ( NodeUtil . isGet ( parent ) ) { return true ; } return false ; }
Code	{ if ( NodeUtil . isGet ( parent ) ) { return true ; } return false ; }
Distance : 16

154
Tree	{ if ( assignLhsChild != null ) { return false ; } return isGet ( assignLhsChild , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return false ; } return isGet ( assignLhsChild , NodeUtil . isGet ( parent ) ) ; }
Distance : 6

155
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 9

156
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Distance : 9

157
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( isGet () , parent . isGet ( parent ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( isGet () , parent . isGet ( parent ) ) ; }
Distance : 10

158
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Distance : 9

159
Tree	{ if ( parent != null ) { return true ; } return false ; }
Code	{ if ( parent != null ) { return true ; } return false ; }
Distance : 11

160
Tree	{ if ( ! NodeUtil ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil ) { return true ; } return false ; }
Distance : 13

161
Tree	{ if ( ! isGet ( parent , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( parent , parent ) ) { return false ; } return false ; }
Distance : 18

162
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( false ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( false ) ) ; }
Distance : 10

163
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent , NodeUtil . isGet ( assignLhsChild ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent , NodeUtil . isGet ( assignLhsChild ) ) ) { return true ; } return false ; }
Distance : 23

164
Tree	{ if ( ! NodeUtil . isGet ( assignLhsChild , parent ) ) { return false ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( assignLhsChild , parent ) ) { return false ; } return false ; }
Distance : 19

165
Tree	{ if ( ! isGet ( parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( parent ) ) { return false ; } return false ; }
Distance : 16

166
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( isGet () , parent . isGet ( parent ) ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( isGet () , parent . isGet ( parent ) ) ; }
Distance : 10

167
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent , } . isGet ( } ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent , } . isGet ( } ) ) ) { return true ; } return false ; }
Distance : 23

168
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( isGet () , parent . isGet ( false ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( isGet () , parent . isGet ( false ) ) ; }
Distance : 11

169
Tree	{ if ( ! isGet ( parent , parent , false ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( parent , parent , false ) ) { return false ; } return false ; }
Distance : 20

170
Tree	{ if ( NodeUtil != null ) { return false ; } return false ; }
Code	{ if ( NodeUtil != null ) { return false ; } return false ; }
Distance : 12

171
Tree	{ if ( ! isGet ( assignLhsChild , parent , false ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , false ) ) { return true ; } return false ; }
Distance : 18

172
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil , false ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil , false ) ) { return true ; } return false ; }
Distance : 18

173
Tree	{ if ( parent != null ) { return false ; } return false ; }
Code	{ if ( parent != null ) { return false ; } return false ; }
Distance : 12

174
Tree	{ if ( ! isGet ( this , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( this , parent ) ) { return true ; } return false ; }
Distance : 17

175
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( NodeUtil ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( NodeUtil ) ) ; }
Distance : 10

176
Tree	{ if ( ! assignLhsChild ) { return false ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! assignLhsChild ) { return false ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Distance : 10

177
Tree	{ if ( ! this . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! this . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 17

178
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Distance : 22

179
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent , NodeUtil . isGet ( assignLhsChild ) ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent , NodeUtil . isGet ( assignLhsChild ) ) ) { return false ; } return false ; }
Distance : 23

180
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent , false . isGet ( assignLhsChild ) ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent , false . isGet ( assignLhsChild ) ) ) { return false ; } return false ; }
Distance : 23

181
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( isGet () , parent . isGet ( NodeUtil ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( isGet () , parent . isGet ( NodeUtil ) ) ; }
Distance : 11

182
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( NodeUtil , parent . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( NodeUtil , parent . isGet ( parent ) ) ; }
Distance : 6

183
Tree	{ if ( ! assignLhsChild ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild ) { return false ; } return false ; }
Distance : 14

184
Tree	{ if ( ! isGet ( assignLhsChild , parent , false ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , false ) ) { return false ; } return false ; }
Distance : 19

185
Tree	{ if ( ! parent ) { return true ; } return false ; }
Code	{ if ( ! parent ) { return true ; } return false ; }
Distance : 13

186
Tree	{ if ( ! assignLhsChild ) { return false ; } return isGet ( isGet () , parent . isGet ( parent ) ) ; }
Code	{ if ( ! assignLhsChild ) { return false ; } return isGet ( isGet () , parent . isGet ( parent ) ) ; }
Distance : 11

187
Tree	{ if ( ! isGet ( this , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( this , parent ) ) { return false ; } return false ; }
Distance : 18

188
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( NodeUtil , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( NodeUtil , NodeUtil . isGet ( parent ) ) ; }
Distance : 8

189
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent , parent . isGet ( assignLhsChild ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent , parent . isGet ( assignLhsChild ) ) ) { return true ; } return false ; }
Distance : 23

190
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( assignLhsChild , parent . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( assignLhsChild , parent . isGet ( parent ) ) ; }
Distance : 6

191
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Distance : 8

192
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent , parent . isGet ( parent ) ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent , parent . isGet ( parent ) ) ) { return false ; } return false ; }
Distance : 22

193
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil , parent , parent . isGet ( assignLhsChild ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil , parent , parent . isGet ( assignLhsChild ) ) ) { return true ; } return false ; }
Distance : 23

194
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent , parent . isGet ( false ) ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent , parent . isGet ( false ) ) ) { return false ; } return false ; }
Distance : 23

195
Tree	{ if ( ! isGet ( parent , parent , parent , parent . isGet ( assignLhsChild ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent , parent , parent , parent . isGet ( assignLhsChild ) ) ) { return true ; } return false ; }
Distance : 24

196
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( assignLhsChild , parent . isGet ( parent ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( assignLhsChild , parent . isGet ( parent ) ) ; }
Distance : 7

197
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent , parent . isGet ( false ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent , parent . isGet ( false ) ) ; }
Distance : 10

198
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( assignLhsChild , parent . isGet ( false ) ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( assignLhsChild , parent . isGet ( false ) ) ; }
Distance : 7

199
Tree	{ if ( assignLhsChild != null ) { return false ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return false ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 7

========================================================================


========================================================================
Example Number: 14
Parent Code is: 
int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Child code is: 
int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=indexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=lastIndexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/93/parent/src_com_google_javascript_jscomp_ProcessClosurePrimitives.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

1
Tree	private int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	private int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

2
Tree	int indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT , false ) ;
Code	int indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT , false ) ;
Distance : 3

3
Tree	char indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	char indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

4
Tree	int indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	int indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 4

5
Tree	int namespace ;
Code	int namespace ;
Distance : 7

6
Tree	void indexOfDot = NUMBER_CONSTANT ;
Code	void indexOfDot = NUMBER_CONSTANT ;
Distance : 7

7
Tree	short indexOfDot ;
Code	short indexOfDot ;
Distance : 8

8
Tree	final double indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

9
Tree	final int indexOfDot = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int indexOfDot = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

10
Tree	static int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	static int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

11
Tree	long indexOfDot = continue; ;
Code	long indexOfDot = continue; ;
Distance : 7

12
Tree	byte indexOfDot ;
Code	byte indexOfDot ;
Distance : 8

13
Tree	final int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

14
Tree	protected int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	protected int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

15
Tree	long indexOfDot = NUMBER_CONSTANT ;
Code	long indexOfDot = NUMBER_CONSTANT ;
Distance : 7

16
Tree	void indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	void indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

17
Tree	private int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	private int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

18
Tree	int indexOfDot = continue; ;
Code	int indexOfDot = continue; ;
Distance : 6

19
Tree	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

20
Tree	long indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	long indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

21
Tree	char indexOfDot = NUMBER_CONSTANT ;
Code	char indexOfDot = NUMBER_CONSTANT ;
Distance : 7

22
Tree	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

23
Tree	boolean indexOfDot = NUMBER_CONSTANT ;
Code	boolean indexOfDot = NUMBER_CONSTANT ;
Distance : 7

24
Tree	void indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	void indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

25
Tree	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

26
Tree	float indexOfDot ;
Code	float indexOfDot ;
Distance : 8

27
Tree	long indexOfDot = this . namespace ;
Code	long indexOfDot = this . namespace ;
Distance : 6

28
Tree	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

29
Tree	public int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	public int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

30
Tree	byte indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	byte indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

31
Tree	double indexOfDot = NUMBER_CONSTANT ;
Code	double indexOfDot = NUMBER_CONSTANT ;
Distance : 7

32
Tree	int indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 5

33
Tree	long indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

34
Tree	int indexOfDot = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

35
Tree	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

36
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Distance : 9

37
Tree	byte indexOfDot = null ;
Code	byte indexOfDot = null ;
Distance : 7

38
Tree	public boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	public boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

39
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

40
Tree	int indexOfDot ;
Code	int indexOfDot ;
Distance : 7

41
Tree	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

42
Tree	long indexOfDot ;
Code	long indexOfDot ;
Distance : 8

43
Tree	int indexOfDot = namespace ;
Code	int indexOfDot = namespace ;
Distance : 5

44
Tree	int directions [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int directions [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

45
Tree	short indexOfDot = this . namespace ;
Code	short indexOfDot = this . namespace ;
Distance : 6

46
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , currentState.length ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , currentState.length ) ;
Distance : 13

47
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , JUnitRule.Strictness.WARN ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , JUnitRule.Strictness.WARN ) ;
Distance : 13

48
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , StringUtils.EMPTY ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , StringUtils.EMPTY ) ;
Distance : 13

49
Tree	abstract int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

50
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , MathUtils.SAFE_MIN ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , MathUtils.SAFE_MIN ) ;
Distance : 13

51
Tree	int FACTORIALS [] = indexOf () ;
Code	int FACTORIALS [] = indexOf () ;
Distance : 8

52
Tree	int indexOfDot = NUMBER_CONSTANT ;
Code	int indexOfDot = NUMBER_CONSTANT ;
Distance : 6

53
Tree	int indexOfDot = false ;
Code	int indexOfDot = false ;
Distance : 6

54
Tree	long indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	long indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

55
Tree	char indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	char indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

56
Tree	int namespace = NUMBER_CONSTANT ;
Code	int namespace = NUMBER_CONSTANT ;
Distance : 7

57
Tree	int gmt [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int gmt [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

58
Tree	float indexOfDot = this . namespace ;
Code	float indexOfDot = this . namespace ;
Distance : 6

59
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , runInMultipleThreads ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , runInMultipleThreads ) ;
Distance : 9

60
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Locale.US ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Locale.US ) ;
Distance : 12

61
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , tokens.length ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , tokens.length ) ;
Distance : 12

62
Tree	long indexOfDot = null ;
Code	long indexOfDot = null ;
Distance : 7

63
Tree	boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

64
Tree	synchronized int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	synchronized int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

65
Tree	int indexOfDot = namespace . indexOf ( this , CHAR_CONS , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( this , CHAR_CONS , NUMBER_CONSTANT ) ;
Distance : 5

66
Tree	int clonedIndices [] = indexOf () ;
Code	int clonedIndices [] = indexOf () ;
Distance : 8

67
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 6

68
Tree	int gmt [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int gmt [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

69
Tree	int FACTORIALS [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int FACTORIALS [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

70
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 4

71
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , IncrementalCheckMode.GENERATE_IJS ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , IncrementalCheckMode.GENERATE_IJS ) ;
Distance : 12

72
Tree	byte indexOfDot = this . namespace ;
Code	byte indexOfDot = this . namespace ;
Distance : 6

73
Tree	int FACTORIALS [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int FACTORIALS [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

74
Tree	short indexOfDot = NUMBER_CONSTANT ;
Code	short indexOfDot = NUMBER_CONSTANT ;
Distance : 7

75
Tree	int clonedIndices [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int clonedIndices [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

76
Tree	int lastHold [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int lastHold [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

77
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , MathUtils.SAFE_MIN ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , MathUtils.SAFE_MIN ) ;
Distance : 9

78
Tree	float indexOfDot = namespace ;
Code	float indexOfDot = namespace ;
Distance : 6

79
Tree	int lastHold [] = indexOf () ;
Code	int lastHold [] = indexOf () ;
Distance : 8

80
Tree	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

81
Tree	boolean indexOfDot ;
Code	boolean indexOfDot ;
Distance : 8

82
Tree	int indexOfDot = break; ;
Code	int indexOfDot = break; ;
Distance : 6

83
Tree	int loc [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int loc [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

84
Tree	synchronized int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	synchronized int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

85
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , Boolean.FALSE ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , Boolean.FALSE ) ;
Distance : 9

86
Tree	char indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	char indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

87
Tree	boolean indexOfDot = null ;
Code	boolean indexOfDot = null ;
Distance : 7

88
Tree	double indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	double indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

89
Tree	long indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	long indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 6

90
Tree	short indexOfDot = false ;
Code	short indexOfDot = false ;
Distance : 7

91
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , LazyHolder.INSTANCE ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , LazyHolder.INSTANCE ) ;
Distance : 9

92
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , values.length ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , values.length ) ;
Distance : 13

93
Tree	char indexOfDot ;
Code	char indexOfDot ;
Distance : 8

94
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , Locale.US ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , Locale.US ) ;
Distance : 13

95
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , values.length ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , values.length ) ;
Distance : 12

96
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , LocalizedFormats.SIMPLE_MESSAGE ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , LocalizedFormats.SIMPLE_MESSAGE ) ;
Distance : 12

97
Tree	int loc [] = indexOf () ;
Code	int loc [] = indexOf () ;
Distance : 8

98
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Distance : 3

99
Tree	int TemplatizedType [] = indexOf () ;
Code	int TemplatizedType [] = indexOf () ;
Distance : 8

100
Tree	int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

101
Tree	double indexOfDot ;
Code	double indexOfDot ;
Distance : 8

102
Tree	int namespace = this . namespace ;
Code	int namespace = this . namespace ;
Distance : 6

103
Tree	double indexOfDot = null ;
Code	double indexOfDot = null ;
Distance : 7

104
Tree	int TemplatizedType [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int TemplatizedType [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

105
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , Feature.STRING_CONTINUATION ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , Feature.STRING_CONTINUATION ) ;
Distance : 13

106
Tree	float indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	float indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

107
Tree	long indexOfDot = namespace ;
Code	long indexOfDot = namespace ;
Distance : 6

108
Tree	boolean indexOfDot = namespace ;
Code	boolean indexOfDot = namespace ;
Distance : 6

109
Tree	boolean indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	boolean indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

110
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Distance : 13

111
Tree	double indexOfDot = namespace ;
Code	double indexOfDot = namespace ;
Distance : 6

112
Tree	float indexOfDot = NUMBER_CONSTANT ;
Code	float indexOfDot = NUMBER_CONSTANT ;
Distance : 7

113
Tree	byte indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	byte indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

114
Tree	long indexOfDot = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	long indexOfDot = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

115
Tree	float indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	float indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

116
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , IncrementalCheckMode.GENERATE_IJS ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , IncrementalCheckMode.GENERATE_IJS ) ;
Distance : 9

117
Tree	long indexOfDot = false ;
Code	long indexOfDot = false ;
Distance : 7

118
Tree	double indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	double indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

119
Tree	int recordDeepStubMock [] = indexOf () ;
Code	int recordDeepStubMock [] = indexOf () ;
Distance : 8

120
Tree	int indexOfDot = null ;
Code	int indexOfDot = null ;
Distance : 6

121
Tree	int zipEntryPath [] = indexOf () ;
Code	int zipEntryPath [] = indexOf () ;
Distance : 8

122
Tree	int indexOfDot = namespace . lastIndexOf ( namespace , null ) ;
Code	int indexOfDot = namespace . lastIndexOf ( namespace , null ) ;
Distance : 3

123
Tree	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

124
Tree	long indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT , false ) ;
Code	long indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT , false ) ;
Distance : 4

125
Tree	int indexOfDot = this . namespace ;
Code	int indexOfDot = this . namespace ;
Distance : 5

126
Tree	public int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	public int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

127
Tree	byte indexOfDot = NUMBER_CONSTANT ;
Code	byte indexOfDot = NUMBER_CONSTANT ;
Distance : 7

128
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , iValues.length ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , iValues.length ) ;
Distance : 12

129
Tree	boolean indexOfDot = false ;
Code	boolean indexOfDot = false ;
Distance : 7

130
Tree	int endLimit [] = indexOf () ;
Code	int endLimit [] = indexOf () ;
Distance : 8

131
Tree	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

132
Tree	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

133
Tree	byte indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	byte indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

134
Tree	public boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	public boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

135
Tree	float indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	float indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

136
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , TiesStrategy.MINIMUM ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , TiesStrategy.MINIMUM ) ;
Distance : 13

137
Tree	void indexOfDot = namespace ;
Code	void indexOfDot = namespace ;
Distance : 6

138
Tree	void indexOfDot = false ;
Code	void indexOfDot = false ;
Distance : 7

139
Tree	int clonedIndices [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int clonedIndices [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

140
Tree	void indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	void indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

141
Tree	int namespace = namespace ;
Code	int namespace = namespace ;
Distance : 6

142
Tree	short indexOfDot = namespace ;
Code	short indexOfDot = namespace ;
Distance : 6

143
Tree	long indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Code	long indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Distance : 4

144
Tree	char indexOfDot = namespace ;
Code	char indexOfDot = namespace ;
Distance : 6

145
Tree	void indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	void indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

146
Tree	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

147
Tree	void indexOfDot = this . namespace ;
Code	void indexOfDot = this . namespace ;
Distance : 6

148
Tree	int lastHold [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int lastHold [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

149
Tree	long indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	long indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

150
Tree	int indexOfDot = namespace . lastIndexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . lastIndexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 5

151
Tree	boolean indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Code	boolean indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Distance : 4

152
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , LocalizedFormats.OVERFLOW_IN_ADDITION ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , LocalizedFormats.OVERFLOW_IN_ADDITION ) ;
Distance : 12

153
Tree	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

154
Tree	long indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Code	long indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Distance : 13

155
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , PlotOrientation.VERTICAL ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , PlotOrientation.VERTICAL ) ;
Distance : 12

156
Tree	int directions [] = indexOf () ;
Code	int directions [] = indexOf () ;
Distance : 8

157
Tree	final int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	final int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

158
Tree	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 0

159
Tree	boolean indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	boolean indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

160
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , Context.OTHER ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , Context.OTHER ) ;
Distance : 13

161
Tree	double indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Code	double indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Distance : 4

162
Tree	long indexOfDot = namespace . indexOf ( this , CHAR_CONS , NUMBER_CONSTANT ) ;
Code	long indexOfDot = namespace . indexOf ( this , CHAR_CONS , NUMBER_CONSTANT ) ;
Distance : 6

163
Tree	double indexOfDot = false ;
Code	double indexOfDot = false ;
Distance : 7

164
Tree	char indexOfDot = false ;
Code	char indexOfDot = false ;
Distance : 7

165
Tree	boolean indexOfDot = namespace . indexOf ( this , CHAR_CONS , NUMBER_CONSTANT ) ;
Code	boolean indexOfDot = namespace . indexOf ( this , CHAR_CONS , NUMBER_CONSTANT ) ;
Distance : 6

166
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , Locale.US ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , Locale.US ) ;
Distance : 9

167
Tree	int namespace = false ;
Code	int namespace = false ;
Distance : 7

168
Tree	double indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	double indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

169
Tree	char indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	char indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

170
Tree	int recordDeepStubMock [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int recordDeepStubMock [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

171
Tree	int zipEntryPath [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int zipEntryPath [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

172
Tree	int gmt [] = indexOf () ;
Code	int gmt [] = indexOf () ;
Distance : 8

173
Tree	int endLimit [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int endLimit [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

174
Tree	int loc [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int loc [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

175
Tree	int directions [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int directions [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

176
Tree	int TemplatizedType [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int TemplatizedType [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

177
Tree	int recordDeepStubMock [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int recordDeepStubMock [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

178
Tree	int zipEntryPath [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int zipEntryPath [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

179
Tree	void indexOfDot ;
Code	void indexOfDot ;
Distance : 8

180
Tree	int indexOfDot = return; ;
Code	int indexOfDot = return; ;
Distance : 6

181
Tree	boolean indexOfDot = this . namespace ;
Code	boolean indexOfDot = this . namespace ;
Distance : 6

182
Tree	double indexOfDot = this . namespace ;
Code	double indexOfDot = this . namespace ;
Distance : 6

183
Tree	final double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	final double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

184
Tree	static int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	static int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

185
Tree	abstract int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	abstract int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

186
Tree	protected int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	protected int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

187
Tree	int endLimit [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int endLimit [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

188
Tree	float indexOfDot = false ;
Code	float indexOfDot = false ;
Distance : 7

189
Tree	float indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	float indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

190
Tree	int indexOfDot = super(); ;
Code	int indexOfDot = super(); ;
Distance : 6

191
Tree	final int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	final int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

192
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , ToStringContext.TO_STRING ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , ToStringContext.TO_STRING ) ;
Distance : 9

193
Tree	int indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 6

194
Tree	char indexOfDot = this . namespace ;
Code	char indexOfDot = this . namespace ;
Distance : 6

195
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Distance : 12

196
Tree	byte indexOfDot = namespace ;
Code	byte indexOfDot = namespace ;
Distance : 6

197
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , JUnitRule.Strictness.WARN ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , JUnitRule.Strictness.WARN ) ;
Distance : 9

198
Tree	byte indexOfDot = false ;
Code	byte indexOfDot = false ;
Distance : 7

199
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Distance : 9

========================================================================


========================================================================
Example Number: 15
Parent Code is: 
int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Child code is: 
int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=indexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=lastIndexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/92/parent/src_com_google_javascript_jscomp_ProcessClosurePrimitives.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

1
Tree	private int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	private int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

2
Tree	int indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT , false ) ;
Code	int indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT , false ) ;
Distance : 3

3
Tree	char indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	char indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

4
Tree	int indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	int indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 4

5
Tree	int namespace ;
Code	int namespace ;
Distance : 7

6
Tree	void indexOfDot = NUMBER_CONSTANT ;
Code	void indexOfDot = NUMBER_CONSTANT ;
Distance : 7

7
Tree	short indexOfDot ;
Code	short indexOfDot ;
Distance : 8

8
Tree	final double indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

9
Tree	final int indexOfDot = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int indexOfDot = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

10
Tree	static int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	static int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

11
Tree	long indexOfDot = continue; ;
Code	long indexOfDot = continue; ;
Distance : 7

12
Tree	byte indexOfDot ;
Code	byte indexOfDot ;
Distance : 8

13
Tree	final int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

14
Tree	protected int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	protected int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

15
Tree	long indexOfDot = NUMBER_CONSTANT ;
Code	long indexOfDot = NUMBER_CONSTANT ;
Distance : 7

16
Tree	void indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	void indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

17
Tree	private int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	private int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

18
Tree	int indexOfDot = continue; ;
Code	int indexOfDot = continue; ;
Distance : 6

19
Tree	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

20
Tree	long indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	long indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

21
Tree	char indexOfDot = NUMBER_CONSTANT ;
Code	char indexOfDot = NUMBER_CONSTANT ;
Distance : 7

22
Tree	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

23
Tree	boolean indexOfDot = NUMBER_CONSTANT ;
Code	boolean indexOfDot = NUMBER_CONSTANT ;
Distance : 7

24
Tree	void indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	void indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

25
Tree	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

26
Tree	float indexOfDot ;
Code	float indexOfDot ;
Distance : 8

27
Tree	long indexOfDot = this . namespace ;
Code	long indexOfDot = this . namespace ;
Distance : 6

28
Tree	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

29
Tree	public int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	public int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

30
Tree	byte indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	byte indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

31
Tree	double indexOfDot = NUMBER_CONSTANT ;
Code	double indexOfDot = NUMBER_CONSTANT ;
Distance : 7

32
Tree	int indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 5

33
Tree	long indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

34
Tree	int indexOfDot = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

35
Tree	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

36
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Distance : 9

37
Tree	byte indexOfDot = null ;
Code	byte indexOfDot = null ;
Distance : 7

38
Tree	public boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	public boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

39
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

40
Tree	int indexOfDot ;
Code	int indexOfDot ;
Distance : 7

41
Tree	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

42
Tree	long indexOfDot ;
Code	long indexOfDot ;
Distance : 8

43
Tree	int indexOfDot = namespace ;
Code	int indexOfDot = namespace ;
Distance : 5

44
Tree	int directions [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int directions [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

45
Tree	short indexOfDot = this . namespace ;
Code	short indexOfDot = this . namespace ;
Distance : 6

46
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , currentState.length ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , currentState.length ) ;
Distance : 13

47
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , JUnitRule.Strictness.WARN ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , JUnitRule.Strictness.WARN ) ;
Distance : 13

48
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , StringUtils.EMPTY ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , StringUtils.EMPTY ) ;
Distance : 13

49
Tree	abstract int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

50
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , MathUtils.SAFE_MIN ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , MathUtils.SAFE_MIN ) ;
Distance : 13

51
Tree	int FACTORIALS [] = indexOf () ;
Code	int FACTORIALS [] = indexOf () ;
Distance : 8

52
Tree	int indexOfDot = NUMBER_CONSTANT ;
Code	int indexOfDot = NUMBER_CONSTANT ;
Distance : 6

53
Tree	int indexOfDot = false ;
Code	int indexOfDot = false ;
Distance : 6

54
Tree	long indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	long indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

55
Tree	char indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	char indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

56
Tree	int namespace = NUMBER_CONSTANT ;
Code	int namespace = NUMBER_CONSTANT ;
Distance : 7

57
Tree	int gmt [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int gmt [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

58
Tree	float indexOfDot = this . namespace ;
Code	float indexOfDot = this . namespace ;
Distance : 6

59
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , runInMultipleThreads ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , runInMultipleThreads ) ;
Distance : 9

60
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Locale.US ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Locale.US ) ;
Distance : 12

61
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , tokens.length ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , tokens.length ) ;
Distance : 12

62
Tree	long indexOfDot = null ;
Code	long indexOfDot = null ;
Distance : 7

63
Tree	boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

64
Tree	synchronized int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	synchronized int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

65
Tree	int indexOfDot = namespace . indexOf ( this , CHAR_CONS , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( this , CHAR_CONS , NUMBER_CONSTANT ) ;
Distance : 5

66
Tree	int clonedIndices [] = indexOf () ;
Code	int clonedIndices [] = indexOf () ;
Distance : 8

67
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 6

68
Tree	int gmt [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int gmt [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

69
Tree	int FACTORIALS [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int FACTORIALS [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

70
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 4

71
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , IncrementalCheckMode.GENERATE_IJS ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , IncrementalCheckMode.GENERATE_IJS ) ;
Distance : 12

72
Tree	byte indexOfDot = this . namespace ;
Code	byte indexOfDot = this . namespace ;
Distance : 6

73
Tree	int FACTORIALS [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int FACTORIALS [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

74
Tree	short indexOfDot = NUMBER_CONSTANT ;
Code	short indexOfDot = NUMBER_CONSTANT ;
Distance : 7

75
Tree	int clonedIndices [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int clonedIndices [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

76
Tree	int lastHold [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int lastHold [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

77
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , MathUtils.SAFE_MIN ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , MathUtils.SAFE_MIN ) ;
Distance : 9

78
Tree	float indexOfDot = namespace ;
Code	float indexOfDot = namespace ;
Distance : 6

79
Tree	int lastHold [] = indexOf () ;
Code	int lastHold [] = indexOf () ;
Distance : 8

80
Tree	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

81
Tree	boolean indexOfDot ;
Code	boolean indexOfDot ;
Distance : 8

82
Tree	int indexOfDot = break; ;
Code	int indexOfDot = break; ;
Distance : 6

83
Tree	int loc [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int loc [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

84
Tree	synchronized int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	synchronized int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

85
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , Boolean.FALSE ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , Boolean.FALSE ) ;
Distance : 9

86
Tree	char indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	char indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

87
Tree	boolean indexOfDot = null ;
Code	boolean indexOfDot = null ;
Distance : 7

88
Tree	double indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	double indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

89
Tree	long indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	long indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 6

90
Tree	short indexOfDot = false ;
Code	short indexOfDot = false ;
Distance : 7

91
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , LazyHolder.INSTANCE ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , LazyHolder.INSTANCE ) ;
Distance : 9

92
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , values.length ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , values.length ) ;
Distance : 13

93
Tree	char indexOfDot ;
Code	char indexOfDot ;
Distance : 8

94
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , Locale.US ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , Locale.US ) ;
Distance : 13

95
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , values.length ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , values.length ) ;
Distance : 12

96
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , LocalizedFormats.SIMPLE_MESSAGE ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , LocalizedFormats.SIMPLE_MESSAGE ) ;
Distance : 12

97
Tree	int loc [] = indexOf () ;
Code	int loc [] = indexOf () ;
Distance : 8

98
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Distance : 3

99
Tree	int TemplatizedType [] = indexOf () ;
Code	int TemplatizedType [] = indexOf () ;
Distance : 8

100
Tree	int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

101
Tree	double indexOfDot ;
Code	double indexOfDot ;
Distance : 8

102
Tree	int namespace = this . namespace ;
Code	int namespace = this . namespace ;
Distance : 6

103
Tree	double indexOfDot = null ;
Code	double indexOfDot = null ;
Distance : 7

104
Tree	int TemplatizedType [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int TemplatizedType [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

105
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , Feature.STRING_CONTINUATION ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , Feature.STRING_CONTINUATION ) ;
Distance : 13

106
Tree	float indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	float indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

107
Tree	long indexOfDot = namespace ;
Code	long indexOfDot = namespace ;
Distance : 6

108
Tree	boolean indexOfDot = namespace ;
Code	boolean indexOfDot = namespace ;
Distance : 6

109
Tree	boolean indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	boolean indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

110
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Distance : 13

111
Tree	double indexOfDot = namespace ;
Code	double indexOfDot = namespace ;
Distance : 6

112
Tree	float indexOfDot = NUMBER_CONSTANT ;
Code	float indexOfDot = NUMBER_CONSTANT ;
Distance : 7

113
Tree	byte indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	byte indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

114
Tree	long indexOfDot = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	long indexOfDot = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

115
Tree	float indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	float indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

116
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , IncrementalCheckMode.GENERATE_IJS ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , IncrementalCheckMode.GENERATE_IJS ) ;
Distance : 9

117
Tree	long indexOfDot = false ;
Code	long indexOfDot = false ;
Distance : 7

118
Tree	double indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	double indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

119
Tree	int recordDeepStubMock [] = indexOf () ;
Code	int recordDeepStubMock [] = indexOf () ;
Distance : 8

120
Tree	int indexOfDot = null ;
Code	int indexOfDot = null ;
Distance : 6

121
Tree	int zipEntryPath [] = indexOf () ;
Code	int zipEntryPath [] = indexOf () ;
Distance : 8

122
Tree	int indexOfDot = namespace . lastIndexOf ( namespace , null ) ;
Code	int indexOfDot = namespace . lastIndexOf ( namespace , null ) ;
Distance : 3

123
Tree	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

124
Tree	long indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT , false ) ;
Code	long indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT , false ) ;
Distance : 4

125
Tree	int indexOfDot = this . namespace ;
Code	int indexOfDot = this . namespace ;
Distance : 5

126
Tree	public int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	public int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

127
Tree	byte indexOfDot = NUMBER_CONSTANT ;
Code	byte indexOfDot = NUMBER_CONSTANT ;
Distance : 7

128
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , iValues.length ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , iValues.length ) ;
Distance : 12

129
Tree	boolean indexOfDot = false ;
Code	boolean indexOfDot = false ;
Distance : 7

130
Tree	int endLimit [] = indexOf () ;
Code	int endLimit [] = indexOf () ;
Distance : 8

131
Tree	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

132
Tree	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

133
Tree	byte indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	byte indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

134
Tree	public boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	public boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

135
Tree	float indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	float indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

136
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , TiesStrategy.MINIMUM ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , TiesStrategy.MINIMUM ) ;
Distance : 13

137
Tree	void indexOfDot = namespace ;
Code	void indexOfDot = namespace ;
Distance : 6

138
Tree	void indexOfDot = false ;
Code	void indexOfDot = false ;
Distance : 7

139
Tree	int clonedIndices [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int clonedIndices [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

140
Tree	void indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	void indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

141
Tree	int namespace = namespace ;
Code	int namespace = namespace ;
Distance : 6

142
Tree	short indexOfDot = namespace ;
Code	short indexOfDot = namespace ;
Distance : 6

143
Tree	long indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Code	long indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Distance : 4

144
Tree	char indexOfDot = namespace ;
Code	char indexOfDot = namespace ;
Distance : 6

145
Tree	void indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	void indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

146
Tree	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

147
Tree	void indexOfDot = this . namespace ;
Code	void indexOfDot = this . namespace ;
Distance : 6

148
Tree	int lastHold [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int lastHold [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

149
Tree	long indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	long indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

150
Tree	int indexOfDot = namespace . lastIndexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . lastIndexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 5

151
Tree	boolean indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Code	boolean indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Distance : 4

152
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , LocalizedFormats.OVERFLOW_IN_ADDITION ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , LocalizedFormats.OVERFLOW_IN_ADDITION ) ;
Distance : 12

153
Tree	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

154
Tree	long indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Code	long indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Distance : 13

155
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , PlotOrientation.VERTICAL ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , PlotOrientation.VERTICAL ) ;
Distance : 12

156
Tree	int directions [] = indexOf () ;
Code	int directions [] = indexOf () ;
Distance : 8

157
Tree	final int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	final int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

158
Tree	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 0

159
Tree	boolean indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	boolean indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

160
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , Context.OTHER ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , Context.OTHER ) ;
Distance : 13

161
Tree	double indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Code	double indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Distance : 4

162
Tree	long indexOfDot = namespace . indexOf ( this , CHAR_CONS , NUMBER_CONSTANT ) ;
Code	long indexOfDot = namespace . indexOf ( this , CHAR_CONS , NUMBER_CONSTANT ) ;
Distance : 6

163
Tree	double indexOfDot = false ;
Code	double indexOfDot = false ;
Distance : 7

164
Tree	char indexOfDot = false ;
Code	char indexOfDot = false ;
Distance : 7

165
Tree	boolean indexOfDot = namespace . indexOf ( this , CHAR_CONS , NUMBER_CONSTANT ) ;
Code	boolean indexOfDot = namespace . indexOf ( this , CHAR_CONS , NUMBER_CONSTANT ) ;
Distance : 6

166
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , Locale.US ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , Locale.US ) ;
Distance : 9

167
Tree	int namespace = false ;
Code	int namespace = false ;
Distance : 7

168
Tree	double indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	double indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

169
Tree	char indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	char indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

170
Tree	int recordDeepStubMock [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int recordDeepStubMock [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

171
Tree	int zipEntryPath [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int zipEntryPath [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

172
Tree	int gmt [] = indexOf () ;
Code	int gmt [] = indexOf () ;
Distance : 8

173
Tree	int endLimit [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int endLimit [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

174
Tree	int loc [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int loc [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

175
Tree	int directions [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int directions [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

176
Tree	int TemplatizedType [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int TemplatizedType [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

177
Tree	int recordDeepStubMock [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int recordDeepStubMock [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

178
Tree	int zipEntryPath [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int zipEntryPath [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

179
Tree	void indexOfDot ;
Code	void indexOfDot ;
Distance : 8

180
Tree	int indexOfDot = return; ;
Code	int indexOfDot = return; ;
Distance : 6

181
Tree	boolean indexOfDot = this . namespace ;
Code	boolean indexOfDot = this . namespace ;
Distance : 6

182
Tree	double indexOfDot = this . namespace ;
Code	double indexOfDot = this . namespace ;
Distance : 6

183
Tree	final double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	final double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

184
Tree	static int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	static int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

185
Tree	abstract int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	abstract int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

186
Tree	protected int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	protected int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

187
Tree	int endLimit [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int endLimit [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

188
Tree	float indexOfDot = false ;
Code	float indexOfDot = false ;
Distance : 7

189
Tree	float indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	float indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

190
Tree	int indexOfDot = super(); ;
Code	int indexOfDot = super(); ;
Distance : 6

191
Tree	final int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	final int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

192
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , ToStringContext.TO_STRING ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , ToStringContext.TO_STRING ) ;
Distance : 9

193
Tree	int indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 6

194
Tree	char indexOfDot = this . namespace ;
Code	char indexOfDot = this . namespace ;
Distance : 6

195
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Distance : 12

196
Tree	byte indexOfDot = namespace ;
Code	byte indexOfDot = namespace ;
Distance : 6

197
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , JUnitRule.Strictness.WARN ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , JUnitRule.Strictness.WARN ) ;
Distance : 9

198
Tree	byte indexOfDot = false ;
Code	byte indexOfDot = false ;
Distance : 7

199
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Distance : 9

========================================================================


========================================================================
Example Number: 16
Parent Code is: 
! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
-------------------------------------------------------------------------------
Child code is: 
! type . restrictByNotNullOrUndefined () . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (38 (207{val=!}) (32 (800{val=type}) (235{val=.}) (802{val=isSubtype}) (214{val=(}) (32 (800{val=typeRegistry}) (235{val=.}) (802{val=getNativeType}) (214{val=(}) (800{val=OBJECT_TYPE}) (215{val=)})) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (38 (207{val=!}) (32 (32 (800{val=type}) (235{val=.}) (802{val=restrictByNotNullOrUndefined}) (216{val=()})) (235{val=.}) (802{val=isSubtype}) (214{val=(}) (32 (800{val=typeRegistry}) (235{val=.}) (802{val=getNativeType}) (214{val=(}) (800{val=OBJECT_TYPE}) (215{val=)})) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/90/parent/src_com_google_javascript_jscomp_FunctionTypeBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return
Code	return
Distance : 15

1
Tree	! type . getNativeType ( typeRegistry . isSubtype ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Code	! type . getNativeType ( typeRegistry . isSubtype ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Distance : 7

2
Tree	! type . restrictByNotNullOrUndefined ( restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 6

3
Tree	( NUMBER_CONSTANT * type . getNativeType ( type ) )
Code	( NUMBER_CONSTANT * type . getNativeType ( type ) )
Distance : 10

4
Tree	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) . getNativeType ()
Code	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) . getNativeType ()
Distance : 9

5
Tree	! type . restrictByNotNullOrUndefined ( getNativeType ( type ) )
Code	! type . restrictByNotNullOrUndefined ( getNativeType ( type ) )
Distance : 6

6
Tree	type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 7

7
Tree	type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 6

8
Tree	! type . restrictByNotNullOrUndefined ( type )
Code	! type . restrictByNotNullOrUndefined ( type )
Distance : 9

9
Tree	! type . getNativeType ( OBJECT_TYPE )
Code	! type . getNativeType ( OBJECT_TYPE )
Distance : 8

10
Tree	! type . getNativeType ( restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! type . getNativeType ( restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 7

11
Tree	<
Code	<
Distance : 15

12
Tree	! restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 5

13
Tree	! getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 6

14
Tree	rightType
Code	rightType
Distance : 15

15
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == Precision.EPSILON )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == Precision.EPSILON )
Distance : 10

16
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == Verification.EXPLICIT )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == Verification.EXPLICIT )
Distance : 10

17
Tree	checkState
Code	checkState
Distance : 15

18
Tree	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 4

19
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . isSubtype ( TokenType.OPEN_ANGLE )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . isSubtype ( TokenType.OPEN_ANGLE )
Distance : 7

20
Tree	! type . isSubtype ( typeRegistry . getNativeType ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Code	! type . isSubtype ( typeRegistry . getNativeType ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Distance : 5

21
Tree	! type . isSubtype ()
Code	! type . isSubtype ()
Distance : 11

22
Tree	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 3

23
Tree	(
Code	(
Distance : 14

24
Tree	! restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Code	! restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Distance : 6

25
Tree	node
Code	node
Distance : 15

26
Tree	( typeRegistry * type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( typeRegistry * type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 8

27
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , OBJECT_TYPE )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , OBJECT_TYPE )
Distance : 5

28
Tree	throw
Code	throw
Distance : 15

29
Tree	! type . restrictByNotNullOrUndefined ( isUnknownType . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( isUnknownType . getNativeType ( OBJECT_TYPE ) )
Distance : 4

30
Tree	! type . isSubtype ( getNativeType . getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtype ( getNativeType . getNativeType ( OBJECT_TYPE ) )
Distance : 4

31
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( JSTypeNative.OBJECT_TYPE )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( JSTypeNative.OBJECT_TYPE )
Distance : 6

32
Tree	( typeRegistry * type . getNativeType ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) ) )
Code	( typeRegistry * type . getNativeType ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) ) )
Distance : 9

33
Tree	! restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 6

34
Tree	double
Code	double
Distance : 15

35
Tree	JSType
Code	JSType
Distance : 15

36
Tree	! type . restrictByNotNullOrUndefined ( isSubtypeOf . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( isSubtypeOf . getNativeType ( OBJECT_TYPE ) )
Distance : 4

37
Tree	! type . getNativeType ( getNativeType ( typeRegistry ) )
Code	! type . getNativeType ( getNativeType ( typeRegistry ) )
Distance : 7

38
Tree	( NUMBER_CONSTANT * type . getNativeType ( typeRegistry ) )
Code	( NUMBER_CONSTANT * type . getNativeType ( typeRegistry ) )
Distance : 10

39
Tree	! type . getNativeType ( typeRegistry . getNativeType ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Code	! type . getNativeType ( typeRegistry . getNativeType ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Distance : 6

40
Tree	! getNativeType ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! getNativeType ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 7

41
Tree	! type . getNativeType ()
Code	! type . getNativeType ()
Distance : 11

42
Tree	! type . getNativeType ( getNativeType . getNativeType ( OBJECT_TYPE ) )
Code	! type . getNativeType ( getNativeType . getNativeType ( OBJECT_TYPE ) )
Distance : 5

43
Tree	! type . isSubtype ( typeRegistry . getNativeType ( NUMBER_CONSTANT , typeRegistry ) )
Code	! type . isSubtype ( typeRegistry . getNativeType ( NUMBER_CONSTANT , typeRegistry ) )
Distance : 6

44
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . restrictByNotNullOrUndefined ()
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . restrictByNotNullOrUndefined ()
Distance : 9

45
Tree	( typeRegistry * type . getNativeType ( OBJECT_TYPE . getNativeType ( typeRegistry ) ) )
Code	( typeRegistry * type . getNativeType ( OBJECT_TYPE . getNativeType ( typeRegistry ) ) )
Distance : 9

46
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Distance : 6

47
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( ES8 )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( ES8 )
Distance : 6

48
Tree	! type . isSubtype ( getNativeType ( typeRegistry ) )
Code	! type . isSubtype ( getNativeType ( typeRegistry ) )
Distance : 6

49
Tree	! type . getNativeType ( typeRegistry ) . isSubtype ()
Code	! type . getNativeType ( typeRegistry ) . isSubtype ()
Distance : 10

50
Tree	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) , typeRegistry )
Code	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) , typeRegistry )
Distance : 6

51
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Distance : 6

52
Tree	( NUMBER_CONSTANT * type . isSubtype ( type ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( type ) )
Distance : 10

53
Tree	! type . getNativeType ( typeRegistry ) . getNativeType ( TokenType.OPEN_ANGLE )
Code	! type . getNativeType ( typeRegistry ) . getNativeType ( TokenType.OPEN_ANGLE )
Distance : 7

54
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( FeatureSet.ES5 )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( FeatureSet.ES5 )
Distance : 6

55
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) , OBJECT_TYPE )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) , OBJECT_TYPE )
Distance : 6

56
Tree	type . restrictByNotNullOrUndefined ( typeRegistry ) && type . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Code	type . restrictByNotNullOrUndefined ( typeRegistry ) && type . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Distance : 8

57
Tree	! getNativeType ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Code	! getNativeType ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Distance : 7

58
Tree	! type . getNativeType ( typeRegistry ) . restrictByNotNullOrUndefined ()
Code	! type . getNativeType ( typeRegistry ) . restrictByNotNullOrUndefined ()
Distance : 10

59
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Distance : 5

60
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( DateUtils.MILLIS_PER_HOUR )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( DateUtils.MILLIS_PER_HOUR )
Distance : 6

61
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( NUMBER_CONSTANT , type ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( NUMBER_CONSTANT , type ) )
Distance : 6

62
Tree	! type . getNativeType ( isUnknownType . getNativeType ( OBJECT_TYPE ) )
Code	! type . getNativeType ( isUnknownType . getNativeType ( OBJECT_TYPE ) )
Distance : 5

63
Tree	! type . getNativeType ( typeRegistry )
Code	! type . getNativeType ( typeRegistry )
Distance : 9

64
Tree	! type . restrictByNotNullOrUndefined ( CompilerOptions.LanguageMode.ECMASCRIPT_2017 . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( CompilerOptions.LanguageMode.ECMASCRIPT_2017 . getNativeType ( OBJECT_TYPE ) )
Distance : 4

65
Tree	! type . restrictByNotNullOrUndefined ()
Code	! type . restrictByNotNullOrUndefined ()
Distance : 10

66
Tree	! type . restrictByNotNullOrUndefined ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN_SYMBOL . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN_SYMBOL . getNativeType ( OBJECT_TYPE ) )
Distance : 4

67
Tree	! type . restrictByNotNullOrUndefined ( getNativeType . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( getNativeType . getNativeType ( OBJECT_TYPE ) )
Distance : 4

68
Tree	( typeRegistry * type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( typeRegistry * type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 8

69
Tree	! type . restrictByNotNullOrUndefined ( PropertyCollapseLevel.ALL . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( PropertyCollapseLevel.ALL . getNativeType ( OBJECT_TYPE ) )
Distance : 4

70
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( TokenType.OPEN_ANGLE )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( TokenType.OPEN_ANGLE )
Distance : 6

71
Tree	type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < typeRegistry
Code	type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < typeRegistry
Distance : 7

72
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == Double.NaN )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == Double.NaN )
Distance : 10

73
Tree	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE . getNativeType ( typeRegistry ) ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE . getNativeType ( typeRegistry ) ) )
Distance : 8

74
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == TypeInferenceMode.CHECKED )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == TypeInferenceMode.CHECKED )
Distance : 9

75
Tree	( typeRegistry * type . restrictByNotNullOrUndefined ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) ) )
Code	( typeRegistry * type . restrictByNotNullOrUndefined ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) ) )
Distance : 9

76
Tree	type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < typeRegistry
Code	type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < typeRegistry
Distance : 6

77
Tree	type . restrictByNotNullOrUndefined ( typeRegistry ) && type . getNativeType ( typeRegistry )
Code	type . restrictByNotNullOrUndefined ( typeRegistry ) && type . getNativeType ( typeRegistry )
Distance : 8

78
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == NodeUtil.MATCH_NOT_FUNCTION )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == NodeUtil.MATCH_NOT_FUNCTION )
Distance : 9

79
Tree	! isSubtype ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! isSubtype ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 6

80
Tree	! type . getNativeType ( typeRegistry . getNativeType ( typeRegistry ) , OBJECT_TYPE )
Code	! type . getNativeType ( typeRegistry . getNativeType ( typeRegistry ) , OBJECT_TYPE )
Distance : 7

81
Tree	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry )
Code	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry )
Distance : 9

82
Tree	OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 9

83
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ()
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ()
Distance : 11

84
Tree	! type . restrictByNotNullOrUndefined ( createUnionType . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( createUnionType . getNativeType ( OBJECT_TYPE ) )
Distance : 4

85
Tree	type . getNativeType ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	type . getNativeType ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 9

86
Tree	! type . isSubtype ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Code	! type . isSubtype ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Distance : 4

87
Tree	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 10

88
Tree	OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 8

89
Tree	type . restrictByNotNullOrUndefined ( typeRegistry ) && type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	type . restrictByNotNullOrUndefined ( typeRegistry ) && type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 7

90
Tree	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) , OBJECT_TYPE )
Code	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) , OBJECT_TYPE )
Distance : 5

91
Tree	type . restrictByNotNullOrUndefined ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE )
Code	type . restrictByNotNullOrUndefined ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE )
Distance : 8

92
Tree	! typeRegistry . restrictByNotNullOrUndefined ()
Code	! typeRegistry . restrictByNotNullOrUndefined ()
Distance : 11

93
Tree	( typeRegistry * type . getNativeType ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) ) )
Code	( typeRegistry * type . getNativeType ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) ) )
Distance : 9

94
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( OBJECT_TYPE )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( OBJECT_TYPE )
Distance : 5

95
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . isSubtype ()
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . isSubtype ()
Distance : 9

96
Tree	type . isSubtype ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	type . isSubtype ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 9

97
Tree	type . restrictByNotNullOrUndefined ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	type . restrictByNotNullOrUndefined ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 8

98
Tree	type . restrictByNotNullOrUndefined ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	type . restrictByNotNullOrUndefined ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 7

99
Tree	type . getNativeType ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	type . getNativeType ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 8

100
Tree	! typeRegistry . getNativeType ()
Code	! typeRegistry . getNativeType ()
Distance : 11

101
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , typeRegistry )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , typeRegistry )
Distance : 5

102
Tree	! typeRegistry . isSubtype ()
Code	! typeRegistry . isSubtype ()
Distance : 12

103
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == var.scope )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == var.scope )
Distance : 10

104
Tree	! type . restrictByNotNullOrUndefined ( isSubtype ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( isSubtype ( OBJECT_TYPE ) )
Distance : 6

105
Tree	( NUMBER_CONSTANT * type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Distance : 7

106
Tree	( typeRegistry * type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Code	( typeRegistry * type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Distance : 7

107
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 4

108
Tree	( typeRegistry * type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( typeRegistry * type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 7

109
Tree	! type . isSubtype ( OBJECT_TYPE )
Code	! type . isSubtype ( OBJECT_TYPE )
Distance : 8

110
Tree	OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 7

111
Tree	! type . getNativeType ( type )
Code	! type . getNativeType ( type )
Distance : 9

112
Tree	type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < typeRegistry
Code	type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < typeRegistry
Distance : 6

113
Tree	typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 7

114
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == ExpansionMode.MULTIPLICATIVE )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == ExpansionMode.MULTIPLICATIVE )
Distance : 10

115
Tree	( NUMBER_CONSTANT * typeRegistry . isSubtype ( OBJECT_TYPE ) )
Code	( NUMBER_CONSTANT * typeRegistry . isSubtype ( OBJECT_TYPE ) )
Distance : 9

116
Tree	! type . isSubtype ( getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtype ( getNativeType ( OBJECT_TYPE ) )
Distance : 5

117
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry )
Distance : 8

118
Tree	! type . isSubtype ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! type . isSubtype ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 4

119
Tree	! type . isSubtype ( typeRegistry ) . restrictByNotNullOrUndefined ()
Code	! type . isSubtype ( typeRegistry ) . restrictByNotNullOrUndefined ()
Distance : 9

120
Tree	type . isSubtype ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	type . isSubtype ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 8

121
Tree	! type . isSubtype ( typeRegistry ) . isSubtype ()
Code	! type . isSubtype ( typeRegistry ) . isSubtype ()
Distance : 9

122
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == rhs.b )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == rhs.b )
Distance : 9

123
Tree	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) ) )
Distance : 9

124
Tree	type . getNativeType ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE )
Code	type . getNativeType ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE )
Distance : 8

125
Tree	type . restrictByNotNullOrUndefined ( typeRegistry ) && type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	type . restrictByNotNullOrUndefined ( typeRegistry ) && type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 8

126
Tree	! type . isSubtype ( type )
Code	! type . isSubtype ( type )
Distance : 9

127
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == Double.NaN )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == Double.NaN )
Distance : 9

128
Tree	! type . restrictByNotNullOrUndefined ( getNativeType ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( getNativeType ( typeRegistry ) )
Distance : 6

129
Tree	type = ( typeRegistry ) typeRegistry . isSubtype ( OBJECT_TYPE )
Code	type = ( typeRegistry ) typeRegistry . isSubtype ( OBJECT_TYPE )
Distance : 9

130
Tree	OBJECT_TYPE . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	OBJECT_TYPE . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 8

131
Tree	OBJECT_TYPE . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	OBJECT_TYPE . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 7

132
Tree	( typeRegistry * type . isSubtype ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) ) )
Code	( typeRegistry * type . isSubtype ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) ) )
Distance : 8

133
Tree	OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE )
Code	OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE )
Distance : 8

134
Tree	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) , typeRegistry )
Code	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) , typeRegistry )
Distance : 5

135
Tree	! restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 6

136
Tree	type = ( typeRegistry ) typeRegistry . restrictByNotNullOrUndefined ( typeRegistry )
Code	type = ( typeRegistry ) typeRegistry . restrictByNotNullOrUndefined ( typeRegistry )
Distance : 10

137
Tree	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( typeRegistry ) ) )
Code	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( typeRegistry ) ) )
Distance : 9

138
Tree	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( type ) )
Code	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( type ) )
Distance : 11

139
Tree	! getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 7

140
Tree	( typeRegistry * type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Code	( typeRegistry * type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Distance : 7

141
Tree	type = ( type ) typeRegistry . isSubtype ( typeRegistry )
Code	type = ( type ) typeRegistry . isSubtype ( typeRegistry )
Distance : 10

142
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == var.scope )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == var.scope )
Distance : 9

143
Tree	type . isSubtype ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE )
Code	type . isSubtype ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE )
Distance : 8

144
Tree	type . restrictByNotNullOrUndefined ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE )
Code	type . restrictByNotNullOrUndefined ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE )
Distance : 7

145
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == / )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == / )
Distance : 9

146
Tree	! type . isSubtype ( typeRegistry ) . getNativeType ()
Code	! type . isSubtype ( typeRegistry ) . getNativeType ()
Distance : 8

147
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Distance : 4

148
Tree	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Code	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Distance : 8

149
Tree	( NUMBER_CONSTANT * type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 8

150
Tree	type = ( typeRegistry ) typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Code	type = ( typeRegistry ) typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Distance : 9

151
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( OBJECT_TYPE ) , OBJECT_TYPE )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( OBJECT_TYPE ) , OBJECT_TYPE )
Distance : 6

152
Tree	! OBJECT_TYPE . getNativeType ()
Code	! OBJECT_TYPE . getNativeType ()
Distance : 12

153
Tree	type = ( typeRegistry ) type . isSubtype ( typeRegistry )
Code	type = ( typeRegistry ) type . isSubtype ( typeRegistry )
Distance : 11

154
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) , OBJECT_TYPE )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) , OBJECT_TYPE )
Distance : 6

155
Tree	type . getNativeType ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE )
Code	type . getNativeType ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE )
Distance : 9

156
Tree	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) ) )
Distance : 8

157
Tree	! type . getNativeType ( typeRegistry . getNativeType ( NUMBER_CONSTANT , typeRegistry ) )
Code	! type . getNativeType ( typeRegistry . getNativeType ( NUMBER_CONSTANT , typeRegistry ) )
Distance : 7

158
Tree	OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE )
Code	OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE )
Distance : 9

159
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( NUMBER_CONSTANT , typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( NUMBER_CONSTANT , typeRegistry ) )
Distance : 6

160
Tree	type = ( typeRegistry ) type . isSubtype ( OBJECT_TYPE )
Code	type = ( typeRegistry ) type . isSubtype ( OBJECT_TYPE )
Distance : 10

161
Tree	type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 6

162
Tree	type = ( typeRegistry ) typeRegistry . getNativeType ( typeRegistry )
Code	type = ( typeRegistry ) typeRegistry . getNativeType ( typeRegistry )
Distance : 9

163
Tree	type . isSubtype ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE )
Code	type . isSubtype ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE )
Distance : 9

164
Tree	!
Code	!
Distance : 14

165
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == Double.MIN_VALUE )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == Double.MIN_VALUE )
Distance : 9

166
Tree	! OBJECT_TYPE . isSubtype ()
Code	! OBJECT_TYPE . isSubtype ()
Distance : 12

167
Tree	type = ( typeRegistry ) typeRegistry . isSubtype ( typeRegistry )
Code	type = ( typeRegistry ) typeRegistry . isSubtype ( typeRegistry )
Distance : 10

168
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == rhs.b )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == rhs.b )
Distance : 10

169
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == IncrementalCheckMode.GENERATE_IJS )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == IncrementalCheckMode.GENERATE_IJS )
Distance : 10

170
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == Double.MIN_VALUE )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == Double.MIN_VALUE )
Distance : 10

171
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == ExpansionMode.MULTIPLICATIVE )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == ExpansionMode.MULTIPLICATIVE )
Distance : 9

172
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 3

173
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == GoalType.MINIMIZE )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == GoalType.MINIMIZE )
Distance : 10

174
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == IncrementalCheckMode.GENERATE_IJS )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == IncrementalCheckMode.GENERATE_IJS )
Distance : 9

175
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == / )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == / )
Distance : 10

176
Tree	type = ( type ) typeRegistry . restrictByNotNullOrUndefined ( typeRegistry )
Code	type = ( type ) typeRegistry . restrictByNotNullOrUndefined ( typeRegistry )
Distance : 10

177
Tree	type = ( typeRegistry ) type . restrictByNotNullOrUndefined ( typeRegistry )
Code	type = ( typeRegistry ) type . restrictByNotNullOrUndefined ( typeRegistry )
Distance : 11

178
Tree	( NUMBER_CONSTANT * type . getNativeType ( OBJECT_TYPE ) )
Code	( NUMBER_CONSTANT * type . getNativeType ( OBJECT_TYPE ) )
Distance : 9

179
Tree	! type . isSubtype ( typeRegistry )
Code	! type . isSubtype ( typeRegistry )
Distance : 8

180
Tree	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Distance : 6

181
Tree	! type . restrictByNotNullOrUndefined ( getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( getNativeType ( OBJECT_TYPE ) )
Distance : 5

182
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ()
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ()
Distance : 8

183
Tree	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 7

184
Tree	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE ) )
Distance : 9

185
Tree	! type . getNativeType ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Code	! type . getNativeType ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Distance : 5

186
Tree	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry ) )
Distance : 9

187
Tree	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) , OBJECT_TYPE )
Code	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) , OBJECT_TYPE )
Distance : 6

188
Tree	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 8

189
Tree	! type . getNativeType ( getNativeType ( OBJECT_TYPE ) )
Code	! type . getNativeType ( getNativeType ( OBJECT_TYPE ) )
Distance : 6

190
Tree	! type . getNativeType ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! type . getNativeType ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 5

191
Tree	! type . getNativeType ( typeRegistry ) . getNativeType ()
Code	! type . getNativeType ( typeRegistry ) . getNativeType ()
Distance : 9

192
Tree	! isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 5

193
Tree	! type . restrictByNotNullOrUndefined () wanted
Code	! type . restrictByNotNullOrUndefined () wanted
Distance : 10

194
Tree	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 10

195
Tree	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Distance : 7

196
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE )
Distance : 6

197
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN )
Distance : 6

198
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 4

199
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == PropAccess.INCLUDE_STRAY_PROPS )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == PropAccess.INCLUDE_STRAY_PROPS )
Distance : 9

========================================================================


========================================================================
Example Number: 17
Parent Code is: 
return true ;
-------------------------------------------------------------------------------
Child code is: 
return false ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (9{val=true}) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (9{val=false}) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/86/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	return ArithmeticUtils % NUMBER_CONSTANT ;
Code	return ArithmeticUtils % NUMBER_CONSTANT ;
Distance : 3

1
Tree	return FastMath % NUMBER_CONSTANT ;
Code	return FastMath % NUMBER_CONSTANT ;
Distance : 3

2
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , tolerance ) ;
Distance : 12

3
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , tolerance ) ;
Distance : 12

4
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , scopeCreator ) ;
Distance : 12

5
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , scopeCreator ) ;
Distance : 12

6
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , callNode , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , callNode , scopeCreator ) ;
Distance : 12

7
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , callNode , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , callNode , tolerance ) ;
Distance : 12

8
Tree	return new Es6SyntacticScopeCreator ( tolerance ) ;
Code	return new Es6SyntacticScopeCreator ( tolerance ) ;
Distance : 5

9
Tree	return parent . abs () . success == NUMBER_CONSTANT ;
Code	return parent . abs () . success == NUMBER_CONSTANT ;
Distance : 8

10
Tree	return NodeUtil < < NUMBER_CONSTANT ;
Code	return NodeUtil < < NUMBER_CONSTANT ;
Distance : 4

11
Tree	return FastFourierTransformer . clone ( parent ) ? null : tolerance ;
Code	return FastFourierTransformer . clone ( parent ) ? null : tolerance ;
Distance : 10

12
Tree	return ! parent ;
Code	return ! parent ;
Distance : 2

13
Tree	return FastFourierTransformer . abs ( parent ) ? null : tol ;
Code	return FastFourierTransformer . abs ( parent ) ? null : tol ;
Distance : 10

14
Tree	return FastFourierTransformer + obj2 . clone ( parent ) ;
Code	return FastFourierTransformer + obj2 . clone ( parent ) ;
Distance : 8

15
Tree	return ! FastFourierTransformer ;
Code	return ! FastFourierTransformer ;
Distance : 2

16
Tree	return ! callNode ;
Code	return ! callNode ;
Distance : 2

17
Tree	return ! MOCKITO_PROXY_MARKER ;
Code	return ! MOCKITO_PROXY_MARKER ;
Distance : 2

18
Tree	return FastFourierTransformer . clone () ? null : parent ;
Code	return FastFourierTransformer . clone () ? null : parent ;
Distance : 8

19
Tree	return NodeUtil.MATCH_NOT_FUNCTION ;
Code	return NodeUtil.MATCH_NOT_FUNCTION ;
Distance : 1

20
Tree	return this == callNode ;
Code	return this == callNode ;
Distance : 3

21
Tree	return this == warningsGuard ;
Code	return this == warningsGuard ;
Distance : 3

22
Tree	return error.description ;
Code	return error.description ;
Distance : 1

23
Tree	return FastFourierTransformer < < NUMBER_CONSTANT ;
Code	return FastFourierTransformer < < NUMBER_CONSTANT ;
Distance : 4

24
Tree	return this == forward ;
Code	return this == forward ;
Distance : 3

25
Tree	return this == s ;
Code	return this == s ;
Distance : 3

26
Tree	return Double.MIN_VALUE ;
Code	return Double.MIN_VALUE ;
Distance : 1

27
Tree	return true ;
Code	return true ;
Distance : 1

28
Tree	return FastFourierTransformer ;
Code	return FastFourierTransformer ;
Distance : 1

29
Tree	return parent ;
Code	return parent ;
Distance : 1

30
Tree	return STRING_CONSTANT + callNode + STRING_CONSTANT + callNode ;
Code	return STRING_CONSTANT + callNode + STRING_CONSTANT + callNode ;
Distance : 7

31
Tree	return Token.SUPER ;
Code	return Token.SUPER ;
Distance : 1

32
Tree	return NodeUtil ;
Code	return NodeUtil ;
Distance : 1

33
Tree	return tolerance ;
Code	return tolerance ;
Distance : 1

34
Tree	return TransformUtils ;
Code	return TransformUtils ;
Distance : 1

35
Tree	return STRING_CONSTANT + rawType + STRING_CONSTANT + callNode ;
Code	return STRING_CONSTANT + rawType + STRING_CONSTANT + callNode ;
Distance : 7

36
Tree	return FastFourierTransformer ? f.length : FunctionFlavor.NORMAL ;
Code	return FastFourierTransformer ? f.length : FunctionFlavor.NORMAL ;
Distance : 5

37
Tree	return tolerance < < NUMBER_CONSTANT ;
Code	return tolerance < < NUMBER_CONSTANT ;
Distance : 4

38
Tree	return tolerance ? f.length : FunctionFlavor.NORMAL ;
Code	return tolerance ? f.length : FunctionFlavor.NORMAL ;
Distance : 5

39
Tree	return TransformUtils < < NUMBER_CONSTANT ;
Code	return TransformUtils < < NUMBER_CONSTANT ;
Distance : 4

40
Tree	return randomData ;
Code	return randomData ;
Distance : 1

41
Tree	return ! tableau ;
Code	return ! tableau ;
Distance : 2

42
Tree	return FastMath ;
Code	return FastMath ;
Distance : 1

43
Tree	return STRING_CONSTANT + callNode + STRING_CONSTANT + ref ;
Code	return STRING_CONSTANT + callNode + STRING_CONSTANT + ref ;
Distance : 7

44
Tree	return FastFourierTransformer . abs () . jsRoot == NUMBER_CONSTANT ;
Code	return FastFourierTransformer . abs () . jsRoot == NUMBER_CONSTANT ;
Distance : 8

45
Tree	return val ;
Code	return val ;
Distance : 1

46
Tree	return FastFourierTransformer . abs ( tolerance ) ;
Code	return FastFourierTransformer . abs ( tolerance ) ;
Distance : 6

47
Tree	return STRING_CONSTANT + expr + STRING_CONSTANT + callNode ;
Code	return STRING_CONSTANT + expr + STRING_CONSTANT + callNode ;
Distance : 7

48
Tree	return STRING_CONSTANT + callNode + STRING_CONSTANT + FastMath ;
Code	return STRING_CONSTANT + callNode + STRING_CONSTANT + FastMath ;
Distance : 7

49
Tree	return TransformUtils ? f.length : FunctionFlavor.NORMAL ;
Code	return TransformUtils ? f.length : FunctionFlavor.NORMAL ;
Distance : 5

50
Tree	return ! directly ( parent ) ;
Code	return ! directly ( parent ) ;
Distance : 5

51
Tree	return ! NodeUtil ;
Code	return ! NodeUtil ;
Distance : 2

52
Tree	return parent . abs () ? null : parent ;
Code	return parent . abs () ? null : parent ;
Distance : 8

53
Tree	return ! val ;
Code	return ! val ;
Distance : 2

54
Tree	return FastFourierTransformer . clone ( parent ) ? null : parent ;
Code	return FastFourierTransformer . clone ( parent ) ? null : parent ;
Distance : 10

55
Tree	return FastFourierTransformer . abs () . success == NUMBER_CONSTANT ;
Code	return FastFourierTransformer . abs () . success == NUMBER_CONSTANT ;
Distance : 8

56
Tree	return STRING_CONSTANT + ref + STRING_CONSTANT + callNode ;
Code	return STRING_CONSTANT + ref + STRING_CONSTANT + callNode ;
Distance : 7

57
Tree	return warningsGuard ;
Code	return warningsGuard ;
Distance : 1

58
Tree	return FastFourierTransformer . getToken ( parent ) ;
Code	return FastFourierTransformer . getToken ( parent ) ;
Distance : 6

59
Tree	return STRING_CONSTANT + callNode + STRING_CONSTANT + ADDITIVE_MODE ;
Code	return STRING_CONSTANT + callNode + STRING_CONSTANT + ADDITIVE_MODE ;
Distance : 7

60
Tree	return this == tolerance ;
Code	return this == tolerance ;
Distance : 3

61
Tree	return new SinFunction ( point ) ;
Code	return new SinFunction ( point ) ;
Distance : 5

62
Tree	return STRING_CONSTANT + DurationType + STRING_CONSTANT + callNode ;
Code	return STRING_CONSTANT + DurationType + STRING_CONSTANT + callNode ;
Distance : 7

63
Tree	return FastFourierTransformer . abs () ? null : tolerance ;
Code	return FastFourierTransformer . abs () ? null : tolerance ;
Distance : 8

64
Tree	return ! scopeCreator ;
Code	return ! scopeCreator ;
Distance : 2

65
Tree	return parent . abs () ? null : blind ;
Code	return parent . abs () ? null : blind ;
Distance : 8

66
Tree	return FastFourierTransformer + NUMBER_CONSTANT ;
Code	return FastFourierTransformer + NUMBER_CONSTANT ;
Distance : 3

67
Tree	return f.length ;
Code	return f.length ;
Distance : 1

68
Tree	return false ;
Code	return false ;
Distance : 0

69
Tree	return Reach.ALL ;
Code	return Reach.ALL ;
Distance : 1

70
Tree	return warningsGuard ? f.length : FunctionFlavor.NORMAL ;
Code	return warningsGuard ? f.length : FunctionFlavor.NORMAL ;
Distance : 5

71
Tree	return parent . abs ( parent ) ? null : tolerance ;
Code	return parent . abs ( parent ) ? null : tolerance ;
Distance : 10

72
Tree	return new SinFunction ( tolerance ) ;
Code	return new SinFunction ( tolerance ) ;
Distance : 5

73
Tree	return parent + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return parent + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

74
Tree	return this == rawType ;
Code	return this == rawType ;
Distance : 3

75
Tree	return FastFourierTransformer . abs ( parent ) ? null : tolerance ;
Code	return FastFourierTransformer . abs ( parent ) ? null : tolerance ;
Distance : 10

76
Tree	return NodeUtil + NUMBER_CONSTANT ;
Code	return NodeUtil + NUMBER_CONSTANT ;
Distance : 3

77
Tree	return parent < < NUMBER_CONSTANT ;
Code	return parent < < NUMBER_CONSTANT ;
Distance : 4

78
Tree	return this == scopeCreator ;
Code	return this == scopeCreator ;
Distance : 3

79
Tree	return STRING_CONSTANT + callNode + STRING_CONSTANT + expr ;
Code	return STRING_CONSTANT + callNode + STRING_CONSTANT + expr ;
Distance : 7

80
Tree	return parent . abs () ? null : tolerance ;
Code	return parent . abs () ? null : tolerance ;
Distance : 8

81
Tree	return parent + obj2 . clone ( parent ) ;
Code	return parent + obj2 . clone ( parent ) ;
Distance : 8

82
Tree	return FastFourierTransformer . abs () ? null : parent ;
Code	return FastFourierTransformer . abs () ? null : parent ;
Distance : 8

83
Tree	return STRING_CONSTANT + callNode + STRING_CONSTANT + tolerance ;
Code	return STRING_CONSTANT + callNode + STRING_CONSTANT + tolerance ;
Distance : 7

84
Tree	return new Es6SyntacticScopeCreator ( point ) ;
Code	return new Es6SyntacticScopeCreator ( point ) ;
Distance : 5

85
Tree	return TransformUtils + NUMBER_CONSTANT ;
Code	return TransformUtils + NUMBER_CONSTANT ;
Distance : 3

86
Tree	return StrictMode.SLOPPY ;
Code	return StrictMode.SLOPPY ;
Distance : 1

87
Tree	return Color.BLACK ;
Code	return Color.BLACK ;
Distance : 1

88
Tree	return NodeUtil . abs ( parent ) ;
Code	return NodeUtil . abs ( parent ) ;
Distance : 6

89
Tree	return new LUDecompositionImpl ( point ) ;
Code	return new LUDecompositionImpl ( point ) ;
Distance : 5

90
Tree	return this == randomData ;
Code	return this == randomData ;
Distance : 3

91
Tree	return child.parent ;
Code	return child.parent ;
Distance : 1

92
Tree	return val ? f.length : FunctionFlavor.NORMAL ;
Code	return val ? f.length : FunctionFlavor.NORMAL ;
Distance : 5

93
Tree	return parent . clone ( parent ) ;
Code	return parent . clone ( parent ) ;
Distance : 6

94
Tree	return new Random ( tolerance ) ;
Code	return new Random ( tolerance ) ;
Distance : 5

95
Tree	return FastFourierTransformer ? LocalizedFormats.CARDAN_ANGLES_SINGULARITY : FunctionFlavor.NORMAL ;
Code	return FastFourierTransformer ? LocalizedFormats.CARDAN_ANGLES_SINGULARITY : FunctionFlavor.NORMAL ;
Distance : 5

96
Tree	return FastFourierTransformer . abs () ? null : blind ;
Code	return FastFourierTransformer . abs () ? null : blind ;
Distance : 8

97
Tree	return randomData ? f.length : FunctionFlavor.NORMAL ;
Code	return randomData ? f.length : FunctionFlavor.NORMAL ;
Distance : 5

98
Tree	return FastFourierTransformer + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return FastFourierTransformer + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

99
Tree	return ExpansionMode.MULTIPLICATIVE ;
Code	return ExpansionMode.MULTIPLICATIVE ;
Distance : 1

100
Tree	return this == FastMath ;
Code	return this == FastMath ;
Distance : 3

101
Tree	return this == height ;
Code	return this == height ;
Distance : 3

102
Tree	return FastMath ? f.length : FunctionFlavor.NORMAL ;
Code	return FastMath ? f.length : FunctionFlavor.NORMAL ;
Distance : 5

103
Tree	return tolerance + NUMBER_CONSTANT ;
Code	return tolerance + NUMBER_CONSTANT ;
Distance : 3

104
Tree	return NodeUtil . abs ( parent ) ? null : tolerance ;
Code	return NodeUtil . abs ( parent ) ? null : tolerance ;
Distance : 10

105
Tree	return FastFourierTransformer . abs () ? null : S ;
Code	return FastFourierTransformer . abs () ? null : S ;
Distance : 8

106
Tree	return parent . clone ( parent ) ? null : tolerance ;
Code	return parent . clone ( parent ) ? null : tolerance ;
Distance : 10

107
Tree	return FastFourierTransformer . clone ( parent ) ;
Code	return FastFourierTransformer . clone ( parent ) ;
Distance : 6

108
Tree	return parent . abs ( tolerance ) ;
Code	return parent . abs ( tolerance ) ;
Distance : 6

109
Tree	return parent . abs ( parent ) ? null : parent ;
Code	return parent . abs ( parent ) ? null : parent ;
Distance : 10

110
Tree	return tolerance . abs ( parent ) ;
Code	return tolerance . abs ( parent ) ;
Distance : 6

111
Tree	return NodeUtil ? f.length : FunctionFlavor.NORMAL ;
Code	return NodeUtil ? f.length : FunctionFlavor.NORMAL ;
Distance : 5

112
Tree	return parent . abs () . jsRoot == NUMBER_CONSTANT ;
Code	return parent . abs () . jsRoot == NUMBER_CONSTANT ;
Distance : 8

113
Tree	return tolerance + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return tolerance + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

114
Tree	return TransformUtils . abs ( parent ) ;
Code	return TransformUtils . abs ( parent ) ;
Distance : 6

115
Tree	return parent . abs () ? null : obj1 ;
Code	return parent . abs () ? null : obj1 ;
Distance : 8

116
Tree	return TransformUtils + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return TransformUtils + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

117
Tree	return ! directly ( tolerance ) ;
Code	return ! directly ( tolerance ) ;
Distance : 5

118
Tree	return val < < NUMBER_CONSTANT ;
Code	return val < < NUMBER_CONSTANT ;
Distance : 4

119
Tree	return new LUDecompositionImpl ( tolerance ) ;
Code	return new LUDecompositionImpl ( tolerance ) ;
Distance : 5

120
Tree	return FastFourierTransformer + obj2 . abs ( parent ) ;
Code	return FastFourierTransformer + obj2 . abs ( parent ) ;
Distance : 8

121
Tree	return warningsGuard < < NUMBER_CONSTANT ;
Code	return warningsGuard < < NUMBER_CONSTANT ;
Distance : 4

122
Tree	return NodeUtil + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return NodeUtil + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

123
Tree	return ! isShadowingAllowed ( tolerance ) ;
Code	return ! isShadowingAllowed ( tolerance ) ;
Distance : 5

124
Tree	return new LUDecompositionImpl ( commonTypes ) ;
Code	return new LUDecompositionImpl ( commonTypes ) ;
Distance : 5

125
Tree	return new ArrayRealVector ( tolerance ) ;
Code	return new ArrayRealVector ( tolerance ) ;
Distance : 5

126
Tree	return randomData < < NUMBER_CONSTANT ;
Code	return randomData < < NUMBER_CONSTANT ;
Distance : 4

127
Tree	return ArithmeticUtils ;
Code	return ArithmeticUtils ;
Distance : 1

128
Tree	return ! getDataset ( tolerance ) ;
Code	return ! getDataset ( tolerance ) ;
Distance : 5

129
Tree	return ! getDataset ( parent ) ;
Code	return ! getDataset ( parent ) ;
Distance : 5

130
Tree	return FastFourierTransformer . abs () ? null : obj1 ;
Code	return FastFourierTransformer . abs () ? null : obj1 ;
Distance : 8

131
Tree	return parent . abs ( parent ) ? null : tol ;
Code	return parent . abs ( parent ) ? null : tol ;
Distance : 10

132
Tree	return FastFourierTransformer . clone () . jsRoot == NUMBER_CONSTANT ;
Code	return FastFourierTransformer . clone () . jsRoot == NUMBER_CONSTANT ;
Distance : 8

133
Tree	return FastMath < < NUMBER_CONSTANT ;
Code	return FastMath < < NUMBER_CONSTANT ;
Distance : 4

134
Tree	return parent ? f.length : FunctionFlavor.NORMAL ;
Code	return parent ? f.length : FunctionFlavor.NORMAL ;
Distance : 5

135
Tree	return FastFourierTransformer . abs ( parent ) ? null : parent ;
Code	return FastFourierTransformer . abs ( parent ) ? null : parent ;
Distance : 10

136
Tree	return ! s ;
Code	return ! s ;
Distance : 2

137
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , randomData , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , randomData , tolerance ) ;
Distance : 12

138
Tree	return FastFourierTransformer . abs ( parent ) ;
Code	return FastFourierTransformer . abs ( parent ) ;
Distance : 6

139
Tree	return parent . abs ( parent ) ;
Code	return parent . abs ( parent ) ;
Distance : 6

140
Tree	return val + NUMBER_CONSTANT ;
Code	return val + NUMBER_CONSTANT ;
Distance : 3

141
Tree	return FastFourierTransformer . clone () . success == NUMBER_CONSTANT ;
Code	return FastFourierTransformer . clone () . success == NUMBER_CONSTANT ;
Distance : 8

142
Tree	return ! isShadowingAllowed ( parent ) ;
Code	return ! isShadowingAllowed ( parent ) ;
Distance : 5

143
Tree	return NodeUtil . abs () . jsRoot == NUMBER_CONSTANT ;
Code	return NodeUtil . abs () . jsRoot == NUMBER_CONSTANT ;
Distance : 8

144
Tree	return parent + NUMBER_CONSTANT ;
Code	return parent + NUMBER_CONSTANT ;
Distance : 3

145
Tree	return warningsGuard + NUMBER_CONSTANT ;
Code	return warningsGuard + NUMBER_CONSTANT ;
Distance : 3

146
Tree	return STRING_CONSTANT + callNode . getClass ( tolerance ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + callNode . getClass ( tolerance ) + STRING_CONSTANT ;
Distance : 10

147
Tree	return warningsGuard + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return warningsGuard + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

148
Tree	return ! checkEquivalenceHelper ( tolerance ) ;
Code	return ! checkEquivalenceHelper ( tolerance ) ;
Distance : 5

149
Tree	return FastMath + NUMBER_CONSTANT ;
Code	return FastMath + NUMBER_CONSTANT ;
Distance : 3

150
Tree	return new SinFunction ( commonTypes ) ;
Code	return new SinFunction ( commonTypes ) ;
Distance : 5

151
Tree	return ! isEnhancedFor ( tolerance ) ;
Code	return ! isEnhancedFor ( tolerance ) ;
Distance : 5

152
Tree	return ! getReferenceName ( tolerance ) ;
Code	return ! getReferenceName ( tolerance ) ;
Distance : 5

153
Tree	return parent + obj2 . clone ( tolerance ) ;
Code	return parent + obj2 . clone ( tolerance ) ;
Distance : 8

154
Tree	return parent . clone () . jsRoot == NUMBER_CONSTANT ;
Code	return parent . clone () . jsRoot == NUMBER_CONSTANT ;
Distance : 8

155
Tree	return FastFourierTransformer + obj2 . clone ( tolerance ) ;
Code	return FastFourierTransformer + obj2 . clone ( tolerance ) ;
Distance : 8

156
Tree	return ArithmeticUtils + NUMBER_CONSTANT ;
Code	return ArithmeticUtils + NUMBER_CONSTANT ;
Distance : 3

157
Tree	return FastFourierTransformer + tolerance . clone ( parent ) ;
Code	return FastFourierTransformer + tolerance . clone ( parent ) ;
Distance : 8

158
Tree	return tolerance . abs () . jsRoot == NUMBER_CONSTANT ;
Code	return tolerance . abs () . jsRoot == NUMBER_CONSTANT ;
Distance : 8

159
Tree	return ArithmeticUtils + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return ArithmeticUtils + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

160
Tree	return ! setKey ;
Code	return ! setKey ;
Distance : 2

161
Tree	return STRING_CONSTANT + callNode . getClass ( callNode ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + callNode . getClass ( callNode ) + STRING_CONSTANT ;
Distance : 10

162
Tree	return STRING_CONSTANT + callNode . clone ( tolerance ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + callNode . clone ( tolerance ) + STRING_CONSTANT ;
Distance : 10

163
Tree	return FastFourierTransformer + obj2 . clone ( callNode ) ;
Code	return FastFourierTransformer + obj2 . clone ( callNode ) ;
Distance : 8

164
Tree	return parent + obj2 . abs ( parent ) ;
Code	return parent + obj2 . abs ( parent ) ;
Distance : 8

165
Tree	return TransformUtils . abs () . jsRoot == NUMBER_CONSTANT ;
Code	return TransformUtils . abs () . jsRoot == NUMBER_CONSTANT ;
Distance : 8

166
Tree	return ! matchesOtherAffix ( tolerance ) ;
Code	return ! matchesOtherAffix ( tolerance ) ;
Distance : 5

167
Tree	return randomData + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return randomData + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

168
Tree	return STRING_CONSTANT + callNode . clone ( callNode ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + callNode . clone ( callNode ) + STRING_CONSTANT ;
Distance : 10

169
Tree	return STRING_CONSTANT + rawType . getClass ( tolerance ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + rawType . getClass ( tolerance ) + STRING_CONSTANT ;
Distance : 10

170
Tree	return STRING_CONSTANT + rawType . getClass ( callNode ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + rawType . getClass ( callNode ) + STRING_CONSTANT ;
Distance : 10

171
Tree	return parent + obj2 . clone ( callNode ) ;
Code	return parent + obj2 . clone ( callNode ) ;
Distance : 8

172
Tree	return FastMath + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return FastMath + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

173
Tree	return randomData + NUMBER_CONSTANT ;
Code	return randomData + NUMBER_CONSTANT ;
Distance : 3

174
Tree	return val + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return val + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

175
Tree	return STRING_CONSTANT + ref . getClass ( callNode ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + ref . getClass ( callNode ) + STRING_CONSTANT ;
Distance : 10

176
Tree	return STRING_CONSTANT + callNode . abs ( tolerance ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + callNode . abs ( tolerance ) + STRING_CONSTANT ;
Distance : 10

177
Tree	return STRING_CONSTANT + callNode . abs ( callNode ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + callNode . abs ( callNode ) + STRING_CONSTANT ;
Distance : 10

178
Tree	return parent % NUMBER_CONSTANT ;
Code	return parent % NUMBER_CONSTANT ;
Distance : 3

179
Tree	return TransformUtils % NUMBER_CONSTANT ;
Code	return TransformUtils % NUMBER_CONSTANT ;
Distance : 3

180
Tree	return FastFourierTransformer % NUMBER_CONSTANT ;
Code	return FastFourierTransformer % NUMBER_CONSTANT ;
Distance : 3

181
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , tol , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , tol , tolerance ) ;
Distance : 12

182
Tree	return NodeUtil % NUMBER_CONSTANT ;
Code	return NodeUtil % NUMBER_CONSTANT ;
Distance : 3

183
Tree	return tolerance % NUMBER_CONSTANT ;
Code	return tolerance % NUMBER_CONSTANT ;
Distance : 3

184
Tree	return ArithmeticUtils < < NUMBER_CONSTANT ;
Code	return ArithmeticUtils < < NUMBER_CONSTANT ;
Distance : 4

185
Tree	return FastFourierTransformer + parent . clone ( parent ) ;
Code	return FastFourierTransformer + parent . clone ( parent ) ;
Distance : 8

186
Tree	return val % NUMBER_CONSTANT ;
Code	return val % NUMBER_CONSTANT ;
Distance : 3

187
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , M3 , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , M3 , tolerance ) ;
Distance : 12

188
Tree	return true ; Class
Code	return true ; Class
Distance : 2

189
Tree	return STRING_CONSTANT + ref . getClass ( tolerance ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + ref . getClass ( tolerance ) + STRING_CONSTANT ;
Distance : 10

190
Tree	return true ; Test
Code	return true ; Test
Distance : 2

191
Tree	return true ; MathRuntimeException
Code	return true ; MathRuntimeException
Distance : 2

192
Tree	return warningsGuard % NUMBER_CONSTANT ;
Code	return warningsGuard % NUMBER_CONSTANT ;
Distance : 3

193
Tree	return true ; {}
Code	return true ; {}
Distance : 2

194
Tree	return true ; f
Code	return true ; f
Distance : 2

195
Tree	return true ; ParamChecks
Code	return true ; ParamChecks
Distance : 2

196
Tree	return randomData % NUMBER_CONSTANT ;
Code	return randomData % NUMBER_CONSTANT ;
Distance : 3

197
Tree	return true ; Preconditions
Code	return true ; Preconditions
Distance : 2

198
Tree	return true ; -
Code	return true ; -
Distance : 2

199
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , randomData , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , randomData , scopeCreator ) ;
Distance : 12

========================================================================


========================================================================
Example Number: 18
Parent Code is: 
return TernaryValue.TRUE ;
-------------------------------------------------------------------------------
Child code is: 
return TernaryValue.UNKNOWN ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (40{val=TernaryValue.TRUE}) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (40{val=TernaryValue.UNKNOWN}) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/75/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	return ldp . createsScope () . getParser () ;
Code	return ldp . createsScope () . getParser () ;
Distance : 7

1
Tree	return TernaryValue.TRUE . createsScope () . populationSize ;
Code	return TernaryValue.TRUE . createsScope () . populationSize ;
Distance : 6

2
Tree	return TernaryValue.TRUE . createsScope () . jsRoot ;
Code	return TernaryValue.TRUE . createsScope () . jsRoot ;
Distance : 6

3
Tree	return TernaryValue.UNKNOWN . createsScope () . years ;
Code	return TernaryValue.UNKNOWN . createsScope () . years ;
Distance : 5

4
Tree	return TernaryValue.UNKNOWN . createsScope () . value ;
Code	return TernaryValue.UNKNOWN . createsScope () . value ;
Distance : 5

5
Tree	return target.length . createsScope ( null ) ;
Code	return target.length . createsScope ( null ) ;
Distance : 6

6
Tree	return SHORT_PREFIX_STYLE . createsScope ( parent ) ;
Code	return SHORT_PREFIX_STYLE . createsScope ( parent ) ;
Distance : 6

7
Tree	return y2 . createsScope ( parent ) ;
Code	return y2 . createsScope ( parent ) ;
Distance : 6

8
Tree	return EscapeUtils . createsScope ( parent ) ;
Code	return EscapeUtils . createsScope ( parent ) ;
Distance : 6

9
Tree	return RegularizedBeta . createsScope ( null ) ;
Code	return RegularizedBeta . createsScope ( null ) ;
Distance : 6

10
Tree	return SHORT_PREFIX_STYLE . createsScope ( null ) ;
Code	return SHORT_PREFIX_STYLE . createsScope ( null ) ;
Distance : 6

11
Tree	return y2 . createsScope ( null ) ;
Code	return y2 . createsScope ( null ) ;
Distance : 6

12
Tree	return numberOfTrials . createsScope ( parent ) ;
Code	return numberOfTrials . createsScope ( parent ) ;
Distance : 6

13
Tree	return ( parent ) that . getDaysInYearMax () ;
Code	return ( parent ) that . getDaysInYearMax () ;
Distance : 7

14
Tree	return functionNames . createsScope () . getParser () ;
Code	return functionNames . createsScope () . getParser () ;
Distance : 7

15
Tree	return functionNames . createsScope () ;
Code	return functionNames . createsScope () ;
Distance : 4

16
Tree	return EscapeUtils . createsScope ( null ) ;
Code	return EscapeUtils . createsScope ( null ) ;
Distance : 6

17
Tree	return sumDifference ( STRING_CONSTANT ) ;
Code	return sumDifference ( STRING_CONSTANT ) ;
Distance : 4

18
Tree	return ( parent ) model . getDaysInYearMax () ;
Code	return ( parent ) model . getDaysInYearMax () ;
Distance : 7

19
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; MathRuntimeException
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; MathRuntimeException
Distance : 14

20
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; mock
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; mock
Distance : 14

21
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; array
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; array
Distance : 14

22
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; class
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; class
Distance : 14

23
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; notifyListeners
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; notifyListeners
Distance : 14

24
Tree	return null ; i
Code	return null ; i
Distance : 2

25
Tree	return null ; value
Code	return null ; value
Distance : 2

26
Tree	return null ; options
Code	return null ; options
Distance : 2

27
Tree	return ( _boundaries ) object . getDaysInYearMax () ;
Code	return ( _boundaries ) object . getDaysInYearMax () ;
Distance : 7

28
Tree	return ( _boundaries ) MOCKING_PROGRESS . getDaysInYearMax () ;
Code	return ( _boundaries ) MOCKING_PROGRESS . getDaysInYearMax () ;
Distance : 7

29
Tree	return ( parent ) object . createsScope () ;
Code	return ( parent ) object . createsScope () ;
Distance : 7

30
Tree	return TernaryValue.TRUE . createsScope () . scalar ;
Code	return TernaryValue.TRUE . createsScope () . scalar ;
Distance : 6

31
Tree	return parent ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Code	return parent ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Distance : 4

32
Tree	return inMemoryClassObjects ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Code	return inMemoryClassObjects ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Distance : 4

33
Tree	return numberOfTrials ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Code	return numberOfTrials ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Distance : 4

34
Tree	return EscapeUtils ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Code	return EscapeUtils ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Distance : 4

35
Tree	return inMemoryClassObjects . createsScope () ? null : obj1 ;
Code	return inMemoryClassObjects . createsScope () ? null : obj1 ;
Distance : 8

36
Tree	return parent . createsScope () . maxY ;
Code	return parent . createsScope () . maxY ;
Distance : 6

37
Tree	return parent . createsScope () . TRUTHY ;
Code	return parent . createsScope () . TRUTHY ;
Distance : 6

38
Tree	return parent . createsScope () . scalar ;
Code	return parent . createsScope () . scalar ;
Distance : 6

39
Tree	return TernaryValue.TRUE ;
Code	return TernaryValue.TRUE ;
Distance : 1

40
Tree	return inMemoryClassObjects . createsScope () . populationSize ;
Code	return inMemoryClassObjects . createsScope () . populationSize ;
Distance : 6

41
Tree	return this . defaultOutlineStroke . TRUTHY ;
Code	return this . defaultOutlineStroke . TRUTHY ;
Distance : 5

42
Tree	return this . defaultOutlineStroke . createsScope () ;
Code	return this . defaultOutlineStroke . createsScope () ;
Distance : 6

43
Tree	return numberOfTrials . createsScope () ? null : parent ;
Code	return numberOfTrials . createsScope () ? null : parent ;
Distance : 8

44
Tree	return inMemoryClassObjects . createsScope () . maxY ;
Code	return inMemoryClassObjects . createsScope () . maxY ;
Distance : 6

45
Tree	return this . commonTypes . getEmptyObjectLiteral () ;
Code	return this . commonTypes . getEmptyObjectLiteral () ;
Distance : 6

46
Tree	return parent . createsScope ( STRING_CONSTANT ) ;
Code	return parent . createsScope ( STRING_CONSTANT ) ;
Distance : 6

47
Tree	return new SphericalCoordinates ( STRING_CONSTANT ) ;
Code	return new SphericalCoordinates ( STRING_CONSTANT ) ;
Distance : 5

48
Tree	return this . commonTypes . shouldGenerateTypedExterns () ;
Code	return this . commonTypes . shouldGenerateTypedExterns () ;
Distance : 6

49
Tree	return this . commonTypes . compare () ;
Code	return this . commonTypes . compare () ;
Distance : 6

50
Tree	return inMemoryClassObjects . createsScope ( STRING_CONSTANT ) ;
Code	return inMemoryClassObjects . createsScope ( STRING_CONSTANT ) ;
Distance : 6

51
Tree	return this . commonTypes . getNameNode () ;
Code	return this . commonTypes . getNameNode () ;
Distance : 6

52
Tree	return this . defaultOutlineStroke . maxY ;
Code	return this . defaultOutlineStroke . maxY ;
Distance : 5

53
Tree	return this . defaultOutlineStroke . primitiveType ;
Code	return this . defaultOutlineStroke . primitiveType ;
Distance : 5

54
Tree	return new SimpleAffix ( STRING_CONSTANT ) ;
Code	return new SimpleAffix ( STRING_CONSTANT ) ;
Distance : 5

55
Tree	return null ;
Code	return null ;
Distance : 1

56
Tree	return parent ;
Code	return parent ;
Distance : 1

57
Tree	return inMemoryClassObjects ;
Code	return inMemoryClassObjects ;
Distance : 1

58
Tree	return numberOfTrials ;
Code	return numberOfTrials ;
Distance : 1

59
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

60
Tree	return EscapeUtils ;
Code	return EscapeUtils ;
Distance : 1

61
Tree	return STRING_CONSTANT + STRING_CONSTANT ;
Code	return STRING_CONSTANT + STRING_CONSTANT ;
Distance : 3

62
Tree	return y2 ;
Code	return y2 ;
Distance : 1

63
Tree	return SHORT_PREFIX_STYLE ;
Code	return SHORT_PREFIX_STYLE ;
Distance : 1

64
Tree	return RegularizedBeta ;
Code	return RegularizedBeta ;
Distance : 1

65
Tree	return target.length ;
Code	return target.length ;
Distance : 1

66
Tree	return this . commonTypes . TRUTHY ;
Code	return this . commonTypes . TRUTHY ;
Distance : 5

67
Tree	return this . commonTypes . createsScope () ;
Code	return this . commonTypes . createsScope () ;
Distance : 6

68
Tree	return inMemoryClassObjects . createsScope () . TRUTHY ;
Code	return inMemoryClassObjects . createsScope () . TRUTHY ;
Distance : 6

69
Tree	return ldp ;
Code	return ldp ;
Distance : 1

70
Tree	return this . maxY . TRUTHY ;
Code	return this . maxY . TRUTHY ;
Distance : 5

71
Tree	return inMemoryClassObjects . createsScope () . scalar ;
Code	return inMemoryClassObjects . createsScope () . scalar ;
Distance : 6

72
Tree	return functionNames ;
Code	return functionNames ;
Distance : 1

73
Tree	return TernaryValue.UNKNOWN ;
Code	return TernaryValue.UNKNOWN ;
Distance : 0

74
Tree	return parent . createsScope () ? null : parent ;
Code	return parent . createsScope () ? null : parent ;
Distance : 8

75
Tree	return parent . createsScope () ? null : numberOfTrials ;
Code	return parent . createsScope () ? null : numberOfTrials ;
Distance : 8

76
Tree	return numberOfTrials . createsScope () ? null : obj1 ;
Code	return numberOfTrials . createsScope () ? null : obj1 ;
Distance : 8

77
Tree	return this . printExterns . TRUTHY ;
Code	return this . printExterns . TRUTHY ;
Distance : 5

78
Tree	return parent . createsScope () ? null : obj1 ;
Code	return parent . createsScope () ? null : obj1 ;
Distance : 8

79
Tree	return EscapeUtils . createsScope () . getParser () ;
Code	return EscapeUtils . createsScope () . getParser () ;
Distance : 7

80
Tree	return target.length . createsScope ( STRING_CONSTANT ) ;
Code	return target.length . createsScope ( STRING_CONSTANT ) ;
Distance : 6

81
Tree	return new BooleanOutcomePair ( STRING_CONSTANT ) ;
Code	return new BooleanOutcomePair ( STRING_CONSTANT ) ;
Distance : 5

82
Tree	return y2 . createsScope () ;
Code	return y2 . createsScope () ;
Distance : 4

83
Tree	return inMemoryClassObjects . createsScope () . getParser () ;
Code	return inMemoryClassObjects . createsScope () . getParser () ;
Distance : 7

84
Tree	return this . maxY . createsScope () ;
Code	return this . maxY . createsScope () ;
Distance : 6

85
Tree	return EscapeUtils . createsScope () ? null : parent ;
Code	return EscapeUtils . createsScope () ? null : parent ;
Distance : 8

86
Tree	return ldp . createsScope ( STRING_CONSTANT ) ;
Code	return ldp . createsScope ( STRING_CONSTANT ) ;
Distance : 6

87
Tree	return y2 . createsScope () . getParser () ;
Code	return y2 . createsScope () . getParser () ;
Distance : 7

88
Tree	return SHORT_PREFIX_STYLE . createsScope () ;
Code	return SHORT_PREFIX_STYLE . createsScope () ;
Distance : 4

89
Tree	return precedence ( STRING_CONSTANT ) ;
Code	return precedence ( STRING_CONSTANT ) ;
Distance : 4

90
Tree	return this . commonTypes . incrementalCheckMode () ;
Code	return this . commonTypes . incrementalCheckMode () ;
Distance : 6

91
Tree	return new FieldODEState ( STRING_CONSTANT ) ;
Code	return new FieldODEState ( STRING_CONSTANT ) ;
Distance : 5

92
Tree	return ( parent ) object . getDaysInYearMax () ;
Code	return ( parent ) object . getDaysInYearMax () ;
Distance : 7

93
Tree	return y2 . createsScope ( STRING_CONSTANT ) ;
Code	return y2 . createsScope ( STRING_CONSTANT ) ;
Distance : 6

94
Tree	return parent . createsScope () . populationSize ;
Code	return parent . createsScope () . populationSize ;
Distance : 6

95
Tree	return this . commonTypes . maxY ;
Code	return this . commonTypes . maxY ;
Distance : 5

96
Tree	return getDataset ( STRING_CONSTANT ) ;
Code	return getDataset ( STRING_CONSTANT ) ;
Distance : 4

97
Tree	return this . printExterns . createsScope () ;
Code	return this . printExterns . createsScope () ;
Distance : 6

98
Tree	return numberOfTrials . createsScope ( STRING_CONSTANT ) ;
Code	return numberOfTrials . createsScope ( STRING_CONSTANT ) ;
Distance : 6

99
Tree	return inMemoryClassObjects . createsScope ( null ) ;
Code	return inMemoryClassObjects . createsScope ( null ) ;
Distance : 6

100
Tree	return isLValueRootedInGlobalScope ( STRING_CONSTANT ) ;
Code	return isLValueRootedInGlobalScope ( STRING_CONSTANT ) ;
Distance : 4

101
Tree	return new CrossModuleCodeMotion ( STRING_CONSTANT ) ;
Code	return new CrossModuleCodeMotion ( STRING_CONSTANT ) ;
Distance : 5

102
Tree	return functionNames . createsScope ( STRING_CONSTANT ) ;
Code	return functionNames . createsScope ( STRING_CONSTANT ) ;
Distance : 6

103
Tree	return RegularizedBeta . createsScope () ;
Code	return RegularizedBeta . createsScope () ;
Distance : 4

104
Tree	return this . commonTypes . primitiveType ;
Code	return this . commonTypes . primitiveType ;
Distance : 5

105
Tree	return inMemoryClassObjects . createsScope () ? null : parent ;
Code	return inMemoryClassObjects . createsScope () ? null : parent ;
Distance : 8

106
Tree	return SHORT_PREFIX_STYLE . createsScope ( STRING_CONSTANT ) ;
Code	return SHORT_PREFIX_STYLE . createsScope ( STRING_CONSTANT ) ;
Distance : 6

107
Tree	return SHORT_PREFIX_STYLE . createsScope () . getParser () ;
Code	return SHORT_PREFIX_STYLE . createsScope () . getParser () ;
Distance : 7

108
Tree	return inMemoryClassObjects . createsScope () ? null : numberOfTrials ;
Code	return inMemoryClassObjects . createsScope () ? null : numberOfTrials ;
Distance : 8

109
Tree	return parent . createsScope () ;
Code	return parent . createsScope () ;
Distance : 4

110
Tree	return parent . createsScope ( parent ) ;
Code	return parent . createsScope ( parent ) ;
Distance : 6

111
Tree	return ( target.length ) MOCKING_PROGRESS . getDaysInYearMax () ;
Code	return ( target.length ) MOCKING_PROGRESS . getDaysInYearMax () ;
Distance : 7

112
Tree	return EscapeUtils . createsScope () ? null : obj1 ;
Code	return EscapeUtils . createsScope () ? null : obj1 ;
Distance : 8

113
Tree	return parent . createsScope () . years ;
Code	return parent . createsScope () . years ;
Distance : 6

114
Tree	return new J2clClinitPrunerPass ( STRING_CONSTANT ) ;
Code	return new J2clClinitPrunerPass ( STRING_CONSTANT ) ;
Distance : 5

115
Tree	return createXYAreaChart ( STRING_CONSTANT ) ;
Code	return createXYAreaChart ( STRING_CONSTANT ) ;
Distance : 4

116
Tree	return new directions ( STRING_CONSTANT ) ;
Code	return new directions ( STRING_CONSTANT ) ;
Distance : 5

117
Tree	return numberOfTrials . createsScope () ;
Code	return numberOfTrials . createsScope () ;
Distance : 4

118
Tree	return numberOfTrials . createsScope ( null ) ;
Code	return numberOfTrials . createsScope ( null ) ;
Distance : 6

119
Tree	return RegularizedBeta . createsScope () . getParser () ;
Code	return RegularizedBeta . createsScope () . getParser () ;
Distance : 7

120
Tree	return numberOfTrials . createsScope () . getParser () ;
Code	return numberOfTrials . createsScope () . getParser () ;
Distance : 7

121
Tree	return numberOfTrials . createsScope () . populationSize ;
Code	return numberOfTrials . createsScope () . populationSize ;
Distance : 6

122
Tree	return new LinkedFlowScope ( STRING_CONSTANT ) ;
Code	return new LinkedFlowScope ( STRING_CONSTANT ) ;
Distance : 5

123
Tree	return ( parent ) MOCKING_PROGRESS . getDaysInYearMax () ;
Code	return ( parent ) MOCKING_PROGRESS . getDaysInYearMax () ;
Distance : 7

124
Tree	return RegularizedBeta . createsScope ( STRING_CONSTANT ) ;
Code	return RegularizedBeta . createsScope ( STRING_CONSTANT ) ;
Distance : 6

125
Tree	return parent . createsScope () . getParser () ;
Code	return parent . createsScope () . getParser () ;
Distance : 7

126
Tree	return firstNonBottom ( STRING_CONSTANT ) ;
Code	return firstNonBottom ( STRING_CONSTANT ) ;
Distance : 4

127
Tree	return inMemoryClassObjects . createsScope ( parent ) ;
Code	return inMemoryClassObjects . createsScope ( parent ) ;
Distance : 6

128
Tree	return createComplex ( STRING_CONSTANT ) ;
Code	return createComplex ( STRING_CONSTANT ) ;
Distance : 4

129
Tree	return new GitContributionsProvider ( STRING_CONSTANT ) ;
Code	return new GitContributionsProvider ( STRING_CONSTANT ) ;
Distance : 5

130
Tree	return new HarmonicFunction ( STRING_CONSTANT ) ;
Code	return new HarmonicFunction ( STRING_CONSTANT ) ;
Distance : 5

131
Tree	return target.length . createsScope () ;
Code	return target.length . createsScope () ;
Distance : 4

132
Tree	return parent . createsScope ( null ) ;
Code	return parent . createsScope ( null ) ;
Distance : 6

133
Tree	return this . commonTypes . UNKNOWN ;
Code	return this . commonTypes . UNKNOWN ;
Distance : 5

134
Tree	return this . domainCrosshairStroke . TRUTHY ;
Code	return this . domainCrosshairStroke . TRUTHY ;
Distance : 5

135
Tree	return ( target.length ) object . getDaysInYearMax () ;
Code	return ( target.length ) object . getDaysInYearMax () ;
Distance : 7

136
Tree	return EscapeUtils . createsScope () ;
Code	return EscapeUtils . createsScope () ;
Distance : 4

137
Tree	return getNumber ( STRING_CONSTANT ) ;
Code	return getNumber ( STRING_CONSTANT ) ;
Distance : 4

138
Tree	return target.length . createsScope () . getParser () ;
Code	return target.length . createsScope () . getParser () ;
Distance : 7

139
Tree	return this . domainCrosshairStroke . createsScope () ;
Code	return this . domainCrosshairStroke . createsScope () ;
Distance : 6

140
Tree	return inMemoryClassObjects . createsScope () ;
Code	return inMemoryClassObjects . createsScope () ;
Distance : 4

141
Tree	return RegularizedBeta . createsScope ( parent ) ;
Code	return RegularizedBeta . createsScope ( parent ) ;
Distance : 6

142
Tree	return functionNames . createsScope ( null ) ;
Code	return functionNames . createsScope ( null ) ;
Distance : 6

143
Tree	return SHORT_PREFIX_STYLE . createsScope () >= NUMBER_CONSTANT ;
Code	return SHORT_PREFIX_STYLE . createsScope () >= NUMBER_CONSTANT ;
Distance : 6

144
Tree	return ldp . createsScope () ;
Code	return ldp . createsScope () ;
Distance : 4

145
Tree	return RegularizedBeta . createsScope () >= NUMBER_CONSTANT ;
Code	return RegularizedBeta . createsScope () >= NUMBER_CONSTANT ;
Distance : 6

146
Tree	return target.length . createsScope () >= NUMBER_CONSTANT ;
Code	return target.length . createsScope () >= NUMBER_CONSTANT ;
Distance : 6

147
Tree	return EscapeUtils . createsScope ( STRING_CONSTANT ) ;
Code	return EscapeUtils . createsScope ( STRING_CONSTANT ) ;
Distance : 6

148
Tree	return getL1Distance ( STRING_CONSTANT ) ;
Code	return getL1Distance ( STRING_CONSTANT ) ;
Distance : 4

149
Tree	return ldp . createsScope () >= NUMBER_CONSTANT ;
Code	return ldp . createsScope () >= NUMBER_CONSTANT ;
Distance : 6

150
Tree	return functionNames . createsScope () >= NUMBER_CONSTANT ;
Code	return functionNames . createsScope () >= NUMBER_CONSTANT ;
Distance : 6

151
Tree	return target.length . createsScope ( parent ) ;
Code	return target.length . createsScope ( parent ) ;
Distance : 6

152
Tree	return ldp . createsScope ( parent ) ;
Code	return ldp . createsScope ( parent ) ;
Distance : 6

153
Tree	return notBlank ( STRING_CONSTANT ) ;
Code	return notBlank ( STRING_CONSTANT ) ;
Distance : 4

154
Tree	return STRING_CONSTANT + STRING_CONSTANT ; [
Code	return STRING_CONSTANT + STRING_CONSTANT ; [
Distance : 4

155
Tree	return STRING_CONSTANT + STRING_CONSTANT ; class
Code	return STRING_CONSTANT + STRING_CONSTANT ; class
Distance : 4

156
Tree	return functionNames . createsScope ( parent ) ;
Code	return functionNames . createsScope ( parent ) ;
Distance : 6

157
Tree	return parent . createsScope () >= NUMBER_CONSTANT ;
Code	return parent . createsScope () >= NUMBER_CONSTANT ;
Distance : 6

158
Tree	return TernaryValue.UNKNOWN . createsScope () . jsRoot ;
Code	return TernaryValue.UNKNOWN . createsScope () . jsRoot ;
Distance : 5

159
Tree	return STRING_CONSTANT + STRING_CONSTANT ; f
Code	return STRING_CONSTANT + STRING_CONSTANT ; f
Distance : 4

160
Tree	return TernaryValue.UNKNOWN ; Preconditions
Code	return TernaryValue.UNKNOWN ; Preconditions
Distance : 1

161
Tree	return STRING_CONSTANT + STRING_CONSTANT ; Override
Code	return STRING_CONSTANT + STRING_CONSTANT ; Override
Distance : 4

162
Tree	return TernaryValue.UNKNOWN . createsScope () . populationSize ;
Code	return TernaryValue.UNKNOWN . createsScope () . populationSize ;
Distance : 5

163
Tree	return TernaryValue.UNKNOWN . createsScope () . scalar ;
Code	return TernaryValue.UNKNOWN . createsScope () . scalar ;
Distance : 5

164
Tree	return inMemoryClassObjects . createsScope () >= NUMBER_CONSTANT ;
Code	return inMemoryClassObjects . createsScope () >= NUMBER_CONSTANT ;
Distance : 6

165
Tree	return TernaryValue.UNKNOWN ; Test
Code	return TernaryValue.UNKNOWN ; Test
Distance : 1

166
Tree	return TernaryValue.UNKNOWN ; Class
Code	return TernaryValue.UNKNOWN ; Class
Distance : 1

167
Tree	return STRING_CONSTANT + STRING_CONSTANT ; MathRuntimeException
Code	return STRING_CONSTANT + STRING_CONSTANT ; MathRuntimeException
Distance : 4

168
Tree	return numberOfTrials . createsScope () >= NUMBER_CONSTANT ;
Code	return numberOfTrials . createsScope () >= NUMBER_CONSTANT ;
Distance : 6

169
Tree	return STRING_CONSTANT + STRING_CONSTANT ; mock
Code	return STRING_CONSTANT + STRING_CONSTANT ; mock
Distance : 4

170
Tree	return STRING_CONSTANT + STRING_CONSTANT ; array
Code	return STRING_CONSTANT + STRING_CONSTANT ; array
Distance : 4

171
Tree	return TernaryValue.UNKNOWN ; MathRuntimeException
Code	return TernaryValue.UNKNOWN ; MathRuntimeException
Distance : 1

172
Tree	return TernaryValue.UNKNOWN . createsScope () . maxY ;
Code	return TernaryValue.UNKNOWN . createsScope () . maxY ;
Distance : 5

173
Tree	return EscapeUtils . createsScope () >= NUMBER_CONSTANT ;
Code	return EscapeUtils . createsScope () >= NUMBER_CONSTANT ;
Distance : 6

174
Tree	return STRING_CONSTANT + STRING_CONSTANT ; notifyListeners
Code	return STRING_CONSTANT + STRING_CONSTANT ; notifyListeners
Distance : 4

175
Tree	return null ; p
Code	return null ; p
Distance : 2

176
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; -
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; -
Distance : 14

177
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; [
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; [
Distance : 14

178
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; f
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; f
Distance : 14

179
Tree	return TernaryValue.UNKNOWN ; {}
Code	return TernaryValue.UNKNOWN ; {}
Distance : 1

180
Tree	return TernaryValue.UNKNOWN ; f
Code	return TernaryValue.UNKNOWN ; f
Distance : 1

181
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; Override
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; Override
Distance : 14

182
Tree	return TernaryValue.UNKNOWN ; ParamChecks
Code	return TernaryValue.UNKNOWN ; ParamChecks
Distance : 1

183
Tree	return TernaryValue.UNKNOWN ; -
Code	return TernaryValue.UNKNOWN ; -
Distance : 1

184
Tree	return STRING_CONSTANT + STRING_CONSTANT ; -
Code	return STRING_CONSTANT + STRING_CONSTANT ; -
Distance : 4

185
Tree	return SHORT_PREFIX_STYLE ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Code	return SHORT_PREFIX_STYLE ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Distance : 4

186
Tree	return RegularizedBeta ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Code	return RegularizedBeta ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Distance : 4

187
Tree	return TernaryValue.UNKNOWN . createsScope () . TRUTHY ;
Code	return TernaryValue.UNKNOWN . createsScope () . TRUTHY ;
Distance : 5

188
Tree	return y2 . createsScope () >= NUMBER_CONSTANT ;
Code	return y2 . createsScope () >= NUMBER_CONSTANT ;
Distance : 6

189
Tree	return parent ? TernaryValue.TRUE : TernaryValue.UNKNOWN ;
Code	return parent ? TernaryValue.TRUE : TernaryValue.UNKNOWN ;
Distance : 4

190
Tree	return parent ? TernaryValue.UNKNOWN : TernaryValue.TRUE ;
Code	return parent ? TernaryValue.UNKNOWN : TernaryValue.TRUE ;
Distance : 4

191
Tree	return inMemoryClassObjects ? TernaryValue.TRUE : TernaryValue.UNKNOWN ;
Code	return inMemoryClassObjects ? TernaryValue.TRUE : TernaryValue.UNKNOWN ;
Distance : 4

192
Tree	return super(); ;
Code	return super(); ;
Distance : 1

193
Tree	return ( parent ) MOCKING_PROGRESS . createsScope () ;
Code	return ( parent ) MOCKING_PROGRESS . createsScope () ;
Distance : 7

194
Tree	return return; ;
Code	return return; ;
Distance : 1

195
Tree	return ldp . createsScope ( null ) ;
Code	return ldp . createsScope ( null ) ;
Distance : 6

196
Tree	return continue; ;
Code	return continue; ;
Distance : 1

197
Tree	return break; ;
Code	return break; ;
Distance : 1

198
Tree	return default: ;
Code	return default: ;
Distance : 1

199
Tree	return y2 ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Code	return y2 ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Distance : 4

========================================================================


========================================================================
Example Number: 19
Parent Code is: 
if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( c > NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=c}) (231{val=>}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=c}) (252{val=<=}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=sb}) (235{val=.}) (802{val=append}) (214{val=(}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (32 (802{val=appendHexJavaScriptRepresentation}) (214{val=(}) (800{val=sb}) (234{val=,}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=c}) (231{val=>}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=c}) (230{val=<}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=sb}) (235{val=.}) (802{val=append}) (214{val=(}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (32 (802{val=appendHexJavaScriptRepresentation}) (214{val=(}) (800{val=sb}) (234{val=,}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/73/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( c == DecompositionType.DECOMPOSABLE ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c == DecompositionType.DECOMPOSABLE ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 14

1
Tree	if ( c == StepNormalizerMode.MULTIPLES ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c == StepNormalizerMode.MULTIPLES ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 14

2
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 8

3
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

4
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 5

5
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . append ( c ) ; }
Distance : 13

6
Tree	if ( c && c == IncrementalCheckMode.GENERATE_IJS ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == IncrementalCheckMode.GENERATE_IJS ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

7
Tree	if ( c == PropertyRenamingPolicy.ALL_UNQUOTED ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c == PropertyRenamingPolicy.ALL_UNQUOTED ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 14

8
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 6

9
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 7

10
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c = - c ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c = - c ; } else { append ( c , c ) ; }
Distance : 9

11
Tree	if ( c >= NUMBER_CONSTANT && sb < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 5

12
Tree	if ( c >= NUMBER_CONSTANT ) { sb = c - c ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = c - c ; } else { c . append ( c ) ; }
Distance : 13

13
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = MathUtils.TWO_PI ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = MathUtils.TWO_PI ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

14
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

15
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

16
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 4

17
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Reach.LOCAL_ONLY ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Reach.LOCAL_ONLY ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

18
Tree	if ( c == TypeInferenceMode.DISABLED ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c == TypeInferenceMode.DISABLED ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 14

19
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { append ( c , c ) ; }
Distance : 9

20
Tree	if ( c == startConfiguration.length ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c == startConfiguration.length ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 14

21
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 8

22
Tree	if ( c == options.propertyRenaming ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c == options.propertyRenaming ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 14

23
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 11

24
Tree	if ( c == current.parent.scopes ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c == current.parent.scopes ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 14

25
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

26
Tree	if ( c >= NUMBER_CONSTANT && sb < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 6

27
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 5

28
Tree	if ( c >= NUMBER_CONSTANT && c != default: ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != default: ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 11

29
Tree	if ( c >= NUMBER_CONSTANT && sb != null ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb != null ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

30
Tree	if ( c >= NUMBER_CONSTANT && sb < NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb < NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 10

31
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , sb ) ; }
Distance : 7

32
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 4

33
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { c = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { c = - c ; } else { sb . append ( c ) ; }
Distance : 10

34
Tree	if ( c >= NUMBER_CONSTANT && c != return; ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != return; ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 7

35
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 5

36
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { c = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { c = - c ; } else { sb . append ( c ) ; }
Distance : 12

37
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( c , c ) ; }
Distance : 5

38
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb = - c ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb = - c ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

39
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - sb ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - sb ; } else { sb . append ( c ) ; }
Distance : 12

40
Tree	if ( c >= NUMBER_CONSTANT && c != continue; ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != continue; ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

41
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 6

42
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Distance : 5

43
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb = - c ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb = - c ; } else { c . append ( c ) ; }
Distance : 11

44
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 9

45
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

46
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb = - c ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb = - c ; } else { append ( c , c ) ; }
Distance : 9

47
Tree	if ( c >= NUMBER_CONSTANT && sb >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

48
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

49
Tree	if ( c >= NUMBER_CONSTANT && sb >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 7

50
Tree	if ( c >= NUMBER_CONSTANT ) { sb = c - c ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = c - c ; } else { append ( c , c ) ; }
Distance : 11

51
Tree	if ( c >= NUMBER_CONSTANT ) { c = sb - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { c = sb - c ; } else { sb . append ( c ) ; }
Distance : 14

52
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Reach.LOCAL_ONLY ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Reach.LOCAL_ONLY ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

53
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

54
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { append ( c , sb ) ; }
Distance : 9

55
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 9

56
Tree	if ( c >= NUMBER_CONSTANT ) { sb = c - c ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = c - c ; } else { append ( c , c ) ; }
Distance : 11

57
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 8

58
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Reach.LOCAL_ONLY ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Reach.LOCAL_ONLY ; } else { sb . append ( c ) ; }
Distance : 11

59
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 6

60
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , sb ) ; }
Distance : 5

61
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , sb ) ; }
Distance : 6

62
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 4

63
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Double.NaN ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Double.NaN ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

64
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = x.length ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = x.length ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

65
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 2

66
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c = - c ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c = - c ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

67
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { c . append ( c ) ; }
Distance : 11

68
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 4

69
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c = - c ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c = - c ; } else { c . append ( c ) ; }
Distance : 11

70
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = x.length ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = x.length ; } else { append ( c , c ) ; }
Distance : 9

71
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = NotAMockException ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = NotAMockException ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

72
Tree	if ( c >= NUMBER_CONSTANT && sb < NUMBER_CONSTANT ) { sb = - c ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb < NUMBER_CONSTANT ) { sb = - c ; } else { c . append ( c ) ; }
Distance : 10

73
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 10

74
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = NotAMockException ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = NotAMockException ; } else { append ( c , c ) ; }
Distance : 9

75
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { c = - c ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { c = - c ; } else { c . append ( c ) ; }
Distance : 10

76
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { sb . append ( c , c ) ; }
Distance : 11

77
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Double.NaN ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Double.NaN ; } else { append ( c , c ) ; }
Distance : 9

78
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = startConfiguration.length ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = startConfiguration.length ; } else { sb . append ( c ) ; }
Distance : 11

79
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( c , c ) ; } else { append ( c , c ) ; }
Distance : 7

80
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Precision.SAFE_MIN ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Precision.SAFE_MIN ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

81
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 6

82
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

83
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

84
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { sb . append ( c ) ; }
Distance : 11

85
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { sb . append ( c ) ; }
Distance : 11

86
Tree	if ( c >= NUMBER_CONSTANT && c != return; ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != return; ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 11

87
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { c . append ( c ) ; }
Distance : 11

88
Tree	if ( c >= NUMBER_CONSTANT && c != continue; ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != continue; ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 11

89
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 10

90
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - sb ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - sb ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 11

91
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 11

92
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 9

93
Tree	if ( c && c == ConstCheck.CONST_REASSIGNED_VALUE_ERROR ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == ConstCheck.CONST_REASSIGNED_VALUE_ERROR ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

94
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . append ( c ) ; }
Distance : 13

95
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 5

96
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 6

97
Tree	if ( c && c == startConfiguration.length ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == startConfiguration.length ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

98
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 4

99
Tree	if ( c && c == metadata.superClassNameNode ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == metadata.superClassNameNode ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

100
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Reach.LOCAL_ONLY ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Reach.LOCAL_ONLY ; } else { sb . append ( c , c ) ; }
Distance : 11

101
Tree	if ( c && c == Double.MIN_VALUE ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == Double.MIN_VALUE ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

102
Tree	if ( c && c == sample2.length ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == sample2.length ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

103
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 5

104
Tree	if ( c && c == DecompositionType.DECOMPOSABLE ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == DecompositionType.DECOMPOSABLE ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

105
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 3

106
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { sb . append ( c ) ; }
Distance : 11

107
Tree	if ( c && c == StepNormalizerMode.MULTIPLES ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == StepNormalizerMode.MULTIPLES ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

108
Tree	if ( c && c == current.parent.scopes ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == current.parent.scopes ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

109
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = TypeInferenceMode.DISABLED ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = TypeInferenceMode.DISABLED ; } else { sb . append ( c ) ; }
Distance : 11

110
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { c . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { c . append ( c , c ) ; }
Distance : 11

111
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

112
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = MathUtils.TWO_PI ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = MathUtils.TWO_PI ; } else { sb . append ( c ) ; }
Distance : 11

113
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { append ( c , c ) ; }
Distance : 9

114
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES ; } else { sb . append ( c ) ; }
Distance : 11

115
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Reach.LOCAL_ONLY ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Reach.LOCAL_ONLY ; } else { append ( c , c ) ; }
Distance : 8

116
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = TypeInferenceMode.DISABLED ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = TypeInferenceMode.DISABLED ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

117
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { append ( c , c ) ; }
Distance : 11

118
Tree	if ( c && c == PropertyRenamingPolicy.ALL_UNQUOTED ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == PropertyRenamingPolicy.ALL_UNQUOTED ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

119
Tree	if ( c == TypeInferenceMode.NEITHER ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c == TypeInferenceMode.NEITHER ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 14

120
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { sb . append ( c , c ) ; }
Distance : 11

121
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { c . append ( c ) ; }
Distance : 11

122
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { sb . append ( c , c ) ; }
Distance : 11

123
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = TypeInferenceMode.DISABLED ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = TypeInferenceMode.DISABLED ; } else { sb . append ( c , c ) ; }
Distance : 11

124
Tree	if ( c == IncrementalCheckMode.GENERATE_IJS ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c == IncrementalCheckMode.GENERATE_IJS ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 14

125
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

126
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = startConfiguration.length ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = startConfiguration.length ; } else { sb . append ( c , c ) ; }
Distance : 11

127
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

128
Tree	if ( c == Long.MAX_VALUE ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c == Long.MAX_VALUE ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 14

129
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , sb ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , sb ) ; } else { append ( c , c ) ; }
Distance : 8

130
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = MathUtils.TWO_PI ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = MathUtils.TWO_PI ; } else { sb . append ( c , c ) ; }
Distance : 11

131
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 5

132
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( c , c ) ; }
Distance : 6

133
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 10

134
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { append ( c , c ) ; }
Distance : 8

135
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { append ( c , c ) ; }
Distance : 8

136
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { append ( c , c ) ; }
Distance : 8

137
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = TypeInferenceMode.DISABLED ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = TypeInferenceMode.DISABLED ; } else { append ( c , c ) ; }
Distance : 8

138
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - sb ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - sb ; } else { sb . append ( c ) ; }
Distance : 14

139
Tree	if ( c && c == ConstCheck.CONST_REASSIGNED_VALUE_ERROR ) { sb = StringUtils.EMPTY ; } else { sb . append ( c ) ; }
Code	if ( c && c == ConstCheck.CONST_REASSIGNED_VALUE_ERROR ) { sb = StringUtils.EMPTY ; } else { sb . append ( c ) ; }
Distance : 13

140
Tree	if ( c && c == startConfiguration.length ) { sb = StringUtils.EMPTY ; } else { sb . append ( c ) ; }
Code	if ( c && c == startConfiguration.length ) { sb = StringUtils.EMPTY ; } else { sb . append ( c ) ; }
Distance : 13

141
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES ; } else { sb . append ( c , c ) ; }
Distance : 11

142
Tree	if ( c >= NUMBER_CONSTANT && c != super(); ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != super(); ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 11

143
Tree	if ( c && c == metadata.superClassNameNode ) { sb = StringUtils.EMPTY ; } else { sb . append ( c ) ; }
Code	if ( c && c == metadata.superClassNameNode ) { sb = StringUtils.EMPTY ; } else { sb . append ( c ) ; }
Distance : 13

144
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - sb ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - sb ; } else { append ( c , c ) ; }
Distance : 12

145
Tree	if ( c && c == Double.MIN_VALUE ) { sb = StringUtils.EMPTY ; } else { sb . append ( c ) ; }
Code	if ( c && c == Double.MIN_VALUE ) { sb = StringUtils.EMPTY ; } else { sb . append ( c ) ; }
Distance : 13

146
Tree	if ( c && c == sample2.length ) { sb = StringUtils.EMPTY ; } else { sb . append ( c ) ; }
Code	if ( c && c == sample2.length ) { sb = StringUtils.EMPTY ; } else { sb . append ( c ) ; }
Distance : 13

147
Tree	if ( c && c == ConstCheck.CONST_REASSIGNED_VALUE_ERROR ) { sb = Reach.LOCAL_ONLY ; } else { sb . append ( c ) ; }
Code	if ( c && c == ConstCheck.CONST_REASSIGNED_VALUE_ERROR ) { sb = Reach.LOCAL_ONLY ; } else { sb . append ( c ) ; }
Distance : 13

148
Tree	if ( c && c == startConfiguration.length ) { sb = Reach.LOCAL_ONLY ; } else { sb . append ( c ) ; }
Code	if ( c && c == startConfiguration.length ) { sb = Reach.LOCAL_ONLY ; } else { sb . append ( c ) ; }
Distance : 13

149
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 4

150
Tree	if ( c && c == DecompositionType.DECOMPOSABLE ) { sb = StringUtils.EMPTY ; } else { sb . append ( c ) ; }
Code	if ( c && c == DecompositionType.DECOMPOSABLE ) { sb = StringUtils.EMPTY ; } else { sb . append ( c ) ; }
Distance : 13

151
Tree	if ( c && c == metadata.superClassNameNode ) { sb = Reach.LOCAL_ONLY ; } else { sb . append ( c ) ; }
Code	if ( c && c == metadata.superClassNameNode ) { sb = Reach.LOCAL_ONLY ; } else { sb . append ( c ) ; }
Distance : 13

152
Tree	if ( c && c == StepNormalizerMode.MULTIPLES ) { sb = StringUtils.EMPTY ; } else { sb . append ( c ) ; }
Code	if ( c && c == StepNormalizerMode.MULTIPLES ) { sb = StringUtils.EMPTY ; } else { sb . append ( c ) ; }
Distance : 13

153
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

154
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { c . append ( c ) ; }
Distance : 10

155
Tree	if ( c >= NUMBER_CONSTANT && c != break; ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != break; ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 11

156
Tree	if ( c >= NUMBER_CONSTANT ) { sb = c - sb ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = c - sb ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 11

157
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , sb ) ; }
Distance : 7

158
Tree	if ( c >= NUMBER_CONSTANT ) { sb = c - sb ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = c - sb ; } else { append ( c , c ) ; }
Distance : 12

159
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c = - c ; } else { sb . append ( c ) ; }
Distance : 11

160
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - sb ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - sb ; } else { sb . append ( c ) ; }
Distance : 11

161
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 11

162
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { append ( c , sb ) ; }
Distance : 12

163
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - sb ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - sb ; } else { sb . append ( c ) ; }
Distance : 10

164
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( sb ) ; }
Distance : 11

165
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Precision.SAFE_MIN ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Precision.SAFE_MIN ; } else { append ( c , c ) ; }
Distance : 9

166
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . append ( sb ) ; }
Distance : 14

167
Tree	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 11

168
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 4

169
Tree	if ( c >= NUMBER_CONSTANT ) { sb = c - sb ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = c - sb ; } else { sb . append ( c ) ; }
Distance : 14

170
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

171
Tree	if ( c >= NUMBER_CONSTANT && c != super(); ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != super(); ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

172
Tree	if ( sb >= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . append ( c ) ; }
Code	if ( sb >= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . append ( c ) ; }
Distance : 14

173
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( c , c ) ; }
Distance : 5

174
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - sb ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - sb ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

175
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

176
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 4

177
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { append ( c , sb ) ; }
Distance : 9

178
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { c . append ( c ) ; }
Distance : 9

179
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { c . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { c . append ( c , c ) ; }
Distance : 11

180
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { c . append ( c ) ; }
Distance : 13

181
Tree	if ( c >= NUMBER_CONSTANT && c != super(); ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != super(); ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 7

182
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( sb ) ; }
Distance : 10

183
Tree	if ( sb >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 10

184
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 5

185
Tree	if ( c >= NUMBER_CONSTANT && c != break; ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != break; ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

186
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 6

187
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

188
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( c , c ) ; }
Distance : 6

189
Tree	if ( c >= NUMBER_CONSTANT && c != break; ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != break; ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 7

190
Tree	if ( c >= NUMBER_CONSTANT && c != return; ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != return; ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

191
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Distance : 4

192
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

193
Tree	if ( c >= NUMBER_CONSTANT ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 13

194
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 7

195
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { append ( c , c ) ; }
Distance : 9

196
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { append ( c , c ) ; }
Distance : 8

197
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { append ( c , c ) ; }
Distance : 9

198
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

199
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = TypeInferenceMode.DISABLED ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = TypeInferenceMode.DISABLED ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

========================================================================


========================================================================
Example Number: 20
Parent Code is: 
{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
-------------------------------------------------------------------------------
Child code is: 
{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , false ) ; jsDocParameter = jsDocParameter . getNext () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=defineSlot}) (214{val=(}) (800{val=astParameter}) (234{val=,}) (800{val=functionNode}) (234{val=,}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getJSType}) (216{val=()})) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (21 (7 (800{val=jsDocParameter}) (204{val==}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getNext}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=defineSlot}) (214{val=(}) (800{val=astParameter}) (234{val=,}) (800{val=functionNode}) (234{val=,}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getJSType}) (216{val=()})) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (21 (7 (800{val=jsDocParameter}) (204{val==}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getNext}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/70/parent/src_com_google_javascript_jscomp_TypedScopeCreator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , jsDocParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , jsDocParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

1
Tree	{ this . functionNode . defineSlot ( astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ this . functionNode . defineSlot ( astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

2
Tree	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

3
Tree	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 9

4
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 9

5
Tree	{ this . astParameter . defineSlot ( astParameter . getNext () ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( astParameter . getNext () ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 10

6
Tree	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , this ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , this ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 6

7
Tree	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , this ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , this ) ; functionNode = astParameter . getNext () ; }
Distance : 7

8
Tree	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

9
Tree	{ functionNode . defineSlot ( astParameter , null , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , null , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 8

10
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 9

11
Tree	{ this . astParameter . defineSlot ( astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 10

12
Tree	{ this . astParameter . defineSlot ( astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Distance : 11

13
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , defineSlot , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , defineSlot , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 9

14
Tree	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , this ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , this ) ; astParameter = astParameter . getNext () ; }
Distance : 7

15
Tree	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , astParameter . getNext () ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , astParameter . getNext () ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 9

16
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 10

17
Tree	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 9

18
Tree	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , this ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , this ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 6

19
Tree	{ functionNode . defineSlot ( STRING_CONSTANT , round , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( STRING_CONSTANT , round , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 9

20
Tree	{ this . functionNode . defineSlot ( astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ this . functionNode . defineSlot ( astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 11

21
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 7

22
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 7

23
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 11

24
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 8

25
Tree	{ defineSlot . defineSlot ( astParameter , null , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , null , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 8

26
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getJSType () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getJSType () ; }
Distance : 9

27
Tree	{ astParameter . defineSlot ( astParameter , null , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 8

28
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , DoesNothing ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , DoesNothing ) ; astParameter = astParameter . getNext () ; }
Distance : 11

29
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , round ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , round ) ; astParameter = astParameter . getNext () ; }
Distance : 11

30
Tree	{ astParameter . defineSlot () ; jsDocParameter = astParameter . getJSType () ; }
Code	{ astParameter . defineSlot () ; jsDocParameter = astParameter . getJSType () ; }
Distance : 12

31
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , defineSlot ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , defineSlot ) ; astParameter = astParameter . getNext () ; }
Distance : 11

32
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getJSType () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getJSType () ; }
Distance : 10

33
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 7

34
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , jsDocParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , jsDocParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Distance : 7

35
Tree	{ functionNode . defineSlot ( astParameter , null , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , null , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 7

36
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , LocalizedFormats.NO_RESULT_AVAILABLE ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , LocalizedFormats.NO_RESULT_AVAILABLE ) ; astParameter = astParameter . getNext () ; }
Distance : 11

37
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 7

38
Tree	{ astParameter . defineSlot ( astParameter , null , jsDocParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , jsDocParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 7

39
Tree	{ astParameter . defineSlot () ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () ; jsDocParameter = astParameter . getNext () ; }
Distance : 11

40
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 9

41
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , this ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , this ) ; functionNode = astParameter . getNext () ; }
Distance : 7

42
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

43
Tree	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Distance : 10

44
Tree	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 9

45
Tree	{ this . astParameter . defineSlot ( astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 10

46
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 8

47
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 9

48
Tree	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 9

49
Tree	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

50
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , false ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , false ) ; functionNode = astParameter . getNext () ; }
Distance : 4

51
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , false ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , false ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 3

52
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 7

53
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 3

54
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 7

55
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; astParameter = astParameter . getJSType () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; astParameter = astParameter . getJSType () ; }
Distance : 6

56
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

57
Tree	{ astParameter . defineSlot () . getJSType ( LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

58
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 7

59
Tree	{ functionNode . defineSlot () . getJSType ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot () . getJSType ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ; astParameter = astParameter . getNext () ; }
Distance : 12

60
Tree	{ astParameter . defineSlot () ; astParameter = astParameter . getJSType () ; }
Code	{ astParameter . defineSlot () ; astParameter = astParameter . getJSType () ; }
Distance : 13

61
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , functionNode . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , functionNode . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 8

62
Tree	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , functionNode . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , functionNode . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 10

63
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , round , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , round , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

64
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , functionNode . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , functionNode . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 7

65
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , astParameter . getNext () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , astParameter . getNext () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 13

66
Tree	{ astParameter . defineSlot () . getJSType ( TimeZones.GMT_ID , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( TimeZones.GMT_ID , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

67
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , jsDocParameter . getNext () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , jsDocParameter . getNext () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 13

68
Tree	{ defineSlot . defineSlot () ; astParameter = astParameter . getJSType () ; }
Code	{ defineSlot . defineSlot () ; astParameter = astParameter . getJSType () ; }
Distance : 13

69
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Distance : 8

70
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getJSType () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getJSType () ; }
Distance : 10

71
Tree	{ astParameter . defineSlot () ; functionNode = astParameter . getJSType () ; }
Code	{ astParameter . defineSlot () ; functionNode = astParameter . getJSType () ; }
Distance : 13

72
Tree	{ astParameter . defineSlot () . getJSType ( LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

73
Tree	{ functionNode . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ functionNode . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 12

74
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , rhs ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , rhs ) ; astParameter = astParameter . getNext () ; }
Distance : 11

75
Tree	{ astParameter . defineSlot () . getJSType ( Level.FINE , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( Level.FINE , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

76
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 10

77
Tree	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 10

78
Tree	{ defineSlot . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 11

79
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 7

80
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , this ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , this ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 6

81
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , astParameter . getNext () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , astParameter . getNext () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 12

82
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , astParameter . getNext () , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , astParameter . getNext () , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 13

83
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 8

84
Tree	{ astParameter . defineSlot () . getJSType ( NewTypeInference.GLOBAL_THIS , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( NewTypeInference.GLOBAL_THIS , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

85
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , astParameter . getNext () , astParameter ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , astParameter . getNext () , astParameter ) ; functionNode = astParameter . getNext () ; }
Distance : 13

86
Tree	{ astParameter . defineSlot () ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () ; astParameter = astParameter . getNext () ; }
Distance : 12

87
Tree	{ defineSlot ( astParameter . getJSType () , STRING_CONSTANT , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getJSType () , STRING_CONSTANT , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

88
Tree	{ astParameter . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 10

89
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = functionNode . getNext () ; }
Distance : 9

90
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , jsDocParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , jsDocParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Distance : 8

91
Tree	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 9

92
Tree	{ astParameter . defineSlot () . getJSType ( idToken.value , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( idToken.value , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

93
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , functionNode . getNext () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , functionNode . getNext () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 13

94
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ; astParameter = astParameter . getNext () ; }
Distance : 11

95
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , rhs , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , rhs , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 9

96
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , this ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , this ) ; astParameter = astParameter . getNext () ; }
Distance : 7

97
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , Feature.KEYWORDS_AS_PROPERTIES ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , Feature.KEYWORDS_AS_PROPERTIES ) ; astParameter = astParameter . getNext () ; }
Distance : 11

98
Tree	{ defineSlot . defineSlot () ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot () ; astParameter = astParameter . getNext () ; }
Distance : 12

99
Tree	{ astParameter . defineSlot () . getJSType ( LocalizedFormats.INVALID_ITERATIONS_LIMITS , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( LocalizedFormats.INVALID_ITERATIONS_LIMITS , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

100
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , functionNode . getJSType () , astParameter . getNext () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , functionNode . getJSType () , astParameter . getNext () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 13

101
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , astParameter . getNext () , astParameter ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , astParameter . getNext () , astParameter ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 12

102
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , functionNode . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , functionNode . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 8

103
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 8

104
Tree	{ astParameter . defineSlot () ; astParameter = jsDocParameter . getJSType () ; }
Code	{ astParameter . defineSlot () ; astParameter = jsDocParameter . getJSType () ; }
Distance : 12

105
Tree	{ astParameter . defineSlot () . getJSType ( LocalizedFormats.NON_POSITIVE_MICROSPHERE_ELEMENTS , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( LocalizedFormats.NON_POSITIVE_MICROSPHERE_ELEMENTS , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

106
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getNext () ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getNext () ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 7

107
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , jsDocParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , jsDocParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 7

108
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 8

109
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , jsDocParameter . getNext () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , jsDocParameter . getNext () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 12

110
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , jsDocParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , jsDocParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 6

111
Tree	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

112
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 9

113
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

114
Tree	{ functionNode . defineSlot () ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot () ; astParameter = astParameter . getNext () ; }
Distance : 12

115
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , obj1.props ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , obj1.props ) ; astParameter = astParameter . getNext () ; }
Distance : 11

116
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , jsDocParameter . getNext () , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , jsDocParameter . getNext () , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 13

117
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 8

118
Tree	{ astParameter . defineSlot ( astParameter . getNext () , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 9

119
Tree	{ astParameter . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 11

120
Tree	{ functionNode . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 11

121
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 9

122
Tree	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , this ) ; functionNode = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , this ) ; functionNode = astParameter . getNext () ; }
Distance : 7

123
Tree	{ functionNode . defineSlot ( astParameter . getNext () , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 9

124
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 7

125
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 5

126
Tree	{ functionNode . defineSlot () ; astParameter = astParameter . getJSType () ; }
Code	{ functionNode . defineSlot () ; astParameter = astParameter . getJSType () ; }
Distance : 13

127
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 9

128
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 8

129
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Distance : 4

130
Tree	{ functionNode . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 12

131
Tree	{ astParameter . defineSlot ( astParameter . getNext () , astParameter . getJSType () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , astParameter . getJSType () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

132
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 4

133
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

134
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 9

135
Tree	{ astParameter . defineSlot ( astParameter . getNext () , astParameter . getJSType () , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , astParameter . getJSType () , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 9

136
Tree	{ astParameter . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 10

137
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Distance : 5

138
Tree	{ astParameter . defineSlot ( astParameter . getNext () , functionNode . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , functionNode . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 9

139
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , false ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , false ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 3

140
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 4

141
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 8

142
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Distance : 8

143
Tree	{ astParameter . defineSlot ( astParameter . getNext () , astParameter . getJSType () , astParameter ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , astParameter . getJSType () , astParameter ) ; functionNode = astParameter . getNext () ; }
Distance : 9

144
Tree	{ astParameter . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 11

145
Tree	{ astParameter . defineSlot () . getJSType ( LocalizedFormats.NOT_POSITIVE_ALPHA , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( LocalizedFormats.NOT_POSITIVE_ALPHA , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

146
Tree	{ functionNode . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 9

147
Tree	{ defineSlot . defineSlot ( astParameter . getNext () , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getNext () , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 9

148
Tree	{ astParameter . defineSlot () . getJSType ( LocalizedFormats.NO_RESULT_AVAILABLE , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( LocalizedFormats.NO_RESULT_AVAILABLE , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

149
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

150
Tree	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

151
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , astParameter ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , astParameter ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 6

152
Tree	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 7

153
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 8

154
Tree	{ functionNode . defineSlot ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 9

155
Tree	{ this . astParameter . defineSlot ( astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 11

156
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , functionNode . getJSType () , null , null ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , functionNode . getJSType () , null , null ) ; astParameter = astParameter . getNext () ; }
Distance : 10

157
Tree	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 6

158
Tree	{ astParameter . defineSlot () . getNext ( astParameter , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getNext ( astParameter , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 12

159
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , obj2.props , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , obj2.props , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 9

160
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , null , null ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , null , null ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 9

161
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , functionNode . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , functionNode . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 7

162
Tree	{ this . astParameter . defineSlot ( astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

163
Tree	{ defineSlot . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 10

164
Tree	{ functionNode . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 11

165
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

166
Tree	{ defineSlot ( astParameter , functionNode , astParameter , functionNode , astParameter . getJSType () , null , null ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , functionNode , astParameter . getJSType () , null , null ) ; astParameter = astParameter . getNext () ; }
Distance : 10

167
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , round , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , round , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 9

168
Tree	{ this . astParameter . defineSlot ( astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 10

169
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 10

170
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , jsDocParameter . getJSType () , null , null ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , jsDocParameter . getJSType () , null , null ) ; astParameter = astParameter . getNext () ; }
Distance : 9

171
Tree	{ defineSlot ( astParameter , functionNode , jsDocParameter , astParameter , astParameter . getJSType () , null , null ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , jsDocParameter , astParameter , astParameter . getJSType () , null , null ) ; astParameter = astParameter . getNext () ; }
Distance : 9

172
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

173
Tree	{ this . astParameter . defineSlot ( astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 11

174
Tree	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

175
Tree	{ defineSlot ( astParameter . getJSType () , STRING_CONSTANT , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getJSType () , STRING_CONSTANT , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Distance : 10

176
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 11

177
Tree	{ defineSlot ( astParameter , functionNode , astParameter , jsDocParameter , astParameter . getJSType () , null , null ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , jsDocParameter , astParameter . getJSType () , null , null ) ; astParameter = astParameter . getNext () ; }
Distance : 9

178
Tree	{ functionNode . defineSlot ( astParameter , null , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , null , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 8

179
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , this ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , this ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 6

180
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Distance : 11

181
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , functionNode . getJSType () , null , null ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , functionNode . getJSType () , null , null ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

182
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , round , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , round , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 9

183
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 7

184
Tree	{ defineSlot . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 11

185
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , null , null ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , null , null ) ; astParameter = astParameter . getNext () ; }
Distance : 10

186
Tree	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , this ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , this ) ; astParameter = astParameter . getNext () ; }
Distance : 7

187
Tree	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 7

188
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 7

189
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 10

190
Tree	{ defineSlot ( astParameter . getJSType () , STRING_CONSTANT , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getJSType () , STRING_CONSTANT , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 10

191
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , null , null ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , null , null ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

192
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 6

193
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , null , null ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , null , null ) ; functionNode = astParameter . getNext () ; }
Distance : 10

194
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , functionNode . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , functionNode . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 11

195
Tree	{ functionNode . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 10

196
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , astParameter ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , astParameter ) ; functionNode = astParameter . getNext () ; }
Distance : 7

197
Tree	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 7

198
Tree	{ functionNode . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 11

199
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , functionNode ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , functionNode ) ; astParameter = astParameter . getNext () ; }
Distance : 7

========================================================================


========================================================================
Example Number: 21
Parent Code is: 
if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( token != JsDocToken.LP ) { restoreLookAhead ( token ) ; return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=token}) (242{val=!=}) (40{val=JsDocToken.LP})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=reportTypeSyntaxWarning}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=token}) (242{val=!=}) (40{val=JsDocToken.LP})) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=restoreLookAhead}) (214{val=(}) (800{val=token}) (215{val=)})) (227{val=;})) (41 (329{val=return}) (32 (802{val=reportTypeSyntaxWarning}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/68/parent/src_com_google_javascript_jscomp_parsing_JsDocInfoParser.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Distance : 11

1
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

2
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

3
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Distance : 11

4
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Distance : 11

5
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

6
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

7
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

8
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , token , JsDocToken.LP ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , token , JsDocToken.LP ) ; }
Distance : 11

9
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Distance : 11

10
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

11
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

12
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

13
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

14
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

15
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

16
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

17
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

18
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } i
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } i
Distance : 10

19
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } value
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } value
Distance : 9

20
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } value
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } value
Distance : 10

21
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } options
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } options
Distance : 10

22
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } value
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } value
Distance : 7

23
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } i
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } i
Distance : 7

24
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } p
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } p
Distance : 9

25
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } options
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } options
Distance : 9

26
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

27
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } p
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } p
Distance : 10

28
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

29
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Distance : 7

30
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

31
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

32
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

33
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

34
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

35
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

36
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

37
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

38
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

39
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

40
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

41
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

42
Tree	if ( token != return; ) { return token . token ( token ) ; }
Code	if ( token != return; ) { return token . token ( token ) ; }
Distance : 8

43
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

44
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

45
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

46
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

47
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

48
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

49
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Distance : 7

50
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

51
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Distance : 7

52
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

53
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

54
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

55
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

56
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; } p
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; } p
Distance : 8

57
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

58
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; } value
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; } value
Distance : 8

59
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , token , JsDocToken.LP ) ; } options
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , token , JsDocToken.LP ) ; } options
Distance : 12

60
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; } p
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; } p
Distance : 12

61
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; } options
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; } options
Distance : 12

62
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; } value
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; } value
Distance : 12

63
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; } i
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; } i
Distance : 12

64
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } p
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } p
Distance : 9

65
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; } i
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; } i
Distance : 8

66
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; } i
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; } i
Distance : 8

67
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } options
Code	if ( token != null ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } options
Distance : 8

68
Tree	if ( token != null ) { return token . token ( token ) ; } value
Code	if ( token != null ) { return token . token ( token ) ; } value
Distance : 9

69
Tree	if ( token != null ) { return token . token ( token ) ; } i
Code	if ( token != null ) { return token . token ( token ) ; } i
Distance : 9

70
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } p
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } p
Distance : 7

71
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } options
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } options
Distance : 7

72
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; } p
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; } p
Distance : 12

73
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; } options
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; } options
Distance : 12

74
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; } value
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; } value
Distance : 12

75
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; } i
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; } i
Distance : 12

76
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , token , JsDocToken.LP ) ; } p
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , token , JsDocToken.LP ) ; } p
Distance : 12

77
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } i
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } i
Distance : 9

78
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } value
Code	if ( token != null ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } value
Distance : 8

79
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } value
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } value
Distance : 9

80
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

81
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , token , reportTypeSyntaxWarning ) ; } value
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , token , reportTypeSyntaxWarning ) ; } value
Distance : 12

82
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

83
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

84
Tree	if ( token != default: ) { return token . token ( token ) ; }
Code	if ( token != default: ) { return token . token ( token ) ; }
Distance : 8

85
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Distance : 7

86
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , token , JsDocToken.LP ) ; } i
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , token , JsDocToken.LP ) ; } i
Distance : 12

87
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; } p
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; } p
Distance : 9

88
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

89
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; } options
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; } options
Distance : 9

90
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; } value
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; } value
Distance : 9

91
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Distance : 11

92
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

93
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

94
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

95
Tree	if ( token != super(); ) { return token . token ( token ) ; }
Code	if ( token != super(); ) { return token . token ( token ) ; }
Distance : 8

96
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

97
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

98
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

99
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

100
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

101
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

102
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

103
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , token , token , JsDocToken.LP ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , token , token , JsDocToken.LP ) ; }
Distance : 11

104
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } p
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } p
Distance : 10

105
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

106
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

107
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Distance : 7

108
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

109
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

110
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

111
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } options
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } options
Distance : 10

112
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

113
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

114
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

115
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , token , token , JsDocToken.LP ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , token , token , JsDocToken.LP ) ; }
Distance : 11

116
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

117
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

118
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

119
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

120
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

121
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; } i
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; } i
Distance : 9

122
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , token , token , JsDocToken.LP ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , token , token , JsDocToken.LP ) ; }
Distance : 11

123
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

124
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

125
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } value
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } value
Distance : 10

126
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; } p
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; } p
Distance : 8

127
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , token , token , JsDocToken.LP ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , token , token , JsDocToken.LP ) ; }
Distance : 11

128
Tree	if ( token != break; ) { return token . token ( token ) ; }
Code	if ( token != break; ) { return token . token ( token ) ; }
Distance : 8

129
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } i
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } i
Distance : 10

130
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } p
Code	if ( token != null ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } p
Distance : 8

131
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

132
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

133
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

134
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

135
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

136
Tree	if ( token != null ) { return token . token ( token ) ; }
Code	if ( token != null ) { return token . token ( token ) ; }
Distance : 8

137
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; } options
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; } options
Distance : 8

138
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Distance : 11

139
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

140
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

141
Tree	if ( token != continue; ) { return token . token ( token ) ; }
Code	if ( token != continue; ) { return token . token ( token ) ; }
Distance : 8

142
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; } value
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; } value
Distance : 8

143
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } i
Code	if ( token != null ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } i
Distance : 8

144
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; } i
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; } i
Distance : 8

145
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; } p
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; } p
Distance : 8

146
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

147
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

148
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

149
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } options
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } options
Distance : 9

150
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Distance : 7

151
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

152
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } p
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } p
Distance : 10

153
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

154
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

155
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

156
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } value
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } value
Distance : 9

157
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

158
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

159
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } i
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } i
Distance : 9

160
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } p
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } p
Distance : 9

161
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; } options
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; } options
Distance : 8

162
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } p
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } p
Distance : 9

163
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } options
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } options
Distance : 10

164
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

165
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } value
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } value
Distance : 7

166
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } i
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } i
Distance : 9

167
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } value
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } value
Distance : 10

168
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

169
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } options
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } options
Distance : 9

170
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } i
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } i
Distance : 10

171
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } p
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } p
Distance : 7

172
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

173
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

174
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

175
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

176
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

177
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } i
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } i
Distance : 7

178
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; } p
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; } p
Distance : 12

179
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } value
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } value
Distance : 9

180
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; } options
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; } options
Distance : 12

181
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; } value
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; } value
Distance : 12

182
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } i
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } i
Distance : 9

183
Tree	if ( token != null ) { return token . token ( token ) ; } p
Code	if ( token != null ) { return token . token ( token ) ; } p
Distance : 9

184
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , token , token , JsDocToken.LP ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , token , token , JsDocToken.LP ) ; }
Distance : 11

185
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } i
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } i
Distance : 8

186
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

187
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } p
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } p
Distance : 8

188
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } options
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } options
Distance : 8

189
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } value
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } value
Distance : 8

190
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

191
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; } options
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; } options
Distance : 8

192
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

193
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

194
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } options
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } options
Distance : 9

195
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } options
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } options
Distance : 7

196
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

197
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; } i
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; } i
Distance : 12

198
Tree	if ( token != null ) { return token . token ( token ) ; } options
Code	if ( token != null ) { return token . token ( token ) ; } options
Distance : 9

199
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; } value
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; } value
Distance : 8

========================================================================


========================================================================
Example Number: 22
Parent Code is: 
{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ initCompilerOptionsIfTesting () ; return toSource ( n , null , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=initCompilerOptionsIfTesting}) (216{val=()})) (227{val=;})) (41 (329{val=return}) (32 (802{val=toSource}) (214{val=(}) (800{val=n}) (234{val=,}) (500{val=null}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=initCompilerOptionsIfTesting}) (216{val=()})) (227{val=;})) (41 (329{val=return}) (32 (802{val=toSource}) (214{val=(}) (800{val=n}) (234{val=,}) (500{val=null}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/64/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( Token.GETELEM ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( Token.GETELEM ) ; }
Distance : 6

1
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( super(); , n . null ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( super(); , n . null ( n ) ) ; }
Distance : 6

2
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( super(); , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( super(); , n . toSource ( n ) ) ; }
Distance : 7

3
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , return; ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , return; ) ; }
Distance : 6

4
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , return; ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , return; ) ; }
Distance : 5

5
Tree	{ toSource () ; return Format.COMPACT . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return Format.COMPACT . toSource () . toSource ( n , n , n ) ; }
Distance : 8

6
Tree	{ initCompilerOptionsIfTesting () ; return ArrayUtils.EMPTY_STRING_ARRAY . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return ArrayUtils.EMPTY_STRING_ARRAY . toSource () . toSource ( n , n , n ) ; }
Distance : 7

7
Tree	{ initCompilerOptionsIfTesting () ; return source.m1 . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return source.m1 . toSource () . toSource ( n , n , n ) ; }
Distance : 7

8
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , super(); , null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , super(); , null , n ) ; }
Distance : 3

9
Tree	{ initCompilerOptionsIfTesting () ; return Format.COMPACT . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return Format.COMPACT . toSource () . toSource ( n , n , n ) ; }
Distance : 7

10
Tree	{ initCompilerOptionsIfTesting () ; return Format.COMPACT . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return Format.COMPACT . toSource () . toSource ( n , n , n ) ; }
Distance : 7

11
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . toSource ( n ) , return; ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . toSource ( n ) , return; ) ; }
Distance : 9

12
Tree	{ toSource ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ toSource ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 10

13
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( Token.GETELEM ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( Token.GETELEM ) ; }
Distance : 6

14
Tree	{ toSource ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ toSource ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 10

15
Tree	{ toSource ( n ) ; return toSource ( n . null ( n ) , null ) ; }
Code	{ toSource ( n ) ; return toSource ( n . null ( n ) , null ) ; }
Distance : 9

16
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Distance : 2

17
Tree	{ toSource () ; return toSource ( n , n , n , n ) ; }
Code	{ toSource () ; return toSource ( n , n , n , n ) ; }
Distance : 5

18
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; }
Distance : 4

19
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? FunctionFlavor.GENERATOR : FunctionFlavor.NORMAL ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? FunctionFlavor.GENERATOR : FunctionFlavor.NORMAL ) ; }
Distance : 5

20
Tree	{ toSource () ; return toSource ( n , n ? FunctionFlavor.GENERATOR : FunctionFlavor.NORMAL ) ; }
Code	{ toSource () ; return toSource ( n , n ? FunctionFlavor.GENERATOR : FunctionFlavor.NORMAL ) ; }
Distance : 6

21
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( Token.PARAM_LIST , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( Token.PARAM_LIST , n ) ; }
Distance : 4

22
Tree	{ toSource () ; return toSource ( n , null , null , n ) ; }
Code	{ toSource () ; return toSource ( n , null , null , n ) ; }
Distance : 4

23
Tree	{ toSource ( n ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ toSource ( n ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 9

24
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . null ( n ) , return; ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . null ( n ) , return; ) ; }
Distance : 8

25
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( Any.ANY , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( Any.ANY , n ) ; }
Distance : 4

26
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . null ( n ) , n ) ; } wanted
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . null ( n ) , n ) ; } wanted
Distance : 7

27
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource () . toSource ( n , n , n ) ; } Math
Code	{ initCompilerOptionsIfTesting () ; return n . toSource () . toSource ( n , n , n ) ; } Math
Distance : 8

28
Tree	{ toSource () ; return toSource ( n . null ( n ) , null ) ; }
Code	{ toSource () ; return toSource ( n . null ( n ) , null ) ; }
Distance : 6

29
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , n ) ; }
Distance : 5

30
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 7

31
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , n ) ; }
Distance : 6

32
Tree	{ toSource () ; return toSource ( n . null ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n . null ( n ) , n ) ; }
Distance : 6

33
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , n ) ; }
Distance : 5

34
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , n ) ; }
Distance : 7

35
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , n ) ; }
Distance : 6

36
Tree	{ toSource () ; return toSource ( n . , ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n . , ( n ) , n ) ; }
Distance : 6

37
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( Any.ANY ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( Any.ANY ) ; }
Distance : 6

38
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? LocalizedFormats.CARDAN_ANGLES_SINGULARITY : PropertyCollapseLevel.NONE ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? LocalizedFormats.CARDAN_ANGLES_SINGULARITY : PropertyCollapseLevel.NONE ) ; }
Distance : 5

39
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? TypeInferenceMode.NEITHER : FunctionFlavor.NORMAL ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? TypeInferenceMode.NEITHER : FunctionFlavor.NORMAL ) ; }
Distance : 5

40
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? LocalizedFormats.NUMBER_TOO_SMALL : FunctionFlavor.NORMAL ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? LocalizedFormats.NUMBER_TOO_SMALL : FunctionFlavor.NORMAL ) ; }
Distance : 5

41
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? FunctionFlavor.GENERATOR : LocalizedFormats.EULER_ANGLES_SINGULARITY ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? FunctionFlavor.GENERATOR : LocalizedFormats.EULER_ANGLES_SINGULARITY ) ; }
Distance : 5

42
Tree	{ toSource () ; return toSource ( n , n ? FunctionFlavor.GENERATOR : PropertyCollapseLevel.NONE ) ; }
Code	{ toSource () ; return toSource ( n , n ? FunctionFlavor.GENERATOR : PropertyCollapseLevel.NONE ) ; }
Distance : 6

43
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , LocalizedFormats.INTERNAL_ERROR ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , LocalizedFormats.INTERNAL_ERROR ) ; }
Distance : 2

44
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , export.scope ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , export.scope ) ; }
Distance : 2

45
Tree	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , Void.TYPE ) ; }
Code	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , Void.TYPE ) ; }
Distance : 3

46
Tree	{ toSource () ; return toSource ( Any.ANY , n ) ; }
Code	{ toSource () ; return toSource ( Any.ANY , n ) ; }
Distance : 5

47
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( Any.ANY , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( Any.ANY , n ) ; }
Distance : 4

48
Tree	{ toSource () ; return toSource ( n , null ) ; }
Code	{ toSource () ; return toSource ( n , null ) ; }
Distance : 3

49
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Distance : 2

50
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; }
Distance : 4

51
Tree	{ toSource () ; return toSource ( Any.ANY , n ) ; }
Code	{ toSource () ; return toSource ( Any.ANY , n ) ; }
Distance : 5

52
Tree	{ toSource () ; return toSource ( n , null ) ; }
Code	{ toSource () ; return toSource ( n , null ) ; }
Distance : 3

53
Tree	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; }
Code	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; }
Distance : 5

54
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . null ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . null ( n ) , n ) ; }
Distance : 6

55
Tree	{ toSource () ; return toSource ( n , n . toSource ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n , n . toSource ( n ) , n ) ; }
Distance : 8

56
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , super(); , null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , super(); , null , n ) ; }
Distance : 3

57
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , continue; ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , continue; ) ; }
Distance : 3

58
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; } &&
Code	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; } &&
Distance : 5

59
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; } p
Code	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; } p
Distance : 5

60
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , null , n ) ; }
Distance : 3

61
Tree	{ toSource () ; return toSource ( ComposableFunction.SQRT , n ) ; }
Code	{ toSource () ; return toSource ( ComposableFunction.SQRT , n ) ; }
Distance : 5

62
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( oldMockHandler.mockingProgress , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( oldMockHandler.mockingProgress , n ) ; }
Distance : 4

63
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , CheckMissingReturn.MISSING_RETURN_STATEMENT ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , CheckMissingReturn.MISSING_RETURN_STATEMENT ) ; }
Distance : 2

64
Tree	{ toSource () ; return toSource ( n , null , null , n ) ; }
Code	{ toSource () ; return toSource ( n , null , null , n ) ; }
Distance : 4

65
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , Void.TYPE ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , Void.TYPE ) ; }
Distance : 2

66
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . null ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . null ( n ) ) ; }
Distance : 8

67
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , TimeUnit.SECONDS ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , TimeUnit.SECONDS ) ; }
Distance : 2

68
Tree	{ toSource () ; return n . toSource ( this , n . toSource ( n ) ) ; }
Code	{ toSource () ; return n . toSource ( this , n . toSource ( n ) ) ; }
Distance : 10

69
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , calculator.invocationToReturn ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , calculator.invocationToReturn ) ; }
Distance : 2

70
Tree	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , LocalizedFormats.INTERNAL_ERROR ) ; }
Code	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , LocalizedFormats.INTERNAL_ERROR ) ; }
Distance : 3

71
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) return; ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) return; ) ; }
Distance : 4

72
Tree	{ toSource () ; return toSource ( null , n . null ( n ) ) ; }
Code	{ toSource () ; return toSource ( null , n . null ( n ) ) ; }
Distance : 7

73
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . null ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . null ( n ) ) ; }
Distance : 6

74
Tree	{ toSource () ; return toSource ( null , n . toSource ( n ) ) ; }
Code	{ toSource () ; return toSource ( null , n . toSource ( n ) ) ; }
Distance : 8

75
Tree	{ toSource () ; return toSource ( n , ( n ) continue; ) ; }
Code	{ toSource () ; return toSource ( n , ( n ) continue; ) ; }
Distance : 5

76
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) continue; ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) continue; ) ; }
Distance : 4

77
Tree	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , export.scope ) ; }
Code	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , export.scope ) ; }
Distance : 3

78
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( java.util.Locale.US ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( java.util.Locale.US ) ; }
Distance : 6

79
Tree	{ toSource () ; return toSource ( n , ( n ) super(); ) ; }
Code	{ toSource () ; return toSource ( n , ( n ) super(); ) ; }
Distance : 5

80
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; }
Distance : 6

81
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( java.util.Locale.US ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( java.util.Locale.US ) ; }
Distance : 6

82
Tree	{ toSource () ; return n . toSource ( this , n . null ( n ) ) ; }
Code	{ toSource () ; return n . toSource ( this , n . null ( n ) ) ; }
Distance : 9

83
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; }
Distance : 4

84
Tree	{ toSource () ; return n . toSource ( this , n . null ( n ) ) ; }
Code	{ toSource () ; return n . toSource ( this , n . null ( n ) ) ; }
Distance : 9

85
Tree	{ toSource () ; return toSource ( n , n , n , n ) ; }
Code	{ toSource () ; return toSource ( n , n , n , n ) ; }
Distance : 5

86
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource () . toSource ( n , n , n ) ; }
Distance : 7

87
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; }
Distance : 5

88
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 6

89
Tree	{ toSource () ; return toSource ( n . null ( n ) , null ) ; }
Code	{ toSource () ; return toSource ( n . null ( n ) , null ) ; }
Distance : 6

90
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource () . toSource ( n , n , n ) ; }
Distance : 7

91
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; }
Distance : 5

92
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 7

93
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 6

94
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . toSource ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . toSource ( n ) , n ) ; }
Distance : 7

95
Tree	{ toSource () ; return toSource ( n , super(); ) ; }
Code	{ toSource () ; return toSource ( n , super(); ) ; }
Distance : 4

96
Tree	{ n . initCompilerOptionsIfTesting ( ComposableFunction.LOG10 ) ; return toSource ( n . null ( n ) , null ) ; }
Code	{ n . initCompilerOptionsIfTesting ( ComposableFunction.LOG10 ) ; return toSource ( n . null ( n ) , null ) ; }
Distance : 10

97
Tree	{ toSource () ; return toSource ( n , n . null ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n , n . null ( n ) , n ) ; }
Distance : 7

98
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , super(); ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , super(); ) ; }
Distance : 3

99
Tree	{ n . toSource ( TokenType.STRING ) ; return toSource ( n . null ( n ) , null ) ; }
Code	{ n . toSource ( TokenType.STRING ) ; return toSource ( n . null ( n ) , null ) ; }
Distance : 11

100
Tree	{ toSource () ; return toSource ( n , n . toSource ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n , n . toSource ( n ) , n ) ; }
Distance : 8

101
Tree	{ toSource () ; return toSource ( n , super(); ) ; }
Code	{ toSource () ; return toSource ( n , super(); ) ; }
Distance : 4

102
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . null ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . null ( n ) , n ) ; }
Distance : 6

103
Tree	{ initCompilerOptionsIfTesting () ; return Format.COMPACT . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return Format.COMPACT . toSource () . toSource ( n , n , n ) ; }
Distance : 7

104
Tree	{ initCompilerOptionsIfTesting () ; return Format.COMPACT . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return Format.COMPACT . toSource () . toSource ( n , n , n ) ; }
Distance : 7

105
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , n ) ; } wanted
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , n ) ; } wanted
Distance : 6

106
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . toSource ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . toSource ( n ) , n ) ; }
Distance : 7

107
Tree	{ toSource () ; return toSource ( n , n . null ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n , n . null ( n ) , n ) ; }
Distance : 7

108
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , n ) ; } Math
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , n ) ; } Math
Distance : 6

109
Tree	{ toSource () ; return toSource ( n , super(); , null , n ) ; }
Code	{ toSource () ; return toSource ( n , super(); , null , n ) ; }
Distance : 4

110
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . toSource ( n ) ) ; } wanted
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . toSource ( n ) ) ; } wanted
Distance : 10

111
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , super(); ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , super(); ) ; }
Distance : 3

112
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; }
Distance : 7

113
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } toString
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } toString
Distance : 5

114
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( Any.ANY ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( Any.ANY ) ; }
Distance : 6

115
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , n ) ; }
Distance : 7

116
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , return; ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , return; ) ; }
Distance : 3

117
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , super(); , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , super(); , n ) ; }
Distance : 3

118
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , true ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , true ) ; }
Distance : 3

119
Tree	{ toSource () ; return n . toSource ( Any.ANY ) ; }
Code	{ toSource () ; return n . toSource ( Any.ANY ) ; }
Distance : 7

120
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . null ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . null ( n ) ) ; }
Distance : 6

121
Tree	{ toSource () ; return toSource ( null , n . toSource ( n ) ) ; }
Code	{ toSource () ; return toSource ( null , n . toSource ( n ) ) ; }
Distance : 8

122
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; } source
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; } source
Distance : 7

123
Tree	{ toSource () ; return toSource ( n , null , super(); , n ) ; }
Code	{ toSource () ; return toSource ( n , null , super(); , n ) ; }
Distance : 4

124
Tree	{ toSource () ; return toSource ( n , n , n , true ) ; }
Code	{ toSource () ; return toSource ( n , n , n , true ) ; }
Distance : 4

125
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , true ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , true ) ; }
Distance : 3

126
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , false ) ; } wanted
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , false ) ; } wanted
Distance : 5

127
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . null ( n ) , n ) ; } Math
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . null ( n ) , n ) ; } Math
Distance : 7

128
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , false ) ; } Math
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , false ) ; } Math
Distance : 5

129
Tree	{ toSource () ; return toSource ( n , n , n , true ) ; }
Code	{ toSource () ; return toSource ( n , n , n , true ) ; }
Distance : 4

130
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource () . toSource ( n , n , n ) ; } wanted
Code	{ initCompilerOptionsIfTesting () ; return n . toSource () . toSource ( n , n , n ) ; } wanted
Distance : 8

131
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . toSource ( n ) ) ; } Math
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . toSource ( n ) ) ; } Math
Distance : 10

132
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; } &&
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; } &&
Distance : 7

133
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; } p
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; } p
Distance : 7

134
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; } options
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; } options
Distance : 7

135
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; } toString
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; } toString
Distance : 7

136
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } source
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } source
Distance : 5

137
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; } options
Code	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; } options
Distance : 5

138
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; } T
Code	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; } T
Distance : 5

139
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; } source
Code	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; } source
Distance : 5

140
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; } toString
Code	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; } toString
Distance : 5

141
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } T
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } T
Distance : 5

142
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } &&
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } &&
Distance : 5

143
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } p
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } p
Distance : 5

144
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } options
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } options
Distance : 5

145
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; } T
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; } T
Distance : 7

146
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . toSource ( n ) ) ; }
Distance : 9

147
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . toSource ( n ) ) ; }
Distance : 9

148
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . null ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . null ( n ) ) ; }
Distance : 8

149
Tree	{ toSource () ; return n . toSource ( this , n . toSource ( n ) ) ; }
Code	{ toSource () ; return n . toSource ( this , n . toSource ( n ) ) ; }
Distance : 10

150
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? FunctionFlavor.GENERATOR : FunctionFlavor.NORMAL ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? FunctionFlavor.GENERATOR : FunctionFlavor.NORMAL ) ; }
Distance : 5

151
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? FunctionFlavor.GENERATOR : PropertyCollapseLevel.NONE ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? FunctionFlavor.GENERATOR : PropertyCollapseLevel.NONE ) ; }
Distance : 5

152
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? LocalizedFormats.CARDAN_ANGLES_SINGULARITY : FunctionFlavor.NORMAL ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? LocalizedFormats.CARDAN_ANGLES_SINGULARITY : FunctionFlavor.NORMAL ) ; }
Distance : 5

153
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , Void.TYPE ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , Void.TYPE ) ; }
Distance : 2

154
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; }
Distance : 4

155
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) null ) ; }
Distance : 4

156
Tree	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; }
Code	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; }
Distance : 5

157
Tree	{ toSource () ; return toSource ( n , ( n ) null ) ; }
Code	{ toSource () ; return toSource ( n , ( n ) null ) ; }
Distance : 5

158
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) null ) ; }
Distance : 4

159
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , null , n ) ; }
Distance : 3

160
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( ComposableFunction.SQRT , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( ComposableFunction.SQRT , n ) ; }
Distance : 4

161
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( ComposableFunction.LOG10 , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( ComposableFunction.LOG10 , n ) ; }
Distance : 4

162
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( LanguageMode.ECMASCRIPT_2016 , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( LanguageMode.ECMASCRIPT_2016 , n ) ; }
Distance : 4

163
Tree	{ toSource () ; return toSource ( null , n . null ( n ) ) ; }
Code	{ toSource () ; return toSource ( null , n . null ( n ) ) ; }
Distance : 7

164
Tree	{ toSource () ; return n . toSource ( java.util.Locale.US ) ; }
Code	{ toSource () ; return n . toSource ( java.util.Locale.US ) ; }
Distance : 7

165
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; }
Distance : 6

166
Tree	{ toSource () ; return n . toSource ( this , n ) ; }
Code	{ toSource () ; return n . toSource ( this , n ) ; }
Distance : 7

167
Tree	{ toSource () ; return n . toSource ( java.util.Locale.US ) ; }
Code	{ toSource () ; return n . toSource ( java.util.Locale.US ) ; }
Distance : 7

168
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . null ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . null ( n ) , null ) ; }
Distance : 8

169
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 9

170
Tree	{ toSource () ; return toSource ( n , ( n ) null ) ; }
Code	{ toSource () ; return toSource ( n , ( n ) null ) ; }
Distance : 5

171
Tree	{ toSource () ; return n . toSource ( this , n ) ; }
Code	{ toSource () ; return n . toSource ( this , n ) ; }
Distance : 7

172
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . null ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . null ( n ) , null ) ; }
Distance : 8

173
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 9

174
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , false ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , false ) ; }
Distance : 4

175
Tree	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; }
Distance : 8

176
Tree	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; }
Distance : 8

177
Tree	{ toSource () ; return toSource ( n , n , n , false ) ; }
Code	{ toSource () ; return toSource ( n , n , n , false ) ; }
Distance : 5

178
Tree	{ n . initCompilerOptionsIfTesting ( TokenType.STRING ) ; return toSource ( n . null ( n ) , null ) ; }
Code	{ n . initCompilerOptionsIfTesting ( TokenType.STRING ) ; return toSource ( n . null ( n ) , null ) ; }
Distance : 10

179
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , false ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , false ) ; }
Distance : 4

180
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; }
Distance : 7

181
Tree	{ n . initCompilerOptionsIfTesting ( ArrayUtils.EMPTY_STRING_ARRAY ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ n . initCompilerOptionsIfTesting ( ArrayUtils.EMPTY_STRING_ARRAY ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 10

182
Tree	{ n . initCompilerOptionsIfTesting ( TokenType.STRING ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ n . initCompilerOptionsIfTesting ( TokenType.STRING ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 11

183
Tree	{ n . initCompilerOptionsIfTesting ( ArrayUtils.EMPTY_STRING_ARRAY ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ n . initCompilerOptionsIfTesting ( ArrayUtils.EMPTY_STRING_ARRAY ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 11

184
Tree	{ toSource () ; return toSource ( n , n , n , false ) ; }
Code	{ toSource () ; return toSource ( n , n , n , false ) ; }
Distance : 5

185
Tree	{ toSource () ; return n . toSource ( Any.ANY ) ; }
Code	{ toSource () ; return n . toSource ( Any.ANY ) ; }
Distance : 7

186
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) continue; ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) continue; ) ; }
Distance : 4

187
Tree	{ initCompilerOptionsIfTesting () ; return MethodSelectorImpl . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return MethodSelectorImpl . toSource () . toSource ( n , n , n ) ; }
Distance : 7

188
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) super(); ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) super(); ) ; }
Distance : 4

189
Tree	{ initCompilerOptionsIfTesting () ; return source.m1 . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return source.m1 . toSource () . toSource ( n , n , n ) ; }
Distance : 7

190
Tree	{ initCompilerOptionsIfTesting () ; return ArrayUtils.EMPTY_STRING_ARRAY . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return ArrayUtils.EMPTY_STRING_ARRAY . toSource () . toSource ( n , n , n ) ; }
Distance : 7

191
Tree	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; }
Distance : 8

192
Tree	{ n . initCompilerOptionsIfTesting ( TokenType.STRING ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ n . initCompilerOptionsIfTesting ( TokenType.STRING ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 10

193
Tree	{ toSource () ; return toSource ( n , super(); , null , n ) ; }
Code	{ toSource () ; return toSource ( n , super(); , null , n ) ; }
Distance : 4

194
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource () . toSource ( n , n , n ) ; }
Distance : 7

195
Tree	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; }
Distance : 8

196
Tree	{ n . initCompilerOptionsIfTesting ( ArrayUtils.EMPTY_STRING_ARRAY ) ; return toSource ( n . null ( n ) , null ) ; }
Code	{ n . initCompilerOptionsIfTesting ( ArrayUtils.EMPTY_STRING_ARRAY ) ; return toSource ( n . null ( n ) , null ) ; }
Distance : 10

197
Tree	{ n . initCompilerOptionsIfTesting ( TokenType.STRING ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ n . initCompilerOptionsIfTesting ( TokenType.STRING ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 11

198
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource () . toSource ( n , n , n ) ; }
Distance : 7

199
Tree	{ n . initCompilerOptionsIfTesting ( ArrayUtils.EMPTY_STRING_ARRAY ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ n . initCompilerOptionsIfTesting ( ArrayUtils.EMPTY_STRING_ARRAY ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 11

========================================================================


========================================================================
Example Number: 23
Parent Code is: 
String code = toSource ( root , sourceMap ) ;
-------------------------------------------------------------------------------
Child code is: 
String code = toSource ( root , sourceMap , inputSeqNum == NUMBER_CONSTANT ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=code}) (204{val==}) (32 (802{val=toSource}) (214{val=(}) (800{val=root}) (234{val=,}) (800{val=sourceMap}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=code}) (204{val==}) (32 (802{val=toSource}) (214{val=(}) (800{val=root}) (234{val=,}) (800{val=sourceMap}) (234{val=,}) (27 (800{val=inputSeqNum}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/64/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	String code = StandardBasicTypes.TIME . toSource ( root , sourceMap ) ;
Code	String code = StandardBasicTypes.TIME . toSource ( root , sourceMap ) ;
Distance : 6

1
Tree	String code = toSource ( root , code , sourceMap , sourceMap ) ;
Code	String code = toSource ( root , code , sourceMap , sourceMap ) ;
Distance : 4

2
Tree	String code = createFromTypeNodesInternal . toSource ( root , sourceMap ) ;
Code	String code = createFromTypeNodesInternal . toSource ( root , sourceMap ) ;
Distance : 6

3
Tree	String code = toSource ( root , this . code ) ;
Code	String code = toSource ( root , this . code ) ;
Distance : 5

4
Tree	String code = toSource . sourceMap ( root ) ;
Code	String code = toSource . sourceMap ( root ) ;
Distance : 7

5
Tree	String code = toSource ( root , code ) ;
Code	String code = toSource ( root , code ) ;
Distance : 5

6
Tree	String root = sourceMap ( root ) ;
Code	String root = sourceMap ( root ) ;
Distance : 8

7
Tree	String code = toSource ( root , sourceMap , sourceMap ) ;
Code	String code = toSource ( root , sourceMap , sourceMap ) ;
Distance : 3

8
Tree	String code = toSource ( root ) ;
Code	String code = toSource ( root ) ;
Distance : 6

9
Tree	String code = toSource ( root , root , false ) ;
Code	String code = toSource ( root , root , false ) ;
Distance : 4

10
Tree	String root = code ( root ) ;
Code	String root = code ( root ) ;
Distance : 8

11
Tree	String code = toSource ( root , code , sourceMap ) ;
Code	String code = toSource ( root , code , sourceMap ) ;
Distance : 4

12
Tree	String code = code . toSource ( root , sourceMap , code ) ;
Code	String code = code . toSource ( root , sourceMap , code ) ;
Distance : 5

13
Tree	String code = toSource ( root ) ;
Code	String code = toSource ( root ) ;
Distance : 6

14
Tree	String root = toSource ( root , sourceMap , sourceMap ) ;
Code	String root = toSource ( root , sourceMap , sourceMap ) ;
Distance : 4

15
Tree	String code = toSource ( code ) ;
Code	String code = toSource ( code ) ;
Distance : 7

16
Tree	String code = toSource ( root , this . sourceMap ) ;
Code	String code = toSource ( root , this . sourceMap ) ;
Distance : 5

17
Tree	String sourceMap = toSource ( root , sourceMap ) ;
Code	String sourceMap = toSource ( root , sourceMap ) ;
Distance : 5

18
Tree	String code = resolveVariable . toSource ( root , sourceMap ) ;
Code	String code = resolveVariable . toSource ( root , sourceMap ) ;
Distance : 6

19
Tree	String code = sourceMap . toSource ( root , sourceMap ) ;
Code	String code = sourceMap . toSource ( root , sourceMap ) ;
Distance : 6

20
Tree	String root = sourceMap . toSource ( root ) ;
Code	String root = sourceMap . toSource ( root ) ;
Distance : 9

21
Tree	String code = toSource ( root , sourceMap , code ) ;
Code	String code = toSource ( root , sourceMap , code ) ;
Distance : 3

22
Tree	String code = toSource ( root , sourceMap , root ) ;
Code	String code = toSource ( root , sourceMap , root ) ;
Distance : 3

23
Tree	String root = toSource ( root , code , sourceMap ) ;
Code	String root = toSource ( root , code , sourceMap ) ;
Distance : 5

24
Tree	String code = sourceMap . toSource ( root , code , code ) ;
Code	String code = sourceMap . toSource ( root , code , code ) ;
Distance : 6

25
Tree	String code = toSource . code ( root ) ;
Code	String code = toSource . code ( root ) ;
Distance : 8

26
Tree	String code = toSource () . toSource ( root ) ;
Code	String code = toSource () . toSource ( root ) ;
Distance : 8

27
Tree	String code = toSource ( root , sourceMap , false ) ;
Code	String code = toSource ( root , sourceMap , false ) ;
Distance : 3

28
Tree	String sourceMap = toSource ( root , this . code ) ;
Code	String sourceMap = toSource ( root , this . code ) ;
Distance : 6

29
Tree	String root = code . toSource ( root ) ;
Code	String root = code . toSource ( root ) ;
Distance : 9

30
Tree	String code = sourceMap ( root , sourceMap ) ;
Code	String code = sourceMap ( root , sourceMap ) ;
Distance : 5

31
Tree	String code = code ( root , sourceMap ) ;
Code	String code = code ( root , sourceMap ) ;
Distance : 5

32
Tree	String code = sourceMap ( root , code ) ;
Code	String code = sourceMap ( root , code ) ;
Distance : 6

33
Tree	String code = sourceMap . root ( root ) ;
Code	String code = sourceMap . root ( root ) ;
Distance : 8

34
Tree	String code = sourceMap . toSource ( root ) ;
Code	String code = sourceMap . toSource ( root ) ;
Distance : 8

35
Tree	String code = toSource ( root , code , root ) ;
Code	String code = toSource ( root , code , root ) ;
Distance : 4

36
Tree	String root = root ( root ) ;
Code	String root = root ( root ) ;
Distance : 8

37
Tree	String code = toSource ( root , root , sourceMap , sourceMap ) ;
Code	String code = toSource ( root , root , sourceMap , sourceMap ) ;
Distance : 4

38
Tree	String code = code . root ( root ) ;
Code	String code = code . root ( root ) ;
Distance : 8

39
Tree	String root = root . toSource ( root ) ;
Code	String root = root . toSource ( root ) ;
Distance : 9

40
Tree	String code = code ( root , code ) ;
Code	String code = code ( root , code ) ;
Distance : 6

41
Tree	String code = sourceMap . toSource ( this , root , root ) ;
Code	String code = sourceMap . toSource ( this , root , root ) ;
Distance : 7

42
Tree	String code = root ( root , sourceMap ) ;
Code	String code = root ( root , sourceMap ) ;
Distance : 5

43
Tree	String code = code . toSource ( root ) ;
Code	String code = code . toSource ( root ) ;
Distance : 8

44
Tree	String code = toSource ( code , code , false ) ;
Code	String code = toSource ( code , code , false ) ;
Distance : 5

45
Tree	String sourceMap = sourceMap ( root ) ;
Code	String sourceMap = sourceMap ( root ) ;
Distance : 8

46
Tree	String code = resolveVariable . toSource ( root , code ) ;
Code	String code = resolveVariable . toSource ( root , code ) ;
Distance : 7

47
Tree	String sourceMap = sourceMap . toSource ( root ) ;
Code	String sourceMap = sourceMap . toSource ( root ) ;
Distance : 9

48
Tree	String code = code . toSource ( root , code , code ) ;
Code	String code = code . toSource ( root , code , code ) ;
Distance : 6

49
Tree	String code = toSource () . toSource ( root , code ) ;
Code	String code = toSource () . toSource ( root , code ) ;
Distance : 8

50
Tree	String code = toSource ( root , code , code ) ;
Code	String code = toSource ( root , code , code ) ;
Distance : 4

51
Tree	String code = toSource . toSource ( root , sourceMap ) ;
Code	String code = toSource . toSource ( root , sourceMap ) ;
Distance : 6

52
Tree	String sourceMap = toSource ( root , code ) ;
Code	String sourceMap = toSource ( root , code ) ;
Distance : 6

53
Tree	String code = code . toSource ( this , root ) ;
Code	String code = code . toSource ( this , root ) ;
Distance : 8

54
Tree	String code = code . toSource ( this , root , sourceMap ) ;
Code	String code = code . toSource ( this , root , sourceMap ) ;
Distance : 7

55
Tree	String root = sourceMap . toSource ( this , root ) ;
Code	String root = sourceMap . toSource ( this , root ) ;
Distance : 9

56
Tree	String code = root ( root , code ) ;
Code	String code = root ( root , code ) ;
Distance : 6

57
Tree	String code = code . toSource ( root , sourceMap ) ;
Code	String code = code . toSource ( root , sourceMap ) ;
Distance : 6

58
Tree	String sourceMap = code . toSource ( root ) ;
Code	String sourceMap = code . toSource ( root ) ;
Distance : 9

59
Tree	String code = code . toSource ( this , root , root ) ;
Code	String code = code . toSource ( this , root , root ) ;
Distance : 7

60
Tree	String code = sourceMap . toSource ( root , sourceMap , sourceMap ) ;
Code	String code = sourceMap . toSource ( root , sourceMap , sourceMap ) ;
Distance : 5

61
Tree	String code = toSource ( toSource () , STRING_CONSTANT , sourceMap , code ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , sourceMap , code ) ;
Distance : 6

62
Tree	String code = sourceMap ( root , code , sourceMap ) ;
Code	String code = sourceMap ( root , code , sourceMap ) ;
Distance : 5

63
Tree	String code = ( ( root ) this ) . toSource ( root , root ) ;
Code	String code = ( ( root ) this ) . toSource ( root , root ) ;
Distance : 10

64
Tree	String code = toSource . toSource ( root ) ;
Code	String code = toSource . toSource ( root ) ;
Distance : 8

65
Tree	String code = sourceMap ( root ) ;
Code	String code = sourceMap ( root ) ;
Distance : 7

66
Tree	String code = root ( root ) ;
Code	String code = root ( root ) ;
Distance : 7

67
Tree	String code = code ( root , code , sourceMap ) ;
Code	String code = code ( root , code , sourceMap ) ;
Distance : 5

68
Tree	String sourceMap = root . toSource ( root ) ;
Code	String sourceMap = root . toSource ( root ) ;
Distance : 9

69
Tree	String code = root . toSource ( this , root ) ;
Code	String code = root . toSource ( this , root ) ;
Distance : 8

70
Tree	String root = root . toSource ( this , root ) ;
Code	String root = root . toSource ( this , root ) ;
Distance : 9

71
Tree	String code = sourceMap . toSource ( root , code ) ;
Code	String code = sourceMap . toSource ( root , code ) ;
Distance : 7

72
Tree	String code = root ( root , sourceMap , sourceMap ) ;
Code	String code = root ( root , sourceMap , sourceMap ) ;
Distance : 4

73
Tree	String code = toSource ( toSource () , STRING_CONSTANT , root , sourceMap ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , root , sourceMap ) ;
Distance : 6

74
Tree	String code = root ( root , code , sourceMap ) ;
Code	String code = root ( root , code , sourceMap ) ;
Distance : 5

75
Tree	String root = toSource ( root ) ;
Code	String root = toSource ( root ) ;
Distance : 7

76
Tree	String code = toSource () . toSource ( code , sourceMap ) ;
Code	String code = toSource () . toSource ( code , sourceMap ) ;
Distance : 8

77
Tree	String code = sourceMap ( root , sourceMap , code ) ;
Code	String code = sourceMap ( root , sourceMap , code ) ;
Distance : 4

78
Tree	String code = toSource ( root , sourceMap , sourceMap , root ) ;
Code	String code = toSource ( root , sourceMap , sourceMap , root ) ;
Distance : 3

79
Tree	String code = code ( root ) ;
Code	String code = code ( root ) ;
Distance : 7

80
Tree	String code = toSource () . toSource ( code , code ) ;
Code	String code = toSource () . toSource ( code , code ) ;
Distance : 8

81
Tree	String code = toSource ( toSource () , STRING_CONSTANT , root , code ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , root , code ) ;
Distance : 6

82
Tree	String code = code ( root , sourceMap , code ) ;
Code	String code = code ( root , sourceMap , code ) ;
Distance : 4

83
Tree	String code = root . toSource ( root , sourceMap ) ;
Code	String code = root . toSource ( root , sourceMap ) ;
Distance : 6

84
Tree	String code = toSource ( code , sourceMap , false ) ;
Code	String code = toSource ( code , sourceMap , false ) ;
Distance : 4

85
Tree	String root = code . toSource ( this , root ) ;
Code	String root = code . toSource ( this , root ) ;
Distance : 9

86
Tree	String code = sourceMap ( root , code , code ) ;
Code	String code = sourceMap ( root , code , code ) ;
Distance : 5

87
Tree	String sourceMap = sourceMap . toSource ( this , root ) ;
Code	String sourceMap = sourceMap . toSource ( this , root ) ;
Distance : 9

88
Tree	String code = code . sourceMap ( root ) ;
Code	String code = code . sourceMap ( root ) ;
Distance : 8

89
Tree	String code = toSource ( root ) ;
Code	String code = toSource ( root ) ;
Distance : 6

90
Tree	String code = toSource () . toSource ( sourceMap ) ;
Code	String code = toSource () . toSource ( sourceMap ) ;
Distance : 8

91
Tree	String code = toSource ( root , code , code , sourceMap ) ;
Code	String code = toSource ( root , code , code , sourceMap ) ;
Distance : 4

92
Tree	String code = sourceMap . code ( root ) ;
Code	String code = sourceMap . code ( root ) ;
Distance : 8

93
Tree	String code = toSource ( root ) ;
Code	String code = toSource ( root ) ;
Distance : 6

94
Tree	String code = toSource () . toSource ( root , root ) ;
Code	String code = toSource () . toSource ( root , root ) ;
Distance : 8

95
Tree	String code = toSource () . toSource ( sourceMap , sourceMap ) ;
Code	String code = toSource () . toSource ( sourceMap , sourceMap ) ;
Distance : 7

96
Tree	String code = sourceMap ( root , sourceMap , sourceMap ) ;
Code	String code = sourceMap ( root , sourceMap , sourceMap ) ;
Distance : 4

97
Tree	String root = toSource ( code ) ;
Code	String root = toSource ( code ) ;
Distance : 8

98
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

99
Tree	String code = ( ( root ) this ) . toSource ( code , sourceMap ) ;
Code	String code = ( ( root ) this ) . toSource ( code , sourceMap ) ;
Distance : 10

100
Tree	String root = toSource () . toSource ( root ) ;
Code	String root = toSource () . toSource ( root ) ;
Distance : 9

101
Tree	String code = code . code ( root ) ;
Code	String code = code . code ( root ) ;
Distance : 9

102
Tree	String code = root . sourceMap ( root ) ;
Code	String code = root . sourceMap ( root ) ;
Distance : 7

103
Tree	String code = toSource () . toSource ( root ) ;
Code	String code = toSource () . toSource ( root ) ;
Distance : 8

104
Tree	String code = toSource ( root , root , sourceMap ) ;
Code	String code = toSource ( root , root , sourceMap ) ;
Distance : 4

105
Tree	String code = toSource () . toSource ( root ) ;
Code	String code = toSource () . toSource ( root ) ;
Distance : 8

106
Tree	String code = root . toSource ( root ) ;
Code	String code = root . toSource ( root ) ;
Distance : 8

107
Tree	String code = toSource ( root , code ) ;
Code	String code = toSource ( root , code ) ;
Distance : 5

108
Tree	String code = root . code ( root ) ;
Code	String code = root . code ( root ) ;
Distance : 8

109
Tree	String code = toSource ( root , sourceMap , sourceMap , code ) ;
Code	String code = toSource ( root , sourceMap , sourceMap , code ) ;
Distance : 3

110
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

111
Tree	String code = root . toSource ( this , root , sourceMap ) ;
Code	String code = root . toSource ( this , root , sourceMap ) ;
Distance : 7

112
Tree	String code = code . toSource ( root , sourceMap , sourceMap ) ;
Code	String code = code . toSource ( root , sourceMap , sourceMap ) ;
Distance : 5

113
Tree	String code = sourceMap ( root , root ) ;
Code	String code = sourceMap ( root , root ) ;
Distance : 6

114
Tree	String code = sourceMap . toSource ( this , root , code ) ;
Code	String code = sourceMap . toSource ( this , root , code ) ;
Distance : 7

115
Tree	String code = toSource ( toSource () , STRING_CONSTANT , root , root ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , root , root ) ;
Distance : 6

116
Tree	String sourceMap = code ( root ) ;
Code	String sourceMap = code ( root ) ;
Distance : 8

117
Tree	String code = code ( root , root ) ;
Code	String code = code ( root , root ) ;
Distance : 6

118
Tree	String code = code . toSource ( this , root , code ) ;
Code	String code = code . toSource ( this , root , code ) ;
Distance : 7

119
Tree	String code = toSource ( root , sourceMap , code , sourceMap ) ;
Code	String code = toSource ( root , sourceMap , code , sourceMap ) ;
Distance : 3

120
Tree	String code = sourceMap . toSource ( root , code , sourceMap ) ;
Code	String code = sourceMap . toSource ( root , code , sourceMap ) ;
Distance : 6

121
Tree	String code = toSource ( sourceMap , sourceMap , false ) ;
Code	String code = toSource ( sourceMap , sourceMap , false ) ;
Distance : 4

122
Tree	String sourceMap = root ( root ) ;
Code	String sourceMap = root ( root ) ;
Distance : 8

123
Tree	String root = toSource () . toSource ( code ) ;
Code	String root = toSource () . toSource ( code ) ;
Distance : 9

124
Tree	String code = code . toSource ( root , code ) ;
Code	String code = code . toSource ( root , code ) ;
Distance : 7

125
Tree	String code = toSource ( root , this . root ) ;
Code	String code = toSource ( root , this . root ) ;
Distance : 5

126
Tree	String code = sourceMap . toSource ( this , root ) ;
Code	String code = sourceMap . toSource ( this , root ) ;
Distance : 8

127
Tree	String code = toSource ( code , this . code ) ;
Code	String code = toSource ( code , this . code ) ;
Distance : 6

128
Tree	String code = toSource ( root , root ) ;
Code	String code = toSource ( root , root ) ;
Distance : 5

129
Tree	String sourceMap = code . toSource ( this , root ) ;
Code	String sourceMap = code . toSource ( this , root ) ;
Distance : 9

130
Tree	String code = sourceMap . toSource ( this , code ) ;
Code	String code = sourceMap . toSource ( this , code ) ;
Distance : 8

131
Tree	String code = toSource ( root , code , sourceMap , code ) ;
Code	String code = toSource ( root , code , sourceMap , code ) ;
Distance : 4

132
Tree	String root = toSource ( root , sourceMap , false ) ;
Code	String root = toSource ( root , sourceMap , false ) ;
Distance : 4

133
Tree	String code = toSource ( sourceMap , this . code ) ;
Code	String code = toSource ( sourceMap , this . code ) ;
Distance : 5

134
Tree	String code = ( ( root ) this ) . toSource ( code , code ) ;
Code	String code = ( ( root ) this ) . toSource ( code , code ) ;
Distance : 10

135
Tree	String code = toSource ( sourceMap ) ;
Code	String code = toSource ( sourceMap ) ;
Distance : 6

136
Tree	String code = toSource ( root , code , false ) ;
Code	String code = toSource ( root , code , false ) ;
Distance : 4

137
Tree	String code = toSource ( code , code ) ;
Code	String code = toSource ( code , code ) ;
Distance : 6

138
Tree	String code = toSource ( root , this . code ) ;
Code	String code = toSource ( root , this . code ) ;
Distance : 5

139
Tree	String code = ( ( root ) this ) . toSource ( root , sourceMap ) ;
Code	String code = ( ( root ) this ) . toSource ( root , sourceMap ) ;
Distance : 10

140
Tree	String root = toSource ( root , this . sourceMap ) ;
Code	String root = toSource ( root , this . sourceMap ) ;
Distance : 6

141
Tree	String code = Coordinates1D.NaN . toSource ( root , sourceMap ) ;
Code	String code = Coordinates1D.NaN . toSource ( root , sourceMap ) ;
Distance : 6

142
Tree	String sourceMap = toSource ( root , this . sourceMap ) ;
Code	String sourceMap = toSource ( root , this . sourceMap ) ;
Distance : 6

143
Tree	String root = toSource ( root , code , false ) ;
Code	String root = toSource ( root , code , false ) ;
Distance : 5

144
Tree	String root = ( ( root ) this ) . toSource ( root , sourceMap ) ;
Code	String root = ( ( root ) this ) . toSource ( root , sourceMap ) ;
Distance : 11

145
Tree	String code = source.sumOfLogs . toSource ( root , sourceMap ) ;
Code	String code = source.sumOfLogs . toSource ( root , sourceMap ) ;
Distance : 6

146
Tree	String code = code ( root , sourceMap , sourceMap ) ;
Code	String code = code ( root , sourceMap , sourceMap ) ;
Distance : 4

147
Tree	String code = toSource ( root , sourceMap , code , code ) ;
Code	String code = toSource ( root , sourceMap , code , code ) ;
Distance : 3

148
Tree	String code = root . toSource ( root , code ) ;
Code	String code = root . toSource ( root , code ) ;
Distance : 7

149
Tree	String code = code . toSource ( root , code , sourceMap ) ;
Code	String code = code . toSource ( root , code , sourceMap ) ;
Distance : 6

150
Tree	String code = sourceMap . sourceMap ( root ) ;
Code	String code = sourceMap . sourceMap ( root ) ;
Distance : 8

151
Tree	String code = root . toSource ( root , sourceMap , sourceMap ) ;
Code	String code = root . toSource ( root , sourceMap , sourceMap ) ;
Distance : 5

152
Tree	String code = toSource ( root , code , code , code ) ;
Code	String code = toSource ( root , code , code , code ) ;
Distance : 4

153
Tree	String root = toSource ( root , sourceMap ) ;
Code	String root = toSource ( root , sourceMap ) ;
Distance : 5

154
Tree	String code = root . toSource ( this , root , code ) ;
Code	String code = root . toSource ( this , root , code ) ;
Distance : 7

155
Tree	String code = sourceMap . toSource ( this , root , sourceMap ) ;
Code	String code = sourceMap . toSource ( this , root , sourceMap ) ;
Distance : 7

156
Tree	String root = toSource ( root , code ) ;
Code	String root = toSource ( root , code ) ;
Distance : 6

157
Tree	String code = root . toSource ( root , code , sourceMap ) ;
Code	String code = root . toSource ( root , code , sourceMap ) ;
Distance : 6

158
Tree	String code = code ( root , code , code ) ;
Code	String code = code ( root , code , code ) ;
Distance : 5

159
Tree	String code = toSource . toSource ( root , code ) ;
Code	String code = toSource . toSource ( root , code ) ;
Distance : 7

160
Tree	String code = toSource ( toSource () , STRING_CONSTANT , code , sourceMap ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , code , sourceMap ) ;
Distance : 6

161
Tree	String code = sourceMap . toSource ( root , sourceMap , code ) ;
Code	String code = sourceMap . toSource ( root , sourceMap , code ) ;
Distance : 5

162
Tree	String code = toSource ( code , sourceMap ) ;
Code	String code = toSource ( code , sourceMap ) ;
Distance : 5

163
Tree	String root = toSource ( toSource () , STRING_CONSTANT , root , sourceMap ) ;
Code	String root = toSource ( toSource () , STRING_CONSTANT , root , sourceMap ) ;
Distance : 7

164
Tree	String code = toSource ( root , root , code ) ;
Code	String code = toSource ( root , root , code ) ;
Distance : 4

165
Tree	String code = toSource () . toSource ( root , sourceMap ) ;
Code	String code = toSource () . toSource ( root , sourceMap ) ;
Distance : 7

166
Tree	String root = toSource () . toSource ( root , sourceMap ) ;
Code	String root = toSource () . toSource ( root , sourceMap ) ;
Distance : 8

167
Tree	String sourceMap = toSource ( root ) ;
Code	String sourceMap = toSource ( root ) ;
Distance : 7

168
Tree	String sourceMap = toSource ( code ) ;
Code	String sourceMap = toSource ( code ) ;
Distance : 8

169
Tree	String sourceMap = toSource () . toSource ( code ) ;
Code	String sourceMap = toSource () . toSource ( code ) ;
Distance : 9

170
Tree	String sourceMap = toSource () . toSource ( root ) ;
Code	String sourceMap = toSource () . toSource ( root ) ;
Distance : 9

171
Tree	String root = toSource () . toSource ( root , code ) ;
Code	String root = toSource () . toSource ( root , code ) ;
Distance : 9

172
Tree	String root = toSource () . toSource ( sourceMap ) ;
Code	String root = toSource () . toSource ( sourceMap ) ;
Distance : 9

173
Tree	String code = toSource ( root , sourceMap , sourceMap , sourceMap ) ;
Code	String code = toSource ( root , sourceMap , sourceMap , sourceMap ) ;
Distance : 3

174
Tree	String code = toSource ( toSource () , STRING_CONSTANT , sourceMap , sourceMap ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , sourceMap , sourceMap ) ;
Distance : 6

175
Tree	String code = StandardBasicTypes.INTEGER . toSource ( root , sourceMap ) ;
Code	String code = StandardBasicTypes.INTEGER . toSource ( root , sourceMap ) ;
Distance : 6

176
Tree	String code = newParserConfig . toSource ( root , sourceMap ) ;
Code	String code = newParserConfig . toSource ( root , sourceMap ) ;
Distance : 6

177
Tree	String sourceMap = toSource ( toSource () , STRING_CONSTANT , root , sourceMap ) ;
Code	String sourceMap = toSource ( toSource () , STRING_CONSTANT , root , sourceMap ) ;
Distance : 7

178
Tree	String code = source.moment . toSource ( root , sourceMap ) ;
Code	String code = source.moment . toSource ( root , sourceMap ) ;
Distance : 6

179
Tree	String code = extractCauseUnchecked . toSource ( root , sourceMap ) ;
Code	String code = extractCauseUnchecked . toSource ( root , sourceMap ) ;
Distance : 6

180
Tree	String code = toSource . toSource ( this , root , sourceMap ) ;
Code	String code = toSource . toSource ( this , root , sourceMap ) ;
Distance : 7

181
Tree	String code = ( ( root ) this ) . toSource ( root , code ) ;
Code	String code = ( ( root ) this ) . toSource ( root , code ) ;
Distance : 10

182
Tree	String code = code . toSource ( root , root ) ;
Code	String code = code . toSource ( root , root ) ;
Distance : 7

183
Tree	String root = ( ( root ) this ) . toSource ( root , code ) ;
Code	String root = ( ( root ) this ) . toSource ( root , code ) ;
Distance : 11

184
Tree	String code = ( ( root ) this ) . toSource ( sourceMap , code ) ;
Code	String code = ( ( root ) this ) . toSource ( sourceMap , code ) ;
Distance : 10

185
Tree	String root = toSource ( root , this . code ) ;
Code	String root = toSource ( root , this . code ) ;
Distance : 6

186
Tree	String sourceMap = toSource ( root , sourceMap , false ) ;
Code	String sourceMap = toSource ( root , sourceMap , false ) ;
Distance : 4

187
Tree	String sourceMap = toSource ( root , code , false ) ;
Code	String sourceMap = toSource ( root , code , false ) ;
Distance : 5

188
Tree	String code = ( ( root ) this ) . toSource ( sourceMap , sourceMap ) ;
Code	String code = ( ( root ) this ) . toSource ( sourceMap , sourceMap ) ;
Distance : 10

189
Tree	String sourceMap = ( ( root ) this ) . toSource ( root , sourceMap ) ;
Code	String sourceMap = ( ( root ) this ) . toSource ( root , sourceMap ) ;
Distance : 11

190
Tree	String code = toSource ( sourceMap , sourceMap ) ;
Code	String code = toSource ( sourceMap , sourceMap ) ;
Distance : 5

191
Tree	String code = toSource . toSource ( this , root , code ) ;
Code	String code = toSource . toSource ( this , root , code ) ;
Distance : 7

192
Tree	String code = toSource . toSource ( this , root ) ;
Code	String code = toSource . toSource ( this , root ) ;
Distance : 7

193
Tree	String code = sourceMap . toSource ( root , root ) ;
Code	String code = sourceMap . toSource ( root , root ) ;
Distance : 7

194
Tree	String root = toSource ( sourceMap ) ;
Code	String root = toSource ( sourceMap ) ;
Distance : 7

195
Tree	String code = toSource ( toSource () , STRING_CONSTANT , code , code ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , code , code ) ;
Distance : 6

196
Tree	String sourceMap = toSource () . toSource ( root , sourceMap ) ;
Code	String sourceMap = toSource () . toSource ( root , sourceMap ) ;
Distance : 8

197
Tree	String root = toSource ( toSource () , STRING_CONSTANT , root , code ) ;
Code	String root = toSource ( toSource () , STRING_CONSTANT , root , code ) ;
Distance : 7

198
Tree	String sourceMap = toSource () . toSource ( root , code ) ;
Code	String sourceMap = toSource () . toSource ( root , code ) ;
Distance : 9

199
Tree	String code = toSource () . toSource ( code ) ;
Code	String code = toSource () . toSource ( code ) ;
Distance : 8

========================================================================


========================================================================
Example Number: 24
Parent Code is: 
this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
-------------------------------------------------------------------------------
Child code is: 
this . maybeAliased = NodeUtil . isExpressionResultUsed ( assignNode ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=maybeAliased})) (204{val==}) (38 (207{val=!}) (32 (32 (800{val=assignNode}) (235{val=.}) (802{val=getParent}) (216{val=()})) (235{val=.}) (802{val=isExprResult}) (216{val=()})))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=maybeAliased})) (204{val==}) (32 (800{val=NodeUtil}) (235{val=.}) (802{val=isExpressionResultUsed}) (214{val=(}) (800{val=assignNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/45/parent/src_com_google_javascript_jscomp_RemoveUnusedVars.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	entry.map = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	entry.map = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

1
Tree	entry.map = new isExprResult ( assignNode ) . isExprResult () ;
Code	entry.map = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

2
Tree	nt1.rawType = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	nt1.rawType = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

3
Tree	setMinorTickCount = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	setMinorTickCount = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

4
Tree	setMinorTickCount = new isExprResult ( assignNode ) . isExprResult () ;
Code	setMinorTickCount = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

5
Tree	ref.node = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	ref.node = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

6
Tree	ref.node = new isExprResult ( assignNode ) . isExprResult () ;
Code	ref.node = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

7
Tree	LocalizedFormats.EVALUATIONS = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	LocalizedFormats.EVALUATIONS = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

8
Tree	ref.node = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	ref.node = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

9
Tree	nt1.rawType = new isExprResult ( assignNode ) . isExprResult () ;
Code	nt1.rawType = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

10
Tree	nt1.rawType = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	nt1.rawType = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

11
Tree	addListeners = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	addListeners = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

12
Tree	SimplexSolver.DEFAULT_ULPS = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	SimplexSolver.DEFAULT_ULPS = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

13
Tree	LocalizedFormats.EVALUATIONS = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	LocalizedFormats.EVALUATIONS = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

14
Tree	LocalizedFormats.EVALUATIONS = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	LocalizedFormats.EVALUATIONS = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

15
Tree	NewTypeInference.INEXISTENT_PROPERTY = new gp ( assignNode ) . isExprResult () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = new gp ( assignNode ) . isExprResult () ;
Distance : 9

16
Tree	setMinorTickCount = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	setMinorTickCount = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

17
Tree	LocalizedFormats.EVALUATIONS = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	LocalizedFormats.EVALUATIONS = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

18
Tree	LocalizedFormats.EVALUATIONS = new isExprResult ( assignNode ) . isExprResult () ;
Code	LocalizedFormats.EVALUATIONS = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

19
Tree	setMinorTickCount = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	setMinorTickCount = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

20
Tree	setMinorTickCount = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	setMinorTickCount = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

21
Tree	typeArguments.length = new gp ( assignNode ) . isExprResult () ;
Code	typeArguments.length = new gp ( assignNode ) . isExprResult () ;
Distance : 9

22
Tree	ref.node = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	ref.node = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

23
Tree	this . assignNode = ( assignNode ) assignNode . isExprResult () . isExprResult () ;
Code	this . assignNode = ( assignNode ) assignNode . isExprResult () . isExprResult () ;
Distance : 10

24
Tree	ref.node = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	ref.node = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

25
Tree	maybeAliased /= NodeUtil * NodeUtil . getParent () . isExprResult () ;
Code	maybeAliased /= NodeUtil * NodeUtil . getParent () . isExprResult () ;
Distance : 9

26
Tree	this . NodeUtil = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	this . NodeUtil = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 10

27
Tree	typeArguments.length = assignNode . getParent ( this . assignNode ) ;
Code	typeArguments.length = assignNode . getParent ( this . assignNode ) ;
Distance : 7

28
Tree	typeArguments.length = assignNode . NodeUtil ( assignNode ) ;
Code	typeArguments.length = assignNode . NodeUtil ( assignNode ) ;
Distance : 5

29
Tree	assignNode /= assignNode * NodeUtil . getParent () . isExprResult () ;
Code	assignNode /= assignNode * NodeUtil . getParent () . isExprResult () ;
Distance : 9

30
Tree	this . NodeUtil = null ;
Code	this . NodeUtil = null ;
Distance : 7

31
Tree	maybeAliased /= assignNode * assignNode . getParent () . isExprResult () ;
Code	maybeAliased /= assignNode * assignNode . getParent () . isExprResult () ;
Distance : 10

32
Tree	addListeners = new NodeUtil ( assignNode ) . isExprResult () ;
Code	addListeners = new NodeUtil ( assignNode ) . isExprResult () ;
Distance : 9

33
Tree	RemoveUnusedCode.Builder = ( assignNode ) child.parent . getParent () ;
Code	RemoveUnusedCode.Builder = ( assignNode ) child.parent . getParent () ;
Distance : 10

34
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) child.parent . getParent () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) child.parent . getParent () ;
Distance : 10

35
Tree	entry.map = ( assignNode ) child.parent . getParent () ;
Code	entry.map = ( assignNode ) child.parent . getParent () ;
Distance : 10

36
Tree	LocalizedFormats.EVALUATIONS = ( assignNode ) child.parent . getParent () ;
Code	LocalizedFormats.EVALUATIONS = ( assignNode ) child.parent . getParent () ;
Distance : 10

37
Tree	nt1.rawType = ( assignNode ) child.parent . getParent () ;
Code	nt1.rawType = ( assignNode ) child.parent . getParent () ;
Distance : 10

38
Tree	setMinorTickCount = ( assignNode ) child.parent . getParent () ;
Code	setMinorTickCount = ( assignNode ) child.parent . getParent () ;
Distance : 10

39
Tree	ref.node = ( assignNode ) child.parent . getParent () ;
Code	ref.node = ( assignNode ) child.parent . getParent () ;
Distance : 10

40
Tree	this . maybeAliased = ( NodeUtil ) NodeUtil . getParent () . isExprResult () ;
Code	this . maybeAliased = ( NodeUtil ) NodeUtil . getParent () . isExprResult () ;
Distance : 8

41
Tree	finder.firstUnverifiedToReturn = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	finder.firstUnverifiedToReturn = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

42
Tree	addListeners = ( assignNode ) child.parent . getParent () ;
Code	addListeners = ( assignNode ) child.parent . getParent () ;
Distance : 10

43
Tree	addListeners = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	addListeners = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

44
Tree	this . maybeAliased = return; ;
Code	this . maybeAliased = return; ;
Distance : 6

45
Tree	finder.firstUnverifiedToReturn = ( assignNode ) child.parent . getParent () ;
Code	finder.firstUnverifiedToReturn = ( assignNode ) child.parent . getParent () ;
Distance : 10

46
Tree	addListeners = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	addListeners = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

47
Tree	addListeners = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	addListeners = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

48
Tree	this . maybeAliased = break; ;
Code	this . maybeAliased = break; ;
Distance : 6

49
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . assignNode ( assignNode ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . assignNode ( assignNode ) ;
Distance : 5

50
Tree	assignNode /= NodeUtil * NodeUtil . getParent () . isExprResult () ;
Code	assignNode /= NodeUtil * NodeUtil . getParent () . isExprResult () ;
Distance : 9

51
Tree	this . assignNode = ( assignNode ) assignNode . getParent () ;
Code	this . assignNode = ( assignNode ) assignNode . getParent () ;
Distance : 8

52
Tree	this . maybeAliased = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	this . maybeAliased = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 9

53
Tree	this . maybeAliased = null ;
Code	this . maybeAliased = null ;
Distance : 6

54
Tree	maybeAliased /= NodeUtil * assignNode . getParent () . isExprResult () ;
Code	maybeAliased /= NodeUtil * assignNode . getParent () . isExprResult () ;
Distance : 10

55
Tree	this . maybeAliased = ( isExprResult ) assignNode . getParent () ;
Code	this . maybeAliased = ( isExprResult ) assignNode . getParent () ;
Distance : 7

56
Tree	this . maybeAliased = ( NodeUtil ) assignNode . getParent () ;
Code	this . maybeAliased = ( NodeUtil ) assignNode . getParent () ;
Distance : 6

57
Tree	this . maybeAliased = continue; ;
Code	this . maybeAliased = continue; ;
Distance : 6

58
Tree	assignNode /= assignNode * assignNode . getParent () . isExprResult () ;
Code	assignNode /= assignNode * assignNode . getParent () . isExprResult () ;
Distance : 10

59
Tree	this . assignNode = return; ;
Code	this . assignNode = return; ;
Distance : 7

60
Tree	this . assignNode = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	this . assignNode = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 10

61
Tree	this . maybeAliased = super(); ;
Code	this . maybeAliased = super(); ;
Distance : 6

62
Tree	this . assignNode = break; ;
Code	this . assignNode = break; ;
Distance : 7

63
Tree	this . maybeAliased = ( RotationConvention.VECTOR_OPERATOR ) assignNode . getParent () ;
Code	this . maybeAliased = ( RotationConvention.VECTOR_OPERATOR ) assignNode . getParent () ;
Distance : 7

64
Tree	this . assignNode = null ;
Code	this . assignNode = null ;
Distance : 7

65
Tree	this . assignNode = continue; ;
Code	this . assignNode = continue; ;
Distance : 7

66
Tree	assignNode /= NodeUtil * assignNode . getParent () . isExprResult () ;
Code	assignNode /= NodeUtil * assignNode . getParent () . isExprResult () ;
Distance : 10

67
Tree	typeArguments.length = ( assignNode ) getParent ( assignNode ) ;
Code	typeArguments.length = ( assignNode ) getParent ( assignNode ) ;
Distance : 7

68
Tree	NodeUtil /= assignNode * NodeUtil . getParent () . isExprResult () ;
Code	NodeUtil /= assignNode * NodeUtil . getParent () . isExprResult () ;
Distance : 9

69
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

70
Tree	RemoveUnusedCode.Builder = ( assignNode ) getParent ( assignNode ) ;
Code	RemoveUnusedCode.Builder = ( assignNode ) getParent ( assignNode ) ;
Distance : 7

71
Tree	NewTypeInference.INEXISTENT_PROPERTY = new VerifyingRecorder ( assignNode ) . isExprResult () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = new VerifyingRecorder ( assignNode ) . isExprResult () ;
Distance : 9

72
Tree	this . maybeAliased = ( assignNode ) NodeUtil . getParent () ;
Code	this . maybeAliased = ( assignNode ) NodeUtil . getParent () ;
Distance : 7

73
Tree	maybeAliased /= assignNode * NodeUtil . isExprResult () . isExprResult () ;
Code	maybeAliased /= assignNode * NodeUtil . isExprResult () . isExprResult () ;
Distance : 9

74
Tree	entry.map = new ByteBuddy ( assignNode ) . isExprResult () ;
Code	entry.map = new ByteBuddy ( assignNode ) . isExprResult () ;
Distance : 9

75
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) getParent ( assignNode ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) getParent ( assignNode ) ;
Distance : 7

76
Tree	entry.map = ( assignNode ) getParent ( assignNode ) ;
Code	entry.map = ( assignNode ) getParent ( assignNode ) ;
Distance : 7

77
Tree	entry.map = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	entry.map = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

78
Tree	LocalizedFormats.EVALUATIONS = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	LocalizedFormats.EVALUATIONS = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

79
Tree	typeArguments.length = new NodeUtil ( assignNode ) . isExprResult () ;
Code	typeArguments.length = new NodeUtil ( assignNode ) . isExprResult () ;
Distance : 9

80
Tree	nt1.rawType = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	nt1.rawType = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

81
Tree	nt1.rawType = ( assignNode ) getParent ( assignNode ) ;
Code	nt1.rawType = ( assignNode ) getParent ( assignNode ) ;
Distance : 7

82
Tree	LocalizedFormats.EVALUATIONS = ( assignNode ) getParent ( assignNode ) ;
Code	LocalizedFormats.EVALUATIONS = ( assignNode ) getParent ( assignNode ) ;
Distance : 7

83
Tree	setMinorTickCount = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	setMinorTickCount = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

84
Tree	ref.node = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	ref.node = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

85
Tree	setMinorTickCount = ( assignNode ) getParent ( assignNode ) ;
Code	setMinorTickCount = ( assignNode ) getParent ( assignNode ) ;
Distance : 7

86
Tree	NewTypeInference.INEXISTENT_PROPERTY = new NodeUtil ( assignNode ) . isExprResult () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = new NodeUtil ( assignNode ) . isExprResult () ;
Distance : 9

87
Tree	addListeners = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	addListeners = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

88
Tree	ref.node = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Code	ref.node = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Distance : 13

89
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Distance : 12

90
Tree	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

91
Tree	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

92
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

93
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

94
Tree	ref.node = ( assignNode ) getParent ( assignNode ) ;
Code	ref.node = ( assignNode ) getParent ( assignNode ) ;
Distance : 7

95
Tree	finder.firstUnverifiedToReturn = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	finder.firstUnverifiedToReturn = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

96
Tree	entry.map = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	entry.map = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

97
Tree	entry.map = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	entry.map = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

98
Tree	nt1.rawType = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	nt1.rawType = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

99
Tree	nt1.rawType = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	nt1.rawType = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

100
Tree	typeArguments.length = TypeInferenceMode.CHECKED . getParent () ;
Code	typeArguments.length = TypeInferenceMode.CHECKED . getParent () ;
Distance : 8

101
Tree	NewTypeInference.INEXISTENT_PROPERTY = TypeInferenceMode.CHECKED . getParent () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = TypeInferenceMode.CHECKED . getParent () ;
Distance : 8

102
Tree	RemoveUnusedCode.Builder = TypeInferenceMode.CHECKED . getParent () ;
Code	RemoveUnusedCode.Builder = TypeInferenceMode.CHECKED . getParent () ;
Distance : 8

103
Tree	entry.map = TypeInferenceMode.CHECKED . getParent () ;
Code	entry.map = TypeInferenceMode.CHECKED . getParent () ;
Distance : 8

104
Tree	nt1.rawType = TypeInferenceMode.CHECKED . getParent () ;
Code	nt1.rawType = TypeInferenceMode.CHECKED . getParent () ;
Distance : 8

105
Tree	LocalizedFormats.EVALUATIONS = TypeInferenceMode.CHECKED . getParent () ;
Code	LocalizedFormats.EVALUATIONS = TypeInferenceMode.CHECKED . getParent () ;
Distance : 8

106
Tree	setMinorTickCount = TypeInferenceMode.CHECKED . getParent () ;
Code	setMinorTickCount = TypeInferenceMode.CHECKED . getParent () ;
Distance : 8

107
Tree	ref.node = TypeInferenceMode.CHECKED . getParent () ;
Code	ref.node = TypeInferenceMode.CHECKED . getParent () ;
Distance : 8

108
Tree	SimplexSolver.DEFAULT_ULPS = TypeInferenceMode.CHECKED . getParent () ;
Code	SimplexSolver.DEFAULT_ULPS = TypeInferenceMode.CHECKED . getParent () ;
Distance : 8

109
Tree	typeArguments.length = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Code	typeArguments.length = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Distance : 13

110
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Distance : 13

111
Tree	RemoveUnusedCode.Builder = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Code	RemoveUnusedCode.Builder = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Distance : 13

112
Tree	entry.map = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Code	entry.map = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Distance : 13

113
Tree	addListeners = TypeInferenceMode.CHECKED . getParent () ;
Code	addListeners = TypeInferenceMode.CHECKED . getParent () ;
Distance : 8

114
Tree	typeArguments.length = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	typeArguments.length = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

115
Tree	typeArguments.length = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	typeArguments.length = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

116
Tree	typeArguments.length = ( assignNode ) assignNode . getParent () ;
Code	typeArguments.length = ( assignNode ) assignNode . getParent () ;
Distance : 10

117
Tree	typeArguments.length = assignNode . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Code	typeArguments.length = assignNode . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Distance : 12

118
Tree	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent () ;
Code	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent () ;
Distance : 10

119
Tree	nt1.rawType = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Code	nt1.rawType = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Distance : 13

120
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) assignNode . getParent () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) assignNode . getParent () ;
Distance : 10

121
Tree	LocalizedFormats.EVALUATIONS = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Code	LocalizedFormats.EVALUATIONS = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Distance : 13

122
Tree	entry.map = ( assignNode ) assignNode . getParent () ;
Code	entry.map = ( assignNode ) assignNode . getParent () ;
Distance : 10

123
Tree	nt1.rawType = ( assignNode ) assignNode . getParent () ;
Code	nt1.rawType = ( assignNode ) assignNode . getParent () ;
Distance : 10

124
Tree	LocalizedFormats.EVALUATIONS = ( assignNode ) assignNode . getParent () ;
Code	LocalizedFormats.EVALUATIONS = ( assignNode ) assignNode . getParent () ;
Distance : 10

125
Tree	setMinorTickCount = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Code	setMinorTickCount = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Distance : 13

126
Tree	setMinorTickCount = ( assignNode ) assignNode . getParent () ;
Code	setMinorTickCount = ( assignNode ) assignNode . getParent () ;
Distance : 10

127
Tree	ref.node = ( assignNode ) assignNode . getParent () ;
Code	ref.node = ( assignNode ) assignNode . getParent () ;
Distance : 10

128
Tree	addListeners = ( assignNode ) assignNode . getParent () ;
Code	addListeners = ( assignNode ) assignNode . getParent () ;
Distance : 10

129
Tree	finder.firstUnverifiedToReturn = ( assignNode ) assignNode . getParent () ;
Code	finder.firstUnverifiedToReturn = ( assignNode ) assignNode . getParent () ;
Distance : 10

130
Tree	finder.firstUnverifiedToReturn = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	finder.firstUnverifiedToReturn = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

131
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( this . assignNode ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( this . assignNode ) ;
Distance : 7

132
Tree	finder.firstUnverifiedToReturn = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	finder.firstUnverifiedToReturn = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

133
Tree	typeArguments.length = assignNode . getParent ( this . maybeAliased ) ;
Code	typeArguments.length = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

134
Tree	RemoveUnusedCode.Builder = assignNode . getParent ( this . assignNode ) ;
Code	RemoveUnusedCode.Builder = assignNode . getParent ( this . assignNode ) ;
Distance : 7

135
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . NodeUtil ( assignNode ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . NodeUtil ( assignNode ) ;
Distance : 5

136
Tree	RemoveUnusedCode.Builder = assignNode . NodeUtil ( assignNode ) ;
Code	RemoveUnusedCode.Builder = assignNode . NodeUtil ( assignNode ) ;
Distance : 5

137
Tree	typeArguments.length = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Code	typeArguments.length = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Distance : 9

138
Tree	typeArguments.length = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	typeArguments.length = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

139
Tree	entry.map = assignNode . getParent ( this . assignNode ) ;
Code	entry.map = assignNode . getParent ( this . assignNode ) ;
Distance : 7

140
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( this . maybeAliased ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

141
Tree	typeArguments.length = new ByteBuddy ( assignNode ) . isExprResult () ;
Code	typeArguments.length = new ByteBuddy ( assignNode ) . isExprResult () ;
Distance : 9

142
Tree	NewTypeInference.INEXISTENT_PROPERTY = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Distance : 9

143
Tree	RemoveUnusedCode.Builder = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Code	RemoveUnusedCode.Builder = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Distance : 9

144
Tree	NewTypeInference.INEXISTENT_PROPERTY = new ByteBuddy ( assignNode ) . isExprResult () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = new ByteBuddy ( assignNode ) . isExprResult () ;
Distance : 9

145
Tree	typeArguments.length = new VerifyingRecorder ( assignNode ) . isExprResult () ;
Code	typeArguments.length = new VerifyingRecorder ( assignNode ) . isExprResult () ;
Distance : 9

146
Tree	entry.map = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Code	entry.map = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Distance : 9

147
Tree	RemoveUnusedCode.Builder = new ByteBuddy ( assignNode ) . isExprResult () ;
Code	RemoveUnusedCode.Builder = new ByteBuddy ( assignNode ) . isExprResult () ;
Distance : 9

148
Tree	entry.map = assignNode . NodeUtil ( assignNode ) ;
Code	entry.map = assignNode . NodeUtil ( assignNode ) ;
Distance : 5

149
Tree	RemoveUnusedCode.Builder = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	RemoveUnusedCode.Builder = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

150
Tree	RemoveUnusedCode.Builder = new NodeUtil ( assignNode ) . isExprResult () ;
Code	RemoveUnusedCode.Builder = new NodeUtil ( assignNode ) . isExprResult () ;
Distance : 9

151
Tree	RemoveUnusedCode.Builder = assignNode . getParent ( this . maybeAliased ) ;
Code	RemoveUnusedCode.Builder = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

152
Tree	typeArguments.length = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	typeArguments.length = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

153
Tree	addListeners = ( assignNode ) getParent ( assignNode ) ;
Code	addListeners = ( assignNode ) getParent ( assignNode ) ;
Distance : 7

154
Tree	entry.map = assignNode . getParent ( this . maybeAliased ) ;
Code	entry.map = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

155
Tree	entry.map = new NodeUtil ( assignNode ) . isExprResult () ;
Code	entry.map = new NodeUtil ( assignNode ) . isExprResult () ;
Distance : 9

156
Tree	typeArguments.length = new isExprResult ( assignNode ) . isExprResult () ;
Code	typeArguments.length = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

157
Tree	nt1.rawType = assignNode . getParent ( this . assignNode ) ;
Code	nt1.rawType = assignNode . getParent ( this . assignNode ) ;
Distance : 7

158
Tree	typeArguments.length = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	typeArguments.length = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

159
Tree	finder.firstUnverifiedToReturn = ( assignNode ) getParent ( assignNode ) ;
Code	finder.firstUnverifiedToReturn = ( assignNode ) getParent ( assignNode ) ;
Distance : 7

160
Tree	NewTypeInference.INEXISTENT_PROPERTY = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

161
Tree	NewTypeInference.INEXISTENT_PROPERTY = new isExprResult ( assignNode ) . isExprResult () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

162
Tree	typeArguments.length = assignNode . assignNode ( assignNode ) ;
Code	typeArguments.length = assignNode . assignNode ( assignNode ) ;
Distance : 5

163
Tree	nt1.rawType = new NodeUtil ( assignNode ) . isExprResult () ;
Code	nt1.rawType = new NodeUtil ( assignNode ) . isExprResult () ;
Distance : 9

164
Tree	LocalizedFormats.EVALUATIONS = new NodeUtil ( assignNode ) . isExprResult () ;
Code	LocalizedFormats.EVALUATIONS = new NodeUtil ( assignNode ) . isExprResult () ;
Distance : 9

165
Tree	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

166
Tree	nt1.rawType = assignNode . NodeUtil ( assignNode ) ;
Code	nt1.rawType = assignNode . NodeUtil ( assignNode ) ;
Distance : 5

167
Tree	LocalizedFormats.EVALUATIONS = assignNode . getParent ( this . assignNode ) ;
Code	LocalizedFormats.EVALUATIONS = assignNode . getParent ( this . assignNode ) ;
Distance : 7

168
Tree	RemoveUnusedCode.Builder = new isExprResult ( assignNode ) . isExprResult () ;
Code	RemoveUnusedCode.Builder = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

169
Tree	typeArguments.length = ( assignNode ) child.parent . getParent () ;
Code	typeArguments.length = ( assignNode ) child.parent . getParent () ;
Distance : 10

170
Tree	LocalizedFormats.EVALUATIONS = assignNode . NodeUtil ( assignNode ) ;
Code	LocalizedFormats.EVALUATIONS = assignNode . NodeUtil ( assignNode ) ;
Distance : 5

171
Tree	setMinorTickCount = new NodeUtil ( assignNode ) . isExprResult () ;
Code	setMinorTickCount = new NodeUtil ( assignNode ) . isExprResult () ;
Distance : 9

172
Tree	setMinorTickCount = assignNode . NodeUtil ( assignNode ) ;
Code	setMinorTickCount = assignNode . NodeUtil ( assignNode ) ;
Distance : 5

173
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

174
Tree	ref.node = assignNode . NodeUtil ( assignNode ) ;
Code	ref.node = assignNode . NodeUtil ( assignNode ) ;
Distance : 5

175
Tree	RemoveUnusedCode.Builder = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	RemoveUnusedCode.Builder = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

176
Tree	ref.node = new NodeUtil ( assignNode ) . isExprResult () ;
Code	ref.node = new NodeUtil ( assignNode ) . isExprResult () ;
Distance : 9

177
Tree	SimplexSolver.DEFAULT_ULPS = new NodeUtil ( assignNode ) . isExprResult () ;
Code	SimplexSolver.DEFAULT_ULPS = new NodeUtil ( assignNode ) . isExprResult () ;
Distance : 9

178
Tree	entry.map = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	entry.map = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

179
Tree	this . maybeAliased = ( assignNode ) assignNode . getParent () ;
Code	this . maybeAliased = ( assignNode ) assignNode . getParent () ;
Distance : 7

180
Tree	this . maybeAliased = ( assignNode ) assignNode . isExprResult () ;
Code	this . maybeAliased = ( assignNode ) assignNode . isExprResult () ;
Distance : 7

181
Tree	this . maybeAliased = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Code	this . maybeAliased = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Distance : 8

182
Tree	this . maybeAliased = ( assignNode ) NodeUtil . getParent () . isExprResult () ;
Code	this . maybeAliased = ( assignNode ) NodeUtil . getParent () . isExprResult () ;
Distance : 8

183
Tree	this . assignNode = ( assignNode ) assignNode . isExprResult () ;
Code	this . assignNode = ( assignNode ) assignNode . isExprResult () ;
Distance : 8

184
Tree	this . NodeUtil = ( assignNode ) assignNode . getParent () ;
Code	this . NodeUtil = ( assignNode ) assignNode . getParent () ;
Distance : 8

185
Tree	this . assignNode = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Code	this . assignNode = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Distance : 9

186
Tree	this . maybeAliased = ( NodeUtil ) NodeUtil . getParent () ;
Code	this . maybeAliased = ( NodeUtil ) NodeUtil . getParent () ;
Distance : 6

187
Tree	this . assignNode = ( assignNode ) NodeUtil . getParent () . isExprResult () ;
Code	this . assignNode = ( assignNode ) NodeUtil . getParent () . isExprResult () ;
Distance : 9

188
Tree	maybeAliased /= assignNode * NodeUtil . getParent () . isExprResult () ;
Code	maybeAliased /= assignNode * NodeUtil . getParent () . isExprResult () ;
Distance : 9

189
Tree	this . maybeAliased = ( assignNode ) assignNode . isExprResult () . isExprResult () ;
Code	this . maybeAliased = ( assignNode ) assignNode . isExprResult () . isExprResult () ;
Distance : 9

190
Tree	this . maybeAliased = ( Double.NaN ) assignNode . getParent () ;
Code	this . maybeAliased = ( Double.NaN ) assignNode . getParent () ;
Distance : 7

191
Tree	this . maybeAliased = ( TitleChangeEvent ) assignNode . getParent () ;
Code	this . maybeAliased = ( TitleChangeEvent ) assignNode . getParent () ;
Distance : 7

192
Tree	this . maybeAliased = ( x.length ) assignNode . getParent () ;
Code	this . maybeAliased = ( x.length ) assignNode . getParent () ;
Distance : 7

193
Tree	this . maybeAliased = ( MathUtils.TWO_PI ) assignNode . getParent () ;
Code	this . maybeAliased = ( MathUtils.TWO_PI ) assignNode . getParent () ;
Distance : 7

194
Tree	this . maybeAliased = ( metadata.superClassNameNode ) assignNode . getParent () ;
Code	this . maybeAliased = ( metadata.superClassNameNode ) assignNode . getParent () ;
Distance : 7

195
Tree	this . maybeAliased = ( child.parent ) assignNode . getParent () ;
Code	this . maybeAliased = ( child.parent ) assignNode . getParent () ;
Distance : 7

196
Tree	this . assignNode = ( isExprResult ) assignNode . getParent () ;
Code	this . assignNode = ( isExprResult ) assignNode . getParent () ;
Distance : 8

197
Tree	this . maybeAliased = ( inverseTransform ) assignNode . getParent () ;
Code	this . maybeAliased = ( inverseTransform ) assignNode . getParent () ;
Distance : 7

198
Tree	this . assignNode = ( NodeUtil ) assignNode . getParent () ;
Code	this . assignNode = ( NodeUtil ) assignNode . getParent () ;
Distance : 7

199
Tree	this . assignNode = ( assignNode ) NodeUtil . getParent () ;
Code	this . assignNode = ( assignNode ) NodeUtil . getParent () ;
Distance : 8

========================================================================


========================================================================
Example Number: 25
Parent Code is: 
if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( ( x < NUMBER_CONSTANT  negativeZero ) && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=x}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=prev}) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=add}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (36 (214{val=(}) (27 (27 (800{val=x}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (250{val=||}) (800{val=negativeZero})) (215{val=)})) (249{val=&&}) (27 (800{val=prev}) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=add}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/38/parent/src_com_google_javascript_jscomp_CodeConsumer.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( x < NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; continue; }
Code	if ( x < NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; continue; }
Distance : 6

1
Tree	if ( x < NUMBER_CONSTANT && isLastMatcherVarargMatcher == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && isLastMatcherVarargMatcher == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 5

2
Tree	if ( x < NUMBER_CONSTANT && x >= prev ) { add ( STRING_CONSTANT ) ; continue; }
Code	if ( x < NUMBER_CONSTANT && x >= prev ) { add ( STRING_CONSTANT ) ; continue; }
Distance : 7

3
Tree	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; }
Distance : 7

4
Tree	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

5
Tree	if ( x < NUMBER_CONSTANT && prev == x - x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == x - x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

6
Tree	if ( x < NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

7
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

8
Tree	if ( x < NUMBER_CONSTANT && x == prev - x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == prev - x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

9
Tree	if ( x < NUMBER_CONSTANT && prev <= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

10
Tree	if ( x < NUMBER_CONSTANT && x >= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

11
Tree	if ( x < NUMBER_CONSTANT && x <= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

12
Tree	if ( x < NUMBER_CONSTANT && x - x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x - x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

13
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } Math
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } Math
Distance : 8

14
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } source
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } source
Distance : 6

15
Tree	if ( x < NUMBER_CONSTANT && x == x - prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == x - prev ) { add ( STRING_CONSTANT ) ; }
Distance : 7

16
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } Math
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } Math
Distance : 6

17
Tree	if ( x < NUMBER_CONSTANT && x && prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x && prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

18
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

19
Tree	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

20
Tree	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

21
Tree	if ( x < NUMBER_CONSTANT && centers [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && centers [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

22
Tree	if ( x < NUMBER_CONSTANT && isLastMatcherVarargMatcher != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && isLastMatcherVarargMatcher != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

23
Tree	if ( x < NUMBER_CONSTANT && isLastMatcherVarargMatcher == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && isLastMatcherVarargMatcher == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

24
Tree	if ( x < NUMBER_CONSTANT && options.skipTranspilationAndCrash == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && options.skipTranspilationAndCrash == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 5

25
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; super(); }
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; super(); }
Distance : 6

26
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; break; }
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; break; }
Distance : 6

27
Tree	if ( x < NUMBER_CONSTANT && x >= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

28
Tree	if ( x < NUMBER_CONSTANT && prev - x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev - x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

29
Tree	if ( x < NUMBER_CONSTANT && prev > x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

30
Tree	if ( x < NUMBER_CONSTANT && x <= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

31
Tree	if ( x < NUMBER_CONSTANT && x - prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x - prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

32
Tree	if ( x < NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; return; }
Distance : 6

33
Tree	if ( x < NUMBER_CONSTANT && prev <= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

34
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } toString
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } toString
Distance : 6

35
Tree	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 5

36
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } options
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } options
Distance : 6

37
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } p
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } p
Distance : 6

38
Tree	if ( x < NUMBER_CONSTANT && prev && prev ) { add ( STRING_CONSTANT ) ; } wanted
Code	if ( x < NUMBER_CONSTANT && prev && prev ) { add ( STRING_CONSTANT ) ; } wanted
Distance : 6

39
Tree	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } options
Code	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } options
Distance : 7

40
Tree	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } source
Code	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } source
Distance : 7

41
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } source
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } source
Distance : 6

42
Tree	if ( x < NUMBER_CONSTANT && isPointInRect == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && isPointInRect == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

43
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

44
Tree	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } p
Code	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } p
Distance : 7

45
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

46
Tree	if ( x < NUMBER_CONSTANT && CharUtils.NUL == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && CharUtils.NUL == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 5

47
Tree	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

48
Tree	if ( x < NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; null }
Code	if ( x < NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; null }
Distance : 6

49
Tree	if ( x < NUMBER_CONSTANT && x > x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

50
Tree	if ( x < NUMBER_CONSTANT && pass2Index == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && pass2Index == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

51
Tree	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } toString
Code	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } toString
Distance : 7

52
Tree	if ( x < NUMBER_CONSTANT && LocalizedFormats.EULER_ANGLES_SINGULARITY != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && LocalizedFormats.EULER_ANGLES_SINGULARITY != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

53
Tree	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

54
Tree	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

55
Tree	if ( x < NUMBER_CONSTANT && omegaImaginaryInverse [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && omegaImaginaryInverse [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

56
Tree	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

57
Tree	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } T
Code	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } T
Distance : 7

58
Tree	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } options
Code	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } options
Distance : 7

59
Tree	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

60
Tree	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == IncrementalCheckMode.GENERATE_IJS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == IncrementalCheckMode.GENERATE_IJS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

61
Tree	if ( x < NUMBER_CONSTANT && x && x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x && x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

62
Tree	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

63
Tree	if ( x < NUMBER_CONSTANT && prev == prev - prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == prev - prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

64
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } &&
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } &&
Distance : 6

65
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev . CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev . CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 7

66
Tree	if ( x < NUMBER_CONSTANT && LocalizedFormats.EULER_ANGLES_SINGULARITY == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && LocalizedFormats.EULER_ANGLES_SINGULARITY == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

67
Tree	if ( x < NUMBER_CONSTANT && options.skipTranspilationAndCrash == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && options.skipTranspilationAndCrash == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

68
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } T
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } T
Distance : 6

69
Tree	if ( x < NUMBER_CONSTANT && current.parent.scopes == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.parent.scopes == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

70
Tree	if ( x < NUMBER_CONSTANT && prev != CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 5

71
Tree	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

72
Tree	if ( x < NUMBER_CONSTANT && prev != isLastMatcherVarargMatcher ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != isLastMatcherVarargMatcher ) { add ( STRING_CONSTANT ) ; }
Distance : 5

73
Tree	if ( x < NUMBER_CONSTANT && prev != IncrementalCheckMode.GENERATE_IJS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != IncrementalCheckMode.GENERATE_IJS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

74
Tree	if ( x < NUMBER_CONSTANT && isLastMatcherVarargMatcher == IncrementalCheckMode.GENERATE_IJS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && isLastMatcherVarargMatcher == IncrementalCheckMode.GENERATE_IJS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

75
Tree	if ( x < NUMBER_CONSTANT && x <= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

76
Tree	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } toString
Code	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } toString
Distance : 6

77
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev . x ) { add ( STRING_CONSTANT ) ; }
Distance : 8

78
Tree	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; }
Distance : 7

79
Tree	if ( x < NUMBER_CONSTANT && isReferenceToRemovedVar == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && isReferenceToRemovedVar == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

80
Tree	if ( x < NUMBER_CONSTANT && prev > prev ) { add ( STRING_CONSTANT ) ; } Math
Code	if ( x < NUMBER_CONSTANT && prev > prev ) { add ( STRING_CONSTANT ) ; } Math
Distance : 6

81
Tree	if ( x < NUMBER_CONSTANT && delimiters.length == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && delimiters.length == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

82
Tree	if ( x < NUMBER_CONSTANT && pass2Index == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && pass2Index == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

83
Tree	if ( x < NUMBER_CONSTANT && current.parent.scopes == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.parent.scopes == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 5

84
Tree	if ( x < NUMBER_CONSTANT && prev != DisposalCheckingPolicy.OFF ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != DisposalCheckingPolicy.OFF ) { add ( STRING_CONSTANT ) ; }
Distance : 5

85
Tree	if ( x < NUMBER_CONSTANT && prev && x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev && x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

86
Tree	if ( x < NUMBER_CONSTANT && x >= prev ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && x >= prev ) { add ( STRING_CONSTANT ) ; return; }
Distance : 7

87
Tree	if ( x < NUMBER_CONSTANT && prev - x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev - x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

88
Tree	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } &&
Code	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } &&
Distance : 7

89
Tree	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } source
Code	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } source
Distance : 6

90
Tree	if ( x < NUMBER_CONSTANT && prev != isPointInRect ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != isPointInRect ) { add ( STRING_CONSTANT ) ; }
Distance : 5

91
Tree	if ( x < NUMBER_CONSTANT && isPointInRect == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && isPointInRect == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 5

92
Tree	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

93
Tree	if ( x < NUMBER_CONSTANT && x - x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x - x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

94
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev . x ) { add ( STRING_CONSTANT ) ; }
Distance : 8

95
Tree	if ( x < NUMBER_CONSTANT && LocalizedFormats.EULER_ANGLES_SINGULARITY == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && LocalizedFormats.EULER_ANGLES_SINGULARITY == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

96
Tree	if ( x < NUMBER_CONSTANT && prev > prev ) { add ( STRING_CONSTANT ) ; } wanted
Code	if ( x < NUMBER_CONSTANT && prev > prev ) { add ( STRING_CONSTANT ) ; } wanted
Distance : 6

97
Tree	if ( x < NUMBER_CONSTANT && isPointInRect == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && isPointInRect == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

98
Tree	if ( x < NUMBER_CONSTANT && options.skipTranspilationAndCrash != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && options.skipTranspilationAndCrash != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

99
Tree	if ( x < NUMBER_CONSTANT && options.skipTranspilationAndCrash == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && options.skipTranspilationAndCrash == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

100
Tree	if ( x < NUMBER_CONSTANT && thatUnresolved [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && thatUnresolved [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

101
Tree	if ( x < NUMBER_CONSTANT && x > prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

102
Tree	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

103
Tree	if ( x < NUMBER_CONSTANT && current.parent.scopes != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.parent.scopes != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

104
Tree	if ( x < NUMBER_CONSTANT && prev > x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

105
Tree	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == LocalizedFormats.OVERFLOW_IN_ADDITION ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == LocalizedFormats.OVERFLOW_IN_ADDITION ) { add ( STRING_CONSTANT ) ; }
Distance : 5

106
Tree	if ( x < NUMBER_CONSTANT && current.parent.scopes == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.parent.scopes == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

107
Tree	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } &&
Code	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } &&
Distance : 7

108
Tree	if ( x < NUMBER_CONSTANT && isReferenceToRemovedVar != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && isReferenceToRemovedVar != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

109
Tree	if ( x < NUMBER_CONSTANT && x > x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

110
Tree	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } options
Code	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } options
Distance : 6

111
Tree	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } p
Code	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } p
Distance : 6

112
Tree	if ( x < NUMBER_CONSTANT && prev == prev - x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == prev - x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

113
Tree	if ( x < NUMBER_CONSTANT && enclosing [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && enclosing [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

114
Tree	if ( x < NUMBER_CONSTANT && prev == prev - x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == prev - x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

115
Tree	if ( x < NUMBER_CONSTANT && prev == x - prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == x - prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

116
Tree	if ( x < NUMBER_CONSTANT && x && x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x && x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

117
Tree	if ( x < NUMBER_CONSTANT && prev - prev ) { add ( STRING_CONSTANT ) ; } Math
Code	if ( x < NUMBER_CONSTANT && prev - prev ) { add ( STRING_CONSTANT ) ; } Math
Distance : 6

118
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } wanted
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } wanted
Distance : 6

119
Tree	if ( x < NUMBER_CONSTANT && isReferenceToRemovedVar == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && isReferenceToRemovedVar == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

120
Tree	if ( x < NUMBER_CONSTANT && prev && prev ) { add ( STRING_CONSTANT ) ; } Math
Code	if ( x < NUMBER_CONSTANT && prev && prev ) { add ( STRING_CONSTANT ) ; } Math
Distance : 6

121
Tree	if ( x < NUMBER_CONSTANT && delimiters.length != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && delimiters.length != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

122
Tree	if ( x < NUMBER_CONSTANT && delimiters.length == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && delimiters.length == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

123
Tree	if ( x < NUMBER_CONSTANT && pass2Index != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && pass2Index != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

124
Tree	if ( x < NUMBER_CONSTANT && isLastMatcherVarargMatcher == LocalizedFormats.OVERFLOW_IN_ADDITION ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && isLastMatcherVarargMatcher == LocalizedFormats.OVERFLOW_IN_ADDITION ) { add ( STRING_CONSTANT ) ; }
Distance : 5

125
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 8

126
Tree	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } &&
Code	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } &&
Distance : 6

127
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

128
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } wanted
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } wanted
Distance : 8

129
Tree	if ( x < NUMBER_CONSTANT && prev - prev ) { add ( STRING_CONSTANT ) ; } wanted
Code	if ( x < NUMBER_CONSTANT && prev - prev ) { add ( STRING_CONSTANT ) ; } wanted
Distance : 6

130
Tree	if ( x < NUMBER_CONSTANT && omegaImaginaryForward [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && omegaImaginaryForward [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

131
Tree	if ( x < NUMBER_CONSTANT && x >= this . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= this . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 7

132
Tree	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

133
Tree	if ( x < NUMBER_CONSTANT && x <= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

134
Tree	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } T
Code	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } T
Distance : 7

135
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS - prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS - prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

136
Tree	if ( x < NUMBER_CONSTANT && prev <= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

137
Tree	if ( x < NUMBER_CONSTANT && prev > prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

138
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 7

139
Tree	if ( x < NUMBER_CONSTANT && prev - prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev - prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

140
Tree	if ( x < NUMBER_CONSTANT && prev && prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev && prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

141
Tree	if ( x < NUMBER_CONSTANT && x >= this . prev . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= this . prev . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 8

142
Tree	if ( x < NUMBER_CONSTANT && prev >= this . x . CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . x . CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 8

143
Tree	if ( x < NUMBER_CONSTANT && prev >= this . x . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . x . x ) { add ( STRING_CONSTANT ) ; }
Distance : 9

144
Tree	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

145
Tree	if ( x < NUMBER_CONSTANT && x >= this . prev . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= this . prev . x ) { add ( STRING_CONSTANT ) ; }
Distance : 8

146
Tree	if ( x < NUMBER_CONSTANT && prev >= this . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . x ) { add ( STRING_CONSTANT ) ; }
Distance : 7

147
Tree	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

148
Tree	if ( x < NUMBER_CONSTANT && prev && x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev && x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

149
Tree	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } toString
Code	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } toString
Distance : 7

150
Tree	if ( x < NUMBER_CONSTANT && isLastMatcherVarargMatcher == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && isLastMatcherVarargMatcher == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

151
Tree	if ( x < NUMBER_CONSTANT && CharUtils.NUL != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && CharUtils.NUL != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

152
Tree	if ( x < NUMBER_CONSTANT && CharUtils.NUL == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && CharUtils.NUL == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

153
Tree	if ( x < NUMBER_CONSTANT && zval.length [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && zval.length [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

154
Tree	if ( x < NUMBER_CONSTANT && thisUnresolved [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && thisUnresolved [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

155
Tree	if ( x < NUMBER_CONSTANT && xi [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && xi [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

156
Tree	if ( x < NUMBER_CONSTANT && prev != Year.MAXIMUM_YEAR ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != Year.MAXIMUM_YEAR ) { add ( STRING_CONSTANT ) ; }
Distance : 5

157
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

158
Tree	if ( x < NUMBER_CONSTANT && prev != current.parent.scopes ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != current.parent.scopes ) { add ( STRING_CONSTANT ) ; }
Distance : 5

159
Tree	if ( x < NUMBER_CONSTANT && isComingFromSealedPackage [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && isComingFromSealedPackage [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

160
Tree	if ( x < NUMBER_CONSTANT && prev <= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

161
Tree	if ( x < NUMBER_CONSTANT && prev != rhs.b ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != rhs.b ) { add ( STRING_CONSTANT ) ; }
Distance : 5

162
Tree	if ( x < NUMBER_CONSTANT && prev > prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

163
Tree	if ( x < NUMBER_CONSTANT && prev != ExpansionMode.MULTIPLICATIVE ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != ExpansionMode.MULTIPLICATIVE ) { add ( STRING_CONSTANT ) ; }
Distance : 5

164
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 7

165
Tree	if ( x < NUMBER_CONSTANT && prev != DecompositionType.DECOMPOSABLE ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != DecompositionType.DECOMPOSABLE ) { add ( STRING_CONSTANT ) ; }
Distance : 5

166
Tree	if ( x < NUMBER_CONSTANT && prev - prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev - prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

167
Tree	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

168
Tree	if ( x < NUMBER_CONSTANT && prev && prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev && prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

169
Tree	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

170
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; return; }
Distance : 6

171
Tree	if ( x < NUMBER_CONSTANT && RADIX [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && RADIX [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

172
Tree	if ( x < NUMBER_CONSTANT && x > prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

173
Tree	if ( x < NUMBER_CONSTANT && x >= this . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= this . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 7

174
Tree	if ( x < NUMBER_CONSTANT && prev >= this . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . x ) { add ( STRING_CONSTANT ) ; }
Distance : 7

175
Tree	if ( x < NUMBER_CONSTANT && x - prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x - prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

176
Tree	if ( x < NUMBER_CONSTANT && x && prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x && prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

177
Tree	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

178
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; continue; }
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; continue; }
Distance : 6

179
Tree	if ( x < NUMBER_CONSTANT && CharUtils.NUL == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && CharUtils.NUL == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

180
Tree	if ( x < NUMBER_CONSTANT && isPointInRect != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && isPointInRect != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

181
Tree	if ( x < NUMBER_CONSTANT && x >= this . x . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= this . x . x ) { add ( STRING_CONSTANT ) ; }
Distance : 9

182
Tree	if ( x < NUMBER_CONSTANT && x >= this . x . CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= this . x . CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 8

183
Tree	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } T
Code	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } T
Distance : 6

184
Tree	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } p
Code	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } p
Distance : 7

185
Tree	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

186
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; null }
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; null }
Distance : 6

187
Tree	if ( x < NUMBER_CONSTANT && x == x - x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == x - x ) { add ( STRING_CONSTANT ) ; }
Distance : 7

188
Tree	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

189
Tree	if ( x < NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

190
Tree	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } source
Code	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } source
Distance : 7

191
Tree	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

192
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } p
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } p
Distance : 6

193
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } options
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } options
Distance : 6

194
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } &&
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } &&
Distance : 6

195
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } T
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } T
Distance : 6

196
Tree	if ( x < NUMBER_CONSTANT && prev == prev - prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == prev - prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

197
Tree	if ( x < NUMBER_CONSTANT && prev <= prev ) { add ( STRING_CONSTANT ) ; } Math
Code	if ( x < NUMBER_CONSTANT && prev <= prev ) { add ( STRING_CONSTANT ) ; } Math
Distance : 6

198
Tree	if ( x < NUMBER_CONSTANT && prev <= prev ) { add ( STRING_CONSTANT ) ; } wanted
Code	if ( x < NUMBER_CONSTANT && prev <= prev ) { add ( STRING_CONSTANT ) ; } wanted
Distance : 6

199
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } toString
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } toString
Distance : 6

========================================================================


========================================================================
Example Number: 26
Parent Code is: 
cc . listSeparator () ;
-------------------------------------------------------------------------------
Child code is: 
cc . addOp ( opStr , true ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=cc}) (235{val=.}) (802{val=listSeparator}) (216{val=()})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=cc}) (235{val=.}) (802{val=addOp}) (214{val=(}) (800{val=opStr}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/34/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	cc . listSeparator ( cc , () ) ;
Code	cc . listSeparator ( cc , () ) ;
Distance : 3

1
Tree	cc . listSeparator ( cc . listSeparator () ) ;
Code	cc . listSeparator ( cc . listSeparator () ) ;
Distance : 5

2
Tree	cc . listSeparator ( cc , false ) ;
Code	cc . listSeparator ( cc , false ) ;
Distance : 3

3
Tree	new MustBeReachingVariableDef ( cc ) . listSeparator () ;
Code	new MustBeReachingVariableDef ( cc ) . listSeparator () ;
Distance : 8

4
Tree	listSeparator () ; MathRuntimeException
Code	listSeparator () ; MathRuntimeException
Distance : 9

5
Tree	listSeparator () ; {}
Code	listSeparator () ; {}
Distance : 9

6
Tree	new StreamDataAdapter ( cc ) . listSeparator () ;
Code	new StreamDataAdapter ( cc ) . listSeparator () ;
Distance : 8

7
Tree	cc . listSeparator ( cc , false ) ;
Code	cc . listSeparator ( cc , false ) ;
Distance : 3

8
Tree	new transpileUnmarkedBlock ( cc ) . listSeparator () ;
Code	new transpileUnmarkedBlock ( cc ) . listSeparator () ;
Distance : 8

9
Tree	new CGLIBHacker ( cc ) . listSeparator () ;
Code	new CGLIBHacker ( cc ) . listSeparator () ;
Distance : 8

10
Tree	cc . listSeparator ( cc , false ) ;
Code	cc . listSeparator ( cc , false ) ;
Distance : 3

11
Tree	new UnicodeUnescaper ( cc ) . listSeparator () ;
Code	new UnicodeUnescaper ( cc ) . listSeparator () ;
Distance : 8

12
Tree	this . cc . listSeparator () ;
Code	this . cc . listSeparator () ;
Distance : 7

13
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

14
Tree	cc . listSeparator ( PassNames.BEFORE_TYPE_CHECKING ) ;
Code	cc . listSeparator ( PassNames.BEFORE_TYPE_CHECKING ) ;
Distance : 4

15
Tree	new JsDocToken.PIPE ( cc ) . listSeparator () ;
Code	new JsDocToken.PIPE ( cc ) . listSeparator () ;
Distance : 8

16
Tree	listSeparator ( cc ) ; source
Code	listSeparator ( cc ) ; source
Distance : 7

17
Tree	listSeparator ( STRING_CONSTANT ) ; ParamChecks
Code	listSeparator ( STRING_CONSTANT ) ; ParamChecks
Distance : 7

18
Tree	cc . listSeparator ( cc ) ; wanted
Code	cc . listSeparator ( cc ) ; wanted
Distance : 5

19
Tree	cc . listSeparator ( cc . listSeparator () ) ;
Code	cc . listSeparator ( cc . listSeparator () ) ;
Distance : 5

20
Tree	cc . listSeparator ( cc , false ) ;
Code	cc . listSeparator ( cc , false ) ;
Distance : 3

21
Tree	listSeparator ( STRING_CONSTANT ) ; MathRuntimeException
Code	listSeparator ( STRING_CONSTANT ) ; MathRuntimeException
Distance : 7

22
Tree	listSeparator ( STRING_CONSTANT ) ; Class
Code	listSeparator ( STRING_CONSTANT ) ; Class
Distance : 7

23
Tree	cc . listSeparator () ; toString
Code	cc . listSeparator () ; toString
Distance : 7

24
Tree	cc . listSeparator () ; source
Code	cc . listSeparator () ; source
Distance : 7

25
Tree	cc . listSeparator () ; options
Code	cc . listSeparator () ; options
Distance : 7

26
Tree	cc . listSeparator () ; p
Code	cc . listSeparator () ; p
Distance : 7

27
Tree	cc . listSeparator ( cc , cc ) ;
Code	cc . listSeparator ( cc , cc ) ;
Distance : 3

28
Tree	cc = . . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc = . . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

29
Tree	cc . listSeparator ( cc , false ) ;
Code	cc . listSeparator ( cc , false ) ;
Distance : 3

30
Tree	cc . listSeparator ( cc , () ) ;
Code	cc . listSeparator ( cc , () ) ;
Distance : 3

31
Tree	new cc () . listSeparator () ; &&
Code	new cc () . listSeparator () ; &&
Distance : 9

32
Tree	new cc () . listSeparator () ; p
Code	new cc () . listSeparator () ; p
Distance : 9

33
Tree	new cc () . listSeparator () ; options
Code	new cc () . listSeparator () ; options
Distance : 9

34
Tree	cc . listSeparator ( Feature.MODULES ) ;
Code	cc . listSeparator ( Feature.MODULES ) ;
Distance : 4

35
Tree	. ( false ) ;
Code	. ( false ) ;
Distance : 5

36
Tree	cc () . listSeparator () ;
Code	cc () . listSeparator () ;
Distance : 7

37
Tree	this . cc . listSeparator () ;
Code	this . cc . listSeparator () ;
Distance : 7

38
Tree	this . cc = JsDocToken.PIPE ;
Code	this . cc = JsDocToken.PIPE ;
Distance : 7

39
Tree	this . cc = PropertyRenamingPolicy.ALL_UNQUOTED ;
Code	this . cc = PropertyRenamingPolicy.ALL_UNQUOTED ;
Distance : 7

40
Tree	this . cc = cc ;
Code	this . cc = cc ;
Distance : 7

41
Tree	this . cc = PropAccess.STRUCT ;
Code	this . cc = PropAccess.STRUCT ;
Distance : 7

42
Tree	this . cc = PropertyCollapseLevel.NONE ;
Code	this . cc = PropertyCollapseLevel.NONE ;
Distance : 7

43
Tree	cc = new EliminationPass <> () ;
Code	cc = new EliminationPass <> () ;
Distance : 7

44
Tree	this . cc = cc ; &&
Code	this . cc = cc ; &&
Distance : 8

45
Tree	this . cc = cc ; options
Code	this . cc = cc ; options
Distance : 8

46
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ; options
Code	cc . listSeparator ( NUMBER_CONSTANT ) ; options
Distance : 5

47
Tree	this . cc = cc ; source
Code	this . cc = cc ; source
Distance : 8

48
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; Math
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; Math
Distance : 7

49
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; wanted
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; wanted
Distance : 7

50
Tree	this . cc = cc ; toString
Code	this . cc = cc ; toString
Distance : 8

51
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ; &&
Code	cc . listSeparator ( NUMBER_CONSTANT ) ; &&
Distance : 5

52
Tree	this . cc = coefficients.length ;
Code	this . cc = coefficients.length ;
Distance : 7

53
Tree	this . cc = TimePeriod.ZERO ;
Code	this . cc = TimePeriod.ZERO ;
Distance : 7

54
Tree	cc . listSeparator ( cc , () ) ;
Code	cc . listSeparator ( cc , () ) ;
Distance : 3

55
Tree	this . cc = Cartesian2D.NaN ;
Code	this . cc = Cartesian2D.NaN ;
Distance : 7

56
Tree	listSeparator ( cc ) ; options
Code	listSeparator ( cc ) ; options
Distance : 7

57
Tree	cc . listSeparator ( Feature.MODULES ) ;
Code	cc . listSeparator ( Feature.MODULES ) ;
Distance : 4

58
Tree	listSeparator ( cc ) ;
Code	listSeparator ( cc ) ;
Distance : 6

59
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 4

60
Tree	cc . listSeparator ( cc ) ;
Code	cc . listSeparator ( cc ) ;
Distance : 4

61
Tree	listSeparator ( false ) ;
Code	listSeparator ( false ) ;
Distance : 6

62
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ; toString
Code	cc . listSeparator ( NUMBER_CONSTANT ) ; toString
Distance : 5

63
Tree	listSeparator ( cc ) ; T
Code	listSeparator ( cc ) ; T
Distance : 7

64
Tree	listSeparator ( cc ) ; &&
Code	listSeparator ( cc ) ; &&
Distance : 7

65
Tree	cc () . listSeparator () ; toString
Code	cc () . listSeparator () ; toString
Distance : 8

66
Tree	cc () . listSeparator () ; source
Code	cc () . listSeparator () ; source
Distance : 8

67
Tree	cc () . listSeparator () ; options
Code	cc () . listSeparator () ; options
Distance : 8

68
Tree	listSeparator ( STRING_CONSTANT ) ;
Code	listSeparator ( STRING_CONSTANT ) ;
Distance : 6

69
Tree	. () ;
Code	. () ;
Distance : 7

70
Tree	cc . listSeparator () ;
Code	cc . listSeparator () ;
Distance : 6

71
Tree	cc = true ;
Code	cc = true ;
Distance : 6

72
Tree	cc = false ; options
Code	cc = false ; options
Distance : 8

73
Tree	. . listSeparator ( cc , false ) ;
Code	. . listSeparator ( cc , false ) ;
Distance : 4

74
Tree	cc = false ;
Code	cc = false ;
Distance : 7

75
Tree	cc () . listSeparator () ;
Code	cc () . listSeparator () ;
Distance : 7

76
Tree	. = cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	. = cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

77
Tree	cc = new emptiedClinitMethods <> () ;
Code	cc = new emptiedClinitMethods <> () ;
Distance : 7

78
Tree	new listSeparator () . listSeparator () ;
Code	new listSeparator () . listSeparator () ;
Distance : 8

79
Tree	listSeparator () ; f
Code	listSeparator () ; f
Distance : 9

80
Tree	cc . listSeparator ( cc , false ) ;
Code	cc . listSeparator ( cc , false ) ;
Distance : 3

81
Tree	this . cc . listSeparator () ;
Code	this . cc . listSeparator () ;
Distance : 7

82
Tree	cc . listSeparator ( cc , cc ) ;
Code	cc . listSeparator ( cc , cc ) ;
Distance : 3

83
Tree	cc . listSeparator ( cc ) ;
Code	cc . listSeparator ( cc ) ;
Distance : 4

84
Tree	listSeparator () ; ParamChecks
Code	listSeparator () ; ParamChecks
Distance : 9

85
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

86
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 4

87
Tree	cc = false ; source
Code	cc = false ; source
Distance : 8

88
Tree	cc . listSeparator ( cc ) ;
Code	cc . listSeparator ( cc ) ;
Distance : 4

89
Tree	cc . listSeparator ( cc . listSeparator () ) ;
Code	cc . listSeparator ( cc . listSeparator () ) ;
Distance : 5

90
Tree	cc = false ; toString
Code	cc = false ; toString
Distance : 8

91
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 4

92
Tree	cc = new UnicodeUnescaper <> () ;
Code	cc = new UnicodeUnescaper <> () ;
Distance : 7

93
Tree	cc = new passName <> () ;
Code	cc = new passName <> () ;
Distance : 7

94
Tree	cc = new ExceptionWithCause <> () ;
Code	cc = new ExceptionWithCause <> () ;
Distance : 7

95
Tree	cc . listSeparator ( cc . listSeparator () ) ;
Code	cc . listSeparator ( cc . listSeparator () ) ;
Distance : 5

96
Tree	cc = new Random <> () ;
Code	cc = new Random <> () ;
Distance : 7

97
Tree	this . cc = cc ;
Code	this . cc = cc ;
Distance : 7

98
Tree	cc = new token <> () ;
Code	cc = new token <> () ;
Distance : 7

99
Tree	cc () . listSeparator () ;
Code	cc () . listSeparator () ;
Distance : 7

100
Tree	listSeparator () ; -
Code	listSeparator () ; -
Distance : 9

101
Tree	listSeparator ( cc ) ;
Code	listSeparator ( cc ) ;
Distance : 6

102
Tree	listSeparator ( cc ) ; toString
Code	listSeparator ( cc ) ; toString
Distance : 7

103
Tree	new cc () . listSeparator () ;
Code	new cc () . listSeparator () ;
Distance : 8

104
Tree	cc . listSeparator ( cc . listSeparator () ) ;
Code	cc . listSeparator ( cc . listSeparator () ) ;
Distance : 5

105
Tree	cc . listSeparator ( cc , true ) ;
Code	cc . listSeparator ( cc , true ) ;
Distance : 2

106
Tree	this . cc = cc ; p
Code	this . cc = cc ; p
Distance : 8

107
Tree	cc . listSeparator ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES ) ;
Code	cc . listSeparator ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES ) ;
Distance : 4

108
Tree	cc = new result <> () ;
Code	cc = new result <> () ;
Distance : 7

109
Tree	listSeparator () ; Preconditions
Code	listSeparator () ; Preconditions
Distance : 9

110
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

111
Tree	listSeparator ( false ) ; &&
Code	listSeparator ( false ) ; &&
Distance : 7

112
Tree	cc . listSeparator () ; &&
Code	cc . listSeparator () ; &&
Distance : 7

113
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

114
Tree	cc . listSeparator ( cc , true ) ;
Code	cc . listSeparator ( cc , true ) ;
Distance : 2

115
Tree	this . cc . listSeparator () ; p
Code	this . cc . listSeparator () ; p
Distance : 8

116
Tree	listSeparator ( false ) ; p
Code	listSeparator ( false ) ; p
Distance : 7

117
Tree	cc . listSeparator ( cc , cc ) ;
Code	cc . listSeparator ( cc , cc ) ;
Distance : 3

118
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

119
Tree	cc . listSeparator () ; T
Code	cc . listSeparator () ; T
Distance : 7

120
Tree	cc () . listSeparator () ; p
Code	cc () . listSeparator () ; p
Distance : 8

121
Tree	this . cc . listSeparator () ; options
Code	this . cc . listSeparator () ; options
Distance : 8

122
Tree	cc . listSeparator ( cc ) ; Math
Code	cc . listSeparator ( cc ) ; Math
Distance : 5

123
Tree	new ObjectStreamClass ( cc ) . listSeparator () ;
Code	new ObjectStreamClass ( cc ) . listSeparator () ;
Distance : 8

124
Tree	this . cc = CallSiteType.UNSUPPORTED ;
Code	this . cc = CallSiteType.UNSUPPORTED ;
Distance : 7

125
Tree	cc () . listSeparator () ; &&
Code	cc () . listSeparator () ; &&
Distance : 8

126
Tree	this . cc . listSeparator () ; source
Code	this . cc . listSeparator () ; source
Distance : 8

127
Tree	listSeparator ( STRING_CONSTANT ) ; -
Code	listSeparator ( STRING_CONSTANT ) ; -
Distance : 7

128
Tree	listSeparator ( STRING_CONSTANT ) ;
Code	listSeparator ( STRING_CONSTANT ) ;
Distance : 6

129
Tree	listSeparator () ;
Code	listSeparator () ;
Distance : 8

130
Tree	cc . listSeparator ( cc ) ;
Code	cc . listSeparator ( cc ) ;
Distance : 4

131
Tree	cc = new Interval <> () ;
Code	cc = new Interval <> () ;
Distance : 7

132
Tree	this . cc = cc ;
Code	this . cc = cc ;
Distance : 7

133
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 4

134
Tree	listSeparator ( true ) ;
Code	listSeparator ( true ) ;
Distance : 5

135
Tree	new cc () . listSeparator () ;
Code	new cc () . listSeparator () ;
Distance : 8

136
Tree	cc = true ;
Code	cc = true ;
Distance : 6

137
Tree	cc . listSeparator ( cc ) ;
Code	cc . listSeparator ( cc ) ;
Distance : 4

138
Tree	cc . listSeparator () ;
Code	cc . listSeparator () ;
Distance : 6

139
Tree	cc = new addExpr <> () ;
Code	cc = new addExpr <> () ;
Distance : 7

140
Tree	listSeparator ( true ) ;
Code	listSeparator ( true ) ;
Distance : 5

141
Tree	cc . listSeparator ( () . listSeparator () ) ;
Code	cc . listSeparator ( () . listSeparator () ) ;
Distance : 5

142
Tree	this . cc . listSeparator () ;
Code	this . cc . listSeparator () ;
Distance : 7

143
Tree	listSeparator ( false ) ; T
Code	listSeparator ( false ) ; T
Distance : 7

144
Tree	cc . listSeparator ( cc , cc ) ;
Code	cc . listSeparator ( cc , cc ) ;
Distance : 3

145
Tree	cc . listSeparator ( cc ) ;
Code	cc . listSeparator ( cc ) ;
Distance : 4

146
Tree	cc . listSeparator ( cc . listSeparator () ) ;
Code	cc . listSeparator ( cc . listSeparator () ) ;
Distance : 5

147
Tree	cc . listSeparator ( cc , cc ) ;
Code	cc . listSeparator ( cc , cc ) ;
Distance : 3

148
Tree	listSeparator ( STRING_CONSTANT ) ; f
Code	listSeparator ( STRING_CONSTANT ) ; f
Distance : 7

149
Tree	cc . listSeparator ( cc , false ) ;
Code	cc . listSeparator ( cc , false ) ;
Distance : 3

150
Tree	listSeparator ( cc ) ;
Code	listSeparator ( cc ) ;
Distance : 6

151
Tree	listSeparator = cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	listSeparator = cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

152
Tree	cc . listSeparator ( ; ) ;
Code	cc . listSeparator ( ; ) ;
Distance : 4

153
Tree	cc . listSeparator ( cc . listSeparator () ) ;
Code	cc . listSeparator ( cc . listSeparator () ) ;
Distance : 5

154
Tree	cc . listSeparator () ;
Code	cc . listSeparator () ;
Distance : 6

155
Tree	cc . listSeparator ( flags.chromePass ) ;
Code	cc . listSeparator ( flags.chromePass ) ;
Distance : 4

156
Tree	listSeparator ( false ) ; options
Code	listSeparator ( false ) ; options
Distance : 7

157
Tree	cc . listSeparator ( cc , () ) ;
Code	cc . listSeparator ( cc , () ) ;
Distance : 3

158
Tree	cc . listSeparator ( cc . listSeparator () ) ;
Code	cc . listSeparator ( cc . listSeparator () ) ;
Distance : 5

159
Tree	this . cc = TimeZoneNumberRule.INSTANCE_COLON ;
Code	this . cc = TimeZoneNumberRule.INSTANCE_COLON ;
Distance : 7

160
Tree	cc . listSeparator ( cc , cc ) ;
Code	cc . listSeparator ( cc , cc ) ;
Distance : 3

161
Tree	this . cc . listSeparator () ; toString
Code	this . cc . listSeparator () ; toString
Distance : 8

162
Tree	cc . listSeparator () ;
Code	cc . listSeparator () ;
Distance : 6

163
Tree	listSeparator ( false ) ; source
Code	listSeparator ( false ) ; source
Distance : 7

164
Tree	listSeparator ( STRING_CONSTANT ) ; Test
Code	listSeparator ( STRING_CONSTANT ) ; Test
Distance : 7

165
Tree	new getEnums ( cc ) . listSeparator () ;
Code	new getEnums ( cc ) . listSeparator () ;
Distance : 8

166
Tree	cc . listSeparator ( cc . listSeparator () ) ;
Code	cc . listSeparator ( cc . listSeparator () ) ;
Distance : 5

167
Tree	listSeparator ( STRING_CONSTANT ) ; {}
Code	listSeparator ( STRING_CONSTANT ) ; {}
Distance : 7

168
Tree	cc . listSeparator ( cc ) ;
Code	cc . listSeparator ( cc ) ;
Distance : 4

169
Tree	this . cc = cc ; T
Code	this . cc = cc ; T
Distance : 8

170
Tree	new cc () . listSeparator () ; T
Code	new cc () . listSeparator () ; T
Distance : 9

171
Tree	cc () . listSeparator () ; T
Code	cc () . listSeparator () ; T
Distance : 8

172
Tree	this . cc = PivotSelectionRule.DANTZIG ;
Code	this . cc = PivotSelectionRule.DANTZIG ;
Distance : 7

173
Tree	cc () . listSeparator () ;
Code	cc () . listSeparator () ;
Distance : 7

174
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ; p
Code	cc . listSeparator ( NUMBER_CONSTANT ) ; p
Distance : 5

175
Tree	listSeparator ( cc ) ; p
Code	listSeparator ( cc ) ; p
Distance : 7

176
Tree	listSeparator () ; Test
Code	listSeparator () ; Test
Distance : 9

177
Tree	this . cc = cc ;
Code	this . cc = cc ;
Distance : 7

178
Tree	listSeparator ( cc ) ;
Code	listSeparator ( cc ) ;
Distance : 6

179
Tree	cc . listSeparator ( DiagnosticGroups.LINT_CHECKS ) ;
Code	cc . listSeparator ( DiagnosticGroups.LINT_CHECKS ) ;
Distance : 4

180
Tree	cc . listSeparator ( DiagnosticGroups.UNUSED_LOCAL_VARIABLE ) ;
Code	cc . listSeparator ( DiagnosticGroups.UNUSED_LOCAL_VARIABLE ) ;
Distance : 4

181
Tree	cc . listSeparator ( Token.GETELEM ) ;
Code	cc . listSeparator ( Token.GETELEM ) ;
Distance : 4

182
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ; T
Code	cc . listSeparator ( NUMBER_CONSTANT ) ; T
Distance : 5

183
Tree	cc . listSeparator ( Compiler.PARSING_PASS_NAME ) ;
Code	cc . listSeparator ( Compiler.PARSING_PASS_NAME ) ;
Distance : 4

184
Tree	listSeparator = false ;
Code	listSeparator = false ;
Distance : 8

185
Tree	new cc () . listSeparator () ;
Code	new cc () . listSeparator () ;
Distance : 8

186
Tree	new PomComparator ( cc ) . listSeparator () ;
Code	new PomComparator ( cc ) . listSeparator () ;
Distance : 8

187
Tree	cc . listSeparator ( PassNames.BEFORE_TYPE_CHECKING ) ;
Code	cc . listSeparator ( PassNames.BEFORE_TYPE_CHECKING ) ;
Distance : 4

188
Tree	listSeparator ( false ) ; toString
Code	listSeparator ( false ) ; toString
Distance : 7

189
Tree	new shutdown ( cc ) . listSeparator () ;
Code	new shutdown ( cc ) . listSeparator () ;
Distance : 8

190
Tree	listSeparator ( STRING_CONSTANT ) ; Preconditions
Code	listSeparator ( STRING_CONSTANT ) ; Preconditions
Distance : 7

191
Tree	new cc () . listSeparator () ; source
Code	new cc () . listSeparator () ; source
Distance : 9

192
Tree	new cc () . listSeparator () ; toString
Code	new cc () . listSeparator () ; toString
Distance : 9

193
Tree	this . cc . listSeparator () ; T
Code	this . cc . listSeparator () ; T
Distance : 8

194
Tree	this . cc . listSeparator () ; &&
Code	this . cc . listSeparator () ; &&
Distance : 8

195
Tree	cc = false ; p
Code	cc = false ; p
Distance : 8

196
Tree	cc = false ; &&
Code	cc = false ; &&
Distance : 8

197
Tree	cc = false ; T
Code	cc = false ; T
Distance : 8

198
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ; source
Code	cc . listSeparator ( NUMBER_CONSTANT ) ; source
Distance : 5

199
Tree	listSeparator () ; Class
Code	listSeparator () ; Class
Distance : 9

========================================================================


========================================================================
Example Number: 27
Parent Code is: 
options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.closurePass
-------------------------------------------------------------------------------
Child code is: 
options.dependencyOptions . needsManagement () && options.closurePass
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (40{val=options.dependencyOptions}) (235{val=.}) (802{val=needsManagement}) (216{val=()})) (249{val=&&}) (38 (207{val=!}) (40{val=options.skipAllPasses})) (249{val=&&}) (40{val=options.closurePass})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (40{val=options.dependencyOptions}) (235{val=.}) (802{val=needsManagement}) (216{val=()})) (249{val=&&}) (40{val=options.closurePass})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/31/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	objectMethodsGuru > transformed + STRING_CONSTANT
Code	objectMethodsGuru > transformed + STRING_CONSTANT
Distance : 6

1
Tree	objectMethodsGuru > MILLIS_PER_DAY + STRING_CONSTANT
Code	objectMethodsGuru > MILLIS_PER_DAY + STRING_CONSTANT
Distance : 6

2
Tree	typesIndexedByProperty > targets + STRING_CONSTANT
Code	typesIndexedByProperty > targets + STRING_CONSTANT
Distance : 6

3
Tree	oldRoot > targets + STRING_CONSTANT
Code	oldRoot > targets + STRING_CONSTANT
Distance : 6

4
Tree	objectMethodsGuru > targets + STRING_CONSTANT
Code	objectMethodsGuru > targets + STRING_CONSTANT
Distance : 6

5
Tree	findDeps > transformed + STRING_CONSTANT
Code	findDeps > transformed + STRING_CONSTANT
Distance : 6

6
Tree	oldRoot > transformed + STRING_CONSTANT
Code	oldRoot > transformed + STRING_CONSTANT
Distance : 6

7
Tree	typesIndexedByProperty > transformed + STRING_CONSTANT
Code	typesIndexedByProperty > transformed + STRING_CONSTANT
Distance : 6

8
Tree	findDeps > targets + STRING_CONSTANT
Code	findDeps > targets + STRING_CONSTANT
Distance : 6

9
Tree	options.dependencyOptions < currentScript == NUMBER_CONSTANT
Code	options.dependencyOptions < currentScript == NUMBER_CONSTANT
Distance : 5

10
Tree	findDeps . needsManagement ( currentScript . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	findDeps . needsManagement ( currentScript . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 10

11
Tree	options.dependencyOptions < IllegalStateException == NUMBER_CONSTANT
Code	options.dependencyOptions < IllegalStateException == NUMBER_CONSTANT
Distance : 5

12
Tree	bundler && currentScript . options.closurePass ( null ) && ^
Code	bundler && currentScript . options.closurePass ( null ) && ^
Distance : 8

13
Tree	findDeps . needsManagement ( decl . class ) > NUMBER_CONSTANT
Code	findDeps . needsManagement ( decl . class ) > NUMBER_CONSTANT
Distance : 8

14
Tree	oldRoot . needsManagement ( path . class ) > NUMBER_CONSTANT
Code	oldRoot . needsManagement ( path . class ) > NUMBER_CONSTANT
Distance : 8

15
Tree	typesIndexedByProperty . needsManagement ( null ) < ^
Code	typesIndexedByProperty . needsManagement ( null ) < ^
Distance : 6

16
Tree	objectMethodsGuru . needsManagement ( path . class ) > NUMBER_CONSTANT
Code	objectMethodsGuru . needsManagement ( path . class ) > NUMBER_CONSTANT
Distance : 8

17
Tree	findDeps . needsManagement ( null ) < ^
Code	findDeps . needsManagement ( null ) < ^
Distance : 6

18
Tree	objectMethodsGuru + STRING_CONSTANT == NUMBER_CONSTANT
Code	objectMethodsGuru + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

19
Tree	oldRoot + STRING_CONSTANT == NUMBER_CONSTANT
Code	oldRoot + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

20
Tree	typesIndexedByProperty + STRING_CONSTANT == NUMBER_CONSTANT
Code	typesIndexedByProperty + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

21
Tree	findDeps + STRING_CONSTANT == NUMBER_CONSTANT
Code	findDeps + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

22
Tree	bundler + STRING_CONSTANT == NUMBER_CONSTANT
Code	bundler + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

23
Tree	AtLeastXVerificationTest + STRING_CONSTANT == NUMBER_CONSTANT
Code	AtLeastXVerificationTest + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

24
Tree	NULL_TYPE + STRING_CONSTANT == NUMBER_CONSTANT
Code	NULL_TYPE + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

25
Tree	convention + STRING_CONSTANT == NUMBER_CONSTANT
Code	convention + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

26
Tree	subformats + STRING_CONSTANT == NUMBER_CONSTANT
Code	subformats + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

27
Tree	StackTraceFilteringTest + STRING_CONSTANT == NUMBER_CONSTANT
Code	StackTraceFilteringTest + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

28
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 5

29
Tree	null != isDateType . needsManagement ( null )
Code	null != isDateType . needsManagement ( null )
Distance : 6

30
Tree	null != anyStringNull . && ( null )
Code	null != anyStringNull . && ( null )
Distance : 7

31
Tree	null != isDotPrototype . needsManagement ( null )
Code	null != isDotPrototype . needsManagement ( null )
Distance : 6

32
Tree	null != SIZE_THRESHOLD . options.skipAllPasses ( null )
Code	null != SIZE_THRESHOLD . options.skipAllPasses ( null )
Distance : 7

33
Tree	options.dependencyOptions < Scope
Code	options.dependencyOptions < Scope
Distance : 5

34
Tree	null != qNameRoot . needsManagement ( null )
Code	null != qNameRoot . needsManagement ( null )
Distance : 6

35
Tree	null != methodEquals . needsManagement ( null )
Code	null != methodEquals . needsManagement ( null )
Distance : 6

36
Tree	null != isBooleanObjectType . && ( null )
Code	null != isBooleanObjectType . && ( null )
Distance : 7

37
Tree	null != modulesSupplier . needsManagement ( null )
Code	null != modulesSupplier . needsManagement ( null )
Distance : 6

38
Tree	null != Feature . && ( null )
Code	null != Feature . && ( null )
Distance : 7

39
Tree	null != argMismatchStubbings . options.skipAllPasses ( null )
Code	null != argMismatchStubbings . options.skipAllPasses ( null )
Distance : 7

40
Tree	this . sectionOutlineStrokeMap . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . sectionOutlineStrokeMap . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

41
Tree	this . ListIterator . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . ListIterator . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

42
Tree	options.dependencyOptions < isUnknownObject
Code	options.dependencyOptions < isUnknownObject
Distance : 5

43
Tree	oldRoot . needsManagement ( currentScript . class ) > NUMBER_CONSTANT
Code	oldRoot . needsManagement ( currentScript . class ) > NUMBER_CONSTANT
Distance : 8

44
Tree	options.dependencyOptions < Rule == NUMBER_CONSTANT
Code	options.dependencyOptions < Rule == NUMBER_CONSTANT
Distance : 5

45
Tree	this . runSmartNameRemoval . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . runSmartNameRemoval . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

46
Tree	options.dependencyOptions < Scope == NUMBER_CONSTANT
Code	options.dependencyOptions < Scope == NUMBER_CONSTANT
Distance : 5

47
Tree	oldRoot && currentScript . && ( null ) && ^
Code	oldRoot && currentScript . && ( null ) && ^
Distance : 8

48
Tree	typesIndexedByProperty && currentScript . && ( null ) && ^
Code	typesIndexedByProperty && currentScript . && ( null ) && ^
Distance : 8

49
Tree	null != isDateType . options.skipAllPasses ( path . class )
Code	null != isDateType . options.skipAllPasses ( path . class )
Distance : 9

50
Tree	typesIndexedByProperty . needsManagement ( currentScript . class ) > NUMBER_CONSTANT
Code	typesIndexedByProperty . needsManagement ( currentScript . class ) > NUMBER_CONSTANT
Distance : 8

51
Tree	this . scopes . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . scopes . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

52
Tree	objectMethodsGuru . needsManagement ( null ) > NUMBER_CONSTANT
Code	objectMethodsGuru . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

53
Tree	null != SIZE_THRESHOLD . needsManagement ( path . class )
Code	null != SIZE_THRESHOLD . needsManagement ( path . class )
Distance : 8

54
Tree	this . subtypes . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . subtypes . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

55
Tree	this . negativeItemLabelPositionMap . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . negativeItemLabelPositionMap . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

56
Tree	null != anyStringNull . options.skipAllPasses ( path . class )
Code	null != anyStringNull . options.skipAllPasses ( path . class )
Distance : 9

57
Tree	oldRoot . needsManagement ( null ) > NUMBER_CONSTANT
Code	oldRoot . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

58
Tree	options.dependencyOptions < Rule
Code	options.dependencyOptions < Rule
Distance : 5

59
Tree	null != this . emptyAsNull . needsManagement () == NUMBER_CONSTANT
Code	null != this . emptyAsNull . needsManagement () == NUMBER_CONSTANT
Distance : 7

60
Tree	objectMethodsGuru . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	objectMethodsGuru . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

61
Tree	null != this . outlineVisible . needsManagement () == NUMBER_CONSTANT
Code	null != this . outlineVisible . needsManagement () == NUMBER_CONSTANT
Distance : 7

62
Tree	bundler . needsManagement ( null ) > NUMBER_CONSTANT
Code	bundler . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

63
Tree	bundler . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	bundler . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

64
Tree	oldRoot . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	oldRoot . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

65
Tree	typesIndexedByProperty . needsManagement ( null ) > NUMBER_CONSTANT
Code	typesIndexedByProperty . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

66
Tree	null != this . emptyAsNull . needsManagement ( path , this . TRUTHY )
Code	null != this . emptyAsNull . needsManagement ( path , this . TRUTHY )
Distance : 12

67
Tree	null != this . emptyAsNull . needsManagement ( path , this . enumLiteralHasKey )
Code	null != this . emptyAsNull . needsManagement ( path , this . enumLiteralHasKey )
Distance : 12

68
Tree	options.dependencyOptions < IllegalStateException
Code	options.dependencyOptions < IllegalStateException
Distance : 5

69
Tree	objectMethodsGuru && currentScript . && ( grandParent . class ) && ^
Code	objectMethodsGuru && currentScript . && ( grandParent . class ) && ^
Distance : 10

70
Tree	null != this . anyStringNull . needsManagement () == NUMBER_CONSTANT
Code	null != this . anyStringNull . needsManagement () == NUMBER_CONSTANT
Distance : 7

71
Tree	null != this . enableSubstitutionInVariables . needsManagement () == NUMBER_CONSTANT
Code	null != this . enableSubstitutionInVariables . needsManagement () == NUMBER_CONSTANT
Distance : 7

72
Tree	null != this . printExterns . needsManagement () == NUMBER_CONSTANT
Code	null != this . printExterns . needsManagement () == NUMBER_CONSTANT
Distance : 7

73
Tree	AtLeastXVerificationTest . needsManagement ( null ) > NUMBER_CONSTANT
Code	AtLeastXVerificationTest . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

74
Tree	convention . needsManagement ( null ) > NUMBER_CONSTANT
Code	convention . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

75
Tree	oldRoot && currentScript . options.closurePass ( grandParent . class ) && ^
Code	oldRoot && currentScript . options.closurePass ( grandParent . class ) && ^
Distance : 10

76
Tree	options.dependencyOptions < currentScript
Code	options.dependencyOptions < currentScript
Distance : 5

77
Tree	typesIndexedByProperty && currentScript . && ( grandParent . class ) && ^
Code	typesIndexedByProperty && currentScript . && ( grandParent . class ) && ^
Distance : 10

78
Tree	findDeps && currentScript . && ( grandParent . class ) && ^
Code	findDeps && currentScript . && ( grandParent . class ) && ^
Distance : 10

79
Tree	null != this . preserveClosurePrimitives . needsManagement () == NUMBER_CONSTANT
Code	null != this . preserveClosurePrimitives . needsManagement () == NUMBER_CONSTANT
Distance : 7

80
Tree	NULL_TYPE . needsManagement ( null ) > NUMBER_CONSTANT
Code	NULL_TYPE . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

81
Tree	typesIndexedByProperty . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	typesIndexedByProperty . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

82
Tree	null != this . isUnknownObject . needsManagement () == NUMBER_CONSTANT
Code	null != this . isUnknownObject . needsManagement () == NUMBER_CONSTANT
Distance : 7

83
Tree	options.dependencyOptions < String
Code	options.dependencyOptions < String
Distance : 5

84
Tree	null != qNameRoot . && ( path . class )
Code	null != qNameRoot . && ( path . class )
Distance : 9

85
Tree	objectMethodsGuru . needsManagement ( currentScript . class ) > NUMBER_CONSTANT
Code	objectMethodsGuru . needsManagement ( currentScript . class ) > NUMBER_CONSTANT
Distance : 8

86
Tree	findDeps . needsManagement ( currentScript . class ) > NUMBER_CONSTANT
Code	findDeps . needsManagement ( currentScript . class ) > NUMBER_CONSTANT
Distance : 8

87
Tree	this . verificationStartedListeners . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . verificationStartedListeners . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

88
Tree	objectMethodsGuru && currentScript . && ( null ) && ^
Code	objectMethodsGuru && currentScript . && ( null ) && ^
Distance : 8

89
Tree	findDeps && currentScript . && ( null ) && ^
Code	findDeps && currentScript . && ( null ) && ^
Distance : 8

90
Tree	null != this . subtypes . needsManagement () == NUMBER_CONSTANT
Code	null != this . subtypes . needsManagement () == NUMBER_CONSTANT
Distance : 7

91
Tree	null != this . enumLiteralHasKey . needsManagement () == NUMBER_CONSTANT
Code	null != this . enumLiteralHasKey . needsManagement () == NUMBER_CONSTANT
Distance : 7

92
Tree	null != this . emptyAsNull . needsManagement ( path , this . BOOLEAN_TYPE )
Code	null != this . emptyAsNull . needsManagement ( path , this . BOOLEAN_TYPE )
Distance : 12

93
Tree	AtLeastXVerificationTest && currentScript . options.closurePass ( null ) && ^
Code	AtLeastXVerificationTest && currentScript . options.closurePass ( null ) && ^
Distance : 8

94
Tree	StackTraceFilteringTest . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	StackTraceFilteringTest . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

95
Tree	null != this . isLiteralObject . needsManagement () == NUMBER_CONSTANT
Code	null != this . isLiteralObject . needsManagement () == NUMBER_CONSTANT
Distance : 7

96
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT
Distance : 6

97
Tree	objectMethodsGuru && currentScript . && ( isBooleanObjectType . class ) && ^
Code	objectMethodsGuru && currentScript . && ( isBooleanObjectType . class ) && ^
Distance : 10

98
Tree	NULL_TYPE && currentScript . && ( null ) && ^
Code	NULL_TYPE && currentScript . && ( null ) && ^
Distance : 8

99
Tree	options.dependencyOptions < JSType
Code	options.dependencyOptions < JSType
Distance : 5

100
Tree	convention && currentScript . && ( null ) && ^
Code	convention && currentScript . && ( null ) && ^
Distance : 8

101
Tree	null != this . outlineVisible . needsManagement ( path , this . minimum )
Code	null != this . outlineVisible . needsManagement ( path , this . minimum )
Distance : 12

102
Tree	options.dependencyOptions < String == NUMBER_CONSTANT
Code	options.dependencyOptions < String == NUMBER_CONSTANT
Distance : 5

103
Tree	options.dependencyOptions < decl
Code	options.dependencyOptions < decl
Distance : 5

104
Tree	oldRoot && currentScript . && ( isBooleanObjectType . class ) && ^
Code	oldRoot && currentScript . && ( isBooleanObjectType . class ) && ^
Distance : 10

105
Tree	this . datasetToScaleMap . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . datasetToScaleMap . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

106
Tree	null != isDotPrototype . needsManagement ( path . class )
Code	null != isDotPrototype . needsManagement ( path . class )
Distance : 8

107
Tree	null != isDateType . needsManagement ( type . class )
Code	null != isDateType . needsManagement ( type . class )
Distance : 8

108
Tree	typesIndexedByProperty && currentScript . options.closurePass ( isBooleanObjectType . class ) && ^
Code	typesIndexedByProperty && currentScript . options.closurePass ( isBooleanObjectType . class ) && ^
Distance : 10

109
Tree	objectMethodsGuru . needsManagement ( decl . class ) > NUMBER_CONSTANT
Code	objectMethodsGuru . needsManagement ( decl . class ) > NUMBER_CONSTANT
Distance : 8

110
Tree	findDeps . needsManagement ( null ) > NUMBER_CONSTANT
Code	findDeps . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

111
Tree	findDeps && currentScript . && ( isBooleanObjectType . class ) && ^
Code	findDeps && currentScript . && ( isBooleanObjectType . class ) && ^
Distance : 10

112
Tree	null != anyStringNull . needsManagement ( type . class )
Code	null != anyStringNull . needsManagement ( type . class )
Distance : 8

113
Tree	oldRoot . needsManagement ( decl . class ) > NUMBER_CONSTANT
Code	oldRoot . needsManagement ( decl . class ) > NUMBER_CONSTANT
Distance : 8

114
Tree	this . NordsieckTransformer . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . NordsieckTransformer . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

115
Tree	options.dependencyOptions < InterruptedException
Code	options.dependencyOptions < InterruptedException
Distance : 5

116
Tree	findDeps . needsManagement ( null ) < >=
Code	findDeps . needsManagement ( null ) < >=
Distance : 6

117
Tree	null != this . enumLiteralHasKey . needsManagement ( path , this . BOOLEAN_TYPE )
Code	null != this . enumLiteralHasKey . needsManagement ( path , this . BOOLEAN_TYPE )
Distance : 12

118
Tree	StackTraceFilteringTest && currentScript . && ( null ) && ^
Code	StackTraceFilteringTest && currentScript . && ( null ) && ^
Distance : 8

119
Tree	oldRoot . needsManagement ( decl . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	oldRoot . needsManagement ( decl . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 10

120
Tree	bundler && currentScript . options.closurePass ( grandParent . class ) && ^
Code	bundler && currentScript . options.closurePass ( grandParent . class ) && ^
Distance : 10

121
Tree	typesIndexedByProperty . needsManagement ( decl . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	typesIndexedByProperty . needsManagement ( decl . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 10

122
Tree	objectMethodsGuru && currentScript . options.closurePass ( namespaceNode . class ) && ^
Code	objectMethodsGuru && currentScript . options.closurePass ( namespaceNode . class ) && ^
Distance : 10

123
Tree	objectMethodsGuru && currentScript . && ( null )
Code	objectMethodsGuru && currentScript . && ( null )
Distance : 7

124
Tree	typesIndexedByProperty . needsManagement ( decl . class ) > NUMBER_CONSTANT
Code	typesIndexedByProperty . needsManagement ( decl . class ) > NUMBER_CONSTANT
Distance : 8

125
Tree	null != this . emptyAsNull . needsManagement ( path , this . toStringTree )
Code	null != this . emptyAsNull . needsManagement ( path , this . toStringTree )
Distance : 12

126
Tree	oldRoot && currentScript . needsManagement ( null )
Code	oldRoot && currentScript . needsManagement ( null )
Distance : 6

127
Tree	options.dependencyOptions < Feature
Code	options.dependencyOptions < Feature
Distance : 5

128
Tree	objectMethodsGuru . needsManagement ( currentScript . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	objectMethodsGuru . needsManagement ( currentScript . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 10

129
Tree	null != methodEquals . needsManagement ( path . class )
Code	null != methodEquals . needsManagement ( path . class )
Distance : 8

130
Tree	subformats . needsManagement ( null ) > NUMBER_CONSTANT
Code	subformats . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

131
Tree	oldRoot . needsManagement ( currentScript . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	oldRoot . needsManagement ( currentScript . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 10

132
Tree	typesIndexedByProperty && currentScript . options.skipAllPasses ( null )
Code	typesIndexedByProperty && currentScript . options.skipAllPasses ( null )
Distance : 7

133
Tree	null != this . isLiteralObject . needsManagement ( path , this . minimum )
Code	null != this . isLiteralObject . needsManagement ( path , this . minimum )
Distance : 12

134
Tree	findDeps && currentScript . && ( null )
Code	findDeps && currentScript . && ( null )
Distance : 7

135
Tree	StackTraceFilteringTest . needsManagement ( null ) > NUMBER_CONSTANT
Code	StackTraceFilteringTest . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

136
Tree	null != this . emptyAsNull . needsManagement ( path , this . minimum )
Code	null != this . emptyAsNull . needsManagement ( path , this . minimum )
Distance : 12

137
Tree	null != isBooleanObjectType . && ( path . class )
Code	null != isBooleanObjectType . && ( path . class )
Distance : 9

138
Tree	AtLeastXVerificationTest . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	AtLeastXVerificationTest . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

139
Tree	objectMethodsGuru && type . && ( null )
Code	objectMethodsGuru && type . && ( null )
Distance : 7

140
Tree	options.dependencyOptions < decl == NUMBER_CONSTANT
Code	options.dependencyOptions < decl == NUMBER_CONSTANT
Distance : 5

141
Tree	oldRoot () type . options.closurePass ( null )
Code	oldRoot () type . options.closurePass ( null )
Distance : 7

142
Tree	objectMethodsGuru . needsManagement ( path . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	objectMethodsGuru . needsManagement ( path . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 10

143
Tree	oldRoot > MILLIS_PER_DAY + STRING_CONSTANT
Code	oldRoot > MILLIS_PER_DAY + STRING_CONSTANT
Distance : 6

144
Tree	subformats && currentScript . options.closurePass ( null ) && ^
Code	subformats && currentScript . options.closurePass ( null ) && ^
Distance : 8

145
Tree	objectMethodsGuru . needsManagement ( null ) < ^
Code	objectMethodsGuru . needsManagement ( null ) < ^
Distance : 6

146
Tree	bundler . needsManagement ( null ) < >=
Code	bundler . needsManagement ( null ) < >=
Distance : 6

147
Tree	typesIndexedByProperty && type . needsManagement ( null )
Code	typesIndexedByProperty && type . needsManagement ( null )
Distance : 6

148
Tree	objectMethodsGuru . needsManagement ( decl . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	objectMethodsGuru . needsManagement ( decl . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 10

149
Tree	findDeps && type . options.skipAllPasses ( null )
Code	findDeps && type . options.skipAllPasses ( null )
Distance : 7

150
Tree	this . functionContextStack . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . functionContextStack . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

151
Tree	oldRoot . needsManagement ( null ) < ^
Code	oldRoot . needsManagement ( null ) < ^
Distance : 6

152
Tree	null != modulesSupplier . options.skipAllPasses ( path . class )
Code	null != modulesSupplier . options.skipAllPasses ( path . class )
Distance : 9

153
Tree	oldRoot . needsManagement ( path . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	oldRoot . needsManagement ( path . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 10

154
Tree	findDeps . needsManagement ( decl . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	findDeps . needsManagement ( decl . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 10

155
Tree	findDeps . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	findDeps . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

156
Tree	bundler . needsManagement ( null ) < ^
Code	bundler . needsManagement ( null ) < ^
Distance : 6

157
Tree	null != this . enumLiteralHasKey . needsManagement ( path , this . toStringTree )
Code	null != this . enumLiteralHasKey . needsManagement ( path , this . toStringTree )
Distance : 12

158
Tree	objectMethodsGuru && ctorType . needsManagement ( null )
Code	objectMethodsGuru && ctorType . needsManagement ( null )
Distance : 6

159
Tree	typesIndexedByProperty && ctorType . && ( null )
Code	typesIndexedByProperty && ctorType . && ( null )
Distance : 7

160
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT class
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT class
Distance : 5

161
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT -
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT -
Distance : 5

162
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT [
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT [
Distance : 5

163
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT f
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT f
Distance : 5

164
Tree	typesIndexedByProperty . needsManagement ( currentScript . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	typesIndexedByProperty . needsManagement ( currentScript . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 10

165
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT Override
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT Override
Distance : 5

166
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT MathRuntimeException
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT MathRuntimeException
Distance : 5

167
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT mock
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT mock
Distance : 5

168
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT array
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT array
Distance : 5

169
Tree	options.dependencyOptions < isUnknownObject == NUMBER_CONSTANT
Code	options.dependencyOptions < isUnknownObject == NUMBER_CONSTANT
Distance : 5

170
Tree	convention . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	convention . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

171
Tree	objectMethodsGuru . needsManagement ( null ) < >=
Code	objectMethodsGuru . needsManagement ( null ) < >=
Distance : 6

172
Tree	options.dependencyOptions < Feature == NUMBER_CONSTANT
Code	options.dependencyOptions < Feature == NUMBER_CONSTANT
Distance : 5

173
Tree	NULL_TYPE . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	NULL_TYPE . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

174
Tree	oldRoot . needsManagement ( null ) < >=
Code	oldRoot . needsManagement ( null ) < >=
Distance : 6

175
Tree	options.dependencyOptions < JSType == NUMBER_CONSTANT
Code	options.dependencyOptions < JSType == NUMBER_CONSTANT
Distance : 5

176
Tree	null != this . enumLiteralHasKey . needsManagement ( path , this . minimum )
Code	null != this . enumLiteralHasKey . needsManagement ( path , this . minimum )
Distance : 12

177
Tree	typesIndexedByProperty . needsManagement ( null ) < >=
Code	typesIndexedByProperty . needsManagement ( null ) < >=
Distance : 6

178
Tree	options.dependencyOptions < InterruptedException == NUMBER_CONSTANT
Code	options.dependencyOptions < InterruptedException == NUMBER_CONSTANT
Distance : 5

179
Tree	subformats . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	subformats . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

180
Tree	objectMethodsGuru / ctorType == NUMBER_CONSTANT
Code	objectMethodsGuru / ctorType == NUMBER_CONSTANT
Distance : 6

181
Tree	typesIndexedByProperty / ctorType == NUMBER_CONSTANT
Code	typesIndexedByProperty / ctorType == NUMBER_CONSTANT
Distance : 6

182
Tree	findDeps / ctorType == NUMBER_CONSTANT
Code	findDeps / ctorType == NUMBER_CONSTANT
Distance : 6

183
Tree	oldRoot / ctorType == NUMBER_CONSTANT
Code	oldRoot / ctorType == NUMBER_CONSTANT
Distance : 6

184
Tree	findDeps / type == NUMBER_CONSTANT
Code	findDeps / type == NUMBER_CONSTANT
Distance : 6

185
Tree	findDeps / currentScript == NUMBER_CONSTANT
Code	findDeps / currentScript == NUMBER_CONSTANT
Distance : 6

186
Tree	objectMethodsGuru / currentScript == NUMBER_CONSTANT
Code	objectMethodsGuru / currentScript == NUMBER_CONSTANT
Distance : 6

187
Tree	typesIndexedByProperty / type == NUMBER_CONSTANT
Code	typesIndexedByProperty / type == NUMBER_CONSTANT
Distance : 6

188
Tree	typesIndexedByProperty / currentScript == NUMBER_CONSTANT
Code	typesIndexedByProperty / currentScript == NUMBER_CONSTANT
Distance : 6

189
Tree	objectMethodsGuru / type == NUMBER_CONSTANT
Code	objectMethodsGuru / type == NUMBER_CONSTANT
Distance : 6

190
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT notifyListeners
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT notifyListeners
Distance : 5

191
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT notifyListeners
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT notifyListeners
Distance : 6

192
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT [
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT [
Distance : 6

193
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT f
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT f
Distance : 6

194
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT Override
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT Override
Distance : 6

195
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT MathRuntimeException
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT MathRuntimeException
Distance : 6

196
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT mock
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT mock
Distance : 6

197
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT array
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT array
Distance : 6

198
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT class
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT class
Distance : 6

199
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT -
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT -
Distance : 6

========================================================================


========================================================================
Example Number: 28
Parent Code is: 
{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ ( new NodeTraversal ( compiler , this ) ) . traverseRoots ( externs , root ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (36 (214{val=(}) (14 (304{val=new}) (43 (801{val=NodeTraversal})) (214{val=(}) (800{val=compiler}) (234{val=,}) (315{val=this}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=traverse}) (214{val=(}) (800{val=root}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (36 (214{val=(}) (14 (304{val=new}) (43 (801{val=NodeTraversal})) (214{val=(}) (800{val=compiler}) (234{val=,}) (315{val=this}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=traverseRoots}) (214{val=(}) (800{val=externs}) (234{val=,}) (800{val=root}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/30/parent/src_com_google_javascript_jscomp_FlowSensitiveInlineVariables.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ externs . traverse ( traverse ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ externs . traverse ( traverse ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

1
Tree	{ compiler . traverse ( compiler . traverse ( java.util.Locale.US ) , null ) ; }
Code	{ compiler . traverse ( compiler . traverse ( java.util.Locale.US ) , null ) ; }
Distance : 11

2
Tree	{ ( new NodeTraversal ( compiler , root , compiler , false ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , root , compiler , false ) ) . traverse ( externs ) ; }
Distance : 8

3
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , false ) ; }
Distance : 7

4
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , false ) ; }
Distance : 6

5
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , LocalizedFormats.DIMENSIONS_MISMATCH ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , LocalizedFormats.DIMENSIONS_MISMATCH ) ) . traverse ( root ) ; }
Distance : 5

6
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . traverseRoots ( root ) ; }
Distance : 5

7
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( externs ) ; }
Distance : 4

8
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , ! ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , ! ) ; }
Distance : 7

9
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , TypeInferenceMode.NEITHER ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , TypeInferenceMode.NEITHER ) ) . traverse ( externs ) ; }
Distance : 5

10
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , Color.BLACK ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , Color.BLACK ) ) . traverse ( root ) ; }
Distance : 5

11
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , parts.length ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , parts.length ) ) . traverse ( root ) ; }
Distance : 5

12
Tree	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( false ) , ! ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( false ) , ! ) ; }
Distance : 7

13
Tree	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) . traverse ( CHAR_CONS ) ; }
Distance : 9

14
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( true ) , ! ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( true ) , ! ) ; }
Distance : 7

15
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( true ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( true ) , null ) ; }
Distance : 9

16
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( externs , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( externs , root ) , null ) ; }
Distance : 9

17
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverse ( false ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverse ( false ) ) ; }
Distance : 10

18
Tree	{ compiler . traverse ( compiler . traverseRoots ( null , false ) , null ) ; }
Code	{ compiler . traverse ( compiler . traverseRoots ( null , false ) , null ) ; }
Distance : 12

19
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; }
Distance : 5

20
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( true ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( true ) ) ; }
Distance : 10

21
Tree	{ compiler . traverse ( compiler . traverseRoots ( null , true ) , null ) ; }
Code	{ compiler . traverse ( compiler . traverseRoots ( null , true ) , null ) ; }
Distance : 12

22
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( root ) ; }
Distance : 5

23
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , getLastCompiler ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , getLastCompiler ) ) . traverse ( root ) ; }
Distance : 5

24
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( externs , root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( externs , root ) , null ) ; }
Distance : 9

25
Tree	{ new NodeTraversal ( compiler , this , externs ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Distance : 10

26
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . traverse ( root ) ; }
Distance : 6

27
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , Token.DEFAULT_CASE ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , Token.DEFAULT_CASE ) ) . traverse ( root ) ; }
Distance : 5

28
Tree	{ ( new NodeTraversal ( compiler , this , compiler ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , compiler ) ) . traverse ( root ) ; }
Distance : 5

29
Tree	{ root . traverse ( traverseRoots ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ root . traverse ( traverseRoots ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

30
Tree	{ new NodeTraversal ( compiler , this , compiler ) . traverse ( externs ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , compiler ) . traverse ( externs ) . traverse ( CHAR_CONS ) ; }
Distance : 9

31
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverseRoots ( externs ) ; }
Distance : 4

32
Tree	{ new NodeTraversal ( compiler , this , root ) . traverse ( root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverse ( root ) . traverse ( CHAR_CONS ) ; }
Distance : 10

33
Tree	{ compiler . traverse ( traverseRoots ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ compiler . traverse ( traverseRoots ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

34
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverse ( true ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverse ( true ) ) ; }
Distance : 10

35
Tree	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverse ( externs ) ; }
Distance : 8

36
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( externs , root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( externs , root ) , null ) ; }
Distance : 9

37
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . traverse ( compiler ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . traverse ( compiler ) ; }
Distance : 7

38
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( NUMBER_CONSTANT , / ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( NUMBER_CONSTANT , / ) ; }
Distance : 5

39
Tree	{ new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Distance : 10

40
Tree	{ ( new NodeTraversal ( compiler , root , compiler , false ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , root , compiler , false ) ) . traverseRoots ( root ) ; }
Distance : 7

41
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( NUMBER_CONSTANT , ! ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( NUMBER_CONSTANT , ! ) ; }
Distance : 5

42
Tree	{ compiler . traverse ( compiler . traverse ( Nullability.EXPLICIT ) , null ) ; }
Code	{ compiler . traverse ( compiler . traverse ( Nullability.EXPLICIT ) , null ) ; }
Distance : 11

43
Tree	{ externs . traverse ( compiler . traverseRoots ( null , false ) , null ) ; }
Code	{ externs . traverse ( compiler . traverseRoots ( null , false ) , null ) ; }
Distance : 12

44
Tree	{ compiler . traverse ( compiler . traverse ( Feature.MODULES ) , null ) ; }
Code	{ compiler . traverse ( compiler . traverse ( Feature.MODULES ) , null ) ; }
Distance : 11

45
Tree	{ compiler . traverseRoots ( compiler . traverse ( null , false ) , null ) ; }
Code	{ compiler . traverseRoots ( compiler . traverse ( null , false ) , null ) ; }
Distance : 12

46
Tree	{ externs . traverse ( compiler . traverse ( java.util.Locale.US ) , null ) ; }
Code	{ externs . traverse ( compiler . traverse ( java.util.Locale.US ) , null ) ; }
Distance : 11

47
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 14

48
Tree	{ root . traverse ( compiler . traverse ( null , false ) , null ) ; }
Code	{ root . traverse ( compiler . traverse ( null , false ) , null ) ; }
Distance : 12

49
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root , root ) , null ) ; }
Distance : 10

50
Tree	{ externs . traverse ( compiler . traverse ( Locale.US ) , null ) ; }
Code	{ externs . traverse ( compiler . traverse ( Locale.US ) , null ) ; }
Distance : 11

51
Tree	{ ( new NodeTraversal ( root , null , false ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( root , null , false ) ) . traverse ( externs ) ; }
Distance : 7

52
Tree	{ traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , false ) ; }
Code	{ traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , false ) ; }
Distance : 7

53
Tree	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( true ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( true ) , false ) ; }
Distance : 7

54
Tree	{ root . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ root . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 14

55
Tree	{ new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) . traverseRoots ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) . traverseRoots ( CHAR_CONS ) ; }
Distance : 10

56
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverseRoots ( compiler ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverseRoots ( compiler ) ; }
Distance : 6

57
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( NUMBER_CONSTANT , externs , root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( NUMBER_CONSTANT , externs , root , root ) , null ) ; }
Distance : 13

58
Tree	{ ( new NodeTraversal ( compiler , root , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , root , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Distance : 6

59
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , null ) ; }
Distance : 9

60
Tree	{ compiler . traverse ( compiler . traverse ( null , true ) , null ) ; }
Code	{ compiler . traverse ( compiler . traverse ( null , true ) , null ) ; }
Distance : 12

61
Tree	{ ( new NodeTraversal ( compiler , this , compiler ) ) . traverse ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Code	{ ( new NodeTraversal ( compiler , this , compiler ) ) . traverse ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Distance : 5

62
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . traverseRoots ( root ) ; }
Distance : 4

63
Tree	{ externs . traverse ( compiler . traverse ( null , true ) , null ) ; }
Code	{ externs . traverse ( compiler . traverse ( null , true ) , null ) ; }
Distance : 12

64
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( externs ) ; }
Distance : 5

65
Tree	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverseRoots ( root ) ; }
Distance : 7

66
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( externs ) ; }
Distance : 5

67
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverse ( root ) ; }
Distance : 5

68
Tree	{ root . traverse ( traverse ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ root . traverse ( traverse ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

69
Tree	{ new NodeTraversal ( compiler , this , compiler ) . traverse ( externs , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , compiler ) . traverse ( externs , root ) . traverse ( CHAR_CONS ) ; }
Distance : 9

70
Tree	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root ) , ! ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root ) , ! ) ; }
Distance : 7

71
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . traverse ( externs ) ; }
Distance : 6

72
Tree	{ root . traverse ( compiler . traverseRoots ( null , false ) , null ) ; }
Code	{ root . traverse ( compiler . traverseRoots ( null , false ) , null ) ; }
Distance : 12

73
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( externs ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( externs ) , false ) ; }
Distance : 6

74
Tree	{ root . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , null ) ; }
Code	{ root . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , null ) ; }
Distance : 10

75
Tree	{ externs . traverse ( traverseRoots ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ externs . traverse ( traverseRoots ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

76
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( false ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( false ) , null ) ; }
Distance : 9

77
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Distance : 7

78
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 14

79
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( NUMBER_CONSTANT , false ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( NUMBER_CONSTANT , false ) ; }
Distance : 5

80
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root , root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root , root ) , null ) ; }
Distance : 10

81
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Distance : 4

82
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Distance : 5

83
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( false ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( false ) , null ) ; }
Distance : 8

84
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( NUMBER_CONSTANT , false ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( NUMBER_CONSTANT , false ) ; }
Distance : 5

85
Tree	{ new NodeTraversal ( compiler , this , compiler ) . traverse ( root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , compiler ) . traverse ( root ) . traverse ( CHAR_CONS ) ; }
Distance : 10

86
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverse ( compiler ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverse ( compiler ) ; }
Distance : 6

87
Tree	{ root . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( false ) , null ) ; }
Code	{ root . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( false ) , null ) ; }
Distance : 9

88
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , false ) ; }
Distance : 6

89
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( NUMBER_CONSTANT , / ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( NUMBER_CONSTANT , / ) ; }
Distance : 5

90
Tree	{ new NodeTraversal ( compiler , this , compiler ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , compiler ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Distance : 10

91
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverseRoots ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverseRoots ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Distance : 4

92
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverse ( compiler ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverse ( compiler ) ; }
Distance : 7

93
Tree	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( externs ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( externs ) . traverse ( CHAR_CONS ) ; }
Distance : 8

94
Tree	{ ( new NodeTraversal ( root , null , false ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( root , null , false ) ) . traverse ( root ) ; }
Distance : 7

95
Tree	{ ( new NodeTraversal ( compiler , root , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , root , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Distance : 6

96
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( compiler ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( compiler ) ; }
Distance : 8

97
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( NUMBER_CONSTANT , externs , root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( NUMBER_CONSTANT , externs , root , root ) , null ) ; }
Distance : 13

98
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Distance : 7

99
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , TypeInferenceMode.NEITHER ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , TypeInferenceMode.NEITHER ) ) . traverse ( root ) ; }
Distance : 5

100
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Distance : 5

101
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . traverseRoots ( externs ) ; }
Distance : 4

102
Tree	{ compiler . traverse ( compiler . traverse ( null , false ) , null ) ; }
Code	{ compiler . traverse ( compiler . traverse ( null , false ) , null ) ; }
Distance : 12

103
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 14

104
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . traverseRoots ( compiler ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . traverseRoots ( compiler ) ; }
Distance : 6

105
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , null ) ; }
Distance : 10

106
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( root ) ; }
Distance : 4

107
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( false ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( false ) , null ) ; }
Distance : 9

108
Tree	{ ( new NodeTraversal ( compiler , root , compiler , false ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , root , compiler , false ) ) . traverse ( root ) ; }
Distance : 8

109
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , JUnitRule.Strictness.WARN ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , JUnitRule.Strictness.WARN ) ) . traverse ( root ) ; }
Distance : 5

110
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( externs ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( externs ) , null ) ; }
Distance : 8

111
Tree	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( externs , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( externs , root ) . traverse ( CHAR_CONS ) ; }
Distance : 8

112
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NodeTraversal ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NodeTraversal ) ) . traverse ( root ) ; }
Distance : 5

113
Tree	{ ( new NodeTraversal ( compiler , root , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , root , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Distance : 5

114
Tree	{ new NodeTraversal ( compiler , this , externs ) . traverse ( externs ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . traverse ( externs ) . traverse ( CHAR_CONS ) ; }
Distance : 9

115
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 14

116
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , LanguageMode.ECMASCRIPT5 ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , LanguageMode.ECMASCRIPT5 ) ) . traverse ( root ) ; }
Distance : 5

117
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Distance : 5

118
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( NUMBER_CONSTANT , externs , root , root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( NUMBER_CONSTANT , externs , root , root ) , null ) ; }
Distance : 13

119
Tree	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) . traverse ( CHAR_CONS ) ; }
Distance : 9

120
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( false ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( false ) ) ; }
Distance : 10

121
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverseRoots ( root ) ; }
Distance : 4

122
Tree	{ compiler . traverse ( compiler . traverse ( compiler ) , null ) ; }
Code	{ compiler . traverse ( compiler . traverse ( compiler ) , null ) ; }
Distance : 11

123
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( NUMBER_CONSTANT , externs , root , root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( NUMBER_CONSTANT , externs , root , root ) , null ) ; }
Distance : 13

124
Tree	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverseRoots ( externs ) ; }
Distance : 7

125
Tree	{ new NodeTraversal ( compiler , this , externs ) . traverse ( externs , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . traverse ( externs , root ) . traverse ( CHAR_CONS ) ; }
Distance : 9

126
Tree	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root ) , false ) ; }
Distance : 6

127
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Distance : 6

128
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 13

129
Tree	{ new NodeTraversal ( compiler , this , root ) . traverse ( externs ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverse ( externs ) . traverse ( CHAR_CONS ) ; }
Distance : 9

130
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( externs ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( externs ) , false ) ; }
Distance : 5

131
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , null ) ; }
Distance : 9

132
Tree	{ new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root ) . traverse ( CHAR_CONS ) ; }
Distance : 9

133
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , null ) ; }
Distance : 9

134
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverse ( externs ) ; }
Distance : 5

135
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( false ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( false ) , false ) ; }
Distance : 6

136
Tree	{ new NodeTraversal ( compiler , this , root ) . traverse ( externs , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverse ( externs , root ) . traverse ( CHAR_CONS ) ; }
Distance : 9

137
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , null ) ; }
Distance : 8

138
Tree	{ new NodeTraversal ( compiler , this , root ) . traverse ( root ) . traverseRoots ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverse ( root ) . traverseRoots ( CHAR_CONS ) ; }
Distance : 10

139
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Distance : 6

140
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( false ) , ! ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( false ) , ! ) ; }
Distance : 7

141
Tree	{ ( new NodeTraversal ( compiler , compiler , root , false ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , root , false ) ) . traverse ( externs ) ; }
Distance : 8

142
Tree	{ ( new NodeTraversal ( compiler , compiler , root , false ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , root , false ) ) . traverse ( root ) ; }
Distance : 8

143
Tree	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverse ( compiler ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverse ( compiler ) ; }
Distance : 9

144
Tree	{ root . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , null ) ; }
Code	{ root . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , null ) ; }
Distance : 9

145
Tree	{ compiler . traverse ( compiler . traverse ( RandomSource.WELL_19937_C ) , null ) ; }
Code	{ compiler . traverse ( compiler . traverse ( RandomSource.WELL_19937_C ) , null ) ; }
Distance : 11

146
Tree	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverse ( root ) ; }
Distance : 8

147
Tree	{ externs . traverse ( compiler . traverse ( null , false ) , null ) ; }
Code	{ externs . traverse ( compiler . traverse ( null , false ) , null ) ; }
Distance : 12

148
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverseRoots ( root ) ; }
Distance : 4

149
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . traverse ( root ) ; }
Distance : 5

150
Tree	{ ( new NodeTraversal ( compiler , root , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , root , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Distance : 5

151
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . traverseRoots ( externs ) ; }
Distance : 5

152
Tree	{ ( new NodeTraversal ( compiler , this , compiler ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this , compiler ) ) . traverse ( externs ) ; }
Distance : 5

153
Tree	{ compiler . traverse ( compiler . traverse ( JSTypeNative.NO_RESOLVED_TYPE ) , null ) ; }
Code	{ compiler . traverse ( compiler . traverse ( JSTypeNative.NO_RESOLVED_TYPE ) , null ) ; }
Distance : 11

154
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Distance : 6

155
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( compiler ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( compiler ) ; }
Distance : 7

156
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Distance : 6

157
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverseRoots ( externs ) ; }
Distance : 4

158
Tree	{ compiler . traverseRoots ( traverse ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ compiler . traverseRoots ( traverse ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

159
Tree	{ new NodeTraversal ( compiler , this , externs ) . traverse ( root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . traverse ( root ) . traverse ( CHAR_CONS ) ; }
Distance : 10

160
Tree	{ ( new NodeTraversal ( externs , null , false ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( externs , null , false ) ) . traverse ( root ) ; }
Distance : 7

161
Tree	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( false ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( false ) , false ) ; }
Distance : 7

162
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root ) , null ) ; }
Distance : 9

163
Tree	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root ) , false ) ; }
Distance : 7

164
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( false ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( false ) , false ) ; }
Distance : 7

165
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( true ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( true ) ) ; }
Distance : 9

166
Tree	{ new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root , root ) . traverse ( CHAR_CONS ) ; }
Distance : 9

167
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( true ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( true ) , false ) ; }
Distance : 7

168
Tree	{ compiler . traverse ( compiler . traverse ( TimeZones.GMT_ID ) , null ) ; }
Code	{ compiler . traverse ( compiler . traverse ( TimeZones.GMT_ID ) , null ) ; }
Distance : 11

169
Tree	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( false ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( false ) , false ) ; }
Distance : 6

170
Tree	{ compiler . traverse ( traverse ( NUMBER_CONSTANT , true ) , null ) ; }
Code	{ compiler . traverse ( traverse ( NUMBER_CONSTANT , true ) , null ) ; }
Distance : 13

171
Tree	{ traverse ( compiler , new NodeTraversal ( externs , this , root ) . traverse ( false ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( externs , this , root ) . traverse ( false ) ) ; }
Distance : 10

172
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( false ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( false ) , null ) ; }
Distance : 9

173
Tree	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( externs ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( externs ) , false ) ; }
Distance : 6

174
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( externs ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( externs ) , null ) ; }
Distance : 8

175
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( false ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( false ) , null ) ; }
Distance : 9

176
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( externs ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( externs ) , null ) ; }
Distance : 8

177
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverseRoots ( true ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverseRoots ( true ) ) ; }
Distance : 9

178
Tree	{ externs . traverseRoots ( traverse ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ externs . traverseRoots ( traverse ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

179
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( true ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( true ) , null ) ; }
Distance : 9

180
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . traverse ( compiler ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . traverse ( compiler ) ; }
Distance : 6

181
Tree	{ traverse ( compiler , new NodeTraversal ( externs , this , externs ) . traverse ( false ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( externs , this , externs ) . traverse ( false ) ) ; }
Distance : 10

182
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . traverse ( externs ) ; }
Distance : 5

183
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( externs ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( externs ) , null ) ; }
Distance : 8

184
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( true ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( true ) , null ) ; }
Distance : 9

185
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( true ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( true ) , null ) ; }
Distance : 9

186
Tree	{ compiler . traverseRoots ( traverseRoots ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ compiler . traverseRoots ( traverseRoots ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

187
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Distance : 5

188
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( externs , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( externs , root ) , null ) ; }
Distance : 9

189
Tree	{ compiler . traverse ( compiler . traverse ( Locale.US ) , null ) ; }
Code	{ compiler . traverse ( compiler . traverse ( Locale.US ) , null ) ; }
Distance : 11

190
Tree	{ compiler . traverse ( traverse ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ compiler . traverse ( traverse ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

191
Tree	{ ( new NodeTraversal ( externs , null , false ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( externs , null , false ) ) . traverse ( externs ) ; }
Distance : 7

192
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root ) , null ) ; }
Distance : 9

193
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( false ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( false ) ) ; }
Distance : 9

194
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , null ) ; }
Distance : 10

195
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( root ) ; } i
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( root ) ; } i
Distance : 8

196
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( root ) ; } p
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( root ) ; } p
Distance : 8

197
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverseRoots ( false ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverseRoots ( false ) ) ; }
Distance : 9

198
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( root ) ; } options
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( root ) ; } options
Distance : 8

199
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( root ) ; } value
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( root ) ; } value
Distance : 8

========================================================================


========================================================================
Example Number: 29
Parent Code is: 
Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
-------------------------------------------------------------------------------
Child code is: 
Node catchBody = blockUnchecked ( catchNode ) . copyInformationFrom ( catchNode ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=catchBody}) (204{val==}) (32 (32 (802{val=block}) (214{val=(}) (800{val=catchNode}) (215{val=)})) (235{val=.}) (802{val=copyInformationFrom}) (214{val=(}) (800{val=catchNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=catchBody}) (204{val==}) (32 (32 (802{val=blockUnchecked}) (214{val=(}) (800{val=catchNode}) (215{val=)})) (235{val=.}) (802{val=copyInformationFrom}) (214{val=(}) (800{val=catchNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/27/parent/src_com_google_javascript_rhino_IR.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Node catchBody = catchBody . block ( catchNode , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchNode , catchBody ) ;
Distance : 7

1
Tree	Node catchBody = catchBody . block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = catchBody . block () . copyInformationFrom ( catchNode ) ;
Distance : 4

2
Tree	Node catchBody = NodeTraversal . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = NodeTraversal . copyInformationFrom ( catchBody ) ;
Distance : 5

3
Tree	Node catchBody = block ( catchNode , catchNode ) ;
Code	Node catchBody = block ( catchNode , catchNode ) ;
Distance : 5

4
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom () ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom () ;
Distance : 4

5
Tree	Node catchBody = block ( catchBody , false ) ;
Code	Node catchBody = block ( catchBody , false ) ;
Distance : 7

6
Tree	Node catchBody = catchBody . block ( catchNode ) ;
Code	Node catchBody = catchBody . block ( catchNode ) ;
Distance : 5

7
Tree	Node catchBody = block ( catchNode , this . catchNode ) ;
Code	Node catchBody = block ( catchNode , this . catchNode ) ;
Distance : 5

8
Tree	Node catchBody = block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) ;
Distance : 6

9
Tree	Node catchBody = this . catchBody . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom ( catchBody ) ;
Distance : 5

10
Tree	Node catchBody = block . block ( catchBody ) ;
Code	Node catchBody = block . block ( catchBody ) ;
Distance : 6

11
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom () ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom () ;
Distance : 4

12
Tree	Node catchBody = copyInformationFrom ( catchBody ) ;
Code	Node catchBody = copyInformationFrom ( catchBody ) ;
Distance : 6

13
Tree	Node catchBody = block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) ;
Distance : 7

14
Tree	Node catchBody = block ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody ) ;
Distance : 7

15
Tree	Node catchBody = block () . block ( catchNode ) ;
Code	Node catchBody = block () . block ( catchNode ) ;
Distance : 5

16
Tree	Node catchBody = block ( catchBody , false ) ;
Code	Node catchBody = block ( catchBody , false ) ;
Distance : 7

17
Tree	Node catchBody = block ( catchNode , catchNode ) ;
Code	Node catchBody = block ( catchNode , catchNode ) ;
Distance : 5

18
Tree	Node catchBody = copyInformationFrom ( catchBody , this . catchBody ) ;
Code	Node catchBody = copyInformationFrom ( catchBody , this . catchBody ) ;
Distance : 7

19
Tree	Node catchBody = catchBody ( catchBody ) ;
Code	Node catchBody = catchBody ( catchBody ) ;
Distance : 7

20
Tree	Node catchBody = catchBody . block ( catchNode ) ;
Code	Node catchBody = catchBody . block ( catchNode ) ;
Distance : 5

21
Tree	Node catchBody = block . block ( catchNode ) ;
Code	Node catchBody = block . block ( catchNode ) ;
Distance : 5

22
Tree	Node catchBody = this . catchBody . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom ( catchBody ) ;
Distance : 5

23
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom () ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom () ;
Distance : 4

24
Tree	Node catchBody = block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) ;
Distance : 6

25
Tree	Node catchBody = block ( catchBody , catchBody , false ) ;
Code	Node catchBody = block ( catchBody , catchBody , false ) ;
Distance : 7

26
Tree	Node catchBody = block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block () . copyInformationFrom ( catchBody ) ;
Distance : 5

27
Tree	Node catchBody = catchBody . block () ;
Code	Node catchBody = catchBody . block () ;
Distance : 8

28
Tree	Node catchBody = block ( catchBody , Nullability.IMPLICIT ) ;
Code	Node catchBody = block ( catchBody , Nullability.IMPLICIT ) ;
Distance : 7

29
Tree	Node catchBody = block ( catchBody , TransformType.INVERSE ) ;
Code	Node catchBody = block ( catchBody , TransformType.INVERSE ) ;
Distance : 7

30
Tree	Node catchBody = block ( catchBody , RotationConvention.FRAME_TRANSFORM ) ;
Code	Node catchBody = block ( catchBody , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 7

31
Tree	Node catchBody = block ( catchBody , that.groupPaint ) ;
Code	Node catchBody = block ( catchBody , that.groupPaint ) ;
Distance : 7

32
Tree	Node catchBody = block ( catchNode , false ) ;
Code	Node catchBody = block ( catchNode , false ) ;
Distance : 6

33
Tree	Node catchBody = block ( catchBody , LocalizedFormats.INTERNAL_ERROR ) ;
Code	Node catchBody = block ( catchBody , LocalizedFormats.INTERNAL_ERROR ) ;
Distance : 7

34
Tree	Node catchBody = block ( catchBody , DateTimeZone.UTC ) ;
Code	Node catchBody = block ( catchBody , DateTimeZone.UTC ) ;
Distance : 7

35
Tree	Node catchBody = block . block ( catchBody , catchBody ) ;
Code	Node catchBody = block . block ( catchBody , catchBody ) ;
Distance : 8

36
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Distance : 2

37
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 2

38
Tree	Node catchBody = block ( catchNode , this . catchNode ) ;
Code	Node catchBody = block ( catchNode , this . catchNode ) ;
Distance : 5

39
Tree	Node catchBody = block ( catchBody , catchNode , false ) ;
Code	Node catchBody = block ( catchBody , catchNode , false ) ;
Distance : 7

40
Tree	Node catchBody = block . block ( catchNode , catchBody ) ;
Code	Node catchBody = block . block ( catchNode , catchBody ) ;
Distance : 7

41
Tree	Node catchBody = this . catchBody . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom ( catchBody ) ;
Distance : 5

42
Tree	Node catchBody = block . block ( catchBody ) ;
Code	Node catchBody = block . block ( catchBody ) ;
Distance : 6

43
Tree	Node catchBody = copyInformationFrom ( catchBody , false ) ;
Code	Node catchBody = copyInformationFrom ( catchBody , false ) ;
Distance : 7

44
Tree	Node catchBody = block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) ;
Distance : 7

45
Tree	Node catchBody = block ( catchBody , FunctionFlavor.ASYNCHRONOUS ) ;
Code	Node catchBody = block ( catchBody , FunctionFlavor.ASYNCHRONOUS ) ;
Distance : 7

46
Tree	Node catchBody = block ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody ) ;
Distance : 7

47
Tree	Node catchBody = new Node () . block ( catchNode ) ;
Code	Node catchBody = new Node () . block ( catchNode ) ;
Distance : 5

48
Tree	Node catchBody = block ( catchBody , that.gradientPaintTransformer ) ;
Code	Node catchBody = block ( catchBody , that.gradientPaintTransformer ) ;
Distance : 7

49
Tree	Node catchBody = block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block () . copyInformationFrom ( catchNode ) ;
Distance : 4

50
Tree	Node catchBody = block ( catchNode , false ) ;
Code	Node catchBody = block ( catchNode , false ) ;
Distance : 6

51
Tree	Node catchBody = block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block () . copyInformationFrom ( catchBody ) ;
Distance : 5

52
Tree	Node catchBody = copyInformationFrom ( catchBody , catchBody ) ;
Code	Node catchBody = copyInformationFrom ( catchBody , catchBody ) ;
Distance : 7

53
Tree	Node catchBody = block ( catchNode , catchNode , false ) ;
Code	Node catchBody = block ( catchNode , catchNode , false ) ;
Distance : 6

54
Tree	Node catchBody = new Node () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = new Node () . copyInformationFrom ( catchNode ) ;
Distance : 4

55
Tree	Node catchBody = block ( copyInformationFrom ( catchNode ) ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchNode ) ) ;
Distance : 5

56
Tree	Node catchBody = catchBody . copyInformationFrom () ;
Code	Node catchBody = catchBody . copyInformationFrom () ;
Distance : 7

57
Tree	Node catchBody = block ( catchBody , c.seriesList ) ;
Code	Node catchBody = block ( catchBody , c.seriesList ) ;
Distance : 7

58
Tree	Node catchBody = block . block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block . block () . copyInformationFrom ( catchNode ) ;
Distance : 4

59
Tree	Node catchBody = block ( catchNode , catchBody , false ) ;
Code	Node catchBody = block ( catchNode , catchBody , false ) ;
Distance : 6

60
Tree	Node catchBody = block . block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block . block () . copyInformationFrom ( catchNode ) ;
Distance : 4

61
Tree	Node catchBody = block . block ( catchBody , catchNode ) ;
Code	Node catchBody = block . block ( catchBody , catchNode ) ;
Distance : 7

62
Tree	Node catchBody = catchBody . block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = catchBody . block () . copyInformationFrom ( catchNode ) ;
Distance : 4

63
Tree	Node catchBody = block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) ;
Distance : 6

64
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 2

65
Tree	Node catchBody = block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) ;
Distance : 6

66
Tree	Node catchBody = block ( catchBody , catchNode ) ;
Code	Node catchBody = block ( catchBody , catchNode ) ;
Distance : 6

67
Tree	Node catchBody = block . copyInformationFrom () ;
Code	Node catchBody = block . copyInformationFrom () ;
Distance : 7

68
Tree	Node catchBody = block . block () ;
Code	Node catchBody = block . block () ;
Distance : 8

69
Tree	Node catchBody = block ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody ) ;
Distance : 7

70
Tree	Node catchBody = catchBody ( catchBody , catchNode ) ;
Code	Node catchBody = catchBody ( catchBody , catchNode ) ;
Distance : 6

71
Tree	Node catchBody = block ( catchBody , true ) ;
Code	Node catchBody = block ( catchBody , true ) ;
Distance : 7

72
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom () ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom () ;
Distance : 4

73
Tree	Node catchBody = catchBody . block () ;
Code	Node catchBody = catchBody . block () ;
Distance : 8

74
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

75
Tree	Node catchBody = block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) ;
Distance : 6

76
Tree	Node catchBody = catchBody . block () . block ( catchNode ) ;
Code	Node catchBody = catchBody . block () . block ( catchNode ) ;
Distance : 5

77
Tree	Node catchBody = catchBody . block ( catchBody , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody , catchBody ) ;
Distance : 8

78
Tree	Node catchBody = this . catchBody . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom ( catchNode ) ;
Distance : 4

79
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Distance : 5

80
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

81
Tree	Node catchBody = catchBody ( catchBody ) ;
Code	Node catchBody = catchBody ( catchBody ) ;
Distance : 7

82
Tree	Node catchBody = block ( catchBody , catchBody , false ) ;
Code	Node catchBody = block ( catchBody , catchBody , false ) ;
Distance : 7

83
Tree	Node catchBody = block ( catchNode , catchBody ) ;
Code	Node catchBody = block ( catchNode , catchBody ) ;
Distance : 6

84
Tree	Node catchBody = block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block () . copyInformationFrom ( catchBody ) ;
Distance : 5

85
Tree	Node catchBody = block ( catchNode , this . catchBody ) ;
Code	Node catchBody = block ( catchNode , this . catchBody ) ;
Distance : 6

86
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Distance : 5

87
Tree	Node catchBody = catchBody . block () ;
Code	Node catchBody = catchBody . block () ;
Distance : 8

88
Tree	Node catchBody = copyInformationFrom ( catchNode ) ;
Code	Node catchBody = copyInformationFrom ( catchNode ) ;
Distance : 5

89
Tree	Node catchBody = block ( catchBody , BaseAbstractUnivariateIntegrator.DEFAULT_ABSOLUTE_ACCURACY ) ;
Code	Node catchBody = block ( catchBody , BaseAbstractUnivariateIntegrator.DEFAULT_ABSOLUTE_ACCURACY ) ;
Distance : 7

90
Tree	Node catchBody = block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) ;
Distance : 7

91
Tree	Node catchBody = block ( catchBody , catchNode , false ) ;
Code	Node catchBody = block ( catchBody , catchNode , false ) ;
Distance : 7

92
Tree	Node catchBody = block ( catchNode , true ) ;
Code	Node catchBody = block ( catchNode , true ) ;
Distance : 6

93
Tree	Node catchBody = block ( catchNode ( catchNode ) ) ;
Code	Node catchBody = block ( catchNode ( catchNode ) ) ;
Distance : 5

94
Tree	Node catchBody = block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block () . copyInformationFrom ( catchNode ) ;
Distance : 4

95
Tree	Node catchBody = catchBody ( catchBody , catchBody ) ;
Code	Node catchBody = catchBody ( catchBody , catchBody ) ;
Distance : 7

96
Tree	Node catchBody = GradientPaint . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = GradientPaint . copyInformationFrom ( catchBody ) ;
Distance : 5

97
Tree	Node catchBody = block . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block . block () . copyInformationFrom ( catchBody ) ;
Distance : 5

98
Tree	Node catchBody = block . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block . copyInformationFrom ( catchBody ) ;
Distance : 5

99
Tree	Node catchBody = catchBody . block ( catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody ) ;
Distance : 6

100
Tree	Node catchBody = block ( catchBody , this . catchBody ) ;
Code	Node catchBody = block ( catchBody , this . catchBody ) ;
Distance : 7

101
Tree	Node catchBody = block ( catchBody , this . catchNode ) ;
Code	Node catchBody = block ( catchBody , this . catchNode ) ;
Distance : 6

102
Tree	Node catchBody = block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block () . copyInformationFrom ( catchBody ) ;
Distance : 5

103
Tree	Node catchBody = block . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block . block () . copyInformationFrom ( catchBody ) ;
Distance : 5

104
Tree	Node catchBody = block ( copyInformationFrom ( catchBody ) ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchBody ) ) ;
Distance : 6

105
Tree	Node catchBody = block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) ;
Distance : 7

106
Tree	Node catchBody = catchBody . block ( catchBody , catchNode ) ;
Code	Node catchBody = catchBody . block ( catchBody , catchNode ) ;
Distance : 7

107
Tree	Node catchBody = block ( catchBody , catchNode ) ;
Code	Node catchBody = block ( catchBody , catchNode ) ;
Distance : 6

108
Tree	Node catchBody = catchBody ( catchBody , catchNode ) ;
Code	Node catchBody = catchBody ( catchBody , catchNode ) ;
Distance : 6

109
Tree	Node catchBody = catchBody . block ( catchNode ( catchNode ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchNode ( catchNode ) , catchBody ) ;
Distance : 8

110
Tree	Node catchBody = new Node () . block ( catchBody ) ;
Code	Node catchBody = new Node () . block ( catchBody ) ;
Distance : 6

111
Tree	Node catchBody = block ( copyInformationFrom ( catchBody ) ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchBody ) ) ;
Distance : 6

112
Tree	Node catchBody = block ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody ) ;
Distance : 7

113
Tree	Node catchBody = catchBody ( catchNode , catchBody ) ;
Code	Node catchBody = catchBody ( catchNode , catchBody ) ;
Distance : 6

114
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

115
Tree	Node catchBody = block ( catchBody , this . catchBody ) ;
Code	Node catchBody = block ( catchBody , this . catchBody ) ;
Distance : 7

116
Tree	Node catchBody = block ( catchNode , catchBody ) ;
Code	Node catchBody = block ( catchNode , catchBody ) ;
Distance : 6

117
Tree	Node catchBody = block ( catchBody , catchNode ) ;
Code	Node catchBody = block ( catchBody , catchNode ) ;
Distance : 6

118
Tree	Node catchBody = block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) ;
Distance : 7

119
Tree	Node catchBody = catchBody . block ( copyInformationFrom ( catchNode ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( copyInformationFrom ( catchNode ) , catchBody ) ;
Distance : 8

120
Tree	Node catchBody = block ( catchNode ( catchBody ) ) ;
Code	Node catchBody = block ( catchNode ( catchBody ) ) ;
Distance : 6

121
Tree	Node catchBody = catchBody . block ( catchBody , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody , catchBody ) ;
Distance : 8

122
Tree	Node catchBody = new Node () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = new Node () . copyInformationFrom ( catchBody ) ;
Distance : 5

123
Tree	Node catchBody = block ( catchBody , false ) ;
Code	Node catchBody = block ( catchBody , false ) ;
Distance : 7

124
Tree	Node catchBody = block ( copyInformationFrom ( catchNode ) ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchNode ) ) ;
Distance : 5

125
Tree	Node catchBody = new Node () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = new Node () . copyInformationFrom ( catchBody ) ;
Distance : 5

126
Tree	Node catchBody = block ( catchNode ( catchBody ) ) ;
Code	Node catchBody = block ( catchNode ( catchBody ) ) ;
Distance : 6

127
Tree	Node catchBody = catchBody . block () . block ( catchBody ) ;
Code	Node catchBody = catchBody . block () . block ( catchBody ) ;
Distance : 6

128
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Distance : 5

129
Tree	Node catchBody = block . block () ;
Code	Node catchBody = block . block () ;
Distance : 8

130
Tree	Node catchBody = catchBody . block ( catchNode , catchNode ) ;
Code	Node catchBody = catchBody . block ( catchNode , catchNode ) ;
Distance : 7

131
Tree	Node catchBody = block ( catchBody , catchBody , false ) ;
Code	Node catchBody = block ( catchBody , catchBody , false ) ;
Distance : 7

132
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Distance : 5

133
Tree	Node catchBody = this . catchBody . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom ( catchBody ) ;
Distance : 5

134
Tree	Node catchBody = new Node () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = new Node () . copyInformationFrom ( catchNode ) ;
Distance : 4

135
Tree	Node catchBody = catchBody . block ( catchNode ( catchBody ) , catchNode ) ;
Code	Node catchBody = catchBody . block ( catchNode ( catchBody ) , catchNode ) ;
Distance : 7

136
Tree	Node catchBody = block . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block . copyInformationFrom ( catchBody ) ;
Distance : 5

137
Tree	Node catchBody = block ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody ) ;
Distance : 7

138
Tree	Node catchBody = block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block () . copyInformationFrom ( catchNode ) ;
Distance : 4

139
Tree	Node catchBody = block ( catchNode , catchBody , false ) ;
Code	Node catchBody = block ( catchNode , catchBody , false ) ;
Distance : 6

140
Tree	Node catchBody = block . block () ;
Code	Node catchBody = block . block () ;
Distance : 8

141
Tree	Node catchBody = block . block ( catchNode , catchNode ) ;
Code	Node catchBody = block . block ( catchNode , catchNode ) ;
Distance : 7

142
Tree	Node catchBody = catchBody . copyInformationFrom () ;
Code	Node catchBody = catchBody . copyInformationFrom () ;
Distance : 7

143
Tree	Node catchBody = catchBody . block ( copyInformationFrom ( catchBody ) , catchNode ) ;
Code	Node catchBody = catchBody . block ( copyInformationFrom ( catchBody ) , catchNode ) ;
Distance : 8

144
Tree	Node catchBody = block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block () . copyInformationFrom ( catchNode ) ;
Distance : 4

145
Tree	Node catchBody = catchBody . block ( catchNode ( catchBody ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchNode ( catchBody ) , catchBody ) ;
Distance : 8

146
Tree	Node catchBody = EigenDecompositionImpl . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = EigenDecompositionImpl . copyInformationFrom ( catchBody ) ;
Distance : 5

147
Tree	Node catchBody = catchBody . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody . block () . copyInformationFrom ( catchBody ) ;
Distance : 5

148
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
Distance : 1

149
Tree	Node catchBody = catchBody ( catchBody , catchBody ) ;
Code	Node catchBody = catchBody ( catchBody , catchBody ) ;
Distance : 7

150
Tree	Node catchBody = catchBody . block () ;
Code	Node catchBody = catchBody . block () ;
Distance : 8

151
Tree	Node catchBody = new Node () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = new Node () . copyInformationFrom ( catchNode ) ;
Distance : 4

152
Tree	Node catchBody = block ( catchBody , this . catchBody ) ;
Code	Node catchBody = block ( catchBody , this . catchBody ) ;
Distance : 7

153
Tree	Node catchBody = this . catchBody . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom ( catchBody ) ;
Distance : 5

154
Tree	Node catchBody = block ( catchNode , false ) ;
Code	Node catchBody = block ( catchNode , false ) ;
Distance : 6

155
Tree	Node catchBody = block ( catchBody , catchBody , true ) ;
Code	Node catchBody = block ( catchBody , catchBody , true ) ;
Distance : 7

156
Tree	Node catchBody = block ( catchNode ( catchNode ) ) ;
Code	Node catchBody = block ( catchNode ( catchNode ) ) ;
Distance : 5

157
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

158
Tree	Node catchBody = this . catchBody . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom ( catchNode ) ;
Distance : 4

159
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Distance : 2

160
Tree	Node catchBody = new Node () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = new Node () . copyInformationFrom ( catchNode ) ;
Distance : 4

161
Tree	Node catchBody = catchBody ( catchNode ) ;
Code	Node catchBody = catchBody ( catchNode ) ;
Distance : 6

162
Tree	Node catchBody = TypeInferenceMode.DISABLED . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = TypeInferenceMode.DISABLED . copyInformationFrom ( catchBody ) ;
Distance : 5

163
Tree	Node catchBody = block ( catchBody , true ) ;
Code	Node catchBody = block ( catchBody , true ) ;
Distance : 7

164
Tree	Node catchBody = this . catchBody . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom ( catchBody ) ;
Distance : 5

165
Tree	Node catchBody = catchBody . block ( catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody ) ;
Distance : 6

166
Tree	Node catchBody = copyInformationFrom ( catchBody , catchBody , false ) ;
Code	Node catchBody = copyInformationFrom ( catchBody , catchBody , false ) ;
Distance : 7

167
Tree	Node catchBody = block ( catchNode , this . catchBody ) ;
Code	Node catchBody = block ( catchNode , this . catchBody ) ;
Distance : 6

168
Tree	Node catchBody = copyInformationFrom ( catchBody ) ;
Code	Node catchBody = copyInformationFrom ( catchBody ) ;
Distance : 6

169
Tree	Node catchBody = catchBody ( catchNode , catchNode ) ;
Code	Node catchBody = catchBody ( catchNode , catchNode ) ;
Distance : 5

170
Tree	Node catchBody = catchBody . block ( catchNode ( catchNode ) , catchNode ) ;
Code	Node catchBody = catchBody . block ( catchNode ( catchNode ) , catchNode ) ;
Distance : 7

171
Tree	Node catchBody = catchBody . block ( copyInformationFrom ( catchBody ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( copyInformationFrom ( catchBody ) , catchBody ) ;
Distance : 9

172
Tree	Node catchBody = block ( block ( catchNode ) ) ;
Code	Node catchBody = block ( block ( catchNode ) ) ;
Distance : 6

173
Tree	Node catchBody = catchBody . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody . block () . copyInformationFrom ( catchBody ) ;
Distance : 5

174
Tree	Node catchBody = this . catchBody . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom ( catchNode ) ;
Distance : 4

175
Tree	Node catchBody = catchBody . block ( block ( catchBody ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( block ( catchBody ) , catchBody ) ;
Distance : 9

176
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
Distance : 1

177
Tree	Node catchBody = block . block ( catchNode ) ;
Code	Node catchBody = block . block ( catchNode ) ;
Distance : 5

178
Tree	Node catchBody = catchBody . block ( catchBody , catchNode ) ;
Code	Node catchBody = catchBody . block ( catchBody , catchNode ) ;
Distance : 7

179
Tree	Node catchBody = catchBody . block ( copyInformationFrom ( catchNode ) , catchNode ) ;
Code	Node catchBody = catchBody . block ( copyInformationFrom ( catchNode ) , catchNode ) ;
Distance : 8

180
Tree	Node catchBody = LanguageMode.ECMASCRIPT5 . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = LanguageMode.ECMASCRIPT5 . copyInformationFrom ( catchBody ) ;
Distance : 5

181
Tree	Node catchBody = catchBody . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody . copyInformationFrom ( catchBody ) ;
Distance : 5

182
Tree	Node catchBody = catchBody ( catchNode ) ;
Code	Node catchBody = catchBody ( catchNode ) ;
Distance : 6

183
Tree	Node catchBody = TypeInferenceMode.DISABLED . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = TypeInferenceMode.DISABLED . copyInformationFrom ( catchBody ) ;
Distance : 5

184
Tree	Node catchBody = GradientPaint . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = GradientPaint . copyInformationFrom ( catchBody ) ;
Distance : 5

185
Tree	Node catchBody = new Node () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = new Node () . copyInformationFrom ( catchBody ) ;
Distance : 5

186
Tree	Node catchBody = block . block ( catchNode ( catchBody ) , catchBody ) ;
Code	Node catchBody = block . block ( catchNode ( catchBody ) , catchBody ) ;
Distance : 8

187
Tree	Node catchBody = block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) ;
Distance : 7

188
Tree	Node catchBody = block ( catchBody , this . catchNode ) ;
Code	Node catchBody = block ( catchBody , this . catchNode ) ;
Distance : 6

189
Tree	Node catchBody = block ( block ( catchBody ) ) ;
Code	Node catchBody = block ( block ( catchBody ) ) ;
Distance : 7

190
Tree	Node catchBody = block () . block ( catchBody ) ;
Code	Node catchBody = block () . block ( catchBody ) ;
Distance : 6

191
Tree	Node catchBody = new Node () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = new Node () . copyInformationFrom ( catchBody ) ;
Distance : 5

192
Tree	Node catchBody = block ( catchNode , catchBody ) ;
Code	Node catchBody = block ( catchNode , catchBody ) ;
Distance : 6

193
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Distance : 5

194
Tree	Node catchBody = catchBody . block ( catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody ) ;
Distance : 6

195
Tree	Node catchBody = this . catchBody . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom ( catchNode ) ;
Distance : 4

196
Tree	Node catchBody = block ( catchBody ) . block () ;
Code	Node catchBody = block ( catchBody ) . block () ;
Distance : 6

197
Tree	Node catchBody = catchBody ( catchBody ) ; Math
Code	Node catchBody = catchBody ( catchBody ) ; Math
Distance : 8

198
Tree	Node catchBody = UnivariateRealSolver . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = UnivariateRealSolver . copyInformationFrom ( catchBody ) ;
Distance : 5

199
Tree	Node catchBody = catchBody ( catchBody ) ; wanted
Code	Node catchBody = catchBody ( catchBody ) ; wanted
Distance : 8

========================================================================


========================================================================
Example Number: 30
Parent Code is: 
{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
-------------------------------------------------------------------------------
Child code is: 
{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.ON_EX , finallyNode ) ; } }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (70 (303{val=for}) (214{val=(}) (44 (43 (801{val=Node})) (800{val=finallyNode})) (226{val=:}) (32 (40{val=cfa.finallyMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=parent}) (215{val=)})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=cfa}) (235{val=.}) (802{val=createEdge}) (214{val=(}) (800{val=fromNode}) (234{val=,}) (40{val=Branch.UNCOND}) (234{val=,}) (800{val=finallyNode}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (70 (303{val=for}) (214{val=(}) (44 (43 (801{val=Node})) (800{val=finallyNode})) (226{val=:}) (32 (40{val=cfa.finallyMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=parent}) (215{val=)})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=cfa}) (235{val=.}) (802{val=createEdge}) (214{val=(}) (800{val=fromNode}) (234{val=,}) (40{val=Branch.ON_EX}) (234{val=,}) (800{val=finallyNode}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/14/parent/src_com_google_javascript_jscomp_ControlFlowAnalysis.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Distance : 7

1
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 7

2
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 5

3
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Distance : 8

4
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Distance : 9

5
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Distance : 8

6
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 6

7
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( true ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( true ) ; } }
Distance : 9

8
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( Branch.UNCOND , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( Branch.UNCOND , STRING_CONSTANT ) ; } }
Distance : 5

9
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 5

10
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Distance : 10

11
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 6

12
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Distance : 9

13
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { parent . createEdge ( false ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { parent . createEdge ( false ) ; } }
Distance : 9

14
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { parent . createEdge ( false ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { parent . createEdge ( false ) ; } }
Distance : 10

15
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 5

16
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( parent , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( parent , null ) ; } }
Distance : 9

17
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 4

18
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( Branch.UNCOND , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( Branch.UNCOND , STRING_CONSTANT ) ; } }
Distance : 6

19
Tree	{ for ( Node finallyNode : fromNode . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

20
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

21
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( parent , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( parent , null ) ; } }
Distance : 10

22
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

23
Tree	{ for ( Node fromNode : fromNode . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 10

24
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 6

25
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 12

26
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 9

27
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

28
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

29
Tree	{ for ( Node finallyNode : fromNode . get () ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

30
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

31
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

32
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 10

33
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Distance : 8

34
Tree	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 10

35
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

36
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

37
Tree	{ for ( Node finallyNode : fromNode . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

38
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Distance : 9

39
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 8

40
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

41
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

42
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 13

43
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 13

44
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , finallyNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , finallyNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

45
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Distance : 7

46
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 13

47
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 12

48
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( false ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( false ) ; } }
Distance : 6

49
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( false ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( false ) ; } }
Distance : 8

50
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 12

51
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Distance : 8

52
Tree	{ for ( Node finallyNode : fromNode . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

53
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , finallyNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , finallyNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 12

54
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( false ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( false ) ; } }
Distance : 7

55
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Distance : 7

56
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 12

57
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Distance : 6

58
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Distance : 9

59
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( false ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( false ) ; } }
Distance : 9

60
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 8

61
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 6

62
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( false ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( false ) ; } }
Distance : 6

63
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

64
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 7

65
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

66
Tree	{ for ( Node finallyNode : fromNode . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

67
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 6

68
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( false ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( false ) ; } }
Distance : 5

69
Tree	{ for ( Node fromNode : fromNode . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 10

70
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 5

71
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 10

72
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 8

73
Tree	{ for ( Node fromNode : parent . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node fromNode : parent . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Distance : 8

74
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

75
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Distance : 7

76
Tree	{ for ( Node fromNode : parent . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : parent . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 10

77
Tree	{ for ( Node fromNode : fromNode . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 10

78
Tree	{ for ( Node fromNode : parent . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : parent . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 7

79
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 6

80
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

81
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Distance : 10

82
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 6

83
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

84
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 8

85
Tree	{ for ( Node finallyNode : parent . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : parent . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

86
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( true ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( true ) ; } }
Distance : 8

87
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 10

88
Tree	{ for ( Node parent : fromNode . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Code	{ for ( Node parent : fromNode . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Distance : 8

89
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { get () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { get () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Distance : 7

90
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Distance : 5

91
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 7

92
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 3

93
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 4

94
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { this . fromNode . createEdge ( fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { this . fromNode . createEdge ( fromNode , finallyNode ) ; } }
Distance : 6

95
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Distance : 5

96
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 8

97
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( Branch.UNCOND , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( Branch.UNCOND , STRING_CONSTANT ) ; } }
Distance : 6

98
Tree	{ for ( Node fromNode : parent . get ( parent ) ) { fromNode . createEdge ( Branch.UNCOND , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : parent . get ( parent ) ) { fromNode . createEdge ( Branch.UNCOND , STRING_CONSTANT ) ; } }
Distance : 7

99
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { parent . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { parent . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Distance : 8

100
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { parent . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { parent . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Distance : 9

101
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , finallyNode ) ; } }
Distance : 9

102
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Distance : 7

103
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { get () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { get () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Distance : 7

104
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { cfa . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { cfa . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Distance : 8

105
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . cfa . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . cfa . createEdge ( fromNode , fromNode ) ; } }
Distance : 8

106
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Distance : 8

107
Tree	{ for ( Node fromNode : parent . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : parent . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 8

108
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 7

109
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Distance : 7

110
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , finallyNode ) ; } }
Distance : 8

111
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { get () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { get () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Distance : 8

112
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 8

113
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Distance : 6

114
Tree	{ for ( Node finallyNode : parent . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : parent . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

115
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Distance : 9

116
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Distance : 6

117
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND ) ; } }
Distance : 5

118
Tree	{ for ( Node fromNode : parent . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : parent . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Distance : 8

119
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Distance : 5

120
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Distance : 5

121
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge () . createEdge ( Node , Branch.UNCOND ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge () . createEdge ( Node , Branch.UNCOND ) ; } }
Distance : 10

122
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Distance : 7

123
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND ) ; } }
Distance : 3

124
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . get ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . get ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Distance : 8

125
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge () . createEdge ( Node , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge () . createEdge ( Node , Branch.UNCOND ) ; } }
Distance : 9

126
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { get () . createEdge ( Node , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { get () . createEdge ( Node , Branch.UNCOND ) ; } }
Distance : 10

127
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge () . get ( Node , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge () . get ( Node , Branch.UNCOND ) ; } }
Distance : 11

128
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 5

129
Tree	{ for ( Node fromNode : parent . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : parent . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 6

130
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

131
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

132
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 4

133
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . get ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . get ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Distance : 9

134
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { get () . createEdge ( Node , Branch.UNCOND ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { get () . createEdge ( Node , Branch.UNCOND ) ; } }
Distance : 10

135
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge () . get ( Node , Branch.UNCOND ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge () . get ( Node , Branch.UNCOND ) ; } }
Distance : 11

136
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge () . createEdge ( Node , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge () . createEdge ( Node , Branch.UNCOND ) ; } }
Distance : 10

137
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 9

138
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { get () . get ( Node , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { get () . get ( Node , Branch.UNCOND ) ; } }
Distance : 10

139
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 10

140
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( parent , null ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( parent , null ) ; } }
Distance : 10

141
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( parent , null ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( parent , null ) ; } }
Distance : 11

142
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

143
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

144
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

145
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

146
Tree	{ for ( final Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 10

147
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 13

148
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

149
Tree	{ for ( final Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 10

150
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

151
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

152
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 7

153
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 9

154
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . cfa . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . cfa . createEdge ( fromNode , fromNode ) ; } }
Distance : 8

155
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

156
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 8

157
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

158
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , finallyNode ) ; } }
Distance : 8

159
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

160
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Distance : 9

161
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 7

162
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

163
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

164
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Distance : 10

165
Tree	{ for ( Node finallyNode : fromNode . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 9

166
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 12

167
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 9

168
Tree	{ for ( Node fromNode : fromNode . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

169
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 8

170
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

171
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

172
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

173
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Distance : 10

174
Tree	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

175
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

176
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 7

177
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Distance : 11

178
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 10

179
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , finallyNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

180
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

181
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 7

182
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 10

183
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Distance : 5

184
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Distance : 6

185
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 9

186
Tree	{ for ( Node fromNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Distance : 6

187
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

188
Tree	{ for ( Node finallyNode : parent . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : parent . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

189
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

190
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 7

191
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { this . cfa . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { this . cfa . createEdge ( fromNode , fromNode ) ; } }
Distance : 9

192
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { get () . createEdge ( Node , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { get () . createEdge ( Node , Branch.UNCOND ) ; } }
Distance : 9

193
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 6

194
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge () . get ( Node , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge () . get ( Node , Branch.UNCOND ) ; } }
Distance : 10

195
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

196
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

197
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 6

198
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 4

199
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

========================================================================


========================================================================
Example Number: 31
Parent Code is: 
{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
-------------------------------------------------------------------------------
Child code is: 
{ if ( recurse ) { return anyResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (800{val=recurse}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=allResultsMatch}) (214{val=(}) (800{val=n}) (234{val=,}) (800{val=MAY_BE_STRING_PREDICATE}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=mayBeStringHelper}) (214{val=(}) (800{val=n}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (800{val=recurse}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyResultsMatch}) (214{val=(}) (800{val=n}) (234{val=,}) (800{val=MAY_BE_STRING_PREDICATE}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=mayBeStringHelper}) (214{val=(}) (800{val=n}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/10/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ if ( recurse . allResultsMatch ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else >= }
Code	{ if ( recurse . allResultsMatch ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else >= }
Distance : 11

1
Tree	{ if ( recurse . { ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else for }
Code	{ if ( recurse . { ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else for }
Distance : 10

2
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 8

3
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 5

4
Tree	{ if ( recurse . { ( ( ( n ) ) ) { return allResultsMatch ( n ) ; } else for }
Code	{ if ( recurse . { ( ( ( n ) ) ) { return allResultsMatch ( n ) ; } else for }
Distance : 11

5
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Distance : 9

6
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 5

7
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 7

8
Tree	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

9
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

10
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 8

11
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 7

12
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

13
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 6

14
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , IncrementalCheckMode.OFF ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , IncrementalCheckMode.OFF ) ; } }
Distance : 9

15
Tree	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 8

16
Tree	{ if ( recurse ) { return n . allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 6

17
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , CheckMissingReturn.MISSING_RETURN_STATEMENT ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , CheckMissingReturn.MISSING_RETURN_STATEMENT ) ; } }
Distance : 9

18
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 8

19
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , that.obj ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , that.obj ) ; } }
Distance : 9

20
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Distance : 9

21
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , that.obj ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , that.obj ) ; } }
Distance : 9

22
Tree	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 4

23
Tree	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

24
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 9

25
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 5

26
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Distance : 9

27
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 13

28
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , CheckMissingReturn.MISSING_RETURN_STATEMENT ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , CheckMissingReturn.MISSING_RETURN_STATEMENT ) ; } }
Distance : 7

29
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 10

30
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 5

31
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , IncrementalCheckMode.OFF ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , IncrementalCheckMode.OFF ) ; } }
Distance : 9

32
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , that.obj ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , that.obj ) ; } }
Distance : 7

33
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , Branch.ON_FALSE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , Branch.ON_FALSE ) ; } }
Distance : 7

34
Tree	{ if ( recurse . allResultsMatch ( n ) ) { return mayBeStringHelper ( n ) ; } else private }
Code	{ if ( recurse . allResultsMatch ( n ) ) { return mayBeStringHelper ( n ) ; } else private }
Distance : 11

35
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 8

36
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

37
Tree	{ if ( recurse . { ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else private }
Code	{ if ( recurse . { ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else private }
Distance : 10

38
Tree	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 4

39
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , Branch.ON_FALSE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , Branch.ON_FALSE ) ; } }
Distance : 9

40
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 7

41
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 4

42
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 8

43
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 5

44
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 7

45
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , copySelf ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , copySelf ) ; } }
Distance : 7

46
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 12

47
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 5

48
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , IncrementalCheckMode.OFF ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , IncrementalCheckMode.OFF ) ; } }
Distance : 7

49
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 6

50
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 9

51
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

52
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 9

53
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 4

54
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 5

55
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 8

56
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 9

57
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 9

58
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 7

59
Tree	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else assert }
Code	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else assert }
Distance : 10

60
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 6

61
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 9

62
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 12

63
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 9

64
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 6

65
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Distance : 7

66
Tree	{ if ( recurse . { ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else private }
Code	{ if ( recurse . { ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else private }
Distance : 10

67
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 10

68
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 8

69
Tree	{ if ( n ) { return this . n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return this . n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 9

70
Tree	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 8

71
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 6

72
Tree	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 3

73
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 5

74
Tree	{ if ( n . allResultsMatch ( ( ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( n . allResultsMatch ( ( ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 13

75
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 4

76
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , Branch.ON_FALSE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , Branch.ON_FALSE ) ; } }
Distance : 9

77
Tree	{ if ( n . { ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Code	{ if ( n . { ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Distance : 11

78
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 5

79
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 7

80
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 12

81
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 5

82
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 5

83
Tree	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else instant }
Code	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else instant }
Distance : 10

84
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 8

85
Tree	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 8

86
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 11

87
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 5

88
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 7

89
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 4

90
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 13

91
Tree	{ if ( recurse . { ( ( ( n ) ) ) { return allResultsMatch ( n ) ; } else synchronized }
Code	{ if ( recurse . { ( ( ( n ) ) ) { return allResultsMatch ( n ) ; } else synchronized }
Distance : 11

92
Tree	{ if ( recurse . { ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else synchronized }
Code	{ if ( recurse . { ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else synchronized }
Distance : 10

93
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 6

94
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 6

95
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 7

96
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 7

97
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Distance : 10

98
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

99
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

100
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 10

101
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 7

102
Tree	{ if ( n ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 9

103
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 12

104
Tree	{ if ( recurse . { ( ( ( n ) ) ) { return allResultsMatch ( n ) ; } else & }
Code	{ if ( recurse . { ( ( ( n ) ) ) { return allResultsMatch ( n ) ; } else & }
Distance : 11

105
Tree	{ if ( recurse . { ( ( ( n ) ) ) { return allResultsMatch ( n ) ; } else FeatureSet.ES3 }
Code	{ if ( recurse . { ( ( ( n ) ) ) { return allResultsMatch ( n ) ; } else FeatureSet.ES3 }
Distance : 11

106
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 5

107
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

108
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 12

109
Tree	{ if ( recurse . { ( ( ( n ) ) ) { return allResultsMatch ( n ) ; } else & }
Code	{ if ( recurse . { ( ( ( n ) ) ) { return allResultsMatch ( n ) ; } else & }
Distance : 11

110
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 5

111
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 7

112
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 8

113
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 8

114
Tree	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

115
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , copySelf ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , copySelf ) ; } }
Distance : 9

116
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 8

117
Tree	{ if ( recurse ) { return n . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

118
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 5

119
Tree	{ if ( recurse ) { return n . allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 5

120
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

121
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 6

122
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 9

123
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 7

124
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 9

125
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 6

126
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 6

127
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 7

128
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 10

129
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 13

130
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

131
Tree	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

132
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 12

133
Tree	{ if ( recurse . allResultsMatch ( n ) ) { return mayBeStringHelper ( n ) ; } else else }
Code	{ if ( recurse . allResultsMatch ( n ) ) { return mayBeStringHelper ( n ) ; } else else }
Distance : 11

134
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 9

135
Tree	{ if ( recurse . allResultsMatch ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Code	{ if ( recurse . allResultsMatch ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Distance : 11

136
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 13

137
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 4

138
Tree	{ if ( recurse . { ( n ) ) { return allResultsMatch ( n ) ; } else synchronized }
Code	{ if ( recurse . { ( n ) ) { return allResultsMatch ( n ) ; } else synchronized }
Distance : 11

139
Tree	{ if ( recurse . { ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Code	{ if ( recurse . { ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Distance : 10

140
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 5

141
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Distance : 7

142
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 5

143
Tree	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else & }
Code	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else & }
Distance : 10

144
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , that.obj ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , that.obj ) ; } }
Distance : 7

145
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 10

146
Tree	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 8

147
Tree	{ if ( n . { ( n ) ) { return mayBeStringHelper ( n ) ; } else else }
Code	{ if ( n . { ( n ) ) { return mayBeStringHelper ( n ) ; } else else }
Distance : 11

148
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , Branch.ON_FALSE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , Branch.ON_FALSE ) ; } }
Distance : 7

149
Tree	{ if ( recurse . { ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else FeatureSet.ES3 }
Code	{ if ( recurse . { ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else FeatureSet.ES3 }
Distance : 10

150
Tree	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else ReadablePartial }
Code	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else ReadablePartial }
Distance : 10

151
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Distance : 7

152
Tree	{ if ( recurse . { ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else assert }
Code	{ if ( recurse . { ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else assert }
Distance : 10

153
Tree	{ if ( recurse . allResultsMatch ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else ReadablePartial }
Code	{ if ( recurse . allResultsMatch ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else ReadablePartial }
Distance : 11

154
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Distance : 9

155
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 4

156
Tree	{ if ( recurse ) { return n . allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 5

157
Tree	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else >= }
Code	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else >= }
Distance : 10

158
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 6

159
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

160
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 7

161
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 10

162
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 7

163
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 11

164
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

165
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 7

166
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } Math
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } Math
Distance : 4

167
Tree	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 3

168
Tree	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 5

169
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 7

170
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 8

171
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } wanted
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } wanted
Distance : 4

172
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Distance : 8

173
Tree	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 5

174
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 7

175
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 10

176
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 10

177
Tree	{ if ( recurse . allResultsMatch ( n ) ) { return mayBeStringHelper ( n ) ; } else TranspilationPasses }
Code	{ if ( recurse . allResultsMatch ( n ) ) { return mayBeStringHelper ( n ) ; } else TranspilationPasses }
Distance : 11

178
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , IncrementalCheckMode.OFF ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , IncrementalCheckMode.OFF ) ; } }
Distance : 7

179
Tree	{ if ( recurse . allResultsMatch ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else >= }
Code	{ if ( recurse . allResultsMatch ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else >= }
Distance : 11

180
Tree	{ if ( recurse . allResultsMatch ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else assert }
Code	{ if ( recurse . allResultsMatch ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else assert }
Distance : 11

181
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 6

182
Tree	{ if ( recurse . { ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else ReadablePartial }
Code	{ if ( recurse . { ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else ReadablePartial }
Distance : 10

183
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 8

184
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 6

185
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 8

186
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } } wanted
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } } wanted
Distance : 7

187
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 4

188
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 4

189
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } } Math
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } } Math
Distance : 7

190
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 7

191
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 10

192
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 5

193
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 5

194
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

195
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 6

196
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 5

197
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Distance : 7

198
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 8

199
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 6

========================================================================


========================================================================
Example Number: 32
Parent Code is: 
String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
-------------------------------------------------------------------------------
Child code is: 
String moduleName = guessCJSModuleName ( script . getSourceFileName () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=moduleName}) (204{val==}) (32 (802{val=guessCJSModuleName}) (214{val=(}) (32 (802{val=normalizeSourceName}) (214{val=(}) (32 (800{val=script}) (235{val=.}) (802{val=getSourceFileName}) (216{val=()})) (215{val=)})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=moduleName}) (204{val==}) (32 (802{val=guessCJSModuleName}) (214{val=(}) (32 (800{val=script}) (235{val=.}) (802{val=getSourceFileName}) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/9/parent/src_com_google_javascript_jscomp_ProcessCommonJSModules.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , super ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , super ) ;
Distance : 5

1
Tree	String script = getSourceFileName ( script , script , moduleName ) ;
Code	String script = getSourceFileName ( script , script , moduleName ) ;
Distance : 6

2
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 10

3
Tree	String script = guessCJSModuleName ( script , script , script ) ;
Code	String script = guessCJSModuleName ( script , script , script ) ;
Distance : 5

4
Tree	String moduleName = guessCJSModuleName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

5
Tree	String moduleName = moduleName . guessCJSModuleName ( script , script , script ) ;
Code	String moduleName = moduleName . guessCJSModuleName ( script , script , script ) ;
Distance : 6

6
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 4

7
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 3

8
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , else ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , else ) ;
Distance : 6

9
Tree	String moduleName = getSourceFileName ( Feature.OBJECT_PATTERN_REST ) ;
Code	String moduleName = getSourceFileName ( Feature.OBJECT_PATTERN_REST ) ;
Distance : 5

10
Tree	String moduleName = getSourceFileName ( AnnotationAppender.ValueFilter.AppendDefaults.INSTANCE , script ) ;
Code	String moduleName = getSourceFileName ( AnnotationAppender.ValueFilter.AppendDefaults.INSTANCE , script ) ;
Distance : 5

11
Tree	String moduleName = getSourceFileName ( script , moduleName , moduleName ) ;
Code	String moduleName = getSourceFileName ( script , moduleName , moduleName ) ;
Distance : 5

12
Tree	String moduleName = getSourceFileName ( minuendYear ) ;
Code	String moduleName = getSourceFileName ( minuendYear ) ;
Distance : 5

13
Tree	String script = getSourceFileName ( moduleName ) ;
Code	String script = getSourceFileName ( moduleName ) ;
Distance : 6

14
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 4

15
Tree	String moduleName = getSourceFileName ( LiteralToken , script ) ;
Code	String moduleName = getSourceFileName ( LiteralToken , script ) ;
Distance : 5

16
Tree	String moduleName = getSourceFileName ( getItemShape , script ) ;
Code	String moduleName = getSourceFileName ( getItemShape , script ) ;
Distance : 5

17
Tree	String script = getSourceFileName ( script ) ;
Code	String script = getSourceFileName ( script ) ;
Distance : 5

18
Tree	String script = getSourceFileName ( script , NUMBER_CONSTANT ) ;
Code	String script = getSourceFileName ( script , NUMBER_CONSTANT ) ;
Distance : 5

19
Tree	String moduleName = guessCJSModuleName ( TokenType.STRING , script ) ;
Code	String moduleName = guessCJSModuleName ( TokenType.STRING , script ) ;
Distance : 4

20
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 3

21
Tree	String script = guessCJSModuleName ( script ) ;
Code	String script = guessCJSModuleName ( script ) ;
Distance : 4

22
Tree	String script = guessCJSModuleName ( script , script , moduleName ) ;
Code	String script = guessCJSModuleName ( script , script , moduleName ) ;
Distance : 5

23
Tree	String moduleName = getSourceFileName ( script , script , moduleName ) ;
Code	String moduleName = getSourceFileName ( script , script , moduleName ) ;
Distance : 5

24
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script , script ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script , script ) ;
Distance : 9

25
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , super ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , super ) ;
Distance : 6

26
Tree	String moduleName = moduleName . guessCJSModuleName ( script , script , moduleName ) ;
Code	String moduleName = moduleName . guessCJSModuleName ( script , script , moduleName ) ;
Distance : 6

27
Tree	String script = guessCJSModuleName ( script , NUMBER_CONSTANT ) ;
Code	String script = guessCJSModuleName ( script , NUMBER_CONSTANT ) ;
Distance : 4

28
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script ) ) ) ;
Distance : 6

29
Tree	String moduleName = moduleName ( moduleName , script ) ;
Code	String moduleName = moduleName ( moduleName , script ) ;
Distance : 5

30
Tree	String moduleName = guessCJSModuleName ( script , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( script , script , moduleName ) ;
Distance : 4

31
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 9

32
Tree	String script = getSourceFileName ( script , moduleName ) ;
Code	String script = getSourceFileName ( script , moduleName ) ;
Distance : 5

33
Tree	String script = moduleName ( script , moduleName ) ;
Code	String script = moduleName ( script , moduleName ) ;
Distance : 5

34
Tree	String moduleName = getSourceFileName ( TokenType.STRING ) ;
Code	String moduleName = getSourceFileName ( TokenType.STRING ) ;
Distance : 5

35
Tree	String script = moduleName ( moduleName , script ) ;
Code	String script = moduleName ( moduleName , script ) ;
Distance : 6

36
Tree	String script = getSourceFileName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String script = getSourceFileName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 7

37
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 12

38
Tree	String moduleName = getSourceFileName ( script , moduleName ) ;
Code	String moduleName = getSourceFileName ( script , moduleName ) ;
Distance : 4

39
Tree	String moduleName = getSourceFileName ( Feature.OBJECT_PATTERN_REST , script ) ;
Code	String moduleName = getSourceFileName ( Feature.OBJECT_PATTERN_REST , script ) ;
Distance : 5

40
Tree	String script = moduleName . getSourceFileName ( script , script , moduleName ) ;
Code	String script = moduleName . getSourceFileName ( script , script , moduleName ) ;
Distance : 8

41
Tree	String moduleName = guessCJSModuleName ( script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( script , moduleName ) ;
Distance : 3

42
Tree	String moduleName = getSourceFileName ( moduleName . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( moduleName . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 7

43
Tree	String script = getSourceFileName ( moduleName , NUMBER_CONSTANT ) ;
Code	String script = getSourceFileName ( moduleName , NUMBER_CONSTANT ) ;
Distance : 6

44
Tree	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

45
Tree	String script = getSourceFileName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 7

46
Tree	String moduleName = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

47
Tree	String moduleName = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

48
Tree	String moduleName = guessCJSModuleName ( s.parent ) ;
Code	String moduleName = guessCJSModuleName ( s.parent ) ;
Distance : 4

49
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , script ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , script ) ;
Distance : 12

50
Tree	String script = getSourceFileName ( script , script , script ) ;
Code	String script = getSourceFileName ( script , script , script ) ;
Distance : 6

51
Tree	String moduleName = getSourceFileName ( addPeriodInto ) ;
Code	String moduleName = getSourceFileName ( addPeriodInto ) ;
Distance : 5

52
Tree	String moduleName = guessCJSModuleName ( script , moduleName , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( script , moduleName , moduleName ) ;
Distance : 4

53
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , script ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , script ) ;
Distance : 10

54
Tree	String script = guessCJSModuleName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

55
Tree	String script = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String script = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

56
Tree	String script = guessCJSModuleName ( moduleName ) ;
Code	String script = guessCJSModuleName ( moduleName ) ;
Distance : 5

57
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script ) ) ) ;
Distance : 7

58
Tree	String moduleName = getSourceFileName ( TokenType.STRING , script ) ;
Code	String moduleName = getSourceFileName ( TokenType.STRING , script ) ;
Distance : 5

59
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 13

60
Tree	String script = moduleName ( moduleName ) ;
Code	String script = moduleName ( moduleName ) ;
Distance : 6

61
Tree	String script = guessCJSModuleName ( moduleName , NUMBER_CONSTANT ) ;
Code	String script = guessCJSModuleName ( moduleName , NUMBER_CONSTANT ) ;
Distance : 5

62
Tree	String moduleName = moduleName . guessCJSModuleName ( script , moduleName , moduleName ) ;
Code	String moduleName = moduleName . guessCJSModuleName ( script , moduleName , moduleName ) ;
Distance : 6

63
Tree	String moduleName = getSourceFileName ( minuendYear , script ) ;
Code	String moduleName = getSourceFileName ( minuendYear , script ) ;
Distance : 5

64
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , script ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , script ) ;
Distance : 13

65
Tree	String script = script ( moduleName ) ;
Code	String script = script ( moduleName ) ;
Distance : 6

66
Tree	String moduleName = getSourceFileName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

67
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 8

68
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 12

69
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , else ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , else ) ;
Distance : 5

70
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 13

71
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 12

72
Tree	String script = moduleName ( script ) ;
Code	String script = moduleName ( script ) ;
Distance : 5

73
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

74
Tree	String moduleName = getSourceFileName ( script ) ; wanted
Code	String moduleName = getSourceFileName ( script ) ; wanted
Distance : 5

75
Tree	String moduleName = moduleName ( script ) ;
Code	String moduleName = moduleName ( script ) ;
Distance : 4

76
Tree	String script = moduleName ( script , script ) ;
Code	String script = moduleName ( script , script ) ;
Distance : 5

77
Tree	String moduleName = moduleName ( script , script ) ;
Code	String moduleName = moduleName ( script , script ) ;
Distance : 4

78
Tree	String moduleName = getSourceFileName ( script , script ) ;
Code	String moduleName = getSourceFileName ( script , script ) ;
Distance : 4

79
Tree	String moduleName = guessCJSModuleName ( script , script ) ;
Code	String moduleName = guessCJSModuleName ( script , script ) ;
Distance : 3

80
Tree	String moduleName = guessCJSModuleName ( script , script , script ) ;
Code	String moduleName = guessCJSModuleName ( script , script , script ) ;
Distance : 4

81
Tree	String moduleName = moduleName ( script , moduleName ) ;
Code	String moduleName = moduleName ( script , moduleName ) ;
Distance : 4

82
Tree	String moduleName = moduleName ( script ) ; wanted
Code	String moduleName = moduleName ( script ) ; wanted
Distance : 5

83
Tree	String moduleName = getSourceFileName ( script ) ;
Code	String moduleName = getSourceFileName ( script ) ;
Distance : 4

84
Tree	String moduleName = getSourceFileName ( script , NUMBER_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( script , NUMBER_CONSTANT ) ;
Distance : 4

85
Tree	String moduleName = guessCJSModuleName ( script ) ;
Code	String moduleName = guessCJSModuleName ( script ) ;
Distance : 3

86
Tree	String moduleName = guessCJSModuleName ( script , NUMBER_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( script , NUMBER_CONSTANT ) ;
Distance : 3

87
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , super ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , super ) ;
Distance : 6

88
Tree	String moduleName = guessCJSModuleName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

89
Tree	String moduleName = getSourceFileName ( s.parent ) ;
Code	String moduleName = getSourceFileName ( s.parent ) ;
Distance : 5

90
Tree	String moduleName = guessCJSModuleName ( s.parent , script ) ;
Code	String moduleName = guessCJSModuleName ( s.parent , script ) ;
Distance : 4

91
Tree	String moduleName = getSourceFileName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 6

92
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , super ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , super ) ;
Distance : 8

93
Tree	String moduleName = getSourceFileName ( s.parent , script ) ;
Code	String moduleName = getSourceFileName ( s.parent , script ) ;
Distance : 5

94
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 7

95
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 4

96
Tree	String moduleName = script ( script ) ;
Code	String moduleName = script ( script ) ;
Distance : 4

97
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script ) ) ) ;
Distance : 7

98
Tree	String script = getSourceFileName ( getSourceFileName ( getSourceFileName ( script ) ) ) ;
Code	String script = getSourceFileName ( getSourceFileName ( getSourceFileName ( script ) ) ) ;
Distance : 8

99
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 9

100
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script , script ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script , script ) ;
Distance : 10

101
Tree	String moduleName = script ( moduleName , script ) ;
Code	String moduleName = script ( moduleName , script ) ;
Distance : 5

102
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 8

103
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script ) ) ) ;
Distance : 7

104
Tree	String moduleName = getSourceFileName ( moduleName , NUMBER_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( moduleName , NUMBER_CONSTANT ) ;
Distance : 5

105
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

106
Tree	String moduleName = guessCJSModuleName ( moduleName ) ;
Code	String moduleName = guessCJSModuleName ( moduleName ) ;
Distance : 4

107
Tree	String moduleName = moduleName ( moduleName ) ;
Code	String moduleName = moduleName ( moduleName ) ;
Distance : 5

108
Tree	String moduleName = script ( moduleName ) ;
Code	String moduleName = script ( moduleName ) ;
Distance : 5

109
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , else ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , else ) ;
Distance : 6

110
Tree	String moduleName = getSourceFileName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

111
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 7

112
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , script ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , script ) ;
Distance : 13

113
Tree	String script = getSourceFileName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String script = getSourceFileName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 7

114
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , CHAR_CONS ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , CHAR_CONS ) ;
Distance : 6

115
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , TokenType.STRING ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , TokenType.STRING ) ;
Distance : 8

116
Tree	String script = guessCJSModuleName ( script , moduleName ) ;
Code	String script = guessCJSModuleName ( script , moduleName ) ;
Distance : 4

117
Tree	String moduleName = guessCJSModuleName ( moduleName , NUMBER_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( moduleName , NUMBER_CONSTANT ) ;
Distance : 4

118
Tree	String moduleName = moduleName . getSourceFileName ( script , script , moduleName ) ;
Code	String moduleName = moduleName . getSourceFileName ( script , script , moduleName ) ;
Distance : 7

119
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , CHAR_CONS ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , CHAR_CONS ) ;
Distance : 5

120
Tree	String script = getSourceFileName ( script , script ) ;
Code	String script = getSourceFileName ( script , script ) ;
Distance : 5

121
Tree	String moduleName = moduleName . getSourceFileName ( script , moduleName , moduleName ) ;
Code	String moduleName = moduleName . getSourceFileName ( script , moduleName , moduleName ) ;
Distance : 7

122
Tree	String script = script ( script ) ;
Code	String script = script ( script ) ;
Distance : 5

123
Tree	String moduleName = getSourceFileName ( script , getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( script , getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Distance : 6

124
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , TokenType.STRING ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , TokenType.STRING ) ;
Distance : 9

125
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , else ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , else ) ;
Distance : 5

126
Tree	String moduleName = script . getSourceFileName ( script , script , moduleName ) ;
Code	String moduleName = script . getSourceFileName ( script , script , moduleName ) ;
Distance : 7

127
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , RotationConvention.FRAME_TRANSFORM ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 9

128
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , source.m1 ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , source.m1 ) ;
Distance : 9

129
Tree	String moduleName = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

130
Tree	String script = getSourceFileName ( normalizeSourceName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String script = getSourceFileName ( normalizeSourceName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 10

131
Tree	String moduleName = getSourceFileName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 6

132
Tree	String moduleName = guessCJSModuleName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 5

133
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , TokenType.STRING ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , TokenType.STRING ) ;
Distance : 9

134
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , skipStringLiteralEscapeSequence ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , skipStringLiteralEscapeSequence ) ;
Distance : 9

135
Tree	String moduleName = guessCJSModuleName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

136
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , else ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , else ) ;
Distance : 7

137
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , script ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , script ) ;
Distance : 12

138
Tree	String moduleName = getSourceFileName ( AnnotationAppender.ValueFilter.AppendDefaults.INSTANCE ) ;
Code	String moduleName = getSourceFileName ( AnnotationAppender.ValueFilter.AppendDefaults.INSTANCE ) ;
Distance : 5

139
Tree	String script = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

140
Tree	String moduleName = guessCJSModuleName ( moduleName , script ) ;
Code	String moduleName = guessCJSModuleName ( moduleName , script ) ;
Distance : 4

141
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , script ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , script ) ;
Distance : 9

142
Tree	String moduleName = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

143
Tree	String script = guessCJSModuleName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String script = guessCJSModuleName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 6

144
Tree	String moduleName = guessCJSModuleName ( script , getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( script , getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Distance : 5

145
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , CHAR_CONS ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , CHAR_CONS ) ;
Distance : 6

146
Tree	String moduleName = script ( script , moduleName ) ;
Code	String moduleName = script ( script , moduleName ) ;
Distance : 4

147
Tree	String script = script ( script , script ) ;
Code	String script = script ( script , script ) ;
Distance : 5

148
Tree	String moduleName = getSourceFileName ( addPeriodInto , script ) ;
Code	String moduleName = getSourceFileName ( addPeriodInto , script ) ;
Distance : 5

149
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script ) ) ) ;
Distance : 6

150
Tree	String moduleName = getSourceFileName ( script , script , script ) ;
Code	String moduleName = getSourceFileName ( script , script , script ) ;
Distance : 5

151
Tree	String moduleName = moduleName . getSourceFileName ( script , script , script ) ;
Code	String moduleName = moduleName . getSourceFileName ( script , script , script ) ;
Distance : 7

152
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

153
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

154
Tree	String moduleName = getSourceFileName ( script ) ; Math
Code	String moduleName = getSourceFileName ( script ) ; Math
Distance : 5

155
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 3

156
Tree	String script = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script ) ) ) ;
Code	String script = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script ) ) ) ;
Distance : 7

157
Tree	String moduleName = getSourceFileName ( script , NUMBER_CONSTANT ) ; Math
Code	String moduleName = getSourceFileName ( script , NUMBER_CONSTANT ) ; Math
Distance : 5

158
Tree	String moduleName = getSourceFileName ( script , NUMBER_CONSTANT ) ; wanted
Code	String moduleName = getSourceFileName ( script , NUMBER_CONSTANT ) ; wanted
Distance : 5

159
Tree	String moduleName = moduleName ( script ) ; Math
Code	String moduleName = moduleName ( script ) ; Math
Distance : 5

160
Tree	String script = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Code	String script = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 11

161
Tree	String moduleName = getSourceFileName ( LiteralToken ) ;
Code	String moduleName = getSourceFileName ( LiteralToken ) ;
Distance : 5

162
Tree	String moduleName = script ( script , script ) ;
Code	String moduleName = script ( script , script ) ;
Distance : 4

163
Tree	String script = moduleName . guessCJSModuleName ( script , script , moduleName ) ;
Code	String script = moduleName . guessCJSModuleName ( script , script , moduleName ) ;
Distance : 7

164
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , else ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , else ) ;
Distance : 8

165
Tree	String script = guessCJSModuleName ( script , script ) ;
Code	String script = guessCJSModuleName ( script , script ) ;
Distance : 4

166
Tree	String moduleName = getSourceFileName ( getItemShape ) ;
Code	String moduleName = getSourceFileName ( getItemShape ) ;
Distance : 5

167
Tree	String moduleName = getSourceFileName ( moduleName , script ) ;
Code	String moduleName = getSourceFileName ( moduleName , script ) ;
Distance : 5

168
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

169
Tree	String moduleName = getSourceFileName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

170
Tree	String moduleName = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

171
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , super ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , super ) ;
Distance : 7

172
Tree	String script = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String script = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 10

173
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script ) ) ) ;
Distance : 6

174
Tree	String moduleName = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

175
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , else ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , else ) ;
Distance : 8

176
Tree	String moduleName = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

177
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , RotationConvention.FRAME_TRANSFORM ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 8

178
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , super ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , super ) ;
Distance : 8

179
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , source.contractionCriterion ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , source.contractionCriterion ) ;
Distance : 9

180
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , source.m1 ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , source.m1 ) ;
Distance : 8

181
Tree	String moduleName = getSourceFileName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 6

182
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , source.nDev ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , source.nDev ) ;
Distance : 9

183
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script ) ) ) ;
Distance : 7

184
Tree	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 4

185
Tree	String script = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String script = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

186
Tree	String moduleName = getSourceFileName ( moduleName ) ;
Code	String moduleName = getSourceFileName ( moduleName ) ;
Distance : 5

187
Tree	String moduleName = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

188
Tree	String moduleName = guessCJSModuleName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 5

189
Tree	String script = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 5

190
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script ) ) ) ;
Distance : 6

191
Tree	String script = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 4

192
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 10

193
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

194
Tree	String script = getSourceFileName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String script = getSourceFileName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 10

195
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 13

196
Tree	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Code	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 10

197
Tree	String script = moduleName . getSourceFileName ( script , script , script ) ;
Code	String script = moduleName . getSourceFileName ( script , script , script ) ;
Distance : 8

198
Tree	String moduleName = guessCJSModuleName ( TokenType.STRING ) ;
Code	String moduleName = guessCJSModuleName ( TokenType.STRING ) ;
Distance : 4

199
Tree	String moduleName = guessCJSModuleName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 5

========================================================================


========================================================================
Example Number: 33
Parent Code is: 
c . canInline ()
-------------------------------------------------------------------------------
Child code is: 
c . canInline ( t . getScope () )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (32 (800{val=c}) (235{val=.}) (802{val=canInline}) (216{val=()})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (32 (800{val=c}) (235{val=.}) (802{val=canInline}) (214{val=(}) (32 (800{val=t}) (235{val=.}) (802{val=getScope}) (216{val=()})) (215{val=)})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/3/parent/src_com_google_javascript_jscomp_FlowSensitiveInlineVariables.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	c . canInline ( break; )
Code	c . canInline ( break; )
Distance : 4

1
Tree	t . getScope ( c , c )
Code	t . getScope ( c , c )
Distance : 6

2
Tree	t . getScope ( STRING_CONSTANT )
Code	t . getScope ( STRING_CONSTANT )
Distance : 6

3
Tree	c . canInline ( getScope () , c . . () )
Code	c . canInline ( getScope () , c . . () )
Distance : 5

4
Tree	c . canInline ( t . getScope () )
Code	c . canInline ( t . getScope () )
Distance : 0

5
Tree	c . canInline () . getScope ( t )
Code	c . canInline () . getScope ( t )
Distance : 4

6
Tree	c . canInline ( t , t )
Code	c . canInline ( t , t )
Distance : 3

7
Tree	getScope () . getScope ( t )
Code	getScope () . getScope ( t )
Distance : 6

8
Tree	t . canInline ( t , c )
Code	t . canInline ( t , c )
Distance : 4

9
Tree	t . getScope ( t )
Code	t . getScope ( t )
Distance : 5

10
Tree	c . canInline ( STRING_CONSTANT ) source
Code	c . canInline ( STRING_CONSTANT ) source
Distance : 5

11
Tree	c . canInline ( STRING_CONSTANT ) toString
Code	c . canInline ( STRING_CONSTANT ) toString
Distance : 5

12
Tree	canInline () . canInline ( c ) wanted
Code	canInline () . canInline ( c ) wanted
Distance : 7

13
Tree	canInline () . canInline ( c ) Math
Code	canInline () . canInline ( c ) Math
Distance : 7

14
Tree	new c () . canInline ( c ) wanted
Code	new c () . canInline ( c ) wanted
Distance : 7

15
Tree	new c () . canInline ( c ) Math
Code	new c () . canInline ( c ) Math
Distance : 7

16
Tree	c . canInline () . canInline () Math
Code	c . canInline () . canInline () Math
Distance : 4

17
Tree	c . canInline ( c ) Math
Code	c . canInline ( c ) Math
Distance : 5

18
Tree	c . canInline ( default: )
Code	c . canInline ( default: )
Distance : 4

19
Tree	new c () . getScope ( t )
Code	new c () . getScope ( t )
Distance : 6

20
Tree	getScope ( t )
Code	getScope ( t )
Distance : 6

21
Tree	canInline ( c ) &&
Code	canInline ( c ) &&
Distance : 7

22
Tree	new InjectTestCase ( c ) . canInline ()
Code	new InjectTestCase ( c ) . canInline ()
Distance : 7

23
Tree	child.parent . canInline ()
Code	child.parent . canInline ()
Distance : 6

24
Tree	c . canInline ( PARAM.escapePlus )
Code	c . canInline ( PARAM.escapePlus )
Distance : 4

25
Tree	( ( c ) c ) . canInline () wanted
Code	( ( c ) c ) . canInline () wanted
Distance : 8

26
Tree	( ( c ) c ) . canInline () Math
Code	( ( c ) c ) . canInline () Math
Distance : 8

27
Tree	this . c . canInline () T
Code	this . c . canInline () T
Distance : 6

28
Tree	this . c . canInline () &&
Code	this . c . canInline () &&
Distance : 6

29
Tree	this . c . canInline () p
Code	this . c . canInline () p
Distance : 6

30
Tree	t . getScope () . getScope ()
Code	t . getScope () . getScope ()
Distance : 5

31
Tree	this . c . canInline () options
Code	this . c . canInline () options
Distance : 6

32
Tree	new ThreeEighthesStepInterpolator ( c ) . canInline ()
Code	new ThreeEighthesStepInterpolator ( c ) . canInline ()
Distance : 7

33
Tree	c . canInline ( flags.chromePass )
Code	c . canInline ( flags.chromePass )
Distance : 4

34
Tree	new PomComparator ( c ) . canInline ( c )
Code	new PomComparator ( c ) . canInline ( c )
Distance : 8

35
Tree	new InitialGuess ( c ) . canInline ( c )
Code	new InitialGuess ( c ) . canInline ( c )
Distance : 8

36
Tree	( ( c ) t ) . canInline ()
Code	( ( c ) t ) . canInline ()
Distance : 7

37
Tree	t . canInline ( c )
Code	t . canInline ( c )
Distance : 5

38
Tree	t . getScope ( c )
Code	t . getScope ( c )
Distance : 6

39
Tree	canInline ( c ) p
Code	canInline ( c ) p
Distance : 7

40
Tree	c . canInline ( Nullability.IMPLICIT )
Code	c . canInline ( Nullability.IMPLICIT )
Distance : 4

41
Tree	( ( t ) t ) . getScope ()
Code	( ( t ) t ) . getScope ()
Distance : 6

42
Tree	c . canInline ()
Code	c . canInline ()
Distance : 5

43
Tree	c . canInline ( c )
Code	c . canInline ( c )
Distance : 4

44
Tree	t . canInline () . canInline ( c )
Code	t . canInline () . canInline ( c )
Distance : 6

45
Tree	t . canInline ( null )
Code	t . canInline ( null )
Distance : 5

46
Tree	canInline () Preconditions
Code	canInline () Preconditions
Distance : 7

47
Tree	c . canInline () . getScope ()
Code	c . canInline () . getScope ()
Distance : 3

48
Tree	new ObjectStreamClass ( c ) . canInline ( c )
Code	new ObjectStreamClass ( c ) . canInline ( c )
Distance : 8

49
Tree	canInline () . getScope ( c )
Code	canInline () . getScope ( c )
Distance : 6

50
Tree	c . canInline ( c , c )
Code	c . canInline ( c , c )
Distance : 4

51
Tree	c . getScope ( c )
Code	c . getScope ( c )
Distance : 5

52
Tree	c . canInline ( t ) . getScope ()
Code	c . canInline ( t ) . getScope ()
Distance : 2

53
Tree	c . getScope ( t )
Code	c . getScope ( t )
Distance : 4

54
Tree	c . canInline ( t . canInline () )
Code	c . canInline ( t . canInline () )
Distance : 1

55
Tree	getScope () . getScope ( c )
Code	getScope () . getScope ( c )
Distance : 7

56
Tree	c . getScope () . getScope ()
Code	c . getScope () . getScope ()
Distance : 4

57
Tree	new c () . canInline ( t )
Code	new c () . canInline ( t )
Distance : 5

58
Tree	canInline ()
Code	canInline ()
Distance : 7

59
Tree	canInline () -
Code	canInline () -
Distance : 7

60
Tree	c . canInline ( t ) . canInline ()
Code	c . canInline ( t ) . canInline ()
Distance : 3

61
Tree	new UnicodeUnescaper ( c ) . canInline ( c )
Code	new UnicodeUnescaper ( c ) . canInline ( c )
Distance : 8

62
Tree	c . getScope () . canInline ( c )
Code	c . getScope () . canInline ( c )
Distance : 6

63
Tree	c . getScope ( c ) . getScope ()
Code	c . getScope ( c ) . getScope ()
Distance : 4

64
Tree	new t () . canInline ( t )
Code	new t () . canInline ( t )
Distance : 6

65
Tree	c . canInline ( null )
Code	c . canInline ( null )
Distance : 4

66
Tree	c . canInline ( c , t )
Code	c . canInline ( c , t )
Distance : 4

67
Tree	new ObjectStreamClass ( c ) . canInline ()
Code	new ObjectStreamClass ( c ) . canInline ()
Distance : 7

68
Tree	new UnicodeUnescaper ( c ) . canInline ()
Code	new UnicodeUnescaper ( c ) . canInline ()
Distance : 7

69
Tree	c . canInline ( getScope () , c . getScope () )
Code	c . canInline ( getScope () , c . getScope () )
Distance : 4

70
Tree	ArgumentMatcher . canInline ()
Code	ArgumentMatcher . canInline ()
Distance : 6

71
Tree	this . c . canInline ()
Code	this . c . canInline ()
Distance : 6

72
Tree	( ( c ) c ) . canInline ()
Code	( ( c ) c ) . canInline ()
Distance : 8

73
Tree	t . getScope ()
Code	t . getScope ()
Distance : 5

74
Tree	t . canInline () . canInline ()
Code	t . canInline () . canInline ()
Distance : 5

75
Tree	t . canInline ( STRING_CONSTANT )
Code	t . canInline ( STRING_CONSTANT )
Distance : 5

76
Tree	canInline ( c )
Code	canInline ( c )
Distance : 6

77
Tree	this . t . getScope ()
Code	this . t . getScope ()
Distance : 4

78
Tree	c . canInline ( continue; )
Code	c . canInline ( continue; )
Distance : 4

79
Tree	t . canInline ( c . canInline () )
Code	t . canInline ( c . canInline () )
Distance : 3

80
Tree	c . canInline ( STRING_CONSTANT )
Code	c . canInline ( STRING_CONSTANT )
Distance : 4

81
Tree	c . canInline ( Feature.MODULES )
Code	c . canInline ( Feature.MODULES )
Distance : 4

82
Tree	new c () . canInline ( c )
Code	new c () . canInline ( c )
Distance : 6

83
Tree	c . getScope ()
Code	c . getScope ()
Distance : 5

84
Tree	new PomComparator ( c ) . canInline ()
Code	new PomComparator ( c ) . canInline ()
Distance : 7

85
Tree	new GeneralPath ( c ) . canInline ()
Code	new GeneralPath ( c ) . canInline ()
Distance : 7

86
Tree	c . canInline ( c ) . getScope ()
Code	c . canInline ( c ) . getScope ()
Distance : 3

87
Tree	c . canInline () . canInline ()
Code	c . canInline () . canInline ()
Distance : 4

88
Tree	getScope () . canInline ( c )
Code	getScope () . canInline ( c )
Distance : 6

89
Tree	c . canInline ( canInline () , c . getScope () )
Code	c . canInline ( canInline () , c . getScope () )
Distance : 4

90
Tree	c . getScope () . canInline ()
Code	c . getScope () . canInline ()
Distance : 5

91
Tree	new InitialGuess ( c ) . canInline ()
Code	new InitialGuess ( c ) . canInline ()
Distance : 7

92
Tree	c . getScope ( c . canInline () )
Code	c . getScope ( c . canInline () )
Distance : 3

93
Tree	c . getScope () . canInline ( t )
Code	c . getScope () . canInline ( t )
Distance : 6

94
Tree	Calendar.JANUARY . canInline ()
Code	Calendar.JANUARY . canInline ()
Distance : 6

95
Tree	canInline ( t )
Code	canInline ( t )
Distance : 5

96
Tree	getScope ()
Code	getScope ()
Distance : 7

97
Tree	c . canInline ( c . canInline () )
Code	c . canInline ( c . canInline () )
Distance : 2

98
Tree	canInline () ParamChecks
Code	canInline () ParamChecks
Distance : 7

99
Tree	canInline () . canInline ( c )
Code	canInline () . canInline ( c )
Distance : 6

100
Tree	c . getScope ( c ) . canInline ()
Code	c . getScope ( c ) . canInline ()
Distance : 5

101
Tree	c . getScope ( t . canInline () )
Code	c . getScope ( t . canInline () )
Distance : 2

102
Tree	new ExportTestFunctionsNodes ( c ) . canInline ()
Code	new ExportTestFunctionsNodes ( c ) . canInline ()
Distance : 7

103
Tree	c . canInline ( c ) . canInline ()
Code	c . canInline ( c ) . canInline ()
Distance : 4

104
Tree	c . canInline () . canInline ( c )
Code	c . canInline () . canInline ( c )
Distance : 5

105
Tree	canInline ( c ) toString
Code	canInline ( c ) toString
Distance : 7

106
Tree	t . canInline ()
Code	t . canInline ()
Distance : 6

107
Tree	c . getScope ( return; )
Code	c . getScope ( return; )
Distance : 5

108
Tree	( ( t ) c ) . getScope ()
Code	( ( t ) c ) . getScope ()
Distance : 7

109
Tree	canInline () f
Code	canInline () f
Distance : 7

110
Tree	new t () . getScope ( c )
Code	new t () . getScope ( c )
Distance : 7

111
Tree	c . getScope ( t ) . canInline ()
Code	c . getScope ( t ) . canInline ()
Distance : 4

112
Tree	t . canInline ( c ) . canInline ()
Code	t . canInline ( c ) . canInline ()
Distance : 5

113
Tree	new t () . canInline ( c )
Code	new t () . canInline ( c )
Distance : 7

114
Tree	canInline () . canInline ( t )
Code	canInline () . canInline ( t )
Distance : 5

115
Tree	LanguageMode.ECMASCRIPT5 . canInline ()
Code	LanguageMode.ECMASCRIPT5 . canInline ()
Distance : 6

116
Tree	c . canInline ( canInline () , t . . () )
Code	c . canInline ( canInline () , t . . () )
Distance : 4

117
Tree	new getEnums ( c ) . canInline ()
Code	new getEnums ( c ) . canInline ()
Distance : 7

118
Tree	canInline () {}
Code	canInline () {}
Distance : 7

119
Tree	new t () . getScope ( t )
Code	new t () . getScope ( t )
Distance : 7

120
Tree	new UnfinishedStubbingStatement ( c ) . canInline ()
Code	new UnfinishedStubbingStatement ( c ) . canInline ()
Distance : 7

121
Tree	this . t . canInline ()
Code	this . t . canInline ()
Distance : 5

122
Tree	c . getScope ( super(); )
Code	c . getScope ( super(); )
Distance : 5

123
Tree	canInline ( c ) source
Code	canInline ( c ) source
Distance : 7

124
Tree	c . getScope () . getScope ( c )
Code	c . getScope () . getScope ( c )
Distance : 5

125
Tree	c . getScope ( getScope () , c . canInline () )
Code	c . getScope ( getScope () , c . canInline () )
Distance : 6

126
Tree	c . getScope ( t , c )
Code	c . getScope ( t , c )
Distance : 4

127
Tree	( ( c ) t ) . getScope ()
Code	( ( c ) t ) . getScope ()
Distance : 6

128
Tree	new ExportTestFunctionsNodes ( c ) . canInline ( c )
Code	new ExportTestFunctionsNodes ( c ) . canInline ( c )
Distance : 8

129
Tree	c . canInline ( canInline () , c . canInline () )
Code	c . canInline ( canInline () , c . canInline () )
Distance : 5

130
Tree	canInline () MathRuntimeException
Code	canInline () MathRuntimeException
Distance : 7

131
Tree	c . getScope ( canInline () , c . getScope () )
Code	c . getScope ( canInline () , c . getScope () )
Distance : 5

132
Tree	c . canInline ( super(); )
Code	c . canInline ( super(); )
Distance : 4

133
Tree	t . canInline ( canInline () , c . canInline () )
Code	t . canInline ( canInline () , c . canInline () )
Distance : 6

134
Tree	c . getScope ( c . getScope () )
Code	c . getScope ( c . getScope () )
Distance : 2

135
Tree	c . canInline ( Token.GETELEM )
Code	c . canInline ( Token.GETELEM )
Distance : 4

136
Tree	t . canInline ( c , c )
Code	t . canInline ( c , c )
Distance : 5

137
Tree	Double.POSITIVE_INFINITY . canInline ()
Code	Double.POSITIVE_INFINITY . canInline ()
Distance : 6

138
Tree	canInline () . getScope ( t )
Code	canInline () . getScope ( t )
Distance : 6

139
Tree	c . getScope ( c , t )
Code	c . getScope ( c , t )
Distance : 5

140
Tree	( ( t ) c ) . canInline ()
Code	( ( t ) c ) . canInline ()
Distance : 8

141
Tree	c . canInline ( currentScript.exportsToInline )
Code	c . canInline ( currentScript.exportsToInline )
Distance : 4

142
Tree	c . canInline ( c . getScope () )
Code	c . canInline ( c . getScope () )
Distance : 1

143
Tree	c . getScope ( canInline () , c . canInline () )
Code	c . getScope ( canInline () , c . canInline () )
Distance : 6

144
Tree	c . canInline ( return; )
Code	c . canInline ( return; )
Distance : 4

145
Tree	this . c . getScope ()
Code	this . c . getScope ()
Distance : 5

146
Tree	c . canInline ( functionContext.function )
Code	c . canInline ( functionContext.function )
Distance : 4

147
Tree	NodeUtil.isNameDeclaration . canInline ()
Code	NodeUtil.isNameDeclaration . canInline ()
Distance : 6

148
Tree	TypeInferenceMode.NEITHER . canInline ()
Code	TypeInferenceMode.NEITHER . canInline ()
Distance : 6

149
Tree	var.name . canInline ()
Code	var.name . canInline ()
Distance : 6

150
Tree	new getEnums ( c ) . canInline ( c )
Code	new getEnums ( c ) . canInline ( c )
Distance : 8

151
Tree	c . canInline ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS )
Code	c . canInline ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS )
Distance : 4

152
Tree	new UnfinishedStubbingStatement ( c ) . canInline ( c )
Code	new UnfinishedStubbingStatement ( c ) . canInline ( c )
Distance : 8

153
Tree	c . canInline () T
Code	c . canInline () T
Distance : 5

154
Tree	c . canInline ( t , c )
Code	c . canInline ( t , c )
Distance : 3

155
Tree	new InjectTestCase ( c ) . canInline ( c )
Code	new InjectTestCase ( c ) . canInline ( c )
Distance : 8

156
Tree	c . canInline ( RandomSource.MT_64 )
Code	c . canInline ( RandomSource.MT_64 )
Distance : 4

157
Tree	( ( c ) c ) . getScope ()
Code	( ( c ) c ) . getScope ()
Distance : 7

158
Tree	Color.BLUE . canInline ()
Code	Color.BLUE . canInline ()
Distance : 6

159
Tree	Entry . canInline ()
Code	Entry . canInline ()
Distance : 6

160
Tree	new ThreeEighthesStepInterpolator ( c ) . canInline ( c )
Code	new ThreeEighthesStepInterpolator ( c ) . canInline ( c )
Distance : 8

161
Tree	new GeneralPath ( c ) . canInline ( c )
Code	new GeneralPath ( c ) . canInline ( c )
Distance : 8

162
Tree	getScope () . canInline ( t )
Code	getScope () . canInline ( t )
Distance : 5

163
Tree	t . canInline ( t )
Code	t . canInline ( t )
Distance : 4

164
Tree	c . getScope ( getScope () , c . getScope () )
Code	c . getScope ( getScope () , c . getScope () )
Distance : 5

165
Tree	c . getScope ( c , c )
Code	c . getScope ( c , c )
Distance : 5

166
Tree	getScope ( c )
Code	getScope ( c )
Distance : 7

167
Tree	c . getScope ( null )
Code	c . getScope ( null )
Distance : 5

168
Tree	t . canInline () . getScope ()
Code	t . canInline () . getScope ()
Distance : 4

169
Tree	this . c . canInline () toString
Code	this . c . canInline () toString
Distance : 6

170
Tree	t . canInline ( c ) . getScope ()
Code	t . canInline ( c ) . getScope ()
Distance : 4

171
Tree	t . getScope () . canInline ()
Code	t . getScope () . canInline ()
Distance : 6

172
Tree	c . getScope ( STRING_CONSTANT )
Code	c . getScope ( STRING_CONSTANT )
Distance : 5

173
Tree	c . canInline () &&
Code	c . canInline () &&
Distance : 5

174
Tree	t . getScope ( c . canInline () )
Code	t . getScope ( c . canInline () )
Distance : 4

175
Tree	c . canInline () p
Code	c . canInline () p
Distance : 5

176
Tree	t . getScope ( c ) . canInline ()
Code	t . getScope ( c ) . canInline ()
Distance : 6

177
Tree	( ( t ) t ) . canInline ()
Code	( ( t ) t ) . canInline ()
Distance : 7

178
Tree	new c () . getScope ( c )
Code	new c () . getScope ( c )
Distance : 7

179
Tree	c . canInline () options
Code	c . canInline () options
Distance : 5

180
Tree	t . canInline () . getScope ( c )
Code	t . canInline () . getScope ( c )
Distance : 5

181
Tree	c . canInline () source
Code	c . canInline () source
Distance : 5

182
Tree	c . canInline () toString
Code	c . canInline () toString
Distance : 5

183
Tree	c . canInline ( STRING_CONSTANT ) p
Code	c . canInline ( STRING_CONSTANT ) p
Distance : 5

184
Tree	c . canInline ( TypeValidation.DISABLED )
Code	c . canInline ( TypeValidation.DISABLED )
Distance : 4

185
Tree	c . canInline ( STRING_CONSTANT ) &&
Code	c . canInline ( STRING_CONSTANT ) &&
Distance : 5

186
Tree	c . canInline ( STRING_CONSTANT ) T
Code	c . canInline ( STRING_CONSTANT ) T
Distance : 5

187
Tree	c . canInline ( t )
Code	c . canInline ( t )
Distance : 3

188
Tree	canInline () Class
Code	canInline () Class
Distance : 7

189
Tree	c . canInline () . getScope ( c )
Code	c . canInline () . getScope ( c )
Distance : 4

190
Tree	c . canInline ( c ) wanted
Code	c . canInline ( c ) wanted
Distance : 5

191
Tree	canInline ( c ) T
Code	canInline ( c ) T
Distance : 7

192
Tree	canInline ( c ) options
Code	canInline ( c ) options
Distance : 7

193
Tree	c . getScope () . getScope ( t )
Code	c . getScope () . getScope ( t )
Distance : 5

194
Tree	c . canInline () . canInline ( t )
Code	c . canInline () . canInline ( t )
Distance : 5

195
Tree	t . canInline ( c . getScope () )
Code	t . canInline ( c . getScope () )
Distance : 2

196
Tree	c . canInline ( STRING_CONSTANT ) options
Code	c . canInline ( STRING_CONSTANT ) options
Distance : 5

197
Tree	this . c . canInline () source
Code	this . c . canInline () source
Distance : 6

198
Tree	canInline () Test
Code	canInline () Test
Distance : 7

199
Tree	c . canInline () . canInline () wanted
Code	c . canInline () . canInline () wanted
Distance : 4

========================================================================


========================================================================
Example Number: 34
Parent Code is: 
int len = thisBuf.length - strLen ;
-------------------------------------------------------------------------------
Child code is: 
int len = size - strLen + NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=len}) (204{val==}) (27 (40{val=thisBuf.length}) (201{val=-}) (800{val=strLen}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=len}) (204{val==}) (27 (27 (800{val=size}) (201{val=-}) (800{val=strLen})) (200{val=+}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/61/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	int len = size + strLen + strLen + len ;
Code	int len = size + strLen + strLen + len ;
Distance : 4

1
Tree	int len = size + getProperNumerator () + strLen ;
Code	int len = size + getProperNumerator () + strLen ;
Distance : 4

2
Tree	int len = len + getLeftElement () + strLen ;
Code	int len = len + getLeftElement () + strLen ;
Distance : 5

3
Tree	float len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	float len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

4
Tree	int len = len + strLen + strLen + len ;
Code	int len = len + strLen + strLen + len ;
Distance : 5

5
Tree	int len = len + getProperNumerator () + strLen ;
Code	int len = len + getProperNumerator () + strLen ;
Distance : 5

6
Tree	int strLen = STRING_CONSTANT + strLen ;
Code	int strLen = STRING_CONSTANT + strLen ;
Distance : 5

7
Tree	float len = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	float len = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 6

8
Tree	int len = size - len ;
Code	int len = size - len ;
Distance : 3

9
Tree	byte len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	byte len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

10
Tree	long len = size / strLen ;
Code	long len = size / strLen ;
Distance : 4

11
Tree	double len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Code	double len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Distance : 6

12
Tree	int len = size / len ;
Code	int len = size / len ;
Distance : 4

13
Tree	float len = NUMBER_CONSTANT - strLen ;
Code	float len = NUMBER_CONSTANT - strLen ;
Distance : 4

14
Tree	long len = len / strLen ;
Code	long len = len / strLen ;
Distance : 5

15
Tree	long len = size - strLen ;
Code	long len = size - strLen ;
Distance : 3

16
Tree	short len = thisBuf.length + NUMBER_CONSTANT ;
Code	short len = thisBuf.length + NUMBER_CONSTANT ;
Distance : 4

17
Tree	int len = size / strLen - len ;
Code	int len = size / strLen - len ;
Distance : 3

18
Tree	int len = len / len ;
Code	int len = len / len ;
Distance : 5

19
Tree	int len = strLen - strLen ;
Code	int len = strLen - strLen ;
Distance : 3

20
Tree	int strLen = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int strLen = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

21
Tree	long len = thisBuf.length + NUMBER_CONSTANT ;
Code	long len = thisBuf.length + NUMBER_CONSTANT ;
Distance : 4

22
Tree	int len = size % NUMBER_CONSTANT ;
Code	int len = size % NUMBER_CONSTANT ;
Distance : 3

23
Tree	int len = size + strLen + len + strLen ;
Code	int len = size + strLen + len + strLen ;
Distance : 4

24
Tree	double len = size + STRING_CONSTANT + thisBuf.length ;
Code	double len = size + STRING_CONSTANT + thisBuf.length ;
Distance : 4

25
Tree	int len = thisBuf.length + NUMBER_CONSTANT ;
Code	int len = thisBuf.length + NUMBER_CONSTANT ;
Distance : 3

26
Tree	char len = size - strLen ;
Code	char len = size - strLen ;
Distance : 3

27
Tree	int len = size + getLeftElement () + strLen ;
Code	int len = size + getLeftElement () + strLen ;
Distance : 4

28
Tree	int len = size + len + strLen + strLen ;
Code	int len = size + len + strLen + strLen ;
Distance : 4

29
Tree	char len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	char len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

30
Tree	int len = len / strLen - len ;
Code	int len = len / strLen - len ;
Distance : 4

31
Tree	float len = NUMBER_CONSTANT * thisBuf.length ;
Code	float len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 6

32
Tree	double len = len + STRING_CONSTANT + thisBuf.length ;
Code	double len = len + STRING_CONSTANT + thisBuf.length ;
Distance : 5

33
Tree	int len = len + strLen + len + strLen ;
Code	int len = len + strLen + len + strLen ;
Distance : 5

34
Tree	int strLen = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	int strLen = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 6

35
Tree	boolean len = size & NUMBER_CONSTANT ;
Code	boolean len = size & NUMBER_CONSTANT ;
Distance : 4

36
Tree	double strLen = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double strLen = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 14

37
Tree	double len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Code	double len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Distance : 7

38
Tree	char len = size % NUMBER_CONSTANT ;
Code	char len = size % NUMBER_CONSTANT ;
Distance : 4

39
Tree	double len = size / strLen - strLen ;
Code	double len = size / strLen - strLen ;
Distance : 4

40
Tree	boolean len = size % NUMBER_CONSTANT ;
Code	boolean len = size % NUMBER_CONSTANT ;
Distance : 4

41
Tree	double strLen = thisBuf.length + NUMBER_CONSTANT ;
Code	double strLen = thisBuf.length + NUMBER_CONSTANT ;
Distance : 5

42
Tree	boolean len = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	boolean len = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 6

43
Tree	double len = size % NUMBER_CONSTANT ;
Code	double len = size % NUMBER_CONSTANT ;
Distance : 4

44
Tree	byte len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	byte len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

45
Tree	int len = len + len + strLen + strLen ;
Code	int len = len + len + strLen + strLen ;
Distance : 5

46
Tree	int len = NUMBER_CONSTANT * thisBuf.length ;
Code	int len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 5

47
Tree	int len = NUMBER_CONSTANT * strLen * len * thisBuf.length ;
Code	int len = NUMBER_CONSTANT * strLen * len * thisBuf.length ;
Distance : 6

48
Tree	int len = size + STRING_CONSTANT + thisBuf.length ;
Code	int len = size + STRING_CONSTANT + thisBuf.length ;
Distance : 3

49
Tree	int len = getRemoveUnusedCode () - strLen ;
Code	int len = getRemoveUnusedCode () - strLen ;
Distance : 4

50
Tree	char len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Code	char len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Distance : 7

51
Tree	long len = size + STRING_CONSTANT + thisBuf.length ;
Code	long len = size + STRING_CONSTANT + thisBuf.length ;
Distance : 4

52
Tree	int len = FACT.length > > > NUMBER_CONSTANT ;
Code	int len = FACT.length > > > NUMBER_CONSTANT ;
Distance : 4

53
Tree	boolean len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Code	boolean len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Distance : 7

54
Tree	int len = size & NUMBER_CONSTANT ;
Code	int len = size & NUMBER_CONSTANT ;
Distance : 3

55
Tree	int len = size ;
Code	int len = size ;
Distance : 4

56
Tree	double len = NUMBER_CONSTANT - strLen ;
Code	double len = NUMBER_CONSTANT - strLen ;
Distance : 4

57
Tree	double len = len - strLen ;
Code	double len = len - strLen ;
Distance : 4

58
Tree	double len = NUMBER_CONSTANT - len ;
Code	double len = NUMBER_CONSTANT - len ;
Distance : 5

59
Tree	int len = strLen + STRING_CONSTANT + thisBuf.length ;
Code	int len = strLen + STRING_CONSTANT + thisBuf.length ;
Distance : 4

60
Tree	int len = len % NUMBER_CONSTANT ;
Code	int len = len % NUMBER_CONSTANT ;
Distance : 4

61
Tree	double len = size - strLen ;
Code	double len = size - strLen ;
Distance : 3

62
Tree	int strLen = NUMBER_CONSTANT - strLen ;
Code	int strLen = NUMBER_CONSTANT - strLen ;
Distance : 4

63
Tree	long len = len + STRING_CONSTANT + thisBuf.length ;
Code	long len = len + STRING_CONSTANT + thisBuf.length ;
Distance : 5

64
Tree	double len = len / strLen - strLen ;
Code	double len = len / strLen - strLen ;
Distance : 5

65
Tree	char len = len % NUMBER_CONSTANT ;
Code	char len = len % NUMBER_CONSTANT ;
Distance : 5

66
Tree	double strLen = NUMBER_CONSTANT * thisBuf.length ;
Code	double strLen = NUMBER_CONSTANT * thisBuf.length ;
Distance : 7

67
Tree	int len = currentResiduals () - strLen ;
Code	int len = currentResiduals () - strLen ;
Distance : 4

68
Tree	int len = len + STRING_CONSTANT + thisBuf.length ;
Code	int len = len + STRING_CONSTANT + thisBuf.length ;
Distance : 4

69
Tree	byte len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Code	byte len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Distance : 7

70
Tree	int len = NUMBER_CONSTANT - strLen ;
Code	int len = NUMBER_CONSTANT - strLen ;
Distance : 3

71
Tree	int len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

72
Tree	int len = Cartesian3D.POSITIVE_INFINITY > > > NUMBER_CONSTANT ;
Code	int len = Cartesian3D.POSITIVE_INFINITY > > > NUMBER_CONSTANT ;
Distance : 4

73
Tree	int len = greatestCommonDivisor > > > NUMBER_CONSTANT ;
Code	int len = greatestCommonDivisor > > > NUMBER_CONSTANT ;
Distance : 4

74
Tree	double len = STRING_CONSTANT + len ;
Code	double len = STRING_CONSTANT + len ;
Distance : 5

75
Tree	int len = len & NUMBER_CONSTANT ;
Code	int len = len & NUMBER_CONSTANT ;
Distance : 4

76
Tree	char len = size + STRING_CONSTANT + thisBuf.length ;
Code	char len = size + STRING_CONSTANT + thisBuf.length ;
Distance : 4

77
Tree	int len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Code	int len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Distance : 6

78
Tree	short len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	short len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

79
Tree	int len = len + strLen + strLen + strLen ;
Code	int len = len + strLen + strLen + strLen ;
Distance : 5

80
Tree	int len = getProperNumerator () - strLen ;
Code	int len = getProperNumerator () - strLen ;
Distance : 4

81
Tree	long len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Code	long len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Distance : 7

82
Tree	boolean len = NUMBER_CONSTANT * thisBuf.length ;
Code	boolean len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 6

83
Tree	int len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

84
Tree	long len = size & NUMBER_CONSTANT ;
Code	long len = size & NUMBER_CONSTANT ;
Distance : 4

85
Tree	int len = strLen % NUMBER_CONSTANT ;
Code	int len = strLen % NUMBER_CONSTANT ;
Distance : 3

86
Tree	boolean len = size ;
Code	boolean len = size ;
Distance : 5

87
Tree	char len = size / strLen ;
Code	char len = size / strLen ;
Distance : 4

88
Tree	float len = STRING_CONSTANT + strLen ;
Code	float len = STRING_CONSTANT + strLen ;
Distance : 5

89
Tree	char len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	char len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

90
Tree	int strLen = NUMBER_CONSTANT * thisBuf.length ;
Code	int strLen = NUMBER_CONSTANT * thisBuf.length ;
Distance : 6

91
Tree	int strLen = thisBuf.length + NUMBER_CONSTANT ;
Code	int strLen = thisBuf.length + NUMBER_CONSTANT ;
Distance : 4

92
Tree	double len = STRING_CONSTANT + strLen ;
Code	double len = STRING_CONSTANT + strLen ;
Distance : 5

93
Tree	int len = strLen / strLen ;
Code	int len = strLen / strLen ;
Distance : 4

94
Tree	int len = STRING_CONSTANT + strLen ;
Code	int len = STRING_CONSTANT + strLen ;
Distance : 4

95
Tree	double len = NUMBER_CONSTANT * strLen * len * thisBuf.length ;
Code	double len = NUMBER_CONSTANT * strLen * len * thisBuf.length ;
Distance : 7

96
Tree	int len = size + lineSeparator () + strLen ;
Code	int len = size + lineSeparator () + strLen ;
Distance : 4

97
Tree	double len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

98
Tree	int len = strLen & NUMBER_CONSTANT ;
Code	int len = strLen & NUMBER_CONSTANT ;
Distance : 3

99
Tree	long len = len % NUMBER_CONSTANT ;
Code	long len = len % NUMBER_CONSTANT ;
Distance : 5

100
Tree	char len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	char len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

101
Tree	boolean len = size + STRING_CONSTANT + thisBuf.length ;
Code	boolean len = size + STRING_CONSTANT + thisBuf.length ;
Distance : 4

102
Tree	int len = size + getTokenList () + strLen ;
Code	int len = size + getTokenList () + strLen ;
Distance : 4

103
Tree	int strLen = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int strLen = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

104
Tree	char len = len ;
Code	char len = len ;
Distance : 6

105
Tree	long len = len - strLen ;
Code	long len = len - strLen ;
Distance : 4

106
Tree	int len = strLen / strLen - strLen ;
Code	int len = strLen / strLen - strLen ;
Distance : 4

107
Tree	char len = thisBuf.length + NUMBER_CONSTANT ;
Code	char len = thisBuf.length + NUMBER_CONSTANT ;
Distance : 4

108
Tree	int len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

109
Tree	int len = len - len ;
Code	int len = len - len ;
Distance : 4

110
Tree	long len = size / strLen - strLen ;
Code	long len = size / strLen - strLen ;
Distance : 4

111
Tree	int len = size / len - strLen ;
Code	int len = size / len - strLen ;
Distance : 4

112
Tree	short len = NUMBER_CONSTANT * thisBuf.length ;
Code	short len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 6

113
Tree	double len = len + strLen + strLen + strLen ;
Code	double len = len + strLen + strLen + strLen ;
Distance : 6

114
Tree	int len = size + getMillisPerUnit () + strLen ;
Code	int len = size + getMillisPerUnit () + strLen ;
Distance : 4

115
Tree	char len = size & NUMBER_CONSTANT ;
Code	char len = size & NUMBER_CONSTANT ;
Distance : 4

116
Tree	long len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	long len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

117
Tree	double len = size + strLen + strLen + strLen ;
Code	double len = size + strLen + strLen + strLen ;
Distance : 5

118
Tree	int len = size + computeMillis () + strLen ;
Code	int len = size + computeMillis () + strLen ;
Distance : 4

119
Tree	boolean len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	boolean len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

120
Tree	double len = len % NUMBER_CONSTANT ;
Code	double len = len % NUMBER_CONSTANT ;
Distance : 5

121
Tree	byte len = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	byte len = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 6

122
Tree	short len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	short len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

123
Tree	int len = size + endsWith () + strLen ;
Code	int len = size + endsWith () + strLen ;
Distance : 4

124
Tree	int len = len ;
Code	int len = len ;
Distance : 5

125
Tree	long len = len & NUMBER_CONSTANT ;
Code	long len = len & NUMBER_CONSTANT ;
Distance : 5

126
Tree	int len = size - strLen ;
Code	int len = size - strLen ;
Distance : 2

127
Tree	double len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

128
Tree	int len = getProperNumerator > > > NUMBER_CONSTANT ;
Code	int len = getProperNumerator > > > NUMBER_CONSTANT ;
Distance : 4

129
Tree	int len = size / strLen - strLen ;
Code	int len = size / strLen - strLen ;
Distance : 3

130
Tree	double len = NUMBER_CONSTANT * thisBuf.length ;
Code	double len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 6

131
Tree	int len = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 5

132
Tree	int len = requirePrinter () - strLen ;
Code	int len = requirePrinter () - strLen ;
Distance : 4

133
Tree	double len = size ;
Code	double len = size ;
Distance : 5

134
Tree	float len = thisBuf.length + NUMBER_CONSTANT ;
Code	float len = thisBuf.length + NUMBER_CONSTANT ;
Distance : 4

135
Tree	int len = len / strLen - strLen ;
Code	int len = len / strLen - strLen ;
Distance : 4

136
Tree	double len = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	double len = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 6

137
Tree	double len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

138
Tree	long len = len / strLen - strLen ;
Code	long len = len / strLen - strLen ;
Distance : 5

139
Tree	int strLen = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Code	int strLen = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Distance : 7

140
Tree	boolean len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	boolean len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

141
Tree	double len = len ;
Code	double len = len ;
Distance : 6

142
Tree	int len = NUMBER_CONSTANT - len ;
Code	int len = NUMBER_CONSTANT - len ;
Distance : 4

143
Tree	byte len = NUMBER_CONSTANT * thisBuf.length ;
Code	byte len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 6

144
Tree	boolean len = thisBuf.length + NUMBER_CONSTANT ;
Code	boolean len = thisBuf.length + NUMBER_CONSTANT ;
Distance : 4

145
Tree	long len = NUMBER_CONSTANT - strLen ;
Code	long len = NUMBER_CONSTANT - strLen ;
Distance : 4

146
Tree	int len = len + lineSeparator () + strLen ;
Code	int len = len + lineSeparator () + strLen ;
Distance : 5

147
Tree	char len = len + STRING_CONSTANT + thisBuf.length ;
Code	char len = len + STRING_CONSTANT + thisBuf.length ;
Distance : 5

148
Tree	double len = size / strLen ;
Code	double len = size / strLen ;
Distance : 4

149
Tree	double len = size & NUMBER_CONSTANT ;
Code	double len = size & NUMBER_CONSTANT ;
Distance : 4

150
Tree	char len = len & NUMBER_CONSTANT ;
Code	char len = len & NUMBER_CONSTANT ;
Distance : 5

151
Tree	float len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	float len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

152
Tree	long len = NUMBER_CONSTANT * thisBuf.length ;
Code	long len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 6

153
Tree	double len = len / strLen ;
Code	double len = len / strLen ;
Distance : 5

154
Tree	int len = coefficients.length () - strLen ;
Code	int len = coefficients.length () - strLen ;
Distance : 4

155
Tree	char len = NUMBER_CONSTANT * thisBuf.length ;
Code	char len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 6

156
Tree	long len = size ;
Code	long len = size ;
Distance : 5

157
Tree	int len = len - strLen ;
Code	int len = len - strLen ;
Distance : 3

158
Tree	int len = strLen ;
Code	int len = strLen ;
Distance : 4

159
Tree	int len = STRING_CONSTANT + len ;
Code	int len = STRING_CONSTANT + len ;
Distance : 4

160
Tree	long len = STRING_CONSTANT + strLen ;
Code	long len = STRING_CONSTANT + strLen ;
Distance : 5

161
Tree	int len = size / strLen ;
Code	int len = size / strLen ;
Distance : 3

162
Tree	double len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

163
Tree	char len = size ;
Code	char len = size ;
Distance : 5

164
Tree	long len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	long len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

165
Tree	int len = strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

166
Tree	int len = NUMBER_CONSTANT * len * strLen * thisBuf.length ;
Code	int len = NUMBER_CONSTANT * len * strLen * thisBuf.length ;
Distance : 6

167
Tree	long len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	long len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

168
Tree	int len = requirePrinter > > > NUMBER_CONSTANT ;
Code	int len = requirePrinter > > > NUMBER_CONSTANT ;
Distance : 4

169
Tree	byte len = thisBuf.length + NUMBER_CONSTANT ;
Code	byte len = thisBuf.length + NUMBER_CONSTANT ;
Distance : 4

170
Tree	int len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Distance : 5

171
Tree	double len = len & NUMBER_CONSTANT ;
Code	double len = len & NUMBER_CONSTANT ;
Distance : 5

172
Tree	long len = size % NUMBER_CONSTANT ;
Code	long len = size % NUMBER_CONSTANT ;
Distance : 4

173
Tree	long len = len ;
Code	long len = len ;
Distance : 6

174
Tree	int len = Sigmoid > > > NUMBER_CONSTANT ;
Code	int len = Sigmoid > > > NUMBER_CONSTANT ;
Distance : 4

175
Tree	int len = Sigmoid () - strLen ;
Code	int len = Sigmoid () - strLen ;
Distance : 4

176
Tree	boolean len = NUMBER_CONSTANT - strLen ;
Code	boolean len = NUMBER_CONSTANT - strLen ;
Distance : 4

177
Tree	long len = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	long len = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 6

178
Tree	int len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 14

179
Tree	char len = STRING_CONSTANT + strLen ;
Code	char len = STRING_CONSTANT + strLen ;
Distance : 5

180
Tree	int len = getMillisPerUnit () - strLen ;
Code	int len = getMillisPerUnit () - strLen ;
Distance : 4

181
Tree	byte len = NUMBER_CONSTANT - strLen ;
Code	byte len = NUMBER_CONSTANT - strLen ;
Distance : 4

182
Tree	boolean len = STRING_CONSTANT + strLen ;
Code	boolean len = STRING_CONSTANT + strLen ;
Distance : 5

183
Tree	char len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	char len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

184
Tree	int len = set.length > > > NUMBER_CONSTANT ;
Code	int len = set.length > > > NUMBER_CONSTANT ;
Distance : 4

185
Tree	int len = Cartesian2D.NEGATIVE_INFINITY > > > NUMBER_CONSTANT ;
Code	int len = Cartesian2D.NEGATIVE_INFINITY > > > NUMBER_CONSTANT ;
Distance : 4

186
Tree	long len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	long len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

187
Tree	int len = coefficients.length > > > NUMBER_CONSTANT ;
Code	int len = coefficients.length > > > NUMBER_CONSTANT ;
Distance : 4

188
Tree	boolean len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	boolean len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

189
Tree	int len = set.length () - strLen ;
Code	int len = set.length () - strLen ;
Distance : 4

190
Tree	int len = greatestCommonDivisor () - strLen ;
Code	int len = greatestCommonDivisor () - strLen ;
Distance : 4

191
Tree	int len = getCauseMethodNameList () - strLen ;
Code	int len = getCauseMethodNameList () - strLen ;
Distance : 4

192
Tree	byte len = STRING_CONSTANT + strLen ;
Code	byte len = STRING_CONSTANT + strLen ;
Distance : 5

193
Tree	char len = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	char len = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 6

194
Tree	int len = len / strLen ;
Code	int len = len / strLen ;
Distance : 4

195
Tree	int len = chars.length > > > NUMBER_CONSTANT ;
Code	int len = chars.length > > > NUMBER_CONSTANT ;
Distance : 4

196
Tree	double len = thisBuf.length + NUMBER_CONSTANT ;
Code	double len = thisBuf.length + NUMBER_CONSTANT ;
Distance : 4

197
Tree	double strLen = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double strLen = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 16

198
Tree	int len = size + strLen + strLen + strLen ;
Code	int len = size + strLen + strLen + strLen ;
Distance : 4

199
Tree	char len = NUMBER_CONSTANT - strLen ;
Code	char len = NUMBER_CONSTANT - strLen ;
Distance : 4

========================================================================


========================================================================
Example Number: 35
Parent Code is: 
i < thisBuf.length
-------------------------------------------------------------------------------
Child code is: 
i < size
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (40{val=thisBuf.length})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (800{val=size})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/60/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	this . i . stubInfo () != thisBuf.length
Code	this . i . stubInfo () != thisBuf.length
Distance : 7

1
Tree	this . getBottomObject () != thisBuf.length
Code	this . getBottomObject () != thisBuf.length
Distance : 6

2
Tree	this . nullPassedToVerify () != thisBuf.length
Code	this . nullPassedToVerify () != thisBuf.length
Distance : 6

3
Tree	this . i . getInf () != thisBuf.length
Code	this . i . getInf () != thisBuf.length
Distance : 7

4
Tree	size < thisBuf.length
Code	size < thisBuf.length
Distance : 2

5
Tree	i != default:
Code	i != default:
Distance : 2

6
Tree	size == size
Code	size == size
Distance : 2

7
Tree	this . i . isBuiltinObject () != thisBuf.length
Code	this . i . isBuiltinObject () != thisBuf.length
Distance : 7

8
Tree	i != return;
Code	i != return;
Distance : 2

9
Tree	i != continue;
Code	i != continue;
Distance : 2

10
Tree	skipStringLiteralEscapeSequence ( i ) != thisBuf.length
Code	skipStringLiteralEscapeSequence ( i ) != thisBuf.length
Distance : 5

11
Tree	isBuiltinObject ( i ) != thisBuf.length
Code	isBuiltinObject ( i ) != thisBuf.length
Distance : 5

12
Tree	this == size
Code	this == size
Distance : 2

13
Tree	getIgnoredMatcher ( i ) != thisBuf.length
Code	getIgnoredMatcher ( i ) != thisBuf.length
Distance : 5

14
Tree	i / size
Code	i / size
Distance : 1

15
Tree	this . size == size
Code	this . size == size
Distance : 4

16
Tree	i . valueOf () != thisBuf.length
Code	i . valueOf () != thisBuf.length
Distance : 5

17
Tree	i == thisBuf.length && i source
Code	i == thisBuf.length && i source
Distance : 5

18
Tree	i == thisBuf.length -
Code	i == thisBuf.length -
Distance : 3

19
Tree	this . resetBuilder () != thisBuf.length
Code	this . resetBuilder () != thisBuf.length
Distance : 6

20
Tree	size != continue;
Code	size != continue;
Distance : 3

21
Tree	i == thisBuf.length < instanceof
Code	i == thisBuf.length < instanceof
Distance : 3

22
Tree	i == thisBuf.length < ?
Code	i == thisBuf.length < ?
Distance : 3

23
Tree	i == thisBuf.length < &=
Code	i == thisBuf.length < &=
Distance : 3

24
Tree	size == thisBuf.length && size
Code	size == thisBuf.length && size
Distance : 4

25
Tree	i == thisBuf.length Preconditions
Code	i == thisBuf.length Preconditions
Distance : 3

26
Tree	i == thisBuf.length MathRuntimeException
Code	i == thisBuf.length MathRuntimeException
Distance : 3

27
Tree	i == thisBuf.length Test
Code	i == thisBuf.length Test
Distance : 3

28
Tree	this . getStringBuffer () != thisBuf.length
Code	this . getStringBuffer () != thisBuf.length
Distance : 6

29
Tree	this . jacobianEvaluations () != thisBuf.length
Code	this . jacobianEvaluations () != thisBuf.length
Distance : 6

30
Tree	i == thisBuf.length {}
Code	i == thisBuf.length {}
Distance : 3

31
Tree	i < thisBuf.length Preconditions
Code	i < thisBuf.length Preconditions
Distance : 2

32
Tree	i == thisBuf.length ParamChecks
Code	i == thisBuf.length ParamChecks
Distance : 3

33
Tree	i == thisBuf.length && i options
Code	i == thisBuf.length && i options
Distance : 5

34
Tree	this . stubInfo () != thisBuf.length
Code	this . stubInfo () != thisBuf.length
Distance : 6

35
Tree	i . stubInfo () thisBuf.length getIgnoredMatcher ( i )
Code	i . stubInfo () thisBuf.length getIgnoredMatcher ( i )
Distance : 8

36
Tree	this . i . doesFunctionReferenceOwnArgumentsObject () != thisBuf.length
Code	this . i . doesFunctionReferenceOwnArgumentsObject () != thisBuf.length
Distance : 7

37
Tree	thisBuf.length thisBuf.length thisBuf.length class
Code	thisBuf.length thisBuf.length thisBuf.length class
Distance : 4

38
Tree	i == thisBuf.length && i &&
Code	i == thisBuf.length && i &&
Distance : 5

39
Tree	i / i toString
Code	i / i toString
Distance : 3

40
Tree	i / i source
Code	i / i source
Distance : 3

41
Tree	i / i options
Code	i / i options
Distance : 3

42
Tree	thisBuf.length < thisBuf.length mock
Code	thisBuf.length < thisBuf.length mock
Distance : 3

43
Tree	i / i p
Code	i / i p
Distance : 3

44
Tree	i / i T
Code	i / i T
Distance : 3

45
Tree	size != null
Code	size != null
Distance : 3

46
Tree	this . i == i options
Code	this . i == i options
Distance : 5

47
Tree	this . i == i p
Code	this . i == i p
Distance : 5

48
Tree	this . i == i &&
Code	this . i == i &&
Distance : 5

49
Tree	i / i &&
Code	i / i &&
Distance : 3

50
Tree	this . i == i T
Code	this . i == i T
Distance : 5

51
Tree	i == i options
Code	i == i options
Distance : 3

52
Tree	i == i toString
Code	i == i toString
Distance : 3

53
Tree	this == i MathRuntimeException
Code	this == i MathRuntimeException
Distance : 4

54
Tree	this . i . getBeta () != thisBuf.length
Code	this . i . getBeta () != thisBuf.length
Distance : 7

55
Tree	thisBuf.length i thisBuf.length MathRuntimeException
Code	thisBuf.length i thisBuf.length MathRuntimeException
Distance : 3

56
Tree	thisBuf.length thisBuf.length thisBuf.length Override
Code	thisBuf.length thisBuf.length thisBuf.length Override
Distance : 4

57
Tree	this == i Test
Code	this == i Test
Distance : 4

58
Tree	thisBuf.length < thisBuf.length f
Code	thisBuf.length < thisBuf.length f
Distance : 3

59
Tree	i == i source
Code	i == i source
Distance : 3

60
Tree	this . unescape () != thisBuf.length
Code	this . unescape () != thisBuf.length
Distance : 6

61
Tree	this == i f
Code	this == i f
Distance : 4

62
Tree	this == i ParamChecks
Code	this == i ParamChecks
Distance : 4

63
Tree	this . i . getVertices () != thisBuf.length
Code	this . i . getVertices () != thisBuf.length
Distance : 7

64
Tree	this == i {}
Code	this == i {}
Distance : 4

65
Tree	this . i . stubbedAt () != thisBuf.length
Code	this . i . stubbedAt () != thisBuf.length
Distance : 7

66
Tree	i < that.id ()
Code	i < that.id ()
Distance : 2

67
Tree	i < newEnd ()
Code	i < newEnd ()
Distance : 2

68
Tree	i < iChronology.MILLIS_PER_DAY ()
Code	i < iChronology.MILLIS_PER_DAY ()
Distance : 2

69
Tree	i == null < >=
Code	i == null < >=
Distance : 3

70
Tree	i < CallSiteType.UNSUPPORTED ()
Code	i < CallSiteType.UNSUPPORTED ()
Distance : 2

71
Tree	i < P ()
Code	i < P ()
Distance : 2

72
Tree	i < canEliminate ()
Code	i < canEliminate ()
Distance : 2

73
Tree	i . stubInfo () i getNormalizedReferenceName ( i )
Code	i . stubInfo () i getNormalizedReferenceName ( i )
Distance : 8

74
Tree	i == size
Code	i == size
Distance : 1

75
Tree	i < thisBuf.length
Code	i < thisBuf.length
Distance : 1

76
Tree	i != super();
Code	i != super();
Distance : 2

77
Tree	i == thisBuf.length
Code	i == thisBuf.length
Distance : 2

78
Tree	i != null thisBuf.length extends
Code	i != null thisBuf.length extends
Distance : 4

79
Tree	i != break;
Code	i != break;
Distance : 2

80
Tree	this . i == size
Code	this . i == size
Distance : 3

81
Tree	size == thisBuf.length
Code	size == thisBuf.length
Distance : 3

82
Tree	this . i . bark () != thisBuf.length
Code	this . i . bark () != thisBuf.length
Distance : 7

83
Tree	this == i -
Code	this == i -
Distance : 4

84
Tree	this . i == i source
Code	this . i == i source
Distance : 5

85
Tree	i != null i *=
Code	i != null i *=
Distance : 4

86
Tree	i == thisBuf.length f
Code	i == thisBuf.length f
Distance : 3

87
Tree	this . isBuiltinObject () != thisBuf.length
Code	this . isBuiltinObject () != thisBuf.length
Distance : 6

88
Tree	this . size == i
Code	this . size == i
Distance : 4

89
Tree	i . valueOf () i getIgnoredMatcher ( i )
Code	i . valueOf () i getIgnoredMatcher ( i )
Distance : 8

90
Tree	i == thisBuf.length && size
Code	i == thisBuf.length && size
Distance : 3

91
Tree	markStubUsed () != thisBuf.length
Code	markStubUsed () != thisBuf.length
Distance : 4

92
Tree	i . valueOf () thisBuf.length getNormalizedReferenceName ( i )
Code	i . valueOf () thisBuf.length getNormalizedReferenceName ( i )
Distance : 8

93
Tree	SECONDS_MILLIS () != thisBuf.length
Code	SECONDS_MILLIS () != thisBuf.length
Distance : 4

94
Tree	i == null thisBuf.length extends
Code	i == null thisBuf.length extends
Distance : 4

95
Tree	toPrinter () != thisBuf.length
Code	toPrinter () != thisBuf.length
Distance : 4

96
Tree	isTypecheckingEnabled () != thisBuf.length
Code	isTypecheckingEnabled () != thisBuf.length
Distance : 4

97
Tree	i == null thisBuf.length [
Code	i == null thisBuf.length [
Distance : 4

98
Tree	includesGlobals () != thisBuf.length
Code	includesGlobals () != thisBuf.length
Distance : 4

99
Tree	isSetterDef () != thisBuf.length
Code	isSetterDef () != thisBuf.length
Distance : 4

100
Tree	i > NUMBER_CONSTANT
Code	i > NUMBER_CONSTANT
Distance : 2

101
Tree	i != null < /
Code	i != null < /
Distance : 3

102
Tree	i == i
Code	i == i
Distance : 2

103
Tree	this == i
Code	this == i
Distance : 3

104
Tree	i != null
Code	i != null
Distance : 2

105
Tree	markStubUsed ( i ) != thisBuf.length
Code	markStubUsed ( i ) != thisBuf.length
Distance : 5

106
Tree	i < getNormalizedReferenceName ()
Code	i < getNormalizedReferenceName ()
Distance : 2

107
Tree	i < getBooleanProp ()
Code	i < getBooleanProp ()
Distance : 2

108
Tree	i == thisBuf.length && i
Code	i == thisBuf.length && i
Distance : 4

109
Tree	getIgnoredMatcher () != thisBuf.length
Code	getIgnoredMatcher () != thisBuf.length
Distance : 4

110
Tree	i / i
Code	i / i
Distance : 2

111
Tree	i < IncrementalCheckMode.OFF ()
Code	i < IncrementalCheckMode.OFF ()
Distance : 2

112
Tree	i . isStruct () != thisBuf.length
Code	i . isStruct () != thisBuf.length
Distance : 5

113
Tree	i != null thisBuf.length ?
Code	i != null thisBuf.length ?
Distance : 4

114
Tree	i == null thisBuf.length ^
Code	i == null thisBuf.length ^
Distance : 4

115
Tree	i . copySelf () != thisBuf.length
Code	i . copySelf () != thisBuf.length
Distance : 5

116
Tree	i != null thisBuf.length +=
Code	i != null thisBuf.length +=
Distance : 4

117
Tree	SECONDS_MILLIS ( i ) != thisBuf.length
Code	SECONDS_MILLIS ( i ) != thisBuf.length
Distance : 5

118
Tree	isBuiltinObject () != thisBuf.length
Code	isBuiltinObject () != thisBuf.length
Distance : 4

119
Tree	skipStringLiteralEscapeSequence () != thisBuf.length
Code	skipStringLiteralEscapeSequence () != thisBuf.length
Distance : 4

120
Tree	i == null thisBuf.length /
Code	i == null thisBuf.length /
Distance : 4

121
Tree	size > NUMBER_CONSTANT
Code	size > NUMBER_CONSTANT
Distance : 3

122
Tree	i . parseDouble () != thisBuf.length
Code	i . parseDouble () != thisBuf.length
Distance : 5

123
Tree	i < IncrementalCheckMode.GENERATE_IJS ()
Code	i < IncrementalCheckMode.GENERATE_IJS ()
Distance : 2

124
Tree	this . i == i
Code	this . i == i
Distance : 4

125
Tree	i . abs () != thisBuf.length
Code	i . abs () != thisBuf.length
Distance : 5

126
Tree	i != null thisBuf.length ^
Code	i != null thisBuf.length ^
Distance : 4

127
Tree	i == null thisBuf.length ?
Code	i == null thisBuf.length ?
Distance : 4

128
Tree	i == null thisBuf.length instanceof
Code	i == null thisBuf.length instanceof
Distance : 4

129
Tree	i . intValue () != thisBuf.length
Code	i . intValue () != thisBuf.length
Distance : 5

130
Tree	i == null < %
Code	i == null < %
Distance : 3

131
Tree	i == null i +=
Code	i == null i +=
Distance : 4

132
Tree	toPrinter ( i ) != thisBuf.length
Code	toPrinter ( i ) != thisBuf.length
Distance : 5

133
Tree	i < thisBuf.length ParamChecks
Code	i < thisBuf.length ParamChecks
Distance : 2

134
Tree	i != null i [
Code	i != null i [
Distance : 4

135
Tree	isTypecheckingEnabled ( i ) != thisBuf.length
Code	isTypecheckingEnabled ( i ) != thisBuf.length
Distance : 5

136
Tree	stubInfo () != thisBuf.length
Code	stubInfo () != thisBuf.length
Distance : 4

137
Tree	includesGlobals ( i ) != thisBuf.length
Code	includesGlobals ( i ) != thisBuf.length
Distance : 5

138
Tree	size == i
Code	size == i
Distance : 3

139
Tree	isSetterDef ( i ) != thisBuf.length
Code	isSetterDef ( i ) != thisBuf.length
Distance : 5

140
Tree	i . getVertices () != thisBuf.length
Code	i . getVertices () != thisBuf.length
Distance : 5

141
Tree	size / i
Code	size / i
Distance : 3

142
Tree	i == null < :
Code	i == null < :
Distance : 3

143
Tree	size == thisBuf.length && i
Code	size == thisBuf.length && i
Distance : 5

144
Tree	size != super();
Code	size != super();
Distance : 3

145
Tree	i == thisBuf.length < >=
Code	i == thisBuf.length < >=
Distance : 3

146
Tree	size != break;
Code	size != break;
Distance : 3

147
Tree	i . getDimension () != thisBuf.length
Code	i . getDimension () != thisBuf.length
Distance : 5

148
Tree	i == thisBuf.length < ^
Code	i == thisBuf.length < ^
Distance : 3

149
Tree	i == thisBuf.length < %
Code	i == thisBuf.length < %
Distance : 3

150
Tree	i < thisBuf.length {}
Code	i < thisBuf.length {}
Distance : 2

151
Tree	i < thisBuf.length MathRuntimeException
Code	i < thisBuf.length MathRuntimeException
Distance : 2

152
Tree	i > NUMBER_CONSTANT MathRuntimeException
Code	i > NUMBER_CONSTANT MathRuntimeException
Distance : 3

153
Tree	i > NUMBER_CONSTANT Class
Code	i > NUMBER_CONSTANT Class
Distance : 3

154
Tree	thisBuf.length < thisBuf.length
Code	thisBuf.length < thisBuf.length
Distance : 2

155
Tree	i > NUMBER_CONSTANT Test
Code	i > NUMBER_CONSTANT Test
Distance : 3

156
Tree	i == thisBuf.length && i toString
Code	i == thisBuf.length && i toString
Distance : 5

157
Tree	i < thisBuf.length Class
Code	i < thisBuf.length Class
Distance : 2

158
Tree	i < thisBuf.length Test
Code	i < thisBuf.length Test
Distance : 2

159
Tree	thisBuf.length thisBuf.length thisBuf.length array
Code	thisBuf.length thisBuf.length thisBuf.length array
Distance : 4

160
Tree	i == thisBuf.length && i p
Code	i == thisBuf.length && i p
Distance : 5

161
Tree	i == thisBuf.length < -=
Code	i == thisBuf.length < -=
Distance : 3

162
Tree	i == thisBuf.length < *=
Code	i == thisBuf.length < *=
Distance : 3

163
Tree	thisBuf.length < thisBuf.length notifyListeners
Code	thisBuf.length < thisBuf.length notifyListeners
Distance : 3

164
Tree	i != null thisBuf.length %
Code	i != null thisBuf.length %
Distance : 4

165
Tree	i > NUMBER_CONSTANT Preconditions
Code	i > NUMBER_CONSTANT Preconditions
Distance : 3

166
Tree	i != null thisBuf.length >=
Code	i != null thisBuf.length >=
Distance : 4

167
Tree	i > NUMBER_CONSTANT -
Code	i > NUMBER_CONSTANT -
Distance : 3

168
Tree	i == thisBuf.length < extends
Code	i == thisBuf.length < extends
Distance : 3

169
Tree	thisBuf.length thisBuf.length thisBuf.length [
Code	thisBuf.length thisBuf.length thisBuf.length [
Distance : 4

170
Tree	i > NUMBER_CONSTANT ParamChecks
Code	i > NUMBER_CONSTANT ParamChecks
Distance : 3

171
Tree	this == i Class
Code	this == i Class
Distance : 4

172
Tree	i > NUMBER_CONSTANT f
Code	i > NUMBER_CONSTANT f
Distance : 3

173
Tree	i . stubInfo () != thisBuf.length
Code	i . stubInfo () != thisBuf.length
Distance : 5

174
Tree	i == i p
Code	i == i p
Distance : 3

175
Tree	i == i &&
Code	i == i &&
Distance : 3

176
Tree	i == thisBuf.length Class
Code	i == thisBuf.length Class
Distance : 3

177
Tree	i == i T
Code	i == i T
Distance : 3

178
Tree	size / size
Code	size / size
Distance : 2

179
Tree	i > NUMBER_CONSTANT {}
Code	i > NUMBER_CONSTANT {}
Distance : 3

180
Tree	stubInfo ( i ) != thisBuf.length
Code	stubInfo ( i ) != thisBuf.length
Distance : 5

181
Tree	this == i Preconditions
Code	this == i Preconditions
Distance : 4

182
Tree	this . i == i toString
Code	this . i == i toString
Distance : 5

183
Tree	i < thisBuf.length -
Code	i < thisBuf.length -
Distance : 2

184
Tree	this . isNot () != thisBuf.length
Code	this . isNot () != thisBuf.length
Distance : 6

185
Tree	this . i . getBottomObject () != thisBuf.length
Code	this . i . getBottomObject () != thisBuf.length
Distance : 7

186
Tree	i . getBeta () thisBuf.length getIgnoredMatcher ( i )
Code	i . getBeta () thisBuf.length getIgnoredMatcher ( i )
Distance : 8

187
Tree	i . getBeta () thisBuf.length getNormalizedReferenceName ( i )
Code	i . getBeta () thisBuf.length getNormalizedReferenceName ( i )
Distance : 8

188
Tree	this . floatValue () != thisBuf.length
Code	this . floatValue () != thisBuf.length
Distance : 6

189
Tree	i . valueOf () < SECONDS_MILLIS ( i )
Code	i . valueOf () < SECONDS_MILLIS ( i )
Distance : 7

190
Tree	i . getBeta () != thisBuf.length
Code	i . getBeta () != thisBuf.length
Distance : 5

191
Tree	i . valueOf () i eras ( i )
Code	i . valueOf () i eras ( i )
Distance : 8

192
Tree	i . valueOf () thisBuf.length getUnknownType ( i )
Code	i . valueOf () thisBuf.length getUnknownType ( i )
Distance : 8

193
Tree	i == thisBuf.length < /
Code	i == thisBuf.length < /
Distance : 3

194
Tree	this . i . getExportPostfix () != thisBuf.length
Code	this . i . getExportPostfix () != thisBuf.length
Distance : 7

195
Tree	i . isStruct () thisBuf.length getIgnoredMatcher ( i )
Code	i . isStruct () thisBuf.length getIgnoredMatcher ( i )
Distance : 8

196
Tree	i != null < :
Code	i != null < :
Distance : 3

197
Tree	thisBuf.length < thisBuf.length -
Code	thisBuf.length < thisBuf.length -
Distance : 3

198
Tree	i < thisBuf.length f
Code	i < thisBuf.length f
Distance : 2

199
Tree	i == thisBuf.length && i T
Code	i == thisBuf.length && i T
Distance : 5

========================================================================


========================================================================
Example Number: 36
Parent Code is: 
i < thisBuf.length
-------------------------------------------------------------------------------
Child code is: 
i < this . size
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (40{val=thisBuf.length})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (22 (315{val=this}) (235{val=.}) (800{val=size}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/60/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	this . i . stubInfo () != thisBuf.length
Code	this . i . stubInfo () != thisBuf.length
Distance : 7

1
Tree	this . getBottomObject () != thisBuf.length
Code	this . getBottomObject () != thisBuf.length
Distance : 6

2
Tree	this . nullPassedToVerify () != thisBuf.length
Code	this . nullPassedToVerify () != thisBuf.length
Distance : 6

3
Tree	this . i . getInf () != thisBuf.length
Code	this . i . getInf () != thisBuf.length
Distance : 7

4
Tree	size < thisBuf.length
Code	size < thisBuf.length
Distance : 4

5
Tree	i != default:
Code	i != default:
Distance : 4

6
Tree	size == size
Code	size == size
Distance : 4

7
Tree	this . i . isBuiltinObject () != thisBuf.length
Code	this . i . isBuiltinObject () != thisBuf.length
Distance : 7

8
Tree	i != return;
Code	i != return;
Distance : 4

9
Tree	i != continue;
Code	i != continue;
Distance : 4

10
Tree	skipStringLiteralEscapeSequence ( i ) != thisBuf.length
Code	skipStringLiteralEscapeSequence ( i ) != thisBuf.length
Distance : 6

11
Tree	isBuiltinObject ( i ) != thisBuf.length
Code	isBuiltinObject ( i ) != thisBuf.length
Distance : 6

12
Tree	this == size
Code	this == size
Distance : 3

13
Tree	getIgnoredMatcher ( i ) != thisBuf.length
Code	getIgnoredMatcher ( i ) != thisBuf.length
Distance : 6

14
Tree	i / size
Code	i / size
Distance : 3

15
Tree	this . size == size
Code	this . size == size
Distance : 4

16
Tree	i . valueOf () != thisBuf.length
Code	i . valueOf () != thisBuf.length
Distance : 5

17
Tree	i == thisBuf.length && i source
Code	i == thisBuf.length && i source
Distance : 5

18
Tree	i == thisBuf.length -
Code	i == thisBuf.length -
Distance : 4

19
Tree	this . resetBuilder () != thisBuf.length
Code	this . resetBuilder () != thisBuf.length
Distance : 6

20
Tree	size != continue;
Code	size != continue;
Distance : 5

21
Tree	i == thisBuf.length i instanceof
Code	i == thisBuf.length i instanceof
Distance : 4

22
Tree	i == thisBuf.length < ?
Code	i == thisBuf.length < ?
Distance : 4

23
Tree	i == thisBuf.length < &=
Code	i == thisBuf.length < &=
Distance : 4

24
Tree	size == thisBuf.length && size
Code	size == thisBuf.length && size
Distance : 4

25
Tree	i == thisBuf.length Preconditions
Code	i == thisBuf.length Preconditions
Distance : 4

26
Tree	i == thisBuf.length MathRuntimeException
Code	i == thisBuf.length MathRuntimeException
Distance : 4

27
Tree	i == thisBuf.length Test
Code	i == thisBuf.length Test
Distance : 4

28
Tree	this . getStringBuffer () != thisBuf.length
Code	this . getStringBuffer () != thisBuf.length
Distance : 6

29
Tree	this . jacobianEvaluations () != thisBuf.length
Code	this . jacobianEvaluations () != thisBuf.length
Distance : 6

30
Tree	i == thisBuf.length {}
Code	i == thisBuf.length {}
Distance : 4

31
Tree	i < thisBuf.length Preconditions
Code	i < thisBuf.length Preconditions
Distance : 3

32
Tree	i == thisBuf.length ParamChecks
Code	i == thisBuf.length ParamChecks
Distance : 4

33
Tree	i == thisBuf.length && i options
Code	i == thisBuf.length && i options
Distance : 5

34
Tree	this . stubInfo () != thisBuf.length
Code	this . stubInfo () != thisBuf.length
Distance : 6

35
Tree	i . stubInfo () thisBuf.length getIgnoredMatcher ( i )
Code	i . stubInfo () thisBuf.length getIgnoredMatcher ( i )
Distance : 8

36
Tree	this . i . doesFunctionReferenceOwnArgumentsObject () != thisBuf.length
Code	this . i . doesFunctionReferenceOwnArgumentsObject () != thisBuf.length
Distance : 7

37
Tree	thisBuf.length < thisBuf.length class
Code	thisBuf.length < thisBuf.length class
Distance : 4

38
Tree	i == thisBuf.length && i &&
Code	i == thisBuf.length && i &&
Distance : 5

39
Tree	i / i toString
Code	i / i toString
Distance : 4

40
Tree	i / i source
Code	i / i source
Distance : 4

41
Tree	i / i options
Code	i / i options
Distance : 4

42
Tree	thisBuf.length < thisBuf.length mock
Code	thisBuf.length < thisBuf.length mock
Distance : 4

43
Tree	i / i p
Code	i / i p
Distance : 4

44
Tree	i / i T
Code	i / i T
Distance : 4

45
Tree	size != null
Code	size != null
Distance : 5

46
Tree	this . i == i options
Code	this . i == i options
Distance : 6

47
Tree	this . i == i p
Code	this . i == i p
Distance : 6

48
Tree	this . i == i &&
Code	this . i == i &&
Distance : 6

49
Tree	i / i &&
Code	i / i &&
Distance : 4

50
Tree	this . i == i T
Code	this . i == i T
Distance : 6

51
Tree	i == i options
Code	i == i options
Distance : 4

52
Tree	i == i toString
Code	i == i toString
Distance : 4

53
Tree	this == i MathRuntimeException
Code	this == i MathRuntimeException
Distance : 5

54
Tree	this . i . getBeta () != thisBuf.length
Code	this . i . getBeta () != thisBuf.length
Distance : 7

55
Tree	thisBuf.length thisBuf.length thisBuf.length MathRuntimeException
Code	thisBuf.length thisBuf.length thisBuf.length MathRuntimeException
Distance : 5

56
Tree	thisBuf.length < thisBuf.length Override
Code	thisBuf.length < thisBuf.length Override
Distance : 4

57
Tree	this == i Test
Code	this == i Test
Distance : 5

58
Tree	thisBuf.length < thisBuf.length f
Code	thisBuf.length < thisBuf.length f
Distance : 4

59
Tree	i == i source
Code	i == i source
Distance : 4

60
Tree	this . unescape () != thisBuf.length
Code	this . unescape () != thisBuf.length
Distance : 6

61
Tree	this == i f
Code	this == i f
Distance : 5

62
Tree	this == i ParamChecks
Code	this == i ParamChecks
Distance : 5

63
Tree	this . i . getVertices () != thisBuf.length
Code	this . i . getVertices () != thisBuf.length
Distance : 7

64
Tree	this == i {}
Code	this == i {}
Distance : 5

65
Tree	this . i . stubbedAt () != thisBuf.length
Code	this . i . stubbedAt () != thisBuf.length
Distance : 7

66
Tree	i < that.id ()
Code	i < that.id ()
Distance : 3

67
Tree	i < newEnd ()
Code	i < newEnd ()
Distance : 3

68
Tree	i < iChronology.MILLIS_PER_DAY ()
Code	i < iChronology.MILLIS_PER_DAY ()
Distance : 3

69
Tree	i == null < >=
Code	i == null < >=
Distance : 4

70
Tree	i < CallSiteType.UNSUPPORTED ()
Code	i < CallSiteType.UNSUPPORTED ()
Distance : 3

71
Tree	i < P ()
Code	i < P ()
Distance : 3

72
Tree	i < canEliminate ()
Code	i < canEliminate ()
Distance : 3

73
Tree	i . stubInfo () i getNormalizedReferenceName ( i )
Code	i . stubInfo () i getNormalizedReferenceName ( i )
Distance : 8

74
Tree	i == size
Code	i == size
Distance : 3

75
Tree	i < thisBuf.length
Code	i < thisBuf.length
Distance : 3

76
Tree	i != super();
Code	i != super();
Distance : 4

77
Tree	i == thisBuf.length
Code	i == thisBuf.length
Distance : 4

78
Tree	i != null thisBuf.length extends
Code	i != null thisBuf.length extends
Distance : 4

79
Tree	i != break;
Code	i != break;
Distance : 4

80
Tree	this . i == size
Code	this . i == size
Distance : 4

81
Tree	size == thisBuf.length
Code	size == thisBuf.length
Distance : 5

82
Tree	this . i . bark () != thisBuf.length
Code	this . i . bark () != thisBuf.length
Distance : 7

83
Tree	this == i -
Code	this == i -
Distance : 5

84
Tree	this . i == i source
Code	this . i == i source
Distance : 6

85
Tree	i != null thisBuf.length *=
Code	i != null thisBuf.length *=
Distance : 4

86
Tree	i == thisBuf.length f
Code	i == thisBuf.length f
Distance : 4

87
Tree	this . isBuiltinObject () != thisBuf.length
Code	this . isBuiltinObject () != thisBuf.length
Distance : 6

88
Tree	this . size == i
Code	this . size == i
Distance : 4

89
Tree	i . valueOf () i getIgnoredMatcher ( i )
Code	i . valueOf () i getIgnoredMatcher ( i )
Distance : 8

90
Tree	i == thisBuf.length && size
Code	i == thisBuf.length && size
Distance : 3

91
Tree	markStubUsed () != thisBuf.length
Code	markStubUsed () != thisBuf.length
Distance : 5

92
Tree	i . valueOf () thisBuf.length getNormalizedReferenceName ( i )
Code	i . valueOf () thisBuf.length getNormalizedReferenceName ( i )
Distance : 8

93
Tree	SECONDS_MILLIS () != thisBuf.length
Code	SECONDS_MILLIS () != thisBuf.length
Distance : 5

94
Tree	i == null thisBuf.length extends
Code	i == null thisBuf.length extends
Distance : 4

95
Tree	toPrinter () != thisBuf.length
Code	toPrinter () != thisBuf.length
Distance : 5

96
Tree	isTypecheckingEnabled () != thisBuf.length
Code	isTypecheckingEnabled () != thisBuf.length
Distance : 5

97
Tree	i == null thisBuf.length [
Code	i == null thisBuf.length [
Distance : 4

98
Tree	includesGlobals () != thisBuf.length
Code	includesGlobals () != thisBuf.length
Distance : 5

99
Tree	isSetterDef () != thisBuf.length
Code	isSetterDef () != thisBuf.length
Distance : 5

100
Tree	i > NUMBER_CONSTANT
Code	i > NUMBER_CONSTANT
Distance : 4

101
Tree	i != null thisBuf.length /
Code	i != null thisBuf.length /
Distance : 4

102
Tree	i == i
Code	i == i
Distance : 4

103
Tree	this == i
Code	this == i
Distance : 4

104
Tree	i != null
Code	i != null
Distance : 4

105
Tree	markStubUsed ( i ) != thisBuf.length
Code	markStubUsed ( i ) != thisBuf.length
Distance : 6

106
Tree	i < getNormalizedReferenceName ()
Code	i < getNormalizedReferenceName ()
Distance : 3

107
Tree	i < getBooleanProp ()
Code	i < getBooleanProp ()
Distance : 3

108
Tree	i == thisBuf.length && i
Code	i == thisBuf.length && i
Distance : 4

109
Tree	getIgnoredMatcher () != thisBuf.length
Code	getIgnoredMatcher () != thisBuf.length
Distance : 5

110
Tree	i / i
Code	i / i
Distance : 4

111
Tree	i < IncrementalCheckMode.OFF ()
Code	i < IncrementalCheckMode.OFF ()
Distance : 3

112
Tree	i . isStruct () != thisBuf.length
Code	i . isStruct () != thisBuf.length
Distance : 5

113
Tree	i != null thisBuf.length ?
Code	i != null thisBuf.length ?
Distance : 4

114
Tree	i == null thisBuf.length ^
Code	i == null thisBuf.length ^
Distance : 4

115
Tree	i . copySelf () != thisBuf.length
Code	i . copySelf () != thisBuf.length
Distance : 5

116
Tree	i != null thisBuf.length +=
Code	i != null thisBuf.length +=
Distance : 4

117
Tree	SECONDS_MILLIS ( i ) != thisBuf.length
Code	SECONDS_MILLIS ( i ) != thisBuf.length
Distance : 6

118
Tree	isBuiltinObject () != thisBuf.length
Code	isBuiltinObject () != thisBuf.length
Distance : 5

119
Tree	skipStringLiteralEscapeSequence () != thisBuf.length
Code	skipStringLiteralEscapeSequence () != thisBuf.length
Distance : 5

120
Tree	i == null < /
Code	i == null < /
Distance : 4

121
Tree	size > NUMBER_CONSTANT
Code	size > NUMBER_CONSTANT
Distance : 5

122
Tree	i . parseDouble () != thisBuf.length
Code	i . parseDouble () != thisBuf.length
Distance : 5

123
Tree	i < IncrementalCheckMode.GENERATE_IJS ()
Code	i < IncrementalCheckMode.GENERATE_IJS ()
Distance : 3

124
Tree	this . i == i
Code	this . i == i
Distance : 5

125
Tree	i . abs () != thisBuf.length
Code	i . abs () != thisBuf.length
Distance : 5

126
Tree	i != null thisBuf.length ^
Code	i != null thisBuf.length ^
Distance : 4

127
Tree	i == null thisBuf.length ?
Code	i == null thisBuf.length ?
Distance : 4

128
Tree	i == null thisBuf.length instanceof
Code	i == null thisBuf.length instanceof
Distance : 4

129
Tree	i . intValue () != thisBuf.length
Code	i . intValue () != thisBuf.length
Distance : 5

130
Tree	i == null thisBuf.length %
Code	i == null thisBuf.length %
Distance : 4

131
Tree	i == null < +=
Code	i == null < +=
Distance : 4

132
Tree	toPrinter ( i ) != thisBuf.length
Code	toPrinter ( i ) != thisBuf.length
Distance : 6

133
Tree	i < thisBuf.length ParamChecks
Code	i < thisBuf.length ParamChecks
Distance : 3

134
Tree	i != null i [
Code	i != null i [
Distance : 4

135
Tree	isTypecheckingEnabled ( i ) != thisBuf.length
Code	isTypecheckingEnabled ( i ) != thisBuf.length
Distance : 6

136
Tree	stubInfo () != thisBuf.length
Code	stubInfo () != thisBuf.length
Distance : 5

137
Tree	includesGlobals ( i ) != thisBuf.length
Code	includesGlobals ( i ) != thisBuf.length
Distance : 6

138
Tree	size == i
Code	size == i
Distance : 5

139
Tree	isSetterDef ( i ) != thisBuf.length
Code	isSetterDef ( i ) != thisBuf.length
Distance : 6

140
Tree	i . getVertices () != thisBuf.length
Code	i . getVertices () != thisBuf.length
Distance : 5

141
Tree	size / i
Code	size / i
Distance : 5

142
Tree	i == null thisBuf.length :
Code	i == null thisBuf.length :
Distance : 4

143
Tree	size == thisBuf.length && i
Code	size == thisBuf.length && i
Distance : 5

144
Tree	size != super();
Code	size != super();
Distance : 5

145
Tree	i == thisBuf.length < >=
Code	i == thisBuf.length < >=
Distance : 4

146
Tree	size != break;
Code	size != break;
Distance : 5

147
Tree	i . getDimension () != thisBuf.length
Code	i . getDimension () != thisBuf.length
Distance : 5

148
Tree	i == thisBuf.length < ^
Code	i == thisBuf.length < ^
Distance : 4

149
Tree	i == thisBuf.length < %
Code	i == thisBuf.length < %
Distance : 4

150
Tree	i < thisBuf.length {}
Code	i < thisBuf.length {}
Distance : 3

151
Tree	i < thisBuf.length MathRuntimeException
Code	i < thisBuf.length MathRuntimeException
Distance : 3

152
Tree	i > NUMBER_CONSTANT MathRuntimeException
Code	i > NUMBER_CONSTANT MathRuntimeException
Distance : 4

153
Tree	i > NUMBER_CONSTANT Class
Code	i > NUMBER_CONSTANT Class
Distance : 4

154
Tree	thisBuf.length < thisBuf.length
Code	thisBuf.length < thisBuf.length
Distance : 4

155
Tree	i > NUMBER_CONSTANT Test
Code	i > NUMBER_CONSTANT Test
Distance : 4

156
Tree	i == thisBuf.length && i toString
Code	i == thisBuf.length && i toString
Distance : 5

157
Tree	i < thisBuf.length Class
Code	i < thisBuf.length Class
Distance : 3

158
Tree	i < thisBuf.length Test
Code	i < thisBuf.length Test
Distance : 3

159
Tree	thisBuf.length thisBuf.length thisBuf.length array
Code	thisBuf.length thisBuf.length thisBuf.length array
Distance : 5

160
Tree	i == thisBuf.length && i p
Code	i == thisBuf.length && i p
Distance : 5

161
Tree	i == thisBuf.length < -=
Code	i == thisBuf.length < -=
Distance : 4

162
Tree	i == thisBuf.length < *=
Code	i == thisBuf.length < *=
Distance : 4

163
Tree	thisBuf.length < thisBuf.length notifyListeners
Code	thisBuf.length < thisBuf.length notifyListeners
Distance : 4

164
Tree	i != null thisBuf.length %
Code	i != null thisBuf.length %
Distance : 4

165
Tree	i > NUMBER_CONSTANT Preconditions
Code	i > NUMBER_CONSTANT Preconditions
Distance : 4

166
Tree	i != null thisBuf.length >=
Code	i != null thisBuf.length >=
Distance : 4

167
Tree	i > NUMBER_CONSTANT -
Code	i > NUMBER_CONSTANT -
Distance : 4

168
Tree	i == thisBuf.length < extends
Code	i == thisBuf.length < extends
Distance : 4

169
Tree	thisBuf.length thisBuf.length thisBuf.length [
Code	thisBuf.length thisBuf.length thisBuf.length [
Distance : 5

170
Tree	i > NUMBER_CONSTANT ParamChecks
Code	i > NUMBER_CONSTANT ParamChecks
Distance : 4

171
Tree	this == i Class
Code	this == i Class
Distance : 5

172
Tree	i > NUMBER_CONSTANT f
Code	i > NUMBER_CONSTANT f
Distance : 4

173
Tree	i . stubInfo () != thisBuf.length
Code	i . stubInfo () != thisBuf.length
Distance : 5

174
Tree	i == i p
Code	i == i p
Distance : 4

175
Tree	i == i &&
Code	i == i &&
Distance : 4

176
Tree	i == thisBuf.length Class
Code	i == thisBuf.length Class
Distance : 4

177
Tree	i == i T
Code	i == i T
Distance : 4

178
Tree	size / size
Code	size / size
Distance : 4

179
Tree	i > NUMBER_CONSTANT {}
Code	i > NUMBER_CONSTANT {}
Distance : 4

180
Tree	stubInfo ( i ) != thisBuf.length
Code	stubInfo ( i ) != thisBuf.length
Distance : 6

181
Tree	this == i Preconditions
Code	this == i Preconditions
Distance : 5

182
Tree	this . i == i toString
Code	this . i == i toString
Distance : 6

183
Tree	i < thisBuf.length -
Code	i < thisBuf.length -
Distance : 3

184
Tree	this . isNot () != thisBuf.length
Code	this . isNot () != thisBuf.length
Distance : 6

185
Tree	this . i . getBottomObject () != thisBuf.length
Code	this . i . getBottomObject () != thisBuf.length
Distance : 7

186
Tree	i . getBeta () thisBuf.length getIgnoredMatcher ( i )
Code	i . getBeta () thisBuf.length getIgnoredMatcher ( i )
Distance : 8

187
Tree	i . getBeta () thisBuf.length getNormalizedReferenceName ( i )
Code	i . getBeta () thisBuf.length getNormalizedReferenceName ( i )
Distance : 8

188
Tree	this . floatValue () != thisBuf.length
Code	this . floatValue () != thisBuf.length
Distance : 6

189
Tree	i . valueOf () thisBuf.length SECONDS_MILLIS ( i )
Code	i . valueOf () thisBuf.length SECONDS_MILLIS ( i )
Distance : 8

190
Tree	i . getBeta () != thisBuf.length
Code	i . getBeta () != thisBuf.length
Distance : 5

191
Tree	i . valueOf () < eras ( i )
Code	i . valueOf () < eras ( i )
Distance : 7

192
Tree	i . valueOf () < getUnknownType ( i )
Code	i . valueOf () < getUnknownType ( i )
Distance : 7

193
Tree	i == thisBuf.length i /
Code	i == thisBuf.length i /
Distance : 4

194
Tree	this . i . getExportPostfix () != thisBuf.length
Code	this . i . getExportPostfix () != thisBuf.length
Distance : 7

195
Tree	i . isStruct () thisBuf.length getIgnoredMatcher ( i )
Code	i . isStruct () thisBuf.length getIgnoredMatcher ( i )
Distance : 8

196
Tree	i != null thisBuf.length :
Code	i != null thisBuf.length :
Distance : 4

197
Tree	thisBuf.length thisBuf.length thisBuf.length -
Code	thisBuf.length thisBuf.length thisBuf.length -
Distance : 5

198
Tree	i < thisBuf.length f
Code	i < thisBuf.length f
Distance : 3

199
Tree	i == thisBuf.length && i T
Code	i == thisBuf.length && i T
Distance : 5

========================================================================


========================================================================
Example Number: 37
Parent Code is: 
{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ str . getChars ( NUMBER_CONSTANT , width , buffer , size ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=str}) (235{val=.}) (802{val=getChars}) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=strLen}) (234{val=,}) (800{val=buffer}) (234{val=,}) (800{val=size}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=str}) (235{val=.}) (802{val=getChars}) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=width}) (234{val=,}) (800{val=buffer}) (234{val=,}) (800{val=size}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/59/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ strLen . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ strLen . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

1
Tree	str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ;
Distance : 4

2
Tree	{ getChars ( STRING_CONSTANT , strLen , buffer , str ) ; }
Code	{ getChars ( STRING_CONSTANT , strLen , buffer , str ) ; }
Distance : 5

3
Tree	{ str . getChars ( null , strLen , size , size ) ; }
Code	{ str . getChars ( null , strLen , size , size ) ; }
Distance : 3

4
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , StringUtils.EMPTY , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , StringUtils.EMPTY , NUMBER_CONSTANT ) ; }
Distance : 4

5
Tree	{ str . getChars ( NUMBER_CONSTANT , str , buffer , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , str , buffer , size ) ; }
Distance : 1

6
Tree	{ getChars ( strLen , strLen , buffer , size ) ; }
Code	{ getChars ( strLen , strLen , buffer , size ) ; }
Distance : 4

7
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , Locale.ENGLISH , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , Locale.ENGLISH , NUMBER_CONSTANT ) ; }
Distance : 4

8
Tree	{ getChars ( strLen , strLen , str , size , size , size ) ; }
Code	{ getChars ( strLen , strLen , str , size , size , size ) ; }
Distance : 9

9
Tree	{ str . getChars ( str , str , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( str , str , size , STRING_CONSTANT ) ; }
Distance : 4

10
Tree	{ EscapeUtils.ESCAPE_JAVA . getChars ( strLen , strLen ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . getChars ( strLen , strLen ) ; }
Distance : 7

11
Tree	{ str . getChars ( null , buffer , buffer , size ) ; }
Code	{ str . getChars ( null , buffer , buffer , size ) ; }
Distance : 2

12
Tree	{ getChars ( strLen , strLen , size , str , size , size ) ; }
Code	{ getChars ( strLen , strLen , size , str , size , size ) ; }
Distance : 9

13
Tree	{ getChars ( strLen , str , size , size ) ; }
Code	{ getChars ( strLen , str , size , size ) ; }
Distance : 5

14
Tree	str . getChars ( NUMBER_CONSTANT , str , buffer , size ) ;
Code	str . getChars ( NUMBER_CONSTANT , str , buffer , size ) ;
Distance : 3

15
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , Calendar.DECEMBER , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , Calendar.DECEMBER , NUMBER_CONSTANT ) ; }
Distance : 4

16
Tree	{ getChars ( str , strLen , buffer , size , size , size ) ; }
Code	{ getChars ( str , strLen , buffer , size , size , size ) ; }
Distance : 8

17
Tree	{ buffer . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ buffer . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

18
Tree	{ getChars ( str , str , size , size , size , size ) ; }
Code	{ getChars ( str , str , size , size , size , size ) ; }
Distance : 8

19
Tree	{ getChars ( STRING_CONSTANT , strLen , buffer , buffer ) ; }
Code	{ getChars ( STRING_CONSTANT , strLen , buffer , buffer ) ; }
Distance : 5

20
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ; }
Distance : 2

21
Tree	{ str . getChars ( width , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( width , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

22
Tree	{ str . getChars ( str , getChars () , this ) ; }
Code	{ str . getChars ( str , getChars () , this ) ; }
Distance : 5

23
Tree	{ str . getChars ( null , strLen , buffer , str ) ; }
Code	{ str . getChars ( null , strLen , buffer , str ) ; }
Distance : 3

24
Tree	{ size . getChars ( strLen , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ size . getChars ( strLen , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

25
Tree	{ str . getChars ( null , str , buffer , size ) ; }
Code	{ str . getChars ( null , str , buffer , size ) ; }
Distance : 2

26
Tree	{ str . getChars ( true ) ; }
Code	{ str . getChars ( true ) ; }
Distance : 7

27
Tree	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

28
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

29
Tree	{ getChars ( strLen , strLen , buffer , values.length ) ; }
Code	{ getChars ( strLen , strLen , buffer , values.length ) ; }
Distance : 5

30
Tree	{ str . getChars ( null , strLen , buffer , buffer ) ; }
Code	{ str . getChars ( null , strLen , buffer , buffer ) ; }
Distance : 3

31
Tree	{ str . getChars ( Level.FINE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( Level.FINE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

32
Tree	{ getChars ( str , strLen , size , Boolean ) ; }
Code	{ getChars ( str , strLen , size , Boolean ) ; }
Distance : 6

33
Tree	{ getChars ( buffer , strLen , size , size , size , size ) ; }
Code	{ getChars ( buffer , strLen , size , size , size , size ) ; }
Distance : 9

34
Tree	{ getChars ( str , strLen , size , size , size , size ) ; }
Code	{ getChars ( str , strLen , size , size , size , size ) ; }
Distance : 8

35
Tree	{ getChars ( strLen , buffer , size , size ) ; }
Code	{ getChars ( strLen , buffer , size , size ) ; }
Distance : 5

36
Tree	{ str . getChars ( this , strLen , buffer , buffer ) ; }
Code	{ str . getChars ( this , strLen , buffer , buffer ) ; }
Distance : 3

37
Tree	{ printTo . getChars ( str , strLen ) ; }
Code	{ printTo . getChars ( str , strLen ) ; }
Distance : 7

38
Tree	{ BlockFieldMatrix . getChars ( strLen , strLen ) ; }
Code	{ BlockFieldMatrix . getChars ( strLen , strLen ) ; }
Distance : 7

39
Tree	{ defaultString . getChars ( strLen , strLen ) ; }
Code	{ defaultString . getChars ( strLen , strLen ) ; }
Distance : 7

40
Tree	{ getChars ( strLen , str , size , values.length ) ; }
Code	{ getChars ( strLen , str , size , values.length ) ; }
Distance : 6

41
Tree	{ str . getChars ( strLen , strLen , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( strLen , strLen , size , STRING_CONSTANT ) ; }
Distance : 4

42
Tree	{ str . getChars ( ComposableFunction.TAN , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( ComposableFunction.TAN , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

43
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ; }
Distance : 2

44
Tree	str . getChars ( NUMBER_CONSTANT , strLen , str , size ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , str , size ) ;
Distance : 4

45
Tree	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

46
Tree	{ getChars ( strLen , buffer , size , size , size , size ) ; }
Code	{ getChars ( strLen , buffer , size , size , size , size ) ; }
Distance : 9

47
Tree	{ size . getChars ( true ) ; }
Code	{ size . getChars ( true ) ; }
Distance : 8

48
Tree	str . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ;
Distance : 4

49
Tree	{ str . getChars ( mapper.start , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( mapper.start , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

50
Tree	{ str . getChars ( this , str , size , size ) ; }
Code	{ str . getChars ( this , str , size , size ) ; }
Distance : 3

51
Tree	{ str . getChars ( str , strLen , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( str , strLen , size , STRING_CONSTANT ) ; }
Distance : 4

52
Tree	{ str . getChars ( StringUtils.EMPTY , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( StringUtils.EMPTY , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

53
Tree	{ str . getChars ( Level.FINE , array.length ) ; }
Code	{ str . getChars ( Level.FINE , array.length ) ; }
Distance : 6

54
Tree	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

55
Tree	{ getChars ( strLen , reporterStub.wanted , false ) ; }
Code	{ getChars ( strLen , reporterStub.wanted , false ) ; }
Distance : 7

56
Tree	{ getChars ( strLen , strLen , size , d.length ) ; }
Code	{ getChars ( strLen , strLen , size , d.length ) ; }
Distance : 6

57
Tree	{ strLen . getChars ( strLen , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ strLen . getChars ( strLen , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

58
Tree	{ str . getChars ( null , strLen , buffer , size ) ; }
Code	{ str . getChars ( null , strLen , buffer , size ) ; }
Distance : 2

59
Tree	{ str . getChars ( false ) ; }
Code	{ str . getChars ( false ) ; }
Distance : 7

60
Tree	{ getChars ( strLen , strLen , size , values.length ) ; }
Code	{ getChars ( strLen , strLen , size , values.length ) ; }
Distance : 6

61
Tree	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

62
Tree	{ getChars ( strLen , reporterStub.undesired , false ) ; }
Code	{ getChars ( strLen , reporterStub.undesired , false ) ; }
Distance : 7

63
Tree	{ strLen . getChars ( true ) ; }
Code	{ strLen . getChars ( true ) ; }
Distance : 8

64
Tree	{ getChars ( strLen , strLen , size , Boolean ) ; }
Code	{ getChars ( strLen , strLen , size , Boolean ) ; }
Distance : 6

65
Tree	{ getChars ( strLen , strLen , size , size ) ; }
Code	{ getChars ( strLen , strLen , size , size ) ; }
Distance : 5

66
Tree	{ entry.map . getChars ( strLen , strLen ) ; }
Code	{ entry.map . getChars ( strLen , strLen ) ; }
Distance : 7

67
Tree	{ getChars ( strLen , strLen , size , LocalizedFormats.OVERFLOW_IN_ADDITION ) ; }
Code	{ getChars ( strLen , strLen , size , LocalizedFormats.OVERFLOW_IN_ADDITION ) ; }
Distance : 6

68
Tree	{ getChars ( strLen , StringUtils.EMPTY , false ) ; }
Code	{ getChars ( strLen , StringUtils.EMPTY , false ) ; }
Distance : 7

69
Tree	{ getChars ( strLen , strLen , size , size , size , size ) ; }
Code	{ getChars ( strLen , strLen , size , size , size , size ) ; }
Distance : 9

70
Tree	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

71
Tree	{ strLen . getChars ( str , getChars () , this ) ; }
Code	{ strLen . getChars ( str , getChars () , this ) ; }
Distance : 6

72
Tree	{ getChars ( str , strLen , size , size ) ; }
Code	{ getChars ( str , strLen , size , size ) ; }
Distance : 5

73
Tree	{ str . getChars ( strLen , str . getChars () , this ) ; }
Code	{ str . getChars ( strLen , str . getChars () , this ) ; }
Distance : 6

74
Tree	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , array.length ) ; }
Code	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , array.length ) ; }
Distance : 6

75
Tree	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX , array.length ) ; }
Code	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX , array.length ) ; }
Distance : 6

76
Tree	{ str . getChars ( Level.FINE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( Level.FINE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

77
Tree	{ getChars ( strLen , strLen , str , size ) ; }
Code	{ getChars ( strLen , strLen , str , size ) ; }
Distance : 5

78
Tree	{ toUpperCase . getChars ( strLen , strLen ) ; }
Code	{ toUpperCase . getChars ( strLen , strLen ) ; }
Distance : 7

79
Tree	{ getChars ( str , array.length , false ) ; }
Code	{ getChars ( str , array.length , false ) ; }
Distance : 7

80
Tree	{ buffer . getChars ( true ) ; }
Code	{ buffer . getChars ( true ) ; }
Distance : 8

81
Tree	{ str . getChars ( ComposableFunction.TAN , array.length ) ; }
Code	{ str . getChars ( ComposableFunction.TAN , array.length ) ; }
Distance : 6

82
Tree	{ getChars ( strLen , CheckConformance.CONFORMANCE_VIOLATION , false ) ; }
Code	{ getChars ( strLen , CheckConformance.CONFORMANCE_VIOLATION , false ) ; }
Distance : 7

83
Tree	{ getChars ( strLen , array.length , false ) ; }
Code	{ getChars ( strLen , array.length , false ) ; }
Distance : 7

84
Tree	{ str . getChars ( strLen , buffer . getChars () , this ) ; }
Code	{ str . getChars ( strLen , buffer . getChars () , this ) ; }
Distance : 6

85
Tree	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

86
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Distance : 1

87
Tree	{ getChars ( strLen , Integer.MIN_VALUE , false ) ; }
Code	{ getChars ( strLen , Integer.MIN_VALUE , false ) ; }
Distance : 7

88
Tree	{ str . getChars ( StringUtils.EMPTY , array.length ) ; }
Code	{ str . getChars ( StringUtils.EMPTY , array.length ) ; }
Distance : 6

89
Tree	{ str . getChars ( this , str , buffer , size ) ; }
Code	{ str . getChars ( this , str , buffer , size ) ; }
Distance : 2

90
Tree	{ str . getChars ( Cartesian3D.ZERO , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( Cartesian3D.ZERO , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

91
Tree	{ getChars ( strLen , ModifyType.CEILING , false ) ; }
Code	{ getChars ( strLen , ModifyType.CEILING , false ) ; }
Distance : 7

92
Tree	{ buffer . getChars ( str , getChars () , this ) ; }
Code	{ buffer . getChars ( str , getChars () , this ) ; }
Distance : 6

93
Tree	{ str . getChars ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

94
Tree	str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Distance : 3

95
Tree	{ str . getChars ( null , strLen , strLen , size ) ; }
Code	{ str . getChars ( null , strLen , strLen , size ) ; }
Distance : 3

96
Tree	{ size . getChars ( false ) ; }
Code	{ size . getChars ( false ) ; }
Distance : 8

97
Tree	{ str . getChars ( mapper.start , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( mapper.start , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

98
Tree	{ getChars ( strLen , strLen , size , size ) ; }
Code	{ getChars ( strLen , strLen , size , size ) ; }
Distance : 5

99
Tree	{ str . getChars ( size , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( size , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

100
Tree	{ getChars ( STRING_CONSTANT , buffer , buffer , size ) ; }
Code	{ getChars ( STRING_CONSTANT , buffer , buffer , size ) ; }
Distance : 4

101
Tree	str . getChars ( NUMBER_CONSTANT , strLen , strLen , size ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , strLen , size ) ;
Distance : 4

102
Tree	{ buffer . getChars ( false ) ; }
Code	{ buffer . getChars ( false ) ; }
Distance : 8

103
Tree	{ str . getChars ( false , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( false , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT ) ; }
Distance : 4

104
Tree	{ getChars ( STRING_CONSTANT , str , str , size ) ; }
Code	{ getChars ( STRING_CONSTANT , str , str , size ) ; }
Distance : 5

105
Tree	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

106
Tree	{ str . getChars ( this , str , str , size ) ; }
Code	{ str . getChars ( this , str , str , size ) ; }
Distance : 3

107
Tree	{ str . getChars ( ComposableFunction.TAN , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( ComposableFunction.TAN , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

108
Tree	{ getChars ( strLen , strLen , size , str ) ; }
Code	{ getChars ( strLen , strLen , size , str ) ; }
Distance : 6

109
Tree	{ str . getChars ( str , size . getChars () , this ) ; }
Code	{ str . getChars ( str , size . getChars () , this ) ; }
Distance : 6

110
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , array.length , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , array.length , NUMBER_CONSTANT ) ; }
Distance : 4

111
Tree	{ getChars ( str , str , size , size ) ; }
Code	{ getChars ( str , str , size , size ) ; }
Distance : 5

112
Tree	{ str . getChars ( strLen , strLen ) ; }
Code	{ str . getChars ( strLen , strLen ) ; }
Distance : 6

113
Tree	{ str . getChars ( Level.FINE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( Level.FINE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

114
Tree	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

115
Tree	{ getChars ( buffer , strLen , size , size ) ; }
Code	{ getChars ( buffer , strLen , size , size ) ; }
Distance : 5

116
Tree	{ strLen . getChars ( false ) ; }
Code	{ strLen . getChars ( false ) ; }
Distance : 8

117
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT ) ; }
Distance : 4

118
Tree	{ str . getChars ( NUMBER_CONSTANT , buffer , buffer , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , buffer , buffer , size ) ; }
Distance : 1

119
Tree	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

120
Tree	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , array.length ) ; }
Code	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , array.length ) ; }
Distance : 6

121
Tree	{ printTo . getChars ( strLen , strLen ) ; }
Code	{ printTo . getChars ( strLen , strLen ) ; }
Distance : 7

122
Tree	{ str . getChars ( ComposableFunction.TAN , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( ComposableFunction.TAN , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

123
Tree	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

124
Tree	{ str . getChars ( str , strLen , buffer , STRING_CONSTANT ) ; }
Code	{ str . getChars ( str , strLen , buffer , STRING_CONSTANT ) ; }
Distance : 3

125
Tree	{ getChars ( STRING_CONSTANT , str , buffer , str ) ; }
Code	{ getChars ( STRING_CONSTANT , str , buffer , str ) ; }
Distance : 5

126
Tree	{ str . getChars ( this , strLen , size , str ) ; }
Code	{ str . getChars ( this , strLen , size , str ) ; }
Distance : 4

127
Tree	{ str . getChars ( Cartesian3D.ZERO , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( Cartesian3D.ZERO , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

128
Tree	{ str . getChars ( false , NUMBER_CONSTANT , array.length , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( false , NUMBER_CONSTANT , array.length , NUMBER_CONSTANT ) ; }
Distance : 4

129
Tree	{ str . getChars ( StringUtils.EMPTY , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( StringUtils.EMPTY , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

130
Tree	{ getChars ( STRING_CONSTANT , str , buffer , size ) ; }
Code	{ getChars ( STRING_CONSTANT , str , buffer , size ) ; }
Distance : 4

131
Tree	{ getChars ( strLen , strLen , buffer , size , size , size ) ; }
Code	{ getChars ( strLen , strLen , buffer , size , size , size ) ; }
Distance : 8

132
Tree	{ str . getChars ( str , strLen ) ; }
Code	{ str . getChars ( str , strLen ) ; }
Distance : 6

133
Tree	{ str . getChars ( null , strLen , str , size ) ; }
Code	{ str . getChars ( null , strLen , str , size ) ; }
Distance : 3

134
Tree	{ str . getChars ( mapper.start , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( mapper.start , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

135
Tree	{ getChars ( STRING_CONSTANT , strLen , buffer , size ) ; }
Code	{ getChars ( STRING_CONSTANT , strLen , buffer , size ) ; }
Distance : 4

136
Tree	{ getChars ( strLen , DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT , false ) ; }
Code	{ getChars ( strLen , DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT , false ) ; }
Distance : 7

137
Tree	{ str . getChars ( Cartesian3D.ZERO , array.length ) ; }
Code	{ str . getChars ( Cartesian3D.ZERO , array.length ) ; }
Distance : 6

138
Tree	{ str . getChars ( mapper.start , array.length ) ; }
Code	{ str . getChars ( mapper.start , array.length ) ; }
Distance : 6

139
Tree	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

140
Tree	{ str . getChars ( this , strLen , size , size ) ; }
Code	{ str . getChars ( this , strLen , size , size ) ; }
Distance : 3

141
Tree	str . getChars ( NUMBER_CONSTANT , buffer , buffer , size ) ;
Code	str . getChars ( NUMBER_CONSTANT , buffer , buffer , size ) ;
Distance : 3

142
Tree	{ str . getChars ( Cartesian3D.ZERO , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( Cartesian3D.ZERO , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

143
Tree	{ str . getChars ( size , strLen , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( size , strLen , size , STRING_CONSTANT ) ; }
Distance : 4

144
Tree	{ str . getChars ( str , buffer , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( str , buffer , size , STRING_CONSTANT ) ; }
Distance : 4

145
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , Character , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , Character , NUMBER_CONSTANT ) ; }
Distance : 4

146
Tree	{ getChars ( strLen , str , size , size , size , size ) ; }
Code	{ getChars ( strLen , str , size , size , size , size ) ; }
Distance : 9

147
Tree	{ str . getChars ( StringUtils.EMPTY , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( StringUtils.EMPTY , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

148
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , str , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , str , size ) ; }
Distance : 2

149
Tree	{ str . getChars ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

150
Tree	{ getChars ( STRING_CONSTANT , str , buffer , buffer ) ; }
Code	{ getChars ( STRING_CONSTANT , str , buffer , buffer ) ; }
Distance : 5

151
Tree	{ str . getChars ( width , getChars () , this ) ; }
Code	{ str . getChars ( width , getChars () , this ) ; }
Distance : 5

152
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , CompilerTestCase.LINE_JOINER , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , CompilerTestCase.LINE_JOINER , NUMBER_CONSTANT ) ; }
Distance : 4

153
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , ToStringContext.TO_STRING , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , ToStringContext.TO_STRING , NUMBER_CONSTANT ) ; }
Distance : 4

154
Tree	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , array.length ) ; }
Code	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , array.length ) ; }
Distance : 6

155
Tree	{ str . getChars ( str , strLen , str , STRING_CONSTANT ) ; }
Code	{ str . getChars ( str , strLen , str , STRING_CONSTANT ) ; }
Distance : 4

156
Tree	{ getChars ( str , strLen , size , values.length ) ; }
Code	{ getChars ( str , strLen , size , values.length ) ; }
Distance : 6

157
Tree	{ str . getChars ( strLen , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( strLen , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

158
Tree	{ str . getChars ( this , strLen , buffer , size ) ; }
Code	{ str . getChars ( this , strLen , buffer , size ) ; }
Distance : 2

159
Tree	{ str . getChars ( null , str , buffer , str ) ; }
Code	{ str . getChars ( null , str , buffer , str ) ; }
Distance : 3

160
Tree	{ str . getChars ( strLen , getChars () , this ) ; }
Code	{ str . getChars ( strLen , getChars () , this ) ; }
Distance : 5

161
Tree	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

162
Tree	{ getChars ( STRING_CONSTANT , strLen , str , size ) ; }
Code	{ getChars ( STRING_CONSTANT , strLen , str , size ) ; }
Distance : 5

163
Tree	{ str . getChars ( str , str . getChars () , this ) ; }
Code	{ str . getChars ( str , str . getChars () , this ) ; }
Distance : 6

164
Tree	{ size . getChars ( str , strLen . getChars () , this ) ; }
Code	{ size . getChars ( str , strLen . getChars () , this ) ; }
Distance : 7

165
Tree	{ width . getChars ( false ) ; }
Code	{ width . getChars ( false ) ; }
Distance : 8

166
Tree	{ getChars ( strLen , strLen , size , Integer ) ; }
Code	{ getChars ( strLen , strLen , size , Integer ) ; }
Distance : 6

167
Tree	{ str . getChars ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

168
Tree	{ size . getChars ( strLen , getChars () , this ) ; }
Code	{ size . getChars ( strLen , getChars () , this ) ; }
Distance : 6

169
Tree	{ strLen . getChars ( strLen , getChars () , this ) ; }
Code	{ strLen . getChars ( strLen , getChars () , this ) ; }
Distance : 6

170
Tree	{ getChars ( strLen , EscapeUtils.ESCAPE_JAVA , false ) ; }
Code	{ getChars ( strLen , EscapeUtils.ESCAPE_JAVA , false ) ; }
Distance : 7

171
Tree	{ size . getChars ( null , strLen , buffer , size ) ; }
Code	{ size . getChars ( null , strLen , buffer , size ) ; }
Distance : 3

172
Tree	{ str . getChars ( this , strLen , size , buffer ) ; }
Code	{ str . getChars ( this , strLen , size , buffer ) ; }
Distance : 4

173
Tree	{ str . getChars ( str , buffer . getChars () , this ) ; }
Code	{ str . getChars ( str , buffer . getChars () , this ) ; }
Distance : 6

174
Tree	{ str . getChars ( size , getChars () , this ) ; }
Code	{ str . getChars ( size , getChars () , this ) ; }
Distance : 5

175
Tree	str . getChars ( NUMBER_CONSTANT , str , buffer , str ) ;
Code	str . getChars ( NUMBER_CONSTANT , str , buffer , str ) ;
Distance : 4

176
Tree	size . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Code	size . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Distance : 4

177
Tree	{ str . getChars ( NUMBER_CONSTANT , str , buffer , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , str , buffer , str ) ; }
Distance : 2

178
Tree	{ str . getChars ( strLen , strLen . getChars () , this ) ; }
Code	{ str . getChars ( strLen , strLen . getChars () , this ) ; }
Distance : 6

179
Tree	{ getChars ( STRING_CONSTANT , strLen , strLen , size ) ; }
Code	{ getChars ( STRING_CONSTANT , strLen , strLen , size ) ; }
Distance : 5

180
Tree	{ str . getChars ( NUMBER_CONSTANT , str , buffer , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , str , buffer , buffer ) ; }
Distance : 2

181
Tree	{ str . getChars ( this , strLen , buffer , str ) ; }
Code	{ str . getChars ( this , strLen , buffer , str ) ; }
Distance : 3

182
Tree	{ toUpperCase . getChars ( str , strLen ) ; }
Code	{ toUpperCase . getChars ( str , strLen ) ; }
Distance : 7

183
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , size , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , size , size ) ; }
Distance : 2

184
Tree	{ str . getChars ( buffer , strLen , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( buffer , strLen , size , STRING_CONSTANT ) ; }
Distance : 4

185
Tree	{ str . getChars ( LocalizedFormats.NO_DATA , array.length ) ; }
Code	{ str . getChars ( LocalizedFormats.NO_DATA , array.length ) ; }
Distance : 6

186
Tree	str . getChars ( NUMBER_CONSTANT , str , buffer , buffer ) ;
Code	str . getChars ( NUMBER_CONSTANT , str , buffer , buffer ) ;
Distance : 4

187
Tree	{ str . getChars ( buffer , getChars () , this ) ; }
Code	{ str . getChars ( buffer , getChars () , this ) ; }
Distance : 5

188
Tree	{ str . getChars ( strLen , str , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( strLen , str , size , STRING_CONSTANT ) ; }
Distance : 4

189
Tree	{ str . getChars ( this , strLen , str , size ) ; }
Code	{ str . getChars ( this , strLen , str , size ) ; }
Distance : 3

190
Tree	{ str . getChars ( size , strLen . getChars () , this ) ; }
Code	{ str . getChars ( size , strLen . getChars () , this ) ; }
Distance : 6

191
Tree	{ str . getChars ( strLen , buffer , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( strLen , buffer , size , STRING_CONSTANT ) ; }
Distance : 4

192
Tree	{ getChars ( str , strLen , buffer , size ) ; }
Code	{ getChars ( str , strLen , buffer , size ) ; }
Distance : 4

193
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , strLen , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , strLen , size ) ; }
Distance : 2

194
Tree	{ str . getChars ( buffer , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( buffer , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

195
Tree	{ size . getChars ( str , getChars () , this ) ; }
Code	{ size . getChars ( str , getChars () , this ) ; }
Distance : 6

196
Tree	{ size . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ size . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

197
Tree	{ str . getChars ( buffer , strLen . getChars () , this ) ; }
Code	{ str . getChars ( buffer , strLen . getChars () , this ) ; }
Distance : 6

198
Tree	{ str . getChars ( str , strLen . getChars () , this ) ; }
Code	{ str . getChars ( str , strLen . getChars () , this ) ; }
Distance : 6

199
Tree	{ width . getChars ( true ) ; }
Code	{ width . getChars ( true ) ; }
Distance : 8

========================================================================


========================================================================
Example Number: 38
Parent Code is: 
{ return cAvailableLocaleSet . contains ( locale ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return availableLocaleList () . contains ( locale ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=cAvailableLocaleSet}) (235{val=.}) (802{val=contains}) (214{val=(}) (800{val=locale}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=availableLocaleList}) (216{val=()})) (235{val=.}) (802{val=contains}) (214{val=(}) (800{val=locale}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/57/parent/src_java_org_apache_commons_lang_LocaleUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return null ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return null ; }
Distance : 6

1
Tree	{ return locale . contains ( ( locale ) locale ) ; }
Code	{ return locale . contains ( ( locale ) locale ) ; }
Distance : 5

2
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

3
Tree	{ return cAvailableLocaleSet . contains ( locale , true ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , true ) ; }
Distance : 4

4
Tree	{ locale . contains ( locale ) ; return return; ; }
Code	{ locale . contains ( locale ) ; return return; ; }
Distance : 6

5
Tree	{ contains ( locale ) ; return false ; }
Code	{ contains ( locale ) ; return false ; }
Distance : 7

6
Tree	{ return cAvailableLocaleSet . contains ( locale , false ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , false ) ; }
Distance : 4

7
Tree	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Distance : 4

8
Tree	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Code	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Distance : 4

9
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return null ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return null ; }
Distance : 6

10
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return false ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return false ; }
Distance : 6

11
Tree	{ return cAvailableLocaleSet . contains ( locale , false ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , false ) ; }
Distance : 4

12
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( DiagnosticGroups.MISSING_OVERRIDE ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( DiagnosticGroups.MISSING_OVERRIDE ) ; }
Distance : 7

13
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return false ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return false ; }
Distance : 6

14
Tree	{ return locale . contains ( locale , false ) ; }
Code	{ return locale . contains ( locale , false ) ; }
Distance : 4

15
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( CheckLevel.OFF ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( CheckLevel.OFF ) ; }
Distance : 7

16
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

17
Tree	{ return ( locale ) locale . contains ( locale ) ; }
Code	{ return ( locale ) locale . contains ( locale ) ; }
Distance : 4

18
Tree	{ return locale . contains ( locale , locale ) ; }
Code	{ return locale . contains ( locale , locale ) ; }
Distance : 4

19
Tree	{ locale . contains ( locale ) ; return false ; }
Code	{ locale . contains ( locale ) ; return false ; }
Distance : 6

20
Tree	{ return locale . contains () ; }
Code	{ return locale . contains () ; }
Distance : 5

21
Tree	{ return cAvailableLocaleSet . contains () ; } toString
Code	{ return cAvailableLocaleSet . contains () ; } toString
Distance : 6

22
Tree	{ return locale . contains () ; }
Code	{ return locale . contains () ; }
Distance : 5

23
Tree	{ return locale . contains ( ( locale ) locale ) ; }
Code	{ return locale . contains ( ( locale ) locale ) ; }
Distance : 5

24
Tree	{ return locale . contains ( locale ) . contains () ; }
Code	{ return locale . contains ( locale ) . contains () ; }
Distance : 5

25
Tree	{ return cAvailableLocaleSet . contains () ; } options
Code	{ return cAvailableLocaleSet . contains () ; } options
Distance : 6

26
Tree	{ return locale . contains ( locale ) . contains () ; }
Code	{ return locale . contains ( locale ) . contains () ; }
Distance : 5

27
Tree	{ return contains ( locale ) ; } T
Code	{ return contains ( locale ) ; } T
Distance : 4

28
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return null ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return null ; }
Distance : 6

29
Tree	{ return cAvailableLocaleSet . contains ( locale , Locale.US ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , Locale.US ) ; }
Distance : 4

30
Tree	{ return locale . contains ( locale ) . contains () ; }
Code	{ return locale . contains ( locale ) . contains () ; }
Distance : 5

31
Tree	{ return cAvailableLocaleSet . contains ( locale . locale ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale . locale ( locale ) ) ; }
Distance : 7

32
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return return; ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return return; ; }
Distance : 6

33
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

34
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( Nullability.IMPLICIT ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( Nullability.IMPLICIT ) ; }
Distance : 7

35
Tree	{ return contains () ; } Test
Code	{ return contains () ; } Test
Distance : 7

36
Tree	{ return cAvailableLocaleSet . contains ( locale , IncrementalCheckMode.GENERATE_IJS ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , IncrementalCheckMode.GENERATE_IJS ) ; }
Distance : 4

37
Tree	{ return locale . contains ( locale ) . contains () ; }
Code	{ return locale . contains ( locale ) . contains () ; }
Distance : 5

38
Tree	{ return locale . contains () . contains ( locale ) ; }
Code	{ return locale . contains () . contains ( locale ) ; }
Distance : 3

39
Tree	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Distance : 4

40
Tree	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Distance : 3

41
Tree	{ return contains () ; } ParamChecks
Code	{ return contains () ; } ParamChecks
Distance : 7

42
Tree	{ return cAvailableLocaleSet . contains ( locale , Null.NULL ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , Null.NULL ) ; }
Distance : 4

43
Tree	{ return locale . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) ; }
Distance : 2

44
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return true ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return true ; }
Distance : 6

45
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Distance : 3

46
Tree	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Code	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Distance : 4

47
Tree	{ return contains ( locale ) ; }
Code	{ return contains ( locale ) ; }
Distance : 3

48
Tree	{ contains ( locale ) ; return true ; }
Code	{ contains ( locale ) ; return true ; }
Distance : 7

49
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Distance : 5

50
Tree	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Distance : 6

51
Tree	{ return contains ( locale ) ; } &&
Code	{ return contains ( locale ) ; } &&
Distance : 4

52
Tree	{ return contains () ; }
Code	{ return contains () ; }
Distance : 6

53
Tree	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Distance : 4

54
Tree	{ return locale . contains ( locale . locale ( locale ) ) ; }
Code	{ return locale . contains ( locale . locale ( locale ) ) ; }
Distance : 7

55
Tree	{ return contains ( locale ) ; }
Code	{ return contains ( locale ) ; }
Distance : 3

56
Tree	{ return ( locale ) ; return true ; }
Code	{ return ( locale ) ; return true ; }
Distance : 7

57
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Distance : 5

58
Tree	{ return ( locale ) ; return true ; }
Code	{ return ( locale ) ; return true ; }
Distance : 7

59
Tree	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Distance : 4

60
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

61
Tree	{ return cAvailableLocaleSet . contains ( locale , p2.vector ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , p2.vector ) ; }
Distance : 4

62
Tree	{ return cAvailableLocaleSet . contains ( locale , b1.value ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , b1.value ) ; }
Distance : 4

63
Tree	{ return cAvailableLocaleSet . contains ( locale , Any.ANY ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , Any.ANY ) ; }
Distance : 4

64
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

65
Tree	{ return locale . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) ; }
Distance : 2

66
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Distance : 3

67
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Distance : 5

68
Tree	{ return contains () ; } -
Code	{ return contains () ; } -
Distance : 7

69
Tree	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Code	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Distance : 4

70
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Distance : 5

71
Tree	{ return ( locale ) locale . contains ( locale ) ; }
Code	{ return ( locale ) locale . contains ( locale ) ; }
Distance : 4

72
Tree	{ return contains () ; } Preconditions
Code	{ return contains () ; } Preconditions
Distance : 7

73
Tree	{ return ( locale ) ; return false ; } Math
Code	{ return ( locale ) ; return false ; } Math
Distance : 8

74
Tree	{ return locale . contains ( locale , false ) ; }
Code	{ return locale . contains ( locale , false ) ; }
Distance : 4

75
Tree	{ return ( locale ) locale . contains ( locale ) ; }
Code	{ return ( locale ) locale . contains ( locale ) ; }
Distance : 4

76
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

77
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Distance : 5

78
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Distance : 3

79
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

80
Tree	{ return cAvailableLocaleSet . contains () ; }
Code	{ return cAvailableLocaleSet . contains () ; }
Distance : 5

81
Tree	{ return cAvailableLocaleSet . contains ( locale . locale ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale . locale ( locale ) ) ; }
Distance : 7

82
Tree	{ return locale . contains ( locale , locale ) ; }
Code	{ return locale . contains ( locale , locale ) ; }
Distance : 4

83
Tree	{ return contains ( locale ) ; } p
Code	{ return contains ( locale ) ; } p
Distance : 4

84
Tree	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Code	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Distance : 4

85
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( TernaryValue.UNKNOWN ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( TernaryValue.UNKNOWN ) ; }
Distance : 7

86
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Distance : 5

87
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

88
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Distance : 6

89
Tree	{ return ( locale ) locale . contains ( locale ) ; }
Code	{ return ( locale ) locale . contains ( locale ) ; }
Distance : 4

90
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return super(); ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return super(); ; }
Distance : 6

91
Tree	{ return locale . contains ( locale . contains ( locale ) ) ; }
Code	{ return locale . contains ( locale . contains ( locale ) ) ; }
Distance : 6

92
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return continue; ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return continue; ; }
Distance : 6

93
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

94
Tree	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Distance : 3

95
Tree	{ contains ( locale ) ; return true ; }
Code	{ contains ( locale ) ; return true ; }
Distance : 7

96
Tree	{ return contains ( locale . locale ( locale ) ) ; }
Code	{ return contains ( locale . locale ( locale ) ) ; }
Distance : 5

97
Tree	{ return locale . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) ; }
Distance : 2

98
Tree	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Distance : 6

99
Tree	{ return contains ( locale ) ; } options
Code	{ return contains ( locale ) ; } options
Distance : 4

100
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return true ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return true ; }
Distance : 6

101
Tree	{ return locale . contains ( locale , false ) ; }
Code	{ return locale . contains ( locale , false ) ; }
Distance : 4

102
Tree	{ return cAvailableLocaleSet . contains ( locale , Locale.UK ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , Locale.UK ) ; }
Distance : 4

103
Tree	{ locale . contains ( locale ) ; return false ; }
Code	{ locale . contains ( locale ) ; return false ; }
Distance : 6

104
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Distance : 5

105
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Distance : 5

106
Tree	{ return cAvailableLocaleSet . contains ( locale , false ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , false ) ; }
Distance : 4

107
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( Null.NULL ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( Null.NULL ) ; }
Distance : 7

108
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( Locale.UK ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( Locale.UK ) ; }
Distance : 7

109
Tree	{ return cAvailableLocaleSet . contains ( locale , NotNull.NOT_NULL ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , NotNull.NOT_NULL ) ; }
Distance : 4

110
Tree	{ return cAvailableLocaleSet . contains ( locale . locale ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale . locale ( locale ) ) ; }
Distance : 7

111
Tree	{ return contains () ; } Class
Code	{ return contains () ; } Class
Distance : 7

112
Tree	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Distance : 6

113
Tree	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Code	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Distance : 4

114
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

115
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

116
Tree	{ return contains ( locale ) ; }
Code	{ return contains ( locale ) ; }
Distance : 3

117
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

118
Tree	{ return cAvailableLocaleSet . contains () ; } p
Code	{ return cAvailableLocaleSet . contains () ; } p
Distance : 6

119
Tree	{ return ( locale ) ; return false ; } wanted
Code	{ return ( locale ) ; return false ; } wanted
Distance : 8

120
Tree	{ locale . contains ( locale ) ; return false ; }
Code	{ locale . contains ( locale ) ; return false ; }
Distance : 6

121
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

122
Tree	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Distance : 4

123
Tree	{ return locale . contains ( locale , true ) ; }
Code	{ return locale . contains ( locale , true ) ; }
Distance : 4

124
Tree	{ contains ( locale ) ; return false ; }
Code	{ contains ( locale ) ; return false ; }
Distance : 7

125
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

126
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return false ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return false ; }
Distance : 6

127
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

128
Tree	{ return contains ( locale ) ; } source
Code	{ return contains ( locale ) ; } source
Distance : 4

129
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

130
Tree	{ return contains ( locale ) ; } toString
Code	{ return contains ( locale ) ; } toString
Distance : 4

131
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( Locale.US ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( Locale.US ) ; }
Distance : 7

132
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( getMaximumValue ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( getMaximumValue ) ; }
Distance : 7

133
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( NotNull.NOT_NULL ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( NotNull.NOT_NULL ) ; }
Distance : 7

134
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return break; ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return break; ; }
Distance : 6

135
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Distance : 3

136
Tree	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Distance : 3

137
Tree	{ locale . contains ( locale ) ; return true ; }
Code	{ locale . contains ( locale ) ; return true ; }
Distance : 6

138
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

139
Tree	{ return ( locale ) ; return false ; }
Code	{ return ( locale ) ; return false ; }
Distance : 7

140
Tree	{ return cAvailableLocaleSet . contains () ; } T
Code	{ return cAvailableLocaleSet . contains () ; } T
Distance : 6

141
Tree	{ return locale . contains ( locale , locale ) ; }
Code	{ return locale . contains ( locale , locale ) ; }
Distance : 4

142
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Distance : 5

143
Tree	{ return locale . contains () . contains ( locale ) ; }
Code	{ return locale . contains () . contains ( locale ) ; }
Distance : 3

144
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Distance : 5

145
Tree	{ return locale . contains () . contains ( locale ) ; }
Code	{ return locale . contains () . contains ( locale ) ; }
Distance : 3

146
Tree	{ return this . locale . contains ( locale ) ; }
Code	{ return this . locale . contains ( locale ) ; }
Distance : 3

147
Tree	{ return ( int ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( int ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

148
Tree	{ return ( double ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( double ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

149
Tree	{ return contains ( locale ) ; }
Code	{ return contains ( locale ) ; }
Distance : 3

150
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

151
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

152
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

153
Tree	{ return contains () ; }
Code	{ return contains () ; }
Distance : 6

154
Tree	{ return ( char ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( char ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

155
Tree	{ return ( short ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( short ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

156
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

157
Tree	{ return ( void ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( void ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

158
Tree	{ return ( locale ) ; return false ; }
Code	{ return ( locale ) ; return false ; }
Distance : 7

159
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Distance : 3

160
Tree	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Code	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Distance : 4

161
Tree	{ return ( long ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( long ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

162
Tree	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Distance : 3

163
Tree	{ return ( byte ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( byte ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

164
Tree	{ return ( boolean ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( boolean ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

165
Tree	{ return this . cAvailableLocaleSet . contains ( locale ) ; } Math
Code	{ return this . cAvailableLocaleSet . contains ( locale ) ; } Math
Distance : 4

166
Tree	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Distance : 4

167
Tree	{ locale . contains ( locale ) ; return null ; }
Code	{ locale . contains ( locale ) ; return null ; }
Distance : 6

168
Tree	{ return ( int ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( int ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

169
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return false ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return false ; }
Distance : 6

170
Tree	{ return this . locale . contains ( locale ) ; }
Code	{ return this . locale . contains ( locale ) ; }
Distance : 3

171
Tree	{ return ( float ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( float ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

172
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Distance : 3

173
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

174
Tree	{ return this . locale . contains ( locale ) ; }
Code	{ return this . locale . contains ( locale ) ; }
Distance : 3

175
Tree	{ return locale . contains ( ( locale ) locale ) ; }
Code	{ return locale . contains ( ( locale ) locale ) ; }
Distance : 5

176
Tree	{ return cAvailableLocaleSet . contains ( locale , iValues.length ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , iValues.length ) ; }
Distance : 4

177
Tree	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Distance : 4

178
Tree	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Distance : 6

179
Tree	{ return cAvailableLocaleSet . contains () ; }
Code	{ return cAvailableLocaleSet . contains () ; }
Distance : 5

180
Tree	{ return cAvailableLocaleSet . contains ( locale , false ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , false ) ; }
Distance : 4

181
Tree	{ return locale . contains ( locale , locale ) ; }
Code	{ return locale . contains ( locale , locale ) ; }
Distance : 4

182
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Distance : 5

183
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Distance : 5

184
Tree	{ return cAvailableLocaleSet . contains () ; } &&
Code	{ return cAvailableLocaleSet . contains () ; } &&
Distance : 6

185
Tree	{ return locale . contains () . contains ( locale ) ; }
Code	{ return locale . contains () . contains ( locale ) ; }
Distance : 3

186
Tree	{ return cAvailableLocaleSet . contains ( locale , true ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , true ) ; }
Distance : 4

187
Tree	{ return cAvailableLocaleSet . contains () ; } source
Code	{ return cAvailableLocaleSet . contains () ; } source
Distance : 6

188
Tree	{ return locale . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) ; }
Distance : 2

189
Tree	{ return this . locale . contains ( locale ) ; }
Code	{ return this . locale . contains ( locale ) ; }
Distance : 3

190
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } wanted
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } wanted
Distance : 3

191
Tree	{ return contains () ; } MathRuntimeException
Code	{ return contains () ; } MathRuntimeException
Distance : 7

192
Tree	{ return contains () ; } {}
Code	{ return contains () ; } {}
Distance : 7

193
Tree	{ return this . cAvailableLocaleSet . contains ( locale ) ; } wanted
Code	{ return this . cAvailableLocaleSet . contains ( locale ) ; } wanted
Distance : 4

194
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

195
Tree	{ return cAvailableLocaleSet . contains ( locale . locale ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale . locale ( locale ) ) ; }
Distance : 7

196
Tree	{ return locale . contains ( ( locale ) locale ) ; }
Code	{ return locale . contains ( ( locale ) locale ) ; }
Distance : 5

197
Tree	{ locale . contains ( locale ) ; return super(); ; }
Code	{ locale . contains ( locale ) ; return super(); ; }
Distance : 6

198
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } Math
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } Math
Distance : 3

199
Tree	{ return contains () ; } f
Code	{ return contains () ; } f
Distance : 7

========================================================================


========================================================================
Example Number: 39
Parent Code is: 
{ escapeJavaStyleString ( out , str , true ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ escapeJavaStyleString ( out , str , true , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=true}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ escapeJavaStyleString ( str , str , out ) ; }
Code	{ escapeJavaStyleString ( str , str , out ) ; }
Distance : 4

1
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } wanted
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } wanted
Distance : 12

2
Tree	{ str . escapeJavaStyleString ( str , out ) ; } wanted
Code	{ str . escapeJavaStyleString ( str , out ) ; } wanted
Distance : 8

3
Tree	{ str . escapeJavaStyleString ( str , out ) ; } Math
Code	{ str . escapeJavaStyleString ( str , out ) ; } Math
Distance : 8

4
Tree	{ escapeJavaStyleString ( out , out , out ) ; } wanted
Code	{ escapeJavaStyleString ( out , out , out ) ; } wanted
Distance : 5

5
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 11

6
Tree	{ out . escapeJavaStyleString ( str , str , this ) ; }
Code	{ out . escapeJavaStyleString ( str , str , this ) ; }
Distance : 6

7
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , out ) ; }
Distance : 4

8
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , str , out , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , str , out , str ) ; }
Distance : 3

9
Tree	{ escapeJavaStyleString ( out , str , str ) ; }
Code	{ escapeJavaStyleString ( out , str , str ) ; }
Distance : 3

10
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } Math
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } Math
Distance : 12

11
Tree	{ escapeJavaStyleString ( str , return; ) ; }
Code	{ escapeJavaStyleString ( str , return; ) ; }
Distance : 5

12
Tree	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , str ) ; }
Code	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , str ) ; }
Distance : 9

13
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( out ) , null ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( out ) , null ) ; }
Distance : 7

14
Tree	{ escapeJavaStyleString ( out , default: ) ; }
Code	{ escapeJavaStyleString ( out , default: ) ; }
Distance : 5

15
Tree	{ escapeJavaStyleString ( out , str . escapeJavaStyleString ( str ) , null ) ; }
Code	{ escapeJavaStyleString ( out , str . escapeJavaStyleString ( str ) , null ) ; }
Distance : 6

16
Tree	{ out . this . escapeJavaStyleString ( str , out , out ) ; }
Code	{ out . this . escapeJavaStyleString ( str , out , out ) ; }
Distance : 8

17
Tree	{ escapeJavaStyleString ( out , out , out , out ) ; }
Code	{ escapeJavaStyleString ( out , out , out , out ) ; }
Distance : 3

18
Tree	{ str . this . escapeJavaStyleString ( str , str , str ) ; }
Code	{ str . this . escapeJavaStyleString ( str , str , str ) ; }
Distance : 8

19
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 7

20
Tree	{ str . this . escapeJavaStyleString ( out , out , out ) ; }
Code	{ str . this . escapeJavaStyleString ( out , out , out ) ; }
Distance : 8

21
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , str ) ; }
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , str ) ; }
Distance : 9

22
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } p
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } p
Distance : 8

23
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 11

24
Tree	{ EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str , out ) ; }
Distance : 7

25
Tree	{ str . escapeJavaStyleString ( str ? Es6ToEs3Util.CANNOT_CONVERT_YET : FunctionFlavor.NORMAL ) ; }
Code	{ str . escapeJavaStyleString ( str ? Es6ToEs3Util.CANNOT_CONVERT_YET : FunctionFlavor.NORMAL ) ; }
Distance : 8

26
Tree	{ str . escapeJavaStyleString ( str ? Strictness.SILENT : FunctionFlavor.NORMAL ) ; }
Code	{ str . escapeJavaStyleString ( str ? Strictness.SILENT : FunctionFlavor.NORMAL ) ; }
Distance : 8

27
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } wanted
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } wanted
Distance : 10

28
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , str ) ; } Math
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , str ) ; } Math
Distance : 5

29
Tree	{ str () . escapeJavaStyleString ( str , out ) ; } Math
Code	{ str () . escapeJavaStyleString ( str , out ) ; } Math
Distance : 9

30
Tree	{ str () . escapeJavaStyleString ( str , out ) ; } wanted
Code	{ str () . escapeJavaStyleString ( str , out ) ; } wanted
Distance : 9

31
Tree	{ str . escapeJavaStyleString ( str , out , this ) ; }
Code	{ str . escapeJavaStyleString ( str , out , this ) ; }
Distance : 6

32
Tree	{ array.length . escapeJavaStyleString ( str , out ) ; }
Code	{ array.length . escapeJavaStyleString ( str , out ) ; }
Distance : 7

33
Tree	{ escapeJavaStyleString ( out , out , out ) ; }
Code	{ escapeJavaStyleString ( out , out , out ) ; }
Distance : 4

34
Tree	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , str ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , str ) ; }
Distance : 7

35
Tree	{ out . escapeJavaStyleString ( str ) ; }
Code	{ out . escapeJavaStyleString ( str ) ; }
Distance : 8

36
Tree	{ out . escapeJavaStyleString ( str ? Strictness.SILENT : FunctionFlavor.NORMAL ) ; }
Code	{ out . escapeJavaStyleString ( str ? Strictness.SILENT : FunctionFlavor.NORMAL ) ; }
Distance : 8

37
Tree	{ out . escapeJavaStyleString ( str ? Es6ToEs3Util.CANNOT_CONVERT_YET : FunctionFlavor.NORMAL ) ; }
Code	{ out . escapeJavaStyleString ( str ? Es6ToEs3Util.CANNOT_CONVERT_YET : FunctionFlavor.NORMAL ) ; }
Distance : 8

38
Tree	{ str . escapeJavaStyleString ( out , out ) ; }
Code	{ str . escapeJavaStyleString ( out , out ) ; }
Distance : 7

39
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , str ) ; }
Distance : 4

40
Tree	{ out . escapeJavaStyleString ( out , out ) ; }
Code	{ out . escapeJavaStyleString ( out , out ) ; }
Distance : 7

41
Tree	{ escapeJavaStyleString ( out , out , out , false ) ; }
Code	{ escapeJavaStyleString ( out , out , out , false ) ; }
Distance : 3

42
Tree	{ out . escapeJavaStyleString ( str ? f.length : FunctionFlavor.NORMAL ) ; }
Code	{ out . escapeJavaStyleString ( str ? f.length : FunctionFlavor.NORMAL ) ; }
Distance : 8

43
Tree	{ str . escapeJavaStyleString ( str ? System.out : FunctionFlavor.NORMAL ) ; }
Code	{ str . escapeJavaStyleString ( str ? System.out : FunctionFlavor.NORMAL ) ; }
Distance : 8

44
Tree	{ out . escapeJavaStyleString ( str ? System.out : FunctionFlavor.NORMAL ) ; }
Code	{ out . escapeJavaStyleString ( str ? System.out : FunctionFlavor.NORMAL ) ; }
Distance : 8

45
Tree	{ str . escapeJavaStyleString ( str ? f.length : FunctionFlavor.NORMAL ) ; }
Code	{ str . escapeJavaStyleString ( str ? f.length : FunctionFlavor.NORMAL ) ; }
Distance : 8

46
Tree	{ escapeJavaStyleString ( out , str , true ) ; }
Code	{ escapeJavaStyleString ( out , str , true ) ; }
Distance : 2

47
Tree	{ escapeJavaStyleString ( str , out , false ) ; }
Code	{ escapeJavaStyleString ( str , out , false ) ; }
Distance : 4

48
Tree	{ str . escapeJavaStyleString ( str ? Strictness.SILENT : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) ; }
Code	{ str . escapeJavaStyleString ( str ? Strictness.SILENT : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) ; }
Distance : 8

49
Tree	{ str . escapeJavaStyleString ( str ? x.length : FunctionFlavor.NORMAL ) ; }
Code	{ str . escapeJavaStyleString ( str ? x.length : FunctionFlavor.NORMAL ) ; }
Distance : 8

50
Tree	{ str () . escapeJavaStyleString ( str , str ) ; }
Code	{ str () . escapeJavaStyleString ( str , str ) ; }
Distance : 8

51
Tree	{ str () . escapeJavaStyleString ( out , str ) ; }
Code	{ str () . escapeJavaStyleString ( out , str ) ; }
Distance : 7

52
Tree	{ out . this . escapeJavaStyleString ( out , out , out ) ; }
Code	{ out . this . escapeJavaStyleString ( out , out , out ) ; }
Distance : 8

53
Tree	{ escapeJavaStyleString ( str , str , out , false ) ; }
Code	{ escapeJavaStyleString ( str , str , out , false ) ; }
Distance : 3

54
Tree	{ out () . escapeJavaStyleString ( out , str ) ; }
Code	{ out () . escapeJavaStyleString ( out , str ) ; }
Distance : 7

55
Tree	{ str . escapeJavaStyleString ( out ) ; }
Code	{ str . escapeJavaStyleString ( out ) ; }
Distance : 8

56
Tree	{ out . escapeJavaStyleString ( out ) ; }
Code	{ out . escapeJavaStyleString ( out ) ; }
Distance : 8

57
Tree	{ str . escapeJavaStyleString ( str , str , this ) ; }
Code	{ str . escapeJavaStyleString ( str , str , this ) ; }
Distance : 6

58
Tree	{ str . escapeJavaStyleString ( out , str , this ) ; }
Code	{ str . escapeJavaStyleString ( out , str , this ) ; }
Distance : 5

59
Tree	{ escapeJavaStyleString ( out , str , out ) ; }
Code	{ escapeJavaStyleString ( out , str , out ) ; }
Distance : 3

60
Tree	{ escapeJavaStyleString ( out , str , str , false ) ; }
Code	{ escapeJavaStyleString ( out , str , str , false ) ; }
Distance : 2

61
Tree	{ out . this . escapeJavaStyleString ( str , str , out ) ; }
Code	{ out . this . escapeJavaStyleString ( str , str , out ) ; }
Distance : 8

62
Tree	{ escapeJavaStyleString ( out , continue; ) ; }
Code	{ escapeJavaStyleString ( out , continue; ) ; }
Distance : 5

63
Tree	{ escapeJavaStyleString ( out , out , str , true ) ; }
Code	{ escapeJavaStyleString ( out , out , str , true ) ; }
Distance : 2

64
Tree	{ str . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString ( str , str ) ; }
Distance : 7

65
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , out ) ; }
Distance : 4

66
Tree	{ escapeJavaStyleString ( out , out , str , false ) ; }
Code	{ escapeJavaStyleString ( out , out , str , false ) ; }
Distance : 3

67
Tree	{ str . escapeJavaStyleString ( null , str , out , str ) ; }
Code	{ str . escapeJavaStyleString ( null , str , out , str ) ; }
Distance : 5

68
Tree	{ escapeJavaStyleString ( str , out . escapeJavaStyleString ( str ) , null ) ; }
Code	{ escapeJavaStyleString ( str , out . escapeJavaStyleString ( str ) , null ) ; }
Distance : 8

69
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , null ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , null ) ; }
Distance : 7

70
Tree	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , str ) ; }
Distance : 9

71
Tree	{ escapeJavaStyleString ( str , null ) ; }
Code	{ escapeJavaStyleString ( str , null ) ; }
Distance : 5

72
Tree	{ str . escapeJavaStyleString ( out , out , this ) ; }
Code	{ str . escapeJavaStyleString ( out , out , this ) ; }
Distance : 6

73
Tree	{ out () . escapeJavaStyleString ( str , str ) ; }
Code	{ out () . escapeJavaStyleString ( str , str ) ; }
Distance : 8

74
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , return; ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , return; ) ; }
Distance : 7

75
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , str , str , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , str , str , out ) ; }
Distance : 3

76
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , super(); ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , super(); ) ; }
Distance : 7

77
Tree	{ escapeJavaStyleString ( out , out ) ; }
Code	{ escapeJavaStyleString ( out , out ) ; }
Distance : 5

78
Tree	{ escapeJavaStyleString ( out , out , false ) ; }
Code	{ escapeJavaStyleString ( out , out , false ) ; }
Distance : 4

79
Tree	{ out . escapeJavaStyleString ( str , out , this ) ; }
Code	{ out . escapeJavaStyleString ( str , out , this ) ; }
Distance : 6

80
Tree	{ escapeJavaStyleString ( str , out , out , false ) ; }
Code	{ escapeJavaStyleString ( str , out , out , false ) ; }
Distance : 4

81
Tree	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; } Math
Code	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; } Math
Distance : 10

82
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , str ) ; }
Distance : 9

83
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 11

84
Tree	{ str . escapeJavaStyleString ( out , str ) ; }
Code	{ str . escapeJavaStyleString ( out , str ) ; }
Distance : 6

85
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 9

86
Tree	{ escapeJavaStyleString ( str , out , true ) ; }
Code	{ escapeJavaStyleString ( str , out , true ) ; }
Distance : 3

87
Tree	{ str () . escapeJavaStyleString ( out , out ) ; }
Code	{ str () . escapeJavaStyleString ( out , out ) ; }
Distance : 8

88
Tree	{ str () . escapeJavaStyleString ( str , out ) ; }
Code	{ str () . escapeJavaStyleString ( str , out ) ; }
Distance : 8

89
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 11

90
Tree	{ out . escapeJavaStyleString ( null , str , out , str ) ; }
Code	{ out . escapeJavaStyleString ( null , str , out , str ) ; }
Distance : 5

91
Tree	{ maybeAddUsage . escapeJavaStyleString ( str , out ) ; }
Code	{ maybeAddUsage . escapeJavaStyleString ( str , out ) ; }
Distance : 7

92
Tree	{ escapeJavaStyleString ( str , str , true ) ; }
Code	{ escapeJavaStyleString ( str , str , true ) ; }
Distance : 3

93
Tree	{ out . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString ( str , str ) ; }
Distance : 7

94
Tree	{ out () . escapeJavaStyleString ( str , out ) ; }
Code	{ out () . escapeJavaStyleString ( str , out ) ; }
Distance : 8

95
Tree	{ SparseFieldMatrix . escapeJavaStyleString ( str , out ) ; }
Code	{ SparseFieldMatrix . escapeJavaStyleString ( str , out ) ; }
Distance : 7

96
Tree	{ escapeJavaStyleString ( out , null ) ; }
Code	{ escapeJavaStyleString ( out , null ) ; }
Distance : 5

97
Tree	{ LoessInterpolator . escapeJavaStyleString ( str , out ) ; }
Code	{ LoessInterpolator . escapeJavaStyleString ( str , out ) ; }
Distance : 7

98
Tree	{ escapeJavaStyleString ( out , str ) ; }
Code	{ escapeJavaStyleString ( out , str ) ; }
Distance : 4

99
Tree	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; } wanted
Code	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; } wanted
Distance : 10

100
Tree	{ lastIndexOf . escapeJavaStyleString ( str , out ) ; }
Code	{ lastIndexOf . escapeJavaStyleString ( str , out ) ; }
Distance : 7

101
Tree	{ translate . escapeJavaStyleString ( str , out ) ; }
Code	{ translate . escapeJavaStyleString ( str , out ) ; }
Distance : 7

102
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , str ) ; }
Distance : 4

103
Tree	{ out . escapeJavaStyleString ( out , str , this ) ; }
Code	{ out . escapeJavaStyleString ( out , str , this ) ; }
Distance : 5

104
Tree	{ escapeJavaStyleString ( out , str , out , str ) ; }
Code	{ escapeJavaStyleString ( out , str , out , str ) ; }
Distance : 2

105
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Distance : 11

106
Tree	{ escapeJavaStyleString ( out , out , str ) ; }
Code	{ escapeJavaStyleString ( out , out , str ) ; }
Distance : 4

107
Tree	{ escapeJavaStyleString ( str , str . escapeJavaStyleString ( str ) , null ) ; }
Code	{ escapeJavaStyleString ( str , str . escapeJavaStyleString ( str ) , null ) ; }
Distance : 7

108
Tree	{ escapeJavaStyleString ( str , out ) ; }
Code	{ escapeJavaStyleString ( str , out ) ; }
Distance : 5

109
Tree	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , out ) ; }
Distance : 7

110
Tree	{ str . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString ( str , out ) ; }
Distance : 7

111
Tree	{ escapeJavaStyleString ( out , return; ) ; }
Code	{ escapeJavaStyleString ( out , return; ) ; }
Distance : 5

112
Tree	{ escapeJavaStyleString ( out , out , false ) ; } wanted
Code	{ escapeJavaStyleString ( out , out , false ) ; } wanted
Distance : 5

113
Tree	{ setSeriesShapesVisible . escapeJavaStyleString ( str , out ) ; }
Code	{ setSeriesShapesVisible . escapeJavaStyleString ( str , out ) ; }
Distance : 7

114
Tree	{ out . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString ( str , out ) ; }
Distance : 7

115
Tree	{ escapeJavaStyleString ( out , str , false ) ; }
Code	{ escapeJavaStyleString ( out , str , false ) ; }
Distance : 3

116
Tree	{ escapeJavaStyleString ( out , out , out , str ) ; }
Code	{ escapeJavaStyleString ( out , out , out , str ) ; }
Distance : 3

117
Tree	{ str . escapeJavaStyleString ( null , str , str , str ) ; }
Code	{ str . escapeJavaStyleString ( null , str , str , str ) ; }
Distance : 5

118
Tree	{ str . escapeJavaStyleString ( null , out , out , str ) ; }
Code	{ str . escapeJavaStyleString ( null , out , out , str ) ; }
Distance : 6

119
Tree	{ escapeJavaStyleString ( out , out , true ) ; }
Code	{ escapeJavaStyleString ( out , out , true ) ; }
Distance : 3

120
Tree	{ str . escapeJavaStyleString ( str ) ; }
Code	{ str . escapeJavaStyleString ( str ) ; }
Distance : 8

121
Tree	{ escapeJavaStyleString ( out , out ) ; } T
Code	{ escapeJavaStyleString ( out , out ) ; } T
Distance : 6

122
Tree	{ out . escapeJavaStyleString ( null , str , str , str ) ; }
Code	{ out . escapeJavaStyleString ( null , str , str , str ) ; }
Distance : 5

123
Tree	{ escapeJavaStyleString ( out , out , str , str ) ; }
Code	{ escapeJavaStyleString ( out , out , str , str ) ; }
Distance : 3

124
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Distance : 11

125
Tree	{ out . escapeJavaStyleString ( null , out , out , str ) ; }
Code	{ out . escapeJavaStyleString ( null , out , out , str ) ; }
Distance : 6

126
Tree	{ escapeJavaStyleString ( str , out . escapeJavaStyleString ( out ) , null ) ; }
Code	{ escapeJavaStyleString ( str , out . escapeJavaStyleString ( out ) , null ) ; }
Distance : 8

127
Tree	{ escapeJavaStyleString ( out , super(); ) ; }
Code	{ escapeJavaStyleString ( out , super(); ) ; }
Distance : 5

128
Tree	{ out . escapeJavaStyleString ( out , out , this ) ; }
Code	{ out . escapeJavaStyleString ( out , out , this ) ; }
Distance : 6

129
Tree	{ out () . escapeJavaStyleString ( out , out ) ; }
Code	{ out () . escapeJavaStyleString ( out , out ) ; }
Distance : 8

130
Tree	{ out . this . escapeJavaStyleString ( str , str , str ) ; }
Code	{ out . this . escapeJavaStyleString ( str , str , str ) ; }
Distance : 8

131
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } T
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } T
Distance : 8

132
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , break; ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , break; ) ; }
Distance : 7

133
Tree	{ str . escapeJavaStyleString ( null , out , str , str ) ; }
Code	{ str . escapeJavaStyleString ( null , out , str , str ) ; }
Distance : 6

134
Tree	{ str . escapeJavaStyleString ( str , out , this ) ; } Math
Code	{ str . escapeJavaStyleString ( str , out , this ) ; } Math
Distance : 7

135
Tree	{ escapeJavaStyleString ( out , out , false ) ; } Math
Code	{ escapeJavaStyleString ( out , out , false ) ; } Math
Distance : 5

136
Tree	{ escapeJavaStyleString ( str , str ) ; }
Code	{ escapeJavaStyleString ( str , str ) ; }
Distance : 5

137
Tree	{ str . this . escapeJavaStyleString ( str , out , str ) ; }
Code	{ str . this . escapeJavaStyleString ( str , out , str ) ; }
Distance : 8

138
Tree	{ escapeJavaStyleString ( out , out ) ; } &&
Code	{ escapeJavaStyleString ( out , out ) ; } &&
Distance : 6

139
Tree	{ out . escapeJavaStyleString ( null , out , str , str ) ; }
Code	{ out . escapeJavaStyleString ( null , out , str , str ) ; }
Distance : 6

140
Tree	{ out . escapeJavaStyleString ( out , str ) ; }
Code	{ out . escapeJavaStyleString ( out , str ) ; }
Distance : 6

141
Tree	{ str . escapeJavaStyleString ( str , out , this ) ; } wanted
Code	{ str . escapeJavaStyleString ( str , out , this ) ; } wanted
Distance : 7

142
Tree	{ out . this . escapeJavaStyleString ( str , out , str ) ; }
Code	{ out . this . escapeJavaStyleString ( str , out , str ) ; }
Distance : 8

143
Tree	{ escapeJavaStyleString ( str , out , out ) ; }
Code	{ escapeJavaStyleString ( str , out , out ) ; }
Distance : 4

144
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 11

145
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 7

146
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Distance : 9

147
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Distance : 9

148
Tree	{ escapeJavaStyleString ( out , str , out , out ) ; }
Code	{ escapeJavaStyleString ( out , str , out , out ) ; }
Distance : 2

149
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 7

150
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , str , str , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , str , str , str ) ; }
Distance : 3

151
Tree	{ escapeJavaStyleString ( out , out ) ; } p
Code	{ escapeJavaStyleString ( out , out ) ; } p
Distance : 6

152
Tree	{ escapeJavaStyleString ( str , out , str ) ; }
Code	{ escapeJavaStyleString ( str , out , str ) ; }
Distance : 4

153
Tree	{ escapeJavaStyleString ( out , str , out , false ) ; }
Code	{ escapeJavaStyleString ( out , str , out , false ) ; }
Distance : 2

154
Tree	{ escapeJavaStyleString ( str , out , str , false ) ; }
Code	{ escapeJavaStyleString ( str , out , str , false ) ; }
Distance : 4

155
Tree	{ out . escapeJavaStyleString ( null , str , out , out ) ; }
Code	{ out . escapeJavaStyleString ( null , str , out , out ) ; }
Distance : 5

156
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } &&
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } &&
Distance : 8

157
Tree	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Distance : 9

158
Tree	{ escapeJavaStyleString ( out , break; ) ; }
Code	{ escapeJavaStyleString ( out , break; ) ; }
Distance : 5

159
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 9

160
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } options
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } options
Distance : 8

161
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Distance : 9

162
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 11

163
Tree	{ str . escapeJavaStyleString ( str ) ; } T
Code	{ str . escapeJavaStyleString ( str ) ; } T
Distance : 9

164
Tree	{ str . escapeJavaStyleString ( null , str , out , out ) ; }
Code	{ str . escapeJavaStyleString ( null , str , out , out ) ; }
Distance : 5

165
Tree	{ str . escapeJavaStyleString ( str ) ; } &&
Code	{ str . escapeJavaStyleString ( str ) ; } &&
Distance : 9

166
Tree	{ escapeJavaStyleString ( out , out , out , true ) ; }
Code	{ escapeJavaStyleString ( out , out , out , true ) ; }
Distance : 2

167
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 9

168
Tree	{ escapeJavaStyleString ( str , str , str ) ; }
Code	{ escapeJavaStyleString ( str , str , str ) ; }
Distance : 4

169
Tree	{ escapeJavaStyleString ( out , str , str , out ) ; }
Code	{ escapeJavaStyleString ( out , str , str , out ) ; }
Distance : 2

170
Tree	{ escapeJavaStyleString ( out , out ) ; } toString
Code	{ escapeJavaStyleString ( out , out ) ; } toString
Distance : 6

171
Tree	{ escapeJavaStyleString ( out , out ) ; } options
Code	{ escapeJavaStyleString ( out , out ) ; } options
Distance : 6

172
Tree	{ escapeJavaStyleString ( out , str , str , str ) ; }
Code	{ escapeJavaStyleString ( out , str , str , str ) ; }
Distance : 2

173
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 9

174
Tree	{ escapeJavaStyleString ( str , str , str , false ) ; }
Code	{ escapeJavaStyleString ( str , str , str , false ) ; }
Distance : 3

175
Tree	{ escapeJavaStyleString ( str , out , out , str ) ; }
Code	{ escapeJavaStyleString ( str , out , out , str ) ; }
Distance : 4

176
Tree	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , out ) ; }
Code	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , out ) ; }
Distance : 9

177
Tree	{ escapeJavaStyleString ( str , str , false ) ; }
Code	{ escapeJavaStyleString ( str , str , false ) ; }
Distance : 4

178
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , out ) ; }
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , out ) ; }
Distance : 9

179
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , str , out , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , str , out , out ) ; }
Distance : 3

180
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Distance : 7

181
Tree	{ str . escapeJavaStyleString ( str ) ; } p
Code	{ str . escapeJavaStyleString ( str ) ; } p
Distance : 9

182
Tree	{ escapeJavaStyleString ( out , out , str , out ) ; }
Code	{ escapeJavaStyleString ( out , out , str , out ) ; }
Distance : 3

183
Tree	{ str . escapeJavaStyleString ( str ) ; } options
Code	{ str . escapeJavaStyleString ( str ) ; } options
Distance : 9

184
Tree	{ str . this . escapeJavaStyleString ( str , str , out ) ; }
Code	{ str . this . escapeJavaStyleString ( str , str , out ) ; }
Distance : 8

185
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 9

186
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , str ) ; } wanted
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , str ) ; } wanted
Distance : 5

187
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 9

188
Tree	{ escapeJavaStyleString ( str , out , out , out ) ; }
Code	{ escapeJavaStyleString ( str , out , out , out ) ; }
Distance : 4

189
Tree	{ escapeJavaStyleString ( str , break; ) ; }
Code	{ escapeJavaStyleString ( str , break; ) ; }
Distance : 5

190
Tree	{ escapeJavaStyleString ( out , str . escapeJavaStyleString ( out ) , null ) ; }
Code	{ escapeJavaStyleString ( out , str . escapeJavaStyleString ( out ) , null ) ; }
Distance : 6

191
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } source
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } source
Distance : 8

192
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } toString
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } toString
Distance : 8

193
Tree	{ str . escapeJavaStyleString ( str ) ; } toString
Code	{ str . escapeJavaStyleString ( str ) ; } toString
Distance : 9

194
Tree	{ escapeJavaStyleString ( out , out ) ; } source
Code	{ escapeJavaStyleString ( out , out ) ; } source
Distance : 6

195
Tree	{ escapeJavaStyleString ( str , super(); ) ; }
Code	{ escapeJavaStyleString ( str , super(); ) ; }
Distance : 5

196
Tree	{ str . escapeJavaStyleString ( str ) ; } source
Code	{ str . escapeJavaStyleString ( str ) ; } source
Distance : 9

197
Tree	{ str . this . escapeJavaStyleString ( str , out , out ) ; }
Code	{ str . this . escapeJavaStyleString ( str , out , out ) ; }
Distance : 8

198
Tree	{ escapeJavaStyleString ( out , out , out ) ; } Math
Code	{ escapeJavaStyleString ( out , out , out ) ; } Math
Distance : 5

199
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } Math
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } Math
Distance : 10

========================================================================


========================================================================
Example Number: 40
Parent Code is: 
{ return escapeJavaStyleString ( str , true ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return escapeJavaStyleString ( str , true , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=true}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ this . str = str ; super }
Code	{ this . str = str ; super }
Distance : 9

1
Tree	{ return str . escapeJavaStyleString ( str , null , break; ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , break; ) ; }
Distance : 4

2
Tree	{ return escapeJavaStyleString ( str , continue; , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , continue; , null , str ) ; }
Distance : 4

3
Tree	{ escapeJavaStyleString ( str ) ; assert }
Code	{ escapeJavaStyleString ( str ) ; assert }
Distance : 6

4
Tree	{ return org.joda.time.gwt.util.Arrays . escapeJavaStyleString ( str ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . escapeJavaStyleString ( str ) ; }
Distance : 6

5
Tree	{ return array.length . escapeJavaStyleString ( str ) ; }
Code	{ return array.length . escapeJavaStyleString ( str ) ; }
Distance : 6

6
Tree	{ return escapeJavaStyleString ( ComposableFunction.ASIN , null ) ; }
Code	{ return escapeJavaStyleString ( ComposableFunction.ASIN , null ) ; }
Distance : 4

7
Tree	{ return escapeJavaStyleString ( str , str , SimplexSolver.DEFAULT_ULPS ) ; }
Code	{ return escapeJavaStyleString ( str , str , SimplexSolver.DEFAULT_ULPS ) ; }
Distance : 2

8
Tree	{ this ( str , str , str , null ) ; }
Code	{ this ( str , str , str , null ) ; }
Distance : 6

9
Tree	{ return escapeJavaStyleString ( ComposableFunction.LOG10 , null ) ; }
Code	{ return escapeJavaStyleString ( ComposableFunction.LOG10 , null ) ; }
Distance : 4

10
Tree	{ return str . escapeJavaStyleString ( str , super(); , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , super(); , null ) ; }
Distance : 4

11
Tree	{ return escapeJavaStyleString ( array.length , null ) ; }
Code	{ return escapeJavaStyleString ( array.length , null ) ; }
Distance : 4

12
Tree	{ return escapeJavaStyleString ( str , str , Strictness.SILENT ) ; }
Code	{ return escapeJavaStyleString ( str , str , Strictness.SILENT ) ; }
Distance : 2

13
Tree	{ return escapeJavaStyleString ( str , str , that.paint ) ; }
Code	{ return escapeJavaStyleString ( str , str , that.paint ) ; }
Distance : 2

14
Tree	{ return escapeJavaStyleString ( str , str , TimeUnit.DAYS ) ; }
Code	{ return escapeJavaStyleString ( str , str , TimeUnit.DAYS ) ; }
Distance : 2

15
Tree	{ return EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str ) ; }
Distance : 6

16
Tree	{ escapeJavaStyleString ( str ) ; throw }
Code	{ escapeJavaStyleString ( str ) ; throw }
Distance : 6

17
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } p
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } p
Distance : 7

18
Tree	{ escapeJavaStyleString ( str ) ; return false ; } Preconditions
Code	{ escapeJavaStyleString ( str ) ; return false ; } Preconditions
Distance : 7

19
Tree	{ escapeJavaStyleString ( str ) ; return false ; } -
Code	{ escapeJavaStyleString ( str ) ; return false ; } -
Distance : 7

20
Tree	{ return escapeJavaStyleString ( str , false ) ; } Preconditions
Code	{ return escapeJavaStyleString ( str , false ) ; } Preconditions
Distance : 4

21
Tree	{ return escapeJavaStyleString ( v.data , null ) ; }
Code	{ return escapeJavaStyleString ( v.data , null ) ; }
Distance : 4

22
Tree	{ return escapeJavaStyleString ( str , false ) ; } ParamChecks
Code	{ return escapeJavaStyleString ( str , false ) ; } ParamChecks
Distance : 4

23
Tree	{ return str . escapeJavaStyleString ( str , null , super(); ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , super(); ) ; }
Distance : 4

24
Tree	{ return escapeJavaStyleString ( str , null , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , null , str ) ; }
Distance : 4

25
Tree	{ return escapeJavaStyleString ( str , return; ) ; }
Code	{ return escapeJavaStyleString ( str , return; ) ; }
Distance : 3

26
Tree	{ this ( str , str , str , return; ) ; }
Code	{ this ( str , str , str , return; ) ; }
Distance : 6

27
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; }
Distance : 6

28
Tree	{ return super . escapeJavaStyleString ( str , str , str , new NullArgumentException ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new NullArgumentException ( str ) ) ; }
Distance : 10

29
Tree	{ return super . escapeJavaStyleString ( str , str , str , new RandomDataGenerator ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new RandomDataGenerator ( str ) ) ; }
Distance : 10

30
Tree	{ return super . escapeJavaStyleString ( str , str , str , new Random ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new Random ( str ) ) ; }
Distance : 10

31
Tree	{ return escapeJavaStyleString ( str , break; ) ; }
Code	{ return escapeJavaStyleString ( str , break; ) ; }
Distance : 3

32
Tree	{ return super . escapeJavaStyleString ( str , str , str , new Coordinates3D ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new Coordinates3D ( str ) ) ; }
Distance : 10

33
Tree	{ return super . escapeJavaStyleString ( str , str , str , new Well19937c ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new Well19937c ( str ) ) ; }
Distance : 10

34
Tree	{ escapeJavaStyleString ( str ) ; return }
Code	{ escapeJavaStyleString ( str ) ; return }
Distance : 6

35
Tree	{ return super . escapeJavaStyleString ( str , str , str , new IllegalArgumentException ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new IllegalArgumentException ( str ) ) ; }
Distance : 10

36
Tree	{ return super . escapeJavaStyleString ( str , str , str , new Es6SyntacticScopeCreator ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new Es6SyntacticScopeCreator ( str ) ) ; }
Distance : 10

37
Tree	{ this ( str , str , str , break; ) ; }
Code	{ this ( str , str , str , break; ) ; }
Distance : 6

38
Tree	{ return super . escapeJavaStyleString ( str , str , str , new RandomDataImpl ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new RandomDataImpl ( str ) ) ; }
Distance : 10

39
Tree	{ return super . escapeJavaStyleString ( str , str , str , new MathArithmeticException ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new MathArithmeticException ( str ) ) ; }
Distance : 10

40
Tree	{ return escapeJavaStyleString ( str , continue; ) ; }
Code	{ return escapeJavaStyleString ( str , continue; ) ; }
Distance : 3

41
Tree	{ return escapeJavaStyleString ( str , null , return; , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , return; , str ) ; }
Distance : 4

42
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; }
Distance : 4

43
Tree	{ this . str = str ; if }
Code	{ this . str = str ; if }
Distance : 9

44
Tree	{ return lastIndexOf . escapeJavaStyleString ( str ) ; }
Code	{ return lastIndexOf . escapeJavaStyleString ( str ) ; }
Distance : 6

45
Tree	{ super . escapeJavaStyleString ( str ) ; return default: ; }
Code	{ super . escapeJavaStyleString ( str ) ; return default: ; }
Distance : 7

46
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } f
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } f
Distance : 8

47
Tree	{ return escapeJavaStyleString ( str , str , GammaDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY ) ; }
Code	{ return escapeJavaStyleString ( str , str , GammaDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY ) ; }
Distance : 2

48
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } -
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } -
Distance : 8

49
Tree	{ return escapeJavaStyleString ( this , str ) ; } [
Code	{ return escapeJavaStyleString ( this , str ) ; } [
Distance : 5

50
Tree	{ return escapeJavaStyleString ( this , str ) ; } -
Code	{ return escapeJavaStyleString ( this , str ) ; } -
Distance : 5

51
Tree	{ return escapeJavaStyleString ( str , ModuleType.GOOG_MODULE ) ; }
Code	{ return escapeJavaStyleString ( str , ModuleType.GOOG_MODULE ) ; }
Distance : 3

52
Tree	{ return escapeJavaStyleString ( str , null ) ; }
Code	{ return escapeJavaStyleString ( str , null ) ; }
Distance : 3

53
Tree	{ return this . escapeJavaStyleString ( str ) ; }
Code	{ return this . escapeJavaStyleString ( str ) ; }
Distance : 6

54
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; }
Code	{ super . escapeJavaStyleString ( str ) ; return null ; }
Distance : 7

55
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; }
Code	{ super . escapeJavaStyleString ( str ) ; return false ; }
Distance : 7

56
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } notifyListeners
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } notifyListeners
Distance : 8

57
Tree	{ this . str = str ; this }
Code	{ this . str = str ; this }
Distance : 9

58
Tree	{ this . str = str ; checkNotNull }
Code	{ this . str = str ; checkNotNull }
Distance : 9

59
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } -
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } -
Distance : 8

60
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; } i
Code	{ super . escapeJavaStyleString ( str ) ; return null ; } i
Distance : 8

61
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } f
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } f
Distance : 8

62
Tree	{ this . str = str ; else }
Code	{ this . str = str ; else }
Distance : 9

63
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; } options
Code	{ super . escapeJavaStyleString ( str ) ; return null ; } options
Distance : 8

64
Tree	{ return escapeJavaStyleString ( this , str ) ; } f
Code	{ return escapeJavaStyleString ( this , str ) ; } f
Distance : 5

65
Tree	{ return escapeJavaStyleString ( this , str ) ; } Override
Code	{ return escapeJavaStyleString ( this , str ) ; } Override
Distance : 5

66
Tree	{ escapeJavaStyleString ( str ) ; super }
Code	{ escapeJavaStyleString ( str ) ; super }
Distance : 6

67
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; } value
Code	{ super . escapeJavaStyleString ( str ) ; return null ; } value
Distance : 8

68
Tree	{ return escapeJavaStyleString ( this , str ) ; } mock
Code	{ return escapeJavaStyleString ( this , str ) ; } mock
Distance : 5

69
Tree	{ return escapeJavaStyleString ( str , null ) ; } p
Code	{ return escapeJavaStyleString ( str , null ) ; } p
Distance : 4

70
Tree	{ return escapeJavaStyleString ( str , false ) ; }
Code	{ return escapeJavaStyleString ( str , false ) ; }
Distance : 3

71
Tree	{ return this . escapeJavaStyleString ( str ) ; } [
Code	{ return this . escapeJavaStyleString ( str ) ; } [
Distance : 7

72
Tree	{ return escapeJavaStyleString ( this , str ) ; } MathRuntimeException
Code	{ return escapeJavaStyleString ( this , str ) ; } MathRuntimeException
Distance : 5

73
Tree	{ return escapeJavaStyleString ( this , str ) ; } notifyListeners
Code	{ return escapeJavaStyleString ( this , str ) ; } notifyListeners
Distance : 5

74
Tree	{ this ( str , str , str , null ) ; } value
Code	{ this ( str , str , str , null ) ; } value
Distance : 7

75
Tree	{ return this . escapeJavaStyleString ( str ) ; } notifyListeners
Code	{ return this . escapeJavaStyleString ( str ) ; } notifyListeners
Distance : 7

76
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } [
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } [
Distance : 8

77
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } Override
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } Override
Distance : 8

78
Tree	{ escapeJavaStyleString ( str ) ; fireChangeEvent }
Code	{ escapeJavaStyleString ( str ) ; fireChangeEvent }
Distance : 6

79
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } MathRuntimeException
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } MathRuntimeException
Distance : 8

80
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } mock
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } mock
Distance : 8

81
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } class
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } class
Distance : 8

82
Tree	{ escapeJavaStyleString ( str ) ; else }
Code	{ escapeJavaStyleString ( str ) ; else }
Distance : 6

83
Tree	{ escapeJavaStyleString ( str ) ; if }
Code	{ escapeJavaStyleString ( str ) ; if }
Distance : 6

84
Tree	{ return str . escapeJavaStyleString ( str , null , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , null ) ; }
Distance : 4

85
Tree	{ super . escapeJavaStyleString ( str ) ; return super(); ; }
Code	{ super . escapeJavaStyleString ( str ) ; return super(); ; }
Distance : 7

86
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; }
Code	{ super . escapeJavaStyleString ( str ) ; return str ; }
Distance : 7

87
Tree	{ super . escapeJavaStyleString ( str ) ; return true ; }
Code	{ super . escapeJavaStyleString ( str ) ; return true ; }
Distance : 6

88
Tree	{ super . escapeJavaStyleString ( str ) ; return break; ; }
Code	{ super . escapeJavaStyleString ( str ) ; return break; ; }
Distance : 7

89
Tree	{ super . escapeJavaStyleString ( str ) ; return continue; ; }
Code	{ super . escapeJavaStyleString ( str ) ; return continue; ; }
Distance : 7

90
Tree	{ escapeJavaStyleString ( str ) ; return true ; }
Code	{ escapeJavaStyleString ( str ) ; return true ; }
Distance : 5

91
Tree	{ this . str = str ; throw }
Code	{ this . str = str ; throw }
Distance : 9

92
Tree	{ return repeat . escapeJavaStyleString ( str ) ; }
Code	{ return repeat . escapeJavaStyleString ( str ) ; }
Distance : 6

93
Tree	{ return LoessInterpolator . escapeJavaStyleString ( str ) ; }
Code	{ return LoessInterpolator . escapeJavaStyleString ( str ) ; }
Distance : 6

94
Tree	{ return str . escapeJavaStyleString ( str , null , continue; ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , continue; ) ; }
Distance : 4

95
Tree	{ return super . escapeJavaStyleString ( str , str , str , new ArrayRealVector ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new ArrayRealVector ( str ) ) ; }
Distance : 10

96
Tree	{ escapeJavaStyleString ( str ) ; return; }
Code	{ escapeJavaStyleString ( str ) ; return; }
Distance : 6

97
Tree	{ escapeJavaStyleString ( str ) ; checkNotNull }
Code	{ escapeJavaStyleString ( str ) ; checkNotNull }
Distance : 6

98
Tree	{ return getLength . escapeJavaStyleString ( str ) ; }
Code	{ return getLength . escapeJavaStyleString ( str ) ; }
Distance : 6

99
Tree	{ return escapeJavaStyleString ( str , true ) ; }
Code	{ return escapeJavaStyleString ( str , true ) ; }
Distance : 2

100
Tree	{ return Character . escapeJavaStyleString ( str ) ; }
Code	{ return Character . escapeJavaStyleString ( str ) ; }
Distance : 6

101
Tree	{ this ( str , str , str , super(); ) ; }
Code	{ this ( str , str , str , super(); ) ; }
Distance : 6

102
Tree	{ escapeJavaStyleString ( str ) ; this }
Code	{ escapeJavaStyleString ( str ) ; this }
Distance : 6

103
Tree	{ return str . escapeJavaStyleString ( str , break; , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , break; , null ) ; }
Distance : 4

104
Tree	{ return escapeJavaStyleString ( str , d.length ) ; }
Code	{ return escapeJavaStyleString ( str , d.length ) ; }
Distance : 3

105
Tree	{ escapeJavaStyleString ( str ) ; return false ; }
Code	{ escapeJavaStyleString ( str ) ; return false ; }
Distance : 6

106
Tree	{ this . str = str ; fireChangeEvent }
Code	{ this . str = str ; fireChangeEvent }
Distance : 9

107
Tree	{ return escapeJavaStyleString ( this , str ) ; }
Code	{ return escapeJavaStyleString ( this , str ) ; }
Distance : 4

108
Tree	{ escapeJavaStyleString ( str ) ; return false ; } ParamChecks
Code	{ escapeJavaStyleString ( str ) ; return false ; } ParamChecks
Distance : 7

109
Tree	{ return escapeJavaStyleString ( str , TypeInferenceMode.NEITHER ) ; }
Code	{ return escapeJavaStyleString ( str , TypeInferenceMode.NEITHER ) ; }
Distance : 3

110
Tree	{ this . str = str ; CHAR_CONS }
Code	{ this . str = str ; CHAR_CONS }
Distance : 9

111
Tree	{ return escapeJavaStyleString ( str , IncrementalCheckMode.GENERATE_IJS ) ; }
Code	{ return escapeJavaStyleString ( str , IncrementalCheckMode.GENERATE_IJS ) ; }
Distance : 3

112
Tree	{ return escapeJavaStyleString ( str , Strictness.SILENT ) ; }
Code	{ return escapeJavaStyleString ( str , Strictness.SILENT ) ; }
Distance : 3

113
Tree	{ return escapeJavaStyleString ( str , null , default: , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , default: , str ) ; }
Distance : 4

114
Tree	{ return escapeJavaStyleString ( str , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Code	{ return escapeJavaStyleString ( str , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Distance : 3

115
Tree	{ return escapeJavaStyleString ( StringUtils.EMPTY , null ) ; }
Code	{ return escapeJavaStyleString ( StringUtils.EMPTY , null ) ; }
Distance : 4

116
Tree	{ return escapeJavaStyleString ( str , f.length ) ; }
Code	{ return escapeJavaStyleString ( str , f.length ) ; }
Distance : 3

117
Tree	{ return escapeJavaStyleString ( str , null ) ; } value
Code	{ return escapeJavaStyleString ( str , null ) ; } value
Distance : 4

118
Tree	{ this . str = str ; ++ }
Code	{ this . str = str ; ++ }
Distance : 9

119
Tree	{ return str . escapeJavaStyleString ( str , continue; , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , continue; , null ) ; }
Distance : 4

120
Tree	{ return escapeJavaStyleString ( str , str , str , str , return; ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , return; ) ; }
Distance : 6

121
Tree	{ return escapeJavaStyleString ( str , TransformType.INVERSE ) ; }
Code	{ return escapeJavaStyleString ( str , TransformType.INVERSE ) ; }
Distance : 3

122
Tree	{ return escapeJavaStyleString ( str , Color.BLACK ) ; }
Code	{ return escapeJavaStyleString ( str , Color.BLACK ) ; }
Distance : 3

123
Tree	{ escapeJavaStyleString ( str ) ; return false ; } f
Code	{ escapeJavaStyleString ( str ) ; return false ; } f
Distance : 7

124
Tree	{ escapeJavaStyleString ( str ) ; return false ; } MathRuntimeException
Code	{ escapeJavaStyleString ( str ) ; return false ; } MathRuntimeException
Distance : 7

125
Tree	{ return this . escapeJavaStyleString ( str ) ; } class
Code	{ return this . escapeJavaStyleString ( str ) ; } class
Distance : 7

126
Tree	{ escapeJavaStyleString ( str ) ; return false ; } Class
Code	{ escapeJavaStyleString ( str ) ; return false ; } Class
Distance : 7

127
Tree	{ return escapeJavaStyleString ( str , super(); ) ; }
Code	{ return escapeJavaStyleString ( str , super(); ) ; }
Distance : 3

128
Tree	{ return escapeJavaStyleString ( str , str , str , str , break; ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , break; ) ; }
Distance : 6

129
Tree	{ return str . escapeJavaStyleString ( str , null , default: ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , default: ) ; }
Distance : 4

130
Tree	{ escapeJavaStyleString ( str ) ; return false ; } Test
Code	{ escapeJavaStyleString ( str ) ; return false ; } Test
Distance : 7

131
Tree	{ return escapeJavaStyleString ( str , str , str , str , continue; ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , continue; ) ; }
Distance : 6

132
Tree	{ this ( str , str , str , continue; ) ; }
Code	{ this ( str , str , str , continue; ) ; }
Distance : 6

133
Tree	{ return escapeJavaStyleString ( str , super(); , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , super(); , null , str ) ; }
Distance : 4

134
Tree	{ return escapeJavaStyleString ( str , str , str , str , default: ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , default: ) ; }
Distance : 6

135
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } Test
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } Test
Distance : 8

136
Tree	{ return escapeJavaStyleString ( str , null , break; , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , break; , str ) ; }
Distance : 4

137
Tree	{ return escapeJavaStyleString ( str , return; , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , return; , null , str ) ; }
Distance : 4

138
Tree	{ return escapeJavaStyleString ( str , str , ExpansionMode.MULTIPLICATIVE ) ; }
Code	{ return escapeJavaStyleString ( str , str , ExpansionMode.MULTIPLICATIVE ) ; }
Distance : 2

139
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } Class
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } Class
Distance : 8

140
Tree	{ return str . escapeJavaStyleString ( str , null , return; ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , return; ) ; }
Distance : 4

141
Tree	{ return escapeJavaStyleString ( str , default: ) ; }
Code	{ return escapeJavaStyleString ( str , default: ) ; }
Distance : 3

142
Tree	{ super . escapeJavaStyleString ( str ) ; return return; ; }
Code	{ super . escapeJavaStyleString ( str ) ; return return; ; }
Distance : 7

143
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } MathRuntimeException
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } MathRuntimeException
Distance : 8

144
Tree	{ return escapeJavaStyleString ( str , false ) ; } MathRuntimeException
Code	{ return escapeJavaStyleString ( str , false ) ; } MathRuntimeException
Distance : 4

145
Tree	{ return escapeJavaStyleString ( str , null , continue; , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , continue; , str ) ; }
Distance : 4

146
Tree	{ return escapeJavaStyleString ( str , break; , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , break; , null , str ) ; }
Distance : 4

147
Tree	{ return escapeJavaStyleString ( Locale.ENGLISH , null ) ; }
Code	{ return escapeJavaStyleString ( Locale.ENGLISH , null ) ; }
Distance : 4

148
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } MathRuntimeException
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } MathRuntimeException
Distance : 5

149
Tree	{ this . str = str ; assert }
Code	{ this . str = str ; assert }
Distance : 9

150
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } Override
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } Override
Distance : 5

151
Tree	{ return EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str ) ; }
Distance : 6

152
Tree	{ return escapeJavaStyleString ( Any.ANY , null ) ; }
Code	{ return escapeJavaStyleString ( Any.ANY , null ) ; }
Distance : 4

153
Tree	{ return escapeJavaStyleString ( str , str , d.length ) ; }
Code	{ return escapeJavaStyleString ( str , str , d.length ) ; }
Distance : 2

154
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } f
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } f
Distance : 5

155
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } [
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } [
Distance : 5

156
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } -
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } -
Distance : 5

157
Tree	{ return escapeJavaStyleString ( this , str ) ; } class
Code	{ return escapeJavaStyleString ( this , str ) ; } class
Distance : 5

158
Tree	{ this ( str , str , str , default: ) ; }
Code	{ this ( str , str , str , default: ) ; }
Distance : 6

159
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } {}
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } {}
Distance : 8

160
Tree	{ return escapeJavaStyleString ( str , str , Color.BLACK ) ; }
Code	{ return escapeJavaStyleString ( str , str , Color.BLACK ) ; }
Distance : 2

161
Tree	{ return escapeJavaStyleString ( str , null ) ; } i
Code	{ return escapeJavaStyleString ( str , null ) ; } i
Distance : 4

162
Tree	{ return escapeJavaStyleString ( LocalizedFormats.URL_CONTAINS_NO_DATA , null ) ; }
Code	{ return escapeJavaStyleString ( LocalizedFormats.URL_CONTAINS_NO_DATA , null ) ; }
Distance : 4

163
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } Preconditions
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } Preconditions
Distance : 8

164
Tree	{ return escapeJavaStyleString ( str , str , functionTree.access ) ; }
Code	{ return escapeJavaStyleString ( str , str , functionTree.access ) ; }
Distance : 2

165
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } array
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } array
Distance : 8

166
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; } p
Code	{ super . escapeJavaStyleString ( str ) ; return null ; } p
Distance : 8

167
Tree	{ return escapeJavaStyleString ( isEquals , null ) ; }
Code	{ return escapeJavaStyleString ( isEquals , null ) ; }
Distance : 4

168
Tree	{ return str . escapeJavaStyleString ( str , return; , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , return; , null ) ; }
Distance : 4

169
Tree	{ return escapeJavaStyleString ( str , str , tree.access ) ; }
Code	{ return escapeJavaStyleString ( str , str , tree.access ) ; }
Distance : 2

170
Tree	{ return this . escapeJavaStyleString ( str ) ; } mock
Code	{ return this . escapeJavaStyleString ( str ) ; } mock
Distance : 7

171
Tree	{ return this . escapeJavaStyleString ( str ) ; } MathRuntimeException
Code	{ return this . escapeJavaStyleString ( str ) ; } MathRuntimeException
Distance : 7

172
Tree	{ return escapeJavaStyleString ( p1.vector , null ) ; }
Code	{ return escapeJavaStyleString ( p1.vector , null ) ; }
Distance : 4

173
Tree	{ return this . escapeJavaStyleString ( str ) ; } Override
Code	{ return this . escapeJavaStyleString ( str ) ; } Override
Distance : 7

174
Tree	{ return this . escapeJavaStyleString ( str ) ; } f
Code	{ return this . escapeJavaStyleString ( str ) ; } f
Distance : 7

175
Tree	{ return this . escapeJavaStyleString ( str ) ; } -
Code	{ return this . escapeJavaStyleString ( str ) ; } -
Distance : 7

176
Tree	{ return escapeJavaStyleString ( this , str ) ; } array
Code	{ return escapeJavaStyleString ( this , str ) ; } array
Distance : 5

177
Tree	{ return translate . escapeJavaStyleString ( str ) ; }
Code	{ return translate . escapeJavaStyleString ( str ) ; }
Distance : 6

178
Tree	{ return escapeJavaStyleString ( str , iValues.length ) ; }
Code	{ return escapeJavaStyleString ( str , iValues.length ) ; }
Distance : 3

179
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } notifyListeners
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } notifyListeners
Distance : 5

180
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } class
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } class
Distance : 5

181
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } array
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } array
Distance : 5

182
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } mock
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } mock
Distance : 5

183
Tree	{ return escapeJavaStyleString ( str , str , str , str , super(); ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , super(); ) ; }
Distance : 6

184
Tree	{ return escapeJavaStyleString ( str , null , super(); , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , super(); , str ) ; }
Distance : 4

185
Tree	{ this ( str , str , str , null ) ; } options
Code	{ this ( str , str , str , null ) ; } options
Distance : 7

186
Tree	{ return escapeJavaStyleString ( str , false ) ; } -
Code	{ return escapeJavaStyleString ( str , false ) ; } -
Distance : 4

187
Tree	{ return this . escapeJavaStyleString ( str ) ; } array
Code	{ return this . escapeJavaStyleString ( str ) ; } array
Distance : 7

188
Tree	{ return escapeJavaStyleString ( str , false ) ; } Test
Code	{ return escapeJavaStyleString ( str , false ) ; } Test
Distance : 4

189
Tree	{ return escapeJavaStyleString ( str , false ) ; } Class
Code	{ return escapeJavaStyleString ( str , false ) ; } Class
Distance : 4

190
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } value
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } value
Distance : 7

191
Tree	{ escapeJavaStyleString ( str ) ; return false ; } {}
Code	{ escapeJavaStyleString ( str ) ; return false ; } {}
Distance : 7

192
Tree	{ return escapeJavaStyleString ( str , false ) ; } {}
Code	{ return escapeJavaStyleString ( str , false ) ; } {}
Distance : 4

193
Tree	{ return escapeJavaStyleString ( str , false ) ; } f
Code	{ return escapeJavaStyleString ( str , false ) ; } f
Distance : 4

194
Tree	{ return escapeJavaStyleString ( str , null ) ; } options
Code	{ return escapeJavaStyleString ( str , null ) ; } options
Distance : 4

195
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } i
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } i
Distance : 7

196
Tree	{ this ( str , str , str , null ) ; } p
Code	{ this ( str , str , str , null ) ; } p
Distance : 7

197
Tree	{ this ( str , str , str , null ) ; } i
Code	{ this ( str , str , str , null ) ; } i
Distance : 7

198
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } ParamChecks
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } ParamChecks
Distance : 8

199
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } options
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } options
Distance : 7

========================================================================


========================================================================
Example Number: 41
Parent Code is: 
{ escapeJavaStyleString ( out , str , false ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ escapeJavaStyleString ( out , str , false , false ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=false}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ escapeJavaStyleString ( str , str , str ) ; }
Code	{ escapeJavaStyleString ( str , str , str ) ; }
Distance : 4

1
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } toString
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } toString
Distance : 8

2
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } source
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } source
Distance : 8

3
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } options
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } options
Distance : 8

4
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } wanted
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } wanted
Distance : 12

5
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 11

6
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 11

7
Tree	{ out . escapeJavaStyleString ( null , str , str , str ) ; }
Code	{ out . escapeJavaStyleString ( null , str , str , str ) ; }
Distance : 5

8
Tree	{ escapeJavaStyleString ( str , out ) ; }
Code	{ escapeJavaStyleString ( str , out ) ; }
Distance : 5

9
Tree	{ escapeJavaStyleString ( out , str . escapeJavaStyleString ( str ) , return; ) ; }
Code	{ escapeJavaStyleString ( out , str . escapeJavaStyleString ( str ) , return; ) ; }
Distance : 6

10
Tree	{ escapeJavaStyleString ( out , out , out ) ; } Math
Code	{ escapeJavaStyleString ( out , out , out ) ; } Math
Distance : 5

11
Tree	{ escapeJavaStyleString ( str , out . escapeJavaStyleString ( str ) , null ) ; }
Code	{ escapeJavaStyleString ( str , out . escapeJavaStyleString ( str ) , null ) ; }
Distance : 8

12
Tree	{ escapeJavaStyleString ( str , super(); ) ; }
Code	{ escapeJavaStyleString ( str , super(); ) ; }
Distance : 5

13
Tree	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , str ) ; }
Code	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , str ) ; }
Distance : 9

14
Tree	{ escapeJavaStyleString ( out , out , str , true ) ; }
Code	{ escapeJavaStyleString ( out , out , str , true ) ; }
Distance : 3

15
Tree	{ str . escapeJavaStyleString ( str ? Locale.ENGLISH : array.length ) ; }
Code	{ str . escapeJavaStyleString ( str ? Locale.ENGLISH : array.length ) ; }
Distance : 8

16
Tree	{ str . escapeJavaStyleString ( out , out ) ; }
Code	{ str . escapeJavaStyleString ( out , out ) ; }
Distance : 7

17
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 9

18
Tree	{ escapeJavaStyleString ( out , continue; ) ; }
Code	{ escapeJavaStyleString ( out , continue; ) ; }
Distance : 5

19
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , str , out , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , str , out , out ) ; }
Distance : 3

20
Tree	{ str . escapeJavaStyleString ( null , out , out , str ) ; }
Code	{ str . escapeJavaStyleString ( null , out , out , str ) ; }
Distance : 6

21
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , str ) ; }
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , str ) ; }
Distance : 9

22
Tree	{ escapeJavaStyleString ( out , out , out ) ; } wanted
Code	{ escapeJavaStyleString ( out , out , out ) ; } wanted
Distance : 5

23
Tree	{ escapeJavaStyleString ( str , out , out , str ) ; }
Code	{ escapeJavaStyleString ( str , out , out , str ) ; }
Distance : 4

24
Tree	{ str . escapeJavaStyleString ( str ) ; } toString
Code	{ str . escapeJavaStyleString ( str ) ; } toString
Distance : 9

25
Tree	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; } Math
Code	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; } Math
Distance : 10

26
Tree	{ escapeJavaStyleString ( out , str , false ) ; }
Code	{ escapeJavaStyleString ( out , str , false ) ; }
Distance : 2

27
Tree	{ escapeJavaStyleString ( out , out , str , str ) ; }
Code	{ escapeJavaStyleString ( out , out , str , str ) ; }
Distance : 3

28
Tree	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , out ) ; }
Distance : 7

29
Tree	{ escapeJavaStyleString ( out , str , str , str ) ; }
Code	{ escapeJavaStyleString ( out , str , str , str ) ; }
Distance : 2

30
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , str ) ; }
Distance : 4

31
Tree	{ escapeJavaStyleString ( out , out , out , str ) ; }
Code	{ escapeJavaStyleString ( out , out , out , str ) ; }
Distance : 3

32
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } wanted
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } wanted
Distance : 10

33
Tree	{ str . escapeJavaStyleString ( str , out , this ) ; } wanted
Code	{ str . escapeJavaStyleString ( str , out , this ) ; } wanted
Distance : 7

34
Tree	{ escapeJavaStyleString ( out , str , str ) ; }
Code	{ escapeJavaStyleString ( out , str , str ) ; }
Distance : 3

35
Tree	{ array.length . escapeJavaStyleString ( str , out ) ; }
Code	{ array.length . escapeJavaStyleString ( str , out ) ; }
Distance : 7

36
Tree	{ str . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString ( str , str ) ; }
Distance : 7

37
Tree	{ str . escapeJavaStyleString ( str , out , this ) ; }
Code	{ str . escapeJavaStyleString ( str , out , this ) ; }
Distance : 6

38
Tree	{ out . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString ( str , str ) ; }
Distance : 7

39
Tree	{ out . escapeJavaStyleString ( str , out , this ) ; }
Code	{ out . escapeJavaStyleString ( str , out , this ) ; }
Distance : 6

40
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Distance : 11

41
Tree	{ str () . escapeJavaStyleString ( str , out ) ; }
Code	{ str () . escapeJavaStyleString ( str , out ) ; }
Distance : 8

42
Tree	{ setSeriesShapesVisible . escapeJavaStyleString ( str , out ) ; }
Code	{ setSeriesShapesVisible . escapeJavaStyleString ( str , out ) ; }
Distance : 7

43
Tree	{ out () . escapeJavaStyleString ( str , out ) ; }
Code	{ out () . escapeJavaStyleString ( str , out ) ; }
Distance : 8

44
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Distance : 11

45
Tree	{ maybeAddUsage . escapeJavaStyleString ( str , out ) ; }
Code	{ maybeAddUsage . escapeJavaStyleString ( str , out ) ; }
Distance : 7

46
Tree	{ SparseFieldMatrix . escapeJavaStyleString ( str , out ) ; }
Code	{ SparseFieldMatrix . escapeJavaStyleString ( str , out ) ; }
Distance : 7

47
Tree	{ str . escapeJavaStyleString ( str ? array.length : array.length ) ; }
Code	{ str . escapeJavaStyleString ( str ? array.length : array.length ) ; }
Distance : 8

48
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , str , out , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , str , out , str ) ; }
Distance : 3

49
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } Math
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } Math
Distance : 12

50
Tree	{ str . escapeJavaStyleString ( str ? StringUtils.EMPTY : array.length ) ; }
Code	{ str . escapeJavaStyleString ( str ? StringUtils.EMPTY : array.length ) ; }
Distance : 8

51
Tree	{ escapeJavaStyleString ( out , str . escapeJavaStyleString ( str ) , null ) ; }
Code	{ escapeJavaStyleString ( out , str . escapeJavaStyleString ( str ) , null ) ; }
Distance : 6

52
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 7

53
Tree	{ str . escapeJavaStyleString ( null , out , str , str ) ; }
Code	{ str . escapeJavaStyleString ( null , out , str , str ) ; }
Distance : 6

54
Tree	{ LoessInterpolator . escapeJavaStyleString ( str , out ) ; }
Code	{ LoessInterpolator . escapeJavaStyleString ( str , out ) ; }
Distance : 7

55
Tree	{ lastIndexOf . escapeJavaStyleString ( str , out ) ; }
Code	{ lastIndexOf . escapeJavaStyleString ( str , out ) ; }
Distance : 7

56
Tree	{ str . escapeJavaStyleString ( str ? StringUtils.EMPTY : PropertyCollapseLevel.NONE ) ; }
Code	{ str . escapeJavaStyleString ( str ? StringUtils.EMPTY : PropertyCollapseLevel.NONE ) ; }
Distance : 8

57
Tree	{ out . escapeJavaStyleString ( null , out , str , str ) ; }
Code	{ out . escapeJavaStyleString ( null , out , str , str ) ; }
Distance : 6

58
Tree	{ escapeJavaStyleString ( out , str , str , out ) ; }
Code	{ escapeJavaStyleString ( out , str , str , out ) ; }
Distance : 2

59
Tree	{ escapeJavaStyleString ( out , str , true ) ; }
Code	{ escapeJavaStyleString ( out , str , true ) ; }
Distance : 3

60
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } T
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } T
Distance : 8

61
Tree	{ out . escapeJavaStyleString ( str ? StringUtils.EMPTY : array.length ) ; }
Code	{ out . escapeJavaStyleString ( str ? StringUtils.EMPTY : array.length ) ; }
Distance : 8

62
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( out ) , null ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( out ) , null ) ; }
Distance : 7

63
Tree	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , str ) ; }
Distance : 9

64
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , super(); ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , super(); ) ; }
Distance : 7

65
Tree	{ str . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString ( str , out ) ; }
Distance : 7

66
Tree	{ str . escapeJavaStyleString ( null , str , out , str ) ; }
Code	{ str . escapeJavaStyleString ( null , str , out , str ) ; }
Distance : 5

67
Tree	{ out . escapeJavaStyleString ( str ? StringUtils.EMPTY : PropertyCollapseLevel.NONE ) ; }
Code	{ out . escapeJavaStyleString ( str ? StringUtils.EMPTY : PropertyCollapseLevel.NONE ) ; }
Distance : 8

68
Tree	{ translate . escapeJavaStyleString ( str , out ) ; }
Code	{ translate . escapeJavaStyleString ( str , out ) ; }
Distance : 7

69
Tree	{ escapeJavaStyleString ( str , out , false ) ; }
Code	{ escapeJavaStyleString ( str , out , false ) ; }
Distance : 3

70
Tree	{ str . escapeJavaStyleString ( str , str , this ) ; }
Code	{ str . escapeJavaStyleString ( str , str , this ) ; }
Distance : 6

71
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , str ) ; }
Distance : 9

72
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 9

73
Tree	{ str . this . escapeJavaStyleString ( str , out , out ) ; }
Code	{ str . this . escapeJavaStyleString ( str , out , out ) ; }
Distance : 8

74
Tree	{ escapeJavaStyleString ( str , out , str ) ; }
Code	{ escapeJavaStyleString ( str , out , str ) ; }
Distance : 4

75
Tree	{ escapeJavaStyleString ( out , str , out , out ) ; }
Code	{ escapeJavaStyleString ( out , str , out , out ) ; }
Distance : 2

76
Tree	{ out . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString ( str , out ) ; }
Distance : 7

77
Tree	{ str . escapeJavaStyleString ( null , str , str , str ) ; }
Code	{ str . escapeJavaStyleString ( null , str , str , str ) ; }
Distance : 5

78
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 9

79
Tree	{ str () . escapeJavaStyleString ( str , str ) ; }
Code	{ str () . escapeJavaStyleString ( str , str ) ; }
Distance : 8

80
Tree	{ escapeJavaStyleString ( out , break; ) ; }
Code	{ escapeJavaStyleString ( out , break; ) ; }
Distance : 5

81
Tree	{ out . escapeJavaStyleString ( null , str , out , str ) ; }
Code	{ out . escapeJavaStyleString ( null , str , out , str ) ; }
Distance : 5

82
Tree	{ out . this . escapeJavaStyleString ( str , out , out ) ; }
Code	{ out . this . escapeJavaStyleString ( str , out , out ) ; }
Distance : 8

83
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , out ) ; }
Distance : 4

84
Tree	{ escapeJavaStyleString ( str , out , out ) ; }
Code	{ escapeJavaStyleString ( str , out , out ) ; }
Distance : 4

85
Tree	{ str . escapeJavaStyleString ( null , str , str , out ) ; }
Code	{ str . escapeJavaStyleString ( null , str , str , out ) ; }
Distance : 5

86
Tree	{ escapeJavaStyleString ( out , out , out , out ) ; }
Code	{ escapeJavaStyleString ( out , out , out , out ) ; }
Distance : 3

87
Tree	{ out . escapeJavaStyleString ( null , out , out , str ) ; }
Code	{ out . escapeJavaStyleString ( null , out , out , str ) ; }
Distance : 6

88
Tree	{ escapeJavaStyleString ( str , continue; ) ; }
Code	{ escapeJavaStyleString ( str , continue; ) ; }
Distance : 5

89
Tree	{ str . escapeJavaStyleString ( out ) ; }
Code	{ str . escapeJavaStyleString ( out ) ; }
Distance : 8

90
Tree	{ out . escapeJavaStyleString ( str ? Locale.ENGLISH : array.length ) ; }
Code	{ out . escapeJavaStyleString ( str ? Locale.ENGLISH : array.length ) ; }
Distance : 8

91
Tree	{ escapeJavaStyleString ( out , out , out ) ; }
Code	{ escapeJavaStyleString ( out , out , out ) ; }
Distance : 4

92
Tree	{ out . escapeJavaStyleString ( str , str , this ) ; }
Code	{ out . escapeJavaStyleString ( str , str , this ) ; }
Distance : 6

93
Tree	{ escapeJavaStyleString ( out , out ) ; }
Code	{ escapeJavaStyleString ( out , out ) ; }
Distance : 5

94
Tree	{ out . escapeJavaStyleString ( out , out ) ; }
Code	{ out . escapeJavaStyleString ( out , out ) ; }
Distance : 7

95
Tree	{ escapeJavaStyleString ( str , str . escapeJavaStyleString ( str ) , null ) ; }
Code	{ escapeJavaStyleString ( str , str . escapeJavaStyleString ( str ) , null ) ; }
Distance : 7

96
Tree	{ str . escapeJavaStyleString ( str , out ) ; } wanted
Code	{ str . escapeJavaStyleString ( str , out ) ; } wanted
Distance : 8

97
Tree	{ escapeJavaStyleString ( str , str , out ) ; }
Code	{ escapeJavaStyleString ( str , str , out ) ; }
Distance : 4

98
Tree	{ str . this . escapeJavaStyleString ( str , str , str ) ; }
Code	{ str . this . escapeJavaStyleString ( str , str , str ) ; }
Distance : 8

99
Tree	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; } wanted
Code	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; } wanted
Distance : 10

100
Tree	{ str . this . escapeJavaStyleString ( str , str , out ) ; }
Code	{ str . this . escapeJavaStyleString ( str , str , out ) ; }
Distance : 8

101
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } Math
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } Math
Distance : 10

102
Tree	{ str . escapeJavaStyleString ( str ? values.length : array.length ) ; }
Code	{ str . escapeJavaStyleString ( str ? values.length : array.length ) ; }
Distance : 8

103
Tree	{ out . escapeJavaStyleString ( out ) ; }
Code	{ out . escapeJavaStyleString ( out ) ; }
Distance : 8

104
Tree	{ str () . escapeJavaStyleString ( str , out ) ; } Math
Code	{ str () . escapeJavaStyleString ( str , out ) ; } Math
Distance : 9

105
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , str ) ; } Math
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , str ) ; } Math
Distance : 5

106
Tree	{ str . this . escapeJavaStyleString ( str , out , str ) ; }
Code	{ str . this . escapeJavaStyleString ( str , out , str ) ; }
Distance : 8

107
Tree	{ escapeJavaStyleString ( out , out , str ) ; }
Code	{ escapeJavaStyleString ( out , out , str ) ; }
Distance : 4

108
Tree	{ escapeJavaStyleString ( out , out , false ) ; }
Code	{ escapeJavaStyleString ( out , out , false ) ; }
Distance : 3

109
Tree	{ escapeJavaStyleString ( out , out , false ) ; } wanted
Code	{ escapeJavaStyleString ( out , out , false ) ; } wanted
Distance : 4

110
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 11

111
Tree	{ out () . escapeJavaStyleString ( str , str ) ; }
Code	{ out () . escapeJavaStyleString ( str , str ) ; }
Distance : 8

112
Tree	{ escapeJavaStyleString ( out , out , out , false ) ; }
Code	{ escapeJavaStyleString ( out , out , out , false ) ; }
Distance : 2

113
Tree	{ escapeJavaStyleString ( str , out , true ) ; }
Code	{ escapeJavaStyleString ( str , out , true ) ; }
Distance : 4

114
Tree	{ escapeJavaStyleString ( out , default: ) ; }
Code	{ escapeJavaStyleString ( out , default: ) ; }
Distance : 5

115
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , str ) ; }
Distance : 4

116
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Distance : 9

117
Tree	{ escapeJavaStyleString ( out , str , out , false ) ; }
Code	{ escapeJavaStyleString ( out , str , out , false ) ; }
Distance : 1

118
Tree	{ escapeJavaStyleString ( out , out , str , out ) ; }
Code	{ escapeJavaStyleString ( out , out , str , out ) ; }
Distance : 3

119
Tree	{ escapeJavaStyleString ( str , out , str , str ) ; }
Code	{ escapeJavaStyleString ( str , out , str , str ) ; }
Distance : 4

120
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , out ) ; }
Distance : 4

121
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , str , str , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , str , str , out ) ; }
Distance : 3

122
Tree	{ escapeJavaStyleString ( str , out , out , false ) ; }
Code	{ escapeJavaStyleString ( str , out , out , false ) ; }
Distance : 3

123
Tree	{ escapeJavaStyleString ( out , str , str , false ) ; }
Code	{ escapeJavaStyleString ( out , str , str , false ) ; }
Distance : 1

124
Tree	{ out . escapeJavaStyleString ( str ? values.length : array.length ) ; }
Code	{ out . escapeJavaStyleString ( str ? values.length : array.length ) ; }
Distance : 8

125
Tree	{ out . this . escapeJavaStyleString ( str , str , out ) ; }
Code	{ out . this . escapeJavaStyleString ( str , str , out ) ; }
Distance : 8

126
Tree	{ str . escapeJavaStyleString ( str , out ) ; } Math
Code	{ str . escapeJavaStyleString ( str , out ) ; } Math
Distance : 8

127
Tree	{ str . escapeJavaStyleString ( str ) ; }
Code	{ str . escapeJavaStyleString ( str ) ; }
Distance : 8

128
Tree	{ out . escapeJavaStyleString ( str ) ; }
Code	{ out . escapeJavaStyleString ( str ) ; }
Distance : 8

129
Tree	{ str . escapeJavaStyleString ( out , str , this ) ; }
Code	{ str . escapeJavaStyleString ( out , str , this ) ; }
Distance : 5

130
Tree	{ escapeJavaStyleString ( str , str , str , false ) ; }
Code	{ escapeJavaStyleString ( str , str , str , false ) ; }
Distance : 2

131
Tree	{ escapeJavaStyleString ( out , null ) ; }
Code	{ escapeJavaStyleString ( out , null ) ; }
Distance : 5

132
Tree	{ out . escapeJavaStyleString ( out , str , this ) ; }
Code	{ out . escapeJavaStyleString ( out , str , this ) ; }
Distance : 5

133
Tree	{ escapeJavaStyleString ( str , str , false ) ; }
Code	{ escapeJavaStyleString ( str , str , false ) ; }
Distance : 3

134
Tree	{ escapeJavaStyleString ( out , out , str , false ) ; }
Code	{ escapeJavaStyleString ( out , out , str , false ) ; }
Distance : 2

135
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 7

136
Tree	{ str () . escapeJavaStyleString ( str , out ) ; } wanted
Code	{ str () . escapeJavaStyleString ( str , out ) ; } wanted
Distance : 9

137
Tree	{ escapeJavaStyleString ( out , super(); ) ; }
Code	{ escapeJavaStyleString ( out , super(); ) ; }
Distance : 5

138
Tree	{ str . escapeJavaStyleString ( str ) ; } T
Code	{ str . escapeJavaStyleString ( str ) ; } T
Distance : 9

139
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , null ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , null ) ; }
Distance : 7

140
Tree	{ escapeJavaStyleString ( out , str , out ) ; }
Code	{ escapeJavaStyleString ( out , str , out ) ; }
Distance : 3

141
Tree	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , str ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , str ) ; }
Distance : 7

142
Tree	{ escapeJavaStyleString ( out , out , false ) ; } Math
Code	{ escapeJavaStyleString ( out , out , false ) ; } Math
Distance : 4

143
Tree	{ escapeJavaStyleString ( out , str ) ; }
Code	{ escapeJavaStyleString ( out , str ) ; }
Distance : 4

144
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 7

145
Tree	{ escapeJavaStyleString ( out , str , out , str ) ; }
Code	{ escapeJavaStyleString ( out , str , out , str ) ; }
Distance : 2

146
Tree	{ out . this . escapeJavaStyleString ( str , str , str ) ; }
Code	{ out . this . escapeJavaStyleString ( str , str , str ) ; }
Distance : 8

147
Tree	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Distance : 9

148
Tree	{ escapeJavaStyleString ( out , out ) ; } toString
Code	{ escapeJavaStyleString ( out , out ) ; } toString
Distance : 6

149
Tree	{ EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str , out ) ; }
Distance : 7

150
Tree	{ escapeJavaStyleString ( out , out ) ; } T
Code	{ escapeJavaStyleString ( out , out ) ; } T
Distance : 6

151
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , str , str , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , str , str , str ) ; }
Distance : 3

152
Tree	{ str () . escapeJavaStyleString ( out , out ) ; }
Code	{ str () . escapeJavaStyleString ( out , out ) ; }
Distance : 8

153
Tree	{ escapeJavaStyleString ( str , return; ) ; }
Code	{ escapeJavaStyleString ( str , return; ) ; }
Distance : 5

154
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Distance : 9

155
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , return; ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , return; ) ; }
Distance : 7

156
Tree	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , out ) ; }
Code	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , out ) ; }
Distance : 9

157
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 9

158
Tree	{ escapeJavaStyleString ( str , str , out , false ) ; }
Code	{ escapeJavaStyleString ( str , str , out , false ) ; }
Distance : 2

159
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , out ) ; }
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , out ) ; }
Distance : 9

160
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Distance : 7

161
Tree	{ out . this . escapeJavaStyleString ( str , out , str ) ; }
Code	{ out . this . escapeJavaStyleString ( str , out , str ) ; }
Distance : 8

162
Tree	{ escapeJavaStyleString ( out , out , out , true ) ; }
Code	{ escapeJavaStyleString ( out , out , out , true ) ; }
Distance : 3

163
Tree	{ str . escapeJavaStyleString ( str ? Locale.ENGLISH : PropertyCollapseLevel.NONE ) ; }
Code	{ str . escapeJavaStyleString ( str ? Locale.ENGLISH : PropertyCollapseLevel.NONE ) ; }
Distance : 8

164
Tree	{ escapeJavaStyleString ( str , null ) ; }
Code	{ escapeJavaStyleString ( str , null ) ; }
Distance : 5

165
Tree	{ str . escapeJavaStyleString ( str ) ; } &&
Code	{ str . escapeJavaStyleString ( str ) ; } &&
Distance : 9

166
Tree	{ escapeJavaStyleString ( str , out , str , false ) ; }
Code	{ escapeJavaStyleString ( str , out , str , false ) ; }
Distance : 3

167
Tree	{ str . escapeJavaStyleString ( str ) ; } p
Code	{ str . escapeJavaStyleString ( str ) ; } p
Distance : 9

168
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 9

169
Tree	{ escapeJavaStyleString ( str , str ) ; }
Code	{ escapeJavaStyleString ( str , str ) ; }
Distance : 5

170
Tree	{ str () . escapeJavaStyleString ( out , str ) ; }
Code	{ str () . escapeJavaStyleString ( out , str ) ; }
Distance : 7

171
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 9

172
Tree	{ str . escapeJavaStyleString ( out , str ) ; }
Code	{ str . escapeJavaStyleString ( out , str ) ; }
Distance : 6

173
Tree	{ escapeJavaStyleString ( out , str . escapeJavaStyleString ( out ) , null ) ; }
Code	{ escapeJavaStyleString ( out , str . escapeJavaStyleString ( out ) , null ) ; }
Distance : 6

174
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Distance : 9

175
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( out ) , return; ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( out ) , return; ) ; }
Distance : 7

176
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 11

177
Tree	{ str . this . escapeJavaStyleString ( out , out , out ) ; }
Code	{ str . this . escapeJavaStyleString ( out , out , out ) ; }
Distance : 8

178
Tree	{ str . escapeJavaStyleString ( out , out , this ) ; }
Code	{ str . escapeJavaStyleString ( out , out , this ) ; }
Distance : 6

179
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 11

180
Tree	{ out () . escapeJavaStyleString ( out , out ) ; }
Code	{ out () . escapeJavaStyleString ( out , out ) ; }
Distance : 8

181
Tree	{ escapeJavaStyleString ( out , return; ) ; }
Code	{ escapeJavaStyleString ( out , return; ) ; }
Distance : 5

182
Tree	{ str . escapeJavaStyleString ( str ) ; } source
Code	{ str . escapeJavaStyleString ( str ) ; } source
Distance : 9

183
Tree	{ escapeJavaStyleString ( out , out ) ; } source
Code	{ escapeJavaStyleString ( out , out ) ; } source
Distance : 6

184
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } p
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } p
Distance : 8

185
Tree	{ out . escapeJavaStyleString ( out , str ) ; }
Code	{ out . escapeJavaStyleString ( out , str ) ; }
Distance : 6

186
Tree	{ escapeJavaStyleString ( out , out , true ) ; }
Code	{ escapeJavaStyleString ( out , out , true ) ; }
Distance : 4

187
Tree	{ out . escapeJavaStyleString ( out , out , this ) ; }
Code	{ out . escapeJavaStyleString ( out , out , this ) ; }
Distance : 6

188
Tree	{ out . this . escapeJavaStyleString ( out , out , out ) ; }
Code	{ out . this . escapeJavaStyleString ( out , out , out ) ; }
Distance : 8

189
Tree	{ escapeJavaStyleString ( out , out ) ; } &&
Code	{ escapeJavaStyleString ( out , out ) ; } &&
Distance : 6

190
Tree	{ str . escapeJavaStyleString ( str ) ; } options
Code	{ str . escapeJavaStyleString ( str ) ; } options
Distance : 9

191
Tree	{ escapeJavaStyleString ( out , out ) ; } p
Code	{ escapeJavaStyleString ( out , out ) ; } p
Distance : 6

192
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 11

193
Tree	{ out . escapeJavaStyleString ( null , str , str , out ) ; }
Code	{ out . escapeJavaStyleString ( null , str , str , out ) ; }
Distance : 5

194
Tree	{ out () . escapeJavaStyleString ( out , str ) ; }
Code	{ out () . escapeJavaStyleString ( out , str ) ; }
Distance : 7

195
Tree	{ escapeJavaStyleString ( str , str , true ) ; }
Code	{ escapeJavaStyleString ( str , str , true ) ; }
Distance : 4

196
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } &&
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } &&
Distance : 8

197
Tree	{ escapeJavaStyleString ( out , out ) ; } options
Code	{ escapeJavaStyleString ( out , out ) ; } options
Distance : 6

198
Tree	{ str . escapeJavaStyleString ( str , out , this ) ; } Math
Code	{ str . escapeJavaStyleString ( str , out , this ) ; } Math
Distance : 7

199
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , str ) ; } wanted
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , str ) ; } wanted
Distance : 5

========================================================================


========================================================================
Example Number: 42
Parent Code is: 
{ return escapeJavaStyleString ( str , false ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return escapeJavaStyleString ( str , false , false ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=false}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ this . str = str ; super }
Code	{ this . str = str ; super }
Distance : 9

1
Tree	{ escapeJavaStyleString ( str ) ; return }
Code	{ escapeJavaStyleString ( str ) ; return }
Distance : 6

2
Tree	{ return org.joda.time.gwt.util.Arrays . escapeJavaStyleString ( str ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . escapeJavaStyleString ( str ) ; }
Distance : 6

3
Tree	{ return array.length . escapeJavaStyleString ( str ) ; }
Code	{ return array.length . escapeJavaStyleString ( str ) ; }
Distance : 6

4
Tree	{ super . escapeJavaStyleString ( str ) ; return return; ; }
Code	{ super . escapeJavaStyleString ( str ) ; return return; ; }
Distance : 7

5
Tree	{ return escapeJavaStyleString ( ComposableFunction.ASIN , null ) ; }
Code	{ return escapeJavaStyleString ( ComposableFunction.ASIN , null ) ; }
Distance : 4

6
Tree	{ return escapeJavaStyleString ( v.data , null ) ; }
Code	{ return escapeJavaStyleString ( v.data , null ) ; }
Distance : 4

7
Tree	{ return escapeJavaStyleString ( ComposableFunction.LOG10 , null ) ; }
Code	{ return escapeJavaStyleString ( ComposableFunction.LOG10 , null ) ; }
Distance : 4

8
Tree	{ return escapeJavaStyleString ( array.length , null ) ; }
Code	{ return escapeJavaStyleString ( array.length , null ) ; }
Distance : 4

9
Tree	{ return escapeJavaStyleString ( p1.vector , null ) ; }
Code	{ return escapeJavaStyleString ( p1.vector , null ) ; }
Distance : 4

10
Tree	{ return escapeJavaStyleString ( str , str , str , str , continue; ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , continue; ) ; }
Distance : 6

11
Tree	{ escapeJavaStyleString ( str ) ; throw }
Code	{ escapeJavaStyleString ( str ) ; throw }
Distance : 6

12
Tree	{ return escapeJavaStyleString ( LocalizedFormats.URL_CONTAINS_NO_DATA , null ) ; }
Code	{ return escapeJavaStyleString ( LocalizedFormats.URL_CONTAINS_NO_DATA , null ) ; }
Distance : 4

13
Tree	{ return escapeJavaStyleString ( str , str , options.assumeAccurateNullUndefinedTypes ) ; }
Code	{ return escapeJavaStyleString ( str , str , options.assumeAccurateNullUndefinedTypes ) ; }
Distance : 2

14
Tree	{ return escapeJavaStyleString ( str , str , TDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY ) ; }
Code	{ return escapeJavaStyleString ( str , str , TDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY ) ; }
Distance : 2

15
Tree	{ return escapeJavaStyleString ( str , defaultString ) ; }
Code	{ return escapeJavaStyleString ( str , defaultString ) ; }
Distance : 3

16
Tree	{ return escapeJavaStyleString ( str , str , TimeUnit.MINUTES ) ; }
Code	{ return escapeJavaStyleString ( str , str , TimeUnit.MINUTES ) ; }
Distance : 2

17
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } options
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } options
Distance : 7

18
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } value
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } value
Distance : 7

19
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } i
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } i
Distance : 7

20
Tree	{ this ( str , str , str , null ) ; } p
Code	{ this ( str , str , str , null ) ; } p
Distance : 7

21
Tree	{ return escapeJavaStyleString ( isEquals , null ) ; }
Code	{ return escapeJavaStyleString ( isEquals , null ) ; }
Distance : 4

22
Tree	{ escapeJavaStyleString ( str ) ; return false ; } {}
Code	{ escapeJavaStyleString ( str ) ; return false ; } {}
Distance : 6

23
Tree	{ return escapeJavaStyleString ( str , return; , return; , str ) ; }
Code	{ return escapeJavaStyleString ( str , return; , return; , str ) ; }
Distance : 4

24
Tree	{ return escapeJavaStyleString ( str , break; , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , break; , null , str ) ; }
Distance : 4

25
Tree	{ return super . escapeJavaStyleString ( str , str , str , new Object ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new Object ( str ) ) ; }
Distance : 10

26
Tree	{ return super . escapeJavaStyleString ( str , str , str , new StringBuilder ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new StringBuilder ( str ) ) ; }
Distance : 10

27
Tree	{ super . escapeJavaStyleString ( str ) ; return continue; ; }
Code	{ super . escapeJavaStyleString ( str ) ; return continue; ; }
Distance : 7

28
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; }
Distance : 4

29
Tree	{ return super . escapeJavaStyleString ( str , str , str , new SerializableBoundedType ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new SerializableBoundedType ( str ) ) ; }
Distance : 10

30
Tree	{ return super . escapeJavaStyleString ( str , str , str , new RuntimeException ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new RuntimeException ( str ) ) ; }
Distance : 10

31
Tree	{ return super . escapeJavaStyleString ( str , str , str , new PeepholeRemoveDeadCode ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new PeepholeRemoveDeadCode ( str ) ) ; }
Distance : 10

32
Tree	{ this ( str , str , str , break; ) ; }
Code	{ this ( str , str , str , break; ) ; }
Distance : 6

33
Tree	{ return escapeJavaStyleString ( str , return; ) ; }
Code	{ return escapeJavaStyleString ( str , return; ) ; }
Distance : 3

34
Tree	{ return escapeJavaStyleString ( str , str , str , str , super(); ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , super(); ) ; }
Distance : 6

35
Tree	{ return escapeJavaStyleString ( str , null , return; , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , return; , str ) ; }
Distance : 4

36
Tree	{ super . escapeJavaStyleString ( str ) ; return break; ; }
Code	{ super . escapeJavaStyleString ( str ) ; return break; ; }
Distance : 7

37
Tree	{ return escapeJavaStyleString ( str , return; , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , return; , null , str ) ; }
Distance : 4

38
Tree	{ this ( str , str , str , default: ) ; }
Code	{ this ( str , str , str , default: ) ; }
Distance : 6

39
Tree	{ return escapeJavaStyleString ( str , super(); ) ; }
Code	{ return escapeJavaStyleString ( str , super(); ) ; }
Distance : 3

40
Tree	{ return escapeJavaStyleString ( str , true ) ; }
Code	{ return escapeJavaStyleString ( str , true ) ; }
Distance : 3

41
Tree	{ super . escapeJavaStyleString ( str ) ; return true ; }
Code	{ super . escapeJavaStyleString ( str ) ; return true ; }
Distance : 7

42
Tree	{ return escapeJavaStyleString ( str , super(); , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , super(); , null , str ) ; }
Distance : 4

43
Tree	{ this ( str , str , str , null ) ; }
Code	{ this ( str , str , str , null ) ; }
Distance : 6

44
Tree	{ escapeJavaStyleString ( str ) ; assert }
Code	{ escapeJavaStyleString ( str ) ; assert }
Distance : 6

45
Tree	{ return super . escapeJavaStyleString ( str , str , str , new HashMap ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new HashMap ( str ) ) ; }
Distance : 10

46
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } f
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } f
Distance : 7

47
Tree	{ return escapeJavaStyleString ( str , Locale.ENGLISH ) ; }
Code	{ return escapeJavaStyleString ( str , Locale.ENGLISH ) ; }
Distance : 3

48
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } -
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } -
Distance : 7

49
Tree	{ return escapeJavaStyleString ( str , iValues.length ) ; }
Code	{ return escapeJavaStyleString ( str , iValues.length ) ; }
Distance : 3

50
Tree	{ escapeJavaStyleString ( str ) ; super }
Code	{ escapeJavaStyleString ( str ) ; super }
Distance : 6

51
Tree	{ return escapeJavaStyleString ( str , StringUtils.EMPTY ) ; }
Code	{ return escapeJavaStyleString ( str , StringUtils.EMPTY ) ; }
Distance : 3

52
Tree	{ return this . escapeJavaStyleString ( str ) ; }
Code	{ return this . escapeJavaStyleString ( str ) ; }
Distance : 6

53
Tree	{ this . str = str ; this }
Code	{ this . str = str ; this }
Distance : 9

54
Tree	{ this . str = str ; checkNotNull }
Code	{ this . str = str ; checkNotNull }
Distance : 9

55
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } Override
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } Override
Distance : 8

56
Tree	{ return escapeJavaStyleString ( str , false ) ; }
Code	{ return escapeJavaStyleString ( str , false ) ; }
Distance : 2

57
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; } options
Code	{ super . escapeJavaStyleString ( str ) ; return null ; } options
Distance : 8

58
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; } value
Code	{ super . escapeJavaStyleString ( str ) ; return null ; } value
Distance : 8

59
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; } i
Code	{ super . escapeJavaStyleString ( str ) ; return null ; } i
Distance : 8

60
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } -
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } -
Distance : 8

61
Tree	{ this . str = str ; if }
Code	{ this . str = str ; if }
Distance : 9

62
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } notifyListeners
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } notifyListeners
Distance : 8

63
Tree	{ return escapeJavaStyleString ( this , str ) ; } -
Code	{ return escapeJavaStyleString ( this , str ) ; } -
Distance : 5

64
Tree	{ return this . escapeJavaStyleString ( str ) ; } notifyListeners
Code	{ return this . escapeJavaStyleString ( str ) ; } notifyListeners
Distance : 7

65
Tree	{ this ( str , str , str , null ) ; } value
Code	{ this ( str , str , str , null ) ; } value
Distance : 7

66
Tree	{ return escapeJavaStyleString ( this , str ) ; } notifyListeners
Code	{ return escapeJavaStyleString ( this , str ) ; } notifyListeners
Distance : 5

67
Tree	{ return escapeJavaStyleString ( this , str ) ; } [
Code	{ return escapeJavaStyleString ( this , str ) ; } [
Distance : 5

68
Tree	{ return escapeJavaStyleString ( this , str ) ; } f
Code	{ return escapeJavaStyleString ( this , str ) ; } f
Distance : 5

69
Tree	{ return escapeJavaStyleString ( this , str ) ; } Override
Code	{ return escapeJavaStyleString ( this , str ) ; } Override
Distance : 5

70
Tree	{ return escapeJavaStyleString ( this , str ) ; } MathRuntimeException
Code	{ return escapeJavaStyleString ( this , str ) ; } MathRuntimeException
Distance : 5

71
Tree	{ return escapeJavaStyleString ( this , str ) ; } mock
Code	{ return escapeJavaStyleString ( this , str ) ; } mock
Distance : 5

72
Tree	{ return escapeJavaStyleString ( this , str ) ; } array
Code	{ return escapeJavaStyleString ( this , str ) ; } array
Distance : 5

73
Tree	{ return this . escapeJavaStyleString ( str ) ; } [
Code	{ return this . escapeJavaStyleString ( str ) ; } [
Distance : 7

74
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; }
Code	{ super . escapeJavaStyleString ( str ) ; return null ; }
Distance : 7

75
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; }
Code	{ super . escapeJavaStyleString ( str ) ; return false ; }
Distance : 6

76
Tree	{ escapeJavaStyleString ( str ) ; this }
Code	{ escapeJavaStyleString ( str ) ; this }
Distance : 6

77
Tree	{ this ( str , str , str , super(); ) ; }
Code	{ this ( str , str , str , super(); ) ; }
Distance : 6

78
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } [
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } [
Distance : 8

79
Tree	{ escapeJavaStyleString ( str ) ; fireChangeEvent }
Code	{ escapeJavaStyleString ( str ) ; fireChangeEvent }
Distance : 6

80
Tree	{ return super . escapeJavaStyleString ( str , str , str , new Coordinates3D ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new Coordinates3D ( str ) ) ; }
Distance : 10

81
Tree	{ escapeJavaStyleString ( str ) ; reportMatcher }
Code	{ escapeJavaStyleString ( str ) ; reportMatcher }
Distance : 6

82
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } f
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } f
Distance : 8

83
Tree	{ return str . escapeJavaStyleString ( str , null , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , null ) ; }
Distance : 4

84
Tree	{ this ( str , str , str , continue; ) ; }
Code	{ this ( str , str , str , continue; ) ; }
Distance : 6

85
Tree	{ return escapeJavaStyleString ( str , default: ) ; }
Code	{ return escapeJavaStyleString ( str , default: ) ; }
Distance : 3

86
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } MathRuntimeException
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } MathRuntimeException
Distance : 8

87
Tree	{ return translate . escapeJavaStyleString ( str ) ; }
Code	{ return translate . escapeJavaStyleString ( str ) ; }
Distance : 6

88
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } mock
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } mock
Distance : 8

89
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; }
Code	{ super . escapeJavaStyleString ( str ) ; return str ; }
Distance : 7

90
Tree	{ return str . escapeJavaStyleString ( str , super(); , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , super(); , null ) ; }
Distance : 4

91
Tree	{ return super . escapeJavaStyleString ( str , str , str , new false ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new false ( str ) ) ; }
Distance : 9

92
Tree	{ return super . escapeJavaStyleString ( str , str , str , new FunctionEvaluationException ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new FunctionEvaluationException ( str ) ) ; }
Distance : 10

93
Tree	{ escapeJavaStyleString ( str ) ; if }
Code	{ escapeJavaStyleString ( str ) ; if }
Distance : 6

94
Tree	{ escapeJavaStyleString ( str ) ; return; }
Code	{ escapeJavaStyleString ( str ) ; return; }
Distance : 6

95
Tree	{ escapeJavaStyleString ( str ) ; checkNotNull }
Code	{ escapeJavaStyleString ( str ) ; checkNotNull }
Distance : 6

96
Tree	{ return str . escapeJavaStyleString ( str , null , super(); ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , super(); ) ; }
Distance : 4

97
Tree	{ return escapeJavaStyleString ( str , null ) ; }
Code	{ return escapeJavaStyleString ( str , null ) ; }
Distance : 3

98
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } ParamChecks
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } ParamChecks
Distance : 7

99
Tree	{ return LoessInterpolator . escapeJavaStyleString ( str ) ; }
Code	{ return LoessInterpolator . escapeJavaStyleString ( str ) ; }
Distance : 6

100
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } class
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } class
Distance : 8

101
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; }
Distance : 6

102
Tree	{ return this . escapeJavaStyleString ( str ) ; } class
Code	{ return this . escapeJavaStyleString ( str ) ; } class
Distance : 7

103
Tree	{ return escapeJavaStyleString ( this , str ) ; } class
Code	{ return escapeJavaStyleString ( this , str ) ; } class
Distance : 5

104
Tree	{ return escapeJavaStyleString ( str , str , str , str , break; ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , break; ) ; }
Distance : 6

105
Tree	{ this . str = str ; else }
Code	{ this . str = str ; else }
Distance : 9

106
Tree	{ return repeat . escapeJavaStyleString ( str ) ; }
Code	{ return repeat . escapeJavaStyleString ( str ) ; }
Distance : 6

107
Tree	{ escapeJavaStyleString ( str ) ; return false ; } Preconditions
Code	{ escapeJavaStyleString ( str ) ; return false ; } Preconditions
Distance : 6

108
Tree	{ escapeJavaStyleString ( str ) ; return false ; }
Code	{ escapeJavaStyleString ( str ) ; return false ; }
Distance : 5

109
Tree	{ return getLength . escapeJavaStyleString ( str ) ; }
Code	{ return getLength . escapeJavaStyleString ( str ) ; }
Distance : 6

110
Tree	{ return escapeJavaStyleString ( str , null , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , null , str ) ; }
Distance : 4

111
Tree	{ return str . escapeJavaStyleString ( str , null , continue; ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , continue; ) ; }
Distance : 4

112
Tree	{ this . str = str ; throw }
Code	{ this . str = str ; throw }
Distance : 9

113
Tree	{ return escapeJavaStyleString ( this , str ) ; }
Code	{ return escapeJavaStyleString ( this , str ) ; }
Distance : 4

114
Tree	{ return escapeJavaStyleString ( str , str , options.removeUnusedPrototypeProperties ) ; }
Code	{ return escapeJavaStyleString ( str , str , options.removeUnusedPrototypeProperties ) ; }
Distance : 2

115
Tree	{ return escapeJavaStyleString ( StringUtils.EMPTY , null ) ; }
Code	{ return escapeJavaStyleString ( StringUtils.EMPTY , null ) ; }
Distance : 4

116
Tree	{ return super . escapeJavaStyleString ( str , str , str , new VerifcationInOrderFailure ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new VerifcationInOrderFailure ( str ) ) ; }
Distance : 10

117
Tree	{ escapeJavaStyleString ( str ) ; return false ; } -
Code	{ escapeJavaStyleString ( str ) ; return false ; } -
Distance : 6

118
Tree	{ return escapeJavaStyleString ( str , p2.vector ) ; }
Code	{ return escapeJavaStyleString ( str , p2.vector ) ; }
Distance : 3

119
Tree	{ return escapeJavaStyleString ( str , str , TimeUnit.DAYS ) ; }
Code	{ return escapeJavaStyleString ( str , str , TimeUnit.DAYS ) ; }
Distance : 2

120
Tree	{ escapeJavaStyleString ( str ) ; return false ; } Test
Code	{ escapeJavaStyleString ( str ) ; return false ; } Test
Distance : 6

121
Tree	{ return escapeJavaStyleString ( str , str , Verification.EXPLICIT ) ; }
Code	{ return escapeJavaStyleString ( str , str , Verification.EXPLICIT ) ; }
Distance : 2

122
Tree	{ this ( str , str , str , return; ) ; }
Code	{ this ( str , str , str , return; ) ; }
Distance : 6

123
Tree	{ this . str = str ; CHAR_CONS }
Code	{ this . str = str ; CHAR_CONS }
Distance : 9

124
Tree	{ super . escapeJavaStyleString ( str ) ; return super(); ; }
Code	{ super . escapeJavaStyleString ( str ) ; return super(); ; }
Distance : 7

125
Tree	{ return str . escapeJavaStyleString ( str , null , break; ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , break; ) ; }
Distance : 4

126
Tree	{ return EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str ) ; }
Distance : 6

127
Tree	{ return escapeJavaStyleString ( str , str , str , str , default: ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , default: ) ; }
Distance : 6

128
Tree	{ this . str = str ; fireChangeEvent }
Code	{ this . str = str ; fireChangeEvent }
Distance : 9

129
Tree	{ return str . escapeJavaStyleString ( str , break; , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , break; , null ) ; }
Distance : 4

130
Tree	{ return escapeJavaStyleString ( str , null , super(); , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , super(); , str ) ; }
Distance : 4

131
Tree	{ super . escapeJavaStyleString ( str ) ; return default: ; }
Code	{ super . escapeJavaStyleString ( str ) ; return default: ; }
Distance : 7

132
Tree	{ escapeJavaStyleString ( str ) ; return true ; }
Code	{ escapeJavaStyleString ( str ) ; return true ; }
Distance : 6

133
Tree	{ return escapeJavaStyleString ( str , null ) ; } p
Code	{ return escapeJavaStyleString ( str , null ) ; } p
Distance : 4

134
Tree	{ return escapeJavaStyleString ( str , continue; ) ; }
Code	{ return escapeJavaStyleString ( str , continue; ) ; }
Distance : 3

135
Tree	{ return str . escapeJavaStyleString ( str , return; , return; ) ; }
Code	{ return str . escapeJavaStyleString ( str , return; , return; ) ; }
Distance : 4

136
Tree	{ escapeJavaStyleString ( str ) ; return false ; } ParamChecks
Code	{ escapeJavaStyleString ( str ) ; return false ; } ParamChecks
Distance : 6

137
Tree	{ escapeJavaStyleString ( str ) ; return false ; } f
Code	{ escapeJavaStyleString ( str ) ; return false ; } f
Distance : 6

138
Tree	{ return EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str ) ; }
Distance : 6

139
Tree	{ return escapeJavaStyleString ( str , null , continue; , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , continue; , str ) ; }
Distance : 4

140
Tree	{ return escapeJavaStyleString ( str , continue; , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , continue; , null , str ) ; }
Distance : 4

141
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } {}
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } {}
Distance : 7

142
Tree	{ return escapeJavaStyleString ( str , false ) ; } Test
Code	{ return escapeJavaStyleString ( str , false ) ; } Test
Distance : 3

143
Tree	{ return escapeJavaStyleString ( str , null , break; , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , break; , str ) ; }
Distance : 4

144
Tree	{ return str . escapeJavaStyleString ( str , null , return; ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , return; ) ; }
Distance : 4

145
Tree	{ escapeJavaStyleString ( str ) ; return false ; } Class
Code	{ escapeJavaStyleString ( str ) ; return false ; } Class
Distance : 6

146
Tree	{ return escapeJavaStyleString ( str , array.length ) ; }
Code	{ return escapeJavaStyleString ( str , array.length ) ; }
Distance : 3

147
Tree	{ return escapeJavaStyleString ( str , str , rhs.b ) ; }
Code	{ return escapeJavaStyleString ( str , str , rhs.b ) ; }
Distance : 2

148
Tree	{ return escapeJavaStyleString ( str , that.paint ) ; }
Code	{ return escapeJavaStyleString ( str , that.paint ) ; }
Distance : 3

149
Tree	{ return escapeJavaStyleString ( Locale.ENGLISH , null ) ; }
Code	{ return escapeJavaStyleString ( Locale.ENGLISH , null ) ; }
Distance : 4

150
Tree	{ return str . escapeJavaStyleString ( str , return; , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , return; , null ) ; }
Distance : 4

151
Tree	{ return escapeJavaStyleString ( str , str , StringUtils.EMPTY ) ; }
Code	{ return escapeJavaStyleString ( str , str , StringUtils.EMPTY ) ; }
Distance : 2

152
Tree	{ return escapeJavaStyleString ( str , false ) ; } Class
Code	{ return escapeJavaStyleString ( str , false ) ; } Class
Distance : 3

153
Tree	{ return escapeJavaStyleString ( str , IncrementalCheckMode.GENERATE_IJS ) ; }
Code	{ return escapeJavaStyleString ( str , IncrementalCheckMode.GENERATE_IJS ) ; }
Distance : 3

154
Tree	{ return escapeJavaStyleString ( Any.ANY , null ) ; }
Code	{ return escapeJavaStyleString ( Any.ANY , null ) ; }
Distance : 4

155
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } MathRuntimeException
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } MathRuntimeException
Distance : 5

156
Tree	{ return this . escapeJavaStyleString ( str ) ; } mock
Code	{ return this . escapeJavaStyleString ( str ) ; } mock
Distance : 7

157
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } Override
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } Override
Distance : 5

158
Tree	{ return this . escapeJavaStyleString ( str ) ; } MathRuntimeException
Code	{ return this . escapeJavaStyleString ( str ) ; } MathRuntimeException
Distance : 7

159
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } f
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } f
Distance : 5

160
Tree	{ return this . escapeJavaStyleString ( str ) ; } Override
Code	{ return this . escapeJavaStyleString ( str ) ; } Override
Distance : 7

161
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } [
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } [
Distance : 5

162
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } -
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } -
Distance : 5

163
Tree	{ return escapeJavaStyleString ( str , str , that.paint ) ; }
Code	{ return escapeJavaStyleString ( str , str , that.paint ) ; }
Distance : 2

164
Tree	{ return this . escapeJavaStyleString ( str ) ; } f
Code	{ return this . escapeJavaStyleString ( str ) ; } f
Distance : 7

165
Tree	{ return escapeJavaStyleString ( str , null ) ; } i
Code	{ return escapeJavaStyleString ( str , null ) ; } i
Distance : 4

166
Tree	{ return escapeJavaStyleString ( str , str , Locale.US ) ; }
Code	{ return escapeJavaStyleString ( str , str , Locale.US ) ; }
Distance : 2

167
Tree	{ return this . escapeJavaStyleString ( str ) ; } -
Code	{ return this . escapeJavaStyleString ( str ) ; } -
Distance : 7

168
Tree	{ return escapeJavaStyleString ( str , null ) ; } options
Code	{ return escapeJavaStyleString ( str , null ) ; } options
Distance : 4

169
Tree	{ return escapeJavaStyleString ( str , null ) ; } value
Code	{ return escapeJavaStyleString ( str , null ) ; } value
Distance : 4

170
Tree	{ return escapeJavaStyleString ( str , break; ) ; }
Code	{ return escapeJavaStyleString ( str , break; ) ; }
Distance : 3

171
Tree	{ this . str = str ; ++ }
Code	{ this . str = str ; ++ }
Distance : 9

172
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } Preconditions
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } Preconditions
Distance : 7

173
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } array
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } array
Distance : 8

174
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } notifyListeners
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } notifyListeners
Distance : 5

175
Tree	{ return escapeJavaStyleString ( str , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Code	{ return escapeJavaStyleString ( str , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Distance : 3

176
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; } p
Code	{ super . escapeJavaStyleString ( str ) ; return null ; } p
Distance : 8

177
Tree	{ return lastIndexOf . escapeJavaStyleString ( str ) ; }
Code	{ return lastIndexOf . escapeJavaStyleString ( str ) ; }
Distance : 6

178
Tree	{ return Character . escapeJavaStyleString ( str ) ; }
Code	{ return Character . escapeJavaStyleString ( str ) ; }
Distance : 6

179
Tree	{ return escapeJavaStyleString ( str , configureWith ) ; }
Code	{ return escapeJavaStyleString ( str , configureWith ) ; }
Distance : 3

180
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } class
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } class
Distance : 5

181
Tree	{ return str . escapeJavaStyleString ( str , continue; , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , continue; , null ) ; }
Distance : 4

182
Tree	{ return escapeJavaStyleString ( str , str , str , str , return; ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , return; ) ; }
Distance : 6

183
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } array
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } array
Distance : 5

184
Tree	{ return escapeJavaStyleString ( str , false ) ; } MathRuntimeException
Code	{ return escapeJavaStyleString ( str , false ) ; } MathRuntimeException
Distance : 3

185
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } mock
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } mock
Distance : 5

186
Tree	{ escapeJavaStyleString ( str ) ; return false ; } MathRuntimeException
Code	{ escapeJavaStyleString ( str ) ; return false ; } MathRuntimeException
Distance : 6

187
Tree	{ return this . escapeJavaStyleString ( str ) ; } array
Code	{ return this . escapeJavaStyleString ( str ) ; } array
Distance : 7

188
Tree	{ return escapeJavaStyleString ( str , false ) ; } {}
Code	{ return escapeJavaStyleString ( str , false ) ; } {}
Distance : 3

189
Tree	{ return escapeJavaStyleString ( str , false ) ; } f
Code	{ return escapeJavaStyleString ( str , false ) ; } f
Distance : 3

190
Tree	{ return escapeJavaStyleString ( str , false ) ; } ParamChecks
Code	{ return escapeJavaStyleString ( str , false ) ; } ParamChecks
Distance : 3

191
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } MathRuntimeException
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } MathRuntimeException
Distance : 7

192
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } Class
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } Class
Distance : 7

193
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } Test
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } Test
Distance : 7

194
Tree	{ return escapeJavaStyleString ( str , false ) ; } -
Code	{ return escapeJavaStyleString ( str , false ) ; } -
Distance : 3

195
Tree	{ return escapeJavaStyleString ( str , false ) ; } Preconditions
Code	{ return escapeJavaStyleString ( str , false ) ; } Preconditions
Distance : 3

196
Tree	{ this ( str , str , str , null ) ; } i
Code	{ this ( str , str , str , null ) ; } i
Distance : 7

197
Tree	{ this ( str , str , str , null ) ; } options
Code	{ this ( str , str , str , null ) ; } options
Distance : 7

198
Tree	{ this . str = str ; assert }
Code	{ this . str = str ; assert }
Distance : 9

199
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } p
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } p
Distance : 7

========================================================================


========================================================================
Example Number: 43
Parent Code is: 
if ( element != null ) { type = element . getClass () ; } else { type = Object . class ; }
-------------------------------------------------------------------------------
Child code is: 
if ( element != null ) { type = element . getClass () ; } else { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=element}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (32 (800{val=element}) (235{val=.}) (802{val=getClass}) (216{val=()}))) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (57 (43 (800{val=Object})) (235{val=.}) (341{val=class}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=element}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (32 (800{val=element}) (235{val=.}) (802{val=getClass}) (216{val=()}))) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/35/parent/src_main_java_org_apache_commons_lang3_ArrayUtils.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = array.length ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = array.length ; }
Distance : 10

1
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( type ) type . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( type ) type . getClass () ; }
Distance : 8

2
Tree	if ( element != null ) { type = type . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = element . getClass () ; }
Distance : 7

3
Tree	if ( element != super(); ) { type = false ; } else { type = Object . getClass () ; }
Code	if ( element != super(); ) { type = false ; } else { type = Object . getClass () ; }
Distance : 11

4
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = StringUtils.EMPTY ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = StringUtils.EMPTY ; }
Distance : 9

5
Tree	if ( element != null ) { type = false ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = element . getClass () ; }
Distance : 10

6
Tree	if ( element != null ) { type = element . getClass () ; } else { type = LanguageMode.ECMASCRIPT8 ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = LanguageMode.ECMASCRIPT8 ; }
Distance : 6

7
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { else = Object . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { else = Object . getClass () ; }
Distance : 9

8
Tree	if ( element != super(); ) { type = ( element ) element . getClass () ; } else { type = this . type ; }
Code	if ( element != super(); ) { type = ( element ) element . getClass () ; } else { type = this . type ; }
Distance : 10

9
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( element ) Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( element ) Object . getClass () ; }
Distance : 8

10
Tree	if ( element != null ) { Double = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Code	if ( element != null ) { Double = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Distance : 9

11
Tree	if ( element != null ) { type = element . getClass () ; } else { type = AllowedSolutions.ANY_SIDE ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = AllowedSolutions.ANY_SIDE ; }
Distance : 6

12
Tree	if ( element != return; ) { type = element . getClass () ; } else { type = false ; }
Code	if ( element != return; ) { type = element . getClass () ; } else { type = false ; }
Distance : 7

13
Tree	if ( element != null ) { type = val.length ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = val.length ; } else { type = Object . getClass () ; }
Distance : 10

14
Tree	if ( type != null ) { type = ( element ) element . getClass () ; } else { type = this . type ; }
Code	if ( type != null ) { type = ( element ) element . getClass () ; } else { type = this . type ; }
Distance : 10

15
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Distance : 8

16
Tree	if ( element != null ) { type = element . getClass () ; } else { private = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { private = Object . getClass () ; }
Distance : 6

17
Tree	if ( element != null ) { type = element . getClass () ; } else { type = FeatureSet.BARE_MINIMUM ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = FeatureSet.BARE_MINIMUM ; }
Distance : 6

18
Tree	if ( element != null ) { this . type = element . getClass () ; } else { TracerMode.ALL = getClass () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { TracerMode.ALL = getClass () ; }
Distance : 8

19
Tree	if ( element != null ) { type = problem.a ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = problem.a ; } else { type = Object . getClass () ; }
Distance : 10

20
Tree	if ( element != null ) { type = element . getClass () ; } else { type = source.isBiasCorrected ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = source.isBiasCorrected ; }
Distance : 6

21
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = array.length ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = array.length ; }
Distance : 8

22
Tree	if ( element != null ) { type = element . getClass () ; } else { Name = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Name = Object . getClass () ; }
Distance : 6

23
Tree	if ( element != null ) { type = rhs.b ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = rhs.b ; } else { type = Object . getClass () ; }
Distance : 10

24
Tree	if ( element != super(); ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != super(); ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

25
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Distance : 9

26
Tree	if ( element != null ) { type = element . getClass () ; } else { else = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { else = Object . getClass () ; }
Distance : 6

27
Tree	if ( element != null ) { this . type = element . getClass () ; } else { DecompositionType.UNDECOMPOSABLE = getClass () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { DecompositionType.UNDECOMPOSABLE = getClass () ; }
Distance : 8

28
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { else = FeatureSet.ES3 . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { else = FeatureSet.ES3 . getClass () ; }
Distance : 9

29
Tree	if ( element != null ) { type = false ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = element . getClass () ; }
Distance : 10

30
Tree	if ( element != null ) { type = lhs.length ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = lhs.length ; } else { type = Object . getClass () ; }
Distance : 10

31
Tree	if ( element != null ) { type = element . getClass () ; } else { synchronized = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { synchronized = Object . getClass () ; }
Distance : 6

32
Tree	if ( element != null ) { type = element . getClass () ; } else { synchronized = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { synchronized = Object . getClass () ; }
Distance : 6

33
Tree	if ( element != null ) { type = TypeInferenceMode.CHECKED ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = TypeInferenceMode.CHECKED ; } else { type = Object . getClass () ; }
Distance : 10

34
Tree	if ( element != null ) { type = element . getClass () ; } else { FeatureSet.ES3 = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { FeatureSet.ES3 = Object . getClass () ; }
Distance : 6

35
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { if = FeatureSet.ES3 . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { if = FeatureSet.ES3 . getClass () ; }
Distance : 9

36
Tree	if ( element != null ) { options.removeUnusedVars = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Code	if ( element != null ) { options.removeUnusedVars = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Distance : 9

37
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { pushAnnotations = FeatureSet.ES3 . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { pushAnnotations = FeatureSet.ES3 . getClass () ; }
Distance : 9

38
Tree	if ( element != null ) { type = element . getClass () ; } else { InjectMocks = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { InjectMocks = Object . getClass () ; }
Distance : 6

39
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { synchronized = Object . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { synchronized = Object . getClass () ; }
Distance : 9

40
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { FeatureSet.ES3 = Object . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { FeatureSet.ES3 = Object . getClass () ; }
Distance : 9

41
Tree	if ( element != null ) { type = element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Distance : 6

42
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { else = LanguageMode.ECMASCRIPT_2015 . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { else = LanguageMode.ECMASCRIPT_2015 . getClass () ; }
Distance : 9

43
Tree	if ( element != null ) { type = element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Distance : 6

44
Tree	if ( element != null ) { Var.ARGUMENTS = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Code	if ( element != null ) { Var.ARGUMENTS = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Distance : 9

45
Tree	if ( element != null ) { type = element . getClass () ; } else { element = false ; }
Code	if ( element != null ) { type = element . getClass () ; } else { element = false ; }
Distance : 6

46
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Distance : 6

47
Tree	if ( element != null ) { type = true ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = true ; } else { type = element . getClass () ; }
Distance : 10

48
Tree	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

49
Tree	if ( element != null ) { options.removeUnusedVars = false ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { options.removeUnusedVars = false ; } else { type = Object . getClass () ; }
Distance : 11

50
Tree	if ( element != null ) { type = false ; } else { element = Object . getClass () ; }
Code	if ( element != null ) { type = false ; } else { element = Object . getClass () ; }
Distance : 10

51
Tree	if ( element != null ) { type = element . getClass () ; } else { Name = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Name = Object . getClass () ; }
Distance : 6

52
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { if = Object . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { if = Object . getClass () ; }
Distance : 10

53
Tree	if ( element != null ) { type = element . getClass () ; } else { DecompositionType.UNDECOMPOSABLE = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { DecompositionType.UNDECOMPOSABLE = Object . getClass () ; }
Distance : 6

54
Tree	if ( element != null ) { type = false ; } else { type = type . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = type . getClass () ; }
Distance : 10

55
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { private = Object . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { private = Object . getClass () ; }
Distance : 9

56
Tree	if ( type != null ) { type = element . getClass () ; } else { type = false ; }
Code	if ( type != null ) { type = element . getClass () ; } else { type = false ; }
Distance : 7

57
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { FeatureSet.ES3 = FeatureSet.ES3 . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { FeatureSet.ES3 = FeatureSet.ES3 . getClass () ; }
Distance : 9

58
Tree	if ( element != null ) { element = false ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { element = false ; } else { type = Object . getClass () ; }
Distance : 11

59
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . element ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . element ; }
Distance : 9

60
Tree	if ( element != null ) { element = ( element ) element . getClass () ; } else { type = this . type ; }
Code	if ( element != null ) { element = ( element ) element . getClass () ; } else { type = this . type ; }
Distance : 10

61
Tree	if ( element != null ) { Long.MAX_VALUE = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { Long.MAX_VALUE = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

62
Tree	if ( element != null ) { finderStub.actualToReturn = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { finderStub.actualToReturn = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

63
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { Name = Object . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { Name = Object . getClass () ; }
Distance : 9

64
Tree	if ( element != null ) { type = true ; } else { type = type . getClass () ; }
Code	if ( element != null ) { type = true ; } else { type = type . getClass () ; }
Distance : 10

65
Tree	if ( element != null ) { type = type . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Distance : 9

66
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Distance : 10

67
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( type ) element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( type ) element . getClass () ; }
Distance : 8

68
Tree	if ( element != null ) { type = type . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

69
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { else = StringUtils.EMPTY . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { else = StringUtils.EMPTY . getClass () ; }
Distance : 9

70
Tree	if ( element != super(); ) { type = element . getClass () ; } else { type = false ; }
Code	if ( element != super(); ) { type = element . getClass () ; } else { type = false ; }
Distance : 7

71
Tree	if ( element != continue; ) { type = element . getClass () ; } else { type = false ; }
Code	if ( element != continue; ) { type = element . getClass () ; } else { type = false ; }
Distance : 7

72
Tree	if ( element != null ) { type = element . getClass () ; } else { private = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { private = Object . getClass () ; }
Distance : 6

73
Tree	if ( element != null ) { element = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

74
Tree	if ( element != null ) { Double = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { Double = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

75
Tree	if ( element != null ) { this . type = element . getClass () ; } else { pushAnnotations = getClass () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { pushAnnotations = getClass () ; }
Distance : 8

76
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( element ) type . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( element ) type . getClass () ; }
Distance : 8

77
Tree	if ( element != null ) { type = element . getClass () ; } else { type = type . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = type . getClass () ; }
Distance : 6

78
Tree	if ( element != null ) { domHelperType = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { domHelperType = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

79
Tree	if ( Object != null ) { type = element . getClass () ; } else { type = false ; }
Code	if ( Object != null ) { type = element . getClass () ; } else { type = false ; }
Distance : 7

80
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { FeatureSet.ES3 = Object . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { FeatureSet.ES3 = Object . getClass () ; }
Distance : 10

81
Tree	if ( element != null ) { this . type = element . getClass () ; } else { FeatureSet.ES3 = getClass () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { FeatureSet.ES3 = getClass () ; }
Distance : 8

82
Tree	if ( element != null ) { type = element . getClass () ; } else { FeatureSet.ES3 = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { FeatureSet.ES3 = Object . getClass () ; }
Distance : 6

83
Tree	if ( element != null ) { type = element . getClass () ; } else { element = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { element = Object . getClass () ; }
Distance : 6

84
Tree	if ( element != null ) { this . type = element . getClass () ; } else { if = getClass () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { if = getClass () ; }
Distance : 8

85
Tree	if ( element != null ) { Double.NEGATIVE_INFINITY = false ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { Double.NEGATIVE_INFINITY = false ; } else { type = Object . getClass () ; }
Distance : 11

86
Tree	if ( element != null ) { type = ( element ) type . getClass () ; } else { type = this . type ; }
Code	if ( element != null ) { type = ( element ) type . getClass () ; } else { type = this . type ; }
Distance : 9

87
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Distance : 6

88
Tree	if ( element != null ) { StringUtils.EMPTY = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { StringUtils.EMPTY = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

89
Tree	if ( element != null ) { type = element . getClass () ; } else { if = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { if = element . getClass () ; }
Distance : 6

90
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) element . getClass () ; }
Distance : 8

91
Tree	if ( element != null ) { Long.MAX_VALUE = false ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { Long.MAX_VALUE = false ; } else { type = Object . getClass () ; }
Distance : 11

92
Tree	if ( element != null ) { type = element . getClass () ; } else { if = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { if = Object . getClass () ; }
Distance : 6

93
Tree	if ( element != null ) { options.removeUnusedVars = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { options.removeUnusedVars = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

94
Tree	if ( element != null ) { type = ( type ) element . getClass () ; } else { type = this . type ; }
Code	if ( element != null ) { type = ( type ) element . getClass () ; } else { type = this . type ; }
Distance : 9

95
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . Object ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . Object ; }
Distance : 9

96
Tree	if ( element != null ) { finderStub.actualToReturn = false ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { finderStub.actualToReturn = false ; } else { type = Object . getClass () ; }
Distance : 11

97
Tree	if ( element != null ) { domHelperType = false ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { domHelperType = false ; } else { type = Object . getClass () ; }
Distance : 11

98
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { InjectMocks = Object . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { InjectMocks = Object . getClass () ; }
Distance : 9

99
Tree	if ( element != null ) { Double = false ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { Double = false ; } else { type = Object . getClass () ; }
Distance : 11

100
Tree	if ( element != null ) { type = element . getClass () ; } else { if = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { if = Object . getClass () ; }
Distance : 6

101
Tree	if ( element != null ) { type = false ; } else { element = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { element = element . getClass () ; }
Distance : 10

102
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = values.length ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = values.length ; }
Distance : 10

103
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { else = element . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { else = element . getClass () ; }
Distance : 9

104
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { element = this . type ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { element = this . type ; }
Distance : 9

105
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { if = LanguageMode.ECMASCRIPT_2015 . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { if = LanguageMode.ECMASCRIPT_2015 . getClass () ; }
Distance : 9

106
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { TracerMode.ALL = Object . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { TracerMode.ALL = Object . getClass () ; }
Distance : 9

107
Tree	if ( element != null ) { type = false ; } else { type = type . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = type . getClass () ; }
Distance : 10

108
Tree	if ( type != null ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( type != null ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

109
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { else = element . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { else = element . getClass () ; }
Distance : 10

110
Tree	if ( element != null ) { StringUtils.EMPTY = false ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { StringUtils.EMPTY = false ; } else { type = Object . getClass () ; }
Distance : 11

111
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { CheckLevel.ERROR = Object . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { CheckLevel.ERROR = Object . getClass () ; }
Distance : 10

112
Tree	if ( element != null ) { type = element . getClass () ; } else { type = true ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = true ; }
Distance : 6

113
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { InjectMocks = Object . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { InjectMocks = Object . getClass () ; }
Distance : 10

114
Tree	if ( element != null ) { type = type . getClass () ; } else { type = false ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = false ; }
Distance : 7

115
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = array.length ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = array.length ; }
Distance : 9

116
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = Any.ANY ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = Any.ANY ; }
Distance : 9

117
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = val.length ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = val.length ; }
Distance : 8

118
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( type ) Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( type ) Object . getClass () ; }
Distance : 8

119
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( element ) element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( element ) element . getClass () ; }
Distance : 8

120
Tree	if ( element != null ) { this . type = element . getClass () ; } else { else = getClass () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { else = getClass () ; }
Distance : 8

121
Tree	if ( element != null ) { type = FACT.length ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = FACT.length ; } else { type = Object . getClass () ; }
Distance : 10

122
Tree	if ( element != null ) { type = false ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = Object . getClass () ; }
Distance : 10

123
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { else = Object . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { else = Object . getClass () ; }
Distance : 10

124
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = val.length ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = val.length ; }
Distance : 9

125
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 6

126
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 6

127
Tree	if ( element != null ) { type = problem.y ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = problem.y ; } else { type = Object . getClass () ; }
Distance : 10

128
Tree	if ( element != null ) { type = type . getClass () ; } else { type = type . getClass () ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = type . getClass () ; }
Distance : 7

129
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Distance : 8

130
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = FeatureSet.BARE_MINIMUM ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = FeatureSet.BARE_MINIMUM ; }
Distance : 10

131
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = problem.y ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = problem.y ; }
Distance : 10

132
Tree	if ( element != null ) { type = element . getClass () == TracerMode.ALL ; } else { type = StringUtils.EMPTY ; }
Code	if ( element != null ) { type = element . getClass () == TracerMode.ALL ; } else { type = StringUtils.EMPTY ; }
Distance : 8

133
Tree	if ( element != null ) { type = element . getClass () == FeatureSet.ES3 ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { type = element . getClass () == FeatureSet.ES3 ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 8

134
Tree	if ( element != null ) { type = RandomNameGenerator.FIRST_CHAR ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = RandomNameGenerator.FIRST_CHAR ; } else { type = Object . getClass () ; }
Distance : 10

135
Tree	if ( element != null ) { type = element . getClass () == FeatureSet.ES3 ; } else { type = array.length ; }
Code	if ( element != null ) { type = element . getClass () == FeatureSet.ES3 ; } else { type = array.length ; }
Distance : 8

136
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = problem.y ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = problem.y ; }
Distance : 8

137
Tree	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Code	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Distance : 9

138
Tree	if ( element != null ) { type = element . getClass () == CheckLevel.ERROR ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { type = element . getClass () == CheckLevel.ERROR ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 8

139
Tree	if ( element != null ) { StringUtils.EMPTY = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Code	if ( element != null ) { StringUtils.EMPTY = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Distance : 9

140
Tree	if ( element != null ) { type = element . getClass () == CheckLevel.ERROR ; } else { type = array.length ; }
Code	if ( element != null ) { type = element . getClass () == CheckLevel.ERROR ; } else { type = array.length ; }
Distance : 8

141
Tree	if ( element != null ) { type = element . getClass () == LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ; } else { type = StringUtils.EMPTY ; }
Code	if ( element != null ) { type = element . getClass () == LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ; } else { type = StringUtils.EMPTY ; }
Distance : 8

142
Tree	if ( element != null ) { type = element . getClass () ; } else { CheckLevel.ERROR = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { CheckLevel.ERROR = Object . getClass () ; }
Distance : 6

143
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = FeatureSet.BARE_MINIMUM ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = FeatureSet.BARE_MINIMUM ; }
Distance : 8

144
Tree	if ( element != null ) { element = element . getClass () ; } else { type = false ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type = false ; }
Distance : 7

145
Tree	if ( element != continue; ) { type = ( element ) element . getClass () ; } else { type = this . type ; }
Code	if ( element != continue; ) { type = ( element ) element . getClass () ; } else { type = this . type ; }
Distance : 10

146
Tree	if ( element != null ) { type = element . getClass () ; } else { type = problem.y ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = problem.y ; }
Distance : 6

147
Tree	if ( element != null ) { type = StringUtils.EMPTY ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = StringUtils.EMPTY ; } else { type = Object . getClass () ; }
Distance : 10

148
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = Any.ANY ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = Any.ANY ; }
Distance : 10

149
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = values.length ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = values.length ; }
Distance : 8

150
Tree	if ( element != null ) { type = element . getClass () ; } else { type = DecompositionType.UNDECOMPOSABLE ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = DecompositionType.UNDECOMPOSABLE ; }
Distance : 6

151
Tree	if ( element != null ) { type = false ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = Object . getClass () ; }
Distance : 10

152
Tree	if ( element != null ) { this . type = element . getClass () ; } else { Name = getClass () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { Name = getClass () ; }
Distance : 8

153
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = problem.y ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = problem.y ; }
Distance : 9

154
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = FeatureSet.ES3 ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = FeatureSet.ES3 ; }
Distance : 10

155
Tree	if ( element != null ) { Var.ARGUMENTS = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { Var.ARGUMENTS = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

156
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = FeatureSet.ES3 ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = FeatureSet.ES3 ; }
Distance : 8

157
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = values.length ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = values.length ; }
Distance : 9

158
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { if = Object . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { if = Object . getClass () ; }
Distance : 9

159
Tree	if ( element != null ) { this . type = element . getClass () ; } else { private = getClass () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { private = getClass () ; }
Distance : 8

160
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = FeatureSet.BARE_MINIMUM ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = FeatureSet.BARE_MINIMUM ; }
Distance : 9

161
Tree	if ( element != null ) { type = element . getClass () ; } else { type = FeatureSet.ES3 ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = FeatureSet.ES3 ; }
Distance : 6

162
Tree	if ( element != null ) { type = element . getClass () ; } else { type = false ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = false ; }
Distance : 6

163
Tree	if ( element != null ) { type = element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 6

164
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = LanguageMode.ECMASCRIPT8 ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = LanguageMode.ECMASCRIPT8 ; }
Distance : 10

165
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 10

166
Tree	if ( element != null ) { type = element . getClass () ; } else { type = StringUtils.EMPTY ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = StringUtils.EMPTY ; }
Distance : 6

167
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 8

168
Tree	if ( element != null ) { this . type = element . getClass () ; } else { synchronized = getClass () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { synchronized = getClass () ; }
Distance : 8

169
Tree	if ( element != null ) { Long.MAX_VALUE = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Code	if ( element != null ) { Long.MAX_VALUE = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Distance : 9

170
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 9

171
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = StringUtils.EMPTY ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = StringUtils.EMPTY ; }
Distance : 10

172
Tree	if ( element != null ) { type = element . getClass () == TracerMode.ALL ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { type = element . getClass () == TracerMode.ALL ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 8

173
Tree	if ( element != null ) { type = element . getClass () ; } else { type = values.length ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = values.length ; }
Distance : 6

174
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = StringUtils.EMPTY ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = StringUtils.EMPTY ; }
Distance : 8

175
Tree	if ( element != null ) { type = element . getClass () == TracerMode.ALL ; } else { type = array.length ; }
Code	if ( element != null ) { type = element . getClass () == TracerMode.ALL ; } else { type = array.length ; }
Distance : 8

176
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . type ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . type ; }
Distance : 9

177
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { if = StringUtils.EMPTY . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { if = StringUtils.EMPTY . getClass () ; }
Distance : 9

178
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = LanguageMode.ECMASCRIPT8 ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = LanguageMode.ECMASCRIPT8 ; }
Distance : 8

179
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { private = FeatureSet.ES3 . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { private = FeatureSet.ES3 . getClass () ; }
Distance : 9

180
Tree	if ( element != null ) { type = element . getClass () ; } else { else = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { else = Object . getClass () ; }
Distance : 6

181
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = FeatureSet.ES3 ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = FeatureSet.ES3 ; }
Distance : 9

182
Tree	if ( element != null ) { finderStub.actualToReturn = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Code	if ( element != null ) { finderStub.actualToReturn = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Distance : 9

183
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = val.length ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = val.length ; }
Distance : 10

184
Tree	if ( element != null ) { type = element . getClass () ; } else { InjectMocks = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { InjectMocks = Object . getClass () ; }
Distance : 6

185
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { synchronized = FeatureSet.ES3 . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { synchronized = FeatureSet.ES3 . getClass () ; }
Distance : 9

186
Tree	if ( element != null ) { type = element . getClass () ; } else { CheckLevel.ERROR = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { CheckLevel.ERROR = Object . getClass () ; }
Distance : 6

187
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { synchronized = Object . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { synchronized = Object . getClass () ; }
Distance : 10

188
Tree	if ( element != null ) { type = element . getClass () == LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { type = element . getClass () == LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 8

189
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) element . getClass () ; }
Distance : 8

190
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = Any.ANY ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = Any.ANY ; }
Distance : 8

191
Tree	if ( element != null ) { type = true ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = true ; } else { type = Object . getClass () ; }
Distance : 10

192
Tree	if ( element != null ) { this . type = element . getClass () ; } else { CheckLevel.ERROR = getClass () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { CheckLevel.ERROR = getClass () ; }
Distance : 8

193
Tree	if ( element != null ) { type = element . getClass () == LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ; } else { type = array.length ; }
Code	if ( element != null ) { type = element . getClass () == LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ; } else { type = array.length ; }
Distance : 8

194
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = LanguageMode.ECMASCRIPT8 ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = LanguageMode.ECMASCRIPT8 ; }
Distance : 9

195
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { private = Object . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { private = Object . getClass () ; }
Distance : 10

196
Tree	if ( element != null ) { domHelperType = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Code	if ( element != null ) { domHelperType = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Distance : 9

197
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { Name = Object . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { Name = Object . getClass () ; }
Distance : 10

198
Tree	if ( element != null ) { type = values.length ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = values.length ; } else { type = Object . getClass () ; }
Distance : 10

199
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) type . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) type . getClass () ; }
Distance : 8

========================================================================


========================================================================
Example Number: 44
Parent Code is: 
return m . containsKey ( value ) ;
-------------------------------------------------------------------------------
Child code is: 
return m != null && m . containsKey ( value ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=m}) (235{val=.}) (802{val=containsKey}) (214{val=(}) (800{val=value}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (27 (27 (800{val=m}) (242{val=!=}) (500{val=null})) (249{val=&&}) (32 (800{val=m}) (235{val=.}) (802{val=containsKey}) (214{val=(}) (800{val=value}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/34/parent/src_main_java_org_apache_commons_lang3_builder_ToStringStyle.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return value . containsKey ( m ) - NUMBER_CONSTANT ;
Code	return value . containsKey ( m ) - NUMBER_CONSTANT ;
Distance : 8

1
Tree	return containsKey ( value , value , true ) ;
Code	return containsKey ( value , value , true ) ;
Distance : 9

2
Tree	return m . containsKey ( m . containsKey ( m ) ) ;
Code	return m . containsKey ( m . containsKey ( m ) ) ;
Distance : 5

3
Tree	return value . containsKey ( STRING_CONSTANT , m ) ;
Code	return value . containsKey ( STRING_CONSTANT , m ) ;
Distance : 8

4
Tree	return m . containsKey ( m , true ) ;
Code	return m . containsKey ( m , true ) ;
Distance : 7

5
Tree	return NUMBER_CONSTANT / value ;
Code	return NUMBER_CONSTANT / value ;
Distance : 9

6
Tree	return value . containsKey ( m ) ;
Code	return value . containsKey ( m ) ;
Distance : 6

7
Tree	return value . containsKey ( value . containsKey ( m ) ) ;
Code	return value . containsKey ( value . containsKey ( m ) ) ;
Distance : 7

8
Tree	return new Interval ( value , false ) ;
Code	return new Interval ( value , false ) ;
Distance : 9

9
Tree	return value . containsKey ( m , value ) ;
Code	return value . containsKey ( m , value ) ;
Distance : 7

10
Tree	return containsKey ( m , m , true ) ;
Code	return containsKey ( m , m , true ) ;
Distance : 8

11
Tree	return value . value ( m ) ;
Code	return value . value ( m ) ;
Distance : 7

12
Tree	return value . containsKey ( STRING_CONSTANT , value ) ;
Code	return value . containsKey ( STRING_CONSTANT , value ) ;
Distance : 7

13
Tree	return value . containsKey ( m . containsKey ( m ) ) ;
Code	return value . containsKey ( m . containsKey ( m ) ) ;
Distance : 6

14
Tree	return value . containsKey ( m , true ) ;
Code	return value . containsKey ( m , true ) ;
Distance : 8

15
Tree	return value . containsKey ( m ) . containsKey ( m ) ;
Code	return value . containsKey ( m ) . containsKey ( m ) ;
Distance : 6

16
Tree	return m + NUMBER_CONSTANT ; Preconditions
Code	return m + NUMBER_CONSTANT ; Preconditions
Distance : 10

17
Tree	return m . containsKey ( value ) ; p
Code	return m . containsKey ( value ) ; p
Distance : 5

18
Tree	return containsKey ( value ) ; Class
Code	return containsKey ( value ) ; Class
Distance : 7

19
Tree	return containsKey ( value ) ; {}
Code	return containsKey ( value ) ; {}
Distance : 7

20
Tree	return containsKey ( value ) ; f
Code	return containsKey ( value ) ; f
Distance : 7

21
Tree	return containsKey ( value ) ; Test
Code	return containsKey ( value ) ; Test
Distance : 7

22
Tree	return this . m . containsKey ( value ) ; T
Code	return this . m . containsKey ( value ) ; T
Distance : 5

23
Tree	return this . m . containsKey ( value ) ; &&
Code	return this . m . containsKey ( value ) ; &&
Distance : 5

24
Tree	return this . m . containsKey ( value ) ; source
Code	return this . m . containsKey ( value ) ; source
Distance : 5

25
Tree	return containsKey ( value ) ; Preconditions
Code	return containsKey ( value ) ; Preconditions
Distance : 7

26
Tree	return this . m . containsKey ( value ) ; toString
Code	return this . m . containsKey ( value ) ; toString
Distance : 5

27
Tree	return m + NUMBER_CONSTANT ; Test
Code	return m + NUMBER_CONSTANT ; Test
Distance : 10

28
Tree	return containsKey ( m , value , false ) ;
Code	return containsKey ( m , value , false ) ;
Distance : 8

29
Tree	return m + NUMBER_CONSTANT ; Class
Code	return m + NUMBER_CONSTANT ; Class
Distance : 10

30
Tree	return this . value . containsKey ( value ) ;
Code	return this . value . containsKey ( value ) ;
Distance : 5

31
Tree	return m . containsKey ( m ) - NUMBER_CONSTANT ;
Code	return m . containsKey ( m ) - NUMBER_CONSTANT ;
Distance : 7

32
Tree	return m . containsKey ( STRING_CONSTANT , m ) ;
Code	return m . containsKey ( STRING_CONSTANT , m ) ;
Distance : 7

33
Tree	return new LUDecompositionImpl ( value , false ) ;
Code	return new LUDecompositionImpl ( value , false ) ;
Distance : 9

34
Tree	return new ArrayIndexOutOfBoundsException ( value , false ) ;
Code	return new ArrayIndexOutOfBoundsException ( value , false ) ;
Distance : 9

35
Tree	return m ;
Code	return m ;
Distance : 9

36
Tree	return m . containsKey ( value , false ) ;
Code	return m . containsKey ( value , false ) ;
Distance : 6

37
Tree	return new Interval ( value ) ;
Code	return new Interval ( value ) ;
Distance : 7

38
Tree	return m . containsKey ( value . containsKey ( value ) ) ;
Code	return m . containsKey ( value . containsKey ( value ) ) ;
Distance : 5

39
Tree	return m . containsKey ( value ) . containsKey ( value ) ;
Code	return m . containsKey ( value ) . containsKey ( value ) ;
Distance : 5

40
Tree	return m . containsKey () . containsKey ( value ) ;
Code	return m . containsKey () . containsKey ( value ) ;
Distance : 4

41
Tree	return NUMBER_CONSTANT / m ;
Code	return NUMBER_CONSTANT / m ;
Distance : 9

42
Tree	return new MathArithmeticException ( value , false ) ;
Code	return new MathArithmeticException ( value , false ) ;
Distance : 9

43
Tree	return this . m ;
Code	return this . m ;
Distance : 9

44
Tree	return new MathIllegalStateException ( value ) ;
Code	return new MathIllegalStateException ( value ) ;
Distance : 7

45
Tree	return containsKey () . containsKey ( value ) ;
Code	return containsKey () . containsKey ( value ) ;
Distance : 5

46
Tree	return m . containsKey ( value , new value ( value ) ) ;
Code	return m . containsKey ( value , new value ( value ) ) ;
Distance : 8

47
Tree	return m . containsKey ( value , value ) ;
Code	return m . containsKey ( value , value ) ;
Distance : 6

48
Tree	return containsKey ( value , value , false ) ;
Code	return containsKey ( value , value , false ) ;
Distance : 9

49
Tree	return m . containsKey ( value , new writer ( value ) ) ;
Code	return m . containsKey ( value , new writer ( value ) ) ;
Distance : 8

50
Tree	return m . containsKey ( value , true ) ;
Code	return m . containsKey ( value , true ) ;
Distance : 6

51
Tree	return m . containsKey ( value ) . containsKey ( m ) ;
Code	return m . containsKey ( value ) . containsKey ( m ) ;
Distance : 6

52
Tree	return containsKey ( value , m , false ) ;
Code	return containsKey ( value , m , false ) ;
Distance : 8

53
Tree	return m . m ( value ) ;
Code	return m . m ( value ) ;
Distance : 5

54
Tree	return m . containsKey ( value , m ) ;
Code	return m . containsKey ( value , m ) ;
Distance : 6

55
Tree	return m . containsKey () . containsKey ( m ) ;
Code	return m . containsKey () . containsKey ( m ) ;
Distance : 5

56
Tree	return containsKey ( m ) ;
Code	return containsKey ( m ) ;
Distance : 7

57
Tree	return containsKey () . containsKey ( m ) ;
Code	return containsKey () . containsKey ( m ) ;
Distance : 6

58
Tree	return m . containsKey ( m ) . containsKey ( value ) ;
Code	return m . containsKey ( m ) . containsKey ( value ) ;
Distance : 4

59
Tree	return m . containsKey ( m , value ) ;
Code	return m . containsKey ( m , value ) ;
Distance : 6

60
Tree	return m + NUMBER_CONSTANT ; {}
Code	return m + NUMBER_CONSTANT ; {}
Distance : 10

61
Tree	return m . containsKey ( value ) ;
Code	return m . containsKey ( value ) ;
Distance : 4

62
Tree	return m ; -
Code	return m ; -
Distance : 10

63
Tree	return NUMBER_CONSTANT / m ; Class
Code	return NUMBER_CONSTANT / m ; Class
Distance : 10

64
Tree	return NUMBER_CONSTANT / m ; MathRuntimeException
Code	return NUMBER_CONSTANT / m ; MathRuntimeException
Distance : 10

65
Tree	return NUMBER_CONSTANT / m ; f
Code	return NUMBER_CONSTANT / m ; f
Distance : 10

66
Tree	return NUMBER_CONSTANT / m ; ParamChecks
Code	return NUMBER_CONSTANT / m ; ParamChecks
Distance : 10

67
Tree	return m . containsKey ( STRING_CONSTANT , m ) ; T
Code	return m . containsKey ( STRING_CONSTANT , m ) ; T
Distance : 8

68
Tree	return this . m ; Test
Code	return this . m ; Test
Distance : 10

69
Tree	return m . containsKey ( STRING_CONSTANT , m ) ; &&
Code	return m . containsKey ( STRING_CONSTANT , m ) ; &&
Distance : 8

70
Tree	return m . containsKey ( STRING_CONSTANT , m ) ; p
Code	return m . containsKey ( STRING_CONSTANT , m ) ; p
Distance : 8

71
Tree	return NUMBER_CONSTANT / m ; Test
Code	return NUMBER_CONSTANT / m ; Test
Distance : 10

72
Tree	return m . containsKey ( STRING_CONSTANT , m ) ; options
Code	return m . containsKey ( STRING_CONSTANT , m ) ; options
Distance : 8

73
Tree	return this . m ; MathRuntimeException
Code	return this . m ; MathRuntimeException
Distance : 10

74
Tree	return m . containsKey ( value ) - NUMBER_CONSTANT ; source
Code	return m . containsKey ( value ) - NUMBER_CONSTANT ; source
Distance : 7

75
Tree	return m . containsKey ( STRING_CONSTANT , m ) ; source
Code	return m . containsKey ( STRING_CONSTANT , m ) ; source
Distance : 8

76
Tree	return this . m ; Preconditions
Code	return this . m ; Preconditions
Distance : 10

77
Tree	return this . m ; {}
Code	return this . m ; {}
Distance : 10

78
Tree	return this . m ; f
Code	return this . m ; f
Distance : 10

79
Tree	return this . m ; -
Code	return this . m ; -
Distance : 10

80
Tree	return this . m ; ParamChecks
Code	return this . m ; ParamChecks
Distance : 10

81
Tree	return this . m ; Class
Code	return this . m ; Class
Distance : 10

82
Tree	return m . value ( value ) ; wanted
Code	return m . value ( value ) ; wanted
Distance : 6

83
Tree	return NUMBER_CONSTANT / m ; {}
Code	return NUMBER_CONSTANT / m ; {}
Distance : 10

84
Tree	return m . containsKey ( value . containsKey ( value ) ) ; wanted
Code	return m . containsKey ( value . containsKey ( value ) ) ; wanted
Distance : 6

85
Tree	return m . containsKey ( value . containsKey ( value ) ) ; Math
Code	return m . containsKey ( value . containsKey ( value ) ) ; Math
Distance : 6

86
Tree	return m . containsKey ( value , false ) ; wanted
Code	return m . containsKey ( value , false ) ; wanted
Distance : 7

87
Tree	return containsKey ( value , value , false ) ; Math
Code	return containsKey ( value , value , false ) ; Math
Distance : 10

88
Tree	return m . containsKey ( value , false ) ; Math
Code	return m . containsKey ( value , false ) ; Math
Distance : 7

89
Tree	return m . value ( value ) ; Math
Code	return m . value ( value ) ; Math
Distance : 6

90
Tree	return value + NUMBER_CONSTANT ;
Code	return value + NUMBER_CONSTANT ;
Distance : 10

91
Tree	return m . containsKey ( value , new HashSet ( value ) ) ;
Code	return m . containsKey ( value , new HashSet ( value ) ) ;
Distance : 8

92
Tree	return m . containsKey ( value ) ; &&
Code	return m . containsKey ( value ) ; &&
Distance : 5

93
Tree	return value . containsKey ( value , true ) ;
Code	return value . containsKey ( value , true ) ;
Distance : 7

94
Tree	return m . containsKey ( m ) . containsKey ( m ) ;
Code	return m . containsKey ( m ) . containsKey ( m ) ;
Distance : 5

95
Tree	return m + NUMBER_CONSTANT ; f
Code	return m + NUMBER_CONSTANT ; f
Distance : 10

96
Tree	return m . containsKey ( value , new ArrayRealVector ( value ) ) ;
Code	return m . containsKey ( value , new ArrayRealVector ( value ) ) ;
Distance : 8

97
Tree	return this . m . containsKey ( value ) ;
Code	return this . m . containsKey ( value ) ;
Distance : 4

98
Tree	return value ;
Code	return value ;
Distance : 9

99
Tree	return this . value ;
Code	return this . value ;
Distance : 8

100
Tree	return m . containsKey ( value ) ; options
Code	return m . containsKey ( value ) ; options
Distance : 5

101
Tree	return m . m ( m ) ;
Code	return m . m ( m ) ;
Distance : 6

102
Tree	return value . containsKey ( value ) . containsKey ( m ) ;
Code	return value . containsKey ( value ) . containsKey ( m ) ;
Distance : 7

103
Tree	return containsKey ( value ) ; ParamChecks
Code	return containsKey ( value ) ; ParamChecks
Distance : 7

104
Tree	return value . containsKey ( value , false ) ;
Code	return value . containsKey ( value , false ) ;
Distance : 7

105
Tree	return new ExceptionUtils ( value ) ;
Code	return new ExceptionUtils ( value ) ;
Distance : 7

106
Tree	return m . containsKey ( value ) ; source
Code	return m . containsKey ( value ) ; source
Distance : 5

107
Tree	return value . m ( value ) ;
Code	return value . m ( value ) ;
Distance : 6

108
Tree	return value . containsKey ( value , value ) ;
Code	return value . containsKey ( value , value ) ;
Distance : 7

109
Tree	return m . containsKey ( value , value ) ; Math
Code	return m . containsKey ( value , value ) ; Math
Distance : 7

110
Tree	return new MathArithmeticException ( value ) ;
Code	return new MathArithmeticException ( value ) ;
Distance : 7

111
Tree	return new MathIllegalStateException ( value , false ) ;
Code	return new MathIllegalStateException ( value , false ) ;
Distance : 9

112
Tree	return m . containsKey () . containsKey ( value ) ; toString
Code	return m . containsKey () . containsKey ( value ) ; toString
Distance : 5

113
Tree	return new IllegalStateException ( value , false ) ;
Code	return new IllegalStateException ( value , false ) ;
Distance : 9

114
Tree	return value . containsKey ( value . containsKey ( value ) ) ;
Code	return value . containsKey ( value . containsKey ( value ) ) ;
Distance : 6

115
Tree	return value . containsKey ( value ) . containsKey ( value ) ;
Code	return value . containsKey ( value ) . containsKey ( value ) ;
Distance : 6

116
Tree	return m . value ( value ) ;
Code	return m . value ( value ) ;
Distance : 5

117
Tree	return m . containsKey ( value ) ; toString
Code	return m . containsKey ( value ) ; toString
Distance : 5

118
Tree	return new IllegalStateException ( value ) ;
Code	return new IllegalStateException ( value ) ;
Distance : 7

119
Tree	return value . containsKey ( value , m ) ;
Code	return value . containsKey ( value , m ) ;
Distance : 7

120
Tree	return this . m . containsKey ( value ) ; p
Code	return this . m . containsKey ( value ) ; p
Distance : 5

121
Tree	return new MaxCountExceededException ( value , false ) ;
Code	return new MaxCountExceededException ( value , false ) ;
Distance : 9

122
Tree	return value . containsKey ( value ) ;
Code	return value . containsKey ( value ) ;
Distance : 5

123
Tree	return m + NUMBER_CONSTANT ; MathRuntimeException
Code	return m + NUMBER_CONSTANT ; MathRuntimeException
Distance : 10

124
Tree	return m . containsKey ( m , m ) ;
Code	return m . containsKey ( m , m ) ;
Distance : 7

125
Tree	return value . containsKey () . containsKey ( m ) ;
Code	return value . containsKey () . containsKey ( m ) ;
Distance : 6

126
Tree	return value . m ( m ) ;
Code	return value . m ( m ) ;
Distance : 7

127
Tree	return NUMBER_CONSTANT / m ; -
Code	return NUMBER_CONSTANT / m ; -
Distance : 10

128
Tree	return m . containsKey ( value ) ; T
Code	return m . containsKey ( value ) ; T
Distance : 5

129
Tree	return containsKey ( value , m , true ) ;
Code	return containsKey ( value , m , true ) ;
Distance : 8

130
Tree	return containsKey ( value , value , false ) ; wanted
Code	return containsKey ( value , value , false ) ; wanted
Distance : 10

131
Tree	return m . containsKey ( m ) ;
Code	return m . containsKey ( m ) ;
Distance : 5

132
Tree	return m . containsKey ( value , value ) ; wanted
Code	return m . containsKey ( value , value ) ; wanted
Distance : 7

133
Tree	return new ExceptionUtils ( value , false ) ;
Code	return new ExceptionUtils ( value , false ) ;
Distance : 9

134
Tree	return new Throwable ( value , false ) ;
Code	return new Throwable ( value , false ) ;
Distance : 9

135
Tree	return new expr ( value , false ) ;
Code	return new expr ( value , false ) ;
Distance : 9

136
Tree	return m . containsKey () . containsKey ( value ) ; source
Code	return m . containsKey () . containsKey ( value ) ; source
Distance : 5

137
Tree	return value . containsKey ( value ) - NUMBER_CONSTANT ;
Code	return value . containsKey ( value ) - NUMBER_CONSTANT ;
Distance : 7

138
Tree	return m . value ( m ) ;
Code	return m . value ( m ) ;
Distance : 6

139
Tree	return m + NUMBER_CONSTANT ; -
Code	return m + NUMBER_CONSTANT ; -
Distance : 10

140
Tree	return this . value . containsKey ( m ) ;
Code	return this . value . containsKey ( m ) ;
Distance : 6

141
Tree	return value . containsKey ( m , false ) ;
Code	return value . containsKey ( m , false ) ;
Distance : 8

142
Tree	return m . containsKey ( m , false ) ;
Code	return m . containsKey ( m , false ) ;
Distance : 7

143
Tree	return m . containsKey ( value ) - NUMBER_CONSTANT ; &&
Code	return m . containsKey ( value ) - NUMBER_CONSTANT ; &&
Distance : 7

144
Tree	return m + NUMBER_CONSTANT ; ParamChecks
Code	return m + NUMBER_CONSTANT ; ParamChecks
Distance : 10

145
Tree	return containsKey ( m , m , false ) ;
Code	return containsKey ( m , m , false ) ;
Distance : 8

146
Tree	return this . m . containsKey ( m ) ;
Code	return this . m . containsKey ( m ) ;
Distance : 5

147
Tree	return containsKey ( value ) ;
Code	return containsKey ( value ) ;
Distance : 6

148
Tree	return containsKey ( value ) ; -
Code	return containsKey ( value ) ; -
Distance : 7

149
Tree	return value . containsKey ( m . containsKey ( value ) ) ;
Code	return value . containsKey ( m . containsKey ( value ) ) ;
Distance : 5

150
Tree	return containsKey ( m , value , true ) ;
Code	return containsKey ( m , value , true ) ;
Distance : 8

151
Tree	return m . containsKey () . containsKey ( value ) ; options
Code	return m . containsKey () . containsKey ( value ) ; options
Distance : 5

152
Tree	return m . containsKey ( value ) - NUMBER_CONSTANT ; toString
Code	return m . containsKey ( value ) - NUMBER_CONSTANT ; toString
Distance : 7

153
Tree	return m . containsKey ( value . containsKey ( m ) ) ;
Code	return m . containsKey ( value . containsKey ( m ) ) ;
Distance : 6

154
Tree	return m . containsKey ( value ) - NUMBER_CONSTANT ; p
Code	return m . containsKey ( value ) - NUMBER_CONSTANT ; p
Distance : 7

155
Tree	return m . containsKey ( value ) - NUMBER_CONSTANT ; T
Code	return m . containsKey ( value ) - NUMBER_CONSTANT ; T
Distance : 7

156
Tree	return new Throwable ( value ) ;
Code	return new Throwable ( value ) ;
Distance : 7

157
Tree	return new expr ( value ) ;
Code	return new expr ( value ) ;
Distance : 7

158
Tree	return m . containsKey ( value , new Returns ( value ) ) ;
Code	return m . containsKey ( value , new Returns ( value ) ) ;
Distance : 8

159
Tree	return m + NUMBER_CONSTANT ;
Code	return m + NUMBER_CONSTANT ;
Distance : 9

160
Tree	return m . containsKey ( value , new SinFunction ( value ) ) ;
Code	return m . containsKey ( value , new SinFunction ( value ) ) ;
Distance : 8

161
Tree	return m . containsKey ( value , new Type ( value ) ) ;
Code	return m . containsKey ( value , new Type ( value ) ) ;
Distance : 8

162
Tree	return containsKey () . containsKey ( value ) ; Test
Code	return containsKey () . containsKey ( value ) ; Test
Distance : 6

163
Tree	return containsKey () . containsKey ( value ) ; Class
Code	return containsKey () . containsKey ( value ) ; Class
Distance : 6

164
Tree	return m . containsKey ( value , new DummyLocalizable ( value ) ) ;
Code	return m . containsKey ( value , new DummyLocalizable ( value ) ) ;
Distance : 8

165
Tree	return new LUDecompositionImpl ( value ) ;
Code	return new LUDecompositionImpl ( value ) ;
Distance : 7

166
Tree	return new ArrayIndexOutOfBoundsException ( value ) ;
Code	return new ArrayIndexOutOfBoundsException ( value ) ;
Distance : 7

167
Tree	return m . containsKey ( value , new MathIllegalArgumentException ( value ) ) ;
Code	return m . containsKey ( value , new MathIllegalArgumentException ( value ) ) ;
Distance : 8

168
Tree	return containsKey () . containsKey ( value ) ; MathRuntimeException
Code	return containsKey () . containsKey ( value ) ; MathRuntimeException
Distance : 6

169
Tree	return containsKey () . containsKey ( value ) ; {}
Code	return containsKey () . containsKey ( value ) ; {}
Distance : 6

170
Tree	return containsKey () . containsKey ( value ) ; f
Code	return containsKey () . containsKey ( value ) ; f
Distance : 6

171
Tree	return containsKey () . containsKey ( value ) ; ParamChecks
Code	return containsKey () . containsKey ( value ) ; ParamChecks
Distance : 6

172
Tree	return value . containsKey () . containsKey ( value ) ;
Code	return value . containsKey () . containsKey ( value ) ;
Distance : 5

173
Tree	return m . containsKey ( value , new Add ( value ) ) ;
Code	return m . containsKey ( value , new Add ( value ) ) ;
Distance : 8

174
Tree	return m . containsKey ( m . containsKey ( value ) ) ;
Code	return m . containsKey ( m . containsKey ( value ) ) ;
Distance : 4

175
Tree	return containsKey () . containsKey ( value ) ; -
Code	return containsKey () . containsKey ( value ) ; -
Distance : 6

176
Tree	return m . containsKey ( value ) - NUMBER_CONSTANT ;
Code	return m . containsKey ( value ) - NUMBER_CONSTANT ;
Distance : 6

177
Tree	return m . containsKey () . containsKey ( value ) ; &&
Code	return m . containsKey () . containsKey ( value ) ; &&
Distance : 5

178
Tree	return new MaxCountExceededException ( value ) ;
Code	return new MaxCountExceededException ( value ) ;
Distance : 7

179
Tree	return this . m . containsKey ( value ) ; options
Code	return this . m . containsKey ( value ) ; options
Distance : 5

180
Tree	return m . containsKey ( STRING_CONSTANT , value ) ;
Code	return m . containsKey ( STRING_CONSTANT , value ) ;
Distance : 6

181
Tree	return m . containsKey () . containsKey ( value ) ; T
Code	return m . containsKey () . containsKey ( value ) ; T
Distance : 5

182
Tree	return containsKey ( value ) ; MathRuntimeException
Code	return containsKey ( value ) ; MathRuntimeException
Distance : 7

183
Tree	return value . value ( value ) ;
Code	return value . value ( value ) ;
Distance : 6

184
Tree	return containsKey () . containsKey ( value ) ; Preconditions
Code	return containsKey () . containsKey ( value ) ; Preconditions
Distance : 6

185
Tree	return value . containsKey ( m ) . containsKey ( value ) ;
Code	return value . containsKey ( m ) . containsKey ( value ) ;
Distance : 5

186
Tree	return value . containsKey ( m , m ) ;
Code	return value . containsKey ( m , m ) ;
Distance : 8

187
Tree	return m . containsKey ( value ) . containsKey ( value ) ; Math
Code	return m . containsKey ( value ) . containsKey ( value ) ; Math
Distance : 6

188
Tree	return m . containsKey ( value ) . containsKey ( value ) ; wanted
Code	return m . containsKey ( value ) . containsKey ( value ) ; wanted
Distance : 6

189
Tree	return m . containsKey ( STRING_CONSTANT , m ) ; toString
Code	return m . containsKey ( STRING_CONSTANT , m ) ; toString
Distance : 8

190
Tree	return NUMBER_CONSTANT / m ; Preconditions
Code	return NUMBER_CONSTANT / m ; Preconditions
Distance : 10

191
Tree	return m . containsKey ( value ) - NUMBER_CONSTANT ; options
Code	return m . containsKey ( value ) - NUMBER_CONSTANT ; options
Distance : 7

192
Tree	return m ; Test
Code	return m ; Test
Distance : 10

193
Tree	return m ; Class
Code	return m ; Class
Distance : 10

194
Tree	return m ; MathRuntimeException
Code	return m ; MathRuntimeException
Distance : 10

195
Tree	return m ; {}
Code	return m ; {}
Distance : 10

196
Tree	return m ; f
Code	return m ; f
Distance : 10

197
Tree	return m . containsKey () . containsKey ( value ) ; p
Code	return m . containsKey () . containsKey ( value ) ; p
Distance : 5

198
Tree	return m ; ParamChecks
Code	return m ; ParamChecks
Distance : 10

199
Tree	return m ; Preconditions
Code	return m ; Preconditions
Distance : 10

========================================================================


========================================================================
Example Number: 45
Parent Code is: 
CharSequence cs
-------------------------------------------------------------------------------
Child code is: 
String cs
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (44 (43 (801{val=CharSequence})) (800{val=cs})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (44 (43 (801{val=String})) (800{val=cs})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/30/parent/src_main_java_org_apache_commons_lang3_StringUtils.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	@ String CharSequence cs
Code	@ String CharSequence cs
Distance : 2

1
Tree	final double . . . cs
Code	final double . . . cs
Distance : 5

2
Tree	indexOf
Code	indexOf
Distance : 2

3
Tree	@ CharSequence CharSequence cs
Code	@ CharSequence CharSequence cs
Distance : 3

4
Tree	void . . . cs
Code	void . . . cs
Distance : 4

5
Tree	double . . . cs
Code	double . . . cs
Distance : 4

6
Tree	String . . . cs
Code	String . . . cs
Distance : 3

7
Tree	final short cs
Code	final short cs
Distance : 2

8
Tree	final cs . . . cs Math
Code	final cs . . . cs Math
Distance : 6

9
Tree	String [] cs
Code	String [] cs
Distance : 1

10
Tree	float . . . cs
Code	float . . . cs
Distance : 4

11
Tree	final float cs
Code	final float cs
Distance : 2

12
Tree	final [] cs
Code	final [] cs
Distance : 2

13
Tree	final += cs
Code	final += cs
Distance : 2

14
Tree	float cs
Code	float cs
Distance : 1

15
Tree	final boolean cs
Code	final boolean cs
Distance : 2

16
Tree	CharSequence <> cs
Code	CharSequence <> cs
Distance : 2

17
Tree	sb
Code	sb
Distance : 2

18
Tree	short . . . cs
Code	short . . . cs
Distance : 4

19
Tree	printStackTrace
Code	printStackTrace
Distance : 2

20
Tree	public CharSequence cs
Code	public CharSequence cs
Distance : 2

21
Tree	public CharSequence [] cs
Code	public CharSequence [] cs
Distance : 3

22
Tree	public cs . . . cs
Code	public cs . . . cs
Distance : 5

23
Tree	CharSequence . . . cs MathRuntimeException
Code	CharSequence . . . cs MathRuntimeException
Distance : 5

24
Tree	CharSequence . . . cs Class
Code	CharSequence . . . cs Class
Distance : 5

25
Tree	@ CharSequence CharSequence cs toString
Code	@ CharSequence CharSequence cs toString
Distance : 4

26
Tree	abstract String cs
Code	abstract String cs
Distance : 1

27
Tree	protected CharSequence cs
Code	protected CharSequence cs
Distance : 2

28
Tree	static CharSequence cs
Code	static CharSequence cs
Distance : 2

29
Tree	abstract CharSequence [] cs
Code	abstract CharSequence [] cs
Distance : 3

30
Tree	abstract cs . . . cs
Code	abstract cs . . . cs
Distance : 5

31
Tree	abstract char cs
Code	abstract char cs
Distance : 2

32
Tree	String <> cs
Code	String <> cs
Distance : 1

33
Tree	final void . . . cs
Code	final void . . . cs
Distance : 5

34
Tree	final cs . . . cs
Code	final cs . . . cs
Distance : 5

35
Tree	final cs < cs > cs
Code	final cs < cs > cs
Distance : 5

36
Tree	final short . . . cs
Code	final short . . . cs
Distance : 5

37
Tree	final void cs
Code	final void cs
Distance : 2

38
Tree	sb cs
Code	sb cs
Distance : 1

39
Tree	abstract cs < cs > cs
Code	abstract cs < cs > cs
Distance : 5

40
Tree	MutableLong cs
Code	MutableLong cs
Distance : 1

41
Tree	cs < cs , cs > cs class
Code	cs < cs , cs > cs class
Distance : 7

42
Tree	final CharSequence cs
Code	final CharSequence cs
Distance : 2

43
Tree	final char cs
Code	final char cs
Distance : 2

44
Tree	final int cs
Code	final int cs
Distance : 2

45
Tree	int . . . cs
Code	int . . . cs
Distance : 4

46
Tree	final CharSequence [] cs
Code	final CharSequence [] cs
Distance : 3

47
Tree	cs . . . cs
Code	cs . . . cs
Distance : 4

48
Tree	CharSequence [] cs
Code	CharSequence [] cs
Distance : 2

49
Tree	byte cs
Code	byte cs
Distance : 1

50
Tree	cs . . . cs notifyListeners
Code	cs . . . cs notifyListeners
Distance : 5

51
Tree	char cs wanted
Code	char cs wanted
Distance : 2

52
Tree	cs cs -
Code	cs cs -
Distance : 2

53
Tree	cs cs [
Code	cs cs [
Distance : 2

54
Tree	cs cs f
Code	cs cs f
Distance : 2

55
Tree	cs cs Override
Code	cs cs Override
Distance : 2

56
Tree	cs cs MathRuntimeException
Code	cs cs MathRuntimeException
Distance : 2

57
Tree	cs cs mock
Code	cs cs mock
Distance : 2

58
Tree	cs < cs > cs
Code	cs < cs > cs
Distance : 4

59
Tree	final boolean . . . cs
Code	final boolean . . . cs
Distance : 5

60
Tree	final byte cs
Code	final byte cs
Distance : 2

61
Tree	final long cs
Code	final long cs
Distance : 2

62
Tree	final boolean cs
Code	final boolean cs
Distance : 2

63
Tree	final cs . . . cs options
Code	final cs . . . cs options
Distance : 6

64
Tree	CharSequence [] cs -
Code	CharSequence [] cs -
Distance : 3

65
Tree	CharSequence [] cs ParamChecks
Code	CharSequence [] cs ParamChecks
Distance : 3

66
Tree	CharSequence [] cs f
Code	CharSequence [] cs f
Distance : 3

67
Tree	CharSequence [] cs {}
Code	CharSequence [] cs {}
Distance : 3

68
Tree	CharSequence [] cs MathRuntimeException
Code	CharSequence [] cs MathRuntimeException
Distance : 3

69
Tree	CharSequence [] cs Class
Code	CharSequence [] cs Class
Distance : 3

70
Tree	byte . . . cs
Code	byte . . . cs
Distance : 4

71
Tree	CharSequence [] cs Test
Code	CharSequence [] cs Test
Distance : 3

72
Tree	cs < cs , cs > cs [
Code	cs < cs , cs > cs [
Distance : 7

73
Tree	cs < cs , cs > cs f
Code	cs < cs , cs > cs f
Distance : 7

74
Tree	cs < cs , cs > cs Override
Code	cs < cs , cs > cs Override
Distance : 7

75
Tree	cs < cs , cs > cs MathRuntimeException
Code	cs < cs , cs > cs MathRuntimeException
Distance : 7

76
Tree	final cs < cs > cs options
Code	final cs < cs > cs options
Distance : 6

77
Tree	final cs < cs > cs i
Code	final cs < cs > cs i
Distance : 6

78
Tree	CharSequence . . . cs
Code	CharSequence . . . cs
Distance : 4

79
Tree	long . . . cs
Code	long . . . cs
Distance : 4

80
Tree	final String cs
Code	final String cs
Distance : 1

81
Tree	public String cs
Code	public String cs
Distance : 1

82
Tree	@ CharSequence CharSequence cs source
Code	@ CharSequence CharSequence cs source
Distance : 4

83
Tree	@ CharSequence CharSequence cs options
Code	@ CharSequence CharSequence cs options
Distance : 4

84
Tree	final CharSequence cs
Code	final CharSequence cs
Distance : 2

85
Tree	codePointCount cs
Code	codePointCount cs
Distance : 1

86
Tree	CharSequence cs
Code	CharSequence cs
Distance : 1

87
Tree	SystemUtils.LINE_SEPARATOR cs
Code	SystemUtils.LINE_SEPARATOR cs
Distance : 1

88
Tree	char cs
Code	char cs
Distance : 1

89
Tree	@ CharSequence CharSequence cs p
Code	@ CharSequence CharSequence cs p
Distance : 4

90
Tree	@ CharSequence CharSequence cs &&
Code	@ CharSequence CharSequence cs &&
Distance : 4

91
Tree	final cs < cs > cs Math
Code	final cs < cs > cs Math
Distance : 6

92
Tree	final char cs
Code	final char cs
Distance : 2

93
Tree	final
Code	final
Distance : 2

94
Tree	char . . . cs
Code	char . . . cs
Distance : 4

95
Tree	final byte cs
Code	final byte cs
Distance : 2

96
Tree	final int cs
Code	final int cs
Distance : 2

97
Tree	@ CharSequence CharSequence cs T
Code	@ CharSequence CharSequence cs T
Distance : 4

98
Tree	cs cs notifyListeners
Code	cs cs notifyListeners
Distance : 2

99
Tree	cs < cs , cs > cs mock
Code	cs < cs , cs > cs mock
Distance : 7

100
Tree	cs cs class
Code	cs cs class
Distance : 2

101
Tree	cs . . . cs class
Code	cs . . . cs class
Distance : 5

102
Tree	cs < cs > cs notifyListeners
Code	cs < cs > cs notifyListeners
Distance : 5

103
Tree	int cs
Code	int cs
Distance : 1

104
Tree	final >= cs
Code	final >= cs
Distance : 2

105
Tree	cs . . . cs -
Code	cs . . . cs -
Distance : 5

106
Tree	cs . . . cs [
Code	cs . . . cs [
Distance : 5

107
Tree	cs . . . cs f
Code	cs . . . cs f
Distance : 5

108
Tree	cs cs
Code	cs cs
Distance : 1

109
Tree	final CHAR_CONS cs
Code	final CHAR_CONS cs
Distance : 2

110
Tree	cs < cs , cs > cs array
Code	cs < cs , cs > cs array
Distance : 7

111
Tree	double cs
Code	double cs
Distance : 1

112
Tree	cs < cs > cs class
Code	cs < cs > cs class
Distance : 5

113
Tree	long cs
Code	long cs
Distance : 1

114
Tree	abstract CharSequence cs
Code	abstract CharSequence cs
Distance : 2

115
Tree	cs
Code	cs
Distance : 1

116
Tree	CharSequence . . . cs f
Code	CharSequence . . . cs f
Distance : 5

117
Tree	columns
Code	columns
Distance : 2

118
Tree	cs < cs > cs array
Code	cs < cs > cs array
Distance : 5

119
Tree	cs . . . cs Override
Code	cs . . . cs Override
Distance : 5

120
Tree	static cs < cs > cs
Code	static cs < cs > cs
Distance : 5

121
Tree	public String [] cs
Code	public String [] cs
Distance : 2

122
Tree	private CharSequence cs
Code	private CharSequence cs
Distance : 2

123
Tree	rows
Code	rows
Distance : 2

124
Tree	synchronized cs . . . cs
Code	synchronized cs . . . cs
Distance : 5

125
Tree	CharSequence [] cs Preconditions
Code	CharSequence [] cs Preconditions
Distance : 3

126
Tree	public cs < cs > cs
Code	public cs < cs > cs
Distance : 5

127
Tree	static cs . . . cs
Code	static cs . . . cs
Distance : 5

128
Tree	final int . . . cs
Code	final int . . . cs
Distance : 5

129
Tree	cs < cs > cs mock
Code	cs < cs > cs mock
Distance : 5

130
Tree	final cs
Code	final cs
Distance : 1

131
Tree	CharSequence <> cs Preconditions
Code	CharSequence <> cs Preconditions
Distance : 3

132
Tree	CharSequence cs Test
Code	CharSequence cs Test
Distance : 2

133
Tree	synchronized CharSequence [] cs
Code	synchronized CharSequence [] cs
Distance : 3

134
Tree	cs < cs > cs MathRuntimeException
Code	cs < cs > cs MathRuntimeException
Distance : 5

135
Tree	private cs . . . cs
Code	private cs . . . cs
Distance : 5

136
Tree	private CharSequence [] cs
Code	private CharSequence [] cs
Distance : 3

137
Tree	synchronized cs < cs > cs
Code	synchronized cs < cs > cs
Distance : 5

138
Tree	cs . . . cs MathRuntimeException
Code	cs . . . cs MathRuntimeException
Distance : 5

139
Tree	CharSequence cs Class
Code	CharSequence cs Class
Distance : 2

140
Tree	assertContains
Code	assertContains
Distance : 2

141
Tree	abstract char . . . cs
Code	abstract char . . . cs
Distance : 5

142
Tree	private cs < cs > cs
Code	private cs < cs > cs
Distance : 5

143
Tree	protected cs . . . cs
Code	protected cs . . . cs
Distance : 5

144
Tree	cs < cs > cs Override
Code	cs < cs > cs Override
Distance : 5

145
Tree	boolean . . . cs
Code	boolean . . . cs
Distance : 4

146
Tree	final long cs
Code	final long cs
Distance : 2

147
Tree	CharSequence cs MathRuntimeException
Code	CharSequence cs MathRuntimeException
Distance : 2

148
Tree	Locale.ENGLISH cs
Code	Locale.ENGLISH cs
Distance : 1

149
Tree	boolean cs
Code	boolean cs
Distance : 1

150
Tree	cs < cs , cs > cs notifyListeners
Code	cs < cs , cs > cs notifyListeners
Distance : 7

151
Tree	String cs
Code	String cs
Distance : 0

152
Tree	cs < cs , cs > cs
Code	cs < cs , cs > cs
Distance : 6

153
Tree	Precision.SAFE_MIN cs
Code	Precision.SAFE_MIN cs
Distance : 1

154
Tree	final long . . . cs
Code	final long . . . cs
Distance : 5

155
Tree	CharSequence <> cs -
Code	CharSequence <> cs -
Distance : 3

156
Tree	CharSequence <> cs ParamChecks
Code	CharSequence <> cs ParamChecks
Distance : 3

157
Tree	CharSequence <> cs f
Code	CharSequence <> cs f
Distance : 3

158
Tree	CharSequence <> cs {}
Code	CharSequence <> cs {}
Distance : 3

159
Tree	final double cs
Code	final double cs
Distance : 2

160
Tree	CharSequence <> cs MathRuntimeException
Code	CharSequence <> cs MathRuntimeException
Distance : 3

161
Tree	byte
Code	byte
Distance : 2

162
Tree	CharSequence <> cs Class
Code	CharSequence <> cs Class
Distance : 3

163
Tree	void cs
Code	void cs
Distance : 1

164
Tree	CharSequence <> cs Test
Code	CharSequence <> cs Test
Distance : 3

165
Tree	synchronized CharSequence cs
Code	synchronized CharSequence cs
Distance : 2

166
Tree	cs cs array
Code	cs cs array
Distance : 2

167
Tree	CharSequence . . . cs Preconditions
Code	CharSequence . . . cs Preconditions
Distance : 5

168
Tree	Localizable cs
Code	Localizable cs
Distance : 1

169
Tree	static CharSequence [] cs
Code	static CharSequence [] cs
Distance : 3

170
Tree	cs < cs > cs -
Code	cs < cs > cs -
Distance : 5

171
Tree	short cs
Code	short cs
Distance : 1

172
Tree	cs . . . cs mock
Code	cs . . . cs mock
Distance : 5

173
Tree	. cs
Code	. cs
Distance : 1

174
Tree	protected CharSequence [] cs
Code	protected CharSequence [] cs
Distance : 3

175
Tree	cs < cs > cs f
Code	cs < cs > cs f
Distance : 5

176
Tree	abstract String [] cs
Code	abstract String [] cs
Distance : 2

177
Tree	cs < cs > cs [
Code	cs < cs > cs [
Distance : 5

178
Tree	CharSequence . . . cs {}
Code	CharSequence . . . cs {}
Distance : 5

179
Tree	final byte . . . cs
Code	final byte . . . cs
Distance : 5

180
Tree	CharSequence cs {}
Code	CharSequence cs {}
Distance : 2

181
Tree	CharSequence cs f
Code	CharSequence cs f
Distance : 2

182
Tree	cs cs
Code	cs cs
Distance : 1

183
Tree	CharSequence . . . cs -
Code	CharSequence . . . cs -
Distance : 5

184
Tree	@ String String cs
Code	@ String String cs
Distance : 2

185
Tree	final char . . . cs
Code	final char . . . cs
Distance : 5

186
Tree	final float . . . cs
Code	final float . . . cs
Distance : 5

187
Tree	@ CharSequence String cs
Code	@ CharSequence String cs
Distance : 2

188
Tree	CharSequence cs ParamChecks
Code	CharSequence cs ParamChecks
Distance : 2

189
Tree	cs < cs , cs > cs -
Code	cs < cs , cs > cs -
Distance : 7

190
Tree	final String [] cs
Code	final String [] cs
Distance : 2

191
Tree	final cs . . . cs i
Code	final cs . . . cs i
Distance : 6

192
Tree	append
Code	append
Distance : 2

193
Tree	CharSequence cs -
Code	CharSequence cs -
Distance : 2

194
Tree	protected cs < cs > cs
Code	protected cs < cs > cs
Distance : 5

195
Tree	CharSequence . . . cs Test
Code	CharSequence . . . cs Test
Distance : 5

196
Tree	CharSequence . . . cs ParamChecks
Code	CharSequence . . . cs ParamChecks
Distance : 5

197
Tree	CharSequence cs Preconditions
Code	CharSequence cs Preconditions
Distance : 2

198
Tree	char . . . cs wanted
Code	char . . . cs wanted
Distance : 5

199
Tree	cs . . . cs array
Code	cs . . . cs array
Distance : 5

========================================================================


========================================================================
Example Number: 46
Parent Code is: 
Calendar c = new GregorianCalendar ( mTimeZone ) ;
-------------------------------------------------------------------------------
Child code is: 
Calendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Calendar})) (59 (800{val=c}) (204{val==}) (14 (304{val=new}) (43 (801{val=GregorianCalendar})) (214{val=(}) (800{val=mTimeZone}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Calendar})) (59 (800{val=c}) (204{val==}) (14 (304{val=new}) (43 (801{val=GregorianCalendar})) (214{val=(}) (800{val=mTimeZone}) (234{val=,}) (800{val=mLocale}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/26/parent/src_main_java_org_apache_commons_lang3_time_FastDateFormat.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ ToStringContext.TO_STRING ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ ToStringContext.TO_STRING ] ) ;
Distance : 5

1
Tree	Calendar c = new GregorianCalendar ( mTimeZone . getName ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone . getName ( STRING_CONSTANT ) ) ;
Distance : 5

2
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ array.length ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ array.length ] ) ;
Distance : 5

3
Tree	GregorianCalendar c = NUMBER_CONSTANT ;
Code	GregorianCalendar c = NUMBER_CONSTANT ;
Distance : 8

4
Tree	Calendar [] c = new GregorianCalendar ( mTimeZone ) ;
Code	Calendar [] c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

5
Tree	final GregorianCalendar c = new GregorianCalendar ( mTimeZone ) ;
Code	final GregorianCalendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 4

6
Tree	Calendar c = new GregorianCalendar ( RandomSource.MT , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( RandomSource.MT , mLocale ) ;
Distance : 1

7
Tree	Calendar c = new GregorianCalendar ( RandomSource.MT , mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( RandomSource.MT , mTimeZone ) ;
Distance : 2

8
Tree	Calendar c = new GregorianCalendar ( mTimeZone . getInstance ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone . getInstance ( STRING_CONSTANT ) ) ;
Distance : 5

9
Tree	Calendar c = mock () ;
Code	Calendar c = mock () ;
Distance : 7

10
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 2

11
Tree	Calendar c = new Calendar ( mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone ) ;
Distance : 3

12
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . getDeclaredType () ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . getDeclaredType () ;
Distance : 4

13
Tree	Calendar c = new GregorianCalendar ( mTimeZone , array.length ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , array.length ) ;
Distance : 1

14
Tree	Calendar c = new GregorianCalendar () ;
Code	Calendar c = new GregorianCalendar () ;
Distance : 5

15
Tree	Calendar c = NUMBER_CONSTANT ;
Code	Calendar c = NUMBER_CONSTANT ;
Distance : 7

16
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . valueOf ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . valueOf ( STRING_CONSTANT ) ) ;
Distance : 5

17
Tree	Calendar c = new GregorianCalendar ( mTimeZone , true ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , true ) ;
Distance : 1

18
Tree	Calendar c = describe () ;
Code	Calendar c = describe () ;
Distance : 7

19
Tree	GregorianCalendar c = mLocale . getInstance ( mTimeZone , mLocale ) ;
Code	GregorianCalendar c = mLocale . getInstance ( mTimeZone , mLocale ) ;
Distance : 4

20
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

21
Tree	Calendar c = mLocale . toString ( mTimeZone , mLocale ) ;
Code	Calendar c = mLocale . toString ( mTimeZone , mLocale ) ;
Distance : 3

22
Tree	Calendar [] c = new GregorianCalendar ( c ) ;
Code	Calendar [] c = new GregorianCalendar ( c ) ;
Distance : 4

23
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . returnZero () ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . returnZero () ;
Distance : 4

24
Tree	Calendar c = new GregorianCalendar ( mTimeZone . getBytes ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone . getBytes ( STRING_CONSTANT ) ) ;
Distance : 5

25
Tree	GregorianCalendar c ;
Code	GregorianCalendar c ;
Distance : 9

26
Tree	GregorianCalendar c = newCalendar () ;
Code	GregorianCalendar c = newCalendar () ;
Distance : 8

27
Tree	Calendar c = mLocale . describe ( mTimeZone , mLocale ) ;
Code	Calendar c = mLocale . describe ( mTimeZone , mLocale ) ;
Distance : 3

28
Tree	Calendar c = new GregorianCalendar ( mTimeZone , DateParser ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , DateParser ) ;
Distance : 1

29
Tree	GregorianCalendar c = new Calendar ( mTimeZone , false ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone , false ) ;
Distance : 3

30
Tree	Calendar c = new Calendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new Calendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 6

31
Tree	Calendar c = getInstance () ;
Code	Calendar c = getInstance () ;
Distance : 7

32
Tree	Calendar c = new GregorianCalendar ( c , NUMBER_CONSTANT ) ;
Code	Calendar c = new GregorianCalendar ( c , NUMBER_CONSTANT ) ;
Distance : 2

33
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . getChangedScopeNodesForPass ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . getChangedScopeNodesForPass ( STRING_CONSTANT ) ) ;
Distance : 5

34
Tree	Calendar c = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Calendar c = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

35
Tree	GregorianCalendar [] c = new GregorianCalendar ( mTimeZone ) ;
Code	GregorianCalendar [] c = new GregorianCalendar ( mTimeZone ) ;
Distance : 4

36
Tree	Calendar c = new GregorianCalendar ( mTimeZone . halfdayOfDay ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone . halfdayOfDay ( STRING_CONSTANT ) ) ;
Distance : 5

37
Tree	Calendar [] c = new Calendar ( mTimeZone ) ;
Code	Calendar [] c = new Calendar ( mTimeZone ) ;
Distance : 4

38
Tree	Calendar c = new GregorianCalendar ( mTimeZone . get ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone . get ( STRING_CONSTANT ) ) ;
Distance : 5

39
Tree	Calendar c = new Calendar ( c ) ;
Code	Calendar c = new Calendar ( c ) ;
Distance : 4

40
Tree	final Calendar c = new Calendar ( mTimeZone ) ;
Code	final Calendar c = new Calendar ( mTimeZone ) ;
Distance : 4

41
Tree	Calendar c = mLocale . describe ( mTimeZone ) ;
Code	Calendar c = mLocale . describe ( mTimeZone ) ;
Distance : 5

42
Tree	GregorianCalendar c = new GregorianCalendar ( mLocale , mLocale ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mLocale , mLocale ) ;
Distance : 2

43
Tree	protected Calendar c = new GregorianCalendar ( mTimeZone ) ;
Code	protected Calendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

44
Tree	Calendar c = new GregorianCalendar ( c ) ;
Code	Calendar c = new GregorianCalendar ( c ) ;
Distance : 3

45
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ t1.time ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ t1.time ] ) ;
Distance : 5

46
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ currentState.length ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ currentState.length ] ) ;
Distance : 5

47
Tree	GregorianCalendar c = new GregorianCalendar ( mLocale , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mLocale , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 7

48
Tree	Calendar c = c . getInstance ( mTimeZone ) ;
Code	Calendar c = c . getInstance ( mTimeZone ) ;
Distance : 5

49
Tree	GregorianCalendar mTimeZone ;
Code	GregorianCalendar mTimeZone ;
Distance : 8

50
Tree	GregorianCalendar c = new Calendar ( mLocale ) ;
Code	GregorianCalendar c = new Calendar ( mLocale ) ;
Distance : 4

51
Tree	GregorianCalendar c = new Calendar ( mLocale , NUMBER_CONSTANT ) ;
Code	GregorianCalendar c = new Calendar ( mLocale , NUMBER_CONSTANT ) ;
Distance : 4

52
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone . getInstance ( STRING_CONSTANT ) ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone . getInstance ( STRING_CONSTANT ) ) ;
Distance : 6

53
Tree	GregorianCalendar c = mLocale . getInstance ( mTimeZone ) ;
Code	GregorianCalendar c = mLocale . getInstance ( mTimeZone ) ;
Distance : 6

54
Tree	Calendar c = new GregorianCalendar ( Decomposition.QR , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( Decomposition.QR , mLocale ) ;
Distance : 1

55
Tree	Calendar c = mLocale . getInstance ( mTimeZone , mLocale ) ;
Code	Calendar c = mLocale . getInstance ( mTimeZone , mLocale ) ;
Distance : 3

56
Tree	Calendar c = new Calendar ( mTimeZone , mLocale . newBuilder ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale . newBuilder ( STRING_CONSTANT ) ) ;
Distance : 6

57
Tree	GregorianCalendar mTimeZone = NUMBER_CONSTANT ;
Code	GregorianCalendar mTimeZone = NUMBER_CONSTANT ;
Distance : 8

58
Tree	GregorianCalendar mLocale = new Calendar () ;
Code	GregorianCalendar mLocale = new Calendar () ;
Distance : 8

59
Tree	Calendar c = new Calendar ( mLocale , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new Calendar ( mLocale , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 7

60
Tree	Calendar c = new Calendar ( mLocale , false ) ;
Code	Calendar c = new Calendar ( mLocale , false ) ;
Distance : 3

61
Tree	GregorianCalendar c = new Calendar ( mLocale , false ) ;
Code	GregorianCalendar c = new Calendar ( mLocale , false ) ;
Distance : 4

62
Tree	final GregorianCalendar c = new Calendar ( mTimeZone ) ;
Code	final GregorianCalendar c = new Calendar ( mTimeZone ) ;
Distance : 5

63
Tree	Calendar c = mTimeZone . getInstance ( mTimeZone ) ;
Code	Calendar c = mTimeZone . getInstance ( mTimeZone ) ;
Distance : 5

64
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . getInstance ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . getInstance ( STRING_CONSTANT ) ) ;
Distance : 5

65
Tree	GregorianCalendar mLocale ;
Code	GregorianCalendar mLocale ;
Distance : 8

66
Tree	GregorianCalendar c = new GregorianCalendar ( mLocale ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mLocale ) ;
Distance : 3

67
Tree	Calendar c = mLocale . toString ( mTimeZone ) ;
Code	Calendar c = mLocale . toString ( mTimeZone ) ;
Distance : 5

68
Tree	GregorianCalendar c = mTimeZone . getInstance ( mTimeZone ) ;
Code	GregorianCalendar c = mTimeZone . getInstance ( mTimeZone ) ;
Distance : 6

69
Tree	final GregorianCalendar c = new GregorianCalendar ( mLocale ) ;
Code	final GregorianCalendar c = new GregorianCalendar ( mLocale ) ;
Distance : 4

70
Tree	Calendar mTimeZone = new Calendar () ;
Code	Calendar mTimeZone = new Calendar () ;
Distance : 7

71
Tree	Calendar [] c = new GregorianCalendar ( mLocale ) ;
Code	Calendar [] c = new GregorianCalendar ( mLocale ) ;
Distance : 3

72
Tree	GregorianCalendar [] c = new GregorianCalendar ( mLocale ) ;
Code	GregorianCalendar [] c = new GregorianCalendar ( mLocale ) ;
Distance : 4

73
Tree	Calendar mTimeZone ;
Code	Calendar mTimeZone ;
Distance : 8

74
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone , new Calendar [ NUMBER_CONSTANT ] ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone , new Calendar [ NUMBER_CONSTANT ] ) ;
Distance : 6

75
Tree	final Calendar c = new Calendar ( mLocale ) ;
Code	final Calendar c = new Calendar ( mLocale ) ;
Distance : 4

76
Tree	Calendar c = new GregorianCalendar ( Decomposition.QR , mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( Decomposition.QR , mTimeZone ) ;
Distance : 2

77
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . newBuilder ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . newBuilder ( STRING_CONSTANT ) ) ;
Distance : 5

78
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 6

79
Tree	GregorianCalendar [] c = new Calendar ( mLocale ) ;
Code	GregorianCalendar [] c = new Calendar ( mLocale ) ;
Distance : 5

80
Tree	Calendar c = new Calendar ( mTimeZone , mLocale . getChangedScopeNodesForPass ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale . getChangedScopeNodesForPass ( STRING_CONSTANT ) ) ;
Distance : 6

81
Tree	Calendar c = new Calendar ( RandomSource.MT , mTimeZone ) ;
Code	Calendar c = new Calendar ( RandomSource.MT , mTimeZone ) ;
Distance : 3

82
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . withLocale () ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . withLocale () ;
Distance : 4

83
Tree	Calendar [] c = new Calendar ( mLocale ) ;
Code	Calendar [] c = new Calendar ( mLocale ) ;
Distance : 4

84
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . eigenDecompose () ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . eigenDecompose () ;
Distance : 4

85
Tree	GregorianCalendar mLocale = NUMBER_CONSTANT ;
Code	GregorianCalendar mLocale = NUMBER_CONSTANT ;
Distance : 9

86
Tree	Calendar c = new Calendar ( mTimeZone , mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone , mTimeZone ) ;
Distance : 2

87
Tree	Calendar c = new GregorianCalendar ( mTimeZone , false ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , false ) ;
Distance : 1

88
Tree	Calendar c = new Calendar ( mTimeZone . getInstance ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone . getInstance ( STRING_CONSTANT ) ) ;
Distance : 6

89
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . that () ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . that () ;
Distance : 4

90
Tree	Calendar c = new Calendar ( mTimeZone , mLocale ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale ) ;
Distance : 1

91
Tree	Calendar c = new GregorianCalendar ( mTimeZone . newBuilder ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone . newBuilder ( STRING_CONSTANT ) ) ;
Distance : 5

92
Tree	Calendar c = new Calendar ( mTimeZone , array.length ) ;
Code	Calendar c = new Calendar ( mTimeZone , array.length ) ;
Distance : 2

93
Tree	Calendar c = new Calendar ( mTimeZone . getBytes ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone . getBytes ( STRING_CONSTANT ) ) ;
Distance : 6

94
Tree	Calendar c = new Calendar ( mTimeZone , mLocale . valueOf ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale . valueOf ( STRING_CONSTANT ) ) ;
Distance : 6

95
Tree	Calendar c = new GregorianCalendar ( STRING_BUILDER_SIZE , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( STRING_BUILDER_SIZE , mLocale ) ;
Distance : 1

96
Tree	GregorianCalendar mLocale = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	GregorianCalendar mLocale = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

97
Tree	Calendar c = mTimeZone . getInstance ( mTimeZone , mLocale ) ;
Code	Calendar c = mTimeZone . getInstance ( mTimeZone , mLocale ) ;
Distance : 3

98
Tree	Calendar c = new GregorianCalendar ( mTimeZone , v1.data.length ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , v1.data.length ) ;
Distance : 1

99
Tree	Calendar c = NUMBER_CONSTANT ; p
Code	Calendar c = NUMBER_CONSTANT ; p
Distance : 8

100
Tree	Calendar c = new Calendar ( mTimeZone , NUMBER_CONSTANT ) ;
Code	Calendar c = new Calendar ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 2

101
Tree	Calendar c = new Calendar () ;
Code	Calendar c = new Calendar () ;
Distance : 6

102
Tree	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 2

103
Tree	GregorianCalendar c = new GregorianCalendar ( mLocale , NUMBER_CONSTANT ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mLocale , NUMBER_CONSTANT ) ;
Distance : 3

104
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
Distance : 0

105
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . length () ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . length () ;
Distance : 4

106
Tree	GregorianCalendar c = new GregorianCalendar () ;
Code	GregorianCalendar c = new GregorianCalendar () ;
Distance : 6

107
Tree	final Calendar c = new GregorianCalendar ( mTimeZone ) ;
Code	final Calendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

108
Tree	Calendar c = new Calendar ( mLocale ) ;
Code	Calendar c = new Calendar ( mLocale ) ;
Distance : 3

109
Tree	Calendar c ;
Code	Calendar c ;
Distance : 8

110
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone , false ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone , false ) ;
Distance : 2

111
Tree	Calendar c = new GregorianCalendar ( LanguageMode.ECMASCRIPT_2015 , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( LanguageMode.ECMASCRIPT_2015 , mLocale ) ;
Distance : 1

112
Tree	Calendar c = new GregorianCalendar ( mLocale ) ;
Code	Calendar c = new GregorianCalendar ( mLocale ) ;
Distance : 2

113
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . returnList () ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . returnList () ;
Distance : 4

114
Tree	Calendar c = new GregorianCalendar ( mTimeZone , System.out ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , System.out ) ;
Distance : 1

115
Tree	GregorianCalendar c = new Calendar ( mTimeZone ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone ) ;
Distance : 4

116
Tree	Calendar c = newCalendar () ;
Code	Calendar c = newCalendar () ;
Distance : 7

117
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 5

118
Tree	Calendar c = newStringBuilder () ;
Code	Calendar c = newStringBuilder () ;
Distance : 7

119
Tree	Calendar c = new GregorianCalendar ( mTimeZone , plane.w ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , plane.w ) ;
Distance : 1

120
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ LocalizedFormats.NUMBER_TOO_SMALL ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ LocalizedFormats.NUMBER_TOO_SMALL ] ) ;
Distance : 5

121
Tree	Calendar c = new Calendar ( RandomSource.MT , mLocale ) ;
Code	Calendar c = new Calendar ( RandomSource.MT , mLocale ) ;
Distance : 2

122
Tree	Calendar mTimeZone = NUMBER_CONSTANT ;
Code	Calendar mTimeZone = NUMBER_CONSTANT ;
Distance : 8

123
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ Verification.EXPLICIT ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ Verification.EXPLICIT ] ) ;
Distance : 5

124
Tree	Calendar c = new GregorianCalendar ( Any.ANY , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( Any.ANY , mLocale ) ;
Distance : 1

125
Tree	Calendar c = new GregorianCalendar ( mTimeZone . IEEEremainder ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone . IEEEremainder ( STRING_CONSTANT ) ) ;
Distance : 5

126
Tree	Calendar c = new GregorianCalendar ( mTimeZone , ToStringContext.TO_STRING ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , ToStringContext.TO_STRING ) ;
Distance : 1

127
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . toString () ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . toString () ;
Distance : 4

128
Tree	Calendar c = new GregorianCalendar ( mLocale , NUMBER_CONSTANT ) ;
Code	Calendar c = new GregorianCalendar ( mLocale , NUMBER_CONSTANT ) ;
Distance : 2

129
Tree	Calendar c = mTimeZone . toString ( mTimeZone ) ;
Code	Calendar c = mTimeZone . toString ( mTimeZone ) ;
Distance : 5

130
Tree	Calendar c = mLocale . getDateFormatSymbols ( mTimeZone ) ;
Code	Calendar c = mLocale . getDateFormatSymbols ( mTimeZone ) ;
Distance : 5

131
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ Locale.ENGLISH ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ Locale.ENGLISH ] ) ;
Distance : 5

132
Tree	GregorianCalendar c = new GregorianCalendar ( mLocale , false ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mLocale , false ) ;
Distance : 3

133
Tree	GregorianCalendar c = new Calendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 7

134
Tree	Calendar c = new GregorianCalendar ( mTimeZone , Calendar.SECOND ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , Calendar.SECOND ) ;
Distance : 1

135
Tree	Calendar c = NUMBER_CONSTANT ; options
Code	Calendar c = NUMBER_CONSTANT ; options
Distance : 8

136
Tree	Calendar c = new GregorianCalendar ( mTimeZone , Locale.US ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , Locale.US ) ;
Distance : 1

137
Tree	Calendar c = new GregorianCalendar ( mTimeZone , PropertyCollapseLevel.ALL ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , PropertyCollapseLevel.ALL ) ;
Distance : 1

138
Tree	GregorianCalendar c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	GregorianCalendar c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

139
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone , NUMBER_CONSTANT ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 2

140
Tree	GregorianCalendar c = mTimeZone . getInstance ( mTimeZone , mLocale ) ;
Code	GregorianCalendar c = mTimeZone . getInstance ( mTimeZone , mLocale ) ;
Distance : 4

141
Tree	GregorianCalendar [] c = new Calendar ( mTimeZone ) ;
Code	GregorianCalendar [] c = new Calendar ( mTimeZone ) ;
Distance : 5

142
Tree	Calendar c = new Calendar ( mLocale , NUMBER_CONSTANT ) ;
Code	Calendar c = new Calendar ( mLocale , NUMBER_CONSTANT ) ;
Distance : 3

143
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ FunctionFlavor.GENERATOR ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ FunctionFlavor.GENERATOR ] ) ;
Distance : 5

144
Tree	Calendar c = new GregorianCalendar ( mTimeZone , c ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , c ) ;
Distance : 1

145
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mTimeZone ) ;
Distance : 1

146
Tree	Calendar mTimeZone = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Calendar mTimeZone = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

147
Tree	Calendar c = mLocale . getInstance ( mTimeZone ) ;
Code	Calendar c = mLocale . getInstance ( mTimeZone ) ;
Distance : 5

148
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . sample () ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . sample () ;
Distance : 4

149
Tree	Calendar c = createVerificationData () ;
Code	Calendar c = createVerificationData () ;
Distance : 7

150
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . getPropertyCollapseLevel ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . getPropertyCollapseLevel ( STRING_CONSTANT ) ) ;
Distance : 5

151
Tree	GregorianCalendar c = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	GregorianCalendar c = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

152
Tree	Calendar c = new GregorianCalendar ( mLocale , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( mLocale , mLocale ) ;
Distance : 1

153
Tree	final Calendar c = new GregorianCalendar ( mLocale ) ;
Code	final Calendar c = new GregorianCalendar ( mLocale ) ;
Distance : 3

154
Tree	Calendar c = new GregorianCalendar ( LanguageMode.ECMASCRIPT_2015 , mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( LanguageMode.ECMASCRIPT_2015 , mTimeZone ) ;
Distance : 2

155
Tree	Calendar c = newMockSafeHashSet () ;
Code	Calendar c = newMockSafeHashSet () ;
Distance : 7

156
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
Distance : 1

157
Tree	GregorianCalendar c = new Calendar ( mTimeZone , mLocale ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone , mLocale ) ;
Distance : 2

158
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ line.originOffset ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ line.originOffset ] ) ;
Distance : 5

159
Tree	final GregorianCalendar c = new Calendar ( mLocale ) ;
Code	final GregorianCalendar c = new Calendar ( mLocale ) ;
Distance : 5

160
Tree	Calendar c = toString () ;
Code	Calendar c = toString () ;
Distance : 7

161
Tree	Calendar c = new Calendar ( mLocale , mLocale ) ;
Code	Calendar c = new Calendar ( mLocale , mLocale ) ;
Distance : 2

162
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . getChronology ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . getChronology ( STRING_CONSTANT ) ) ;
Distance : 5

163
Tree	GregorianCalendar c = new Calendar ( mTimeZone , NUMBER_CONSTANT ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 3

164
Tree	Calendar c = mTimeZone . describe ( mTimeZone ) ;
Code	Calendar c = mTimeZone . describe ( mTimeZone ) ;
Distance : 5

165
Tree	Calendar c = NUMBER_CONSTANT ; value
Code	Calendar c = NUMBER_CONSTANT ; value
Distance : 8

166
Tree	GregorianCalendar mLocale = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	GregorianCalendar mLocale = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

167
Tree	Calendar mLocale = new GregorianCalendar () ;
Code	Calendar mLocale = new GregorianCalendar () ;
Distance : 6

168
Tree	Calendar c = new Calendar ( mTimeZone , new Calendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new Calendar ( mTimeZone , new Calendar [ NUMBER_CONSTANT ] ) ;
Distance : 6

169
Tree	Calendar c = new Calendar ( mTimeZone ) . getDeclaredType () ;
Code	Calendar c = new Calendar ( mTimeZone ) . getDeclaredType () ;
Distance : 5

170
Tree	GregorianCalendar c = new Calendar () ;
Code	GregorianCalendar c = new Calendar () ;
Distance : 7

171
Tree	Calendar c = new Calendar ( mTimeZone , false ) ;
Code	Calendar c = new Calendar ( mTimeZone , false ) ;
Distance : 2

172
Tree	Calendar c = createSymbolTable () ;
Code	Calendar c = createSymbolTable () ;
Distance : 7

173
Tree	Calendar c = new GregorianCalendar ( mTimeZone , NUMBER_CONSTANT ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 1

174
Tree	Calendar c = new GregorianCalendar ( mLocale , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new GregorianCalendar ( mLocale , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 6

175
Tree	Calendar c = new Calendar ( mTimeZone , mLocale . getInstance ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale . getInstance ( STRING_CONSTANT ) ) ;
Distance : 6

176
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new Calendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new Calendar [ NUMBER_CONSTANT ] ) ;
Distance : 5

177
Tree	protected GregorianCalendar c = new GregorianCalendar ( mTimeZone ) ;
Code	protected GregorianCalendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 4

178
Tree	Calendar mTimeZone = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Calendar mTimeZone = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

179
Tree	Calendar c = new GregorianCalendar ( mLocale , false ) ;
Code	Calendar c = new GregorianCalendar ( mLocale , false ) ;
Distance : 2

180
Tree	Calendar c = new GregorianCalendar ( c , false ) ;
Code	Calendar c = new GregorianCalendar ( c , false ) ;
Distance : 2

181
Tree	Calendar c = mTimeZone . describe ( mTimeZone , mLocale ) ;
Code	Calendar c = mTimeZone . describe ( mTimeZone , mLocale ) ;
Distance : 3

182
Tree	Calendar c = NUMBER_CONSTANT ; i
Code	Calendar c = NUMBER_CONSTANT ; i
Distance : 8

183
Tree	Calendar c = new Calendar ( c , NUMBER_CONSTANT ) ;
Code	Calendar c = new Calendar ( c , NUMBER_CONSTANT ) ;
Distance : 3

184
Tree	Calendar c ; p
Code	Calendar c ; p
Distance : 9

185
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ FormatFactory ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ FormatFactory ] ) ;
Distance : 5

186
Tree	Calendar c = mTimeZone . toString ( mTimeZone , mLocale ) ;
Code	Calendar c = mTimeZone . toString ( mTimeZone , mLocale ) ;
Distance : 3

187
Tree	Calendar mLocale = new Calendar () ;
Code	Calendar mLocale = new Calendar () ;
Distance : 7

188
Tree	Calendar mLocale ;
Code	Calendar mLocale ;
Distance : 8

189
Tree	Calendar [] mLocale = new GregorianCalendar ( mTimeZone ) ;
Code	Calendar [] mLocale = new GregorianCalendar ( mTimeZone ) ;
Distance : 4

190
Tree	Calendar mLocale = NUMBER_CONSTANT ;
Code	Calendar mLocale = NUMBER_CONSTANT ;
Distance : 8

191
Tree	Calendar mLocale = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Calendar mLocale = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

192
Tree	GregorianCalendar mLocale = new GregorianCalendar () ;
Code	GregorianCalendar mLocale = new GregorianCalendar () ;
Distance : 7

193
Tree	Calendar c = c . getInstance ( mTimeZone , mLocale ) ;
Code	Calendar c = c . getInstance ( mTimeZone , mLocale ) ;
Distance : 3

194
Tree	Calendar mTimeZone = new GregorianCalendar () ;
Code	Calendar mTimeZone = new GregorianCalendar () ;
Distance : 6

195
Tree	Calendar c ; options
Code	Calendar c ; options
Distance : 9

196
Tree	Calendar c = mLocale . getDateFormatSymbols ( mTimeZone , mLocale ) ;
Code	Calendar c = mLocale . getDateFormatSymbols ( mTimeZone , mLocale ) ;
Distance : 3

197
Tree	Calendar mLocale = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Calendar mLocale = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

198
Tree	Calendar c ; value
Code	Calendar c ; value
Distance : 9

199
Tree	Calendar c ; i
Code	Calendar c ; i
Distance : 9

========================================================================


========================================================================
Example Number: 47
Parent Code is: 
if ( chars [ i ] == CHAR_CONS  chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
-------------------------------------------------------------------------------
Child code is: 
if ( chars [ i ] == CHAR_CONS  chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp && ! hasDecPoint ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS})) (250{val=||}) (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (27 (800{val=foundDigit}) (249{val=&&}) (38 (207{val=!}) (800{val=hasExp}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS})) (250{val=||}) (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (27 (800{val=foundDigit}) (249{val=&&}) (38 (207{val=!}) (800{val=hasExp})) (249{val=&&}) (38 (207{val=!}) (800{val=hasDecPoint}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/24/parent/src_main_java_org_apache_commons_lang3_math_NumberUtils.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 10
Wrong
========================================================================
False

0
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 4

1
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Distance : 5

2
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Distance : 5

3
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Distance : 6

4
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 4

5
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Distance : 5

6
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Distance : 5

7
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 4

8
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Distance : 6

9
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Distance : 5

========================================================================


========================================================================
Example Number: 48
Parent Code is: 
cal1 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR )
-------------------------------------------------------------------------------
Child code is: 
cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=cal1}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR}) (215{val=)})) (236{val===}) (32 (800{val=cal2}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR}) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=cal1}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR_OF_DAY}) (215{val=)})) (236{val===}) (32 (800{val=cal2}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR_OF_DAY}) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/21/parent/src_main_java_org_apache_commons_lang3_time_DateUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 get cal2 Calendar.HOUR_OF_DAY + super
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 get cal2 Calendar.HOUR_OF_DAY + super
Distance : 5

1
Tree	cal1 && cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) && extends
Code	cal1 && cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) && extends
Distance : 6

2
Tree	. && cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) && get
Code	. && cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) && get
Distance : 8

3
Tree	get && cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) && get
Code	get && cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) && get
Distance : 7

4
Tree	cal1 && cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) && &
Code	cal1 && cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) && &
Distance : 7

5
Tree	get && cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) && &
Code	get && cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) && &
Distance : 7

6
Tree	cal1 && cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) && super
Code	cal1 && cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) && super
Distance : 8

7
Tree	cal1 && cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) && ++
Code	cal1 && cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) && ++
Distance : 6

8
Tree	cal1 && cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) && super
Code	cal1 && cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) && super
Distance : 7

9
Tree	cal1 && cal2 . get ( Calendar.HOUR_OF_DAY ) && map
Code	cal1 && cal2 . get ( Calendar.HOUR_OF_DAY ) && map
Distance : 8

10
Tree	get && cal2 . get ( Calendar.HOUR_OF_DAY ) && ++
Code	get && cal2 . get ( Calendar.HOUR_OF_DAY ) && ++
Distance : 8

11
Tree	int cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Code	int cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Distance : 8

12
Tree	cal1 . get ( Calendar.HOUR ) - cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR ) - cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 2

13
Tree	cal1 && cal2 . get ( Calendar.HOUR ) && get
Code	cal1 && cal2 . get ( Calendar.HOUR ) && get
Distance : 9

14
Tree	cal1 && cal2 . get ( Calendar.HOUR_OF_DAY ) && get
Code	cal1 && cal2 . get ( Calendar.HOUR_OF_DAY ) && get
Distance : 8

15
Tree	void cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Code	void cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Distance : 8

16
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < <=
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < <=
Distance : 7

17
Tree	get . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + false
Code	get . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + false
Distance : 8

18
Tree	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 get + super
Code	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 get + super
Distance : 7

19
Tree	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) -
Code	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) -
Distance : 8

20
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY wanted
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY wanted
Distance : 5

21
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY Math
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY Math
Distance : 5

22
Tree	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) f
Code	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) f
Distance : 8

23
Tree	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) Class
Code	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) Class
Distance : 8

24
Tree	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) Test
Code	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) Test
Distance : 8

25
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY ( get
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY ( get
Distance : 8

26
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY ( get
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY ( get
Distance : 7

27
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 get cal2 Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 get cal2 Calendar.HOUR_OF_DAY
Distance : 7

28
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 get get Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 get get Calendar.HOUR_OF_DAY
Distance : 6

29
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get get
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get get
Distance : 7

30
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 (
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 (
Distance : 6

31
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY
Distance : 7

32
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY
Distance : 6

33
Tree	cal1 . get ( Calendar.HOUR ) cal2 get cal2 Calendar.HOUR_OF_DAY + super
Code	cal1 . get ( Calendar.HOUR ) cal2 get cal2 Calendar.HOUR_OF_DAY + super
Distance : 6

34
Tree	cal1 && cal2 . get ( Calendar.HOUR_OF_DAY ) && extends
Code	cal1 && cal2 . get ( Calendar.HOUR_OF_DAY ) && extends
Distance : 8

35
Tree	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) Preconditions
Code	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) Preconditions
Distance : 8

36
Tree	cal1 && cal2 . get ( Calendar.HOUR ) && &
Code	cal1 && cal2 . get ( Calendar.HOUR ) && &
Distance : 9

37
Tree	boolean cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR ) ;
Code	boolean cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR ) ;
Distance : 9

38
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < ^
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < ^
Distance : 4

39
Tree	STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY )
Code	STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY )
Distance : 5

40
Tree	cal1 . get ( Calendar.HOUR ) < NUMBER_CONSTANT
Code	cal1 . get ( Calendar.HOUR ) < NUMBER_CONSTANT
Distance : 8

41
Tree	cal1 . get ( Calendar.HOUR ) - NUMBER_CONSTANT
Code	cal1 . get ( Calendar.HOUR ) - NUMBER_CONSTANT
Distance : 8

42
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < NUMBER_CONSTANT
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < NUMBER_CONSTANT
Distance : 7

43
Tree	get . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT
Code	get . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT
Distance : 8

44
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < &
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < &
Distance : 4

45
Tree	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR )
Code	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR )
Distance : 8

46
Tree	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY )
Code	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 7

47
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < extends
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < extends
Distance : 7

48
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < &
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < &
Distance : 7

49
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < ^
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < ^
Distance : 7

50
Tree	cal1 . get ( Calendar.HOUR ) < <=
Code	cal1 . get ( Calendar.HOUR ) < <=
Distance : 8

51
Tree	cal1 . get ( Calendar.HOUR ) < CHAR_CONS
Code	cal1 . get ( Calendar.HOUR ) < CHAR_CONS
Distance : 8

52
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < /
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < /
Distance : 7

53
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < CHAR_CONS
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < CHAR_CONS
Distance : 4

54
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < /
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < /
Distance : 4

55
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) < <=
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) < <=
Distance : 5

56
Tree	boolean cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Code	boolean cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Distance : 8

57
Tree	cal1 && cal2 . get ( Calendar.HOUR ) && super
Code	cal1 && cal2 . get ( Calendar.HOUR ) && super
Distance : 9

58
Tree	get && cal2 . get ( Calendar.HOUR_OF_DAY ) && super
Code	get && cal2 . get ( Calendar.HOUR_OF_DAY ) && super
Distance : 8

59
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) != cal2
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) != cal2
Distance : 6

60
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - %
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - %
Distance : 4

61
Tree	cal1 . get ( Calendar.HOUR ) * get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR ) * get ( Calendar.HOUR )
Distance : 5

62
Tree	cal1 < cal2 . get ( Calendar.HOUR )
Code	cal1 < cal2 . get ( Calendar.HOUR )
Distance : 7

63
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) - ++
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) - ++
Distance : 5

64
Tree	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR )
Code	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR )
Distance : 8

65
Tree	get . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR )
Code	get . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR )
Distance : 5

66
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - ++
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - ++
Distance : 4

67
Tree	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY )
Code	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 7

68
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) < CHAR_CONS
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) < CHAR_CONS
Distance : 5

69
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) < &
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) < &
Distance : 5

70
Tree	STRING_CONSTANT + cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY )
Code	STRING_CONSTANT + cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY )
Distance : 6

71
Tree	cal1 && cal2 . get ( Calendar.HOUR_OF_DAY ) && &
Code	cal1 && cal2 . get ( Calendar.HOUR_OF_DAY ) && &
Distance : 8

72
Tree	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ParamChecks
Code	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ParamChecks
Distance : 8

73
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < CHAR_CONS
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < CHAR_CONS
Distance : 7

74
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY ) &&
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY ) &&
Distance : 2

75
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) options
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) options
Distance : 2

76
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY ) p
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY ) p
Distance : 2

77
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < NUMBER_CONSTANT {}
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < NUMBER_CONSTANT {}
Distance : 7

78
Tree	get . get ( Calendar.HOUR_OF_DAY ) < NUMBER_CONSTANT MathRuntimeException
Code	get . get ( Calendar.HOUR_OF_DAY ) < NUMBER_CONSTANT MathRuntimeException
Distance : 8

79
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < NUMBER_CONSTANT -
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < NUMBER_CONSTANT -
Distance : 7

80
Tree	STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) toString
Code	STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) toString
Distance : 6

81
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT Test
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT Test
Distance : 7

82
Tree	STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) T
Code	STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) T
Distance : 6

83
Tree	STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) &&
Code	STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) &&
Distance : 6

84
Tree	STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) source
Code	STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) source
Distance : 6

85
Tree	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) Preconditions
Code	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) Preconditions
Distance : 8

86
Tree	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) Test
Code	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) Test
Distance : 8

87
Tree	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) -
Code	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) -
Distance : 8

88
Tree	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) ParamChecks
Code	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) ParamChecks
Distance : 8

89
Tree	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) f
Code	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) f
Distance : 8

90
Tree	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) {}
Code	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) {}
Distance : 8

91
Tree	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) MathRuntimeException
Code	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) MathRuntimeException
Distance : 8

92
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < NUMBER_CONSTANT Class
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < NUMBER_CONSTANT Class
Distance : 7

93
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < NUMBER_CONSTANT Test
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < NUMBER_CONSTANT Test
Distance : 7

94
Tree	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) Class
Code	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) Class
Distance : 8

95
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY ) T
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY ) T
Distance : 2

96
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) Test
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) Test
Distance : 5

97
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT Preconditions
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT Preconditions
Distance : 7

98
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT -
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT -
Distance : 7

99
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT ParamChecks
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT ParamChecks
Distance : 7

100
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == get ( Calendar.HOUR ) f
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == get ( Calendar.HOUR ) f
Distance : 4

101
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == get ( Calendar.HOUR ) ParamChecks
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == get ( Calendar.HOUR ) ParamChecks
Distance : 4

102
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) != cal2 -
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) != cal2 -
Distance : 6

103
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == get ( Calendar.HOUR ) -
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == get ( Calendar.HOUR ) -
Distance : 4

104
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) != cal2 Preconditions
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) != cal2 Preconditions
Distance : 6

105
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == get ( Calendar.HOUR ) Preconditions
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == get ( Calendar.HOUR ) Preconditions
Distance : 4

106
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) != cal2 ParamChecks
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) != cal2 ParamChecks
Distance : 6

107
Tree	get . get ( Calendar.HOUR_OF_DAY ) != cal2 f
Code	get . get ( Calendar.HOUR_OF_DAY ) != cal2 f
Distance : 7

108
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < NUMBER_CONSTANT ParamChecks
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < NUMBER_CONSTANT ParamChecks
Distance : 7

109
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < NUMBER_CONSTANT f
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < NUMBER_CONSTANT f
Distance : 7

110
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) != cal2 {}
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) != cal2 {}
Distance : 6

111
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) != cal2 MathRuntimeException
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) != cal2 MathRuntimeException
Distance : 6

112
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - &
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - &
Distance : 4

113
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - extends
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - extends
Distance : 4

114
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - CHAR_CONS
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - CHAR_CONS
Distance : 4

115
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == get ( Calendar.HOUR )
Distance : 3

116
Tree	get . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) - &
Code	get . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) - &
Distance : 6

117
Tree	. . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) - extends
Code	. . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) - extends
Distance : 6

118
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 6

119
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) - CHAR_CONS
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) - CHAR_CONS
Distance : 5

120
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == get ( Calendar.HOUR ) MathRuntimeException
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == get ( Calendar.HOUR ) MathRuntimeException
Distance : 4

121
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 get cal2 get
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 get cal2 get
Distance : 5

122
Tree	cal1 . get ( Calendar.HOUR ) cal2 get cal2 get
Code	cal1 . get ( Calendar.HOUR ) cal2 get cal2 get
Distance : 6

123
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == get ( Calendar.HOUR ) Class
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == get ( Calendar.HOUR ) Class
Distance : 4

124
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == get ( Calendar.HOUR ) Test
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == get ( Calendar.HOUR ) Test
Distance : 4

125
Tree	cal1 . get ( Calendar.HOUR ) == get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR ) == get ( Calendar.HOUR )
Distance : 4

126
Tree	STRING_CONSTANT + cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR )
Code	STRING_CONSTANT + cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR )
Distance : 7

127
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY . Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY . Calendar.HOUR_OF_DAY
Distance : 7

128
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) Preconditions
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) Preconditions
Distance : 5

129
Tree	get . get ( Calendar.HOUR_OF_DAY ) < NUMBER_CONSTANT Preconditions
Code	get . get ( Calendar.HOUR_OF_DAY ) < NUMBER_CONSTANT Preconditions
Distance : 8

130
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) -
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) -
Distance : 5

131
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY
Distance : 8

132
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) toString
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) toString
Distance : 2

133
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) ParamChecks
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) ParamChecks
Distance : 5

134
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) f
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) f
Distance : 5

135
Tree	cal1 . get ( Calendar.HOUR ) - cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR ) - cal2 . get ( Calendar.HOUR )
Distance : 3

136
Tree	long cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Code	long cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Distance : 8

137
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) {}
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) {}
Distance : 5

138
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT {}
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT {}
Distance : 7

139
Tree	cal1 . get ( Calendar.HOUR ) * cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR ) * cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 2

140
Tree	cal1 && cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) && super
Code	cal1 && cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) && super
Distance : 6

141
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == get ( Calendar.HOUR ) {}
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == get ( Calendar.HOUR ) {}
Distance : 4

142
Tree	cal1 && cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) && super
Code	cal1 && cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) && super
Distance : 7

143
Tree	float cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Code	float cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Distance : 8

144
Tree	int cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR ) ;
Code	int cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR ) ;
Distance : 9

145
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR )
Distance : 2

146
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) MathRuntimeException
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) MathRuntimeException
Distance : 5

147
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) Class
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) Class
Distance : 5

148
Tree	get . get ( Calendar.HOUR ) * cal2 . get ( Calendar.HOUR )
Code	get . get ( Calendar.HOUR ) * cal2 . get ( Calendar.HOUR )
Distance : 4

149
Tree	void cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR ) ;
Code	void cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR ) ;
Distance : 9

150
Tree	get . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) < ^
Code	get . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) < ^
Distance : 6

151
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + super
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + super
Distance : 6

152
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < <=
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < <=
Distance : 4

153
Tree	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + super
Code	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + super
Distance : 7

154
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - /=
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - /=
Distance : 4

155
Tree	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) MathRuntimeException
Code	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) MathRuntimeException
Distance : 8

156
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 get
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 get
Distance : 6

157
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY
Distance : 5

158
Tree	cal1 . get ( Calendar.HOUR ) != cal2
Code	cal1 . get ( Calendar.HOUR ) != cal2
Distance : 7

159
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 get cal2 Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 get cal2 Calendar.HOUR_OF_DAY
Distance : 4

160
Tree	char cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Code	char cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Distance : 8

161
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) < /
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) < /
Distance : 5

162
Tree	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 get
Code	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 get
Distance : 7

163
Tree	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) {}
Code	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) {}
Distance : 8

164
Tree	get . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + CHAR_CONS
Code	get . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + CHAR_CONS
Distance : 7

165
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + false
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + false
Distance : 6

166
Tree	STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR )
Code	STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR )
Distance : 6

167
Tree	cal1 . get ( Calendar.HOUR ) cal2 get cal2 Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR ) cal2 get cal2 Calendar.HOUR_OF_DAY
Distance : 5

168
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 get + super
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 get + super
Distance : 6

169
Tree	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + CHAR_CONS
Code	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + CHAR_CONS
Distance : 7

170
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR )
Distance : 2

171
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) != cal2 Class
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) != cal2 Class
Distance : 6

172
Tree	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY
Distance : 6

173
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) != cal2 Test
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) != cal2 Test
Distance : 6

174
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT f
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT f
Distance : 7

175
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 1

176
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT MathRuntimeException
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT MathRuntimeException
Distance : 7

177
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) source
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) source
Distance : 2

178
Tree	get . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT Class
Code	get . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT Class
Distance : 8

179
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY ) options
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY ) options
Distance : 2

180
Tree	get . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY ) source
Code	get . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY ) source
Distance : 3

181
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY ) toString
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY ) toString
Distance : 2

182
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) Preconditions
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) Preconditions
Distance : 7

183
Tree	short cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Code	short cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Distance : 8

184
Tree	cal1 . get ( Calendar.HOUR ) < ^
Code	cal1 . get ( Calendar.HOUR ) < ^
Distance : 8

185
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 1

186
Tree	cal1 . get ( Calendar.HOUR ) < &
Code	cal1 . get ( Calendar.HOUR ) < &
Distance : 8

187
Tree	cal1 && cal2 . get ( Calendar.HOUR ) && extends
Code	cal1 && cal2 . get ( Calendar.HOUR ) && extends
Distance : 9

188
Tree	STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) p
Code	STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) p
Distance : 6

189
Tree	get < cal2 . get ( Calendar.HOUR_OF_DAY ) -
Code	get < cal2 . get ( Calendar.HOUR_OF_DAY ) -
Distance : 7

190
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) ParamChecks
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) ParamChecks
Distance : 7

191
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) f
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) f
Distance : 7

192
Tree	STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) options
Code	STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) options
Distance : 6

193
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) {}
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) {}
Distance : 7

194
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) MathRuntimeException
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) MathRuntimeException
Distance : 7

195
Tree	get < cal2 . get ( Calendar.HOUR_OF_DAY ) Class
Code	get < cal2 . get ( Calendar.HOUR_OF_DAY ) Class
Distance : 7

196
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) Test
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) Test
Distance : 7

197
Tree	get . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) T
Code	get . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) T
Distance : 3

198
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) &&
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) &&
Distance : 2

199
Tree	get . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) p
Code	get . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) p
Distance : 3

========================================================================


========================================================================
Example Number: 49
Parent Code is: 
{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ pos += Character . charCount ( Character . codePointAt ( input , pt ) ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (800{val=pos}) (237{val=+=}) (32 (800{val=Character}) (235{val=.}) (802{val=charCount}) (214{val=(}) (32 (800{val=Character}) (235{val=.}) (802{val=codePointAt}) (214{val=(}) (800{val=input}) (234{val=,}) (800{val=pos}) (215{val=)})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (800{val=pos}) (237{val=+=}) (32 (800{val=Character}) (235{val=.}) (802{val=charCount}) (214{val=(}) (32 (800{val=Character}) (235{val=.}) (802{val=codePointAt}) (214{val=(}) (800{val=input}) (234{val=,}) (800{val=pt}) (215{val=)})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/6/parent/src_main_java_org_apache_commons_lang3_text_translate_CharSequenceTranslator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	{ pos = Character . charCount ( Character . codePointAt ( pos , pos ) ) ; }
Code	{ pos = Character . charCount ( Character . codePointAt ( pos , pos ) ) ; }
Distance : 3

1
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; input . charCount ( input , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; input . charCount ( input , pos ) ; }
Distance : 10

2
Tree	{ pos = Character . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos = Character . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 4

3
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pt . charCount ( input , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pt . charCount ( input , pos ) ; }
Distance : 10

4
Tree	{ pos = Character . charCount ( input . codePointAt ( input , pos ) ) ; }
Code	{ pos = Character . charCount ( input . codePointAt ( input , pos ) ) ; }
Distance : 3

5
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( pos , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( pos , pos ) , Character ) ; }
Distance : 9

6
Tree	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; pos . charCount ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; pos . charCount ( Character , pos ) ; }
Distance : 11

7
Tree	{ throw new pos ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , false ) ; }
Distance : 11

8
Tree	{ throw pos . charCount ( Character [ Character ] ) ; }
Code	{ throw pos . charCount ( Character [ Character ] ) ; }
Distance : 10

9
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; if }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; if }
Distance : 3

10
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Distance : 8

11
Tree	{ throw new add ( STRING_CONSTANT ) ; }
Code	{ throw new add ( STRING_CONSTANT ) ; }
Distance : 13

12
Tree	{ throw pos . codePointAt ( Character [ input ] ) ; }
Code	{ throw pos . codePointAt ( Character [ input ] ) ; }
Distance : 10

13
Tree	{ throw new add ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , false ) ; }
Code	{ throw new add ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , false ) ; }
Distance : 12

14
Tree	{ pos . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ pos . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 4

15
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; assertNull }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; assertNull }
Distance : 3

16
Tree	{ throw new BackgroundInitializerTestImpl ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , false ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , false ) ; }
Distance : 12

17
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 3

18
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; continue; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; continue; }
Distance : 2

19
Tree	{ throw new pos ( p1.vector , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Code	{ throw new pos ( p1.vector , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Distance : 14

20
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , super ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , super ) ; }
Distance : 9

21
Tree	{ throw new BackgroundInitializerTestImpl ( Character , false ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( Character , false ) ; }
Distance : 11

22
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( input , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( input , pos ) ; }
Distance : 10

23
Tree	{ throw new TestObject ( Character ) ; }
Code	{ throw new TestObject ( Character ) ; }
Distance : 12

24
Tree	{ throw new MathArithmeticException () ; }
Code	{ throw new MathArithmeticException () ; }
Distance : 15

25
Tree	{ pos . charCount ( Character . codePointAt ( pos , pos ) ) ; }
Code	{ pos . charCount ( Character . codePointAt ( pos , pos ) ) ; }
Distance : 4

26
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; null }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; null }
Distance : 2

27
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . codePointAt ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . codePointAt ( Character , pos ) ; }
Distance : 10

28
Tree	{ throw new BackgroundInitializerTestImpl ( STRING_CONSTANT ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( STRING_CONSTANT ) ; }
Distance : 13

29
Tree	{ pos = Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos = Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

30
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( input , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( input , pos ) ; }
Distance : 10

31
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; array }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; array }
Distance : 3

32
Tree	{ pos . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 4

33
Tree	{ throw new pos ( Character . codePointAt ( Character , pos . codePointAt ( input ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( Character , pos . codePointAt ( input ) ) , false ) ; }
Distance : 10

34
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , pos ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , pos ) ; }
Distance : 8

35
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 9

36
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input ) ) , super ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input ) ) , super ) ; }
Distance : 9

37
Tree	{ super(); pos += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ super(); pos += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 3

38
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( input ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( input ) ; }
Distance : 8

39
Tree	{ throw new pos ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , super ) ; }
Code	{ throw new pos ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , super ) ; }
Distance : 11

40
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; fireAnnotationChanged }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; fireAnnotationChanged }
Distance : 3

41
Tree	{ throw new ParsePosition ( STRING_CONSTANT ) ; }
Code	{ throw new ParsePosition ( STRING_CONSTANT ) ; }
Distance : 13

42
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; final }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; final }
Distance : 3

43
Tree	{ throw new result ( STRING_CONSTANT ) ; }
Code	{ throw new result ( STRING_CONSTANT ) ; }
Distance : 13

44
Tree	{ throw new pos ( Character , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Code	{ throw new pos ( Character , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Distance : 13

45
Tree	{ throw new bucket ( Character ) ; }
Code	{ throw new bucket ( Character ) ; }
Distance : 12

46
Tree	{ return; pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ return; pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

47
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; break; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; break; }
Distance : 2

48
Tree	{ throw new ParsePosition ( Character , false ) ; }
Code	{ throw new ParsePosition ( Character , false ) ; }
Distance : 11

49
Tree	{ pos += Character . charCount ( Character . codePointAt ( pos , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( pos , pos ) ) ; }
Distance : 2

50
Tree	{ throw new MathArithmeticException ( Character , false ) ; }
Code	{ throw new MathArithmeticException ( Character , false ) ; }
Distance : 11

51
Tree	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; null }
Code	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; null }
Distance : 3

52
Tree	{ throw new result ( Character , false ) ; }
Code	{ throw new result ( Character , false ) ; }
Distance : 11

53
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( Character , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( Character , pos ) , Character ) ; }
Distance : 9

54
Tree	{ throw new MathArithmeticException ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , false ) ; }
Code	{ throw new MathArithmeticException ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , false ) ; }
Distance : 12

55
Tree	{ throw new add () ; }
Code	{ throw new add () ; }
Distance : 15

56
Tree	{ throw pos . charCount ( strLen [ input ] ) ; }
Code	{ throw pos . charCount ( strLen [ input ] ) ; }
Distance : 10

57
Tree	{ throw new add ( Character * pos ) ; }
Code	{ throw new add ( Character * pos ) ; }
Distance : 12

58
Tree	{ throw pos . charCount ( Character [ pos ] ) ; }
Code	{ throw pos . charCount ( Character [ pos ] ) ; }
Distance : 10

59
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; else }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; else }
Distance : 3

60
Tree	{ throw new pos ( LocalizedFormats.URL_CONTAINS_NO_DATA , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Code	{ throw new pos ( LocalizedFormats.URL_CONTAINS_NO_DATA , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Distance : 14

61
Tree	{ throw new BackgroundInitializerTestImpl ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Distance : 10

62
Tree	{ throw new MutableLong ( STRING_CONSTANT ) ; }
Code	{ throw new MutableLong ( STRING_CONSTANT ) ; }
Distance : 13

63
Tree	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; return; }
Code	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; return; }
Distance : 3

64
Tree	{ throw new ParsePosition ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new ParsePosition ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 10

65
Tree	{ continue; pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ continue; pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

66
Tree	{ throw new BackgroundInitializerTestImpl ( Character * pos ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( Character * pos ) ; }
Distance : 12

67
Tree	{ pos . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 5

68
Tree	{ throw new ParsePosition ( Character ) ; }
Code	{ throw new ParsePosition ( Character ) ; }
Distance : 12

69
Tree	{ throw new NotStrictlyPositiveException ( Character ) ; }
Code	{ throw new NotStrictlyPositiveException ( Character ) ; }
Distance : 12

70
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

71
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character ) ; }
Distance : 8

72
Tree	{ throw new MutableLong ( Character , false ) ; }
Code	{ throw new MutableLong ( Character , false ) ; }
Distance : 11

73
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; input . charCount ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; input . charCount ( Character , pos ) ; }
Distance : 10

74
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Distance : 9

75
Tree	{ throw new MathArithmeticException ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new MathArithmeticException ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 10

76
Tree	{ throw new BackgroundInitializerTestImpl () ; }
Code	{ throw new BackgroundInitializerTestImpl () ; }
Distance : 15

77
Tree	{ throw new result ( Character ) ; }
Code	{ throw new result ( Character ) ; }
Distance : 12

78
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; CHAR_CONS }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; CHAR_CONS }
Distance : 3

79
Tree	{ throw new pos ( Character * pos ) ; }
Code	{ throw new pos ( Character * pos ) ; }
Distance : 12

80
Tree	{ throw pt . charCount ( Character [ input ] ) ; }
Code	{ throw pt . charCount ( Character [ input ] ) ; }
Distance : 9

81
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pt . charCount ( input ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pt . charCount ( input ) ; }
Distance : 8

82
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 1

83
Tree	{ throw new add ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new add ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 10

84
Tree	{ throw pos ; }
Code	{ throw pos ; }
Distance : 15

85
Tree	{ super(); pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ super(); pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

86
Tree	{ pos . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 4

87
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; super }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; super }
Distance : 3

88
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; return; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; return; }
Distance : 2

89
Tree	{ throw new MutableLong ( Character * pos ) ; }
Code	{ throw new MutableLong ( Character * pos ) ; }
Distance : 12

90
Tree	{ throw new TestObject ( STRING_CONSTANT ) ; }
Code	{ throw new TestObject ( STRING_CONSTANT ) ; }
Distance : 13

91
Tree	{ throw new pos ( handler , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Code	{ throw new pos ( handler , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Distance : 14

92
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( Character ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( Character ) ; }
Distance : 8

93
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; charAt }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; charAt }
Distance : 3

94
Tree	{ throw new ParsePosition ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Code	{ throw new ParsePosition ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Distance : 10

95
Tree	{ throw new pos ( STRING_CONSTANT ) ; }
Code	{ throw new pos ( STRING_CONSTANT ) ; }
Distance : 13

96
Tree	{ throw new TestObject () ; }
Code	{ throw new TestObject () ; }
Distance : 15

97
Tree	{ throw new BackgroundInitializerTestImpl ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 10

98
Tree	{ throw new add ( Character ) ; }
Code	{ throw new add ( Character ) ; }
Distance : 12

99
Tree	{ throw new ParsePosition ( Character * pos ) ; }
Code	{ throw new ParsePosition ( Character * pos ) ; }
Distance : 12

100
Tree	{ throw pos . charCount ( Character [ input ] ) ; }
Code	{ throw pos . charCount ( Character [ input ] ) ; }
Distance : 9

101
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 9

102
Tree	{ pos = Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos = Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 3

103
Tree	{ throw new NotStrictlyPositiveException ( Character , false ) ; }
Code	{ throw new NotStrictlyPositiveException ( Character , false ) ; }
Distance : 11

104
Tree	{ throw new pos ( Character . codePointAt ( input , pos . codePointAt ( Character ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( input , pos . codePointAt ( Character ) ) , false ) ; }
Distance : 12

105
Tree	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; pos . charCount ( Character ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; pos . charCount ( Character ) ; }
Distance : 9

106
Tree	{ pos = Character . charCount ( Character . codePointAt ( input , pt ) ) ; }
Code	{ pos = Character . charCount ( Character . codePointAt ( input , pt ) ) ; }
Distance : 1

107
Tree	{ throw new pos ( Character . codePointAt ( Character . codePointAt ( input ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( Character . codePointAt ( input ) ) , false ) ; }
Distance : 8

108
Tree	{ throw new pos ( Character ) ; }
Code	{ throw new pos ( Character ) ; }
Distance : 12

109
Tree	{ throw pt . charCount ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Code	{ throw pt . charCount ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Distance : 8

110
Tree	{ throw pt ; }
Code	{ throw pt ; }
Distance : 14

111
Tree	{ pt += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pt += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

112
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pt ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pt ) ) ; }
Distance : 0

113
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character , pos ) ; }
Distance : 10

114
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

115
Tree	{ throw new pos ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new pos ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 11

116
Tree	{ throw new result ( Character * pos ) ; }
Code	{ throw new result ( Character * pos ) ; }
Distance : 12

117
Tree	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 2

118
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . codePointAt ( Character ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . codePointAt ( Character ) ; }
Distance : 8

119
Tree	{ throw new BackgroundInitializerTestImpl ( Character ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( Character ) ; }
Distance : 12

120
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; return; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; return; }
Distance : 3

121
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; super(); }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; super(); }
Distance : 2

122
Tree	{ throw new NotStrictlyPositiveException () ; }
Code	{ throw new NotStrictlyPositiveException () ; }
Distance : 15

123
Tree	{ throw pos . charCount ( handler [ input ] ) ; }
Code	{ throw pos . charCount ( handler [ input ] ) ; }
Distance : 10

124
Tree	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 2

125
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pt . charCount ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pt . charCount ( Character , pos ) ; }
Distance : 10

126
Tree	{ throw new TestObject ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , false ) ; }
Code	{ throw new TestObject ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , false ) ; }
Distance : 12

127
Tree	{ throw new bucket ( Character * pos ) ; }
Code	{ throw new bucket ( Character * pos ) ; }
Distance : 12

128
Tree	{ pos = Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos = Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

129
Tree	{ pos += Character . charCount ( input . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( input . codePointAt ( input , pos ) ) ; }
Distance : 2

130
Tree	{ pt . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pt . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 4

131
Tree	{ throw new MutableLong () ; }
Code	{ throw new MutableLong () ; }
Distance : 15

132
Tree	{ return; pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ return; pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 3

133
Tree	{ pt += Character . charCount ( Character . codePointAt ( input , pos ) ) ; return; }
Code	{ pt += Character . charCount ( Character . codePointAt ( input , pos ) ) ; return; }
Distance : 3

134
Tree	{ throw pos . charCount ( getField [ input ] ) ; }
Code	{ throw pos . charCount ( getField [ input ] ) ; }
Distance : 10

135
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( input ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( input ) ; }
Distance : 8

136
Tree	{ throw new TestObject ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Code	{ throw new TestObject ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Distance : 10

137
Tree	{ throw new pos ( noOfItems , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Code	{ throw new pos ( noOfItems , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Distance : 14

138
Tree	{ throw new MathArithmeticException ( STRING_CONSTANT ) ; }
Code	{ throw new MathArithmeticException ( STRING_CONSTANT ) ; }
Distance : 13

139
Tree	{ throw new pos () ; }
Code	{ throw new pos () ; }
Distance : 15

140
Tree	{ throw new pos ( Character . codePointAt ( Character . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( Character . codePointAt ( input , pos ) ) , false ) ; }
Distance : 8

141
Tree	{ pos = input . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos = input . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

142
Tree	{ pos . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

143
Tree	{ throw new bucket ( Character , false ) ; }
Code	{ throw new bucket ( Character , false ) ; }
Distance : 11

144
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( Character , pos ) ; }
Distance : 10

145
Tree	{ throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; }
Code	{ throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; }
Distance : 13

146
Tree	{ throw Character ; }
Code	{ throw Character ; }
Distance : 14

147
Tree	{ throw new pos ( di , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Code	{ throw new pos ( di , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Distance : 14

148
Tree	{ throw input ; }
Code	{ throw input ; }
Distance : 14

149
Tree	{ throw new MathArithmeticException ( Character ) ; }
Code	{ throw new MathArithmeticException ( Character ) ; }
Distance : 12

150
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; input . charCount ( Character ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; input . charCount ( Character ) ; }
Distance : 8

151
Tree	{ pos . charCount ( input . codePointAt ( input , pos ) ) ; }
Code	{ pos . charCount ( input . codePointAt ( input , pos ) ) ; }
Distance : 4

152
Tree	{ throw pos . charCount ( handler [ Character ] ) ; }
Code	{ throw pos . charCount ( handler [ Character ] ) ; }
Distance : 11

153
Tree	{ throw pos ; } T
Code	{ throw pos ; } T
Distance : 16

154
Tree	{ throw new pos ( zero , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Code	{ throw new pos ( zero , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Distance : 14

155
Tree	{ pos += input . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += input . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

156
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , input ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , input ) ; }
Distance : 8

157
Tree	{ throw new TestObject ( Character , false ) ; }
Code	{ throw new TestObject ( Character , false ) ; }
Distance : 11

158
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , pt ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , pt ) ; }
Distance : 8

159
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 3

160
Tree	{ throw new pos ( LocalizedFormats.DIMENSIONS_MISMATCH_2x2 , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Code	{ throw new pos ( LocalizedFormats.DIMENSIONS_MISMATCH_2x2 , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Distance : 14

161
Tree	{ throw pos . codePointAt ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Code	{ throw pos . codePointAt ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Distance : 9

162
Tree	{ throw new MutableLong ( Character ) ; }
Code	{ throw new MutableLong ( Character ) ; }
Distance : 12

163
Tree	{ throw new MathArithmeticException ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Code	{ throw new MathArithmeticException ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Distance : 10

164
Tree	{ throw new pos ( getField , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Code	{ throw new pos ( getField , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Distance : 14

165
Tree	{ throw pos . charCount ( annotation [ input ] ) ; }
Code	{ throw pos . charCount ( annotation [ input ] ) ; }
Distance : 10

166
Tree	{ throw new pos ( FastMath.PI , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Code	{ throw new pos ( FastMath.PI , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Distance : 14

167
Tree	{ pt = Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pt = Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

168
Tree	{ throw new bucket ( STRING_CONSTANT ) ; }
Code	{ throw new bucket ( STRING_CONSTANT ) ; }
Distance : 13

169
Tree	{ super(); pt += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ super(); pt += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

170
Tree	{ throw pos . charCount ( Character , pos . charCount ( input , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , pos . charCount ( input , pos ) , Character ) ; }
Distance : 9

171
Tree	{ throw new pos ( Character , false ) ; }
Code	{ throw new pos ( Character , false ) ; }
Distance : 11

172
Tree	{ null pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ null pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

173
Tree	{ throw new ParsePosition () ; }
Code	{ throw new ParsePosition () ; }
Distance : 15

174
Tree	{ throw new TestObject ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new TestObject ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 10

175
Tree	{ pos . charCount ( Character . codePointAt ( input , input ) ) ; }
Code	{ pos . charCount ( Character . codePointAt ( input , input ) ) ; }
Distance : 3

176
Tree	{ throw new add ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Code	{ throw new add ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Distance : 10

177
Tree	{ throw new MathArithmeticException ( Character * pos ) ; }
Code	{ throw new MathArithmeticException ( Character * pos ) ; }
Distance : 12

178
Tree	{ throw new bucket () ; }
Code	{ throw new bucket () ; }
Distance : 15

179
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( Character ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( Character ) ) , false ) ; }
Distance : 10

180
Tree	{ throw pos . codePointAt ( Character , pos . codePointAt ( Character , pos ) , Character ) ; }
Code	{ throw pos . codePointAt ( Character , pos . codePointAt ( Character , pos ) , Character ) ; }
Distance : 10

181
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; fireChangeEvent }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; fireChangeEvent }
Distance : 3

182
Tree	{ throw pos ; } p
Code	{ throw pos ; } p
Distance : 16

183
Tree	{ throw pos ; } toString
Code	{ throw pos ; } toString
Distance : 16

184
Tree	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; return; }
Code	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; return; }
Distance : 3

185
Tree	{ throw new add ( Character , false ) ; }
Code	{ throw new add ( Character , false ) ; }
Distance : 11

186
Tree	{ throw new result () ; }
Code	{ throw new result () ; }
Distance : 15

187
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Distance : 9

188
Tree	{ throw new NotStrictlyPositiveException ( Character * pos ) ; }
Code	{ throw new NotStrictlyPositiveException ( Character * pos ) ; }
Distance : 12

189
Tree	{ throw pos ; } source
Code	{ throw pos ; } source
Distance : 16

190
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( Character , pos ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( Character , pos ) ) , false ) ; }
Distance : 10

191
Tree	{ pos . charCount ( Character . codePointAt ( input , pt ) ) ; }
Code	{ pos . charCount ( Character . codePointAt ( input , pt ) ) ; }
Distance : 2

192
Tree	{ throw new TestObject ( Character * pos ) ; }
Code	{ throw new TestObject ( Character * pos ) ; }
Distance : 12

193
Tree	{ throw pos ; } options
Code	{ throw pos ; } options
Distance : 16

194
Tree	{ pos = Character . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ pos = Character . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 3

195
Tree	{ break; pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ break; pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

196
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pt . charCount ( Character ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pt . charCount ( Character ) ; }
Distance : 8

197
Tree	{ throw new ParsePosition ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , false ) ; }
Code	{ throw new ParsePosition ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , false ) ; }
Distance : 12

198
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; input . charCount ( input ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; input . charCount ( input ) ; }
Distance : 8

199
Tree	{ throw pos ; } &&
Code	{ throw pos ; } &&
Distance : 16

========================================================================


========================================================================
Example Number: 50
Parent Code is: 
final CharSequence result = lookupMap . get ( subSeq ) ;
-------------------------------------------------------------------------------
Child code is: 
final CharSequence result = lookupMap . get ( subSeq . toString () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (43 (801{val=CharSequence})) (59 (800{val=result}) (204{val==}) (32 (800{val=lookupMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=subSeq}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (43 (801{val=CharSequence})) (59 (800{val=result}) (204{val==}) (32 (800{val=lookupMap}) (235{val=.}) (802{val=get}) (214{val=(}) (32 (800{val=subSeq}) (235{val=.}) (802{val=toString}) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/4/parent/src_main_java_org_apache_commons_lang3_text_translate_LookupTranslator.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	final CharSequence result = lookupMap . get () ;
Code	final CharSequence result = lookupMap . get () ;
Distance : 5

1
Tree	final CharSequence result = lookupMap . get ( null ) ;
Code	final CharSequence result = lookupMap . get ( null ) ;
Distance : 4

2
Tree	final CharSequence result = result . toString ( null ) ;
Code	final CharSequence result = result . toString ( null ) ;
Distance : 6

3
Tree	final CharSequence result = lookupMap . get ( subSeq , PropAccess.STRUCT ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , PropAccess.STRUCT ) ;
Distance : 3

4
Tree	final CharSequence result = get ( subSeq ) ;
Code	final CharSequence result = get ( subSeq ) ;
Distance : 5

5
Tree	final CharSequence result = new CharSequence ( this , result ) ;
Code	final CharSequence result = new CharSequence ( this , result ) ;
Distance : 7

6
Tree	final CharSequence result = result . get ( result , result ) ;
Code	final CharSequence result = result . get ( result , result ) ;
Distance : 5

7
Tree	final CharSequence result = lookupMap . toString ( get ( subSeq ) ) ;
Code	final CharSequence result = lookupMap . toString ( get ( subSeq ) ) ;
Distance : 5

8
Tree	abstract CharSequence result = lookupMap . get ( null ) ;
Code	abstract CharSequence result = lookupMap . get ( null ) ;
Distance : 5

9
Tree	final CharSequence result = lookupMap . get ( ( subSeq < result > ) result ) ;
Code	final CharSequence result = lookupMap . get ( ( subSeq < result > ) result ) ;
Distance : 6

10
Tree	protected CharSequence result = new CharSequence ( subSeq ) ;
Code	protected CharSequence result = new CharSequence ( subSeq ) ;
Distance : 7

11
Tree	final CharSequence result = this . result . get ( subSeq ) ;
Code	final CharSequence result = this . result . get ( subSeq ) ;
Distance : 6

12
Tree	final CharSequence result = get () . get ( subSeq ) ;
Code	final CharSequence result = get () . get ( subSeq ) ;
Distance : 5

13
Tree	final CharSequence result = lookupMap . get ( result . get ( result ) ) ;
Code	final CharSequence result = lookupMap . get ( result . get ( result ) ) ;
Distance : 5

14
Tree	abstract CharSequence result = get ( subSeq ) ;
Code	abstract CharSequence result = get ( subSeq ) ;
Distance : 6

15
Tree	final CharSequence result = lookupMap . get ( subSeq , TimeUnit.SECONDS ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , TimeUnit.SECONDS ) ;
Distance : 3

16
Tree	final CharSequence result = lookupMap . result ( subSeq ) ;
Code	final CharSequence result = lookupMap . result ( subSeq ) ;
Distance : 4

17
Tree	final CharSequence result = new CharSequence ( result ) ;
Code	final CharSequence result = new CharSequence ( result ) ;
Distance : 7

18
Tree	final CharSequence result = result . toString ( get () ) ;
Code	final CharSequence result = result . toString ( get () ) ;
Distance : 5

19
Tree	final CharSequence result = lookupMap . get ( subSeq , result ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , result ) ;
Distance : 3

20
Tree	final CharSequence result = lookupMap . get ( ( subSeq < lookupMap > ) subSeq ) ;
Code	final CharSequence result = lookupMap . get ( ( subSeq < lookupMap > ) subSeq ) ;
Distance : 6

21
Tree	final CharSequence result = lookupMap . get ( result ) ;
Code	final CharSequence result = lookupMap . get ( result ) ;
Distance : 4

22
Tree	final CharSequence result = result . get ( subSeq ) ;
Code	final CharSequence result = result . get ( subSeq ) ;
Distance : 4

23
Tree	final CharSequence result = lookupMap . get ( subSeq , DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT ) ;
Distance : 3

24
Tree	final CharSequence result = lookupMap . get ( subSeq , MillisDurationField.INSTANCE ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , MillisDurationField.INSTANCE ) ;
Distance : 3

25
Tree	final CharSequence result = result . get ( ( subSeq < lookupMap > ) result ) ;
Code	final CharSequence result = result . get ( ( subSeq < lookupMap > ) result ) ;
Distance : 7

26
Tree	private CharSequence result = lookupMap . get () ;
Code	private CharSequence result = lookupMap . get () ;
Distance : 6

27
Tree	abstract CharSequence result = get ( result ) ;
Code	abstract CharSequence result = get ( result ) ;
Distance : 7

28
Tree	final CharSequence result = lookupMap . get ( ( result < lookupMap > ) result ) ;
Code	final CharSequence result = lookupMap . get ( ( result < lookupMap > ) result ) ;
Distance : 7

29
Tree	final CharSequence result = lookupMap . toString ( result . get () ) ;
Code	final CharSequence result = lookupMap . toString ( result . get () ) ;
Distance : 3

30
Tree	synchronized CharSequence result = new CharSequence ( this , subSeq ) ;
Code	synchronized CharSequence result = new CharSequence ( this , subSeq ) ;
Distance : 8

31
Tree	final CharSequence result = result . get ( subSeq . toString () ) ;
Code	final CharSequence result = result . get ( subSeq . toString () ) ;
Distance : 1

32
Tree	final CharSequence result = result . get ( result . get () . get () ) ;
Code	final CharSequence result = result . get ( result . get () . get () ) ;
Distance : 6

33
Tree	abstract CharSequence result = lookupMap . get ( get () ) ;
Code	abstract CharSequence result = lookupMap . get ( get () ) ;
Distance : 4

34
Tree	final CharSequence result = result . get ( toString ( subSeq ) ) ;
Code	final CharSequence result = result . get ( toString ( subSeq ) ) ;
Distance : 5

35
Tree	final CharSequence result = result . get () ;
Code	final CharSequence result = result . get () ;
Distance : 6

36
Tree	final CharSequence result = lookupMap . get ( subSeq . toString () . get () ) ;
Code	final CharSequence result = lookupMap . get ( subSeq . toString () . get () ) ;
Distance : 3

37
Tree	final CharSequence result = lookupMap . get ( subSeq . get () . get () ) ;
Code	final CharSequence result = lookupMap . get ( subSeq . get () . get () ) ;
Distance : 4

38
Tree	final CharSequence result = result . get ( get ( subSeq ) ) ;
Code	final CharSequence result = result . get ( get ( subSeq ) ) ;
Distance : 5

39
Tree	static CharSequence result = lookupMap . get () ;
Code	static CharSequence result = lookupMap . get () ;
Distance : 6

40
Tree	static CharSequence result = new CharSequence ( subSeq ) ;
Code	static CharSequence result = new CharSequence ( subSeq ) ;
Distance : 7

41
Tree	final CharSequence result = lookupMap . get ( ( subSeq < result > ) lookupMap ) ;
Code	final CharSequence result = lookupMap . get ( ( subSeq < result > ) lookupMap ) ;
Distance : 6

42
Tree	abstract CharSequence result = new CharSequence ( this , result ) ;
Code	abstract CharSequence result = new CharSequence ( this , result ) ;
Distance : 8

43
Tree	CharSequence result = toString ( result ) ;
Code	CharSequence result = toString ( result ) ;
Distance : 8

44
Tree	protected CharSequence result = new CharSequence ( this , subSeq ) ;
Code	protected CharSequence result = new CharSequence ( this , subSeq ) ;
Distance : 8

45
Tree	final CharSequence result = lookupMap . get ( result , result ) ;
Code	final CharSequence result = lookupMap . get ( result , result ) ;
Distance : 4

46
Tree	abstract CharSequence result = this . subSeq . get ( subSeq ) ;
Code	abstract CharSequence result = this . subSeq . get ( subSeq ) ;
Distance : 7

47
Tree	final CharSequence result = lookupMap . get ( subSeq , Calendar.SECOND ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , Calendar.SECOND ) ;
Distance : 3

48
Tree	static CharSequence result = new CharSequence ( result ) ;
Code	static CharSequence result = new CharSequence ( result ) ;
Distance : 8

49
Tree	abstract CharSequence result = result . get () ;
Code	abstract CharSequence result = result . get () ;
Distance : 7

50
Tree	final CharSequence result = lookupMap . get ( subSeq , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Distance : 3

51
Tree	final CharSequence result = lookupMap . get ( subSeq , flags.outputWrapper ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , flags.outputWrapper ) ;
Distance : 3

52
Tree	final CharSequence result = lookupMap . get ( result , result . get () ) ;
Code	final CharSequence result = lookupMap . get ( result , result . get () ) ;
Distance : 4

53
Tree	final CharSequence result = result . toString () ;
Code	final CharSequence result = result . toString () ;
Distance : 6

54
Tree	CharSequence result = get ( result ) ;
Code	CharSequence result = get ( result ) ;
Distance : 7

55
Tree	final CharSequence result = lookupMap . get ( result . toString ( subSeq ) ) ;
Code	final CharSequence result = lookupMap . get ( result . toString ( subSeq ) ) ;
Distance : 4

56
Tree	final CharSequence result = result . get ( toString () ) ;
Code	final CharSequence result = result . get ( toString () ) ;
Distance : 3

57
Tree	final CharSequence result = lookupMap . toString ( get () ) ;
Code	final CharSequence result = lookupMap . toString ( get () ) ;
Distance : 4

58
Tree	final CharSequence result = lookupMap . get ( subSeq , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Distance : 3

59
Tree	final CharSequence result = result . get ( super(); ) ;
Code	final CharSequence result = result . get ( super(); ) ;
Distance : 5

60
Tree	abstract CharSequence result = new CharSequence ( subSeq ) ;
Code	abstract CharSequence result = new CharSequence ( subSeq ) ;
Distance : 7

61
Tree	final CharSequence result = result . get ( result , result . get () ) ;
Code	final CharSequence result = result . get ( result , result . get () ) ;
Distance : 5

62
Tree	final CharSequence result = lookupMap . toString ( subSeq ) ;
Code	final CharSequence result = lookupMap . toString ( subSeq ) ;
Distance : 4

63
Tree	final CharSequence result = lookupMap . get ( subSeq , result . get () ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , result . get () ) ;
Distance : 3

64
Tree	final CharSequence result = lookupMap . get ( get ( result ) ) ;
Code	final CharSequence result = lookupMap . get ( get ( result ) ) ;
Distance : 4

65
Tree	abstract CharSequence result = lookupMap . get () ;
Code	abstract CharSequence result = lookupMap . get () ;
Distance : 6

66
Tree	final CharSequence result = lookupMap . get ( subSeq , lookupMap . toString () ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , lookupMap . toString () ) ;
Distance : 2

67
Tree	final CharSequence result = lookupMap . get ( subSeq , coefficients.length ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , coefficients.length ) ;
Distance : 3

68
Tree	final CharSequence result = lookupMap . get ( subSeq . get () . toString () ) ;
Code	final CharSequence result = lookupMap . get ( subSeq . get () . toString () ) ;
Distance : 3

69
Tree	final CharSequence result = result . get ( subSeq , result ) ;
Code	final CharSequence result = result . get ( subSeq , result ) ;
Distance : 4

70
Tree	final CharSequence result = result . get ( null ) ;
Code	final CharSequence result = result . get ( null ) ;
Distance : 5

71
Tree	private CharSequence result = get () . get ( subSeq ) ;
Code	private CharSequence result = get () . get ( subSeq ) ;
Distance : 6

72
Tree	final CharSequence result = lookupMap . get ( toString ( result ) ) ;
Code	final CharSequence result = lookupMap . get ( toString ( result ) ) ;
Distance : 4

73
Tree	public CharSequence result = get () . get ( subSeq ) ;
Code	public CharSequence result = get () . get ( subSeq ) ;
Distance : 6

74
Tree	final CharSequence result = this . subSeq . get ( subSeq ) ;
Code	final CharSequence result = this . subSeq . get ( subSeq ) ;
Distance : 6

75
Tree	static CharSequence result = get () . get ( result ) ;
Code	static CharSequence result = get () . get ( result ) ;
Distance : 7

76
Tree	final CharSequence result = lookupMap . get ( subSeq . get ( result ) ) ;
Code	final CharSequence result = lookupMap . get ( subSeq . get ( result ) ) ;
Distance : 4

77
Tree	public CharSequence result = lookupMap . get () ;
Code	public CharSequence result = lookupMap . get () ;
Distance : 6

78
Tree	static CharSequence result = get ( result ) ;
Code	static CharSequence result = get ( result ) ;
Distance : 7

79
Tree	final CharSequence result = lookupMap . get ( get ( subSeq ) ) ;
Code	final CharSequence result = lookupMap . get ( get ( subSeq ) ) ;
Distance : 4

80
Tree	final CharSequence result = toString () . get ( result ) ;
Code	final CharSequence result = toString () . get ( result ) ;
Distance : 6

81
Tree	final CharSequence result = lookupMap . get ( continue; ) ;
Code	final CharSequence result = lookupMap . get ( continue; ) ;
Distance : 4

82
Tree	synchronized CharSequence result = new CharSequence ( subSeq ) ;
Code	synchronized CharSequence result = new CharSequence ( subSeq ) ;
Distance : 7

83
Tree	static CharSequence result = lookupMap . get ( null ) ;
Code	static CharSequence result = lookupMap . get ( null ) ;
Distance : 5

84
Tree	final CharSequence result = lookupMap . toString ( subSeq . get () ) ;
Code	final CharSequence result = lookupMap . toString ( subSeq . get () ) ;
Distance : 2

85
Tree	final CharSequence result = new CharSequence ( subSeq ) ;
Code	final CharSequence result = new CharSequence ( subSeq ) ;
Distance : 6

86
Tree	abstract CharSequence result = new CharSequence ( result ) ;
Code	abstract CharSequence result = new CharSequence ( result ) ;
Distance : 8

87
Tree	final CharSequence result = result . toString ( subSeq ) ;
Code	final CharSequence result = result . toString ( subSeq ) ;
Distance : 5

88
Tree	CharSequence result = lookupMap . get ( result ) ;
Code	CharSequence result = lookupMap . get ( result ) ;
Distance : 5

89
Tree	final CharSequence result = result . get ( subSeq . get ( result ) ) ;
Code	final CharSequence result = result . get ( subSeq . get ( result ) ) ;
Distance : 5

90
Tree	final CharSequence result = toString ( result ) ;
Code	final CharSequence result = toString ( result ) ;
Distance : 7

91
Tree	final CharSequence result = lookupMap . get ( result , lookupMap ) ;
Code	final CharSequence result = lookupMap . get ( result , lookupMap ) ;
Distance : 4

92
Tree	final CharSequence result = lookupMap . get ( result . toString () ) ;
Code	final CharSequence result = lookupMap . get ( result . toString () ) ;
Distance : 1

93
Tree	final CharSequence result = lookupMap . get ( subSeq , lookupMap ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , lookupMap ) ;
Distance : 3

94
Tree	CharSequence result = get ( subSeq ) ;
Code	CharSequence result = get ( subSeq ) ;
Distance : 6

95
Tree	final CharSequence result = lookupMap . get ( subSeq , lookupMap . get () ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , lookupMap . get () ) ;
Distance : 3

96
Tree	final CharSequence result = this . result . get ( result ) ;
Code	final CharSequence result = this . result . get ( result ) ;
Distance : 7

97
Tree	final CharSequence result = result . get ( toString ( result ) ) ;
Code	final CharSequence result = result . get ( toString ( result ) ) ;
Distance : 5

98
Tree	CharSequence result = result . get ( result ) ;
Code	CharSequence result = result . get ( result ) ;
Distance : 6

99
Tree	abstract CharSequence result = lookupMap . get ( subSeq ) ;
Code	abstract CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

100
Tree	final CharSequence result = result . get ( result . toString () ) ;
Code	final CharSequence result = result . get ( result . toString () ) ;
Distance : 2

101
Tree	final CharSequence result = result . get ( ( subSeq < lookupMap > ) subSeq ) ;
Code	final CharSequence result = result . get ( ( subSeq < lookupMap > ) subSeq ) ;
Distance : 7

102
Tree	final CharSequence result = lookupMap . get ( super(); ) ;
Code	final CharSequence result = lookupMap . get ( super(); ) ;
Distance : 4

103
Tree	final CharSequence result = result . get ( subSeq . toString ( subSeq ) ) ;
Code	final CharSequence result = result . get ( subSeq . toString ( subSeq ) ) ;
Distance : 4

104
Tree	final CharSequence result = result . get ( get () ) ;
Code	final CharSequence result = result . get ( get () ) ;
Distance : 4

105
Tree	static CharSequence result = lookupMap . get ( get ( subSeq ) ) ;
Code	static CharSequence result = lookupMap . get ( get ( subSeq ) ) ;
Distance : 5

106
Tree	final CharSequence result = result . get ( result ) ;
Code	final CharSequence result = result . get ( result ) ;
Distance : 5

107
Tree	final CharSequence result = result . get ( result . get () ) ;
Code	final CharSequence result = result . get ( result . get () ) ;
Distance : 3

108
Tree	final CharSequence result = lookupMap . get ( ( result < lookupMap > ) lookupMap ) ;
Code	final CharSequence result = lookupMap . get ( ( result < lookupMap > ) lookupMap ) ;
Distance : 7

109
Tree	final CharSequence result = lookupMap . toString ( subSeq , result ) ;
Code	final CharSequence result = lookupMap . toString ( subSeq , result ) ;
Distance : 4

110
Tree	CharSequence result = lookupMap . get ( result ) ;
Code	CharSequence result = lookupMap . get ( result ) ;
Distance : 5

111
Tree	final CharSequence result = result . result ( result ) ;
Code	final CharSequence result = result . result ( result ) ;
Distance : 6

112
Tree	final CharSequence result = lookupMap . toString ( subSeq . get () . get () ) ;
Code	final CharSequence result = lookupMap . toString ( subSeq . get () . get () ) ;
Distance : 5

113
Tree	final CharSequence result = toString ( subSeq ) ;
Code	final CharSequence result = toString ( subSeq ) ;
Distance : 6

114
Tree	final CharSequence result = lookupMap . get ( result . toString () . get () ) ;
Code	final CharSequence result = lookupMap . get ( result . toString () . get () ) ;
Distance : 4

115
Tree	final CharSequence result = lookupMap . get ( subSeq . get ( subSeq ) ) ;
Code	final CharSequence result = lookupMap . get ( subSeq . get ( subSeq ) ) ;
Distance : 4

116
Tree	final CharSequence result = lookupMap . get ( result . get () ) ;
Code	final CharSequence result = lookupMap . get ( result . get () ) ;
Distance : 2

117
Tree	final CharSequence result = result . get ( result ) ;
Code	final CharSequence result = result . get ( result ) ;
Distance : 5

118
Tree	final CharSequence result = result . get ( ( subSeq < result > ) result ) ;
Code	final CharSequence result = result . get ( ( subSeq < result > ) result ) ;
Distance : 7

119
Tree	final CharSequence result = lookupMap . get ( result , lookupMap . get () ) ;
Code	final CharSequence result = lookupMap . get ( result , lookupMap . get () ) ;
Distance : 4

120
Tree	final CharSequence result = result . get ( result , lookupMap ) ;
Code	final CharSequence result = result . get ( result , lookupMap ) ;
Distance : 5

121
Tree	final CharSequence result = lookupMap . result ( result ) ;
Code	final CharSequence result = lookupMap . result ( result ) ;
Distance : 5

122
Tree	final CharSequence result = result . get ( subSeq , result . get () ) ;
Code	final CharSequence result = result . get ( subSeq , result . get () ) ;
Distance : 4

123
Tree	CharSequence result = get ( result ) ;
Code	CharSequence result = get ( result ) ;
Distance : 7

124
Tree	final CharSequence result = lookupMap . get ( get () ) ;
Code	final CharSequence result = lookupMap . get ( get () ) ;
Distance : 3

125
Tree	CharSequence result = toString ( result ) ;
Code	CharSequence result = toString ( result ) ;
Distance : 8

126
Tree	private CharSequence result = this . subSeq . get ( subSeq ) ;
Code	private CharSequence result = this . subSeq . get ( subSeq ) ;
Distance : 7

127
Tree	final CharSequence result = get ( result ) ;
Code	final CharSequence result = get ( result ) ;
Distance : 6

128
Tree	final CharSequence result = lookupMap . toString ( result ) ;
Code	final CharSequence result = lookupMap . toString ( result ) ;
Distance : 5

129
Tree	final CharSequence result = lookupMap . get ( subSeq . toString () ) ;
Code	final CharSequence result = lookupMap . get ( subSeq . toString () ) ;
Distance : 0

130
Tree	public CharSequence result = this . subSeq . get ( subSeq ) ;
Code	public CharSequence result = this . subSeq . get ( subSeq ) ;
Distance : 7

131
Tree	final CharSequence result = lookupMap . get ( result ) ;
Code	final CharSequence result = lookupMap . get ( result ) ;
Distance : 4

132
Tree	private CharSequence result = new CharSequence ( this , subSeq ) ;
Code	private CharSequence result = new CharSequence ( this , subSeq ) ;
Distance : 8

133
Tree	CharSequence result = lookupMap . get ( subSeq ) ;
Code	CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

134
Tree	CharSequence result = lookupMap . toString ( result ) ;
Code	CharSequence result = lookupMap . toString ( result ) ;
Distance : 6

135
Tree	CharSequence result = lookupMap . toString ( subSeq ) ;
Code	CharSequence result = lookupMap . toString ( subSeq ) ;
Distance : 5

136
Tree	final CharSequence result = lookupMap . get ( subSeq . get () ) ;
Code	final CharSequence result = lookupMap . get ( subSeq . get () ) ;
Distance : 1

137
Tree	final CharSequence result = lookupMap . get ( result . get () . get () ) ;
Code	final CharSequence result = lookupMap . get ( result . get () . get () ) ;
Distance : 5

138
Tree	final CharSequence result = result . get ( subSeq . toString () . get () ) ;
Code	final CharSequence result = result . get ( subSeq . toString () . get () ) ;
Distance : 4

139
Tree	CharSequence result = result . toString ( result ) ;
Code	CharSequence result = result . toString ( result ) ;
Distance : 7

140
Tree	final CharSequence result = toString () . get ( subSeq ) ;
Code	final CharSequence result = toString () . get ( subSeq ) ;
Distance : 5

141
Tree	final CharSequence result = result . get ( subSeq . get () ) ;
Code	final CharSequence result = result . get ( subSeq . get () ) ;
Distance : 2

142
Tree	final CharSequence result = result . result ( subSeq ) ;
Code	final CharSequence result = result . result ( subSeq ) ;
Distance : 5

143
Tree	CharSequence result = lookupMap . get ( subSeq ) ;
Code	CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

144
Tree	final CharSequence result = lookupMap . get ( ( subSeq < lookupMap > ) result ) ;
Code	final CharSequence result = lookupMap . get ( ( subSeq < lookupMap > ) result ) ;
Distance : 6

145
Tree	final CharSequence result = this . subSeq . toString ( subSeq ) ;
Code	final CharSequence result = this . subSeq . toString ( subSeq ) ;
Distance : 5

146
Tree	private CharSequence result = new CharSequence ( subSeq ) ;
Code	private CharSequence result = new CharSequence ( subSeq ) ;
Distance : 7

147
Tree	private CharSequence result = lookupMap . get ( get () ) ;
Code	private CharSequence result = lookupMap . get ( get () ) ;
Distance : 4

148
Tree	CharSequence result = result . get ( subSeq ) ;
Code	CharSequence result = result . get ( subSeq ) ;
Distance : 5

149
Tree	final CharSequence result = lookupMap . get ( toString () ) ;
Code	final CharSequence result = lookupMap . get ( toString () ) ;
Distance : 2

150
Tree	final CharSequence result = this . subSeq . get ( result ) ;
Code	final CharSequence result = this . subSeq . get ( result ) ;
Distance : 6

151
Tree	public CharSequence result = new CharSequence ( subSeq ) ;
Code	public CharSequence result = new CharSequence ( subSeq ) ;
Distance : 7

152
Tree	final CharSequence result = get () . toString ( subSeq ) ;
Code	final CharSequence result = get () . toString ( subSeq ) ;
Distance : 6

153
Tree	private CharSequence result = lookupMap . get ( null ) ;
Code	private CharSequence result = lookupMap . get ( null ) ;
Distance : 5

154
Tree	private CharSequence result = get ( subSeq ) ;
Code	private CharSequence result = get ( subSeq ) ;
Distance : 6

155
Tree	public CharSequence result = new CharSequence ( this , subSeq ) ;
Code	public CharSequence result = new CharSequence ( this , subSeq ) ;
Distance : 8

156
Tree	final CharSequence result = lookupMap . get ( result . get ( subSeq ) ) ;
Code	final CharSequence result = lookupMap . get ( result . get ( subSeq ) ) ;
Distance : 5

157
Tree	static CharSequence result = get ( subSeq ) ;
Code	static CharSequence result = get ( subSeq ) ;
Distance : 6

158
Tree	final CharSequence result = result . get ( subSeq . get () . get () ) ;
Code	final CharSequence result = result . get ( subSeq . get () . get () ) ;
Distance : 5

159
Tree	final CharSequence result = result . get ( result . toString () . get () ) ;
Code	final CharSequence result = result . get ( result . toString () . get () ) ;
Distance : 5

160
Tree	public CharSequence result = get ( subSeq ) ;
Code	public CharSequence result = get ( subSeq ) ;
Distance : 6

161
Tree	final CharSequence result = result . get ( get ( result ) ) ;
Code	final CharSequence result = result . get ( get ( result ) ) ;
Distance : 5

162
Tree	public CharSequence result = lookupMap . get ( get () ) ;
Code	public CharSequence result = lookupMap . get ( get () ) ;
Distance : 4

163
Tree	final CharSequence result = result . get ( subSeq ) ;
Code	final CharSequence result = result . get ( subSeq ) ;
Distance : 4

164
Tree	abstract CharSequence result = get () . get ( subSeq ) ;
Code	abstract CharSequence result = get () . get ( subSeq ) ;
Distance : 6

165
Tree	final CharSequence result = result . get ( result . get ( subSeq ) ) ;
Code	final CharSequence result = result . get ( result . get ( subSeq ) ) ;
Distance : 6

166
Tree	final CharSequence result = lookupMap . get ( subSeq . toString ( subSeq ) ) ;
Code	final CharSequence result = lookupMap . get ( subSeq . toString ( subSeq ) ) ;
Distance : 3

167
Tree	static CharSequence result = result . get () ;
Code	static CharSequence result = result . get () ;
Distance : 7

168
Tree	static CharSequence result = new CharSequence ( this , result ) ;
Code	static CharSequence result = new CharSequence ( this , result ) ;
Distance : 8

169
Tree	CharSequence result = toString ( subSeq ) ;
Code	CharSequence result = toString ( subSeq ) ;
Distance : 7

170
Tree	CharSequence result = get ( subSeq ) ;
Code	CharSequence result = get ( subSeq ) ;
Distance : 6

171
Tree	CharSequence result = toString ( subSeq ) ;
Code	CharSequence result = toString ( subSeq ) ;
Distance : 7

172
Tree	final CharSequence result = result . get ( result , lookupMap . get () ) ;
Code	final CharSequence result = result . get ( result , lookupMap . get () ) ;
Distance : 5

173
Tree	static CharSequence result = lookupMap . get ( subSeq ) ;
Code	static CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

174
Tree	final CharSequence result = lookupMap . toString ( subSeq , lookupMap ) ;
Code	final CharSequence result = lookupMap . toString ( subSeq , lookupMap ) ;
Distance : 4

175
Tree	private CharSequence result = lookupMap . get ( subSeq ) ;
Code	private CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

176
Tree	static CharSequence result = new CharSequence ( this , subSeq ) ;
Code	static CharSequence result = new CharSequence ( this , subSeq ) ;
Distance : 8

177
Tree	final CharSequence result = lookupMap . get ( toString ( subSeq ) ) ;
Code	final CharSequence result = lookupMap . get ( toString ( subSeq ) ) ;
Distance : 4

178
Tree	static CharSequence result = lookupMap . get ( subSeq ) ;
Code	static CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

179
Tree	static CharSequence result = get () . get ( subSeq ) ;
Code	static CharSequence result = get () . get ( subSeq ) ;
Distance : 6

180
Tree	final CharSequence result = result . get ( subSeq . get ( subSeq ) ) ;
Code	final CharSequence result = result . get ( subSeq . get ( subSeq ) ) ;
Distance : 5

181
Tree	final CharSequence result = lookupMap . get ( subSeq , java.lang.Class ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , java.lang.Class ) ;
Distance : 3

182
Tree	final CharSequence result = lookupMap . get ( subSeq , result . toString () ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , result . toString () ) ;
Distance : 2

183
Tree	abstract CharSequence result = lookupMap . get ( subSeq ) ;
Code	abstract CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

184
Tree	final CharSequence result = lookupMap . toString () ;
Code	final CharSequence result = lookupMap . toString () ;
Distance : 5

185
Tree	final CharSequence result = lookupMap . get ( ( result < result > ) result ) ;
Code	final CharSequence result = lookupMap . get ( ( result < result > ) result ) ;
Distance : 7

186
Tree	CharSequence result = get ( subSeq ) ; Math
Code	CharSequence result = get ( subSeq ) ; Math
Distance : 7

187
Tree	static CharSequence result = lookupMap . get ( get () ) ;
Code	static CharSequence result = lookupMap . get ( get () ) ;
Distance : 4

188
Tree	final CharSequence result = get () . get ( result ) ;
Code	final CharSequence result = get () . get ( result ) ;
Distance : 6

189
Tree	final CharSequence result = result . get ( subSeq , lookupMap ) ;
Code	final CharSequence result = result . get ( subSeq , lookupMap ) ;
Distance : 4

190
Tree	CharSequence result = get ( subSeq ) ; wanted
Code	CharSequence result = get ( subSeq ) ; wanted
Distance : 7

191
Tree	final CharSequence result = new CharSequence ( this , subSeq ) ;
Code	final CharSequence result = new CharSequence ( this , subSeq ) ;
Distance : 7

192
Tree	final CharSequence result = lookupMap . get ( subSeq ) ;
Code	final CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 3

193
Tree	CharSequence result = result . toString ( subSeq ) ;
Code	CharSequence result = result . toString ( subSeq ) ;
Distance : 6

194
Tree	static CharSequence result = this . subSeq . get ( subSeq ) ;
Code	static CharSequence result = this . subSeq . get ( subSeq ) ;
Distance : 7

195
Tree	final CharSequence result = lookupMap . get ( subSeq ) ;
Code	final CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 3

196
Tree	final CharSequence result = lookupMap . toString ( null ) ;
Code	final CharSequence result = lookupMap . toString ( null ) ;
Distance : 5

197
Tree	final CharSequence result = result . get ( subSeq , lookupMap . get () ) ;
Code	final CharSequence result = result . get ( subSeq , lookupMap . get () ) ;
Distance : 4

198
Tree	abstract CharSequence result = new CharSequence ( this , subSeq ) ;
Code	abstract CharSequence result = new CharSequence ( this , subSeq ) ;
Distance : 8

199
Tree	final CharSequence result = this . subSeq . toString ( result ) ;
Code	final CharSequence result = this . subSeq . toString ( result ) ;
Distance : 5

========================================================================


========================================================================
Example Number: 51
Parent Code is: 
final int cols = problem . getAllParameters () . length ;
-------------------------------------------------------------------------------
Child code is: 
final int cols = problem . getUnboundParameters () . length ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=cols}) (204{val==}) (22 (32 (800{val=problem}) (235{val=.}) (802{val=getAllParameters}) (216{val=()})) (235{val=.}) (800{val=length}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=cols}) (204{val==}) (22 (32 (800{val=problem}) (235{val=.}) (802{val=getUnboundParameters}) (216{val=()})) (235{val=.}) (800{val=length}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/100/parent/src_java_org_apache_commons_math_estimation_AbstractEstimator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	final int cols = problem . getAllParameters ( false , length ) ;
Code	final int cols = problem . getAllParameters ( false , length ) ;
Distance : 5

1
Tree	static int cols = problem ;
Code	static int cols = problem ;
Distance : 6

2
Tree	final byte cols = problem ;
Code	final byte cols = problem ;
Distance : 6

3
Tree	final int cols = problem . getAllParameters () . length ;
Code	final int cols = problem . getAllParameters () . length ;
Distance : 1

4
Tree	final int cols = cols ;
Code	final int cols = cols ;
Distance : 6

5
Tree	final long cols = problem ;
Code	final long cols = problem ;
Distance : 6

6
Tree	int [] [] cols = problem . getAllParameters () ;
Code	int [] [] cols = problem . getAllParameters () ;
Distance : 6

7
Tree	double cols = problem . getAllParameters () ;
Code	double cols = problem . getAllParameters () ;
Distance : 5

8
Tree	abstract int cols = problem ;
Code	abstract int cols = problem ;
Distance : 6

9
Tree	final int cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	final int cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 3

10
Tree	final int cols = ( problem ) length ;
Code	final int cols = ( problem ) length ;
Distance : 5

11
Tree	int cols = ( problem ) length ;
Code	int cols = ( problem ) length ;
Distance : 6

12
Tree	final int cols = problem ;
Code	final int cols = problem ;
Distance : 5

13
Tree	final int cols = problem . getAllParameters () ;
Code	final int cols = problem . getAllParameters () ;
Distance : 3

14
Tree	double cols = ( problem ) length ;
Code	double cols = ( problem ) length ;
Distance : 7

15
Tree	final int problem = ( problem ) length ;
Code	final int problem = ( problem ) length ;
Distance : 6

16
Tree	final double cols = ( problem ) length ;
Code	final double cols = ( problem ) length ;
Distance : 6

17
Tree	final int [] [] cols = problem . getAllParameters ( config.tracerMode ) ;
Code	final int [] [] cols = problem . getAllParameters ( config.tracerMode ) ;
Distance : 6

18
Tree	final int [] [] cols = problem . getAllParameters ( RandomSource.TWO_CMRES ) ;
Code	final int [] [] cols = problem . getAllParameters ( RandomSource.TWO_CMRES ) ;
Distance : 6

19
Tree	final int cols = problem . getAllParameters ( true , length ) ;
Code	final int cols = problem . getAllParameters ( true , length ) ;
Distance : 5

20
Tree	int [] problem = cols . getAllParameters () ;
Code	int [] problem = cols . getAllParameters () ;
Distance : 7

21
Tree	long cols = ( problem ) length ;
Code	long cols = ( problem ) length ;
Distance : 7

22
Tree	final int [] [] cols = problem . getAllParameters ( obj1.props ) ;
Code	final int [] [] cols = problem . getAllParameters ( obj1.props ) ;
Distance : 6

23
Tree	char cols = ( problem ) length ;
Code	char cols = ( problem ) length ;
Distance : 7

24
Tree	double [] cols = problem . getAllParameters () ;
Code	double [] cols = problem . getAllParameters () ;
Distance : 5

25
Tree	int problem = ( problem ) length ;
Code	int problem = ( problem ) length ;
Distance : 7

26
Tree	final boolean [] [] cols = problem . getAllParameters () ;
Code	final boolean [] [] cols = problem . getAllParameters () ;
Distance : 6

27
Tree	final int [] [] cols = problem . getAllParameters ( RandomSource.MT ) ;
Code	final int [] [] cols = problem . getAllParameters ( RandomSource.MT ) ;
Distance : 6

28
Tree	final cols cols = problem . getAllParameters () ;
Code	final cols cols = problem . getAllParameters () ;
Distance : 4

29
Tree	double [] problem = problem . getAllParameters () ;
Code	double [] problem = problem . getAllParameters () ;
Distance : 6

30
Tree	final char [] cols = problem . getAllParameters () ;
Code	final char [] cols = problem . getAllParameters () ;
Distance : 5

31
Tree	final double [] [] cols = problem . getAllParameters () ;
Code	final double [] [] cols = problem . getAllParameters () ;
Distance : 6

32
Tree	final int problem = problem ;
Code	final int problem = problem ;
Distance : 6

33
Tree	final double cols = problem ;
Code	final double cols = problem ;
Distance : 6

34
Tree	final int cols = problem . getAllParameters ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY ) ;
Code	final int cols = problem . getAllParameters ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY ) ;
Distance : 4

35
Tree	final int cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

36
Tree	boolean cols = ( problem ) length ;
Code	boolean cols = ( problem ) length ;
Distance : 7

37
Tree	final int cols = problem . getAllParameters ( newCachedThreadPool ) ;
Code	final int cols = problem . getAllParameters ( newCachedThreadPool ) ;
Distance : 4

38
Tree	abstract int [] problem = problem . getAllParameters () ;
Code	abstract int [] problem = problem . getAllParameters () ;
Distance : 6

39
Tree	final double cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

40
Tree	final byte [] [] cols = problem . getAllParameters () ;
Code	final byte [] [] cols = problem . getAllParameters () ;
Distance : 6

41
Tree	final int [] [] cols = problem . getAllParameters ( cols , NUMBER_CONSTANT ) ;
Code	final int [] [] cols = problem . getAllParameters ( cols , NUMBER_CONSTANT ) ;
Distance : 8

42
Tree	final int [] [] cols = problem . getAllParameters () ;
Code	final int [] [] cols = problem . getAllParameters () ;
Distance : 5

43
Tree	final boolean [] cols = problem . getAllParameters () ;
Code	final boolean [] cols = problem . getAllParameters () ;
Distance : 5

44
Tree	final int cols = ( problem ) cols ;
Code	final int cols = ( problem ) cols ;
Distance : 6

45
Tree	final int [] [] cols = problem . getAllParameters ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY ) ;
Code	final int [] [] cols = problem . getAllParameters ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY ) ;
Distance : 6

46
Tree	final int cols = problem . getAllParameters ( Cartesian1D.ZERO ) ;
Code	final int cols = problem . getAllParameters ( Cartesian1D.ZERO ) ;
Distance : 4

47
Tree	boolean [] [] cols = problem . getAllParameters () ;
Code	boolean [] [] cols = problem . getAllParameters () ;
Distance : 6

48
Tree	int cols = problem . getAllParameters () ;
Code	int cols = problem . getAllParameters () ;
Distance : 4

49
Tree	byte cols = ( problem ) length ;
Code	byte cols = ( problem ) length ;
Distance : 7

50
Tree	final int [] [] cols = problem . getAllParameters ( newCachedThreadPool ) ;
Code	final int [] [] cols = problem . getAllParameters ( newCachedThreadPool ) ;
Distance : 6

51
Tree	final char cols = problem ;
Code	final char cols = problem ;
Distance : 6

52
Tree	static int cols = problem . getAllParameters () ;
Code	static int cols = problem . getAllParameters () ;
Distance : 4

53
Tree	final int [] [] cols = cols . getAllParameters () ;
Code	final int [] [] cols = cols . getAllParameters () ;
Distance : 6

54
Tree	final byte cols = ( problem ) length ;
Code	final byte cols = ( problem ) length ;
Distance : 6

55
Tree	final int cols = problem . getAllParameters ( false , cols ) ;
Code	final int cols = problem . getAllParameters ( false , cols ) ;
Distance : 6

56
Tree	final int cols = cols . getAllParameters () ;
Code	final int cols = cols . getAllParameters () ;
Distance : 4

57
Tree	int problem = problem . getAllParameters () ;
Code	int problem = problem . getAllParameters () ;
Distance : 5

58
Tree	final long cols = problem . getAllParameters () ;
Code	final long cols = problem . getAllParameters () ;
Distance : 4

59
Tree	final double [] cols = problem . getAllParameters () ;
Code	final double [] cols = problem . getAllParameters () ;
Distance : 5

60
Tree	final long [] [] cols = problem . getAllParameters () ;
Code	final long [] [] cols = problem . getAllParameters () ;
Distance : 6

61
Tree	final int cols = problem . getAllParameters ( problem , TransformType.INVERSE ) ;
Code	final int cols = problem . getAllParameters ( problem , TransformType.INVERSE ) ;
Distance : 6

62
Tree	final byte [] cols = problem . getAllParameters () ;
Code	final byte [] cols = problem . getAllParameters () ;
Distance : 5

63
Tree	final int [] [] problem = problem . getAllParameters () ;
Code	final int [] [] problem = problem . getAllParameters () ;
Distance : 6

64
Tree	boolean cols = problem . getAllParameters () ;
Code	boolean cols = problem . getAllParameters () ;
Distance : 5

65
Tree	long [] problem = problem . getAllParameters () ;
Code	long [] problem = problem . getAllParameters () ;
Distance : 6

66
Tree	static int cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	static int cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

67
Tree	int cols = ( problem ) cols ;
Code	int cols = ( problem ) cols ;
Distance : 7

68
Tree	final byte cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final byte cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

69
Tree	final int [] problem = problem . getAllParameters () ;
Code	final int [] problem = problem . getAllParameters () ;
Distance : 5

70
Tree	abstract int cols = problem . getAllParameters () ;
Code	abstract int cols = problem . getAllParameters () ;
Distance : 4

71
Tree	double [] [] cols = problem . getAllParameters () ;
Code	double [] [] cols = problem . getAllParameters () ;
Distance : 6

72
Tree	final double problem = problem . getAllParameters () . length ;
Code	final double problem = problem . getAllParameters () . length ;
Distance : 3

73
Tree	final byte cols = problem . getAllParameters () ;
Code	final byte cols = problem . getAllParameters () ;
Distance : 4

74
Tree	final length cols = problem . getAllParameters () ;
Code	final length cols = problem . getAllParameters () ;
Distance : 4

75
Tree	abstract int cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	abstract int cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 4

76
Tree	final int cols = problem . getAllParameters ( problem , Locale.US ) ;
Code	final int cols = problem . getAllParameters ( problem , Locale.US ) ;
Distance : 6

77
Tree	final int [] [] problem = problem . getAllParameters ( problem , NUMBER_CONSTANT ) ;
Code	final int [] [] problem = problem . getAllParameters ( problem , NUMBER_CONSTANT ) ;
Distance : 9

78
Tree	final long [] cols = problem . getAllParameters () ;
Code	final long [] cols = problem . getAllParameters () ;
Distance : 5

79
Tree	final int [] cols = cols . getAllParameters () ;
Code	final int [] cols = cols . getAllParameters () ;
Distance : 5

80
Tree	private cols cols = problem . getAllParameters () ;
Code	private cols cols = problem . getAllParameters () ;
Distance : 5

81
Tree	final int problem = problem . getAllParameters () ;
Code	final int problem = problem . getAllParameters () ;
Distance : 4

82
Tree	final int cols = ( problem ) problem ;
Code	final int cols = ( problem ) problem ;
Distance : 6

83
Tree	abstract int cols = problem . getAllParameters () . length ;
Code	abstract int cols = problem . getAllParameters () . length ;
Distance : 2

84
Tree	final double [] [] cols = problem . getAllParameters ( cols , NUMBER_CONSTANT ) ;
Code	final double [] [] cols = problem . getAllParameters ( cols , NUMBER_CONSTANT ) ;
Distance : 9

85
Tree	final double cols = problem . getAllParameters ( true , length ) ;
Code	final double cols = problem . getAllParameters ( true , length ) ;
Distance : 6

86
Tree	abstract int cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	abstract int cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

87
Tree	final int cols = cols . getAllParameters () - NUMBER_CONSTANT ;
Code	final int cols = cols . getAllParameters () - NUMBER_CONSTANT ;
Distance : 4

88
Tree	final char cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	final char cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 4

89
Tree	final double problem = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	final double problem = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 5

90
Tree	final long cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	final long cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 4

91
Tree	static int [] problem = problem . getAllParameters () ;
Code	static int [] problem = problem . getAllParameters () ;
Distance : 6

92
Tree	char cols = problem . getAllParameters () ;
Code	char cols = problem . getAllParameters () ;
Distance : 5

93
Tree	final char cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final char cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

94
Tree	final cols problem = problem . getAllParameters () ;
Code	final cols problem = problem . getAllParameters () ;
Distance : 5

95
Tree	final int cols = cols . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int cols = cols . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

96
Tree	final int cols = problem . getAllParameters ( new length [ NUMBER_CONSTANT ] ) ;
Code	final int cols = problem . getAllParameters ( new length [ NUMBER_CONSTANT ] ) ;
Distance : 7

97
Tree	float cols = ( problem ) length ;
Code	float cols = ( problem ) length ;
Distance : 7

98
Tree	protected cols cols = problem . getAllParameters () ;
Code	protected cols cols = problem . getAllParameters () ;
Distance : 5

99
Tree	short cols = ( problem ) length ;
Code	short cols = ( problem ) length ;
Distance : 7

100
Tree	int [] problem = problem . getAllParameters () ;
Code	int [] problem = problem . getAllParameters () ;
Distance : 6

101
Tree	final int cols = problem . getAllParameters ( new problem [ NUMBER_CONSTANT ] ) ;
Code	final int cols = problem . getAllParameters ( new problem [ NUMBER_CONSTANT ] ) ;
Distance : 8

102
Tree	final double problem = problem ;
Code	final double problem = problem ;
Distance : 7

103
Tree	final double [] [] cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Code	final double [] [] cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Distance : 9

104
Tree	byte [] problem = problem . getAllParameters () ;
Code	byte [] problem = problem . getAllParameters () ;
Distance : 6

105
Tree	final int [] cols = problem . getAllParameters () ;
Code	final int [] cols = problem . getAllParameters () ;
Distance : 4

106
Tree	final int [] [] cols = problem . getAllParameters ( Cartesian1D.ZERO ) ;
Code	final int [] [] cols = problem . getAllParameters ( Cartesian1D.ZERO ) ;
Distance : 6

107
Tree	final long cols = ( problem ) length ;
Code	final long cols = ( problem ) length ;
Distance : 6

108
Tree	final int [] [] problem = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Code	final int [] [] problem = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Distance : 9

109
Tree	final int [] [] cols = problem . getAllParameters ( problem , NUMBER_CONSTANT ) ;
Code	final int [] [] cols = problem . getAllParameters ( problem , NUMBER_CONSTANT ) ;
Distance : 8

110
Tree	short [] problem = problem . getAllParameters () ;
Code	short [] problem = problem . getAllParameters () ;
Distance : 6

111
Tree	abstract int [] [] problem = problem . getAllParameters () ;
Code	abstract int [] [] problem = problem . getAllParameters () ;
Distance : 7

112
Tree	abstract cols cols = problem . getAllParameters () ;
Code	abstract cols cols = problem . getAllParameters () ;
Distance : 5

113
Tree	final int cols = problem . getAllParameters ( false , problem ) ;
Code	final int cols = problem . getAllParameters ( false , problem ) ;
Distance : 6

114
Tree	final long cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final long cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

115
Tree	final double cols = problem . getAllParameters () ;
Code	final double cols = problem . getAllParameters () ;
Distance : 4

116
Tree	static int [] [] problem = problem . getAllParameters ( problem , NUMBER_CONSTANT ) ;
Code	static int [] [] problem = problem . getAllParameters ( problem , NUMBER_CONSTANT ) ;
Distance : 10

117
Tree	final int problem = problem . getAllParameters ( new length [ NUMBER_CONSTANT ] ) ;
Code	final int problem = problem . getAllParameters ( new length [ NUMBER_CONSTANT ] ) ;
Distance : 8

118
Tree	final int cols = problem . cols ( problem . getAllParameters () , length () ) ;
Code	final int cols = problem . cols ( problem . getAllParameters () , length () ) ;
Distance : 8

119
Tree	final int cols = problem . cols ( cols . getAllParameters () , getAllParameters () ) ;
Code	final int cols = problem . cols ( cols . getAllParameters () , getAllParameters () ) ;
Distance : 9

120
Tree	abstract int cols = ( problem ) length ;
Code	abstract int cols = ( problem ) length ;
Distance : 6

121
Tree	final int cols = problem . cols ( length . getAllParameters () , length () ) ;
Code	final int cols = problem . cols ( length . getAllParameters () , length () ) ;
Distance : 8

122
Tree	final double problem = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double problem = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

123
Tree	byte [] [] cols = problem . getAllParameters () ;
Code	byte [] [] cols = problem . getAllParameters () ;
Distance : 6

124
Tree	final int problem = problem . getAllParameters ( new problem [ NUMBER_CONSTANT ] ) ;
Code	final int problem = problem . getAllParameters ( new problem [ NUMBER_CONSTANT ] ) ;
Distance : 9

125
Tree	final int [] [] problem = problem . getAllParameters ( cols , NUMBER_CONSTANT ) ;
Code	final int [] [] problem = problem . getAllParameters ( cols , NUMBER_CONSTANT ) ;
Distance : 9

126
Tree	final double [] [] cols = problem . getAllParameters ( problem , NUMBER_CONSTANT ) ;
Code	final double [] [] cols = problem . getAllParameters ( problem , NUMBER_CONSTANT ) ;
Distance : 9

127
Tree	final int problem = problem . cols ( problem . getAllParameters () , final () ) ;
Code	final int problem = problem . cols ( problem . getAllParameters () , final () ) ;
Distance : 10

128
Tree	final double cols = problem . getAllParameters ( new length [ NUMBER_CONSTANT ] ) ;
Code	final double cols = problem . getAllParameters ( new length [ NUMBER_CONSTANT ] ) ;
Distance : 8

129
Tree	final double cols = problem . cols ( problem . getAllParameters () , final () ) ;
Code	final double cols = problem . cols ( problem . getAllParameters () , final () ) ;
Distance : 10

130
Tree	final double cols = problem . getAllParameters ( new problem [ NUMBER_CONSTANT ] ) ;
Code	final double cols = problem . getAllParameters ( new problem [ NUMBER_CONSTANT ] ) ;
Distance : 9

131
Tree	final int cols = problem . problem ( problem . getAllParameters () , length () ) ;
Code	final int cols = problem . problem ( problem . getAllParameters () , length () ) ;
Distance : 8

132
Tree	final int problem = problem . cols ( cols . getAllParameters () , final () ) ;
Code	final int problem = problem . cols ( cols . getAllParameters () , final () ) ;
Distance : 10

133
Tree	final int cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Code	final int cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Distance : 8

134
Tree	short [] [] cols = problem . getAllParameters () ;
Code	short [] [] cols = problem . getAllParameters () ;
Distance : 6

135
Tree	final double cols = problem . getAllParameters () . length ;
Code	final double cols = problem . getAllParameters () . length ;
Distance : 2

136
Tree	float cols = problem . getAllParameters () ;
Code	float cols = problem . getAllParameters () ;
Distance : 5

137
Tree	final problem cols = problem . getAllParameters () ;
Code	final problem cols = problem . getAllParameters () ;
Distance : 4

138
Tree	char [] [] cols = problem . getAllParameters () ;
Code	char [] [] cols = problem . getAllParameters () ;
Distance : 6

139
Tree	final int problem = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	final int problem = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 4

140
Tree	final int problem = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int problem = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

141
Tree	final int cols = problem . getAllParameters ( problem , plane.w ) ;
Code	final int cols = problem . getAllParameters ( problem , plane.w ) ;
Distance : 6

142
Tree	int [] cols = problem . getAllParameters () ;
Code	int [] cols = problem . getAllParameters () ;
Distance : 5

143
Tree	static int cols = problem . getAllParameters ( false , length ) ;
Code	static int cols = problem . getAllParameters ( false , length ) ;
Distance : 6

144
Tree	float [] [] cols = problem . getAllParameters () ;
Code	float [] [] cols = problem . getAllParameters () ;
Distance : 6

145
Tree	double problem = problem . getAllParameters () ;
Code	double problem = problem . getAllParameters () ;
Distance : 6

146
Tree	final int problem = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Code	final int problem = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Distance : 9

147
Tree	final byte cols = problem . getAllParameters ( false , length ) ;
Code	final byte cols = problem . getAllParameters ( false , length ) ;
Distance : 6

148
Tree	final int cols = problem . getAllParameters ( problem , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	final int cols = problem . getAllParameters ( problem , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 6

149
Tree	final int cols = problem . getAllParameters ( problem , FunctionFlavor.NORMAL ) ;
Code	final int cols = problem . getAllParameters ( problem , FunctionFlavor.NORMAL ) ;
Distance : 6

150
Tree	final int cols = problem . getAllParameters ( problem , MathUtils.SAFE_MIN ) ;
Code	final int cols = problem . getAllParameters ( problem , MathUtils.SAFE_MIN ) ;
Distance : 6

151
Tree	final double cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	final double cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 4

152
Tree	final int cols = problem . getAllParameters ( obj1.props ) ;
Code	final int cols = problem . getAllParameters ( obj1.props ) ;
Distance : 4

153
Tree	final int cols = problem . getAllParameters ( Locale.US ) ;
Code	final int cols = problem . getAllParameters ( Locale.US ) ;
Distance : 4

154
Tree	static int [] [] problem = problem . getAllParameters () ;
Code	static int [] [] problem = problem . getAllParameters () ;
Distance : 7

155
Tree	static int cols = problem . getAllParameters () . length ;
Code	static int cols = problem . getAllParameters () . length ;
Distance : 2

156
Tree	int [] [] problem = problem . getAllParameters () ;
Code	int [] [] problem = problem . getAllParameters () ;
Distance : 7

157
Tree	static cols cols = problem . getAllParameters () ;
Code	static cols cols = problem . getAllParameters () ;
Distance : 5

158
Tree	static int cols = ( problem ) length ;
Code	static int cols = ( problem ) length ;
Distance : 6

159
Tree	final byte cols = problem . getAllParameters () . length ;
Code	final byte cols = problem . getAllParameters () . length ;
Distance : 2

160
Tree	final int cols = problem . getAllParameters ( Coordinates2D.ZERO ) ;
Code	final int cols = problem . getAllParameters ( Coordinates2D.ZERO ) ;
Distance : 4

161
Tree	final int cols = problem . getAllParameters ( config.tracerMode ) ;
Code	final int cols = problem . getAllParameters ( config.tracerMode ) ;
Distance : 4

162
Tree	final double cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Code	final double cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Distance : 9

163
Tree	final char cols = ( problem ) length ;
Code	final char cols = ( problem ) length ;
Distance : 6

164
Tree	long cols = problem . getAllParameters () ;
Code	long cols = problem . getAllParameters () ;
Distance : 5

165
Tree	final int [] [] cols = problem . getAllParameters ( Coordinates2D.ZERO ) ;
Code	final int [] [] cols = problem . getAllParameters ( Coordinates2D.ZERO ) ;
Distance : 6

166
Tree	final int problem = problem . getAllParameters ( true , length ) ;
Code	final int problem = problem . getAllParameters ( true , length ) ;
Distance : 6

167
Tree	final int cols = problem . getAllParameters ( Cartesian2D.ZERO ) ;
Code	final int cols = problem . getAllParameters ( Cartesian2D.ZERO ) ;
Distance : 4

168
Tree	final int cols = problem . getAllParameters ( RandomSource.TWO_CMRES ) ;
Code	final int cols = problem . getAllParameters ( RandomSource.TWO_CMRES ) ;
Distance : 4

169
Tree	final char cols = problem . getAllParameters () . length ;
Code	final char cols = problem . getAllParameters () . length ;
Distance : 2

170
Tree	final int cols = problem . getAllParameters ( problem , x.length ) ;
Code	final int cols = problem . getAllParameters ( problem , x.length ) ;
Distance : 6

171
Tree	final int cols = problem . getAllParameters ( problem , v.data ) ;
Code	final int cols = problem . getAllParameters ( problem , v.data ) ;
Distance : 6

172
Tree	final double cols = problem . cols ( cols . getAllParameters () , length () ) ;
Code	final double cols = problem . cols ( cols . getAllParameters () , length () ) ;
Distance : 9

173
Tree	final int cols = problem . getAllParameters ( problem , Byte.MIN_VALUE ) ;
Code	final int cols = problem . getAllParameters ( problem , Byte.MIN_VALUE ) ;
Distance : 6

174
Tree	final char [] [] cols = problem . getAllParameters () ;
Code	final char [] [] cols = problem . getAllParameters () ;
Distance : 6

175
Tree	final char cols = problem . getAllParameters () ;
Code	final char cols = problem . getAllParameters () ;
Distance : 4

176
Tree	final int cols = problem . getAllParameters ( problem , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ;
Code	final int cols = problem . getAllParameters ( problem , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ;
Distance : 6

177
Tree	final int cols = problem . problem ( cols . getAllParameters () , length () ) ;
Code	final int cols = problem . problem ( cols . getAllParameters () , length () ) ;
Distance : 8

178
Tree	final double problem = problem . getAllParameters () ;
Code	final double problem = problem . getAllParameters () ;
Distance : 5

179
Tree	final int cols = cols . getAllParameters () . length ;
Code	final int cols = cols . getAllParameters () . length ;
Distance : 2

180
Tree	double [] [] problem = problem . getAllParameters () ;
Code	double [] [] problem = problem . getAllParameters () ;
Distance : 7

181
Tree	public cols cols = problem . getAllParameters () ;
Code	public cols cols = problem . getAllParameters () ;
Distance : 5

182
Tree	byte cols = problem . getAllParameters () ;
Code	byte cols = problem . getAllParameters () ;
Distance : 5

183
Tree	short cols = problem . getAllParameters () ;
Code	short cols = problem . getAllParameters () ;
Distance : 5

184
Tree	static int cols = problem . getAllParameters ( new problem [ NUMBER_CONSTANT ] ) ;
Code	static int cols = problem . getAllParameters ( new problem [ NUMBER_CONSTANT ] ) ;
Distance : 9

185
Tree	final long cols = problem . getAllParameters () . length ;
Code	final long cols = problem . getAllParameters () . length ;
Distance : 2

186
Tree	static problem cols = problem . getAllParameters () ;
Code	static problem cols = problem . getAllParameters () ;
Distance : 5

187
Tree	long [] [] cols = problem . getAllParameters () ;
Code	long [] [] cols = problem . getAllParameters () ;
Distance : 6

188
Tree	final int [] [] cols = problem . getAllParameters ( Locale.US ) ;
Code	final int [] [] cols = problem . getAllParameters ( Locale.US ) ;
Distance : 6

189
Tree	final int cols = problem . getAllParameters ( RandomSource.MT ) ;
Code	final int cols = problem . getAllParameters ( RandomSource.MT ) ;
Distance : 4

190
Tree	final int problem = problem . getAllParameters ( false , length ) ;
Code	final int problem = problem . getAllParameters ( false , length ) ;
Distance : 6

191
Tree	char [] problem = problem . getAllParameters () ;
Code	char [] problem = problem . getAllParameters () ;
Distance : 6

192
Tree	final double cols = problem . getAllParameters ( false , length ) ;
Code	final double cols = problem . getAllParameters ( false , length ) ;
Distance : 6

193
Tree	final int [] [] cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Code	final int [] [] cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Distance : 8

194
Tree	static int cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	static int cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 4

195
Tree	boolean [] problem = problem . getAllParameters () ;
Code	boolean [] problem = problem . getAllParameters () ;
Distance : 6

196
Tree	final int problem = problem . cols ( length . getAllParameters () , final () ) ;
Code	final int problem = problem . cols ( length . getAllParameters () , final () ) ;
Distance : 10

197
Tree	final int [] [] cols = problem . getAllParameters ( Cartesian2D.ZERO ) ;
Code	final int [] [] cols = problem . getAllParameters ( Cartesian2D.ZERO ) ;
Distance : 6

198
Tree	final int problem = problem . getAllParameters () . length ;
Code	final int problem = problem . getAllParameters () . length ;
Distance : 2

199
Tree	final byte cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	final byte cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 4

========================================================================


========================================================================
Example Number: 52
Parent Code is: 
final BigDecimal [] out = new BigDecimal [ v.length ] ;
-------------------------------------------------------------------------------
Child code is: 
final BigDecimal [] out = new BigDecimal [ nRows ] ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (43 (801{val=BigDecimal})) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (43 (801{val=BigDecimal})) (221{val=[})) (40{val=v.length}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (43 (801{val=BigDecimal})) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (43 (801{val=BigDecimal})) (221{val=[})) (800{val=nRows}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/98/parent/src_java_org_apache_commons_math_linear_BigMatrixImpl.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 90
Correct
========================================================================
True

0
Tree	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 1

1
Tree	final BigDecimal [] out = new BigDecimal [] <> ;
Code	final BigDecimal [] out = new BigDecimal [] <> ;
Distance : 3

2
Tree	final BigDecimal [] out = new BigDecimal [] ++ ;
Code	final BigDecimal [] out = new BigDecimal [] ++ ;
Distance : 3

3
Tree	final BigDecimal [] out = new BigDecimal [] >= ;
Code	final BigDecimal [] out = new BigDecimal [] >= ;
Distance : 3

4
Tree	final BigDecimal [] out = new BigDecimal [] ^ ;
Code	final BigDecimal [] out = new BigDecimal [] ^ ;
Distance : 3

5
Tree	final BigDecimal [] out = new BigDecimal [] % ;
Code	final BigDecimal [] out = new BigDecimal [] % ;
Distance : 3

6
Tree	final BigDecimal [] out = new BigDecimal [] CHAR_CONS ;
Code	final BigDecimal [] out = new BigDecimal [] CHAR_CONS ;
Distance : 3

7
Tree	final BigDecimal [] out = new BigDecimal [] out ] ;
Code	final BigDecimal [] out = new BigDecimal [] out ] ;
Distance : 2

8
Tree	final BigDecimal [] out = new BigDecimal [] += ;
Code	final BigDecimal [] out = new BigDecimal [] += ;
Distance : 3

9
Tree	final BigDecimal [] out = new BigDecimal [] / ;
Code	final BigDecimal [] out = new BigDecimal [] / ;
Distance : 3

10
Tree	final BigDecimal [] out = nRows . isNaN ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . isNaN ( nRows , null ) ;
Distance : 7

11
Tree	final BigDecimal [] out = new BigDecimal [] += ] ;
Code	final BigDecimal [] out = new BigDecimal [] += ] ;
Distance : 2

12
Tree	final BigDecimal [] out = nRows . hashCode ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . hashCode ( nRows , null ) ;
Distance : 7

13
Tree	final BigDecimal [] out = new BigDecimal [] *= ] ;
Code	final BigDecimal [] out = new BigDecimal [] *= ] ;
Distance : 2

14
Tree	final BigDecimal [] out = new BigDecimal [] & ] ;
Code	final BigDecimal [] out = new BigDecimal [] & ] ;
Distance : 2

15
Tree	final BigDecimal [] out = new BigDecimal [] nRows ] ;
Code	final BigDecimal [] out = new BigDecimal [] nRows ] ;
Distance : 1

16
Tree	static BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	static BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 2

17
Tree	abstract BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	abstract BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 2

18
Tree	final BigDecimal [] out = new BigDecimal [ out ] ;
Code	final BigDecimal [] out = new BigDecimal [ out ] ;
Distance : 1

19
Tree	abstract BigDecimal [] nRows = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	abstract BigDecimal [] nRows = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 3

20
Tree	abstract BigDecimal [] out = new BigDecimal < nRows > [ NUMBER_CONSTANT ] ;
Code	abstract BigDecimal [] out = new BigDecimal < nRows > [ NUMBER_CONSTANT ] ;
Distance : 5

21
Tree	private BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	private BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 2

22
Tree	static BigDecimal [] out = new BigDecimal [] nRows ] ;
Code	static BigDecimal [] out = new BigDecimal [] nRows ] ;
Distance : 2

23
Tree	final BigDecimal [] out = out . nRows ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Code	final BigDecimal [] out = out . nRows ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Distance : 8

24
Tree	final BigDecimal [] out = nRows . is ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . is ( nRows , null ) ;
Distance : 7

25
Tree	final BigDecimal [] out = nRows . doubleToRawLongBits ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . doubleToRawLongBits ( nRows , null ) ;
Distance : 7

26
Tree	final BigDecimal [] out = out . getInstance ( nRows , null ) ;
Code	final BigDecimal [] out = out . getInstance ( nRows , null ) ;
Distance : 7

27
Tree	final BigDecimal [] out = nRows . getRowDimension ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . getRowDimension ( nRows , null ) ;
Distance : 7

28
Tree	synchronized BigDecimal [] out = new BigDecimal [ nRows ] ;
Code	synchronized BigDecimal [] out = new BigDecimal [ nRows ] ;
Distance : 1

29
Tree	final BigDecimal [] out = nRows . IEEEremainder ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . IEEEremainder ( nRows , null ) ;
Distance : 7

30
Tree	final BigDecimal [] out = nRows . nRows ( new BigDecimal [ NUMBER_CONSTANT ] , true ) ;
Code	final BigDecimal [] out = nRows . nRows ( new BigDecimal [ NUMBER_CONSTANT ] , true ) ;
Distance : 8

31
Tree	abstract BigDecimal [] out = new BigDecimal [] nRows ] ;
Code	abstract BigDecimal [] out = new BigDecimal [] nRows ] ;
Distance : 2

32
Tree	final BigDecimal [] out = nRows . lineSeparator ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . lineSeparator ( nRows , null ) ;
Distance : 7

33
Tree	final BigDecimal [] out = out . out ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Code	final BigDecimal [] out = out . out ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Distance : 8

34
Tree	final BigDecimal [] nRows = new BigDecimal [] out ] ;
Code	final BigDecimal [] nRows = new BigDecimal [] out ] ;
Distance : 3

35
Tree	final BigDecimal [] out = nRows . out ( new BigDecimal [ NUMBER_CONSTANT ] , true ) ;
Code	final BigDecimal [] out = nRows . out ( new BigDecimal [ NUMBER_CONSTANT ] , true ) ;
Distance : 8

36
Tree	private BigDecimal [] out = new BigDecimal [ nRows ] ;
Code	private BigDecimal [] out = new BigDecimal [ nRows ] ;
Distance : 1

37
Tree	private BigDecimal [] out = new BigDecimal [] out ] ;
Code	private BigDecimal [] out = new BigDecimal [] out ] ;
Distance : 3

38
Tree	final BigDecimal [] out = out . nRows ( new BigDecimal [ NUMBER_CONSTANT ] , true ) ;
Code	final BigDecimal [] out = out . nRows ( new BigDecimal [ NUMBER_CONSTANT ] , true ) ;
Distance : 8

39
Tree	public BigDecimal [] out = new BigDecimal [] out ] ;
Code	public BigDecimal [] out = new BigDecimal [] out ] ;
Distance : 3

40
Tree	final BigDecimal [] nRows = new BigDecimal [ nRows ] ;
Code	final BigDecimal [] nRows = new BigDecimal [ nRows ] ;
Distance : 1

41
Tree	static BigDecimal [] nRows = new BigDecimal [ v.length ] ;
Code	static BigDecimal [] nRows = new BigDecimal [ v.length ] ;
Distance : 3

42
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 1

43
Tree	static BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	static BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 2

44
Tree	abstract BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	abstract BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 2

45
Tree	private BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	private BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 2

46
Tree	final BigDecimal [] nRows = new BigDecimal [ v.length ] ;
Code	final BigDecimal [] nRows = new BigDecimal [ v.length ] ;
Distance : 2

47
Tree	final BigDecimal [] out = nRows . nRows ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Code	final BigDecimal [] out = nRows . nRows ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Distance : 8

48
Tree	public BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	public BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 2

49
Tree	protected BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	protected BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 2

50
Tree	synchronized BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	synchronized BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 2

51
Tree	public BigDecimal [] out = new BigDecimal [ nRows ] ;
Code	public BigDecimal [] out = new BigDecimal [ nRows ] ;
Distance : 1

52
Tree	static BigDecimal [] out = new BigDecimal < out > [ NUMBER_CONSTANT ] ;
Code	static BigDecimal [] out = new BigDecimal < out > [ NUMBER_CONSTANT ] ;
Distance : 5

53
Tree	static BigDecimal [] out = new BigDecimal [ out ] ;
Code	static BigDecimal [] out = new BigDecimal [ out ] ;
Distance : 2

54
Tree	final BigDecimal [] out = new BigDecimal < nRows > [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new BigDecimal < nRows > [ NUMBER_CONSTANT ] ;
Distance : 4

55
Tree	abstract BigDecimal [] nRows = new BigDecimal [ v.length ] ;
Code	abstract BigDecimal [] nRows = new BigDecimal [ v.length ] ;
Distance : 3

56
Tree	abstract BigDecimal [] out = new BigDecimal < out > [ NUMBER_CONSTANT ] ;
Code	abstract BigDecimal [] out = new BigDecimal < out > [ NUMBER_CONSTANT ] ;
Distance : 5

57
Tree	final BigDecimal [] out = nRows . out ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Code	final BigDecimal [] out = nRows . out ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Distance : 8

58
Tree	final BigDecimal [] out = out . out ( new BigDecimal [ NUMBER_CONSTANT ] , true ) ;
Code	final BigDecimal [] out = out . out ( new BigDecimal [ NUMBER_CONSTANT ] , true ) ;
Distance : 8

59
Tree	private BigDecimal [] out = new BigDecimal < nRows > [ NUMBER_CONSTANT ] ;
Code	private BigDecimal [] out = new BigDecimal < nRows > [ NUMBER_CONSTANT ] ;
Distance : 5

60
Tree	final BigDecimal [] nRows = new BigDecimal < nRows > [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] nRows = new BigDecimal < nRows > [ NUMBER_CONSTANT ] ;
Distance : 5

61
Tree	final BigDecimal [] nRows = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] nRows = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 2

62
Tree	public BigDecimal [] out = new BigDecimal < nRows > [ NUMBER_CONSTANT ] ;
Code	public BigDecimal [] out = new BigDecimal < nRows > [ NUMBER_CONSTANT ] ;
Distance : 5

63
Tree	static BigDecimal [] out = new BigDecimal < nRows > [ NUMBER_CONSTANT ] ;
Code	static BigDecimal [] out = new BigDecimal < nRows > [ NUMBER_CONSTANT ] ;
Distance : 5

64
Tree	static BigDecimal [] out = nRows . nRows ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Code	static BigDecimal [] out = nRows . nRows ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Distance : 9

65
Tree	protected BigDecimal [] out = new BigDecimal < nRows > [ NUMBER_CONSTANT ] ;
Code	protected BigDecimal [] out = new BigDecimal < nRows > [ NUMBER_CONSTANT ] ;
Distance : 5

66
Tree	private BigDecimal [] out = new BigDecimal [] nRows ] ;
Code	private BigDecimal [] out = new BigDecimal [] nRows ] ;
Distance : 2

67
Tree	final BigDecimal [] out = new BigDecimal [] super ;
Code	final BigDecimal [] out = new BigDecimal [] super ;
Distance : 3

68
Tree	final BigDecimal [] out = new BigDecimal [] & ;
Code	final BigDecimal [] out = new BigDecimal [] & ;
Distance : 3

69
Tree	final BigDecimal [] out = new BigDecimal [] / ] ;
Code	final BigDecimal [] out = new BigDecimal [] / ] ;
Distance : 2

70
Tree	final BigDecimal [] out = new BigDecimal [] ++ ] ;
Code	final BigDecimal [] out = new BigDecimal [] ++ ] ;
Distance : 2

71
Tree	final BigDecimal [] out = new BigDecimal [ nRows ] ;
Code	final BigDecimal [] out = new BigDecimal [ nRows ] ;
Distance : 0

72
Tree	final BigDecimal [] out = new BigDecimal [] <> ] ;
Code	final BigDecimal [] out = new BigDecimal [] <> ] ;
Distance : 2

73
Tree	final BigDecimal [] out = new BigDecimal [] >= ] ;
Code	final BigDecimal [] out = new BigDecimal [] >= ] ;
Distance : 2

74
Tree	final BigDecimal [] out = new BigDecimal [] % ] ;
Code	final BigDecimal [] out = new BigDecimal [] % ] ;
Distance : 2

75
Tree	static BigDecimal [] nRows = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	static BigDecimal [] nRows = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 3

76
Tree	final BigDecimal [] out = new BigDecimal [] ^ ] ;
Code	final BigDecimal [] out = new BigDecimal [] ^ ] ;
Distance : 2

77
Tree	final BigDecimal [] out = new BigDecimal [] super ] ;
Code	final BigDecimal [] out = new BigDecimal [] super ] ;
Distance : 2

78
Tree	public BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	public BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 2

79
Tree	static BigDecimal [] out = new BigDecimal [ nRows ] ;
Code	static BigDecimal [] out = new BigDecimal [ nRows ] ;
Distance : 1

80
Tree	static BigDecimal [] out = new BigDecimal [] out ] ;
Code	static BigDecimal [] out = new BigDecimal [] out ] ;
Distance : 3

81
Tree	protected BigDecimal [] out = new BigDecimal [ nRows ] ;
Code	protected BigDecimal [] out = new BigDecimal [ nRows ] ;
Distance : 1

82
Tree	protected BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	protected BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 2

83
Tree	final BigDecimal [] out = nRows . getInstance ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . getInstance ( nRows , null ) ;
Distance : 7

84
Tree	final BigDecimal [] out = new BigDecimal < out > [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new BigDecimal < out > [ NUMBER_CONSTANT ] ;
Distance : 4

85
Tree	abstract BigDecimal [] out = new BigDecimal [ nRows ] ;
Code	abstract BigDecimal [] out = new BigDecimal [ nRows ] ;
Distance : 1

86
Tree	synchronized BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	synchronized BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 2

87
Tree	abstract BigDecimal [] out = new BigDecimal [] out ] ;
Code	abstract BigDecimal [] out = new BigDecimal [] out ] ;
Distance : 3

88
Tree	final BigDecimal [] out = nRows . getDimension ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . getDimension ( nRows , null ) ;
Distance : 7

89
Tree	static BigDecimal [] out = nRows . out ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Code	static BigDecimal [] out = nRows . out ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Distance : 9

========================================================================


========================================================================
Example Number: 53
Parent Code is: 
final double [] out = new double [ v.length ] ;
-------------------------------------------------------------------------------
Child code is: 
final double [] out = new double [ nRows ] ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (39{val=double}) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (39{val=double}) (221{val=[})) (40{val=v.length}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (39{val=double}) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (39{val=double}) (221{val=[})) (800{val=nRows}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/98/parent/src_java_org_apache_commons_math_linear_RealMatrixImpl.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	final double [] out = out . abs ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . abs ( NUMBER_CONSTANT ) ;
Distance : 6

1
Tree	final double [] out = RealVector [ nRows ] . length () ;
Code	final double [] out = RealVector [ nRows ] . length () ;
Distance : 5

2
Tree	final double [] out = out . hashCode ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . hashCode ( NUMBER_CONSTANT ) ;
Distance : 6

3
Tree	final double [] out = FastMath [ nRows ] ;
Code	final double [] out = FastMath [ nRows ] ;
Distance : 2

4
Tree	final double [] out = MathArrays [ nRows ] ;
Code	final double [] out = MathArrays [ nRows ] ;
Distance : 2

5
Tree	final double [] out = Coordinates3D [ nRows ] . floatValue () ;
Code	final double [] out = Coordinates3D [ nRows ] . floatValue () ;
Distance : 5

6
Tree	final double [] out = new double [ out ] ;
Code	final double [] out = new double [ out ] ;
Distance : 1

7
Tree	final long [] out = STRING_CONSTANT + out ;
Code	final long [] out = STRING_CONSTANT + out ;
Distance : 6

8
Tree	final double [] out = return; ;
Code	final double [] out = return; ;
Distance : 5

9
Tree	final double [] out = continue; ;
Code	final double [] out = continue; ;
Distance : 5

10
Tree	final byte [] out = new double [ nRows ] ;
Code	final byte [] out = new double [ nRows ] ;
Distance : 1

11
Tree	final double [] out = new double [ nRows . min ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ nRows . min ( NUMBER_CONSTANT ) ] ;
Distance : 5

12
Tree	static double [] out = null ;
Code	static double [] out = null ;
Distance : 6

13
Tree	final double [] out = new long [ nRows ] ;
Code	final double [] out = new long [ nRows ] ;
Distance : 1

14
Tree	final double [] out = new double [ nRows . toLowerCase ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ nRows . toLowerCase ( NUMBER_CONSTANT ) ] ;
Distance : 5

15
Tree	final double [] out = new int [ v.length ] ;
Code	final double [] out = new int [ v.length ] ;
Distance : 2

16
Tree	final double [] out = new byte [ v.length ] ;
Code	final double [] out = new byte [ v.length ] ;
Distance : 2

17
Tree	final double [] out = y0 [ nRows ] . floatValue () ;
Code	final double [] out = y0 [ nRows ] . floatValue () ;
Distance : 5

18
Tree	final float [] out = {} ;
Code	final float [] out = {} ;
Distance : 6

19
Tree	final float [] out = new double [ v.length ] ;
Code	final float [] out = new double [ v.length ] ;
Distance : 2

20
Tree	final double [] out = RealVector [ nRows ] . floatValue () ;
Code	final double [] out = RealVector [ nRows ] . floatValue () ;
Distance : 5

21
Tree	final double [] out = nRows ;
Code	final double [] out = nRows ;
Distance : 4

22
Tree	final byte [] out = new double [ v.length ] ;
Code	final byte [] out = new double [ v.length ] ;
Distance : 2

23
Tree	final float [] out = null ;
Code	final float [] out = null ;
Distance : 6

24
Tree	final int [] out = new double [ nRows ] ;
Code	final int [] out = new double [ nRows ] ;
Distance : 1

25
Tree	final double [] out = / [ nRows ] ;
Code	final double [] out = / [ nRows ] ;
Distance : 2

26
Tree	final double [] out = out . abs ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = out . abs ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

27
Tree	final double [] out = out . getGeneratorUpperBounds ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . getGeneratorUpperBounds ( NUMBER_CONSTANT ) ;
Distance : 6

28
Tree	final byte [] out = null ;
Code	final byte [] out = null ;
Distance : 6

29
Tree	final double [] out = new double [ v.length ] ;
Code	final double [] out = new double [ v.length ] ;
Distance : 1

30
Tree	final double [] out = new double [ v.length () ] ;
Code	final double [] out = new double [ v.length () ] ;
Distance : 2

31
Tree	static double [] out = {} ;
Code	static double [] out = {} ;
Distance : 6

32
Tree	final double [] out = null ;
Code	final double [] out = null ;
Distance : 5

33
Tree	final double [] out = out . getDimension ( nRows , NUMBER_CONSTANT ) ;
Code	final double [] out = out . getDimension ( nRows , NUMBER_CONSTANT ) ;
Distance : 7

34
Tree	final double [] out = out . valueOf ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . valueOf ( NUMBER_CONSTANT ) ;
Distance : 6

35
Tree	final double [] out = out . size ( nRows , NUMBER_CONSTANT ) ;
Code	final double [] out = out . size ( nRows , NUMBER_CONSTANT ) ;
Distance : 7

36
Tree	final double [] out = TypeInferenceMode.CHECKED [ nRows ] ;
Code	final double [] out = TypeInferenceMode.CHECKED [ nRows ] ;
Distance : 2

37
Tree	final short [] out = {} ;
Code	final short [] out = {} ;
Distance : 6

38
Tree	final double [] out = out . getRowDimension ( nRows , NUMBER_CONSTANT ) ;
Code	final double [] out = out . getRowDimension ( nRows , NUMBER_CONSTANT ) ;
Distance : 7

39
Tree	final double [] out = nRows . abs ( NUMBER_CONSTANT ) ;
Code	final double [] out = nRows . abs ( NUMBER_CONSTANT ) ;
Distance : 6

40
Tree	final char [] out = {} ;
Code	final char [] out = {} ;
Distance : 6

41
Tree	final double [] out = out . clone ( nRows , NUMBER_CONSTANT ) ;
Code	final double [] out = out . clone ( nRows , NUMBER_CONSTANT ) ;
Distance : 7

42
Tree	static double [] out = STRING_CONSTANT + out ;
Code	static double [] out = STRING_CONSTANT + out ;
Distance : 6

43
Tree	final double [] out = new double [ getColumnDimension () ] ;
Code	final double [] out = new double [ getColumnDimension () ] ;
Distance : 2

44
Tree	final double [] out = nRows . hashCode ( nRows , NUMBER_CONSTANT ) ;
Code	final double [] out = nRows . hashCode ( nRows , NUMBER_CONSTANT ) ;
Distance : 7

45
Tree	final double [] out = Coordinates3D [ nRows ] . clone () ;
Code	final double [] out = Coordinates3D [ nRows ] . clone () ;
Distance : 5

46
Tree	final short [] out = STRING_CONSTANT + out ;
Code	final short [] out = STRING_CONSTANT + out ;
Distance : 6

47
Tree	final double [] [] ( final double . . . out ) { return out ; }
Code	final double [] [] ( final double . . . out ) { return out ; }
Distance : 12

48
Tree	final double [] out = new double [ omega () ] ;
Code	final double [] out = new double [ omega () ] ;
Distance : 2

49
Tree	final double [] out = out . size ( nRows , v.length ) ;
Code	final double [] out = out . size ( nRows , v.length ) ;
Distance : 7

50
Tree	final double [] out = out . getDimension ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . getDimension ( NUMBER_CONSTANT ) ;
Distance : 6

51
Tree	final double [] out = new double [ getDimension () ] ;
Code	final double [] out = new double [ getDimension () ] ;
Distance : 2

52
Tree	final double [] out = FastFourierTransformer [ nRows ] ;
Code	final double [] out = FastFourierTransformer [ nRows ] ;
Distance : 2

53
Tree	final int [] out = out ;
Code	final int [] out = out ;
Distance : 6

54
Tree	final double [] out = new double [ nRows . getDimension ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ nRows . getDimension ( NUMBER_CONSTANT ) ] ;
Distance : 5

55
Tree	final double [] out = out . out ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . out ( NUMBER_CONSTANT ) ;
Distance : 6

56
Tree	final double [] out = checkInitialize ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = checkInitialize ( out , NUMBER_CONSTANT ) ;
Distance : 6

57
Tree	final long [] out = new double [ v.length ] ;
Code	final long [] out = new double [ v.length ] ;
Distance : 2

58
Tree	final double [] out = new double [ / () ] ;
Code	final double [] out = new double [ / () ] ;
Distance : 2

59
Tree	final double [] out = out . getRowDimension ( nRows , v.length ) ;
Code	final double [] out = out . getRowDimension ( nRows , v.length ) ;
Distance : 7

60
Tree	final double [] out = out . clone ( nRows , v.length ) ;
Code	final double [] out = out . clone ( nRows , v.length ) ;
Distance : 7

61
Tree	final double [] out = point [ nRows ] ;
Code	final double [] out = point [ nRows ] ;
Distance : 2

62
Tree	final double [] out = nRows . hashCode ( nRows , v.length ) ;
Code	final double [] out = nRows . hashCode ( nRows , v.length ) ;
Distance : 7

63
Tree	final long [] out = out ;
Code	final long [] out = out ;
Distance : 6

64
Tree	final double [] out = out . getGeneratorUpperBounds ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = out . getGeneratorUpperBounds ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

65
Tree	final double [] out = new long [ v.length ] ;
Code	final double [] out = new long [ v.length ] ;
Distance : 2

66
Tree	final double [] out = round ( out ) ;
Code	final double [] out = round ( out ) ;
Distance : 5

67
Tree	final double [] out = out ;
Code	final double [] out = out ;
Distance : 5

68
Tree	final double [] out = out . hashCode ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = out . hashCode ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

69
Tree	final double [] out = super(); ;
Code	final double [] out = super(); ;
Distance : 5

70
Tree	final double [] out = findDomainAxisIndex ( out ) ;
Code	final double [] out = findDomainAxisIndex ( out ) ;
Distance : 5

71
Tree	final double [] out = new double [ nRows ] ;
Code	final double [] out = new double [ nRows ] ;
Distance : 0

72
Tree	final double [] out = concatenateSamples ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = concatenateSamples ( out , NUMBER_CONSTANT ) ;
Distance : 6

73
Tree	final double [] out = round ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = round ( out , NUMBER_CONSTANT ) ;
Distance : 6

74
Tree	final double [] out = out . size ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . size ( NUMBER_CONSTANT ) ;
Distance : 6

75
Tree	double [] out = out . hashCode () ;
Code	double [] out = out . hashCode () ;
Distance : 6

76
Tree	final double [] out = new double [ nRows . isNaN ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ nRows . isNaN ( NUMBER_CONSTANT ) ] ;
Distance : 5

77
Tree	final double [] out = new double [ nRows . hashCode ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ nRows . hashCode ( NUMBER_CONSTANT ) ] ;
Distance : 5

78
Tree	double [] out = out . getDimension () ;
Code	double [] out = out . getDimension () ;
Distance : 6

79
Tree	final long [] out = null ;
Code	final long [] out = null ;
Distance : 6

80
Tree	double [] out = out . abs () ;
Code	double [] out = out . abs () ;
Distance : 6

81
Tree	double [] out = out . getInstance () ;
Code	double [] out = out . getInstance () ;
Distance : 6

82
Tree	double [] out = out . getGeneratorUpperBounds () ;
Code	double [] out = out . getGeneratorUpperBounds () ;
Distance : 6

83
Tree	final int [] out = nRows ;
Code	final int [] out = nRows ;
Distance : 5

84
Tree	final long [] out = new double [ nRows ] ;
Code	final long [] out = new double [ nRows ] ;
Distance : 1

85
Tree	final boolean [] out = new double [ v.length ] ;
Code	final boolean [] out = new double [ v.length ] ;
Distance : 2

86
Tree	double [] out = out . IEEEremainder () ;
Code	double [] out = out . IEEEremainder () ;
Distance : 6

87
Tree	double [] out = out . valueOf () ;
Code	double [] out = out . valueOf () ;
Distance : 6

88
Tree	final double [] out = new double [ nRows . length ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ nRows . length ( NUMBER_CONSTANT ) ] ;
Distance : 5

89
Tree	final double [] out = out . valueOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = out . valueOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

90
Tree	final double [] out = getTypeInternal ( out ) ;
Code	final double [] out = getTypeInternal ( out ) ;
Distance : 5

91
Tree	final double [] out = new double [ nRows . floatValue ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ nRows . floatValue ( NUMBER_CONSTANT ) ] ;
Distance : 5

92
Tree	final double [] out = nRows . out ( NUMBER_CONSTANT ) ;
Code	final double [] out = nRows . out ( NUMBER_CONSTANT ) ;
Distance : 6

93
Tree	final int [] out = null ;
Code	final int [] out = null ;
Distance : 6

94
Tree	final double [] out = nRows . abs ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = nRows . abs ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

95
Tree	final float [] out = STRING_CONSTANT + out ;
Code	final float [] out = STRING_CONSTANT + out ;
Distance : 6

96
Tree	double [] out = out . currentTimeMillis () ;
Code	double [] out = out . currentTimeMillis () ;
Distance : 6

97
Tree	final int [] out = {} ;
Code	final int [] out = {} ;
Distance : 6

98
Tree	final double [] out = out . getDimension ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = out . getDimension ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

99
Tree	final boolean [] out = new double [ nRows ] ;
Code	final boolean [] out = new double [ nRows ] ;
Distance : 1

100
Tree	final byte [] out = STRING_CONSTANT + out ;
Code	final byte [] out = STRING_CONSTANT + out ;
Distance : 6

101
Tree	final double [] out = STRING_CONSTANT + nRows ;
Code	final double [] out = STRING_CONSTANT + nRows ;
Distance : 4

102
Tree	final double [] out = concatenateSamples ( out ) ;
Code	final double [] out = concatenateSamples ( out ) ;
Distance : 5

103
Tree	final double [] out = out . abs ( nRows , NUMBER_CONSTANT ) ;
Code	final double [] out = out . abs ( nRows , NUMBER_CONSTANT ) ;
Distance : 7

104
Tree	final boolean [] out = {} ;
Code	final boolean [] out = {} ;
Distance : 6

105
Tree	final double [] out = new double [ types () ] ;
Code	final double [] out = new double [ types () ] ;
Distance : 2

106
Tree	final double [] [] ( final int . . . out ) { return out ; }
Code	final double [] [] ( final int . . . out ) { return out ; }
Distance : 13

107
Tree	final double [] out = findDomainAxisIndex ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = findDomainAxisIndex ( out , NUMBER_CONSTANT ) ;
Distance : 6

108
Tree	final byte [] out = {} ;
Code	final byte [] out = {} ;
Distance : 6

109
Tree	final double [] out = RealVector [ nRows ] . clone () ;
Code	final double [] out = RealVector [ nRows ] . clone () ;
Distance : 5

110
Tree	final double [] out = out . hashCode ( nRows , NUMBER_CONSTANT ) ;
Code	final double [] out = out . hashCode ( nRows , NUMBER_CONSTANT ) ;
Distance : 7

111
Tree	final double [] out = {} ;
Code	final double [] out = {} ;
Distance : 5

112
Tree	final double [] out = STRING_CONSTANT + out ;
Code	final double [] out = STRING_CONSTANT + out ;
Distance : 5

113
Tree	final double [] out = FastMath [ nRows ] . length () ;
Code	final double [] out = FastMath [ nRows ] . length () ;
Distance : 5

114
Tree	final double [] out = getTypeInternal ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = getTypeInternal ( out , NUMBER_CONSTANT ) ;
Distance : 6

115
Tree	final double [] out = out . getRowDimension ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . getRowDimension ( NUMBER_CONSTANT ) ;
Distance : 6

116
Tree	final double [] out = getTickLength ( out ) ;
Code	final double [] out = getTickLength ( out ) ;
Distance : 5

117
Tree	final double [] out = out . size ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = out . size ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

118
Tree	final double [] out = new double [ ceil () ] ;
Code	final double [] out = new double [ ceil () ] ;
Distance : 2

119
Tree	final boolean [] out = STRING_CONSTANT + out ;
Code	final boolean [] out = STRING_CONSTANT + out ;
Distance : 6

120
Tree	final double [] out = computeObjectiveValue ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = computeObjectiveValue ( out , NUMBER_CONSTANT ) ;
Distance : 6

121
Tree	final double [] out = out . getGeneratorUpperBounds ( nRows , NUMBER_CONSTANT ) ;
Code	final double [] out = out . getGeneratorUpperBounds ( nRows , NUMBER_CONSTANT ) ;
Distance : 7

122
Tree	final double [] out = out . valueOf ( nRows , NUMBER_CONSTANT ) ;
Code	final double [] out = out . valueOf ( nRows , NUMBER_CONSTANT ) ;
Distance : 7

123
Tree	final double [] createIllegalArgumentException ( final double . . . out ) { return out ; }
Code	final double [] createIllegalArgumentException ( final double . . . out ) { return out ; }
Distance : 12

124
Tree	final double [] out = new double [ f.length () ] ;
Code	final double [] out = new double [ f.length () ] ;
Distance : 2

125
Tree	final double [] out = out . clone ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . clone ( NUMBER_CONSTANT ) ;
Distance : 6

126
Tree	final double [] out = new double [ fitness () ] ;
Code	final double [] out = new double [ fitness () ] ;
Distance : 2

127
Tree	final double [] out = nRows . hashCode ( NUMBER_CONSTANT ) ;
Code	final double [] out = nRows . hashCode ( NUMBER_CONSTANT ) ;
Distance : 6

128
Tree	final double [] out = getTickLength ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = getTickLength ( out , NUMBER_CONSTANT ) ;
Distance : 6

129
Tree	final double [] log ( final double . . . out ) { return out ; }
Code	final double [] log ( final double . . . out ) { return out ; }
Distance : 12

130
Tree	final double [] out = computeObjectiveValue ( out ) ;
Code	final double [] out = computeObjectiveValue ( out ) ;
Distance : 5

131
Tree	final int [] out = STRING_CONSTANT + out ;
Code	final int [] out = STRING_CONSTANT + out ;
Distance : 6

132
Tree	final int [] out = new double [ v.length ] ;
Code	final int [] out = new double [ v.length ] ;
Distance : 2

133
Tree	final double [] setUp ( final double . . . out ) { return out ; }
Code	final double [] setUp ( final double . . . out ) { return out ; }
Distance : 12

134
Tree	final char [] out = STRING_CONSTANT + out ;
Code	final char [] out = STRING_CONSTANT + out ;
Distance : 6

135
Tree	final double [] out = out . abs ( nRows , v.length ) ;
Code	final double [] out = out . abs ( nRows , v.length ) ;
Distance : 7

136
Tree	final double [] out = getDimension ( out ) ;
Code	final double [] out = getDimension ( out ) ;
Distance : 5

137
Tree	final double [] out = out . nRows ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . nRows ( NUMBER_CONSTANT ) ;
Distance : 6

138
Tree	final double [] computeOmega ( final double . . . out ) { return out ; }
Code	final double [] computeOmega ( final double . . . out ) { return out ; }
Distance : 12

139
Tree	final double [] -= ( final double . . . out ) { return out ; }
Code	final double [] -= ( final double . . . out ) { return out ; }
Distance : 12

140
Tree	final double [] out = out . abs () ;
Code	final double [] out = out . abs () ;
Distance : 5

141
Tree	final double [] out = out . hashCode ( nRows , v.length ) ;
Code	final double [] out = out . hashCode ( nRows , v.length ) ;
Distance : 7

142
Tree	final double [] out = getColumnDimension ( out ) ;
Code	final double [] out = getColumnDimension ( out ) ;
Distance : 5

143
Tree	final double [] out = hashCode ( out ) ;
Code	final double [] out = hashCode ( out ) ;
Distance : 5

144
Tree	abstract double [] out = {} ;
Code	abstract double [] out = {} ;
Distance : 6

145
Tree	final double [] out = out . hashCode () ;
Code	final double [] out = out . hashCode () ;
Distance : 5

146
Tree	final double [] out = out . getGeneratorUpperBounds ( nRows , v.length ) ;
Code	final double [] out = out . getGeneratorUpperBounds ( nRows , v.length ) ;
Distance : 7

147
Tree	final double [] out = getDimension ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = getDimension ( out , NUMBER_CONSTANT ) ;
Distance : 6

148
Tree	final double [] out = out . valueOf ( nRows , v.length ) ;
Code	final double [] out = out . valueOf ( nRows , v.length ) ;
Distance : 7

149
Tree	final double [] out = checkInitialize ( out ) ;
Code	final double [] out = checkInitialize ( out ) ;
Distance : 5

150
Tree	final double [] out = nRows . abs ( nRows , v.length ) ;
Code	final double [] out = nRows . abs ( nRows , v.length ) ;
Distance : 7

151
Tree	final double [] *= ( final double . . . out ) { return out ; }
Code	final double [] *= ( final double . . . out ) { return out ; }
Distance : 12

152
Tree	final double [] out = Coordinates3D [ nRows ] ;
Code	final double [] out = Coordinates3D [ nRows ] ;
Distance : 2

153
Tree	final double [] out = nRows . abs ( nRows , NUMBER_CONSTANT ) ;
Code	final double [] out = nRows . abs ( nRows , NUMBER_CONSTANT ) ;
Distance : 7

154
Tree	final double [] out = y0 [ nRows ] ;
Code	final double [] out = y0 [ nRows ] ;
Distance : 2

155
Tree	final double [] out = getColumnDimension ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = getColumnDimension ( out , NUMBER_CONSTANT ) ;
Distance : 6

156
Tree	final double [] out = hashCode ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = hashCode ( out , NUMBER_CONSTANT ) ;
Distance : 6

157
Tree	final double [] out = out . getDimension ( nRows , v.length ) ;
Code	final double [] out = out . getDimension ( nRows , v.length ) ;
Distance : 7

158
Tree	final double [] out = RealVector [ nRows ] ;
Code	final double [] out = RealVector [ nRows ] ;
Distance : 2

159
Tree	final double [] out = nRows . nRows ( NUMBER_CONSTANT ) ;
Code	final double [] out = nRows . nRows ( NUMBER_CONSTANT ) ;
Distance : 6

160
Tree	final double [] out = out . getGeneratorUpperBounds () ;
Code	final double [] out = out . getGeneratorUpperBounds () ;
Distance : 5

161
Tree	final double [] += ( final double . . . out ) { return out ; }
Code	final double [] += ( final double . . . out ) { return out ; }
Distance : 12

162
Tree	final float [] out = out ;
Code	final float [] out = out ;
Distance : 6

163
Tree	final byte [] out = out ;
Code	final byte [] out = out ;
Distance : 6

164
Tree	final float [] out = nRows ;
Code	final float [] out = nRows ;
Distance : 5

165
Tree	final double [] out = out . valueOf () ;
Code	final double [] out = out . valueOf () ;
Distance : 5

166
Tree	final byte [] out = nRows ;
Code	final byte [] out = nRows ;
Distance : 5

167
Tree	final int [] out = out . nRows ( NUMBER_CONSTANT ) ;
Code	final int [] out = out . nRows ( NUMBER_CONSTANT ) ;
Distance : 7

168
Tree	final long [] out = out . nRows ( NUMBER_CONSTANT ) ;
Code	final long [] out = out . nRows ( NUMBER_CONSTANT ) ;
Distance : 7

169
Tree	final int [] out = nRows . nRows ( NUMBER_CONSTANT ) ;
Code	final int [] out = nRows . nRows ( NUMBER_CONSTANT ) ;
Distance : 7

170
Tree	final double [] out = nRows . abs () ;
Code	final double [] out = nRows . abs () ;
Distance : 5

171
Tree	final int [] out = out . out ( NUMBER_CONSTANT ) ;
Code	final int [] out = out . out ( NUMBER_CONSTANT ) ;
Distance : 7

172
Tree	final double [] out = new double [ nRows . size ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ nRows . size ( NUMBER_CONSTANT ) ] ;
Distance : 5

173
Tree	final double [] out = new double [ nRows . intValue ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ nRows . intValue ( NUMBER_CONSTANT ) ] ;
Distance : 5

174
Tree	final double [] out = FunctionUtils [ nRows ] ;
Code	final double [] out = FunctionUtils [ nRows ] ;
Distance : 2

175
Tree	final double [] out = out . getDimension () ;
Code	final double [] out = out . getDimension () ;
Distance : 5

176
Tree	final long [] out = nRows . nRows ( NUMBER_CONSTANT ) ;
Code	final long [] out = nRows . nRows ( NUMBER_CONSTANT ) ;
Distance : 7

177
Tree	final long [] out = out . out ( NUMBER_CONSTANT ) ;
Code	final long [] out = out . out ( NUMBER_CONSTANT ) ;
Distance : 7

178
Tree	final double [] out = out . size () ;
Code	final double [] out = out . size () ;
Distance : 5

179
Tree	final double [] check ( final double . . . out ) { return out ; }
Code	final double [] check ( final double . . . out ) { return out ; }
Distance : 12

180
Tree	final double [] out = out . getRowDimension () ;
Code	final double [] out = out . getRowDimension () ;
Distance : 5

181
Tree	final double [] out = out . clone () ;
Code	final double [] out = out . clone () ;
Distance : 5

182
Tree	final double [] out = out . getRowDimension ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = out . getRowDimension ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

183
Tree	double [] out = out . clone () ;
Code	double [] out = out . clone () ;
Distance : 6

184
Tree	final double [] out = nRows . hashCode () ;
Code	final double [] out = nRows . hashCode () ;
Distance : 5

185
Tree	final double [] out = out . clone ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = out . clone ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

186
Tree	final double [] out = new double [ getRowDimension () ] ;
Code	final double [] out = new double [ getRowDimension () ] ;
Distance : 2

187
Tree	final double [] out = y0 [ nRows ] . clone () ;
Code	final double [] out = y0 [ nRows ] . clone () ;
Distance : 5

188
Tree	final double [] out = Coordinates3D [ nRows ] . length () ;
Code	final double [] out = Coordinates3D [ nRows ] . length () ;
Distance : 5

189
Tree	final double [] out = nRows . hashCode ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = nRows . hashCode ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

190
Tree	double [] out = out . is () ;
Code	double [] out = out . is () ;
Distance : 6

191
Tree	final long [] out = nRows ;
Code	final long [] out = nRows ;
Distance : 5

192
Tree	final double [] out = new char [ v.length ] ;
Code	final double [] out = new char [ v.length ] ;
Distance : 2

193
Tree	final double [] out = new int [ nRows ] ;
Code	final double [] out = new int [ nRows ] ;
Distance : 1

194
Tree	final double [] out = new byte [ nRows ] ;
Code	final double [] out = new byte [ nRows ] ;
Distance : 1

195
Tree	final double [] out = y0 [ nRows ] . length () ;
Code	final double [] out = y0 [ nRows ] . length () ;
Distance : 5

196
Tree	final long [] out = {} ;
Code	final long [] out = {} ;
Distance : 6

197
Tree	final double [] out = new double [ nRows . IEEEremainder ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ nRows . IEEEremainder ( NUMBER_CONSTANT ) ] ;
Distance : 5

198
Tree	final float [] out = new double [ nRows ] ;
Code	final float [] out = new double [ nRows ] ;
Distance : 1

199
Tree	final boolean [] out = null ;
Code	final boolean [] out = null ;
Distance : 6

========================================================================


========================================================================
Example Number: 54
Parent Code is: 
int start = getNumObjectiveFunctions () ;
-------------------------------------------------------------------------------
Child code is: 
int start = ignoreObjectiveRows ? getNumObjectiveFunctions () : NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=start}) (204{val==}) (32 (802{val=getNumObjectiveFunctions}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=start}) (204{val==}) (16 (800{val=ignoreObjectiveRows}) (233{val=?}) (32 (802{val=getNumObjectiveFunctions}) (216{val=()})) (226{val=:}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/83/parent/src_main_java_org_apache_commons_math_optimization_linear_SimplexTableau.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	double start = this . start ;
Code	double start = this . start ;
Distance : 7

1
Tree	int start = source.contractionCriterion ;
Code	int start = source.contractionCriterion ;
Distance : 6

2
Tree	int start = default: ;
Code	int start = default: ;
Distance : 6

3
Tree	char [] ;
Code	char [] ;
Distance : 9

4
Tree	final String [] start ;
Code	final String [] start ;
Distance : 9

5
Tree	final UnivariateStatistic [] start ;
Code	final UnivariateStatistic [] start ;
Distance : 9

6
Tree	final Outer [] start ;
Code	final Outer [] start ;
Distance : 9

7
Tree	public int start ;
Code	public int start ;
Distance : 8

8
Tree	Coordinates3D [] start = getNumObjectiveFunctions () ;
Code	Coordinates3D [] start = getNumObjectiveFunctions () ;
Distance : 6

9
Tree	InvocationImpl [] start = getNumObjectiveFunctions () ;
Code	InvocationImpl [] start = getNumObjectiveFunctions () ;
Distance : 6

10
Tree	final long start = getNumObjectiveFunctions () ;
Code	final long start = getNumObjectiveFunctions () ;
Distance : 6

11
Tree	long start = getNumObjectiveFunctions () ;
Code	long start = getNumObjectiveFunctions () ;
Distance : 5

12
Tree	Date [] start = getNumObjectiveFunctions () ;
Code	Date [] start = getNumObjectiveFunctions () ;
Distance : 6

13
Tree	int start = Sigmoid ;
Code	int start = Sigmoid ;
Distance : 6

14
Tree	boolean start = getNumObjectiveFunctions () ;
Code	boolean start = getNumObjectiveFunctions () ;
Distance : 5

15
Tree	char start = getNumObjectiveFunctions () ;
Code	char start = getNumObjectiveFunctions () ;
Distance : 5

16
Tree	final PolygonsSet [] start ;
Code	final PolygonsSet [] start ;
Distance : 9

17
Tree	int % ;
Code	int % ;
Distance : 8

18
Tree	final Object [] start = getNumObjectiveFunctions () ;
Code	final Object [] start = getNumObjectiveFunctions () ;
Distance : 7

19
Tree	final float start = getNumObjectiveFunctions () ;
Code	final float start = getNumObjectiveFunctions () ;
Distance : 6

20
Tree	double [] start = getNumObjectiveFunctions () ;
Code	double [] start = getNumObjectiveFunctions () ;
Distance : 6

21
Tree	Object [] start = getNumObjectiveFunctions () ;
Code	Object [] start = getNumObjectiveFunctions () ;
Distance : 6

22
Tree	final char start ;
Code	final char start ;
Distance : 9

23
Tree	char start = getNumObjectiveFunctions ;
Code	char start = getNumObjectiveFunctions ;
Distance : 6

24
Tree	int start = getNumObjectiveFunctions + NUMBER_CONSTANT ;
Code	int start = getNumObjectiveFunctions + NUMBER_CONSTANT ;
Distance : 4

25
Tree	final [] start = getNumObjectiveFunctions () ;
Code	final [] start = getNumObjectiveFunctions () ;
Distance : 6

26
Tree	byte start = getNumObjectiveFunctions ;
Code	byte start = getNumObjectiveFunctions ;
Distance : 6

27
Tree	int start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	int start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 3

28
Tree	final int start = start ;
Code	final int start = start ;
Distance : 7

29
Tree	final MathIllegalArgumentException [] start ;
Code	final MathIllegalArgumentException [] start ;
Distance : 9

30
Tree	double start = getNumObjectiveFunctions () ;
Code	double start = getNumObjectiveFunctions () ;
Distance : 5

31
Tree	final Date [] start = getNumObjectiveFunctions () ;
Code	final Date [] start = getNumObjectiveFunctions () ;
Distance : 7

32
Tree	byte start = NUMBER_CONSTANT ;
Code	byte start = NUMBER_CONSTANT ;
Distance : 6

33
Tree	final double start = getNumObjectiveFunctions () ;
Code	final double start = getNumObjectiveFunctions () ;
Distance : 6

34
Tree	int start = coefficients.length ;
Code	int start = coefficients.length ;
Distance : 6

35
Tree	final short start = getNumObjectiveFunctions () ;
Code	final short start = getNumObjectiveFunctions () ;
Distance : 6

36
Tree	final MutableFloat [] start = getNumObjectiveFunctions () ;
Code	final MutableFloat [] start = getNumObjectiveFunctions () ;
Distance : 7

37
Tree	final short start ;
Code	final short start ;
Distance : 9

38
Tree	int start = FACT.length ;
Code	int start = FACT.length ;
Distance : 6

39
Tree	public start < start > start = getNumObjectiveFunctions () ;
Code	public start < start > start = getNumObjectiveFunctions () ;
Distance : 8

40
Tree	int start = start + NUMBER_CONSTANT ;
Code	int start = start + NUMBER_CONSTANT ;
Distance : 5

41
Tree	final String [] start = getNumObjectiveFunctions () ;
Code	final String [] start = getNumObjectiveFunctions () ;
Distance : 7

42
Tree	long start = start ;
Code	long start = start ;
Distance : 7

43
Tree	static start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Code	static start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Distance : 8

44
Tree	final byte start = getNumObjectiveFunctions ;
Code	final byte start = getNumObjectiveFunctions ;
Distance : 7

45
Tree	final UnivariateStatistic [] start = getNumObjectiveFunctions () ;
Code	final UnivariateStatistic [] start = getNumObjectiveFunctions () ;
Distance : 7

46
Tree	void start = this . start ;
Code	void start = this . start ;
Distance : 7

47
Tree	final Outer [] start = getNumObjectiveFunctions () ;
Code	final Outer [] start = getNumObjectiveFunctions () ;
Distance : 7

48
Tree	static start < start > start = getNumObjectiveFunctions () ;
Code	static start < start > start = getNumObjectiveFunctions () ;
Distance : 8

49
Tree	start start = getNumObjectiveFunctions () ;
Code	start start = getNumObjectiveFunctions () ;
Distance : 5

50
Tree	public int start = getNumObjectiveFunctions () ;
Code	public int start = getNumObjectiveFunctions () ;
Distance : 5

51
Tree	int start = val.length ;
Code	int start = val.length ;
Distance : 6

52
Tree	abstract int start ;
Code	abstract int start ;
Distance : 8

53
Tree	boolean start = this . start ;
Code	boolean start = this . start ;
Distance : 7

54
Tree	char start = this . start ;
Code	char start = this . start ;
Distance : 7

55
Tree	int start = chars.length ;
Code	int start = chars.length ;
Distance : 6

56
Tree	long [] ;
Code	long [] ;
Distance : 9

57
Tree	int start = getNumObjectiveFunctions () . start ;
Code	int start = getNumObjectiveFunctions () . start ;
Distance : 4

58
Tree	boolean [] ;
Code	boolean [] ;
Distance : 9

59
Tree	final Coordinates3D [] start = getNumObjectiveFunctions () ;
Code	final Coordinates3D [] start = getNumObjectiveFunctions () ;
Distance : 7

60
Tree	void [] start = getNumObjectiveFunctions () ;
Code	void [] start = getNumObjectiveFunctions () ;
Distance : 6

61
Tree	final PolygonsSet [] start = getNumObjectiveFunctions () ;
Code	final PolygonsSet [] start = getNumObjectiveFunctions () ;
Distance : 7

62
Tree	start start = getNumObjectiveFunctions () ;
Code	start start = getNumObjectiveFunctions () ;
Distance : 5

63
Tree	final double start ;
Code	final double start ;
Distance : 9

64
Tree	boolean start = start ;
Code	boolean start = start ;
Distance : 7

65
Tree	int [] start = getNumObjectiveFunctions () ;
Code	int [] start = getNumObjectiveFunctions () ;
Distance : 5

66
Tree	start start = getNumObjectiveFunctions () ; source
Code	start start = getNumObjectiveFunctions () ; source
Distance : 6

67
Tree	final int start = getNumObjectiveFunctions () ;
Code	final int start = getNumObjectiveFunctions () ;
Distance : 5

68
Tree	byte start = this . start ;
Code	byte start = this . start ;
Distance : 7

69
Tree	short start = NUMBER_CONSTANT ;
Code	short start = NUMBER_CONSTANT ;
Distance : 6

70
Tree	final byte start = getNumObjectiveFunctions () ;
Code	final byte start = getNumObjectiveFunctions () ;
Distance : 6

71
Tree	int start = start ;
Code	int start = start ;
Distance : 6

72
Tree	MutableFloat [] start = getNumObjectiveFunctions () ;
Code	MutableFloat [] start = getNumObjectiveFunctions () ;
Distance : 6

73
Tree	final boolean start = getNumObjectiveFunctions ;
Code	final boolean start = getNumObjectiveFunctions ;
Distance : 7

74
Tree	start start = getNumObjectiveFunctions () ; options
Code	start start = getNumObjectiveFunctions () ; options
Distance : 6

75
Tree	double start = getNumObjectiveFunctions + NUMBER_CONSTANT ;
Code	double start = getNumObjectiveFunctions + NUMBER_CONSTANT ;
Distance : 5

76
Tree	Coordinates2D [] start = getNumObjectiveFunctions () ;
Code	Coordinates2D [] start = getNumObjectiveFunctions () ;
Distance : 6

77
Tree	ReadablePartial [] start = getNumObjectiveFunctions () ;
Code	ReadablePartial [] start = getNumObjectiveFunctions () ;
Distance : 6

78
Tree	final double start = getNumObjectiveFunctions ;
Code	final double start = getNumObjectiveFunctions ;
Distance : 7

79
Tree	start start = getNumObjectiveFunctions () ; p
Code	start start = getNumObjectiveFunctions () ; p
Distance : 6

80
Tree	final boolean start = getNumObjectiveFunctions () ;
Code	final boolean start = getNumObjectiveFunctions () ;
Distance : 6

81
Tree	int start = problem.a ;
Code	int start = problem.a ;
Distance : 6

82
Tree	short start = getNumObjectiveFunctions () ;
Code	short start = getNumObjectiveFunctions () ;
Distance : 5

83
Tree	abstract int start = getNumObjectiveFunctions () ;
Code	abstract int start = getNumObjectiveFunctions () ;
Distance : 5

84
Tree	byte start = getNumObjectiveFunctions () ;
Code	byte start = getNumObjectiveFunctions () ;
Distance : 5

85
Tree	float start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	float start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 4

86
Tree	start start = getNumObjectiveFunctions () ; &&
Code	start start = getNumObjectiveFunctions () ; &&
Distance : 6

87
Tree	TDistribution [] start = getNumObjectiveFunctions () ;
Code	TDistribution [] start = getNumObjectiveFunctions () ;
Distance : 6

88
Tree	double start = start + NUMBER_CONSTANT ;
Code	double start = start + NUMBER_CONSTANT ;
Distance : 6

89
Tree	float start ;
Code	float start ;
Distance : 8

90
Tree	final MathIllegalArgumentException [] start = getNumObjectiveFunctions () ;
Code	final MathIllegalArgumentException [] start = getNumObjectiveFunctions () ;
Distance : 7

91
Tree	long start = getNumObjectiveFunctions + NUMBER_CONSTANT ;
Code	long start = getNumObjectiveFunctions + NUMBER_CONSTANT ;
Distance : 5

92
Tree	void start ;
Code	void start ;
Distance : 8

93
Tree	boolean start = getNumObjectiveFunctions + NUMBER_CONSTANT ;
Code	boolean start = getNumObjectiveFunctions + NUMBER_CONSTANT ;
Distance : 5

94
Tree	int start = break; ;
Code	int start = break; ;
Distance : 6

95
Tree	char start = getNumObjectiveFunctions + NUMBER_CONSTANT ;
Code	char start = getNumObjectiveFunctions + NUMBER_CONSTANT ;
Distance : 5

96
Tree	final char start = getNumObjectiveFunctions () ;
Code	final char start = getNumObjectiveFunctions () ;
Distance : 6

97
Tree	long start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	long start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 4

98
Tree	double start = getNumObjectiveFunctions ;
Code	double start = getNumObjectiveFunctions ;
Distance : 6

99
Tree	double start = continue; ;
Code	double start = continue; ;
Distance : 7

100
Tree	double start = super(); ;
Code	double start = super(); ;
Distance : 7

101
Tree	boolean start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	boolean start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 4

102
Tree	int start = Cartesian2D.NEGATIVE_INFINITY ;
Code	int start = Cartesian2D.NEGATIVE_INFINITY ;
Distance : 6

103
Tree	int start = getNumObjectiveFunctions () ;
Code	int start = getNumObjectiveFunctions () ;
Distance : 4

104
Tree	final ResizableDoubleArray [] start ;
Code	final ResizableDoubleArray [] start ;
Distance : 9

105
Tree	byte start = getNumObjectiveFunctions + NUMBER_CONSTANT ;
Code	byte start = getNumObjectiveFunctions + NUMBER_CONSTANT ;
Distance : 5

106
Tree	int start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	int start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 3

107
Tree	char start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	char start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 4

108
Tree	final char start = getNumObjectiveFunctions ;
Code	final char start = getNumObjectiveFunctions ;
Distance : 7

109
Tree	final double start = start ;
Code	final double start = start ;
Distance : 8

110
Tree	long start ;
Code	long start ;
Distance : 8

111
Tree	start start = getNumObjectiveFunctions () ; toString
Code	start start = getNumObjectiveFunctions () ; toString
Distance : 6

112
Tree	int start ;
Code	int start ;
Distance : 7

113
Tree	final ResizableDoubleArray [] start = getNumObjectiveFunctions () ;
Code	final ResizableDoubleArray [] start = getNumObjectiveFunctions () ;
Distance : 7

114
Tree	final float start ;
Code	final float start ;
Distance : 9

115
Tree	start start = getNumObjectiveFunctions () ;
Code	start start = getNumObjectiveFunctions () ;
Distance : 5

116
Tree	Double [] start = getNumObjectiveFunctions () ;
Code	Double [] start = getNumObjectiveFunctions () ;
Distance : 6

117
Tree	void start = NUMBER_CONSTANT ;
Code	void start = NUMBER_CONSTANT ;
Distance : 6

118
Tree	start start = getNumObjectiveFunctions () ;
Code	start start = getNumObjectiveFunctions () ;
Distance : 5

119
Tree	long start = null ;
Code	long start = null ;
Distance : 7

120
Tree	final start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Code	final start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Distance : 8

121
Tree	final start < start > start = getNumObjectiveFunctions () ;
Code	final start < start > start = getNumObjectiveFunctions () ;
Distance : 8

122
Tree	boolean start ;
Code	boolean start ;
Distance : 8

123
Tree	double start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	double start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 4

124
Tree	int [] start = getNumObjectiveFunctions () ;
Code	int [] start = getNumObjectiveFunctions () ;
Distance : 5

125
Tree	final long start = start ;
Code	final long start = start ;
Distance : 8

126
Tree	int start = getNumObjectiveFunctions ;
Code	int start = getNumObjectiveFunctions ;
Distance : 5

127
Tree	boolean start = null ;
Code	boolean start = null ;
Distance : 7

128
Tree	float start = NUMBER_CONSTANT ;
Code	float start = NUMBER_CONSTANT ;
Distance : 6

129
Tree	char start ;
Code	char start ;
Distance : 8

130
Tree	float [] start = getNumObjectiveFunctions () ;
Code	float [] start = getNumObjectiveFunctions () ;
Distance : 6

131
Tree	abstract start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Code	abstract start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Distance : 8

132
Tree	double start = getNumObjectiveFunctions () . getNumObjectiveFunctions ;
Code	double start = getNumObjectiveFunctions () . getNumObjectiveFunctions ;
Distance : 5

133
Tree	abstract start < start > start = getNumObjectiveFunctions () ;
Code	abstract start < start > start = getNumObjectiveFunctions () ;
Distance : 8

134
Tree	final byte start = start ;
Code	final byte start = start ;
Distance : 8

135
Tree	int /= ;
Code	int /= ;
Distance : 8

136
Tree	start start = getNumObjectiveFunctions () ; T
Code	start start = getNumObjectiveFunctions () ; T
Distance : 6

137
Tree	short start ;
Code	short start ;
Distance : 8

138
Tree	int start = continue; ;
Code	int start = continue; ;
Distance : 6

139
Tree	byte start ;
Code	byte start ;
Distance : 8

140
Tree	final Date [] start ;
Code	final Date [] start ;
Distance : 9

141
Tree	long start = getNumObjectiveFunctions () . start ;
Code	long start = getNumObjectiveFunctions () . start ;
Distance : 5

142
Tree	short start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	short start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 4

143
Tree	float start = this . start ;
Code	float start = this . start ;
Distance : 7

144
Tree	public start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Code	public start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Distance : 8

145
Tree	final long start ;
Code	final long start ;
Distance : 9

146
Tree	final byte start ;
Code	final byte start ;
Distance : 9

147
Tree	final boolean start ;
Code	final boolean start ;
Distance : 9

148
Tree	int start = getNumObjectiveFunctions () ;
Code	int start = getNumObjectiveFunctions () ;
Distance : 4

149
Tree	boolean start = getNumObjectiveFunctions () . start ;
Code	boolean start = getNumObjectiveFunctions () . start ;
Distance : 5

150
Tree	int start ;
Code	int start ;
Distance : 7

151
Tree	byte start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	byte start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 4

152
Tree	int start = NUMBER_CONSTANT ;
Code	int start = NUMBER_CONSTANT ;
Distance : 5

153
Tree	int [] ;
Code	int [] ;
Distance : 8

154
Tree	long start = NUMBER_CONSTANT ;
Code	long start = NUMBER_CONSTANT ;
Distance : 6

155
Tree	double start ;
Code	double start ;
Distance : 8

156
Tree	double start = NUMBER_CONSTANT ;
Code	double start = NUMBER_CONSTANT ;
Distance : 6

157
Tree	long [] start = getNumObjectiveFunctions () ;
Code	long [] start = getNumObjectiveFunctions () ;
Distance : 6

158
Tree	double start = start ;
Code	double start = start ;
Distance : 7

159
Tree	int start = super(); ;
Code	int start = super(); ;
Distance : 6

160
Tree	boolean start = NUMBER_CONSTANT ;
Code	boolean start = NUMBER_CONSTANT ;
Distance : 6

161
Tree	int start = set.length ;
Code	int start = set.length ;
Distance : 6

162
Tree	float start = getNumObjectiveFunctions () ;
Code	float start = getNumObjectiveFunctions () ;
Distance : 5

163
Tree	boolean [] start = getNumObjectiveFunctions () ;
Code	boolean [] start = getNumObjectiveFunctions () ;
Distance : 6

164
Tree	final Object [] start ;
Code	final Object [] start ;
Distance : 9

165
Tree	char start = NUMBER_CONSTANT ;
Code	char start = NUMBER_CONSTANT ;
Distance : 6

166
Tree	final MutableFloat [] start ;
Code	final MutableFloat [] start ;
Distance : 9

167
Tree	void start = getNumObjectiveFunctions () ;
Code	void start = getNumObjectiveFunctions () ;
Distance : 5

168
Tree	int += ;
Code	int += ;
Distance : 8

169
Tree	final Coordinates3D [] start ;
Code	final Coordinates3D [] start ;
Distance : 9

170
Tree	char [] start = getNumObjectiveFunctions () ;
Code	char [] start = getNumObjectiveFunctions () ;
Distance : 6

171
Tree	double start = null ;
Code	double start = null ;
Distance : 7

172
Tree	final int start = getNumObjectiveFunctions ;
Code	final int start = getNumObjectiveFunctions ;
Distance : 6

173
Tree	int start = null ;
Code	int start = null ;
Distance : 6

174
Tree	final int start ;
Code	final int start ;
Distance : 8

175
Tree	int start = this . start ;
Code	int start = this . start ;
Distance : 6

176
Tree	double [] ;
Code	double [] ;
Distance : 9

177
Tree	int start = getProperNumerator ;
Code	int start = getProperNumerator ;
Distance : 6

178
Tree	int start = getNumObjectiveFunctions () . getNumObjectiveFunctions ;
Code	int start = getNumObjectiveFunctions () . getNumObjectiveFunctions ;
Distance : 4

179
Tree	short [] start = getNumObjectiveFunctions () ;
Code	short [] start = getNumObjectiveFunctions () ;
Distance : 6

180
Tree	long start = start + NUMBER_CONSTANT ;
Code	long start = start + NUMBER_CONSTANT ;
Distance : 6

181
Tree	short start = this . start ;
Code	short start = this . start ;
Distance : 7

182
Tree	int start = this . start ;
Code	int start = this . start ;
Distance : 6

183
Tree	char start = getNumObjectiveFunctions () . start ;
Code	char start = getNumObjectiveFunctions () . start ;
Distance : 5

184
Tree	long start = getNumObjectiveFunctions ;
Code	long start = getNumObjectiveFunctions ;
Distance : 6

185
Tree	boolean start = start + NUMBER_CONSTANT ;
Code	boolean start = start + NUMBER_CONSTANT ;
Distance : 6

186
Tree	byte start = getNumObjectiveFunctions () . start ;
Code	byte start = getNumObjectiveFunctions () . start ;
Distance : 5

187
Tree	long start = getNumObjectiveFunctions () . getNumObjectiveFunctions ;
Code	long start = getNumObjectiveFunctions () . getNumObjectiveFunctions ;
Distance : 5

188
Tree	boolean start = getNumObjectiveFunctions () . getNumObjectiveFunctions ;
Code	boolean start = getNumObjectiveFunctions () . getNumObjectiveFunctions ;
Distance : 5

189
Tree	int *= ;
Code	int *= ;
Distance : 8

190
Tree	double += ;
Code	double += ;
Distance : 9

191
Tree	final long start = getNumObjectiveFunctions ;
Code	final long start = getNumObjectiveFunctions ;
Distance : 7

192
Tree	long start = this . start ;
Code	long start = this . start ;
Distance : 7

193
Tree	boolean start = getNumObjectiveFunctions ;
Code	boolean start = getNumObjectiveFunctions ;
Distance : 6

194
Tree	byte [] start = getNumObjectiveFunctions () ;
Code	byte [] start = getNumObjectiveFunctions () ;
Distance : 6

195
Tree	double start = getNumObjectiveFunctions () . start ;
Code	double start = getNumObjectiveFunctions () . start ;
Distance : 5

196
Tree	final start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Code	final start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Distance : 8

197
Tree	int start = NUMBER_CONSTANT ;
Code	int start = NUMBER_CONSTANT ;
Distance : 5

198
Tree	void start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	void start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 4

199
Tree	final start < start > start = getNumObjectiveFunctions () ;
Code	final start < start > start = getNumObjectiveFunctions () ;
Distance : 8

========================================================================


========================================================================
Example Number: 55
Parent Code is: 
int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Child code is: 
int j = NUMBER_CONSTANT * ( n - NUMBER_CONSTANT ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=j}) (204{val==}) (27 (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (800{val=n})) (201{val=-}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=j}) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (36 (214{val=(}) (27 (800{val=n}) (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/80/parent/src_main_java_org_apache_commons_math_linear_EigenDecompositionImpl.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	double j = NUMBER_CONSTANT * n - j - j ;
Code	double j = NUMBER_CONSTANT * n - j - j ;
Distance : 5

1
Tree	long j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Code	long j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Distance : 4

2
Tree	byte j = n & NUMBER_CONSTANT ;
Code	byte j = n & NUMBER_CONSTANT ;
Distance : 6

3
Tree	double j = n - j - n ;
Code	double j = n - j - n ;
Distance : 7

4
Tree	int j = n ^ j - n ;
Code	int j = n ^ j - n ;
Distance : 6

5
Tree	long j = NUMBER_CONSTANT * n - j - j ;
Code	long j = NUMBER_CONSTANT * n - j - j ;
Distance : 5

6
Tree	long j = n - j - n ;
Code	long j = n - j - n ;
Distance : 7

7
Tree	boolean j = n == NUMBER_CONSTANT - j ;
Code	boolean j = n == NUMBER_CONSTANT - j ;
Distance : 7

8
Tree	byte j = n == NUMBER_CONSTANT - n ;
Code	byte j = n == NUMBER_CONSTANT - n ;
Distance : 7

9
Tree	byte j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Code	byte j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Distance : 6

10
Tree	int j = NUMBER_CONSTANT * n - j ;
Code	int j = NUMBER_CONSTANT * n - j ;
Distance : 3

11
Tree	int j = n / j - j ;
Code	int j = n / j - j ;
Distance : 6

12
Tree	int j = n ^ n - j ;
Code	int j = n ^ n - j ;
Distance : 5

13
Tree	char j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	char j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

14
Tree	int j = n / n - j ;
Code	int j = n / n - j ;
Distance : 5

15
Tree	int j = ( int ) n * / ;
Code	int j = ( int ) n * / ;
Distance : 6

16
Tree	int j = getUnivariateStatistic ( n , n , n ) / n ;
Code	int j = getUnivariateStatistic ( n , n , n ) / n ;
Distance : 8

17
Tree	int j = n + n . hashCode ( j , n , n ) + n - j ;
Code	int j = n + n . hashCode ( j , n , n ) + n - j ;
Distance : 13

18
Tree	int j = n + n . IEEEremainder ( j , n , NUMBER_CONSTANT ) - j ;
Code	int j = n + n . IEEEremainder ( j , n , NUMBER_CONSTANT ) - j ;
Distance : 10

19
Tree	int j = NUMBER_CONSTANT * n - n ;
Code	int j = NUMBER_CONSTANT * n - n ;
Distance : 3

20
Tree	double j = n * j - j ;
Code	double j = n * j - j ;
Distance : 6

21
Tree	int j = n + j . hashCode ( j , n , n ) + n - j ;
Code	int j = n + j . hashCode ( j , n , n ) + n - j ;
Distance : 13

22
Tree	int j = n + n . IEEEremainder ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + n . IEEEremainder ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

23
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 2

24
Tree	int j = NUMBER_CONSTANT * n - j - n ;
Code	int j = NUMBER_CONSTANT * n - j - n ;
Distance : 4

25
Tree	long j = NUMBER_CONSTANT + NUMBER_CONSTANT - j ;
Code	long j = NUMBER_CONSTANT + NUMBER_CONSTANT - j ;
Distance : 6

26
Tree	int j = n + n - n ;
Code	int j = n + n - n ;
Distance : 5

27
Tree	boolean j = ( n < < NUMBER_CONSTANT ) + n - n ;
Code	boolean j = ( n < < NUMBER_CONSTANT ) + n - n ;
Distance : 9

28
Tree	int j = n * j - j ;
Code	int j = n * j - j ;
Distance : 5

29
Tree	int j = getUnivariateStatistic ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = getUnivariateStatistic ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

30
Tree	int j = getTypeInternal ( n , n , n ) / j ;
Code	int j = getTypeInternal ( n , n , n ) / j ;
Distance : 8

31
Tree	double j = ( long ) n * / ;
Code	double j = ( long ) n * / ;
Distance : 7

32
Tree	int j = n < IncrementalCheckMode.GENERATE_IJS - n ;
Code	int j = n < IncrementalCheckMode.GENERATE_IJS - n ;
Distance : 6

33
Tree	int j = n + n . getGeneratorUpperBounds ( j , n , NUMBER_CONSTANT ) - j ;
Code	int j = n + n . getGeneratorUpperBounds ( j , n , NUMBER_CONSTANT ) - j ;
Distance : 10

34
Tree	double j = n == NUMBER_CONSTANT - n ;
Code	double j = n == NUMBER_CONSTANT - n ;
Distance : 7

35
Tree	int j = ( long ) n * / ;
Code	int j = ( long ) n * / ;
Distance : 6

36
Tree	int j = n + n . getGeneratorUpperBounds ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + n . getGeneratorUpperBounds ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

37
Tree	float j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	float j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

38
Tree	int j = ( long ) n * ^ ;
Code	int j = ( long ) n * ^ ;
Distance : 6

39
Tree	double j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Code	double j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Distance : 6

40
Tree	int j = n + j - n ;
Code	int j = n + j - n ;
Distance : 6

41
Tree	int j = getInstance ( n , n , n ) / j ;
Code	int j = getInstance ( n , n , n ) / j ;
Distance : 8

42
Tree	int j = n + j . getGeneratorUpperBounds ( j , n , NUMBER_CONSTANT ) - j ;
Code	int j = n + j . getGeneratorUpperBounds ( j , n , NUMBER_CONSTANT ) - j ;
Distance : 10

43
Tree	int j = ( int ) n * % ;
Code	int j = ( int ) n * % ;
Distance : 6

44
Tree	double j = n / n - j ;
Code	double j = n / n - j ;
Distance : 6

45
Tree	boolean j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	boolean j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

46
Tree	int j = getAbstractScope ( n , n , n ) / j ;
Code	int j = getAbstractScope ( n , n , n ) / j ;
Distance : 8

47
Tree	long j = n + j - j ;
Code	long j = n + j - j ;
Distance : 7

48
Tree	long j = n / j - j ;
Code	long j = n / j - j ;
Distance : 7

49
Tree	int j = n * n - j ;
Code	int j = n * n - j ;
Distance : 4

50
Tree	int j = n + j . getGeneratorUpperBounds ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + j . getGeneratorUpperBounds ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

51
Tree	int j = n < currentState.length - n ;
Code	int j = n < currentState.length - n ;
Distance : 6

52
Tree	double j = ( n < < NUMBER_CONSTANT ) + n - j ;
Code	double j = ( n < < NUMBER_CONSTANT ) + n - j ;
Distance : 9

53
Tree	long j = n & NUMBER_CONSTANT ;
Code	long j = n & NUMBER_CONSTANT ;
Distance : 6

54
Tree	double j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Code	double j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Distance : 4

55
Tree	int j = n + n . IEEEremainder ( j , n , n ) + n - j ;
Code	int j = n + n . IEEEremainder ( j , n , n ) + n - j ;
Distance : 13

56
Tree	int j = n - n - n ;
Code	int j = n - n - n ;
Distance : 5

57
Tree	double j = n * n - j ;
Code	double j = n * n - j ;
Distance : 5

58
Tree	int j = NUMBER_CONSTANT * n - j - j ;
Code	int j = NUMBER_CONSTANT * n - j - j ;
Distance : 4

59
Tree	long j = n + n - j ;
Code	long j = n + n - j ;
Distance : 6

60
Tree	int j = n + j . hashCode ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + j . hashCode ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

61
Tree	int j = n / j - n ;
Code	int j = n / j - n ;
Distance : 6

62
Tree	long j = NUMBER_CONSTANT * n - n ;
Code	long j = NUMBER_CONSTANT * n - n ;
Distance : 4

63
Tree	int j = n == NUMBER_CONSTANT - j ;
Code	int j = n == NUMBER_CONSTANT - j ;
Distance : 6

64
Tree	double j = n / j - n ;
Code	double j = n / j - n ;
Distance : 7

65
Tree	int j = ( int ) currentState.length * DateUtils.MILLIS_PER_MINUTE - j ;
Code	int j = ( int ) currentState.length * DateUtils.MILLIS_PER_MINUTE - j ;
Distance : 8

66
Tree	boolean j = NUMBER_CONSTANT * n - j ;
Code	boolean j = NUMBER_CONSTANT * n - j ;
Distance : 4

67
Tree	int j = n + j - j ;
Code	int j = n + j - j ;
Distance : 6

68
Tree	int j = n < Year.MAXIMUM_YEAR - n ;
Code	int j = n < Year.MAXIMUM_YEAR - n ;
Distance : 6

69
Tree	int j = n < IncrementalCheckMode.GENERATE_IJS - j ;
Code	int j = n < IncrementalCheckMode.GENERATE_IJS - j ;
Distance : 6

70
Tree	int j = getTickLength ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = getTickLength ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

71
Tree	int j = n < Boolean.FALSE - n ;
Code	int j = n < Boolean.FALSE - n ;
Distance : 6

72
Tree	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - j ;
Code	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - j ;
Distance : 5

73
Tree	double j = n * j - n ;
Code	double j = n * j - n ;
Distance : 6

74
Tree	long j = n * n - j ;
Code	long j = n * n - j ;
Distance : 5

75
Tree	int j = getInstance ( n , n , n ) / n ;
Code	int j = getInstance ( n , n , n ) / n ;
Distance : 8

76
Tree	int j = n + n . getGeneratorUpperBounds ( j , n , n ) + n - j ;
Code	int j = n + n . getGeneratorUpperBounds ( j , n , n ) + n - j ;
Distance : 13

77
Tree	int j = ( int ) currentState.length * iChronology.MILLIS_PER_DAY - j ;
Code	int j = ( int ) currentState.length * iChronology.MILLIS_PER_DAY - j ;
Distance : 8

78
Tree	int j = getInstance ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = getInstance ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

79
Tree	int j = getUnivariateStatistic ( n , n , n ) / j ;
Code	int j = getUnivariateStatistic ( n , n , n ) / j ;
Distance : 8

80
Tree	int j = n + j . getGeneratorUpperBounds ( j , n , n ) + n - j ;
Code	int j = n + j . getGeneratorUpperBounds ( j , n , n ) + n - j ;
Distance : 13

81
Tree	int j = getTypeInternal ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = getTypeInternal ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

82
Tree	int j = ( n < < NUMBER_CONSTANT ) + j - j ;
Code	int j = ( n < < NUMBER_CONSTANT ) + j - j ;
Distance : 8

83
Tree	int j = ( long ) currentState.length * currentState.length - n ;
Code	int j = ( long ) currentState.length * currentState.length - n ;
Distance : 8

84
Tree	long j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	long j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

85
Tree	double j = n * n - n ;
Code	double j = n * n - n ;
Distance : 5

86
Tree	int j = ( int ) values.length * currentState.length - j ;
Code	int j = ( int ) values.length * currentState.length - j ;
Distance : 8

87
Tree	int j = n - j - j ;
Code	int j = n - j - j ;
Distance : 6

88
Tree	int j = ( int ) currentState.length * f.length - n ;
Code	int j = ( int ) currentState.length * f.length - n ;
Distance : 8

89
Tree	int j = ( int ) currentState.length * currentState.length - n ;
Code	int j = ( int ) currentState.length * currentState.length - n ;
Distance : 8

90
Tree	long j = ( n < < NUMBER_CONSTANT ) + n - j ;
Code	long j = ( n < < NUMBER_CONSTANT ) + n - j ;
Distance : 9

91
Tree	long j = n == NUMBER_CONSTANT - n ;
Code	long j = n == NUMBER_CONSTANT - n ;
Distance : 7

92
Tree	int j = n + j . IEEEremainder ( j , n , n ) + n - j ;
Code	int j = n + j . IEEEremainder ( j , n , n ) + n - j ;
Distance : 13

93
Tree	int j = n + n . hashCode ( j , n , NUMBER_CONSTANT ) - j ;
Code	int j = n + n . hashCode ( j , n , NUMBER_CONSTANT ) - j ;
Distance : 10

94
Tree	int j = n - j - n ;
Code	int j = n - j - n ;
Distance : 6

95
Tree	double j = n / n - n ;
Code	double j = n / n - n ;
Distance : 6

96
Tree	int j = ( long ) currentState.length * currentState.length - j ;
Code	int j = ( long ) currentState.length * currentState.length - j ;
Distance : 8

97
Tree	int j = NUMBER_CONSTANT * j - n ;
Code	int j = NUMBER_CONSTANT * j - n ;
Distance : 4

98
Tree	long j = n - n - j ;
Code	long j = n - n - j ;
Distance : 6

99
Tree	int j = n + n - j ;
Code	int j = n + n - j ;
Distance : 5

100
Tree	int j = n < Long.MAX_VALUE - n ;
Code	int j = n < Long.MAX_VALUE - n ;
Distance : 6

101
Tree	byte j = NUMBER_CONSTANT * n - j ;
Code	byte j = NUMBER_CONSTANT * n - j ;
Distance : 4

102
Tree	int j = n < sample2.length - j ;
Code	int j = n < sample2.length - j ;
Distance : 6

103
Tree	int j = n - n - j ;
Code	int j = n - n - j ;
Distance : 5

104
Tree	long j = ( n < < NUMBER_CONSTANT ) + n - n ;
Code	long j = ( n < < NUMBER_CONSTANT ) + n - n ;
Distance : 9

105
Tree	double j = n + j - j ;
Code	double j = n + j - j ;
Distance : 7

106
Tree	int j = n < startConfiguration.length - n ;
Code	int j = n < startConfiguration.length - n ;
Distance : 6

107
Tree	double j = n & NUMBER_CONSTANT ;
Code	double j = n & NUMBER_CONSTANT ;
Distance : 6

108
Tree	int j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Code	int j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Distance : 3

109
Tree	int j = findDomainAxisIndex ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = findDomainAxisIndex ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

110
Tree	int j = ( int ) currentState.length * values.length - j ;
Code	int j = ( int ) currentState.length * values.length - j ;
Distance : 8

111
Tree	int j = getTickLength ( n , n , n ) / n ;
Code	int j = getTickLength ( n , n , n ) / n ;
Distance : 8

112
Tree	boolean j = n == NUMBER_CONSTANT - n ;
Code	boolean j = n == NUMBER_CONSTANT - n ;
Distance : 7

113
Tree	int j = n + n . getGeneratorUpperBounds ( n , n , n ) + n - j ;
Code	int j = n + n . getGeneratorUpperBounds ( n , n , n ) + n - j ;
Distance : 13

114
Tree	int j = getPropFromClass ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = getPropFromClass ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

115
Tree	int j = RandomNameGenerator.FIRST_CHAR n j - n ;
Code	int j = RandomNameGenerator.FIRST_CHAR n j - n ;
Distance : 6

116
Tree	byte j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	byte j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

117
Tree	int j = RandomNameGenerator.FIRST_CHAR n j - j ;
Code	int j = RandomNameGenerator.FIRST_CHAR n j - j ;
Distance : 6

118
Tree	int j = n == NUMBER_CONSTANT - n ;
Code	int j = n == NUMBER_CONSTANT - n ;
Distance : 6

119
Tree	int j = ( long ) n * % ;
Code	int j = ( long ) n * % ;
Distance : 6

120
Tree	int j = n + j . getGeneratorUpperBounds ( n , n , n ) + n - j ;
Code	int j = n + j . getGeneratorUpperBounds ( n , n , n ) + n - j ;
Distance : 13

121
Tree	int j = findDomainAxisIndex ( n , n , n ) / j ;
Code	int j = findDomainAxisIndex ( n , n , n ) / j ;
Distance : 8

122
Tree	int j = n + j . hashCode ( j , n , NUMBER_CONSTANT ) - j ;
Code	int j = n + j . hashCode ( j , n , NUMBER_CONSTANT ) - j ;
Distance : 10

123
Tree	int j = NUMBER_CONSTANT * n - n - n ;
Code	int j = NUMBER_CONSTANT * n - n - n ;
Distance : 4

124
Tree	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Code	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Distance : 5

125
Tree	int j = n ^ n - n ;
Code	int j = n ^ n - n ;
Distance : 5

126
Tree	int j = buildUndesiredInvocationCause ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = buildUndesiredInvocationCause ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

127
Tree	int j = n < currentState.length - j ;
Code	int j = n < currentState.length - j ;
Distance : 6

128
Tree	int j = n + n . getGeneratorUpperBounds ( j , n , n ) + n - n ;
Code	int j = n + n . getGeneratorUpperBounds ( j , n , n ) + n - n ;
Distance : 13

129
Tree	int j = ( long ) n * throws ;
Code	int j = ( long ) n * throws ;
Distance : 6

130
Tree	long j = n / n - j ;
Code	long j = n / n - j ;
Distance : 6

131
Tree	int j = n + j . getGeneratorUpperBounds ( j , n , n ) + n - n ;
Code	int j = n + j . getGeneratorUpperBounds ( j , n , n ) + n - n ;
Distance : 13

132
Tree	double j = NUMBER_CONSTANT * n - n ;
Code	double j = NUMBER_CONSTANT * n - n ;
Distance : 4

133
Tree	int j = n < sample2.length - n ;
Code	int j = n < sample2.length - n ;
Distance : 6

134
Tree	double j = n == NUMBER_CONSTANT - j ;
Code	double j = n == NUMBER_CONSTANT - j ;
Distance : 7

135
Tree	int j = n / n - n ;
Code	int j = n / n - n ;
Distance : 5

136
Tree	int j = getAbstractScope ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = getAbstractScope ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

137
Tree	double j = NUMBER_CONSTANT * n - j ;
Code	double j = NUMBER_CONSTANT * n - j ;
Distance : 4

138
Tree	long j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Code	long j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Distance : 6

139
Tree	int j = n * j - n ;
Code	int j = n * j - n ;
Distance : 5

140
Tree	int j = NUMBER_CONSTANT * j - j ;
Code	int j = NUMBER_CONSTANT * j - j ;
Distance : 4

141
Tree	long j = n ^ j - j ;
Code	long j = n ^ j - j ;
Distance : 7

142
Tree	double j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	double j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

143
Tree	int j = n + n . hashCode ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + n . hashCode ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

144
Tree	int j = n * n - n ;
Code	int j = n * n - n ;
Distance : 4

145
Tree	char j = n & NUMBER_CONSTANT ;
Code	char j = n & NUMBER_CONSTANT ;
Distance : 6

146
Tree	int j = n ^ j - j ;
Code	int j = n ^ j - j ;
Distance : 6

147
Tree	int j = MathUtils.TWO_PI n j - n ;
Code	int j = MathUtils.TWO_PI n j - n ;
Distance : 6

148
Tree	long j = NUMBER_CONSTANT * n - n - j ;
Code	long j = NUMBER_CONSTANT * n - n - j ;
Distance : 5

149
Tree	long j = n * j - j ;
Code	long j = n * j - j ;
Distance : 6

150
Tree	int j = findDomainAxisIndex ( n , n , n ) / n ;
Code	int j = findDomainAxisIndex ( n , n , n ) / n ;
Distance : 8

151
Tree	boolean j = NUMBER_CONSTANT + NUMBER_CONSTANT - j ;
Code	boolean j = NUMBER_CONSTANT + NUMBER_CONSTANT - j ;
Distance : 6

152
Tree	int j = ( int ) n * throws ;
Code	int j = ( int ) n * throws ;
Distance : 6

153
Tree	long j = NUMBER_CONSTANT * n - j ;
Code	long j = NUMBER_CONSTANT * n - j ;
Distance : 4

154
Tree	int j = RandomNameGenerator.FIRST_CHAR n LocalizedFormats.ZERO_NORM - n ;
Code	int j = RandomNameGenerator.FIRST_CHAR n LocalizedFormats.ZERO_NORM - n ;
Distance : 6

155
Tree	float j = n & NUMBER_CONSTANT ;
Code	float j = n & NUMBER_CONSTANT ;
Distance : 6

156
Tree	int j = n & NUMBER_CONSTANT ;
Code	int j = n & NUMBER_CONSTANT ;
Distance : 5

157
Tree	int j = ( n < < NUMBER_CONSTANT ) + j - n ;
Code	int j = ( n < < NUMBER_CONSTANT ) + j - n ;
Distance : 8

158
Tree	int j = NUMBER_CONSTANT * n - n - j ;
Code	int j = NUMBER_CONSTANT * n - n - j ;
Distance : 4

159
Tree	int j = j & NUMBER_CONSTANT ;
Code	int j = j & NUMBER_CONSTANT ;
Distance : 6

160
Tree	int j = ( int ) n * ^ ;
Code	int j = ( int ) n * ^ ;
Distance : 6

161
Tree	double j = ( int ) n * / ;
Code	double j = ( int ) n * / ;
Distance : 7

162
Tree	int j = RandomNameGenerator.FIRST_CHAR n LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN - n ;
Code	int j = RandomNameGenerator.FIRST_CHAR n LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN - n ;
Distance : 6

163
Tree	int j = MathUtils.TWO_PI n j - j ;
Code	int j = MathUtils.TWO_PI n j - j ;
Distance : 6

164
Tree	boolean j = NUMBER_CONSTANT * n - j - j ;
Code	boolean j = NUMBER_CONSTANT * n - j - j ;
Distance : 5

165
Tree	double j = n - j - j ;
Code	double j = n - j - j ;
Distance : 7

166
Tree	int j = ( int ) currentState.length * f.length - j ;
Code	int j = ( int ) currentState.length * f.length - j ;
Distance : 8

167
Tree	double j = n / j - j ;
Code	double j = n / j - j ;
Distance : 7

168
Tree	long j = n == NUMBER_CONSTANT - j ;
Code	long j = n == NUMBER_CONSTANT - j ;
Distance : 7

169
Tree	int j = ( int ) currentState.length * currentState.length - j ;
Code	int j = ( int ) currentState.length * currentState.length - j ;
Distance : 8

170
Tree	double j = n + n - j ;
Code	double j = n + n - j ;
Distance : 6

171
Tree	double j = n + n - n ;
Code	double j = n + n - n ;
Distance : 6

172
Tree	double j = n + j - n ;
Code	double j = n + j - n ;
Distance : 7

173
Tree	int j = ( n < < NUMBER_CONSTANT ) + n - j ;
Code	int j = ( n < < NUMBER_CONSTANT ) + n - j ;
Distance : 8

174
Tree	int j = checkIndex ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = checkIndex ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

175
Tree	int j = getTickLength ( n , n , j ) >= NUMBER_CONSTANT ;
Code	int j = getTickLength ( n , n , j ) >= NUMBER_CONSTANT ;
Distance : 8

176
Tree	char j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Code	char j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Distance : 6

177
Tree	double j = n ^ n - j ;
Code	double j = n ^ n - j ;
Distance : 6

178
Tree	boolean j = n & NUMBER_CONSTANT ;
Code	boolean j = n & NUMBER_CONSTANT ;
Distance : 6

179
Tree	boolean j = ( n < < NUMBER_CONSTANT ) + n - j ;
Code	boolean j = ( n < < NUMBER_CONSTANT ) + n - j ;
Distance : 9

180
Tree	int j = getTickLength ( n , n , n ) / j ;
Code	int j = getTickLength ( n , n , n ) / j ;
Distance : 8

181
Tree	double j = ( n < < NUMBER_CONSTANT ) + n - n ;
Code	double j = ( n < < NUMBER_CONSTANT ) + n - n ;
Distance : 9

182
Tree	long j = n ^ n - j ;
Code	long j = n ^ n - j ;
Distance : 6

183
Tree	long j = n - j - j ;
Code	long j = n - j - j ;
Distance : 7

184
Tree	boolean j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Code	boolean j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Distance : 6

185
Tree	int j = RandomNameGenerator.FIRST_CHAR * LocalizedFormats.ZERO_NORM - j ;
Code	int j = RandomNameGenerator.FIRST_CHAR * LocalizedFormats.ZERO_NORM - j ;
Distance : 5

186
Tree	double j = n ^ j - j ;
Code	double j = n ^ j - j ;
Distance : 7

187
Tree	int j = NUMBER_CONSTANT * j - j - j ;
Code	int j = NUMBER_CONSTANT * j - j - j ;
Distance : 5

188
Tree	int j = data.length n j - n ;
Code	int j = data.length n j - n ;
Distance : 6

189
Tree	short j = n & NUMBER_CONSTANT ;
Code	short j = n & NUMBER_CONSTANT ;
Distance : 6

190
Tree	void j = n & NUMBER_CONSTANT ;
Code	void j = n & NUMBER_CONSTANT ;
Distance : 6

191
Tree	double j = NUMBER_CONSTANT * n - n - j ;
Code	double j = NUMBER_CONSTANT * n - n - j ;
Distance : 5

192
Tree	double j = NUMBER_CONSTANT + NUMBER_CONSTANT - j ;
Code	double j = NUMBER_CONSTANT + NUMBER_CONSTANT - j ;
Distance : 6

193
Tree	byte j = n == NUMBER_CONSTANT - j ;
Code	byte j = n == NUMBER_CONSTANT - j ;
Distance : 7

194
Tree	int j = ( n < < NUMBER_CONSTANT ) + n - n ;
Code	int j = ( n < < NUMBER_CONSTANT ) + n - n ;
Distance : 8

195
Tree	int j = RandomNameGenerator.FIRST_CHAR n LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN - j ;
Code	int j = RandomNameGenerator.FIRST_CHAR n LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN - j ;
Distance : 6

196
Tree	double j = n - n - j ;
Code	double j = n - n - j ;
Distance : 6

197
Tree	double j = n ^ j - n ;
Code	double j = n ^ j - n ;
Distance : 7

198
Tree	long j = n ^ j - n ;
Code	long j = n ^ j - n ;
Distance : 7

199
Tree	int j = SystemUtils.LINE_SEPARATOR int j - n ;
Code	int j = SystemUtils.LINE_SEPARATOR int j - n ;
Distance : 6

========================================================================


========================================================================
Example Number: 56
Parent Code is: 
{ return getCumPct ( ( Comparable < > ) v ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return getPct ( ( Comparable < > ) v ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=getCumPct}) (214{val=(}) (11 (214{val=(}) (74 (43 (800{val=Comparable})) (230{val=<}) (76{val=?}) (231{val=>})) (215{val=)}) (800{val=v})) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=getPct}) (214{val=(}) (11 (214{val=(}) (74 (43 (800{val=Comparable})) (230{val=<}) (76{val=?}) (231{val=>})) (215{val=)}) (800{val=v})) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/75/parent/src_main_java_org_apache_commons_math_stat_Frequency.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( null ) ) ; }
Distance : 8

1
Tree	{ return getCumPct ( Comparable , v . getCumPct () , clazz ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , clazz ) ; }
Distance : 9

2
Tree	{ return getCumPct ( Comparable , v . getCumPct () , dest.n ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , dest.n ) ; }
Distance : 9

3
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; }
Distance : 8

4
Tree	{ return getCumPct ( ( Comparable ) getCumPct ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getCumPct ( v ) ) ; }
Distance : 5

5
Tree	{ return getCumPct ( Comparable , v . getCumPct () , JUnitRule.Strictness.WARN ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , JUnitRule.Strictness.WARN ) ; }
Distance : 9

6
Tree	{ return getCumPct ( Comparable , v . getCumPct () , iConverters.length ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , iConverters.length ) ; }
Distance : 9

7
Tree	{ return getCumPct ( Comparable , v . getPct () , options.removeUnusedPrototypePropertiesInExterns ) ; }
Code	{ return getCumPct ( Comparable , v . getPct () , options.removeUnusedPrototypePropertiesInExterns ) ; }
Distance : 9

8
Tree	{ return getCumPct ( Comparable , v . getCumPct () , metadata ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , metadata ) ; }
Distance : 9

9
Tree	{ return getCumPct ( Comparable , v . getCumPct () , Hibernate.DATE ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , Hibernate.DATE ) ; }
Distance : 9

10
Tree	{ return getPct ( ( Comparable ) v . getPct ( null ) ) ; }
Code	{ return getPct ( ( Comparable ) v . getPct ( null ) ) ; }
Distance : 7

11
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( v , ( S [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( v , ( S [] ) null ) ) ; }
Distance : 13

12
Tree	{ return getPct ( ( ( Comparable ) v . getPct () ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v . getPct () ) . v ) ; }
Distance : 7

13
Tree	{ return getPct ( ( Comparable ) getCumPct ( v ) ) ; }
Code	{ return getPct ( ( Comparable ) getCumPct ( v ) ) ; }
Distance : 4

14
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( v , ( tolerance [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( v , ( tolerance [] ) null ) ) ; }
Distance : 13

15
Tree	{ return v ( super , false ) ; }
Code	{ return v ( super , false ) ; }
Distance : 7

16
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( v ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( v ) ) . v ) ; }
Distance : 10

17
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( v , ( ArrayRealVector [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( v , ( ArrayRealVector [] ) null ) ) ; }
Distance : 13

18
Tree	{ return getCumPct ( ( Comparable ) getCumPct ( ( Comparable ) v , v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getCumPct ( ( Comparable ) v , v ) ) ; }
Distance : 9

19
Tree	{ return Comparable . getCumPct ( Comparable ) . < & > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < & > getCumPct () ; }
Distance : 9

20
Tree	{ return Comparable . getCumPct ( Comparable ) . < extends > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < extends > getCumPct () ; }
Distance : 9

21
Tree	{ return Comparable . getCumPct ( Comparable ) . < ? > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < ? > getCumPct () ; }
Distance : 9

22
Tree	{ return Comparable . getCumPct ( Comparable ) . < v > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < v > getCumPct () ; }
Distance : 9

23
Tree	{ return Comparable . getCumPct ( Comparable ) . < / > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < / > getCumPct () ; }
Distance : 9

24
Tree	{ return Comparable . getCumPct ( v ) . < & > getCumPct () ; }
Code	{ return Comparable . getCumPct ( v ) . < & > getCumPct () ; }
Distance : 10

25
Tree	{ return v . getCumPct ( Comparable ) . < & > getCumPct () ; }
Code	{ return v . getCumPct ( Comparable ) . < & > getCumPct () ; }
Distance : 9

26
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( v , ( ReadWritableTimePeriod [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( v , ( ReadWritableTimePeriod [] ) null ) ) ; }
Distance : 13

27
Tree	{ return Comparable . getCumPct ( Comparable ) . < <= > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < <= > getCumPct () ; }
Distance : 9

28
Tree	{ return Comparable . getCumPct ( v ) . < extends > getCumPct () ; }
Code	{ return Comparable . getCumPct ( v ) . < extends > getCumPct () ; }
Distance : 10

29
Tree	{ return Comparable . getCumPct ( Comparable ) . < /= > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < /= > getCumPct () ; }
Distance : 9

30
Tree	{ return Comparable ( false , false ) ; }
Code	{ return Comparable ( false , false ) ; }
Distance : 7

31
Tree	{ return getCumPct ( ( ( v ) v . getPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . getPct () ) . v ) ; }
Distance : 9

32
Tree	{ return getCumPct ( v ) . < Comparable > getCumPct () ; }
Code	{ return getCumPct ( v ) . < Comparable > getCumPct () ; }
Distance : 8

33
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( v , ( T [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( v , ( T [] ) null ) ) ; }
Distance : 13

34
Tree	{ return Comparable ( ! , false ) ; }
Code	{ return Comparable ( ! , false ) ; }
Distance : 7

35
Tree	{ return v ( false , false ) ; }
Code	{ return v ( false , false ) ; }
Distance : 7

36
Tree	{ return getCumPct ( ( ( v ) v . getCumPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . getCumPct () ) . v ) ; }
Distance : 9

37
Tree	{ return Comparable ( super , false ) ; }
Code	{ return Comparable ( super , false ) ; }
Distance : 7

38
Tree	{ return getCumPct ( ( Comparable < Comparable > ) ^ ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) ^ ) ; }
Distance : 3

39
Tree	{ return getCumPct ( ( Comparable < Comparable > ) {} ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) {} ) ; }
Distance : 3

40
Tree	{ return getPct ( ( ( Comparable ) v ) . Comparable ) ; }
Code	{ return getPct ( ( ( Comparable ) v ) . Comparable ) ; }
Distance : 5

41
Tree	{ return getCumPct ( ( Comparable ) getCumPct ( Comparable ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getCumPct ( Comparable ) ) ; }
Distance : 6

42
Tree	{ return getCumPct ( ( Comparable ) Comparable . getCumPct ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) Comparable . getCumPct ( v ) ) ; }
Distance : 7

43
Tree	{ return getPct ( ( Comparable ) getPct ( v ) ) ; }
Code	{ return getPct ( ( Comparable ) getPct ( v ) ) ; }
Distance : 4

44
Tree	{ return getCumPct ( ( Comparable < Comparable > ) & ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) & ) ; }
Distance : 3

45
Tree	{ return v . getCumPct ( ( ( v ) v ) . v ) ; }
Code	{ return v . getCumPct ( ( ( v ) v ) . v ) ; }
Distance : 8

46
Tree	{ return getCumPct ( ( Comparable < v > ) / ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) / ) ; }
Distance : 3

47
Tree	{ return getCumPct ( v ) . < v > getCumPct () ; }
Code	{ return getCumPct ( v ) . < v > getCumPct () ; }
Distance : 8

48
Tree	{ return getPct ( ( Comparable ) v . getPct ( v , ( Object [] ) null ) ) ; }
Code	{ return getPct ( ( Comparable ) v . getPct ( v , ( Object [] ) null ) ) ; }
Distance : 12

49
Tree	{ return getPct ( v ) . < v > getCumPct () ; }
Code	{ return getPct ( v ) . < v > getCumPct () ; }
Distance : 7

50
Tree	{ return getCumPct ( ( Comparable ) Comparable . getCumPct ( null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) Comparable . getCumPct ( null ) ) ; }
Distance : 8

51
Tree	{ return v . getCumPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return v . getCumPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 7

52
Tree	{ return getPct ( ( ( v ) v ) . v ) ; }
Code	{ return getPct ( ( ( v ) v ) . v ) ; }
Distance : 5

53
Tree	{ return getCumPct ( ( v ) getPct ( ( Comparable ) v , v ) ) ; }
Code	{ return getCumPct ( ( v ) getPct ( ( Comparable ) v , v ) ) ; }
Distance : 9

54
Tree	{ return getPct ( ( Comparable < Comparable > ) / ) ; }
Code	{ return getPct ( ( Comparable < Comparable > ) / ) ; }
Distance : 2

55
Tree	{ return getCumPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 5

56
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct ( v ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct ( v ) ) . v ) ; }
Distance : 10

57
Tree	{ return getCumPct ( ( Comparable < Comparable > ) / ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) / ) ; }
Distance : 3

58
Tree	{ return getCumPct ( ( Comparable < Comparable > ) & ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) & ) ; }
Distance : 3

59
Tree	{ return getPct ( ( v ) v . getPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getPct ( ( v ) v . getPct ( NUMBER_CONSTANT ) ) ; }
Distance : 8

60
Tree	{ return getCumPct ( ( Comparable ) getPct ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getPct ( v ) ) ; }
Distance : 5

61
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( v , ( ArrayRealVector [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( v , ( ArrayRealVector [] ) null ) ) ; }
Distance : 13

62
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 10

63
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( return; ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( return; ) ) ; }
Distance : 8

64
Tree	{ return v ( ! , false ) ; }
Code	{ return v ( ! , false ) ; }
Distance : 7

65
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) . Comparable ) ; }
Distance : 11

66
Tree	{ return getCumPct ( ( ( v ) v ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v ) . v ) ; }
Distance : 6

67
Tree	{ return getCumPct ( ( Comparable < v > ) / ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) / ) ; }
Distance : 3

68
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( v , ( T [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( v , ( T [] ) null ) ) ; }
Distance : 13

69
Tree	{ return getCumPct ( ( Comparable < Comparable > ) /= ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) /= ) ; }
Distance : 3

70
Tree	{ return Comparable . getCumPct ( Comparable ) . getPct ( this ) ; }
Code	{ return Comparable . getCumPct ( Comparable ) . getPct ( this ) ; }
Distance : 8

71
Tree	{ return getCumPct ( ( Comparable ) getPct ( ( Comparable ) v , v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getPct ( ( Comparable ) v , v ) ) ; }
Distance : 9

72
Tree	{ return getCumPct ( ( Comparable < Comparable > ) / ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) / ) ; }
Distance : 3

73
Tree	{ return getPct ( ( Comparable < Comparable > ) / ) ; }
Code	{ return getPct ( ( Comparable < Comparable > ) / ) ; }
Distance : 2

74
Tree	{ return Comparable . getCumPct ( Comparable ) . getCumPct ( this ) ; }
Code	{ return Comparable . getCumPct ( Comparable ) . getCumPct ( this ) ; }
Distance : 8

75
Tree	{ return getCumPct ( v ) . < v > getPct () ; }
Code	{ return getCumPct ( v ) . < v > getPct () ; }
Distance : 8

76
Tree	{ return Comparable ( false , super ) ; }
Code	{ return Comparable ( false , super ) ; }
Distance : 7

77
Tree	{ return getCumPct ( ( Comparable < Comparable > ) >= ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) >= ) ; }
Distance : 3

78
Tree	{ return getPct ( ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 9

79
Tree	{ return getCumPct ( ( Comparable < Comparable > ) <= ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) <= ) ; }
Distance : 3

80
Tree	{ return getCumPct ( ( ( Comparable ) v ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v ) . Comparable ) ; }
Distance : 6

81
Tree	{ return getCumPct ( Comparable , v . getCumPct () , options.removeUnusedPrototypePropertiesInExterns ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , options.removeUnusedPrototypePropertiesInExterns ) ; }
Distance : 9

82
Tree	{ return Comparable . getCumPct ( v ) . getPct ( this ) ; }
Code	{ return Comparable . getCumPct ( v ) . getPct ( this ) ; }
Distance : 9

83
Tree	{ return getPct ( ( v ) getPct ( v ) ) ; }
Code	{ return getPct ( ( v ) getPct ( v ) ) ; }
Distance : 5

84
Tree	{ return v . getCumPct ( Comparable ) . getPct ( this ) ; }
Code	{ return v . getCumPct ( Comparable ) . getPct ( this ) ; }
Distance : 8

85
Tree	{ return getCumPct ( ( Comparable < Comparable > ) *= ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) *= ) ; }
Distance : 3

86
Tree	{ return getPct ( ( v ) getCumPct ( v ) ) ; }
Code	{ return getPct ( ( v ) getCumPct ( v ) ) ; }
Distance : 5

87
Tree	{ return getCumPct ( ( Comparable < ? super v > ) <= ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) <= ) ; }
Distance : 5

88
Tree	{ return getCumPct ( ( Comparable < Comparable > ) /= ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) /= ) ; }
Distance : 3

89
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( v , ( Object [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( v , ( Object [] ) null ) ) ; }
Distance : 13

90
Tree	{ return Comparable . getCumPct ( v ) . getCumPct ( this ) ; }
Code	{ return Comparable . getCumPct ( v ) . getCumPct ( this ) ; }
Distance : 9

91
Tree	{ return getCumPct ( ( Comparable < Comparable > ) <= ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) <= ) ; }
Distance : 3

92
Tree	{ return getCumPct ( ( Comparable < ? super v > ) private ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) private ) ; }
Distance : 5

93
Tree	{ return getCumPct ( Comparable , v . getCumPct () , PropertyCollapseLevel.NONE ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , PropertyCollapseLevel.NONE ) ; }
Distance : 9

94
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( Comparable ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( Comparable ) ) ; }
Distance : 8

95
Tree	{ return getPct ( ( ( v ) v . getPct ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getPct ( ( ( v ) v . getPct ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 10

96
Tree	{ return getCumPct ( ( Comparable < Comparable > ) ^ ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) ^ ) ; }
Distance : 3

97
Tree	{ return getCumPct ( ( v ) v . getPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( v ) v . getPct ( NUMBER_CONSTANT ) ) ; }
Distance : 9

98
Tree	{ return getCumPct ( ( v ) v . getPct ( v ) ) ; }
Code	{ return getCumPct ( ( v ) v . getPct ( v ) ) ; }
Distance : 8

99
Tree	{ return getCumPct ( ( v ) v . getPct ( null ) ) ; }
Code	{ return getCumPct ( ( v ) v . getPct ( null ) ) ; }
Distance : 9

100
Tree	{ return getCumPct ( Comparable ) . < Comparable > getCumPct () ; }
Code	{ return getCumPct ( Comparable ) . < Comparable > getCumPct () ; }
Distance : 8

101
Tree	{ return getPct ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getPct ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) ; }
Distance : 7

102
Tree	{ return getCumPct ( Comparable , v . getPct () , PropertyCollapseLevel.NONE ) ; }
Code	{ return getCumPct ( Comparable , v . getPct () , PropertyCollapseLevel.NONE ) ; }
Distance : 9

103
Tree	{ return getPct ( ( ( v ) v . getPct ( v ) ) . v ) ; }
Code	{ return getPct ( ( ( v ) v . getPct ( v ) ) . v ) ; }
Distance : 10

104
Tree	{ return getCumPct ( ( v ) getCumPct ( v ) ) ; }
Code	{ return getCumPct ( ( v ) getCumPct ( v ) ) ; }
Distance : 6

105
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( v , ( Object [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( v , ( Object [] ) null ) ) ; }
Distance : 13

106
Tree	{ return getCumPct ( ( v ) getCumPct ( ( Comparable ) v , v ) ) ; }
Code	{ return getCumPct ( ( v ) getCumPct ( ( Comparable ) v , v ) ) ; }
Distance : 10

107
Tree	{ return v . getCumPct ( Comparable ) . getCumPct ( this ) ; }
Code	{ return v . getCumPct ( Comparable ) . getCumPct ( this ) ; }
Distance : 8

108
Tree	{ return getPct ( Comparable ) . < v > getCumPct () ; }
Code	{ return getPct ( Comparable ) . < v > getCumPct () ; }
Distance : 7

109
Tree	{ return getCumPct ( ( Comparable < ? super v > ) / ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) / ) ; }
Distance : 5

110
Tree	{ return getCumPct ( ( Comparable < Comparable > ) >= ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) >= ) ; }
Distance : 3

111
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) ; }
Distance : 8

112
Tree	{ return getCumPct ( ( ( v ) v . getPct ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . getPct ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 11

113
Tree	{ return getPct ( ( Comparable ) v . getPct ( v ) ) ; }
Code	{ return getPct ( ( Comparable ) v . getPct ( v ) ) ; }
Distance : 6

114
Tree	{ return getCumPct ( Comparable ) . < Comparable > getPct () ; }
Code	{ return getCumPct ( Comparable ) . < Comparable > getPct () ; }
Distance : 8

115
Tree	{ return getCumPct ( ( Comparable < Comparable > ) {} ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) {} ) ; }
Distance : 3

116
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) ; }
Distance : 8

117
Tree	{ return getPct ( ( ( v ) v . getCumPct ( v ) ) . v ) ; }
Code	{ return getPct ( ( ( v ) v . getCumPct ( v ) ) . v ) ; }
Distance : 10

118
Tree	{ return getPct ( ( ( v ) v . getPct () ) . v ) ; }
Code	{ return getPct ( ( ( v ) v . getPct () ) . v ) ; }
Distance : 8

119
Tree	{ return v . getCumPct ( v ) . getPct ( this ) ; }
Code	{ return v . getCumPct ( v ) . getPct ( this ) ; }
Distance : 9

120
Tree	{ return getCumPct ( ( ( v ) v . getCumPct ( v ) ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . getCumPct ( v ) ) . v ) ; }
Distance : 11

121
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( v ) ) ; }
Distance : 7

122
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct ( v ) ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct ( v ) ) . Comparable ) ; }
Distance : 11

123
Tree	{ return getPct ( ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 9

124
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . Comparable ) ; }
Distance : 9

125
Tree	{ return getCumPct ( ( v ) v . getCumPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( v ) v . getCumPct ( NUMBER_CONSTANT ) ) ; }
Distance : 9

126
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( null ) ) ; }
Distance : 8

127
Tree	{ return getPct ( ( Comparable ) getPct ( ( Comparable ) v , v ) ) ; }
Code	{ return getPct ( ( Comparable ) getPct ( ( Comparable ) v , v ) ) ; }
Distance : 8

128
Tree	{ return v . getCumPct ( v ) . getCumPct ( this ) ; }
Code	{ return v . getCumPct ( v ) . getCumPct ( this ) ; }
Distance : 9

129
Tree	{ return getCumPct ( ( v ) v . getCumPct ( v ) ) ; }
Code	{ return getCumPct ( ( v ) v . getCumPct ( v ) ) ; }
Distance : 8

130
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( Comparable ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( Comparable ) ) ; }
Distance : 8

131
Tree	{ return Comparable . getPct ( Comparable ) . getPct ( this ) ; }
Code	{ return Comparable . getPct ( Comparable ) . getPct ( this ) ; }
Distance : 8

132
Tree	{ return getPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 4

133
Tree	{ return getCumPct ( ( Comparable < ? super v > ) *= ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) *= ) ; }
Distance : 5

134
Tree	{ return getPct ( ( ( Comparable ) Comparable ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) Comparable ) . v ) ; }
Distance : 4

135
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( super(); ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( super(); ) ) ; }
Distance : 8

136
Tree	{ return getCumPct ( ( Comparable ) getPct ( Comparable ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getPct ( Comparable ) ) ; }
Distance : 6

137
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct () ) . v ) ; }
Distance : 8

138
Tree	{ return getCumPct ( ( v ) v . getCumPct ( null ) ) ; }
Code	{ return getCumPct ( ( v ) v . getCumPct ( null ) ) ; }
Distance : 9

139
Tree	{ return Comparable . getCumPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return Comparable . getCumPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 7

140
Tree	{ return getPct ( ( ( Comparable ) v . getPct ( v ) ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v . getPct ( v ) ) . v ) ; }
Distance : 9

141
Tree	{ return getCumPct ( ( ( v ) v . getCumPct ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . getCumPct ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 11

142
Tree	{ return getCumPct ( ( Comparable ) getPct ( ( v ) v , v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getPct ( ( v ) v , v ) ) ; }
Distance : 9

143
Tree	{ return getCumPct ( ( Comparable ) Comparable . getPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( Comparable ) Comparable . getPct ( NUMBER_CONSTANT ) ) ; }
Distance : 8

144
Tree	{ return getPct ( ( ( v ) v . getCumPct () ) . v ) ; }
Code	{ return getPct ( ( ( v ) v . getCumPct () ) . v ) ; }
Distance : 8

145
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( v ) ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( v ) ) . Comparable ) ; }
Distance : 11

146
Tree	{ return Comparable . getPct ( Comparable ) . getCumPct ( this ) ; }
Code	{ return Comparable . getPct ( Comparable ) . getCumPct ( this ) ; }
Distance : 8

147
Tree	{ return getCumPct ( ( Comparable ) Comparable . getPct ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) Comparable . getPct ( v ) ) ; }
Distance : 7

148
Tree	{ return getCumPct ( ( Comparable ) Comparable . getPct ( null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) Comparable . getPct ( null ) ) ; }
Distance : 8

149
Tree	{ return getCumPct ( ( Comparable < Comparable > ) *= ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) *= ) ; }
Distance : 3

150
Tree	{ return getCumPct ( ( Comparable < ? super v > ) ^ ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) ^ ) ; }
Distance : 5

151
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) . Comparable ) ; }
Distance : 11

152
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( v ) ) ; }
Distance : 7

153
Tree	{ return getCumPct ( ( Comparable ) getCumPct ( ( v ) v , v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getCumPct ( ( v ) v , v ) ) ; }
Distance : 9

154
Tree	{ return getPct ( Comparable ) . < v > getPct () ; }
Code	{ return getPct ( Comparable ) . < v > getPct () ; }
Distance : 7

155
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct () ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct () ) . Comparable ) ; }
Distance : 9

156
Tree	{ return getPct ( ( ( Comparable ) v . getCumPct ( v ) ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v . getCumPct ( v ) ) . v ) ; }
Distance : 9

157
Tree	{ return getPct ( ( v ) v . getCumPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getPct ( ( v ) v . getCumPct ( NUMBER_CONSTANT ) ) ; }
Distance : 8

158
Tree	{ return getPct ( ( Comparable ) getCumPct ( ( Comparable ) v , v ) ) ; }
Code	{ return getPct ( ( Comparable ) getCumPct ( ( Comparable ) v , v ) ) ; }
Distance : 8

159
Tree	{ return getPct ( ( ( v ) v . getCumPct ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getPct ( ( ( v ) v . getCumPct ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 10

160
Tree	{ return getPct ( ( Comparable ) getPct ( ( v ) v , v ) ) ; }
Code	{ return getPct ( ( Comparable ) getPct ( ( v ) v , v ) ) ; }
Distance : 8

161
Tree	{ return Comparable . getCumPct ( ( ( v ) v ) . v ) ; }
Code	{ return Comparable . getCumPct ( ( ( v ) v ) . v ) ; }
Distance : 8

162
Tree	{ return getCumPct ( ( Comparable ) Comparable . getCumPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( Comparable ) Comparable . getCumPct ( NUMBER_CONSTANT ) ) ; }
Distance : 8

163
Tree	{ return getPct ( ( Comparable ) getCumPct ( ( v ) v , v ) ) ; }
Code	{ return getPct ( ( Comparable ) getCumPct ( ( v ) v , v ) ) ; }
Distance : 8

164
Tree	{ return Comparable . getPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return Comparable . getPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 6

165
Tree	{ return getCumPct ( ( Comparable < ? super v > ) & ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) & ) ; }
Distance : 5

166
Tree	{ return getCumPct ( ( Comparable < ? super v > ) ++ ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) ++ ) ; }
Distance : 5

167
Tree	{ return getPct ( ( Comparable < ? super v > ) <= ) ; }
Code	{ return getPct ( ( Comparable < ? super v > ) <= ) ; }
Distance : 4

168
Tree	{ return getCumPct ( ( Comparable < ? super v > ) % ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) % ) ; }
Distance : 5

169
Tree	{ return getCumPct ( ( Comparable < ? super v > ) &= ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) &= ) ; }
Distance : 5

170
Tree	{ return getCumPct ( ( ( Comparable ) Comparable ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) Comparable ) . v ) ; }
Distance : 5

171
Tree	{ return getCumPct ( ( ( v ) v ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( v ) v ) . Comparable ) ; }
Distance : 7

172
Tree	{ return Comparable ( ! , super ) ; }
Code	{ return Comparable ( ! , super ) ; }
Distance : 7

173
Tree	{ return getCumPct ( Comparable ) . < v > getCumPct () ; }
Code	{ return getCumPct ( Comparable ) . < v > getCumPct () ; }
Distance : 8

174
Tree	{ return v ( false , super ) ; }
Code	{ return v ( false , super ) ; }
Distance : 7

175
Tree	{ return Comparable . getPct ( ( ( v ) v ) . v ) ; }
Code	{ return Comparable . getPct ( ( ( v ) v ) . v ) ; }
Distance : 7

176
Tree	{ return Comparable ( T , false ) ; }
Code	{ return Comparable ( T , false ) ; }
Distance : 7

177
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 10

178
Tree	{ return getCumPct ( ( v ) getPct ( v ) ) ; }
Code	{ return getCumPct ( ( v ) getPct ( v ) ) ; }
Distance : 6

179
Tree	{ return v . getPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return v . getPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 6

180
Tree	{ return getCumPct ( ( ( v ) v . getPct ( v ) ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . getPct ( v ) ) . v ) ; }
Distance : 11

181
Tree	{ return getPct ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getPct ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) ; }
Distance : 7

182
Tree	{ return getPct ( ( Comparable ) v . getCumPct ( v ) ) ; }
Code	{ return getPct ( ( Comparable ) v . getCumPct ( v ) ) ; }
Distance : 6

183
Tree	{ return Comparable . getCumPct ( Comparable ) . < -- > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < -- > getCumPct () ; }
Distance : 9

184
Tree	{ return Comparable . getCumPct ( v ) . < v > getCumPct () ; }
Code	{ return Comparable . getCumPct ( v ) . < v > getCumPct () ; }
Distance : 10

185
Tree	{ return v . getCumPct ( Comparable ) . < v > getCumPct () ; }
Code	{ return v . getCumPct ( Comparable ) . < v > getCumPct () ; }
Distance : 9

186
Tree	{ return Comparable . getCumPct ( Comparable ) . < v > getPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < v > getPct () ; }
Distance : 9

187
Tree	{ return v . getCumPct ( v ) . < v > getCumPct () ; }
Code	{ return v . getCumPct ( v ) . < v > getCumPct () ; }
Distance : 10

188
Tree	{ return Comparable . getCumPct ( v ) . < v > getPct () ; }
Code	{ return Comparable . getCumPct ( v ) . < v > getPct () ; }
Distance : 10

189
Tree	{ return v . getCumPct ( Comparable ) . < v > getPct () ; }
Code	{ return v . getCumPct ( Comparable ) . < v > getPct () ; }
Distance : 9

190
Tree	{ return v . getCumPct ( v ) . < v > getPct () ; }
Code	{ return v . getCumPct ( v ) . < v > getPct () ; }
Distance : 10

191
Tree	{ return v . getPct ( ( ( v ) v ) . v ) ; }
Code	{ return v . getPct ( ( ( v ) v ) . v ) ; }
Distance : 7

192
Tree	{ return getCumPct ( Comparable ) . < v > getPct () ; }
Code	{ return getCumPct ( Comparable ) . < v > getPct () ; }
Distance : 8

193
Tree	{ return getPct ( ( Comparable ) v . getCumPct ( null ) ) ; }
Code	{ return getPct ( ( Comparable ) v . getCumPct ( null ) ) ; }
Distance : 7

194
Tree	{ return getCumPct ( ( ( v ) Comparable ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) Comparable ) . v ) ; }
Distance : 6

195
Tree	{ return Comparable . getCumPct ( Comparable ) . < Comparable > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < Comparable > getCumPct () ; }
Distance : 9

196
Tree	{ return getPct ( ( ( Comparable ) v . getCumPct () ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v . getCumPct () ) . v ) ; }
Distance : 7

197
Tree	{ return Comparable . getCumPct ( ( ( Comparable ) v ) . Comparable ) ; }
Code	{ return Comparable . getCumPct ( ( ( Comparable ) v ) . Comparable ) ; }
Distance : 8

198
Tree	{ return Comparable . getPct ( Comparable ) . < v > getCumPct () ; }
Code	{ return Comparable . getPct ( Comparable ) . < v > getCumPct () ; }
Distance : 9

199
Tree	{ return Comparable . getCumPct ( ( ( v ) v ) . Comparable ) ; }
Code	{ return Comparable . getCumPct ( ( ( v ) v ) . Comparable ) ; }
Distance : 9

========================================================================


========================================================================
Example Number: 57
Parent Code is: 
{ return solve ( min , max ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return solve ( f , min , max ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=solve}) (214{val=(}) (800{val=min}) (234{val=,}) (800{val=max}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=solve}) (214{val=(}) (800{val=f}) (234{val=,}) (800{val=min}) (234{val=,}) (800{val=max}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/70/parent/src_main_java_org_apache_commons_math_analysis_solvers_BisectionSolver.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	{ return f . solve ( min ) ; }
Code	{ return f . solve ( min ) ; }
Distance : 6

1
Tree	{ return solve ( f . solve ( min ) , max ) ; }
Code	{ return solve ( f . solve ( min ) , max ) ; }
Distance : 4

2
Tree	{ return solve ( min , min , max ) ; }
Code	{ return solve ( min , min , max ) ; }
Distance : 1

3
Tree	{ return solve ( f . solve () , max ) ; }
Code	{ return solve ( f . solve () , max ) ; }
Distance : 3

4
Tree	{ return solve ( solve () , solve ( min ) ) ; }
Code	{ return solve ( solve () , solve ( min ) ) ; }
Distance : 6

5
Tree	{ return solve ( min , min - NUMBER_CONSTANT ) ; }
Code	{ return solve ( min , min - NUMBER_CONSTANT ) ; }
Distance : 3

6
Tree	{ return solve ( f , max ) ; }
Code	{ return solve ( f , max ) ; }
Distance : 2

7
Tree	{ return solve ( min . solve ( min ) ) ; } wanted
Code	{ return solve ( min . solve ( min ) ) ; } wanted
Distance : 7

8
Tree	{ return f . solve ( min , max ) ; }
Code	{ return f . solve ( min , max ) ; }
Distance : 4

9
Tree	{ return solve ( min , return; ) ; }
Code	{ return solve ( min , return; ) ; }
Distance : 3

10
Tree	{ return solve ( min , min , min ) ; }
Code	{ return solve ( min , min , min ) ; }
Distance : 2

11
Tree	{ return solve ( max , max ) ; }
Code	{ return solve ( max , max ) ; }
Distance : 3

12
Tree	{ return solve ( min , min ) ; }
Code	{ return solve ( min , min ) ; }
Distance : 3

13
Tree	{ return solve . solve ( min ) ; }
Code	{ return solve . solve ( min ) ; }
Distance : 5

14
Tree	{ return max . solve ( max ) ; }
Code	{ return max . solve ( max ) ; }
Distance : 6

15
Tree	{ return solve ( min . solve ( max ) , min ) ; }
Code	{ return solve ( min . solve ( max ) , min ) ; }
Distance : 7

16
Tree	{ return solve ( max , null ) ; }
Code	{ return solve ( max , null ) ; }
Distance : 4

17
Tree	{ return max . solve ( min ) ; }
Code	{ return max . solve ( min ) ; }
Distance : 6

18
Tree	{ return solve ( min - NUMBER_CONSTANT , f ) ; }
Code	{ return solve ( min - NUMBER_CONSTANT , f ) ; }
Distance : 4

19
Tree	{ return solve ( min , return; , max ) ; }
Code	{ return solve ( min , return; , max ) ; }
Distance : 2

20
Tree	{ return solve ( max . solve ( max ) , max ) ; }
Code	{ return solve ( max . solve ( max ) , max ) ; }
Distance : 6

21
Tree	{ return solve ( f . solve ( max ) , max ) ; }
Code	{ return solve ( f . solve ( max ) , max ) ; }
Distance : 5

22
Tree	{ return solve ( max . solve ( max ) ) ; }
Code	{ return solve ( max . solve ( max ) ) ; }
Distance : 5

23
Tree	{ return solve ( min , null , f ) ; }
Code	{ return solve ( min , null , f ) ; }
Distance : 3

24
Tree	{ return solve ( max , null , min ) ; }
Code	{ return solve ( max , null , min ) ; }
Distance : 3

25
Tree	{ return solve ( f , f ) ; }
Code	{ return solve ( f , f ) ; }
Distance : 3

26
Tree	{ return solve ( min . solve () , min ) ; }
Code	{ return solve ( min . solve () , min ) ; }
Distance : 5

27
Tree	{ return min . solve ( this , max ) ; }
Code	{ return min . solve ( this , max ) ; }
Distance : 5

28
Tree	{ return solve ( min . solve ( f ) , max ) ; }
Code	{ return solve ( min . solve ( f ) , max ) ; }
Distance : 6

29
Tree	{ return solve ( f , null ) ; }
Code	{ return solve ( f , null ) ; }
Distance : 3

30
Tree	{ return min . solve ( min , null , min ) ; }
Code	{ return min . solve ( min , null , min ) ; }
Distance : 5

31
Tree	{ return f . solve ( max , null , max ) ; }
Code	{ return f . solve ( max , null , max ) ; }
Distance : 4

32
Tree	{ return f . solve ( min , null , max ) ; }
Code	{ return f . solve ( min , null , max ) ; }
Distance : 4

33
Tree	{ return solve ( min , max , min , false ) ; }
Code	{ return solve ( min , max , min , false ) ; }
Distance : 4

34
Tree	{ return ( ( max ) this ) . solve ( min , min ) ; }
Code	{ return ( ( max ) this ) . solve ( min , min ) ; }
Distance : 9

35
Tree	{ return solve ( min . solve ( f ) , min ) ; }
Code	{ return solve ( min . solve ( f ) , min ) ; }
Distance : 7

36
Tree	{ return solve ( max , max , min , null ) ; }
Code	{ return solve ( max , max , min , null ) ; }
Distance : 4

37
Tree	{ return solve ( max - NUMBER_CONSTANT , min ) ; }
Code	{ return solve ( max - NUMBER_CONSTANT , min ) ; }
Distance : 4

38
Tree	{ return ebeDivide . solve ( min ) ; }
Code	{ return ebeDivide . solve ( min ) ; }
Distance : 6

39
Tree	{ return max . solve () . solve ( min , max ) ; }
Code	{ return max . solve () . solve ( min , max ) ; }
Distance : 6

40
Tree	{ return solve ( f , null , min ) ; }
Code	{ return solve ( f , null , min ) ; }
Distance : 2

41
Tree	{ return solve ( f , min , max , false ) ; }
Code	{ return solve ( f , min , max , false ) ; }
Distance : 2

42
Tree	{ return min . solve ( this , f ) ; }
Code	{ return min . solve ( this , f ) ; }
Distance : 6

43
Tree	{ return f . solve ( f , min ) ; }
Code	{ return f . solve ( f , min ) ; }
Distance : 4

44
Tree	{ return solve ( min . solve () , max ) ; }
Code	{ return solve ( min . solve () , max ) ; }
Distance : 4

45
Tree	{ return solve ( max . solve ( f ) ) ; }
Code	{ return solve ( max . solve ( f ) ) ; }
Distance : 6

46
Tree	{ return solve ( min , continue; , max ) ; }
Code	{ return solve ( min , continue; , max ) ; }
Distance : 2

47
Tree	{ return f . solve ( this , f ) ; }
Code	{ return f . solve ( this , f ) ; }
Distance : 6

48
Tree	{ return solve ( min . solve ( f ) ) ; }
Code	{ return solve ( min . solve ( f ) ) ; }
Distance : 6

49
Tree	{ return f . solve ( max ) ; }
Code	{ return f . solve ( max ) ; }
Distance : 5

50
Tree	{ return solve ( f . solve ( min ) ) ; }
Code	{ return solve ( f . solve ( min ) ) ; }
Distance : 5

51
Tree	{ return solve ( f . solve ( f ) ) ; }
Code	{ return solve ( f . solve ( f ) ) ; }
Distance : 5

52
Tree	{ return solve ( solve () , solve ( max ) ) ; }
Code	{ return solve ( solve () , solve ( max ) ) ; }
Distance : 5

53
Tree	{ return solve ( max , min , max ) ; }
Code	{ return solve ( max , min , max ) ; }
Distance : 1

54
Tree	{ return solve ( min . solve ( min ) , max ) ; }
Code	{ return solve ( min . solve ( min ) , max ) ; }
Distance : 5

55
Tree	{ return solve ( min , max , min ) ; }
Code	{ return solve ( min , max , min ) ; }
Distance : 3

56
Tree	{ return max . solve ( min , null , max ) ; }
Code	{ return max . solve ( min , null , max ) ; }
Distance : 4

57
Tree	{ return solve ( f , min , max ) ; }
Code	{ return solve ( f , min , max ) ; }
Distance : 0

58
Tree	{ return f . solve ( max , min ) ; }
Code	{ return f . solve ( max , min ) ; }
Distance : 5

59
Tree	{ return solve ( f . solve ( max ) ) ; }
Code	{ return solve ( f . solve ( max ) ) ; }
Distance : 4

60
Tree	{ return f . solve ( max , null , min ) ; }
Code	{ return f . solve ( max , null , min ) ; }
Distance : 5

61
Tree	{ return solve ( min . solve () , f ) ; }
Code	{ return solve ( min . solve () , f ) ; }
Distance : 5

62
Tree	{ return min . solve ( max ) ; }
Code	{ return min . solve ( max ) ; }
Distance : 6

63
Tree	{ return max . solve ( this , max ) ; }
Code	{ return max . solve ( this , max ) ; }
Distance : 5

64
Tree	{ return solve ( min , min , min , false ) ; }
Code	{ return solve ( min , min , min , false ) ; }
Distance : 4

65
Tree	{ return ( ( min ) this ) . solve ( max , min ) ; }
Code	{ return ( ( min ) this ) . solve ( max , min ) ; }
Distance : 10

66
Tree	{ return min . solve ( min , max ) ; }
Code	{ return min . solve ( min , max ) ; }
Distance : 4

67
Tree	{ return solve ( max . solve () , min ) ; }
Code	{ return solve ( max . solve () , min ) ; }
Distance : 5

68
Tree	{ return solve ( solve () , solve ( max ) ) ; } {}
Code	{ return solve ( solve () , solve ( max ) ) ; } {}
Distance : 6

69
Tree	{ return solve ( f , max , max ) ; }
Code	{ return solve ( f , max , max ) ; }
Distance : 1

70
Tree	{ return solve ( solve () , solve ( f ) ) ; }
Code	{ return solve ( solve () , solve ( f ) ) ; }
Distance : 6

71
Tree	{ return solve ( min , max ) ; } wanted
Code	{ return solve ( min , max ) ; } wanted
Distance : 3

72
Tree	{ return solve ( max . solve () , f ) ; }
Code	{ return solve ( max . solve () , f ) ; }
Distance : 5

73
Tree	{ return solve ( f , f - NUMBER_CONSTANT ) ; }
Code	{ return solve ( f , f - NUMBER_CONSTANT ) ; }
Distance : 3

74
Tree	{ return solve ( f , max , min , null ) ; }
Code	{ return solve ( f , max , min , null ) ; }
Distance : 3

75
Tree	{ return f . solve () . solve ( f , max ) ; }
Code	{ return f . solve () . solve ( f , max ) ; }
Distance : 7

76
Tree	{ return solve ( max . solve () , max ) ; }
Code	{ return solve ( max . solve () , max ) ; }
Distance : 4

77
Tree	{ return solver . solve ( min ) ; }
Code	{ return solver . solve ( min ) ; }
Distance : 6

78
Tree	{ return solve ( min , min , min , null ) ; }
Code	{ return solve ( min , min , min , null ) ; }
Distance : 4

79
Tree	{ return solve ( max , min , max , null ) ; }
Code	{ return solve ( max , min , max , null ) ; }
Distance : 3

80
Tree	{ return ( ( min ) this ) . solve ( min , min ) ; }
Code	{ return ( ( min ) this ) . solve ( min , min ) ; }
Distance : 9

81
Tree	{ return max . solve ( min , max ) ; }
Code	{ return max . solve ( min , max ) ; }
Distance : 4

82
Tree	{ return solve ( max , max , min , false ) ; }
Code	{ return solve ( max , max , min , false ) ; }
Distance : 4

83
Tree	{ return Coordinates3D . solve ( min , max , max ) ; }
Code	{ return Coordinates3D . solve ( min , max , max ) ; }
Distance : 4

84
Tree	{ return solve ( min , min , max , false ) ; }
Code	{ return solve ( min , min , max , false ) ; }
Distance : 3

85
Tree	{ return Double.NaN . solve ( min , max , max ) ; }
Code	{ return Double.NaN . solve ( min , max , max ) ; }
Distance : 4

86
Tree	{ return ( ( min ) this ) . solve ( f , max ) ; }
Code	{ return ( ( min ) this ) . solve ( f , max ) ; }
Distance : 9

87
Tree	{ return solve . solve ( min , max , min ) ; }
Code	{ return solve . solve ( min , max , min ) ; }
Distance : 5

88
Tree	{ return f . solve ( min , null , f ) ; }
Code	{ return f . solve ( min , null , f ) ; }
Distance : 5

89
Tree	{ return solve ( f . solve () , f ) ; }
Code	{ return solve ( f . solve () , f ) ; }
Distance : 4

90
Tree	{ return solve ( min , max , max , return; ) ; }
Code	{ return solve ( min , max , max , return; ) ; }
Distance : 4

91
Tree	{ return solve ( max , max - NUMBER_CONSTANT ) ; }
Code	{ return solve ( max , max - NUMBER_CONSTANT ) ; }
Distance : 4

92
Tree	{ return solve ( f , super(); ) ; }
Code	{ return solve ( f , super(); ) ; }
Distance : 3

93
Tree	{ return solve ( min , min , max , null ) ; }
Code	{ return solve ( min , min , max , null ) ; }
Distance : 3

94
Tree	{ return solve ( f , max - NUMBER_CONSTANT ) ; }
Code	{ return solve ( f , max - NUMBER_CONSTANT ) ; }
Distance : 3

95
Tree	{ return ( ( min ) this ) . solve ( max , max ) ; }
Code	{ return ( ( min ) this ) . solve ( max , max ) ; }
Distance : 9

96
Tree	{ return ( ( f ) this ) . solve ( min , min ) ; }
Code	{ return ( ( f ) this ) . solve ( min , min ) ; }
Distance : 8

97
Tree	{ return x.length . solve ( min ) ; }
Code	{ return x.length . solve ( min ) ; }
Distance : 6

98
Tree	{ return org.joda.time.gwt.util.Arrays . solve ( min ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . solve ( min ) ; }
Distance : 6

99
Tree	{ return solve ( min . solve ( min ) ) ; }
Code	{ return solve ( min . solve ( min ) ) ; }
Distance : 6

100
Tree	{ return solve ( min , super(); ) ; }
Code	{ return solve ( min , super(); ) ; }
Distance : 3

101
Tree	{ return min . solve ( this , min ) ; }
Code	{ return min . solve ( this , min ) ; }
Distance : 5

102
Tree	{ return f . solve ( f , max ) ; }
Code	{ return f . solve ( f , max ) ; }
Distance : 4

103
Tree	{ return f . solve ( min , null , min ) ; }
Code	{ return f . solve ( min , null , min ) ; }
Distance : 5

104
Tree	{ return solve ( f - NUMBER_CONSTANT , min ) ; }
Code	{ return solve ( f - NUMBER_CONSTANT , min ) ; }
Distance : 3

105
Tree	{ return solve ( min , f - NUMBER_CONSTANT ) ; }
Code	{ return solve ( min , f - NUMBER_CONSTANT ) ; }
Distance : 4

106
Tree	{ return min . solve () . solve ( min , max ) ; }
Code	{ return min . solve () . solve ( min , max ) ; }
Distance : 6

107
Tree	{ return f . solve ( min , f ) ; }
Code	{ return f . solve ( min , f ) ; }
Distance : 5

108
Tree	{ return max . solve ( this , min ) ; }
Code	{ return max . solve ( this , min ) ; }
Distance : 5

109
Tree	{ return f . solve ( f , null , min ) ; }
Code	{ return f . solve ( f , null , min ) ; }
Distance : 4

110
Tree	{ return solve ( f - NUMBER_CONSTANT , max ) ; }
Code	{ return solve ( f - NUMBER_CONSTANT , max ) ; }
Distance : 2

111
Tree	{ return solve ( min , super(); , max ) ; }
Code	{ return solve ( min , super(); , max ) ; }
Distance : 2

112
Tree	{ return min . solve ( f ) ; }
Code	{ return min . solve ( f ) ; }
Distance : 6

113
Tree	{ return max . solve ( this , f ) ; }
Code	{ return max . solve ( this , f ) ; }
Distance : 6

114
Tree	{ return solve ( min . solve ( max ) , max ) ; }
Code	{ return solve ( min . solve ( max ) , max ) ; }
Distance : 6

115
Tree	{ return solve ( f , max , min , false ) ; }
Code	{ return solve ( f , max , min , false ) ; }
Distance : 3

116
Tree	{ return min . solve () . solve ( min , min ) ; }
Code	{ return min . solve () . solve ( min , min ) ; }
Distance : 7

117
Tree	{ return solve ( min . solve ( min ) , min ) ; }
Code	{ return solve ( min . solve ( min ) , min ) ; }
Distance : 6

118
Tree	{ return solve ( solve () , solve ( max ) ) ; } &&
Code	{ return solve ( solve () , solve ( max ) ) ; } &&
Distance : 6

119
Tree	{ return isUnionType . solve ( min ) ; }
Code	{ return isUnionType . solve ( min ) ; }
Distance : 6

120
Tree	{ return solve ( max , return; ) ; }
Code	{ return solve ( max , return; ) ; }
Distance : 4

121
Tree	{ return f . solve () . solve ( max , min ) ; }
Code	{ return f . solve () . solve ( max , min ) ; }
Distance : 8

122
Tree	{ return solve ( max , super(); ) ; }
Code	{ return solve ( max , super(); ) ; }
Distance : 4

123
Tree	{ return f . solve ( f , null , max ) ; }
Code	{ return f . solve ( f , null , max ) ; }
Distance : 3

124
Tree	{ return ebeDivide . solve ( min , max , max ) ; }
Code	{ return ebeDivide . solve ( min , max , max ) ; }
Distance : 4

125
Tree	{ return solve ( max . solve ( min ) , max ) ; }
Code	{ return solve ( max . solve ( min ) , max ) ; }
Distance : 5

126
Tree	{ return min . solve ( min , null , max ) ; }
Code	{ return min . solve ( min , null , max ) ; }
Distance : 4

127
Tree	{ return min . solve ( min ) ; }
Code	{ return min . solve ( min ) ; }
Distance : 6

128
Tree	{ return solve ( f . solve () , min ) ; }
Code	{ return solve ( f . solve () , min ) ; }
Distance : 4

129
Tree	{ return solve ( min . solve ( max ) ) ; }
Code	{ return solve ( min . solve ( max ) ) ; }
Distance : 5

130
Tree	{ return solve ( max , min - NUMBER_CONSTANT ) ; }
Code	{ return solve ( max , min - NUMBER_CONSTANT ) ; }
Distance : 3

131
Tree	{ return f . solve () . solve ( f , min ) ; }
Code	{ return f . solve () . solve ( f , min ) ; }
Distance : 7

132
Tree	{ return solve ( solve () , solve ( max ) ) ; } p
Code	{ return solve ( solve () , solve ( max ) ) ; } p
Distance : 6

133
Tree	{ return solve ( solve () , solve ( max ) ) ; } toString
Code	{ return solve ( solve () , solve ( max ) ) ; } toString
Distance : 6

134
Tree	{ return solve ( min . solve () , max ) ; } wanted
Code	{ return solve ( min . solve () , max ) ; } wanted
Distance : 5

135
Tree	{ return solve ( min , max ) ; }
Code	{ return solve ( min , max ) ; }
Distance : 2

136
Tree	{ return solve ( min , null ) ; }
Code	{ return solve ( min , null ) ; }
Distance : 3

137
Tree	{ return solve . solve ( min , min , max ) ; }
Code	{ return solve . solve ( min , min , max ) ; }
Distance : 3

138
Tree	{ return solve ( min , max - NUMBER_CONSTANT ) ; }
Code	{ return solve ( min , max - NUMBER_CONSTANT ) ; }
Distance : 4

139
Tree	{ return ebeMultiply . solve ( min ) ; }
Code	{ return ebeMultiply . solve ( min ) ; }
Distance : 6

140
Tree	{ return ( ( f ) this ) . solve ( min , max ) ; }
Code	{ return ( ( f ) this ) . solve ( min , max ) ; }
Distance : 7

141
Tree	{ return f . solve ( this , min ) ; }
Code	{ return f . solve ( this , min ) ; }
Distance : 5

142
Tree	{ return f . solve () . solve ( min , min ) ; }
Code	{ return f . solve () . solve ( min , min ) ; }
Distance : 7

143
Tree	{ return solve ( max , min ) ; }
Code	{ return solve ( max , min ) ; }
Distance : 3

144
Tree	{ return solve ( max , max , max , false ) ; }
Code	{ return solve ( max , max , max , false ) ; }
Distance : 4

145
Tree	{ return solve ( min , max , max ) ; }
Code	{ return solve ( min , max , max ) ; }
Distance : 2

146
Tree	{ return solve ( min , null , min ) ; }
Code	{ return solve ( min , null , min ) ; }
Distance : 3

147
Tree	{ return solve ( f , max , max , false ) ; }
Code	{ return solve ( f , max , max , false ) ; }
Distance : 3

148
Tree	{ return Coordinates3D . solve ( min ) ; }
Code	{ return Coordinates3D . solve ( min ) ; }
Distance : 6

149
Tree	{ return solve ( max , max , min ) ; }
Code	{ return solve ( max , max , min ) ; }
Distance : 3

150
Tree	{ return solve ( max , null , max ) ; }
Code	{ return solve ( max , null , max ) ; }
Distance : 2

151
Tree	{ return solve ( min , max , max , false ) ; }
Code	{ return solve ( min , max , max , false ) ; }
Distance : 4

152
Tree	{ return solve . solve ( min , max , max ) ; }
Code	{ return solve . solve ( min , max , max ) ; }
Distance : 4

153
Tree	{ return f . solve ( max , max ) ; }
Code	{ return f . solve ( max , max ) ; }
Distance : 5

154
Tree	{ return solve ( f , min ) ; }
Code	{ return solve ( f , min ) ; }
Distance : 2

155
Tree	{ return org.joda.time.gwt.util.Arrays . solve ( min , max , max ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . solve ( min , max , max ) ; }
Distance : 4

156
Tree	{ return solve ( max , max , max , null ) ; }
Code	{ return solve ( max , max , max , null ) ; }
Distance : 4

157
Tree	{ return ( ( min ) this ) . solve ( min , max ) ; }
Code	{ return ( ( min ) this ) . solve ( min , max ) ; }
Distance : 8

158
Tree	{ return f . solve () . solve ( max , max ) ; }
Code	{ return f . solve () . solve ( max , max ) ; }
Distance : 7

159
Tree	{ return solve ( min , null , max ) ; }
Code	{ return solve ( min , null , max ) ; }
Distance : 2

160
Tree	{ return min . solve ( min , min ) ; }
Code	{ return min . solve ( min , min ) ; }
Distance : 5

161
Tree	{ return solve ( min , max , min , null ) ; }
Code	{ return solve ( min , max , min , null ) ; }
Distance : 4

162
Tree	{ return replaceFirst . solve ( min ) ; }
Code	{ return replaceFirst . solve ( min ) ; }
Distance : 6

163
Tree	{ return Double.NaN . solve ( min ) ; }
Code	{ return Double.NaN . solve ( min ) ; }
Distance : 6

164
Tree	{ return solve ( min , f ) ; }
Code	{ return solve ( min , f ) ; }
Distance : 3

165
Tree	{ return solve ( f , null , max ) ; }
Code	{ return solve ( f , null , max ) ; }
Distance : 1

166
Tree	{ return solve ( min , max , max , null ) ; }
Code	{ return solve ( min , max , max , null ) ; }
Distance : 4

167
Tree	{ return solve ( max - NUMBER_CONSTANT , f ) ; }
Code	{ return solve ( max - NUMBER_CONSTANT , f ) ; }
Distance : 4

168
Tree	{ return solver . solve ( min , max , max ) ; }
Code	{ return solver . solve ( min , max , max ) ; }
Distance : 4

169
Tree	{ return solve ( f - NUMBER_CONSTANT , f ) ; }
Code	{ return solve ( f - NUMBER_CONSTANT , f ) ; }
Distance : 3

170
Tree	{ return ( ( max ) this ) . solve ( min , max ) ; }
Code	{ return ( ( max ) this ) . solve ( min , max ) ; }
Distance : 8

171
Tree	{ return solve ( min - NUMBER_CONSTANT , min ) ; }
Code	{ return solve ( min - NUMBER_CONSTANT , min ) ; }
Distance : 4

172
Tree	{ return solve ( f , min - NUMBER_CONSTANT ) ; }
Code	{ return solve ( f , min - NUMBER_CONSTANT ) ; }
Distance : 2

173
Tree	{ return f . solve () . solve ( min , max ) ; }
Code	{ return f . solve () . solve ( min , max ) ; }
Distance : 6

174
Tree	{ return solve ( max - NUMBER_CONSTANT , max ) ; }
Code	{ return solve ( max - NUMBER_CONSTANT , max ) ; }
Distance : 3

175
Tree	{ return f . solve ( f ) ; }
Code	{ return f . solve ( f ) ; }
Distance : 6

176
Tree	{ return f . solve ( min , min ) ; }
Code	{ return f . solve ( min , min ) ; }
Distance : 5

177
Tree	{ return solve ( f , max , min ) ; }
Code	{ return solve ( f , max , min ) ; }
Distance : 2

178
Tree	{ return solve ( max , min , max , false ) ; }
Code	{ return solve ( max , min , max , false ) ; }
Distance : 3

179
Tree	{ return solve ( min , continue; ) ; }
Code	{ return solve ( min , continue; ) ; }
Distance : 3

180
Tree	{ return solve ( max , f ) ; }
Code	{ return solve ( max , f ) ; }
Distance : 4

181
Tree	{ return solve ( solve () , solve ( max ) ) ; } Preconditions
Code	{ return solve ( solve () , solve ( max ) ) ; } Preconditions
Distance : 6

182
Tree	{ return solve ( solve () , solve ( max ) ) ; } ParamChecks
Code	{ return solve ( solve () , solve ( max ) ) ; } ParamChecks
Distance : 6

183
Tree	{ return solve ( max , f - NUMBER_CONSTANT ) ; }
Code	{ return solve ( max , f - NUMBER_CONSTANT ) ; }
Distance : 4

184
Tree	{ return solve ( max . solve ( min ) ) ; }
Code	{ return solve ( max . solve ( min ) ) ; }
Distance : 6

185
Tree	{ return min . solve () . solve ( f , max ) ; }
Code	{ return min . solve () . solve ( f , max ) ; }
Distance : 7

186
Tree	{ return f . solve ( min ) ; } wanted
Code	{ return f . solve ( min ) ; } wanted
Distance : 7

187
Tree	{ return solve ( min - NUMBER_CONSTANT , max ) ; } wanted
Code	{ return solve ( min - NUMBER_CONSTANT , max ) ; } wanted
Distance : 4

188
Tree	{ return solve ( min , max - NUMBER_CONSTANT ) ; } wanted
Code	{ return solve ( min , max - NUMBER_CONSTANT ) ; } wanted
Distance : 5

189
Tree	{ return solve ( min - NUMBER_CONSTANT , max ) ; }
Code	{ return solve ( min - NUMBER_CONSTANT , max ) ; }
Distance : 3

190
Tree	{ return x.length . solve ( min , max , max ) ; }
Code	{ return x.length . solve ( min , max , max ) ; }
Distance : 4

191
Tree	{ return solve ( max , max , max ) ; }
Code	{ return solve ( max , max , max ) ; }
Distance : 2

192
Tree	{ return replaceFirst . solve ( min , max , max ) ; }
Code	{ return replaceFirst . solve ( min , max , max ) ; }
Distance : 4

193
Tree	{ return f . solve ( this , max ) ; }
Code	{ return f . solve ( this , max ) ; }
Distance : 5

194
Tree	{ return solve ( f , max , max , null ) ; }
Code	{ return solve ( f , max , max , null ) ; }
Distance : 3

195
Tree	{ return ( ( min ) this ) . solve ( f , min ) ; }
Code	{ return ( ( min ) this ) . solve ( f , min ) ; }
Distance : 9

196
Tree	{ return solve ( min , break; ) ; }
Code	{ return solve ( min , break; ) ; }
Distance : 3

197
Tree	{ return max . solve ( f ) ; }
Code	{ return max . solve ( f ) ; }
Distance : 6

198
Tree	{ return f . solve ( this , min ) ; } wanted
Code	{ return f . solve ( this , min ) ; } wanted
Distance : 6

199
Tree	{ return solve ( solve () , solve ( max ) ) ; } Class
Code	{ return solve ( solve () , solve ( max ) ) ; } Class
Distance : 6

========================================================================


========================================================================
Example Number: 58
Parent Code is: 
out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - tDistribution . cumulativeProbability ( t ) ) ;
-------------------------------------------------------------------------------
Child code is: 
out [ i ] [ j ] = NUMBER_CONSTANT * tDistribution . cumulativeProbability ( - t ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (2 (2 (801{val=out}) (221{val=[}) (800{val=i}) (222{val=]})) (221{val=[}) (800{val=j}) (222{val=]})) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (36 (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (201{val=-}) (32 (800{val=tDistribution}) (235{val=.}) (802{val=cumulativeProbability}) (214{val=(}) (800{val=t}) (215{val=)}))) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (2 (2 (801{val=out}) (221{val=[}) (800{val=i}) (222{val=]})) (221{val=[}) (800{val=j}) (222{val=]})) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (32 (800{val=tDistribution}) (235{val=.}) (802{val=cumulativeProbability}) (214{val=(}) (38 (201{val=-}) (800{val=t})) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/69/parent/src_main_java_org_apache_commons_math_stat_correlation_PearsonsCorrelation.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	tDistribution += j / ( t != t . cumulativeProbability ( t ) ) ;
Code	tDistribution += j / ( t != t . cumulativeProbability ( t ) ) ;
Distance : 12

1
Tree	j += i && ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	j += i && ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 10

2
Tree	t += i / ( t != t . cumulativeProbability ( t ) ) ;
Code	t += i / ( t != t . cumulativeProbability ( t ) ) ;
Distance : 12

3
Tree	tDistribution += i / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Code	tDistribution += i / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Distance : 13

4
Tree	j = ( ( i != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Code	j = ( ( i != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Distance : 18

5
Tree	j += j / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Code	j += j / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Distance : 13

6
Tree	i += j / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Code	i += j / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Distance : 12

7
Tree	i = ( ( i != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Code	i = ( ( i != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Distance : 18

8
Tree	tDistribution += i && ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	tDistribution += i && ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 10

9
Tree	i += i && ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	i += i && ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 10

10
Tree	j = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	j = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

11
Tree	i = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	i = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

12
Tree	j += i / ( t . cumulativeProbability ( j ) > > > NUMBER_CONSTANT ) ;
Code	j += i / ( t . cumulativeProbability ( j ) > > > NUMBER_CONSTANT ) ;
Distance : 15

13
Tree	t += i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	t += i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 10

14
Tree	i += i / ( t . cumulativeProbability ( j ) > > > NUMBER_CONSTANT ) ;
Code	i += i / ( t . cumulativeProbability ( j ) > > > NUMBER_CONSTANT ) ;
Distance : 15

15
Tree	t += i / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Code	t += i / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Distance : 13

16
Tree	j += i && ( t != j . cumulativeProbability ( t ) ) ;
Code	j += i && ( t != j . cumulativeProbability ( t ) ) ;
Distance : 12

17
Tree	t += i && ( t != j . cumulativeProbability ( t ) ) ;
Code	t += i && ( t != j . cumulativeProbability ( t ) ) ;
Distance : 12

18
Tree	tDistribution += i && ( t != j . cumulativeProbability ( t ) ) ;
Code	tDistribution += i && ( t != j . cumulativeProbability ( t ) ) ;
Distance : 12

19
Tree	i += i && ( t != t . cumulativeProbability ( t ) ) ;
Code	i += i && ( t != t . cumulativeProbability ( t ) ) ;
Distance : 12

20
Tree	j = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * j ) ;
Code	j = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * j ) ;
Distance : 19

21
Tree	tDistribution = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

22
Tree	tDistribution = ( i != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Code	tDistribution = ( i != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Distance : 15

23
Tree	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

24
Tree	t += j / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	t += j / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 16

25
Tree	t += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	t += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

26
Tree	j += i / ( t != t . cumulativeProbability ( t ) ) ;
Code	j += i / ( t != t . cumulativeProbability ( t ) ) ;
Distance : 12

27
Tree	i += i / ( t != t . cumulativeProbability ( t ) ) ;
Code	i += i / ( t != t . cumulativeProbability ( t ) ) ;
Distance : 12

28
Tree	j = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

29
Tree	j += i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	j += i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 10

30
Tree	i += i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	i += i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 10

31
Tree	tDistribution += i / ( t != t . cumulativeProbability ( t ) ) ;
Code	tDistribution += i / ( t != t . cumulativeProbability ( t ) ) ;
Distance : 12

32
Tree	t = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	t = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

33
Tree	j = ( ( verifierStub.invocations == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( verifierStub.invocations == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

34
Tree	i = ( ( MathUtils.TWO_PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( MathUtils.TWO_PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

35
Tree	i = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

36
Tree	tDistribution += i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	tDistribution += i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 10

37
Tree	j = ( ( config.parseTypeSyntax == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( config.parseTypeSyntax == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

38
Tree	j += i / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Code	j += i / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Distance : 13

39
Tree	i += i / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Code	i += i / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Distance : 13

40
Tree	j += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	j += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

41
Tree	i += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	i += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

42
Tree	tDistribution += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	tDistribution += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

43
Tree	t += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	t += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

44
Tree	j += j / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	j += j / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 16

45
Tree	i += j / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	i += j / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

46
Tree	tDistribution += j / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	tDistribution += j / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 16

47
Tree	j += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	j += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

48
Tree	tDistribution += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	tDistribution += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

49
Tree	i += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	i += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

50
Tree	j = ( ( FastMath.PI == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	j = ( ( FastMath.PI == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 16

51
Tree	i = ( ( FastMath.PI == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	i = ( ( FastMath.PI == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 16

52
Tree	tDistribution = ( ( FastMath.PI == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( FastMath.PI == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 16

53
Tree	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 16

54
Tree	j = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	j = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 16

55
Tree	t = ( ( FastMath.PI == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	t = ( ( FastMath.PI == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 16

56
Tree	i = ( ( MathUtils.TWO_PI == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	i = ( ( MathUtils.TWO_PI == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 16

57
Tree	j = ( ( config.parseTypeSyntax == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	j = ( ( config.parseTypeSyntax == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

58
Tree	t = ( ( i != i . cumulativeProbability ( t ) ) * % * / * tDistribution ) ;
Code	t = ( ( i != i . cumulativeProbability ( t ) ) * % * / * tDistribution ) ;
Distance : 18

59
Tree	j = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Code	j = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Distance : 19

60
Tree	i = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Code	i = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Distance : 19

61
Tree	tDistribution = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Code	tDistribution = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Distance : 19

62
Tree	j += i && ( NUMBER_CONSTANT + j . cumulativeProbability ( t ) ) ;
Code	j += i && ( NUMBER_CONSTANT + j . cumulativeProbability ( t ) ) ;
Distance : 11

63
Tree	j += i / ( t != t . cumulativeProbability ( j ) ) ;
Code	j += i / ( t != t . cumulativeProbability ( j ) ) ;
Distance : 12

64
Tree	j = ( ( verifierStub.invocations == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	j = ( ( verifierStub.invocations == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 16

65
Tree	i = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	i = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 16

66
Tree	j += i / ( j != t . cumulativeProbability ( t ) ) ;
Code	j += i / ( j != t . cumulativeProbability ( t ) ) ;
Distance : 11

67
Tree	j = ( ( config.parseTypeSyntax == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	j = ( ( config.parseTypeSyntax == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 16

68
Tree	t = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Code	t = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Distance : 19

69
Tree	tDistribution += i && ( NUMBER_CONSTANT + j . cumulativeProbability ( t ) ) ;
Code	tDistribution += i && ( NUMBER_CONSTANT + j . cumulativeProbability ( t ) ) ;
Distance : 11

70
Tree	j += i && ( t != t . cumulativeProbability ( t ) ) ;
Code	j += i && ( t != t . cumulativeProbability ( t ) ) ;
Distance : 12

71
Tree	i += i && ( t != j . cumulativeProbability ( t ) ) ;
Code	i += i && ( t != j . cumulativeProbability ( t ) ) ;
Distance : 12

72
Tree	j += j && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	j += j && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 16

73
Tree	i += j && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	i += j && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

74
Tree	tDistribution += i && ( t != t . cumulativeProbability ( t ) ) ;
Code	tDistribution += i && ( t != t . cumulativeProbability ( t ) ) ;
Distance : 12

75
Tree	tDistribution += j && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	tDistribution += j && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 16

76
Tree	j += i / ( NUMBER_CONSTANT + j . cumulativeProbability ( t ) ) ;
Code	j += i / ( NUMBER_CONSTANT + j . cumulativeProbability ( t ) ) ;
Distance : 11

77
Tree	j += i / ( t . cumulativeProbability ( t ) - j ) ;
Code	j += i / ( t . cumulativeProbability ( t ) - j ) ;
Distance : 13

78
Tree	i += i / ( NUMBER_CONSTANT + j . cumulativeProbability ( t ) ) ;
Code	i += i / ( NUMBER_CONSTANT + j . cumulativeProbability ( t ) ) ;
Distance : 11

79
Tree	i += i / ( t . cumulativeProbability ( t ) - j ) ;
Code	i += i / ( t . cumulativeProbability ( t ) - j ) ;
Distance : 13

80
Tree	tDistribution /= cumulativeProbability () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Code	tDistribution /= cumulativeProbability () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Distance : 14

81
Tree	t /= cumulativeProbability () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Code	t /= cumulativeProbability () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Distance : 14

82
Tree	j /= cumulativeProbability () [ ( t . cumulativeProbability ( t ) / j ) ;
Code	j /= cumulativeProbability () [ ( t . cumulativeProbability ( t ) / j ) ;
Distance : 14

83
Tree	tDistribution /= cumulativeProbability () [ ( t . cumulativeProbability ( t ) / j ) ;
Code	tDistribution /= cumulativeProbability () [ ( t . cumulativeProbability ( t ) / j ) ;
Distance : 14

84
Tree	i /= cumulativeProbability () [ ( t . cumulativeProbability ( t ) / j ) ;
Code	i /= cumulativeProbability () [ ( t . cumulativeProbability ( t ) / j ) ;
Distance : 14

85
Tree	t /= cumulativeProbability () [ ( t . cumulativeProbability ( t ) / j ) ;
Code	t /= cumulativeProbability () [ ( t . cumulativeProbability ( t ) / j ) ;
Distance : 14

86
Tree	i += cumulativeProbability () out ( t . cumulativeProbability ( t ) / t ) ;
Code	i += cumulativeProbability () out ( t . cumulativeProbability ( t ) / t ) ;
Distance : 13

87
Tree	tDistribution = ( ( i != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Code	tDistribution = ( ( i != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Distance : 18

88
Tree	j += cumulativeProbability () out ( t . cumulativeProbability ( t ) / t ) ;
Code	j += cumulativeProbability () out ( t . cumulativeProbability ( t ) / t ) ;
Distance : 14

89
Tree	j = ( tDistribution & ( j . cumulativeProbability ( t ) / tDistribution ) ) ;
Code	j = ( tDistribution & ( j . cumulativeProbability ( t ) / tDistribution ) ) ;
Distance : 16

90
Tree	j += j && ( t != j . cumulativeProbability ( t ) ) ;
Code	j += j && ( t != j . cumulativeProbability ( t ) ) ;
Distance : 12

91
Tree	t += j / ( t != t . cumulativeProbability ( t ) ) ;
Code	t += j / ( t != t . cumulativeProbability ( t ) ) ;
Distance : 12

92
Tree	i = ( tDistribution & ( j . cumulativeProbability ( t ) / tDistribution ) ) ;
Code	i = ( tDistribution & ( j . cumulativeProbability ( t ) / tDistribution ) ) ;
Distance : 15

93
Tree	j = ( ( i != i . cumulativeProbability ( t ) ) * % * / * tDistribution ) ;
Code	j = ( ( i != i . cumulativeProbability ( t ) ) * % * / * tDistribution ) ;
Distance : 18

94
Tree	tDistribution /= cumulativeProbability () [ ( t . cumulativeProbability ( t ) / t ) ;
Code	tDistribution /= cumulativeProbability () [ ( t . cumulativeProbability ( t ) / t ) ;
Distance : 13

95
Tree	j /= cumulativeProbability () [ ( t . cumulativeProbability ( t ) / t ) ;
Code	j /= cumulativeProbability () [ ( t . cumulativeProbability ( t ) / t ) ;
Distance : 13

96
Tree	i = ( ( i != i . cumulativeProbability ( t ) ) * % * / * tDistribution ) ;
Code	i = ( ( i != i . cumulativeProbability ( t ) ) * % * / * tDistribution ) ;
Distance : 18

97
Tree	tDistribution += j && ( t != j . cumulativeProbability ( t ) ) ;
Code	tDistribution += j && ( t != j . cumulativeProbability ( t ) ) ;
Distance : 12

98
Tree	tDistribution = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	tDistribution = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

99
Tree	t += i && ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	t += i && ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 10

100
Tree	j += i && ( t . cumulativeProbability ( j ) > > > NUMBER_CONSTANT ) ;
Code	j += i && ( t . cumulativeProbability ( j ) > > > NUMBER_CONSTANT ) ;
Distance : 15

101
Tree	tDistribution = ( tDistribution & ( j . cumulativeProbability ( t ) / tDistribution ) ) ;
Code	tDistribution = ( tDistribution & ( j . cumulativeProbability ( t ) / tDistribution ) ) ;
Distance : 16

102
Tree	t += j && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	t += j && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 16

103
Tree	t = ( ( i != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Code	t = ( ( i != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Distance : 18

104
Tree	tDistribution += i / ( NUMBER_CONSTANT + j . cumulativeProbability ( t ) ) ;
Code	tDistribution += i / ( NUMBER_CONSTANT + j . cumulativeProbability ( t ) ) ;
Distance : 11

105
Tree	i = ( j & ( j . cumulativeProbability ( t ) / tDistribution ) ) ;
Code	i = ( j & ( j . cumulativeProbability ( t ) / tDistribution ) ) ;
Distance : 14

106
Tree	tDistribution += i / ( t . cumulativeProbability ( t ) - j ) ;
Code	tDistribution += i / ( t . cumulativeProbability ( t ) - j ) ;
Distance : 13

107
Tree	j = ( j & ( j . cumulativeProbability ( t ) / tDistribution ) ) ;
Code	j = ( j & ( j . cumulativeProbability ( t ) / tDistribution ) ) ;
Distance : 15

108
Tree	j = ( tDistribution & ( j . cumulativeProbability ( t ) / j ) ) ;
Code	j = ( tDistribution & ( j . cumulativeProbability ( t ) / j ) ) ;
Distance : 16

109
Tree	j += j / ( t != t . cumulativeProbability ( t ) ) ;
Code	j += j / ( t != t . cumulativeProbability ( t ) ) ;
Distance : 12

110
Tree	t += i / ( NUMBER_CONSTANT + j . cumulativeProbability ( t ) ) ;
Code	t += i / ( NUMBER_CONSTANT + j . cumulativeProbability ( t ) ) ;
Distance : 11

111
Tree	j = ( j & ( j . cumulativeProbability ( t ) / j ) ) ;
Code	j = ( j & ( j . cumulativeProbability ( t ) / j ) ) ;
Distance : 15

112
Tree	j = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	j = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

113
Tree	i = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	i = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

114
Tree	t += i && ( t != t . cumulativeProbability ( t ) ) ;
Code	t += i && ( t != t . cumulativeProbability ( t ) ) ;
Distance : 12

115
Tree	tDistribution = ( j & ( j . cumulativeProbability ( t ) / tDistribution ) ) ;
Code	tDistribution = ( j & ( j . cumulativeProbability ( t ) / tDistribution ) ) ;
Distance : 15

116
Tree	i = ( j & ( j . cumulativeProbability ( t ) / j ) ) ;
Code	i = ( j & ( j . cumulativeProbability ( t ) / j ) ) ;
Distance : 14

117
Tree	tDistribution = ( j & ( j . cumulativeProbability ( t ) / j ) ) ;
Code	tDistribution = ( j & ( j . cumulativeProbability ( t ) / j ) ) ;
Distance : 15

118
Tree	j = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	j = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

119
Tree	j += cumulativeProbability () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Code	j += cumulativeProbability () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Distance : 14

120
Tree	i += cumulativeProbability () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Code	i += cumulativeProbability () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Distance : 14

121
Tree	tDistribution += cumulativeProbability () out ( t . cumulativeProbability ( t ) / tDistribution ) ;
Code	tDistribution += cumulativeProbability () out ( t . cumulativeProbability ( t ) / tDistribution ) ;
Distance : 15

122
Tree	t += cumulativeProbability () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Code	t += cumulativeProbability () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Distance : 14

123
Tree	i = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	i = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

124
Tree	j += cumulativeProbability () [ ( t . cumulativeProbability ( t ) / j ) ;
Code	j += cumulativeProbability () [ ( t . cumulativeProbability ( t ) / j ) ;
Distance : 14

125
Tree	i += cumulativeProbability () out ( t . cumulativeProbability ( t ) / j ) ;
Code	i += cumulativeProbability () out ( t . cumulativeProbability ( t ) / j ) ;
Distance : 14

126
Tree	tDistribution += cumulativeProbability () [ ( t . cumulativeProbability ( t ) / j ) ;
Code	tDistribution += cumulativeProbability () [ ( t . cumulativeProbability ( t ) / j ) ;
Distance : 14

127
Tree	j = ( ( i . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Code	j = ( ( i . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Distance : 18

128
Tree	tDistribution = ( tDistribution != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Code	tDistribution = ( tDistribution != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Distance : 15

129
Tree	tDistribution = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	tDistribution = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

130
Tree	i = ( ( i . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Code	i = ( ( i . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Distance : 18

131
Tree	j = ( j != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Code	j = ( j != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Distance : 15

132
Tree	i += j / ( t != t . cumulativeProbability ( t ) ) ;
Code	i += j / ( t != t . cumulativeProbability ( t ) ) ;
Distance : 11

133
Tree	t += cumulativeProbability () [ ( t . cumulativeProbability ( t ) / j ) ;
Code	t += cumulativeProbability () [ ( t . cumulativeProbability ( t ) / j ) ;
Distance : 14

134
Tree	j = ( ( verifierStub.invocations == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	j = ( ( verifierStub.invocations == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

135
Tree	tDistribution = ( ( i . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Code	tDistribution = ( ( i . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Distance : 18

136
Tree	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

137
Tree	j = ( ( FastMath.PI == tDistribution ) * ( f.length == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	j = ( ( FastMath.PI == tDistribution ) * ( f.length == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

138
Tree	i = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	i = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

139
Tree	j = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	j = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

140
Tree	j /= cumulativeProbability () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Code	j /= cumulativeProbability () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Distance : 14

141
Tree	i /= cumulativeProbability () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Code	i /= cumulativeProbability () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Distance : 14

142
Tree	j += j / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	j += j / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 10

143
Tree	t += i / ( t . cumulativeProbability ( t ) - j ) ;
Code	t += i / ( t . cumulativeProbability ( t ) - j ) ;
Distance : 13

144
Tree	t = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	t = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

145
Tree	i += i && ( NUMBER_CONSTANT + j . cumulativeProbability ( t ) ) ;
Code	i += i && ( NUMBER_CONSTANT + j . cumulativeProbability ( t ) ) ;
Distance : 11

146
Tree	j = ( ( j . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Code	j = ( ( j . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Distance : 20

147
Tree	i = ( ( MathUtils.TWO_PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	i = ( ( MathUtils.TWO_PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

148
Tree	i += j / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	i += j / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 9

149
Tree	tDistribution = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	tDistribution = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

150
Tree	tDistribution = ( ( i != i . cumulativeProbability ( t ) ) * % * / * tDistribution ) ;
Code	tDistribution = ( ( i != i . cumulativeProbability ( t ) ) * % * / * tDistribution ) ;
Distance : 18

151
Tree	i = ( ( j . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Code	i = ( ( j . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Distance : 20

152
Tree	tDistribution += i && ( t . cumulativeProbability ( j ) > > > NUMBER_CONSTANT ) ;
Code	tDistribution += i && ( t . cumulativeProbability ( j ) > > > NUMBER_CONSTANT ) ;
Distance : 15

153
Tree	i = ( ( FastMath.PI == tDistribution ) * ( f.length == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	i = ( ( FastMath.PI == tDistribution ) * ( f.length == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

154
Tree	j = ( ( config.parseTypeSyntax == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	j = ( ( config.parseTypeSyntax == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

155
Tree	j = ( ( j != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Code	j = ( ( j != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Distance : 18

156
Tree	j = ( ( FastMath.PI == tDistribution ) * ( MathUtils.TWO_PI == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	j = ( ( FastMath.PI == tDistribution ) * ( MathUtils.TWO_PI == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

157
Tree	t += i && ( NUMBER_CONSTANT + j . cumulativeProbability ( t ) ) ;
Code	t += i && ( NUMBER_CONSTANT + j . cumulativeProbability ( t ) ) ;
Distance : 11

158
Tree	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

159
Tree	i = ( j != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Code	i = ( j != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Distance : 14

160
Tree	tDistribution = ( ( j . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Code	tDistribution = ( ( j . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Distance : 20

161
Tree	j = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	j = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

162
Tree	j += j && ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	j += j && ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 10

163
Tree	t = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	t = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

164
Tree	tDistribution = ( j != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Code	tDistribution = ( j != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Distance : 15

165
Tree	t = ( ( i . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Code	t = ( ( i . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Distance : 18

166
Tree	j = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

167
Tree	i = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

168
Tree	j = ( ( j . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Code	j = ( ( j . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Distance : 18

169
Tree	i = ( ( j . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Code	i = ( ( j . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Distance : 18

170
Tree	tDistribution = ( ( j . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Code	tDistribution = ( ( j . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Distance : 18

171
Tree	t = ( ( j . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Code	t = ( ( j . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Distance : 18

172
Tree	j = ( ( i . cumulativeProbability ( t ) - tDistribution ) * -= * / * tDistribution ) ;
Code	j = ( ( i . cumulativeProbability ( t ) - tDistribution ) * -= * / * tDistribution ) ;
Distance : 18

173
Tree	j = ( ( i . cumulativeProbability ( t ) - tDistribution ) * % * / * tDistribution ) ;
Code	j = ( ( i . cumulativeProbability ( t ) - tDistribution ) * % * / * tDistribution ) ;
Distance : 18

174
Tree	j = ( tDistribution != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Code	j = ( tDistribution != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Distance : 15

175
Tree	t = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	t = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

176
Tree	i = ( ( j != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Code	i = ( ( j != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Distance : 18

177
Tree	tDistribution = ( ( FastMath.PI == tDistribution ) * ( MathUtils.TWO_PI == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	tDistribution = ( ( FastMath.PI == tDistribution ) * ( MathUtils.TWO_PI == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

178
Tree	i += j && ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	i += j && ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 9

179
Tree	i = ( ( FastMath.PI == tDistribution ) * ( MathUtils.TWO_PI == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	i = ( ( FastMath.PI == tDistribution ) * ( MathUtils.TWO_PI == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

180
Tree	t = ( ( j . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Code	t = ( ( j . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Distance : 20

181
Tree	i = ( tDistribution != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Code	i = ( tDistribution != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Distance : 15

182
Tree	i = ( ( MathUtils.TWO_PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	i = ( ( MathUtils.TWO_PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

183
Tree	tDistribution = ( ( FastMath.PI == tDistribution ) * ( f.length == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	tDistribution = ( ( FastMath.PI == tDistribution ) * ( f.length == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

184
Tree	j = ( ( verifierStub.invocations == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	j = ( ( verifierStub.invocations == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

185
Tree	i = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	i = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

186
Tree	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

187
Tree	j = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	j = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

188
Tree	j = ( i != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Code	j = ( i != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Distance : 15

189
Tree	j = ( ( verifierStub.invocations == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	j = ( ( verifierStub.invocations == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

190
Tree	j = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * % * tDistribution ) ;
Code	j = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * % * tDistribution ) ;
Distance : 19

191
Tree	t = ( tDistribution != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Code	t = ( tDistribution != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Distance : 15

192
Tree	i = ( i != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Code	i = ( i != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Distance : 15

193
Tree	i = ( ( MathUtils.TWO_PI == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	i = ( ( MathUtils.TWO_PI == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

194
Tree	i = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	i = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

195
Tree	j = ( ( config.parseTypeSyntax == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	j = ( ( config.parseTypeSyntax == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

196
Tree	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( f.length == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( f.length == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

197
Tree	j = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( f.length == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	j = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( f.length == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

198
Tree	t = ( ( FastMath.PI == tDistribution ) * ( f.length == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	t = ( ( FastMath.PI == tDistribution ) * ( f.length == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

199
Tree	j = ( ( FastMath.PI == tDistribution ) * ( currentState.length == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	j = ( ( FastMath.PI == tDistribution ) * ( currentState.length == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

========================================================================


========================================================================
Example Number: 59
Parent Code is: 
if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.MEAN , p ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=p}) (252{val=<=}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (32 (800{val=MathRuntimeException}) (235{val=.}) (802{val=createIllegalArgumentException}) (214{val=(}) (40{val=LocalizedFormats.NOT_POSITIVE_POISSON_MEAN}) (234{val=,}) (800{val=p}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=p}) (252{val=<=}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=NotStrictlyPositiveException})) (214{val=(}) (40{val=LocalizedFormats.MEAN}) (234{val=,}) (800{val=p}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/61/parent/src_main_java_org_apache_commons_math_distribution_PoissonDistributionImpl.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	MathRuntimeException = new NotStrictlyPositiveException <> ( MathRuntimeException , p , p ) ;
Code	MathRuntimeException = new NotStrictlyPositiveException <> ( MathRuntimeException , p , p ) ;
Distance : 13

1
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , MathRuntimeException ) ; }
Distance : 9

2
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 7

3
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , MathRuntimeException ) ; }
Distance : 4

4
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 3

5
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , true ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , true ) ; }
Distance : 7

6
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , <= , NUMBER_CONSTANT , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , <= , NUMBER_CONSTANT , true ) ; }
Distance : 6

7
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , MathRuntimeException ) ; }
Distance : 5

8
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , true ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , true ) ; }
Distance : 5

9
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( MathRuntimeException ) ; }
Distance : 6

10
Tree	MathRuntimeException = new NotStrictlyPositiveException <> ( MathRuntimeException , p , MathRuntimeException ) ;
Code	MathRuntimeException = new NotStrictlyPositiveException <> ( MathRuntimeException , p , MathRuntimeException ) ;
Distance : 13

11
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , <= ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , <= ) ; }
Distance : 3

12
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , MathRuntimeException ) ; }
Distance : 3

13
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ; } wanted
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ; } wanted
Distance : 5

14
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Math
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Math
Distance : 2

15
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } wanted
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } wanted
Distance : 6

16
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } Math
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } Math
Distance : 6

17
Tree	p = new NotStrictlyPositiveException <> ( MathRuntimeException , p , MathRuntimeException ) ;
Code	p = new NotStrictlyPositiveException <> ( MathRuntimeException , p , MathRuntimeException ) ;
Distance : 12

18
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } source
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } source
Distance : 3

19
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException ) ; }
Distance : 3

20
Tree	MathRuntimeException = new NotStrictlyPositiveException <> ( p , MathRuntimeException , p ) ;
Code	MathRuntimeException = new NotStrictlyPositiveException <> ( p , MathRuntimeException , p ) ;
Distance : 13

21
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , false ) ; }
Distance : 6

22
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false , false , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false , false , true ) ; }
Distance : 6

23
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ; }
Distance : 5

24
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , <= ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , <= ) ; }
Distance : 2

25
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p ) ; }
Distance : 3

26
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , STRING_CONSTANT ) ; }
Distance : 2

27
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Distance : 3

28
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , MathRuntimeException ) ; }
Distance : 3

29
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , true , false , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , true , false , false ) ; }
Distance : 6

30
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , MathRuntimeException ) ; }
Distance : 4

31
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ; }
Distance : 4

32
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p ) ; }
Distance : 2

33
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

34
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , true ) ; }
Distance : 6

35
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , false ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , false ) ; }
Distance : 7

36
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , <= , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , <= , NUMBER_CONSTANT , false ) ; }
Distance : 6

37
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException , false ) ; }
Distance : 5

38
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } options
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } options
Distance : 3

39
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Distance : 2

40
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; } &&
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; } &&
Distance : 3

41
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } Preconditions
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } Preconditions
Distance : 4

42
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; } source
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; } source
Distance : 3

43
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } p
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } p
Distance : 4

44
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; } options
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; } options
Distance : 3

45
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; } p
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; } p
Distance : 3

46
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; } toString
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; } toString
Distance : 3

47
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; } toString
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; } toString
Distance : 4

48
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } -
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } -
Distance : 4

49
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p ) ; } wanted
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p ) ; } wanted
Distance : 5

50
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } &&
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } &&
Distance : 4

51
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; } toString
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; } toString
Distance : 3

52
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; } source
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; } source
Distance : 4

53
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException , p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException , p , MathRuntimeException ) ; }
Distance : 7

54
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } T
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } T
Distance : 4

55
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , MathRuntimeException , p ) ; }
Distance : 7

56
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p ) ; }
Distance : 7

57
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , false ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , false ) ; }
Distance : 5

58
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Distance : 2

59
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , true ) ; }
Distance : 2

60
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 3

61
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , MathRuntimeException , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , MathRuntimeException , false ) ; }
Distance : 5

62
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , false ) ; }
Distance : 4

63
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 2

64
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , p , MathRuntimeException ) ; }
Distance : 7

65
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= ) ; }
Distance : 4

66
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; } options
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; } options
Distance : 4

67
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException ) ; }
Distance : 2

68
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false ) ; } wanted
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false ) ; } wanted
Distance : 3

69
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , MathRuntimeException ) ; }
Distance : 8

70
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , true ) ; }
Distance : 4

71
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 3

72
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } Test
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } Test
Distance : 4

73
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p , MathRuntimeException , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p , MathRuntimeException , MathRuntimeException ) ; }
Distance : 7

74
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p , true ) ; }
Distance : 5

75
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , <= ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , <= ) ; }
Distance : 3

76
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p ) ; }
Distance : 4

77
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Distance : 3

78
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , MathRuntimeException ) ; }
Distance : 3

79
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Distance : 3

80
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 4

81
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , MathRuntimeException , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , MathRuntimeException , p , false ) ; }
Distance : 5

82
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 2

83
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true , false , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true , false , false ) ; }
Distance : 6

84
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p ) ; }
Distance : 4

85
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 3

86
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , STRING_CONSTANT ) ; }
Distance : 2

87
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p ) ; }
Distance : 1

88
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p ) ; }
Distance : 1

89
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; } p
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; } p
Distance : 4

90
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 4

91
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , MathRuntimeException ) ; }
Distance : 2

92
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , <= ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , <= ) ; }
Distance : 2

93
Tree	p = new NotStrictlyPositiveException <> ( MathRuntimeException , p , p ) ;
Code	p = new NotStrictlyPositiveException <> ( MathRuntimeException , p , p ) ;
Distance : 12

94
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; } &&
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; } &&
Distance : 4

95
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , MathRuntimeException , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , MathRuntimeException , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

96
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , MathRuntimeException ) ; }
Distance : 8

97
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true , true , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true , true , false ) ; }
Distance : 6

98
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } Class
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } Class
Distance : 4

99
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , MathRuntimeException ) ; }
Distance : 2

100
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , false , false , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , false , false , false ) ; }
Distance : 6

101
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , STRING_CONSTANT ) ; }
Distance : 3

102
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 2

103
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } p
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } p
Distance : 3

104
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } MathRuntimeException
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } MathRuntimeException
Distance : 4

105
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException , MathRuntimeException , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException , MathRuntimeException , MathRuntimeException ) ; }
Distance : 7

106
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , p , p ) ; }
Distance : 7

107
Tree	MathRuntimeException = new NotStrictlyPositiveException <> ( p , p , p ) ;
Code	MathRuntimeException = new NotStrictlyPositiveException <> ( p , p , p ) ;
Distance : 13

108
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; } options
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; } options
Distance : 3

109
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Distance : 2

110
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; } p
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; } p
Distance : 3

111
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

112
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

113
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; } T
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; } T
Distance : 3

114
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true ) ; }
Distance : 2

115
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 1

116
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , true ) ; }
Distance : 6

117
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , NUMBER_CONSTANT , false ) ; }
Distance : 6

118
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p ) ; }
Distance : 7

119
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Distance : 1

120
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( MathRuntimeException ) ; }
Distance : 5

121
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , STRING_CONSTANT ) ; }
Distance : 3

122
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p ) ; }
Distance : 5

123
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , false ) ; }
Distance : 2

124
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Distance : 2

125
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false , false , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false , false , false ) ; }
Distance : 6

126
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , MathRuntimeException , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , MathRuntimeException , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 7

127
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException ) ; }
Distance : 3

128
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Distance : 2

129
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( p ) ; }
Distance : 4

130
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false ) ; }
Distance : 2

131
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , true ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , true ) ; }
Distance : 3

132
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false , false , false ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false , false , false ) ; }
Distance : 7

133
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , false ) ; }
Distance : 5

134
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Distance : 3

135
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , MathRuntimeException , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , MathRuntimeException , MathRuntimeException ) ; }
Distance : 7

136
Tree	p = new NotStrictlyPositiveException <> ( p , p , p ) ;
Code	p = new NotStrictlyPositiveException <> ( p , p , p ) ;
Distance : 12

137
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; } T
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; } T
Distance : 4

138
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p ) ; }
Distance : 7

139
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Distance : 3

140
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p , false ) ; }
Distance : 5

141
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , p , false ) ; }
Distance : 5

142
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p , MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p , MathRuntimeException , p ) ; }
Distance : 7

143
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } Math
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } Math
Distance : 3

144
Tree	MathRuntimeException = new NotStrictlyPositiveException <> ( p , p , MathRuntimeException ) ;
Code	MathRuntimeException = new NotStrictlyPositiveException <> ( p , p , MathRuntimeException ) ;
Distance : 13

145
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false ) ; }
Distance : 3

146
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } {}
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } {}
Distance : 4

147
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException ) ; }
Distance : 4

148
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; } &&
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; } &&
Distance : 3

149
Tree	p = new NotStrictlyPositiveException <> ( p , MathRuntimeException , p ) ;
Code	p = new NotStrictlyPositiveException <> ( p , MathRuntimeException , p ) ;
Distance : 12

150
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p , p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p , p , MathRuntimeException ) ; }
Distance : 7

151
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException ) ; }
Distance : 3

152
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } f
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } f
Distance : 4

153
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , false ) ; }
Distance : 6

154
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( p ) ; }
Distance : 5

155
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } &&
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } &&
Distance : 3

156
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , MathRuntimeException , p ) ; }
Distance : 3

157
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p , false ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p , false ) ; }
Distance : 6

158
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false , true , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false , true , false ) ; }
Distance : 6

159
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; } T
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; } T
Distance : 3

160
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ; } Math
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ; } Math
Distance : 5

161
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , false ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , false ) ; }
Distance : 6

162
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Distance : 4

163
Tree	p = new NotStrictlyPositiveException <> ( p , p , MathRuntimeException ) ;
Code	p = new NotStrictlyPositiveException <> ( p , p , MathRuntimeException ) ;
Distance : 12

164
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , true ) ; }
Distance : 5

165
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } toString
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } toString
Distance : 4

166
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , <= , NUMBER_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , <= , NUMBER_CONSTANT , p ) ; }
Distance : 7

167
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , p ) ; }
Distance : 3

168
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException ) ; }
Distance : 4

169
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

170
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } wanted
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } wanted
Distance : 3

171
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , NUMBER_CONSTANT , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , NUMBER_CONSTANT , true ) ; }
Distance : 6

172
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( MathRuntimeException ) ; }
Distance : 5

173
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true , false , false ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true , false , false ) ; }
Distance : 7

174
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p , p , p ) ; }
Distance : 7

175
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p ) ; }
Distance : 2

176
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } ParamChecks
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } ParamChecks
Distance : 4

177
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } T
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } T
Distance : 3

178
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= ) ; }
Distance : 3

179
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; } Math
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; } Math
Distance : 2

180
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p ) ; } Math
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p ) ; } Math
Distance : 5

181
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } source
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } source
Distance : 4

182
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ; }
Distance : 4

183
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Distance : 3

184
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p ) ; }
Distance : 8

185
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Distance : 4

186
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , <= , NUMBER_CONSTANT , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , <= , NUMBER_CONSTANT , MathRuntimeException ) ; }
Distance : 8

187
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , NUMBER_CONSTANT , <= , NUMBER_CONSTANT , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , NUMBER_CONSTANT , <= , NUMBER_CONSTANT , MathRuntimeException ) ; }
Distance : 8

188
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

189
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } wanted
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } wanted
Distance : 2

190
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; } source
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; } source
Distance : 3

191
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true , false , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true , false , true ) ; }
Distance : 6

192
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true ) ; }
Distance : 3

193
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ; }
Distance : 5

194
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , false ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , false ) ; }
Distance : 3

195
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; } wanted
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; } wanted
Distance : 2

196
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( MathRuntimeException ) ; }
Distance : 6

197
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } toString
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } toString
Distance : 3

198
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false ) ; } Math
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false ) ; } Math
Distance : 3

199
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } options
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } options
Distance : 4

========================================================================


========================================================================
Example Number: 60
Parent Code is: 
{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (36 (214{val=(}) (27 (800{val=a}) (252{val=<=}) (800{val=b})) (215{val=)})) (233{val=?}) (800{val=b}) (226{val=:}) (36 (214{val=(}) (16 (32 (800{val=Float}) (235{val=.}) (802{val=isNaN}) (214{val=(}) (27 (800{val=a}) (200{val=+}) (800{val=b})) (215{val=)})) (233{val=?}) (40{val=Float.NaN}) (226{val=:}) (800{val=b})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (36 (214{val=(}) (27 (800{val=a}) (252{val=<=}) (800{val=b})) (215{val=)})) (233{val=?}) (800{val=b}) (226{val=:}) (36 (214{val=(}) (16 (32 (800{val=Float}) (235{val=.}) (802{val=isNaN}) (214{val=(}) (27 (800{val=a}) (200{val=+}) (800{val=b})) (215{val=)})) (233{val=?}) (40{val=Float.NaN}) (226{val=:}) (800{val=a})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/59/parent/src_main_java_org_apache_commons_math_util_FastMath.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 30
Correct
========================================================================
True

0
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

1
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

2
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 17

3
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

4
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

5
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

6
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

7
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( int ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( int ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 17

8
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

9
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

10
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

11
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , a ) ; }
Distance : 15

12
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , a ) , b ) ; }
Distance : 16

13
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( double ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( double ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

14
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( char ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( char ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

15
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( int ) isNaN ( ( a ) b , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( int ) isNaN ( ( a ) b , a ) , b ) ; }
Distance : 16

16
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( byte ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( byte ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

17
Tree	{ return ( a <= a ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Code	{ return ( a <= a ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Distance : 3

18
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 1

19
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Distance : 2

20
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( int ) isNaN ( ( a ) b , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( int ) isNaN ( ( a ) b , b ) , a ) ; }
Distance : 15

21
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( boolean ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( boolean ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

22
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 0

23
Tree	{ return ( a <= b ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 2

24
Tree	{ return ( a <= a ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= a ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 2

25
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Distance : 1

26
Tree	{ return ( a <= b ) ? a : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? a : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Distance : 3

27
Tree	{ return ( b <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( b <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 2

28
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( float ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( float ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

29
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Distance : 2

========================================================================


========================================================================
Example Number: 61
Parent Code is: 
return fit ( new Gaussian.Parametric () , guess ) ;
-------------------------------------------------------------------------------
Child code is: 
return fit ( guess ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=fit}) (214{val=(}) (14 (304{val=new}) (43 (40{val=Gaussian.Parametric})) (216{val=()})) (234{val=,}) (800{val=guess}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=fit}) (214{val=(}) (800{val=guess}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/58/parent/src_main_java_org_apache_commons_math_optimization_fitting_GaussianFitter.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return fit ( null ) ;
Code	return fit ( null ) ;
Distance : 1

1
Tree	return fit ( new SuppressDocWarningsGuard < guess > ( guess ) , guess ) ;
Code	return fit ( new SuppressDocWarningsGuard < guess > ( guess ) , guess ) ;
Distance : 9

2
Tree	return fit ( new InputStreamReader < guess > ( new ) , guess ) ;
Code	return fit ( new InputStreamReader < guess > ( new ) , guess ) ;
Distance : 9

3
Tree	return fit ( new TimeZoneOffset < guess > ( guess ) , guess ) ;
Code	return fit ( new TimeZoneOffset < guess > ( guess ) , guess ) ;
Distance : 9

4
Tree	return fit ( super(); ) ;
Code	return fit ( super(); ) ;
Distance : 1

5
Tree	return fit . fit () . guess . fit ( CHAR_CONS ) ;
Code	return fit . fit () . guess . fit ( CHAR_CONS ) ;
Distance : 8

6
Tree	return fit ( Gaussian.Parametric . fit () , STRING_CONSTANT , guess ) ;
Code	return fit ( Gaussian.Parametric . fit () , STRING_CONSTANT , guess ) ;
Distance : 7

7
Tree	return fit ( new TextListener <> ( guess ) , guess ) ;
Code	return fit ( new TextListener <> ( guess ) , guess ) ;
Distance : 7

8
Tree	return fit ( new WeakHashMap <> ( guess ) , guess ) ;
Code	return fit ( new WeakHashMap <> ( guess ) , guess ) ;
Distance : 7

9
Tree	return fit ( new NordsieckInitializer <> ( guess ) , guess ) ;
Code	return fit ( new NordsieckInitializer <> ( guess ) , guess ) ;
Distance : 7

10
Tree	return fit ( new UnrecognizedRequire <> ( guess ) , guess ) ;
Code	return fit ( new UnrecognizedRequire <> ( guess ) , guess ) ;
Distance : 7

11
Tree	return fit ( new SimpleAffix <> ( guess ) , guess ) ;
Code	return fit ( new SimpleAffix <> ( guess ) , guess ) ;
Distance : 7

12
Tree	return fit ( new MethodAttributeAppender.ForInstrumentedMethod <> ( guess ) , guess ) ;
Code	return fit ( new MethodAttributeAppender.ForInstrumentedMethod <> ( guess ) , guess ) ;
Distance : 7

13
Tree	return fit ( new SuppressDocWarningsGuard <> ( guess ) , guess ) ;
Code	return fit ( new SuppressDocWarningsGuard <> ( guess ) , guess ) ;
Distance : 7

14
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; notifyListeners
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; notifyListeners
Distance : 12

15
Tree	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; MathRuntimeException
Code	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; MathRuntimeException
Distance : 8

16
Tree	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; f
Code	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; f
Distance : 8

17
Tree	return this . fit . fit ( Gaussian.Parametric . fit () ) ; array
Code	return this . fit . fit ( Gaussian.Parametric . fit () ) ; array
Distance : 9

18
Tree	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; -
Code	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; -
Distance : 8

19
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; Override
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; Override
Distance : 11

20
Tree	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; notifyListeners
Code	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; notifyListeners
Distance : 10

21
Tree	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; class
Code	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; class
Distance : 10

22
Tree	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; array
Code	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; array
Distance : 10

23
Tree	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; mock
Code	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; mock
Distance : 10

24
Tree	return fit ( new MethodAttributeAppender.ForInstrumentedMethod < guess > ( guess ) , guess ) ;
Code	return fit ( new MethodAttributeAppender.ForInstrumentedMethod < guess > ( guess ) , guess ) ;
Distance : 9

25
Tree	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; [
Code	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; [
Distance : 8

26
Tree	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; f
Code	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; f
Distance : 10

27
Tree	return fit ( new Gaussian.Parametric < guess > ( new ) , guess ) ; -
Code	return fit ( new Gaussian.Parametric < guess > ( new ) , guess ) ; -
Distance : 10

28
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; MathRuntimeException
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; MathRuntimeException
Distance : 11

29
Tree	return this . fit . fit ( new . fit () ) ; notifyListeners
Code	return this . fit . fit ( new . fit () ) ; notifyListeners
Distance : 9

30
Tree	return this . fit . fit ( new . fit () ) ; class
Code	return this . fit . fit ( new . fit () ) ; class
Distance : 9

31
Tree	return fit ( new Gaussian.Parametric < guess > ( new ) , guess ) ; Override
Code	return fit ( new Gaussian.Parametric < guess > ( new ) , guess ) ; Override
Distance : 10

32
Tree	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; MathRuntimeException
Code	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; MathRuntimeException
Distance : 10

33
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ;
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ;
Distance : 11

34
Tree	return fit ( new UnrecognizedRequire < guess > ( guess ) , guess ) ;
Code	return fit ( new UnrecognizedRequire < guess > ( guess ) , guess ) ;
Distance : 9

35
Tree	return this . fit . fit ( Gaussian.Parametric . fit () ) ;
Code	return this . fit . fit ( Gaussian.Parametric . fit () ) ;
Distance : 8

36
Tree	return fit . fit ( Gaussian.Parametric , guess , ) , new fit < guess > ( guess ) ) ;
Code	return fit . fit ( Gaussian.Parametric , guess , ) , new fit < guess > ( guess ) ) ;
Distance : 15

37
Tree	return fit . fit ( Gaussian.Parametric , guess , ) , new Gaussian.Parametric < guess > ( guess ) ) ; -
Code	return fit . fit ( Gaussian.Parametric , guess , ) , new Gaussian.Parametric < guess > ( guess ) ) ; -
Distance : 16

38
Tree	return fit . fit ( Gaussian.Parametric , guess , ) , new Gaussian.Parametric < guess > ( guess ) ) ; mock
Code	return fit . fit ( Gaussian.Parametric , guess , ) , new Gaussian.Parametric < guess > ( guess ) ) ; mock
Distance : 16

39
Tree	return fit . fit ( Gaussian.Parametric , guess , ) , new Gaussian.Parametric < guess > ( guess ) ) ; MathRuntimeException
Code	return fit . fit ( Gaussian.Parametric , guess , ) , new Gaussian.Parametric < guess > ( guess ) ) ; MathRuntimeException
Distance : 16

40
Tree	return fit . fit ( Gaussian.Parametric , guess , ; , new fit < guess > ( guess ) ) ; Override
Code	return fit . fit ( Gaussian.Parametric , guess , ; , new fit < guess > ( guess ) ) ; Override
Distance : 16

41
Tree	return fit . fit ( Gaussian.Parametric , guess , ) , new Gaussian.Parametric < guess > ( guess ) ) ; f
Code	return fit . fit ( Gaussian.Parametric , guess , ) , new Gaussian.Parametric < guess > ( guess ) ) ; f
Distance : 16

42
Tree	return fit . fit ( Gaussian.Parametric , guess , ; , new Gaussian.Parametric < guess > ( guess ) ) ; [
Code	return fit . fit ( Gaussian.Parametric , guess , ; , new Gaussian.Parametric < guess > ( guess ) ) ; [
Distance : 16

43
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; notifyListeners
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; notifyListeners
Distance : 11

44
Tree	return fit . fit () . fit ( Gaussian.Parametric , true , guess ) ;
Code	return fit . fit () . fit ( Gaussian.Parametric , true , guess ) ;
Distance : 9

45
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 12

46
Tree	return fit ( Gaussian.Parametric , guess , ) . fit () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit ( Gaussian.Parametric , guess , ) . fit () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 12

47
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ;
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ;
Distance : 9

48
Tree	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ;
Code	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ;
Distance : 9

49
Tree	return fit . fit ( Gaussian.Parametric . fit () . guess ) ;
Code	return fit . fit ( Gaussian.Parametric . fit () . guess ) ;
Distance : 7

50
Tree	return fit . fit () . guess . fit ( ZONES ) ;
Code	return fit . fit () . guess . fit ( ZONES ) ;
Distance : 8

51
Tree	return fit . fit () . guess . fit ( isUnknownObject ) ;
Code	return fit . fit () . guess . fit ( isUnknownObject ) ;
Distance : 8

52
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 10

53
Tree	return fit ( new NordsieckInitializer < guess > ( guess ) , guess ) ;
Code	return fit ( new NordsieckInitializer < guess > ( guess ) , guess ) ;
Distance : 9

54
Tree	return fit ( new WeakHashMap < guess > ( guess ) , guess ) ;
Code	return fit ( new WeakHashMap < guess > ( guess ) , guess ) ;
Distance : 9

55
Tree	return fit . fit ( this . guess . guess ) ;
Code	return fit . fit ( this . guess . guess ) ;
Distance : 6

56
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; class
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; class
Distance : 13

57
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; notifyListeners
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; notifyListeners
Distance : 13

58
Tree	return fit . fit ( Gaussian.Parametric , guess , ; , new Gaussian.Parametric < guess > ( guess ) ) ; notifyListeners
Code	return fit . fit ( Gaussian.Parametric , guess , ; , new Gaussian.Parametric < guess > ( guess ) ) ; notifyListeners
Distance : 16

59
Tree	return fit ( new SimpleAffix < guess > ( , ) , guess ) ;
Code	return fit ( new SimpleAffix < guess > ( , ) , guess ) ;
Distance : 9

60
Tree	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ; Preconditions
Code	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ; Preconditions
Distance : 10

61
Tree	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ; ParamChecks
Code	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ; ParamChecks
Distance : 10

62
Tree	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ; f
Code	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ; f
Distance : 10

63
Tree	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ; {}
Code	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ; {}
Distance : 10

64
Tree	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ; MathRuntimeException
Code	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ; MathRuntimeException
Distance : 10

65
Tree	return fit . fit () . guess . fit ( false ) ;
Code	return fit . fit () . guess . fit ( false ) ;
Distance : 8

66
Tree	return fit . fit () . guess . fit ( super ) ;
Code	return fit . fit () . guess . fit ( super ) ;
Distance : 8

67
Tree	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ; -
Code	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ; -
Distance : 10

68
Tree	return fit ( Gaussian.Parametric , guess , ; . fit () , fit ( NUMBER_CONSTANT ) ) ; notifyListeners
Code	return fit ( Gaussian.Parametric , guess , ; . fit () , fit ( NUMBER_CONSTANT ) ) ; notifyListeners
Distance : 13

69
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ;
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ;
Distance : 11

70
Tree	return fit . fit ( this . guess . guess ) ; MathRuntimeException
Code	return fit . fit ( this . guess . guess ) ; MathRuntimeException
Distance : 7

71
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; class
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; class
Distance : 16

72
Tree	return fit . fit ( NUMBER_CONSTANT , showSeparators [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , showSeparators [ NUMBER_CONSTANT ] ) ;
Distance : 8

73
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; mock
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; mock
Distance : 16

74
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; MathRuntimeException
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; MathRuntimeException
Distance : 16

75
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; Override
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; Override
Distance : 16

76
Tree	return fit ( Gaussian.Parametric . fit () , STRING_CONSTANT , guess ) ; Override
Code	return fit ( Gaussian.Parametric . fit () , STRING_CONSTANT , guess ) ; Override
Distance : 8

77
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; notifyListeners
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; notifyListeners
Distance : 16

78
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; f
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; f
Distance : 16

79
Tree	return fit . fit ( this . guess ) ; notifyListeners
Code	return fit . fit ( this . guess ) ; notifyListeners
Distance : 5

80
Tree	return fit . fit ( this . guess ) ; class
Code	return fit . fit ( this . guess ) ; class
Distance : 5

81
Tree	return fit . fit ( this . guess ) ; array
Code	return fit . fit ( this . guess ) ; array
Distance : 5

82
Tree	return fit . fit ( NUMBER_CONSTANT , CONFLICTING_EXTENDED_TYPE [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , CONFLICTING_EXTENDED_TYPE [ NUMBER_CONSTANT ] ) ;
Distance : 8

83
Tree	return fit . fit ( this . guess ) ; MathRuntimeException
Code	return fit . fit ( this . guess ) ; MathRuntimeException
Distance : 5

84
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; [
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; [
Distance : 16

85
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; -
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; -
Distance : 16

86
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; -
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; -
Distance : 10

87
Tree	return fit . fit ( this . guess ) ; Override
Code	return fit . fit ( this . guess ) ; Override
Distance : 5

88
Tree	return fit . fit ( this . guess ) ; [
Code	return fit . fit ( this . guess ) ; [
Distance : 5

89
Tree	return fit ( new . fit () , STRING_CONSTANT , guess ) ; f
Code	return fit ( new . fit () , STRING_CONSTANT , guess ) ; f
Distance : 8

90
Tree	return fit ( Gaussian.Parametric . fit () , STRING_CONSTANT , guess ) ; [
Code	return fit ( Gaussian.Parametric . fit () , STRING_CONSTANT , guess ) ; [
Distance : 8

91
Tree	return fit ( Gaussian.Parametric . fit () , STRING_CONSTANT , guess ) ; -
Code	return fit ( Gaussian.Parametric . fit () , STRING_CONSTANT , guess ) ; -
Distance : 8

92
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; [
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; [
Distance : 11

93
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ; notifyListeners
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ; notifyListeners
Distance : 12

94
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ; class
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ; class
Distance : 12

95
Tree	return fit . fit ( this . guess ) ; f
Code	return fit . fit ( this . guess ) ; f
Distance : 5

96
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ; array
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ; array
Distance : 12

97
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ; MathRuntimeException
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ; MathRuntimeException
Distance : 12

98
Tree	return fit . fit ( NUMBER_CONSTANT , cutOff [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , cutOff [ NUMBER_CONSTANT ] ) ;
Distance : 8

99
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ; f
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ; f
Distance : 12

100
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ; [
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ; [
Distance : 12

101
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ; -
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ; -
Distance : 12

102
Tree	return fit . fit ( this . guess ) ; -
Code	return fit . fit ( this . guess ) ; -
Distance : 5

103
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ; mock
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ; mock
Distance : 12

104
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; -
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; -
Distance : 13

105
Tree	return fit ( Gaussian.Parametric . fit () , STRING_CONSTANT , guess ) ; MathRuntimeException
Code	return fit ( Gaussian.Parametric . fit () , STRING_CONSTANT , guess ) ; MathRuntimeException
Distance : 8

106
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; [
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; [
Distance : 10

107
Tree	return fit ( null ) ; options
Code	return fit ( null ) ; options
Distance : 2

108
Tree	return fit ( null ) ; value
Code	return fit ( null ) ; value
Distance : 2

109
Tree	return fit . fit ( this . guess . guess ) ; -
Code	return fit . fit ( this . guess . guess ) ; -
Distance : 7

110
Tree	return fit . fit ( this . guess . guess ) ; [
Code	return fit . fit ( this . guess . guess ) ; [
Distance : 7

111
Tree	return fit . fit ( this . guess . guess ) ; f
Code	return fit . fit ( this . guess . guess ) ; f
Distance : 7

112
Tree	return fit . fit ( this . guess . guess ) ; Override
Code	return fit . fit ( this . guess . guess ) ; Override
Distance : 7

113
Tree	return fit ( new TimeZoneOffset <> ( guess ) , guess ) ;
Code	return fit ( new TimeZoneOffset <> ( guess ) , guess ) ;
Distance : 7

114
Tree	return fit ( Gaussian.Parametric . fit () , STRING_CONSTANT , guess ) ; mock
Code	return fit ( Gaussian.Parametric . fit () , STRING_CONSTANT , guess ) ; mock
Distance : 8

115
Tree	return fit . fit ( this . guess . guess ) ; array
Code	return fit . fit ( this . guess . guess ) ; array
Distance : 7

116
Tree	return fit . fit ( this . guess . guess ) ; class
Code	return fit . fit ( this . guess . guess ) ; class
Distance : 7

117
Tree	return fit . fit ( this . guess . guess ) ; notifyListeners
Code	return fit . fit ( this . guess . guess ) ; notifyListeners
Distance : 7

118
Tree	return fit ( null ) ; i
Code	return fit ( null ) ; i
Distance : 2

119
Tree	return fit ( Gaussian.Parametric . fit () , STRING_CONSTANT , guess ) ; notifyListeners
Code	return fit ( Gaussian.Parametric . fit () , STRING_CONSTANT , guess ) ; notifyListeners
Distance : 8

120
Tree	return fit ( new . fit () , STRING_CONSTANT , guess ) ; class
Code	return fit ( new . fit () , STRING_CONSTANT , guess ) ; class
Distance : 8

121
Tree	return fit ( Gaussian.Parametric . fit () , STRING_CONSTANT , guess ) ; array
Code	return fit ( Gaussian.Parametric . fit () , STRING_CONSTANT , guess ) ; array
Distance : 8

122
Tree	return fit ( null ) ; p
Code	return fit ( null ) ; p
Distance : 2

123
Tree	return fit . fit ( this . guess ) ;
Code	return fit . fit ( this . guess ) ;
Distance : 4

124
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; f
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; f
Distance : 10

125
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; Override
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; Override
Distance : 10

126
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; MathRuntimeException
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; MathRuntimeException
Distance : 10

127
Tree	return fit ( return; ) ;
Code	return fit ( return; ) ;
Distance : 1

128
Tree	return fit . fit ( NUMBER_CONSTANT , ImpreciseCutoverField [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , ImpreciseCutoverField [ NUMBER_CONSTANT ] ) ;
Distance : 8

129
Tree	return fit . fit ( NUMBER_CONSTANT , changes [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , changes [ NUMBER_CONSTANT ] ) ;
Distance : 8

130
Tree	return fit ( new MinimizeExitPoints <> ( guess ) , guess ) ;
Code	return fit ( new MinimizeExitPoints <> ( guess ) , guess ) ;
Distance : 7

131
Tree	return fit . fit ( NUMBER_CONSTANT , searchArray [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , searchArray [ NUMBER_CONSTANT ] ) ;
Distance : 8

132
Tree	return fit . fit ( NUMBER_CONSTANT , preserveAllTokens [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , preserveAllTokens [ NUMBER_CONSTANT ] ) ;
Distance : 8

133
Tree	return fit . fit ( NUMBER_CONSTANT , parentClassLoader [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , parentClassLoader [ NUMBER_CONSTANT ] ) ;
Distance : 8

134
Tree	return fit ( break; ) ;
Code	return fit ( break; ) ;
Distance : 1

135
Tree	return fit ( continue; ) ;
Code	return fit ( continue; ) ;
Distance : 1

136
Tree	return fit ( default: ) ;
Code	return fit ( default: ) ;
Distance : 1

137
Tree	return fit . fit ( NUMBER_CONSTANT , zval.length [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , zval.length [ NUMBER_CONSTANT ] ) ;
Distance : 8

138
Tree	return fit ( new InputStreamReader <> ( guess ) , guess ) ;
Code	return fit ( new InputStreamReader <> ( guess ) , guess ) ;
Distance : 7

139
Tree	return fit ( new MinimizeExitPoints < guess > ( guess ) , guess ) ;
Code	return fit ( new MinimizeExitPoints < guess > ( guess ) , guess ) ;
Distance : 9

140
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; f
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; f
Distance : 13

141
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; -
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; -
Distance : 11

142
Tree	return fit ( Gaussian.Parametric , guess , ; . fit () , fit ( NUMBER_CONSTANT ) ) ; -
Code	return fit ( Gaussian.Parametric , guess , ; . fit () , fit ( NUMBER_CONSTANT ) ) ; -
Distance : 13

143
Tree	return fit . fit ( this . guess . guess ) ; mock
Code	return fit . fit ( this . guess . guess ) ; mock
Distance : 7

144
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Distance : 15

145
Tree	return fit . fit ( Gaussian.Parametric , guess , ) , new Gaussian.Parametric < guess > ( guess ) ) ; class
Code	return fit . fit ( Gaussian.Parametric , guess , ) , new Gaussian.Parametric < guess > ( guess ) ) ; class
Distance : 16

146
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; array
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; array
Distance : 16

147
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ; Override
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ; Override
Distance : 12

148
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; class
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; class
Distance : 11

149
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; array
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; array
Distance : 11

150
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; mock
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; mock
Distance : 11

151
Tree	return this . fit . fit ( new . fit () ) ; -
Code	return this . fit . fit ( new . fit () ) ; -
Distance : 9

152
Tree	return this . fit . fit ( new . fit () ) ; [
Code	return this . fit . fit ( new . fit () ) ; [
Distance : 9

153
Tree	return this . fit . fit ( new . fit () ) ; f
Code	return this . fit . fit ( new . fit () ) ; f
Distance : 9

154
Tree	return fit ( Gaussian.Parametric , guess , ) . fit () , fit ( NUMBER_CONSTANT ) ) ; [
Code	return fit ( Gaussian.Parametric , guess , ) . fit () , fit ( NUMBER_CONSTANT ) ) ; [
Distance : 13

155
Tree	return fit . fit ( Gaussian.Parametric , guess , ) , new fit < guess > ( guess ) ) ; array
Code	return fit . fit ( Gaussian.Parametric , guess , ) , new fit < guess > ( guess ) ) ; array
Distance : 16

156
Tree	return fit . fit ( NUMBER_CONSTANT , yNew [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , yNew [ NUMBER_CONSTANT ] ) ;
Distance : 8

157
Tree	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ; Test
Code	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ; Test
Distance : 10

158
Tree	return this . fit . fit ( new . fit () ) ; MathRuntimeException
Code	return this . fit . fit ( new . fit () ) ; MathRuntimeException
Distance : 9

159
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; array
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; array
Distance : 13

160
Tree	return fit ( Gaussian.Parametric , guess , ) . fit () , fit ( NUMBER_CONSTANT ) ) ; f
Code	return fit ( Gaussian.Parametric , guess , ) . fit () , fit ( NUMBER_CONSTANT ) ) ; f
Distance : 13

161
Tree	return fit ( Gaussian.Parametric , guess , ) . fit () , fit ( NUMBER_CONSTANT ) ) ; Override
Code	return fit ( Gaussian.Parametric , guess , ) . fit () , fit ( NUMBER_CONSTANT ) ) ; Override
Distance : 13

162
Tree	return fit ( Gaussian.Parametric , guess , ; . fit () , fit ( NUMBER_CONSTANT ) ) ; MathRuntimeException
Code	return fit ( Gaussian.Parametric , guess , ; . fit () , fit ( NUMBER_CONSTANT ) ) ; MathRuntimeException
Distance : 13

163
Tree	return fit . fit ( this . guess ) ; mock
Code	return fit . fit ( this . guess ) ; mock
Distance : 5

164
Tree	return fit ( Gaussian.Parametric , guess , ) . fit () , fit ( NUMBER_CONSTANT ) ) ; mock
Code	return fit ( Gaussian.Parametric , guess , ) . fit () , fit ( NUMBER_CONSTANT ) ) ; mock
Distance : 13

165
Tree	return fit ( Gaussian.Parametric , guess , ) . fit () , fit ( NUMBER_CONSTANT ) ) ; array
Code	return fit ( Gaussian.Parametric , guess , ) . fit () , fit ( NUMBER_CONSTANT ) ) ; array
Distance : 13

166
Tree	return fit ( Gaussian.Parametric , guess , ) . fit () , fit ( NUMBER_CONSTANT ) ) ; class
Code	return fit ( Gaussian.Parametric , guess , ) . fit () , fit ( NUMBER_CONSTANT ) ) ; class
Distance : 13

167
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; notifyListeners
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; notifyListeners
Distance : 10

168
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; class
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; class
Distance : 10

169
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; array
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; array
Distance : 10

170
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; mock
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; mock
Distance : 10

171
Tree	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ; Class
Code	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ; Class
Distance : 10

172
Tree	return fit ( new TextListener < guess > ( new ) , guess ) ;
Code	return fit ( new TextListener < guess > ( new ) , guess ) ;
Distance : 9

173
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; mock
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; mock
Distance : 13

174
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; MathRuntimeException
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; MathRuntimeException
Distance : 13

175
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; Override
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; Override
Distance : 13

176
Tree	return this . fit . fit ( Gaussian.Parametric . fit () ) ; Override
Code	return this . fit . fit ( Gaussian.Parametric . fit () ) ; Override
Distance : 9

177
Tree	return this . fit . fit ( new . fit () ) ; mock
Code	return this . fit . fit ( new . fit () ) ; mock
Distance : 9

178
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; [
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; [
Distance : 13

179
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; [
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; [
Distance : 12

180
Tree	return fit . fit ( new . fit () . guess ) ; mock
Code	return fit . fit ( new . fit () . guess ) ; mock
Distance : 8

181
Tree	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; array
Code	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; array
Distance : 8

182
Tree	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; class
Code	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; class
Distance : 8

183
Tree	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; [
Code	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; [
Distance : 10

184
Tree	return fit . fit () . guess . fit ( true ) ;
Code	return fit . fit () . guess . fit ( true ) ;
Distance : 8

185
Tree	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ;
Code	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ;
Distance : 9

186
Tree	return fit . fit () . guess . fit ( ClassFileVersion.JAVA_V8 ) ;
Code	return fit . fit () . guess . fit ( ClassFileVersion.JAVA_V8 ) ;
Distance : 8

187
Tree	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; notifyListeners
Code	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; notifyListeners
Distance : 8

188
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; f
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; f
Distance : 11

189
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; -
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; -
Distance : 12

190
Tree	return return . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; f
Code	return return . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; f
Distance : 12

191
Tree	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; Override
Code	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; Override
Distance : 8

192
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; Override
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; Override
Distance : 12

193
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; MathRuntimeException
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; MathRuntimeException
Distance : 12

194
Tree	return fit . fit () . guess . fit ( createUnionType ) ;
Code	return fit . fit () . guess . fit ( createUnionType ) ;
Distance : 8

195
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; mock
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; mock
Distance : 12

196
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; array
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; array
Distance : 12

197
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; class
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () ) ; class
Distance : 12

198
Tree	return fit . fit () . guess . fit ( this ) ;
Code	return fit . fit () . guess . fit ( this ) ;
Distance : 8

199
Tree	return fit . fit () . guess . fit ( getItemShape ) ;
Code	return fit . fit () . guess . fit ( getItemShape ) ;
Distance : 8

========================================================================


========================================================================
Example Number: 62
Parent Code is: 
int sum = NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Child code is: 
double sum = NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=sum}) (204{val==}) (34{val=NUMBER_CONSTANT})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=double}) (59 (800{val=sum}) (204{val==}) (34{val=NUMBER_CONSTANT})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/57/parent/src_main_java_org_apache_commons_math_stat_clustering_KMeansPlusPlusClusterer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	final double sum ;
Code	final double sum ;
Distance : 3

1
Tree	void sum = this . sum ;
Code	void sum = this . sum ;
Distance : 4

2
Tree	byte sum = CHAR_CONS ;
Code	byte sum = CHAR_CONS ;
Distance : 2

3
Tree	final boolean sum ;
Code	final boolean sum ;
Distance : 4

4
Tree	int sum = other.value ;
Code	int sum = other.value ;
Distance : 2

5
Tree	int sum [] = getReferenceName () ;
Code	int sum [] = getReferenceName () ;
Distance : 4

6
Tree	void sum = CHAR_CONS ;
Code	void sum = CHAR_CONS ;
Distance : 2

7
Tree	final int sum = NUMBER_CONSTANT ;
Code	final int sum = NUMBER_CONSTANT ;
Distance : 2

8
Tree	long sum = NUMBER_CONSTANT ;
Code	long sum = NUMBER_CONSTANT ;
Distance : 1

9
Tree	int sum = / ;
Code	int sum = / ;
Distance : 2

10
Tree	double sum = NUMBER_CONSTANT ;
Code	double sum = NUMBER_CONSTANT ;
Distance : 0

11
Tree	int sum [] = hashCode () ;
Code	int sum [] = hashCode () ;
Distance : 4

12
Tree	int sum = <= ;
Code	int sum = <= ;
Distance : 2

13
Tree	boolean sum = NUMBER_CONSTANT ;
Code	boolean sum = NUMBER_CONSTANT ;
Distance : 1

14
Tree	int sum = Integer.MAX_VALUE ;
Code	int sum = Integer.MAX_VALUE ;
Distance : 2

15
Tree	int sum [] = runInMultipleThreads () ;
Code	int sum [] = runInMultipleThreads () ;
Distance : 4

16
Tree	byte sum = null ;
Code	byte sum = null ;
Distance : 2

17
Tree	int sum [] = getUnivariateStatistic () ;
Code	int sum [] = getUnivariateStatistic () ;
Distance : 4

18
Tree	int sum [] = emptyList () ;
Code	int sum [] = emptyList () ;
Distance : 4

19
Tree	byte sum ;
Code	byte sum ;
Distance : 3

20
Tree	short sum ;
Code	short sum ;
Distance : 3

21
Tree	int sum = {} ;
Code	int sum = {} ;
Distance : 2

22
Tree	int sum = getAbstractScope ;
Code	int sum = getAbstractScope ;
Distance : 2

23
Tree	int /= ;
Code	int /= ;
Distance : 4

24
Tree	int sum = AllowedSolution.ANY_SIDE ;
Code	int sum = AllowedSolution.ANY_SIDE ;
Distance : 2

25
Tree	int sum = v.length ;
Code	int sum = v.length ;
Distance : 2

26
Tree	int sum = chars.length ;
Code	int sum = chars.length ;
Distance : 2

27
Tree	int [] ;
Code	int [] ;
Distance : 4

28
Tree	long sum = STRING_CONSTANT + sum ;
Code	long sum = STRING_CONSTANT + sum ;
Distance : 4

29
Tree	float sum = sum ;
Code	float sum = sum ;
Distance : 2

30
Tree	int sum = getNumber () ;
Code	int sum = getNumber () ;
Distance : 3

31
Tree	int createIllegalArgumentException ;
Code	int createIllegalArgumentException ;
Distance : 4

32
Tree	boolean sum = STRING_CONSTANT + sum ;
Code	boolean sum = STRING_CONSTANT + sum ;
Distance : 4

33
Tree	int sum = isPrettyPrint () ;
Code	int sum = isPrettyPrint () ;
Distance : 3

34
Tree	int sum ;
Code	int sum ;
Distance : 3

35
Tree	int sum = NUMBER_CONSTANT ;
Code	int sum = NUMBER_CONSTANT ;
Distance : 1

36
Tree	abstract int sum = NUMBER_CONSTANT ;
Code	abstract int sum = NUMBER_CONSTANT ;
Distance : 2

37
Tree	long sum = true ;
Code	long sum = true ;
Distance : 2

38
Tree	double sum = this . sum ;
Code	double sum = this . sum ;
Distance : 3

39
Tree	int sum = getDimension () . sum ;
Code	int sum = getDimension () . sum ;
Distance : 5

40
Tree	int sum = getAbstractScope () . sum ;
Code	int sum = getAbstractScope () . sum ;
Distance : 5

41
Tree	int sum = AllowedSolution.ANY_SIDE ;
Code	int sum = AllowedSolution.ANY_SIDE ;
Distance : 2

42
Tree	int getDimension [] = sum ;
Code	int getDimension [] = sum ;
Distance : 4

43
Tree	boolean sum = true ;
Code	boolean sum = true ;
Distance : 2

44
Tree	void sum ;
Code	void sum ;
Distance : 3

45
Tree	int sum = getColumnDimension () ;
Code	int sum = getColumnDimension () ;
Distance : 3

46
Tree	int sum = getTickLength () ;
Code	int sum = getTickLength () ;
Distance : 3

47
Tree	char sum = this . sum ;
Code	char sum = this . sum ;
Distance : 4

48
Tree	private int sum ;
Code	private int sum ;
Distance : 4

49
Tree	int sum = this . sum ;
Code	int sum = this . sum ;
Distance : 4

50
Tree	int sum = new LenientChronology () ;
Code	int sum = new LenientChronology () ;
Distance : 4

51
Tree	int sum = newScope () ;
Code	int sum = newScope () ;
Distance : 3

52
Tree	int sum = CHAR_CONS ;
Code	int sum = CHAR_CONS ;
Distance : 2

53
Tree	byte sum = sum ;
Code	byte sum = sum ;
Distance : 2

54
Tree	int sum = null ;
Code	int sum = null ;
Distance : 2

55
Tree	int sum = getDimension () ;
Code	int sum = getDimension () ;
Distance : 3

56
Tree	final double sum = NUMBER_CONSTANT ;
Code	final double sum = NUMBER_CONSTANT ;
Distance : 1

57
Tree	int sum = sum ;
Code	int sum = sum ;
Distance : 2

58
Tree	void sum = sum + NUMBER_CONSTANT ;
Code	void sum = sum + NUMBER_CONSTANT ;
Distance : 3

59
Tree	double sum [] = sum ;
Code	double sum [] = sum ;
Distance : 2

60
Tree	int sum = getAbstractScope () ;
Code	int sum = getAbstractScope () ;
Distance : 3

61
Tree	long += ;
Code	long += ;
Distance : 4

62
Tree	float sum = this . sum ;
Code	float sum = this . sum ;
Distance : 4

63
Tree	boolean += ;
Code	boolean += ;
Distance : 4

64
Tree	double sum ;
Code	double sum ;
Distance : 2

65
Tree	void sum = sum ;
Code	void sum = sum ;
Distance : 2

66
Tree	int sum = super(); ;
Code	int sum = super(); ;
Distance : 2

67
Tree	long sum ;
Code	long sum ;
Distance : 3

68
Tree	char sum = null ;
Code	char sum = null ;
Distance : 2

69
Tree	double sum = sum + NUMBER_CONSTANT ;
Code	double sum = sum + NUMBER_CONSTANT ;
Distance : 2

70
Tree	byte sum = NUMBER_CONSTANT ;
Code	byte sum = NUMBER_CONSTANT ;
Distance : 1

71
Tree	int sum = fht () . sum ;
Code	int sum = fht () . sum ;
Distance : 5

72
Tree	char sum = sum ;
Code	char sum = sum ;
Distance : 2

73
Tree	int sum = += ;
Code	int sum = += ;
Distance : 2

74
Tree	long sum = false ;
Code	long sum = false ;
Distance : 2

75
Tree	int sum = new ArrayList () ;
Code	int sum = new ArrayList () ;
Distance : 4

76
Tree	int sum = point () . sum ;
Code	int sum = point () . sum ;
Distance : 5

77
Tree	int sampleSize [] = sum ;
Code	int sampleSize [] = sum ;
Distance : 4

78
Tree	protected int sum = NUMBER_CONSTANT ;
Code	protected int sum = NUMBER_CONSTANT ;
Distance : 2

79
Tree	int sum = new Add () ;
Code	int sum = new Add () ;
Distance : 4

80
Tree	byte sum = STRING_CONSTANT + sum ;
Code	byte sum = STRING_CONSTANT + sum ;
Distance : 4

81
Tree	int -= ;
Code	int -= ;
Distance : 4

82
Tree	void sum = NUMBER_CONSTANT ;
Code	void sum = NUMBER_CONSTANT ;
Distance : 1

83
Tree	int sum = new Date () ;
Code	int sum = new Date () ;
Distance : 4

84
Tree	int sum = getNumber () . sum ;
Code	int sum = getNumber () . sum ;
Distance : 5

85
Tree	int SUM [] = sum ;
Code	int SUM [] = sum ;
Distance : 4

86
Tree	short sum = STRING_CONSTANT + sum ;
Code	short sum = STRING_CONSTANT + sum ;
Distance : 4

87
Tree	double sum = null ;
Code	double sum = null ;
Distance : 1

88
Tree	int sum = new HashMap () ;
Code	int sum = new HashMap () ;
Distance : 4

89
Tree	boolean sum ;
Code	boolean sum ;
Distance : 3

90
Tree	double sum = CHAR_CONS ;
Code	double sum = CHAR_CONS ;
Distance : 1

91
Tree	long sum = null ;
Code	long sum = null ;
Distance : 2

92
Tree	int <= ;
Code	int <= ;
Distance : 4

93
Tree	boolean sum = null ;
Code	boolean sum = null ;
Distance : 2

94
Tree	char sum = CHAR_CONS ;
Code	char sum = CHAR_CONS ;
Distance : 2

95
Tree	int sum [] = sum ;
Code	int sum [] = sum ;
Distance : 3

96
Tree	final int sum ;
Code	final int sum ;
Distance : 4

97
Tree	void sum = STRING_CONSTANT + sum ;
Code	void sum = STRING_CONSTANT + sum ;
Distance : 4

98
Tree	int right [] = sum ;
Code	int right [] = sum ;
Distance : 4

99
Tree	int sum = isPrettyPrint () . sum ;
Code	int sum = isPrettyPrint () . sum ;
Distance : 5

100
Tree	int sum = val.length ;
Code	int sum = val.length ;
Distance : 2

101
Tree	int sum = checkInitialize () ;
Code	int sum = checkInitialize () ;
Distance : 3

102
Tree	int BetaDistribution [] = sum ;
Code	int BetaDistribution [] = sum ;
Distance : 4

103
Tree	int sum = true ;
Code	int sum = true ;
Distance : 2

104
Tree	char sum = STRING_CONSTANT + sum ;
Code	char sum = STRING_CONSTANT + sum ;
Distance : 4

105
Tree	float sum = CHAR_CONS ;
Code	float sum = CHAR_CONS ;
Distance : 2

106
Tree	int += ;
Code	int += ;
Distance : 4

107
Tree	long sum = sum + NUMBER_CONSTANT ;
Code	long sum = sum + NUMBER_CONSTANT ;
Distance : 3

108
Tree	long sum = sum ;
Code	long sum = sum ;
Distance : 2

109
Tree	float sum = null ;
Code	float sum = null ;
Distance : 2

110
Tree	byte sum = sum + NUMBER_CONSTANT ;
Code	byte sum = sum + NUMBER_CONSTANT ;
Distance : 3

111
Tree	int sum = checkInitialize () . sum ;
Code	int sum = checkInitialize () . sum ;
Distance : 5

112
Tree	abstract int sum ;
Code	abstract int sum ;
Distance : 4

113
Tree	int sum = / ;
Code	int sum = / ;
Distance : 2

114
Tree	int *= ;
Code	int *= ;
Distance : 4

115
Tree	short sum = this . sum ;
Code	short sum = this . sum ;
Distance : 4

116
Tree	int sum = ? ;
Code	int sum = ? ;
Distance : 2

117
Tree	int sum = new RandomDataGenerator () ;
Code	int sum = new RandomDataGenerator () ;
Distance : 4

118
Tree	int sum = new SerializableTypeVariable () ;
Code	int sum = new SerializableTypeVariable () ;
Distance : 4

119
Tree	int sum = += ;
Code	int sum = += ;
Distance : 2

120
Tree	int sum = IncrementalCheckMode.GENERATE_IJS ;
Code	int sum = IncrementalCheckMode.GENERATE_IJS ;
Distance : 2

121
Tree	final boolean sum = NUMBER_CONSTANT ;
Code	final boolean sum = NUMBER_CONSTANT ;
Distance : 2

122
Tree	boolean sum = sum ;
Code	boolean sum = sum ;
Distance : 2

123
Tree	int sum ; wanted
Code	int sum ; wanted
Distance : 4

124
Tree	int sum = new Sin () ;
Code	int sum = new Sin () ;
Distance : 4

125
Tree	int sum = <= ;
Code	int sum = <= ;
Distance : 2

126
Tree	int sum [] = getTickLength () ;
Code	int sum [] = getTickLength () ;
Distance : 4

127
Tree	int sum [] = getName () ;
Code	int sum [] = getName () ;
Distance : 4

128
Tree	int sum = ^ ;
Code	int sum = ^ ;
Distance : 2

129
Tree	static int sum = NUMBER_CONSTANT ;
Code	static int sum = NUMBER_CONSTANT ;
Distance : 2

130
Tree	float sum = STRING_CONSTANT + sum ;
Code	float sum = STRING_CONSTANT + sum ;
Distance : 4

131
Tree	int sum = new SinFunction () ;
Code	int sum = new SinFunction () ;
Distance : 4

132
Tree	int sum = else ;
Code	int sum = else ;
Distance : 2

133
Tree	int sum [] = getLastInvocation () ;
Code	int sum [] = getLastInvocation () ;
Distance : 4

134
Tree	boolean sum = sum + NUMBER_CONSTANT ;
Code	boolean sum = sum + NUMBER_CONSTANT ;
Distance : 3

135
Tree	int sum = {} ;
Code	int sum = {} ;
Distance : 2

136
Tree	float sum = sum + NUMBER_CONSTANT ;
Code	float sum = sum + NUMBER_CONSTANT ;
Distance : 3

137
Tree	int sum [] = getDimension () ;
Code	int sum [] = getDimension () ;
Distance : 4

138
Tree	private int sum = NUMBER_CONSTANT ;
Code	private int sum = NUMBER_CONSTANT ;
Distance : 2

139
Tree	byte sum = this . sum ;
Code	byte sum = this . sum ;
Distance : 4

140
Tree	float sum ;
Code	float sum ;
Distance : 3

141
Tree	double sum = / ;
Code	double sum = / ;
Distance : 1

142
Tree	int sum = else ;
Code	int sum = else ;
Distance : 2

143
Tree	double sum = true ;
Code	double sum = true ;
Distance : 1

144
Tree	double sum = / ;
Code	double sum = / ;
Distance : 1

145
Tree	double sum = STRING_CONSTANT + sum ;
Code	double sum = STRING_CONSTANT + sum ;
Distance : 3

146
Tree	int sum = SinFunction ;
Code	int sum = SinFunction ;
Distance : 2

147
Tree	long sum = CHAR_CONS ;
Code	long sum = CHAR_CONS ;
Distance : 2

148
Tree	int sum = FastMath.PI ;
Code	int sum = FastMath.PI ;
Distance : 2

149
Tree	public int sum ;
Code	public int sum ;
Distance : 4

150
Tree	int sum = sum + NUMBER_CONSTANT ;
Code	int sum = sum + NUMBER_CONSTANT ;
Distance : 3

151
Tree	int sum = STRING_CONSTANT + sum ; wanted
Code	int sum = STRING_CONSTANT + sum ; wanted
Distance : 5

152
Tree	int sum = false ;
Code	int sum = false ;
Distance : 2

153
Tree	float sum = NUMBER_CONSTANT ;
Code	float sum = NUMBER_CONSTANT ;
Distance : 1

154
Tree	int sum = ^ ;
Code	int sum = ^ ;
Distance : 2

155
Tree	int sum = fht () ;
Code	int sum = fht () ;
Distance : 3

156
Tree	int sum = AllowedSolution.ANY_SIDE ;
Code	int sum = AllowedSolution.ANY_SIDE ;
Distance : 2

157
Tree	int sum [] = normalizeConstraints () ;
Code	int sum [] = normalizeConstraints () ;
Distance : 4

158
Tree	long sum = this . sum ;
Code	long sum = this . sum ;
Distance : 4

159
Tree	int sum = point () ;
Code	int sum = point () ;
Distance : 3

160
Tree	char sum ;
Code	char sum ;
Distance : 3

161
Tree	byte sum = true ;
Code	byte sum = true ;
Distance : 2

162
Tree	protected int sum ;
Code	protected int sum ;
Distance : 4

163
Tree	double += ;
Code	double += ;
Distance : 3

164
Tree	int sum = CHAR_CONS ; wanted
Code	int sum = CHAR_CONS ; wanted
Distance : 3

165
Tree	static int sum ;
Code	static int sum ;
Distance : 4

166
Tree	char sum = NUMBER_CONSTANT ;
Code	char sum = NUMBER_CONSTANT ;
Distance : 1

167
Tree	boolean sum = CHAR_CONS ;
Code	boolean sum = CHAR_CONS ;
Distance : 2

168
Tree	int sum = Double.NaN ;
Code	int sum = Double.NaN ;
Distance : 2

169
Tree	synchronized int sum ;
Code	synchronized int sum ;
Distance : 4

170
Tree	public int sum = NUMBER_CONSTANT ;
Code	public int sum = NUMBER_CONSTANT ;
Distance : 2

171
Tree	int sum = this . sum ; wanted
Code	int sum = this . sum ; wanted
Distance : 5

172
Tree	int sum = new Object () ;
Code	int sum = new Object () ;
Distance : 4

173
Tree	int sum = sum ; wanted
Code	int sum = sum ; wanted
Distance : 3

174
Tree	int sum = break; ;
Code	int sum = break; ;
Distance : 2

175
Tree	float sum = true ;
Code	float sum = true ;
Distance : 2

176
Tree	short sum = NUMBER_CONSTANT ;
Code	short sum = NUMBER_CONSTANT ;
Distance : 1

177
Tree	int sum = newScope () . sum ;
Code	int sum = newScope () . sum ;
Distance : 5

178
Tree	int sum = getColumnDimension () . sum ;
Code	int sum = getColumnDimension () . sum ;
Distance : 5

179
Tree	int sum = STRING_CONSTANT + sum ;
Code	int sum = STRING_CONSTANT + sum ;
Distance : 4

180
Tree	int sum = getTickLength () . sum ;
Code	int sum = getTickLength () . sum ;
Distance : 5

181
Tree	int realEigenvalues [] = sum ;
Code	int realEigenvalues [] = sum ;
Distance : 4

182
Tree	int VarInfo [] = sum ;
Code	int VarInfo [] = sum ;
Distance : 4

183
Tree	boolean sum = this . sum ;
Code	boolean sum = this . sum ;
Distance : 4

184
Tree	final long sum ;
Code	final long sum ;
Distance : 4

185
Tree	int sum = ? ;
Code	int sum = ? ;
Distance : 2

186
Tree	double sum = sum ;
Code	double sum = sum ;
Distance : 1

187
Tree	synchronized int sum = NUMBER_CONSTANT ;
Code	synchronized int sum = NUMBER_CONSTANT ;
Distance : 2

188
Tree	char sum = true ;
Code	char sum = true ;
Distance : 2

189
Tree	int sum = return; ;
Code	int sum = return; ;
Distance : 2

190
Tree	int sum = SinFunction ;
Code	int sum = SinFunction ;
Distance : 2

191
Tree	int sum = NUMBER_CONSTANT ; wanted
Code	int sum = NUMBER_CONSTANT ; wanted
Distance : 2

192
Tree	short sum = sum ;
Code	short sum = sum ;
Distance : 2

193
Tree	short sum = CHAR_CONS ;
Code	short sum = CHAR_CONS ;
Distance : 2

194
Tree	char sum = sum + NUMBER_CONSTANT ;
Code	char sum = sum + NUMBER_CONSTANT ;
Distance : 3

195
Tree	int floor [] = sum ;
Code	int floor [] = sum ;
Distance : 4

196
Tree	double sum = false ;
Code	double sum = false ;
Distance : 1

197
Tree	final long sum = NUMBER_CONSTANT ;
Code	final long sum = NUMBER_CONSTANT ;
Distance : 2

198
Tree	short sum = sum + NUMBER_CONSTANT ;
Code	short sum = sum + NUMBER_CONSTANT ;
Distance : 3

199
Tree	int sum = sum + NUMBER_CONSTANT ; wanted
Code	int sum = sum + NUMBER_CONSTANT ; wanted
Distance : 4

========================================================================


========================================================================
Example Number: 63
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	Iterator iter = iterator ( iter . class ) ; toString
Code	Iterator iter = iterator ( iter . class ) ; toString
Distance : 6

1
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; toString
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; toString
Distance : 9

2
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Class
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Class
Distance : 5

3
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; f
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; f
Distance : 5

4
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; ParamChecks
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; ParamChecks
Distance : 5

5
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Preconditions
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Preconditions
Distance : 11

6
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; -
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; -
Distance : 11

7
Tree	Iterator iter = iterator ( res.entries ) ; Preconditions
Code	Iterator iter = iterator ( res.entries ) ; Preconditions
Distance : 5

8
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; ParamChecks
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; ParamChecks
Distance : 11

9
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Test
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Test
Distance : 5

10
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; Preconditions
Code	Iterator iter = iterator ( res.entries ) . iterator () ; Preconditions
Distance : 5

11
Tree	Iterator entries = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 6

12
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 6

13
Tree	Iterator entries = iterator ( this . iter ) ;
Code	Iterator entries = iterator ( this . iter ) ;
Distance : 6

14
Tree	Iterator entries = iterator ( entries . class ) ;
Code	Iterator entries = iterator ( entries . class ) ;
Distance : 5

15
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; -
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; -
Distance : 5

16
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; source
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; source
Distance : 9

17
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; options
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; options
Distance : 9

18
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; p
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; p
Distance : 9

19
Tree	Iterator iter = res.entries . iterator () ; {}
Code	Iterator iter = res.entries . iterator () ; {}
Distance : 2

20
Tree	Iterator iter = res.entries . iterator () ; f
Code	Iterator iter = res.entries . iterator () ; f
Distance : 2

21
Tree	Iterator iter = res.entries . iterator () ; ParamChecks
Code	Iterator iter = res.entries . iterator () ; ParamChecks
Distance : 2

22
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; {}
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; {}
Distance : 11

23
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MathRuntimeException
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MathRuntimeException
Distance : 11

24
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 11

25
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 11

26
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; Class
Code	Iterator iter = iterator ( res.entries ) . iterator () ; Class
Distance : 5

27
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; MathRuntimeException
Code	Iterator iter = iterator ( res.entries ) . iterator () ; MathRuntimeException
Distance : 5

28
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; f
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; f
Distance : 9

29
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; {}
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; {}
Distance : 9

30
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MathRuntimeException
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MathRuntimeException
Distance : 9

31
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 9

32
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; f
Code	Iterator iter = iterator ( res.entries ) . iterator () ; f
Distance : 5

33
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

34
Tree	Iterator entries = iterator ( this . entries ) ;
Code	Iterator entries = iterator ( this . entries ) ;
Distance : 6

35
Tree	Iterator entries = iterator ( res.entries ) . iterator () ;
Code	Iterator entries = iterator ( res.entries ) . iterator () ;
Distance : 5

36
Tree	Iterator entries = entries . iterator ( iter . class ) ;
Code	Iterator entries = entries . iterator ( iter . class ) ;
Distance : 6

37
Tree	Iterator entries = iter . iterator ( entries . class ) ;
Code	Iterator entries = iter . iterator ( entries . class ) ;
Distance : 7

38
Tree	Iterator iter = iterator ( res.entries ) ;
Code	Iterator iter = iterator ( res.entries ) ;
Distance : 4

39
Tree	Iterator iter = iter . iterator ( super(); ) ;
Code	Iterator iter = iter . iterator ( super(); ) ;
Distance : 4

40
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 6

41
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

42
Tree	Iterator iter = iterator ( iter . class ) ;
Code	Iterator iter = iterator ( iter . class ) ;
Distance : 5

43
Tree	Iterator iter = this . iter . iterator () ;
Code	Iterator iter = this . iter . iterator () ;
Distance : 3

44
Tree	Iterator iter = this . entries . iterator () ;
Code	Iterator iter = this . entries . iterator () ;
Distance : 2

45
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

46
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Distance : 4

47
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

48
Tree	Iterator iter = iter . iterator ( iter . class ) ;
Code	Iterator iter = iter . iterator ( iter . class ) ;
Distance : 6

49
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

50
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

51
Tree	Iterator iter = iter . iterator () ;
Code	Iterator iter = iter . iterator () ;
Distance : 1

52
Tree	Iterator iter = iter . iterator ( null ) ;
Code	Iterator iter = iter . iterator ( null ) ;
Distance : 4

53
Tree	Iterator iter = iter . iterator ( return; ) ;
Code	Iterator iter = iter . iterator ( return; ) ;
Distance : 4

54
Tree	Iterator iter = res.entries . iterator () ; MathRuntimeException
Code	Iterator iter = res.entries . iterator () ; MathRuntimeException
Distance : 2

55
Tree	Iterator iter = iter . iterator ( entries . class ) ;
Code	Iterator iter = iter . iterator ( entries . class ) ;
Distance : 6

56
Tree	Iterator iter = entries . iterator ( iter . class ) ;
Code	Iterator iter = entries . iterator ( iter . class ) ;
Distance : 5

57
Tree	Iterator entries = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 7

58
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 7

59
Tree	Iterator entries = entries . iterator () ;
Code	Iterator entries = entries . iterator () ;
Distance : 1

60
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

61
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

62
Tree	Iterator entries = iterator ( iter . class ) ;
Code	Iterator entries = iterator ( iter . class ) ;
Distance : 6

63
Tree	Iterator iter = entries . iterator ( entries . class ) ;
Code	Iterator iter = entries . iterator ( entries . class ) ;
Distance : 5

64
Tree	Iterator iter = entries . iterator ( return; ) ;
Code	Iterator iter = entries . iterator ( return; ) ;
Distance : 3

65
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 5

66
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

67
Tree	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Distance : 5

68
Tree	Iterator entries = iterator () ;
Code	Iterator entries = iterator () ;
Distance : 3

69
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

70
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

71
Tree	Iterator iter = iterator ( res.entries ) . iterator () ;
Code	Iterator iter = iterator ( res.entries ) . iterator () ;
Distance : 4

72
Tree	Iterator iter = iter . iterator ( continue; ) ;
Code	Iterator iter = iter . iterator ( continue; ) ;
Distance : 4

73
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; ParamChecks
Code	Iterator iter = iterator ( res.entries ) . iterator () ; ParamChecks
Distance : 5

74
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

75
Tree	Iterator iter = iterator () ; Preconditions
Code	Iterator iter = iterator () ; Preconditions
Distance : 3

76
Tree	Iterator iter = this . entries . iterator () ; options
Code	Iterator iter = this . entries . iterator () ; options
Distance : 3

77
Tree	Iterator iter = this . entries . iterator () ; p
Code	Iterator iter = this . entries . iterator () ; p
Distance : 3

78
Tree	Iterator iter = this . entries . iterator () ; &&
Code	Iterator iter = this . entries . iterator () ; &&
Distance : 3

79
Tree	Iterator iter = this . entries . iterator () ; T
Code	Iterator iter = this . entries . iterator () ; T
Distance : 3

80
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; toString
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; toString
Distance : 5

81
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; source
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; source
Distance : 5

82
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; &&
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; &&
Distance : 5

83
Tree	Iterator iter = iter . iterator ( iter . class ) ; wanted
Code	Iterator iter = iter . iterator ( iter . class ) ; wanted
Distance : 7

84
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; source
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; source
Distance : 7

85
Tree	Iterator iter = iterator ( iter . class ) ; options
Code	Iterator iter = iterator ( iter . class ) ; options
Distance : 6

86
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; options
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; options
Distance : 7

87
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; ParamChecks
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; ParamChecks
Distance : 7

88
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; -
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; -
Distance : 7

89
Tree	Iterator iter = iterator () ; f
Code	Iterator iter = iterator () ; f
Distance : 3

90
Tree	Iterator iter = iterator () ; ParamChecks
Code	Iterator iter = iterator () ; ParamChecks
Distance : 3

91
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; MathRuntimeException
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; MathRuntimeException
Distance : 7

92
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 7

93
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 7

94
Tree	Iterator iter = iterator ( this . entries ) ; T
Code	Iterator iter = iterator ( this . entries ) ; T
Distance : 6

95
Tree	Iterator iter = iterator ( this . entries ) ; &&
Code	Iterator iter = iterator ( this . entries ) ; &&
Distance : 6

96
Tree	Iterator iter = iterator ( this . entries ) ; p
Code	Iterator iter = iterator ( this . entries ) ; p
Distance : 6

97
Tree	Iterator iter = iterator ( this . entries ) ; options
Code	Iterator iter = iterator ( this . entries ) ; options
Distance : 6

98
Tree	Iterator iter = iterator () ; -
Code	Iterator iter = iterator () ; -
Distance : 3

99
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Preconditions
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Preconditions
Distance : 7

100
Tree	Iterator iter = iterator ( this . entries ) ; source
Code	Iterator iter = iterator ( this . entries ) ; source
Distance : 6

101
Tree	Iterator iter = this . entries . iterator () ; source
Code	Iterator iter = this . entries . iterator () ; source
Distance : 3

102
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; p
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; p
Distance : 7

103
Tree	Iterator iter = this . entries . iterator () ; toString
Code	Iterator iter = this . entries . iterator () ; toString
Distance : 3

104
Tree	Iterator iter = iterator ( iter . class ) ; p
Code	Iterator iter = iterator ( iter . class ) ; p
Distance : 6

105
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; T
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; T
Distance : 7

106
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; Test
Code	Iterator iter = iterator ( res.entries , res.entries ) ; Test
Distance : 7

107
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; Class
Code	Iterator iter = iterator ( res.entries , res.entries ) ; Class
Distance : 7

108
Tree	Iterator iter = iter . iterator () ; &&
Code	Iterator iter = iter . iterator () ; &&
Distance : 2

109
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; MathRuntimeException
Code	Iterator iter = iterator ( res.entries , res.entries ) ; MathRuntimeException
Distance : 7

110
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; {}
Code	Iterator iter = iterator ( res.entries , res.entries ) ; {}
Distance : 7

111
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; p
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; p
Distance : 7

112
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; f
Code	Iterator iter = iterator ( res.entries , res.entries ) ; f
Distance : 7

113
Tree	Iterator iter = iter . iterator () ; p
Code	Iterator iter = iter . iterator () ; p
Distance : 2

114
Tree	Iterator iter = iter . iterator () ; options
Code	Iterator iter = iter . iterator () ; options
Distance : 2

115
Tree	Iterator iter = iter . iterator () ; source
Code	Iterator iter = iter . iterator () ; source
Distance : 2

116
Tree	Iterator iter = iter . iterator () ; toString
Code	Iterator iter = iter . iterator () ; toString
Distance : 2

117
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; -
Code	Iterator iter = iterator ( res.entries , res.entries ) ; -
Distance : 7

118
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Preconditions
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Preconditions
Distance : 5

119
Tree	Iterator iter = iterator () ; MathRuntimeException
Code	Iterator iter = iterator () ; MathRuntimeException
Distance : 3

120
Tree	Iterator iter = iterator () ; {}
Code	Iterator iter = iterator () ; {}
Distance : 3

121
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; ParamChecks
Code	Iterator iter = iterator ( res.entries , res.entries ) ; ParamChecks
Distance : 7

122
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; options
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; options
Distance : 7

123
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; source
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; source
Distance : 7

124
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; MathRuntimeException
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; MathRuntimeException
Distance : 5

125
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Class
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Class
Distance : 5

126
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Test
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Test
Distance : 5

127
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; toString
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; toString
Distance : 7

128
Tree	Iterator iter = iterator () ; Class
Code	Iterator iter = iterator () ; Class
Distance : 3

129
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; &&
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; &&
Distance : 7

130
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; {}
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; {}
Distance : 5

131
Tree	Iterator iter = iter . iterator ( break; ) ;
Code	Iterator iter = iter . iterator ( break; ) ;
Distance : 4

132
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

133
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; &&
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; &&
Distance : 9

134
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 3

135
Tree	Iterator iter = iterator ( iter . class ) ; source
Code	Iterator iter = iterator ( iter . class ) ; source
Distance : 6

136
Tree	Iterator iter = entries . iterator ( null ) ;
Code	Iterator iter = entries . iterator ( null ) ;
Distance : 3

137
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; p
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; p
Distance : 5

138
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

139
Tree	Iterator iter = iterator ( this . entries ) ;
Code	Iterator iter = iterator ( this . entries ) ;
Distance : 5

140
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; MathRuntimeException
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; MathRuntimeException
Distance : 5

141
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; &&
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; &&
Distance : 7

142
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

143
Tree	Iterator iter = iterator ( res.entries ) ; -
Code	Iterator iter = iterator ( res.entries ) ; -
Distance : 5

144
Tree	Iterator iter = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 5

145
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; ParamChecks
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; ParamChecks
Distance : 9

146
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; -
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; -
Distance : 5

147
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; toString
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; toString
Distance : 7

148
Tree	Iterator iter = iter . iterator ( default: ) ;
Code	Iterator iter = iter . iterator ( default: ) ;
Distance : 4

149
Tree	Iterator iter = iterator ( res.entries ) ; {}
Code	Iterator iter = iterator ( res.entries ) ; {}
Distance : 5

150
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; f
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; f
Distance : 11

151
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; Test
Code	Iterator iter = iterator ( res.entries ) . iterator () ; Test
Distance : 5

152
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; T
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; T
Distance : 9

153
Tree	Iterator entries = iter . iterator ( null ) ;
Code	Iterator entries = iter . iterator ( null ) ;
Distance : 5

154
Tree	Iterator iter = iterator ( res.entries ) ; ParamChecks
Code	Iterator iter = iterator ( res.entries ) ; ParamChecks
Distance : 5

155
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

156
Tree	Iterator entries = iterator ( res.entries ) ;
Code	Iterator entries = iterator ( res.entries ) ;
Distance : 5

157
Tree	Iterator entries = entries . iterator ( entries . class ) ;
Code	Iterator entries = entries . iterator ( entries . class ) ;
Distance : 6

158
Tree	Iterator iter = iterator ( iter . class ) ; T
Code	Iterator iter = iterator ( iter . class ) ; T
Distance : 6

159
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; f
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; f
Distance : 7

160
Tree	Iterator iter = entries . iterator () ;
Code	Iterator iter = entries . iterator () ;
Distance : 0

161
Tree	Iterator iter = iterator ( entries . class ) ;
Code	Iterator iter = iterator ( entries . class ) ;
Distance : 4

162
Tree	Iterator iter = iterator ( this . entries ) ; toString
Code	Iterator iter = iterator ( this . entries ) ; toString
Distance : 6

163
Tree	Iterator iter = iter . iterator ( iter . class ) ; Math
Code	Iterator iter = iter . iterator ( iter . class ) ; Math
Distance : 7

164
Tree	Iterator iter = iterator ( res.entries ) ; MathRuntimeException
Code	Iterator iter = iterator ( res.entries ) ; MathRuntimeException
Distance : 5

165
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 6

166
Tree	Iterator iter = iterator () ; Test
Code	Iterator iter = iterator () ; Test
Distance : 3

167
Tree	Iterator iter = iterator ( res.entries ) ; Class
Code	Iterator iter = iterator ( res.entries ) ; Class
Distance : 5

168
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; options
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; options
Distance : 5

169
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

170
Tree	Iterator iter = entries . iterator ( super(); ) ;
Code	Iterator iter = entries . iterator ( super(); ) ;
Distance : 3

171
Tree	Iterator iter = iterator ( res.entries ) ; Test
Code	Iterator iter = iterator ( res.entries ) ; Test
Distance : 5

172
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; -
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; -
Distance : 9

173
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; ParamChecks
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; ParamChecks
Distance : 5

174
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Preconditions
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Preconditions
Distance : 5

175
Tree	Iterator entries = iter . iterator ( iter . class ) ;
Code	Iterator entries = iter . iterator ( iter . class ) ;
Distance : 7

176
Tree	Iterator iter = res.entries . iterator () ; Test
Code	Iterator iter = res.entries . iterator () ; Test
Distance : 2

177
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; T
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; T
Distance : 5

178
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; -
Code	Iterator iter = iterator ( res.entries ) . iterator () ; -
Distance : 5

179
Tree	Iterator entries = iter . iterator () ;
Code	Iterator entries = iter . iterator () ;
Distance : 2

180
Tree	Iterator iter = iterator ( res.entries ) ; f
Code	Iterator iter = iterator ( res.entries ) ; f
Distance : 5

181
Tree	Iterator entries = this . entries . iterator () ;
Code	Iterator entries = this . entries . iterator () ;
Distance : 3

182
Tree	Iterator iter = res.entries . iterator () ; Class
Code	Iterator iter = res.entries . iterator () ; Class
Distance : 2

183
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Preconditions
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Preconditions
Distance : 9

184
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; f
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; f
Distance : 5

185
Tree	Iterator iter = iter . iterator () ; T
Code	Iterator iter = iter . iterator () ; T
Distance : 2

186
Tree	Iterator iter = res.entries . iterator () ; Preconditions
Code	Iterator iter = res.entries . iterator () ; Preconditions
Distance : 2

187
Tree	Iterator iter = res.entries . iterator () ; -
Code	Iterator iter = res.entries . iterator () ; -
Distance : 2

188
Tree	Iterator iter = iterator () ;
Code	Iterator iter = iterator () ;
Distance : 2

189
Tree	Iterator iter = iterator ( res.entries , res.entries ) ;
Code	Iterator iter = iterator ( res.entries , res.entries ) ;
Distance : 6

190
Tree	Iterator entries = iterator ( res.entries , res.entries ) ;
Code	Iterator entries = iterator ( res.entries , res.entries ) ;
Distance : 7

191
Tree	Iterator iter = iterator ( iter . class ) ; &&
Code	Iterator iter = iterator ( iter . class ) ; &&
Distance : 6

192
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; {}
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; {}
Distance : 7

193
Tree	Iterator iter = iterator ( this . iter ) ;
Code	Iterator iter = iterator ( this . iter ) ;
Distance : 5

194
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; T
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; T
Distance : 7

195
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; Preconditions
Code	Iterator iter = iterator ( res.entries , res.entries ) ; Preconditions
Distance : 7

196
Tree	Iterator entries = this . iter . iterator () ;
Code	Iterator entries = this . iter . iterator () ;
Distance : 4

197
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 9

198
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; {}
Code	Iterator iter = iterator ( res.entries ) . iterator () ; {}
Distance : 5

199
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; {}
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; {}
Distance : 5

========================================================================


========================================================================
Example Number: 64
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	Iterator iter = iterator ( iter . class ) ; toString
Code	Iterator iter = iterator ( iter . class ) ; toString
Distance : 6

1
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; toString
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; toString
Distance : 9

2
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Class
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Class
Distance : 5

3
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; f
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; f
Distance : 5

4
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; ParamChecks
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; ParamChecks
Distance : 5

5
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Preconditions
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Preconditions
Distance : 11

6
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; -
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; -
Distance : 11

7
Tree	Iterator iter = iterator ( res.entries ) ; Preconditions
Code	Iterator iter = iterator ( res.entries ) ; Preconditions
Distance : 5

8
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; ParamChecks
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; ParamChecks
Distance : 11

9
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Test
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Test
Distance : 5

10
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; Preconditions
Code	Iterator iter = iterator ( res.entries ) . iterator () ; Preconditions
Distance : 5

11
Tree	Iterator entries = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 6

12
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 6

13
Tree	Iterator entries = iterator ( this . iter ) ;
Code	Iterator entries = iterator ( this . iter ) ;
Distance : 6

14
Tree	Iterator entries = iterator ( entries . class ) ;
Code	Iterator entries = iterator ( entries . class ) ;
Distance : 5

15
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; -
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; -
Distance : 5

16
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; source
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; source
Distance : 9

17
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; options
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; options
Distance : 9

18
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; p
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; p
Distance : 9

19
Tree	Iterator iter = res.entries . iterator () ; {}
Code	Iterator iter = res.entries . iterator () ; {}
Distance : 2

20
Tree	Iterator iter = res.entries . iterator () ; f
Code	Iterator iter = res.entries . iterator () ; f
Distance : 2

21
Tree	Iterator iter = res.entries . iterator () ; ParamChecks
Code	Iterator iter = res.entries . iterator () ; ParamChecks
Distance : 2

22
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; {}
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; {}
Distance : 11

23
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MathRuntimeException
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MathRuntimeException
Distance : 11

24
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 11

25
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 11

26
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; Class
Code	Iterator iter = iterator ( res.entries ) . iterator () ; Class
Distance : 5

27
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; MathRuntimeException
Code	Iterator iter = iterator ( res.entries ) . iterator () ; MathRuntimeException
Distance : 5

28
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; f
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; f
Distance : 9

29
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; {}
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; {}
Distance : 9

30
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MathRuntimeException
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MathRuntimeException
Distance : 9

31
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 9

32
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; f
Code	Iterator iter = iterator ( res.entries ) . iterator () ; f
Distance : 5

33
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

34
Tree	Iterator entries = iterator ( this . entries ) ;
Code	Iterator entries = iterator ( this . entries ) ;
Distance : 6

35
Tree	Iterator entries = iterator ( res.entries ) . iterator () ;
Code	Iterator entries = iterator ( res.entries ) . iterator () ;
Distance : 5

36
Tree	Iterator entries = entries . iterator ( iter . class ) ;
Code	Iterator entries = entries . iterator ( iter . class ) ;
Distance : 6

37
Tree	Iterator entries = iter . iterator ( entries . class ) ;
Code	Iterator entries = iter . iterator ( entries . class ) ;
Distance : 7

38
Tree	Iterator iter = iterator ( res.entries ) ;
Code	Iterator iter = iterator ( res.entries ) ;
Distance : 4

39
Tree	Iterator iter = iter . iterator ( super(); ) ;
Code	Iterator iter = iter . iterator ( super(); ) ;
Distance : 4

40
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 6

41
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

42
Tree	Iterator iter = iterator ( iter . class ) ;
Code	Iterator iter = iterator ( iter . class ) ;
Distance : 5

43
Tree	Iterator iter = this . iter . iterator () ;
Code	Iterator iter = this . iter . iterator () ;
Distance : 3

44
Tree	Iterator iter = this . entries . iterator () ;
Code	Iterator iter = this . entries . iterator () ;
Distance : 2

45
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

46
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Distance : 4

47
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

48
Tree	Iterator iter = iter . iterator ( iter . class ) ;
Code	Iterator iter = iter . iterator ( iter . class ) ;
Distance : 6

49
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

50
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

51
Tree	Iterator iter = iter . iterator () ;
Code	Iterator iter = iter . iterator () ;
Distance : 1

52
Tree	Iterator iter = iter . iterator ( null ) ;
Code	Iterator iter = iter . iterator ( null ) ;
Distance : 4

53
Tree	Iterator iter = iter . iterator ( return; ) ;
Code	Iterator iter = iter . iterator ( return; ) ;
Distance : 4

54
Tree	Iterator iter = res.entries . iterator () ; MathRuntimeException
Code	Iterator iter = res.entries . iterator () ; MathRuntimeException
Distance : 2

55
Tree	Iterator iter = iter . iterator ( entries . class ) ;
Code	Iterator iter = iter . iterator ( entries . class ) ;
Distance : 6

56
Tree	Iterator iter = entries . iterator ( iter . class ) ;
Code	Iterator iter = entries . iterator ( iter . class ) ;
Distance : 5

57
Tree	Iterator entries = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 7

58
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 7

59
Tree	Iterator entries = entries . iterator () ;
Code	Iterator entries = entries . iterator () ;
Distance : 1

60
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

61
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

62
Tree	Iterator entries = iterator ( iter . class ) ;
Code	Iterator entries = iterator ( iter . class ) ;
Distance : 6

63
Tree	Iterator iter = entries . iterator ( entries . class ) ;
Code	Iterator iter = entries . iterator ( entries . class ) ;
Distance : 5

64
Tree	Iterator iter = entries . iterator ( return; ) ;
Code	Iterator iter = entries . iterator ( return; ) ;
Distance : 3

65
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 5

66
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

67
Tree	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Distance : 5

68
Tree	Iterator entries = iterator () ;
Code	Iterator entries = iterator () ;
Distance : 3

69
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

70
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

71
Tree	Iterator iter = iterator ( res.entries ) . iterator () ;
Code	Iterator iter = iterator ( res.entries ) . iterator () ;
Distance : 4

72
Tree	Iterator iter = iter . iterator ( continue; ) ;
Code	Iterator iter = iter . iterator ( continue; ) ;
Distance : 4

73
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; ParamChecks
Code	Iterator iter = iterator ( res.entries ) . iterator () ; ParamChecks
Distance : 5

74
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

75
Tree	Iterator iter = iterator () ; Preconditions
Code	Iterator iter = iterator () ; Preconditions
Distance : 3

76
Tree	Iterator iter = this . entries . iterator () ; options
Code	Iterator iter = this . entries . iterator () ; options
Distance : 3

77
Tree	Iterator iter = this . entries . iterator () ; p
Code	Iterator iter = this . entries . iterator () ; p
Distance : 3

78
Tree	Iterator iter = this . entries . iterator () ; &&
Code	Iterator iter = this . entries . iterator () ; &&
Distance : 3

79
Tree	Iterator iter = this . entries . iterator () ; T
Code	Iterator iter = this . entries . iterator () ; T
Distance : 3

80
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; toString
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; toString
Distance : 5

81
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; source
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; source
Distance : 5

82
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; &&
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; &&
Distance : 5

83
Tree	Iterator iter = iter . iterator ( iter . class ) ; wanted
Code	Iterator iter = iter . iterator ( iter . class ) ; wanted
Distance : 7

84
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; source
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; source
Distance : 7

85
Tree	Iterator iter = iterator ( iter . class ) ; options
Code	Iterator iter = iterator ( iter . class ) ; options
Distance : 6

86
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; options
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; options
Distance : 7

87
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; ParamChecks
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; ParamChecks
Distance : 7

88
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; -
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; -
Distance : 7

89
Tree	Iterator iter = iterator () ; f
Code	Iterator iter = iterator () ; f
Distance : 3

90
Tree	Iterator iter = iterator () ; ParamChecks
Code	Iterator iter = iterator () ; ParamChecks
Distance : 3

91
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; MathRuntimeException
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; MathRuntimeException
Distance : 7

92
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 7

93
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 7

94
Tree	Iterator iter = iterator ( this . entries ) ; T
Code	Iterator iter = iterator ( this . entries ) ; T
Distance : 6

95
Tree	Iterator iter = iterator ( this . entries ) ; &&
Code	Iterator iter = iterator ( this . entries ) ; &&
Distance : 6

96
Tree	Iterator iter = iterator ( this . entries ) ; p
Code	Iterator iter = iterator ( this . entries ) ; p
Distance : 6

97
Tree	Iterator iter = iterator ( this . entries ) ; options
Code	Iterator iter = iterator ( this . entries ) ; options
Distance : 6

98
Tree	Iterator iter = iterator () ; -
Code	Iterator iter = iterator () ; -
Distance : 3

99
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Preconditions
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Preconditions
Distance : 7

100
Tree	Iterator iter = iterator ( this . entries ) ; source
Code	Iterator iter = iterator ( this . entries ) ; source
Distance : 6

101
Tree	Iterator iter = this . entries . iterator () ; source
Code	Iterator iter = this . entries . iterator () ; source
Distance : 3

102
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; p
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; p
Distance : 7

103
Tree	Iterator iter = this . entries . iterator () ; toString
Code	Iterator iter = this . entries . iterator () ; toString
Distance : 3

104
Tree	Iterator iter = iterator ( iter . class ) ; p
Code	Iterator iter = iterator ( iter . class ) ; p
Distance : 6

105
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; T
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; T
Distance : 7

106
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; Test
Code	Iterator iter = iterator ( res.entries , res.entries ) ; Test
Distance : 7

107
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; Class
Code	Iterator iter = iterator ( res.entries , res.entries ) ; Class
Distance : 7

108
Tree	Iterator iter = iter . iterator () ; &&
Code	Iterator iter = iter . iterator () ; &&
Distance : 2

109
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; MathRuntimeException
Code	Iterator iter = iterator ( res.entries , res.entries ) ; MathRuntimeException
Distance : 7

110
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; {}
Code	Iterator iter = iterator ( res.entries , res.entries ) ; {}
Distance : 7

111
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; p
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; p
Distance : 7

112
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; f
Code	Iterator iter = iterator ( res.entries , res.entries ) ; f
Distance : 7

113
Tree	Iterator iter = iter . iterator () ; p
Code	Iterator iter = iter . iterator () ; p
Distance : 2

114
Tree	Iterator iter = iter . iterator () ; options
Code	Iterator iter = iter . iterator () ; options
Distance : 2

115
Tree	Iterator iter = iter . iterator () ; source
Code	Iterator iter = iter . iterator () ; source
Distance : 2

116
Tree	Iterator iter = iter . iterator () ; toString
Code	Iterator iter = iter . iterator () ; toString
Distance : 2

117
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; -
Code	Iterator iter = iterator ( res.entries , res.entries ) ; -
Distance : 7

118
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Preconditions
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Preconditions
Distance : 5

119
Tree	Iterator iter = iterator () ; MathRuntimeException
Code	Iterator iter = iterator () ; MathRuntimeException
Distance : 3

120
Tree	Iterator iter = iterator () ; {}
Code	Iterator iter = iterator () ; {}
Distance : 3

121
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; ParamChecks
Code	Iterator iter = iterator ( res.entries , res.entries ) ; ParamChecks
Distance : 7

122
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; options
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; options
Distance : 7

123
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; source
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; source
Distance : 7

124
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; MathRuntimeException
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; MathRuntimeException
Distance : 5

125
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Class
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Class
Distance : 5

126
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Test
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Test
Distance : 5

127
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; toString
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; toString
Distance : 7

128
Tree	Iterator iter = iterator () ; Class
Code	Iterator iter = iterator () ; Class
Distance : 3

129
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; &&
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; &&
Distance : 7

130
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; {}
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; {}
Distance : 5

131
Tree	Iterator iter = iter . iterator ( break; ) ;
Code	Iterator iter = iter . iterator ( break; ) ;
Distance : 4

132
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

133
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; &&
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; &&
Distance : 9

134
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 3

135
Tree	Iterator iter = iterator ( iter . class ) ; source
Code	Iterator iter = iterator ( iter . class ) ; source
Distance : 6

136
Tree	Iterator iter = entries . iterator ( null ) ;
Code	Iterator iter = entries . iterator ( null ) ;
Distance : 3

137
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; p
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; p
Distance : 5

138
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

139
Tree	Iterator iter = iterator ( this . entries ) ;
Code	Iterator iter = iterator ( this . entries ) ;
Distance : 5

140
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; MathRuntimeException
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; MathRuntimeException
Distance : 5

141
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; &&
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; &&
Distance : 7

142
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

143
Tree	Iterator iter = iterator ( res.entries ) ; -
Code	Iterator iter = iterator ( res.entries ) ; -
Distance : 5

144
Tree	Iterator iter = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 5

145
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; ParamChecks
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; ParamChecks
Distance : 9

146
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; -
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; -
Distance : 5

147
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; toString
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; toString
Distance : 7

148
Tree	Iterator iter = iter . iterator ( default: ) ;
Code	Iterator iter = iter . iterator ( default: ) ;
Distance : 4

149
Tree	Iterator iter = iterator ( res.entries ) ; {}
Code	Iterator iter = iterator ( res.entries ) ; {}
Distance : 5

150
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; f
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; f
Distance : 11

151
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; Test
Code	Iterator iter = iterator ( res.entries ) . iterator () ; Test
Distance : 5

152
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; T
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; T
Distance : 9

153
Tree	Iterator entries = iter . iterator ( null ) ;
Code	Iterator entries = iter . iterator ( null ) ;
Distance : 5

154
Tree	Iterator iter = iterator ( res.entries ) ; ParamChecks
Code	Iterator iter = iterator ( res.entries ) ; ParamChecks
Distance : 5

155
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

156
Tree	Iterator entries = iterator ( res.entries ) ;
Code	Iterator entries = iterator ( res.entries ) ;
Distance : 5

157
Tree	Iterator entries = entries . iterator ( entries . class ) ;
Code	Iterator entries = entries . iterator ( entries . class ) ;
Distance : 6

158
Tree	Iterator iter = iterator ( iter . class ) ; T
Code	Iterator iter = iterator ( iter . class ) ; T
Distance : 6

159
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; f
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; f
Distance : 7

160
Tree	Iterator iter = entries . iterator () ;
Code	Iterator iter = entries . iterator () ;
Distance : 0

161
Tree	Iterator iter = iterator ( entries . class ) ;
Code	Iterator iter = iterator ( entries . class ) ;
Distance : 4

162
Tree	Iterator iter = iterator ( this . entries ) ; toString
Code	Iterator iter = iterator ( this . entries ) ; toString
Distance : 6

163
Tree	Iterator iter = iter . iterator ( iter . class ) ; Math
Code	Iterator iter = iter . iterator ( iter . class ) ; Math
Distance : 7

164
Tree	Iterator iter = iterator ( res.entries ) ; MathRuntimeException
Code	Iterator iter = iterator ( res.entries ) ; MathRuntimeException
Distance : 5

165
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 6

166
Tree	Iterator iter = iterator () ; Test
Code	Iterator iter = iterator () ; Test
Distance : 3

167
Tree	Iterator iter = iterator ( res.entries ) ; Class
Code	Iterator iter = iterator ( res.entries ) ; Class
Distance : 5

168
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; options
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; options
Distance : 5

169
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

170
Tree	Iterator iter = entries . iterator ( super(); ) ;
Code	Iterator iter = entries . iterator ( super(); ) ;
Distance : 3

171
Tree	Iterator iter = iterator ( res.entries ) ; Test
Code	Iterator iter = iterator ( res.entries ) ; Test
Distance : 5

172
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; -
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; -
Distance : 9

173
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; ParamChecks
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; ParamChecks
Distance : 5

174
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Preconditions
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Preconditions
Distance : 5

175
Tree	Iterator entries = iter . iterator ( iter . class ) ;
Code	Iterator entries = iter . iterator ( iter . class ) ;
Distance : 7

176
Tree	Iterator iter = res.entries . iterator () ; Test
Code	Iterator iter = res.entries . iterator () ; Test
Distance : 2

177
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; T
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; T
Distance : 5

178
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; -
Code	Iterator iter = iterator ( res.entries ) . iterator () ; -
Distance : 5

179
Tree	Iterator entries = iter . iterator () ;
Code	Iterator entries = iter . iterator () ;
Distance : 2

180
Tree	Iterator iter = iterator ( res.entries ) ; f
Code	Iterator iter = iterator ( res.entries ) ; f
Distance : 5

181
Tree	Iterator entries = this . entries . iterator () ;
Code	Iterator entries = this . entries . iterator () ;
Distance : 3

182
Tree	Iterator iter = res.entries . iterator () ; Class
Code	Iterator iter = res.entries . iterator () ; Class
Distance : 2

183
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Preconditions
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Preconditions
Distance : 9

184
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; f
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; f
Distance : 5

185
Tree	Iterator iter = iter . iterator () ; T
Code	Iterator iter = iter . iterator () ; T
Distance : 2

186
Tree	Iterator iter = res.entries . iterator () ; Preconditions
Code	Iterator iter = res.entries . iterator () ; Preconditions
Distance : 2

187
Tree	Iterator iter = res.entries . iterator () ; -
Code	Iterator iter = res.entries . iterator () ; -
Distance : 2

188
Tree	Iterator iter = iterator () ;
Code	Iterator iter = iterator () ;
Distance : 2

189
Tree	Iterator iter = iterator ( res.entries , res.entries ) ;
Code	Iterator iter = iterator ( res.entries , res.entries ) ;
Distance : 6

190
Tree	Iterator entries = iterator ( res.entries , res.entries ) ;
Code	Iterator entries = iterator ( res.entries , res.entries ) ;
Distance : 7

191
Tree	Iterator iter = iterator ( iter . class ) ; &&
Code	Iterator iter = iterator ( iter . class ) ; &&
Distance : 6

192
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; {}
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; {}
Distance : 7

193
Tree	Iterator iter = iterator ( this . iter ) ;
Code	Iterator iter = iterator ( this . iter ) ;
Distance : 5

194
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; T
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; T
Distance : 7

195
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; Preconditions
Code	Iterator iter = iterator ( res.entries , res.entries ) ; Preconditions
Distance : 7

196
Tree	Iterator entries = this . iter . iterator () ;
Code	Iterator entries = this . iter . iterator () ;
Distance : 4

197
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 9

198
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; {}
Code	Iterator iter = iterator ( res.entries ) . iterator () ; {}
Distance : 5

199
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; {}
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; {}
Distance : 5

========================================================================


========================================================================
Example Number: 65
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	Iterator iter = iterator ( iter . class ) ; toString
Code	Iterator iter = iterator ( iter . class ) ; toString
Distance : 6

1
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; toString
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; toString
Distance : 9

2
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Class
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Class
Distance : 5

3
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; f
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; f
Distance : 5

4
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; ParamChecks
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; ParamChecks
Distance : 5

5
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Preconditions
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Preconditions
Distance : 11

6
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; -
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; -
Distance : 11

7
Tree	Iterator iter = iterator ( res.entries ) ; Preconditions
Code	Iterator iter = iterator ( res.entries ) ; Preconditions
Distance : 5

8
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; ParamChecks
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; ParamChecks
Distance : 11

9
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Test
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Test
Distance : 5

10
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; Preconditions
Code	Iterator iter = iterator ( res.entries ) . iterator () ; Preconditions
Distance : 5

11
Tree	Iterator entries = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 6

12
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 6

13
Tree	Iterator entries = iterator ( this . iter ) ;
Code	Iterator entries = iterator ( this . iter ) ;
Distance : 6

14
Tree	Iterator entries = iterator ( entries . class ) ;
Code	Iterator entries = iterator ( entries . class ) ;
Distance : 5

15
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; -
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; -
Distance : 5

16
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; source
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; source
Distance : 9

17
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; options
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; options
Distance : 9

18
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; p
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; p
Distance : 9

19
Tree	Iterator iter = res.entries . iterator () ; {}
Code	Iterator iter = res.entries . iterator () ; {}
Distance : 2

20
Tree	Iterator iter = res.entries . iterator () ; f
Code	Iterator iter = res.entries . iterator () ; f
Distance : 2

21
Tree	Iterator iter = res.entries . iterator () ; ParamChecks
Code	Iterator iter = res.entries . iterator () ; ParamChecks
Distance : 2

22
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; {}
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; {}
Distance : 11

23
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MathRuntimeException
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MathRuntimeException
Distance : 11

24
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 11

25
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 11

26
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; Class
Code	Iterator iter = iterator ( res.entries ) . iterator () ; Class
Distance : 5

27
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; MathRuntimeException
Code	Iterator iter = iterator ( res.entries ) . iterator () ; MathRuntimeException
Distance : 5

28
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; f
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; f
Distance : 9

29
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; {}
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; {}
Distance : 9

30
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MathRuntimeException
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MathRuntimeException
Distance : 9

31
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 9

32
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; f
Code	Iterator iter = iterator ( res.entries ) . iterator () ; f
Distance : 5

33
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

34
Tree	Iterator entries = iterator ( this . entries ) ;
Code	Iterator entries = iterator ( this . entries ) ;
Distance : 6

35
Tree	Iterator entries = iterator ( res.entries ) . iterator () ;
Code	Iterator entries = iterator ( res.entries ) . iterator () ;
Distance : 5

36
Tree	Iterator entries = entries . iterator ( iter . class ) ;
Code	Iterator entries = entries . iterator ( iter . class ) ;
Distance : 6

37
Tree	Iterator entries = iter . iterator ( entries . class ) ;
Code	Iterator entries = iter . iterator ( entries . class ) ;
Distance : 7

38
Tree	Iterator iter = iterator ( res.entries ) ;
Code	Iterator iter = iterator ( res.entries ) ;
Distance : 4

39
Tree	Iterator iter = iter . iterator ( super(); ) ;
Code	Iterator iter = iter . iterator ( super(); ) ;
Distance : 4

40
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 6

41
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

42
Tree	Iterator iter = iterator ( iter . class ) ;
Code	Iterator iter = iterator ( iter . class ) ;
Distance : 5

43
Tree	Iterator iter = this . iter . iterator () ;
Code	Iterator iter = this . iter . iterator () ;
Distance : 3

44
Tree	Iterator iter = this . entries . iterator () ;
Code	Iterator iter = this . entries . iterator () ;
Distance : 2

45
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

46
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Distance : 4

47
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

48
Tree	Iterator iter = iter . iterator ( iter . class ) ;
Code	Iterator iter = iter . iterator ( iter . class ) ;
Distance : 6

49
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

50
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

51
Tree	Iterator iter = iter . iterator () ;
Code	Iterator iter = iter . iterator () ;
Distance : 1

52
Tree	Iterator iter = iter . iterator ( null ) ;
Code	Iterator iter = iter . iterator ( null ) ;
Distance : 4

53
Tree	Iterator iter = iter . iterator ( return; ) ;
Code	Iterator iter = iter . iterator ( return; ) ;
Distance : 4

54
Tree	Iterator iter = res.entries . iterator () ; MathRuntimeException
Code	Iterator iter = res.entries . iterator () ; MathRuntimeException
Distance : 2

55
Tree	Iterator iter = iter . iterator ( entries . class ) ;
Code	Iterator iter = iter . iterator ( entries . class ) ;
Distance : 6

56
Tree	Iterator iter = entries . iterator ( iter . class ) ;
Code	Iterator iter = entries . iterator ( iter . class ) ;
Distance : 5

57
Tree	Iterator entries = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 7

58
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 7

59
Tree	Iterator entries = entries . iterator () ;
Code	Iterator entries = entries . iterator () ;
Distance : 1

60
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

61
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

62
Tree	Iterator entries = iterator ( iter . class ) ;
Code	Iterator entries = iterator ( iter . class ) ;
Distance : 6

63
Tree	Iterator iter = entries . iterator ( entries . class ) ;
Code	Iterator iter = entries . iterator ( entries . class ) ;
Distance : 5

64
Tree	Iterator iter = entries . iterator ( return; ) ;
Code	Iterator iter = entries . iterator ( return; ) ;
Distance : 3

65
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 5

66
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

67
Tree	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Distance : 5

68
Tree	Iterator entries = iterator () ;
Code	Iterator entries = iterator () ;
Distance : 3

69
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

70
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

71
Tree	Iterator iter = iterator ( res.entries ) . iterator () ;
Code	Iterator iter = iterator ( res.entries ) . iterator () ;
Distance : 4

72
Tree	Iterator iter = iter . iterator ( continue; ) ;
Code	Iterator iter = iter . iterator ( continue; ) ;
Distance : 4

73
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; ParamChecks
Code	Iterator iter = iterator ( res.entries ) . iterator () ; ParamChecks
Distance : 5

74
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

75
Tree	Iterator iter = iterator () ; Preconditions
Code	Iterator iter = iterator () ; Preconditions
Distance : 3

76
Tree	Iterator iter = this . entries . iterator () ; options
Code	Iterator iter = this . entries . iterator () ; options
Distance : 3

77
Tree	Iterator iter = this . entries . iterator () ; p
Code	Iterator iter = this . entries . iterator () ; p
Distance : 3

78
Tree	Iterator iter = this . entries . iterator () ; &&
Code	Iterator iter = this . entries . iterator () ; &&
Distance : 3

79
Tree	Iterator iter = this . entries . iterator () ; T
Code	Iterator iter = this . entries . iterator () ; T
Distance : 3

80
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; toString
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; toString
Distance : 5

81
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; source
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; source
Distance : 5

82
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; &&
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; &&
Distance : 5

83
Tree	Iterator iter = iter . iterator ( iter . class ) ; wanted
Code	Iterator iter = iter . iterator ( iter . class ) ; wanted
Distance : 7

84
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; source
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; source
Distance : 7

85
Tree	Iterator iter = iterator ( iter . class ) ; options
Code	Iterator iter = iterator ( iter . class ) ; options
Distance : 6

86
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; options
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; options
Distance : 7

87
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; ParamChecks
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; ParamChecks
Distance : 7

88
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; -
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; -
Distance : 7

89
Tree	Iterator iter = iterator () ; f
Code	Iterator iter = iterator () ; f
Distance : 3

90
Tree	Iterator iter = iterator () ; ParamChecks
Code	Iterator iter = iterator () ; ParamChecks
Distance : 3

91
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; MathRuntimeException
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; MathRuntimeException
Distance : 7

92
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 7

93
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 7

94
Tree	Iterator iter = iterator ( this . entries ) ; T
Code	Iterator iter = iterator ( this . entries ) ; T
Distance : 6

95
Tree	Iterator iter = iterator ( this . entries ) ; &&
Code	Iterator iter = iterator ( this . entries ) ; &&
Distance : 6

96
Tree	Iterator iter = iterator ( this . entries ) ; p
Code	Iterator iter = iterator ( this . entries ) ; p
Distance : 6

97
Tree	Iterator iter = iterator ( this . entries ) ; options
Code	Iterator iter = iterator ( this . entries ) ; options
Distance : 6

98
Tree	Iterator iter = iterator () ; -
Code	Iterator iter = iterator () ; -
Distance : 3

99
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Preconditions
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Preconditions
Distance : 7

100
Tree	Iterator iter = iterator ( this . entries ) ; source
Code	Iterator iter = iterator ( this . entries ) ; source
Distance : 6

101
Tree	Iterator iter = this . entries . iterator () ; source
Code	Iterator iter = this . entries . iterator () ; source
Distance : 3

102
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; p
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; p
Distance : 7

103
Tree	Iterator iter = this . entries . iterator () ; toString
Code	Iterator iter = this . entries . iterator () ; toString
Distance : 3

104
Tree	Iterator iter = iterator ( iter . class ) ; p
Code	Iterator iter = iterator ( iter . class ) ; p
Distance : 6

105
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; T
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; T
Distance : 7

106
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; Test
Code	Iterator iter = iterator ( res.entries , res.entries ) ; Test
Distance : 7

107
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; Class
Code	Iterator iter = iterator ( res.entries , res.entries ) ; Class
Distance : 7

108
Tree	Iterator iter = iter . iterator () ; &&
Code	Iterator iter = iter . iterator () ; &&
Distance : 2

109
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; MathRuntimeException
Code	Iterator iter = iterator ( res.entries , res.entries ) ; MathRuntimeException
Distance : 7

110
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; {}
Code	Iterator iter = iterator ( res.entries , res.entries ) ; {}
Distance : 7

111
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; p
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; p
Distance : 7

112
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; f
Code	Iterator iter = iterator ( res.entries , res.entries ) ; f
Distance : 7

113
Tree	Iterator iter = iter . iterator () ; p
Code	Iterator iter = iter . iterator () ; p
Distance : 2

114
Tree	Iterator iter = iter . iterator () ; options
Code	Iterator iter = iter . iterator () ; options
Distance : 2

115
Tree	Iterator iter = iter . iterator () ; source
Code	Iterator iter = iter . iterator () ; source
Distance : 2

116
Tree	Iterator iter = iter . iterator () ; toString
Code	Iterator iter = iter . iterator () ; toString
Distance : 2

117
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; -
Code	Iterator iter = iterator ( res.entries , res.entries ) ; -
Distance : 7

118
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Preconditions
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Preconditions
Distance : 5

119
Tree	Iterator iter = iterator () ; MathRuntimeException
Code	Iterator iter = iterator () ; MathRuntimeException
Distance : 3

120
Tree	Iterator iter = iterator () ; {}
Code	Iterator iter = iterator () ; {}
Distance : 3

121
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; ParamChecks
Code	Iterator iter = iterator ( res.entries , res.entries ) ; ParamChecks
Distance : 7

122
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; options
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; options
Distance : 7

123
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; source
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; source
Distance : 7

124
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; MathRuntimeException
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; MathRuntimeException
Distance : 5

125
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Class
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Class
Distance : 5

126
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Test
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Test
Distance : 5

127
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; toString
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; toString
Distance : 7

128
Tree	Iterator iter = iterator () ; Class
Code	Iterator iter = iterator () ; Class
Distance : 3

129
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; &&
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; &&
Distance : 7

130
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; {}
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; {}
Distance : 5

131
Tree	Iterator iter = iter . iterator ( break; ) ;
Code	Iterator iter = iter . iterator ( break; ) ;
Distance : 4

132
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

133
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; &&
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; &&
Distance : 9

134
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 3

135
Tree	Iterator iter = iterator ( iter . class ) ; source
Code	Iterator iter = iterator ( iter . class ) ; source
Distance : 6

136
Tree	Iterator iter = entries . iterator ( null ) ;
Code	Iterator iter = entries . iterator ( null ) ;
Distance : 3

137
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; p
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; p
Distance : 5

138
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

139
Tree	Iterator iter = iterator ( this . entries ) ;
Code	Iterator iter = iterator ( this . entries ) ;
Distance : 5

140
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; MathRuntimeException
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; MathRuntimeException
Distance : 5

141
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; &&
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; &&
Distance : 7

142
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

143
Tree	Iterator iter = iterator ( res.entries ) ; -
Code	Iterator iter = iterator ( res.entries ) ; -
Distance : 5

144
Tree	Iterator iter = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 5

145
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; ParamChecks
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; ParamChecks
Distance : 9

146
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; -
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; -
Distance : 5

147
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; toString
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; toString
Distance : 7

148
Tree	Iterator iter = iter . iterator ( default: ) ;
Code	Iterator iter = iter . iterator ( default: ) ;
Distance : 4

149
Tree	Iterator iter = iterator ( res.entries ) ; {}
Code	Iterator iter = iterator ( res.entries ) ; {}
Distance : 5

150
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; f
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; f
Distance : 11

151
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; Test
Code	Iterator iter = iterator ( res.entries ) . iterator () ; Test
Distance : 5

152
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; T
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; T
Distance : 9

153
Tree	Iterator entries = iter . iterator ( null ) ;
Code	Iterator entries = iter . iterator ( null ) ;
Distance : 5

154
Tree	Iterator iter = iterator ( res.entries ) ; ParamChecks
Code	Iterator iter = iterator ( res.entries ) ; ParamChecks
Distance : 5

155
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

156
Tree	Iterator entries = iterator ( res.entries ) ;
Code	Iterator entries = iterator ( res.entries ) ;
Distance : 5

157
Tree	Iterator entries = entries . iterator ( entries . class ) ;
Code	Iterator entries = entries . iterator ( entries . class ) ;
Distance : 6

158
Tree	Iterator iter = iterator ( iter . class ) ; T
Code	Iterator iter = iterator ( iter . class ) ; T
Distance : 6

159
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; f
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; f
Distance : 7

160
Tree	Iterator iter = entries . iterator () ;
Code	Iterator iter = entries . iterator () ;
Distance : 0

161
Tree	Iterator iter = iterator ( entries . class ) ;
Code	Iterator iter = iterator ( entries . class ) ;
Distance : 4

162
Tree	Iterator iter = iterator ( this . entries ) ; toString
Code	Iterator iter = iterator ( this . entries ) ; toString
Distance : 6

163
Tree	Iterator iter = iter . iterator ( iter . class ) ; Math
Code	Iterator iter = iter . iterator ( iter . class ) ; Math
Distance : 7

164
Tree	Iterator iter = iterator ( res.entries ) ; MathRuntimeException
Code	Iterator iter = iterator ( res.entries ) ; MathRuntimeException
Distance : 5

165
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 6

166
Tree	Iterator iter = iterator () ; Test
Code	Iterator iter = iterator () ; Test
Distance : 3

167
Tree	Iterator iter = iterator ( res.entries ) ; Class
Code	Iterator iter = iterator ( res.entries ) ; Class
Distance : 5

168
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; options
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; options
Distance : 5

169
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

170
Tree	Iterator iter = entries . iterator ( super(); ) ;
Code	Iterator iter = entries . iterator ( super(); ) ;
Distance : 3

171
Tree	Iterator iter = iterator ( res.entries ) ; Test
Code	Iterator iter = iterator ( res.entries ) ; Test
Distance : 5

172
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; -
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; -
Distance : 9

173
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; ParamChecks
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; ParamChecks
Distance : 5

174
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Preconditions
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Preconditions
Distance : 5

175
Tree	Iterator entries = iter . iterator ( iter . class ) ;
Code	Iterator entries = iter . iterator ( iter . class ) ;
Distance : 7

176
Tree	Iterator iter = res.entries . iterator () ; Test
Code	Iterator iter = res.entries . iterator () ; Test
Distance : 2

177
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; T
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; T
Distance : 5

178
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; -
Code	Iterator iter = iterator ( res.entries ) . iterator () ; -
Distance : 5

179
Tree	Iterator entries = iter . iterator () ;
Code	Iterator entries = iter . iterator () ;
Distance : 2

180
Tree	Iterator iter = iterator ( res.entries ) ; f
Code	Iterator iter = iterator ( res.entries ) ; f
Distance : 5

181
Tree	Iterator entries = this . entries . iterator () ;
Code	Iterator entries = this . entries . iterator () ;
Distance : 3

182
Tree	Iterator iter = res.entries . iterator () ; Class
Code	Iterator iter = res.entries . iterator () ; Class
Distance : 2

183
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Preconditions
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Preconditions
Distance : 9

184
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; f
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; f
Distance : 5

185
Tree	Iterator iter = iter . iterator () ; T
Code	Iterator iter = iter . iterator () ; T
Distance : 2

186
Tree	Iterator iter = res.entries . iterator () ; Preconditions
Code	Iterator iter = res.entries . iterator () ; Preconditions
Distance : 2

187
Tree	Iterator iter = res.entries . iterator () ; -
Code	Iterator iter = res.entries . iterator () ; -
Distance : 2

188
Tree	Iterator iter = iterator () ;
Code	Iterator iter = iterator () ;
Distance : 2

189
Tree	Iterator iter = iterator ( res.entries , res.entries ) ;
Code	Iterator iter = iterator ( res.entries , res.entries ) ;
Distance : 6

190
Tree	Iterator entries = iterator ( res.entries , res.entries ) ;
Code	Iterator entries = iterator ( res.entries , res.entries ) ;
Distance : 7

191
Tree	Iterator iter = iterator ( iter . class ) ; &&
Code	Iterator iter = iterator ( iter . class ) ; &&
Distance : 6

192
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; {}
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; {}
Distance : 7

193
Tree	Iterator iter = iterator ( this . iter ) ;
Code	Iterator iter = iterator ( this . iter ) ;
Distance : 5

194
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; T
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; T
Distance : 7

195
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; Preconditions
Code	Iterator iter = iterator ( res.entries , res.entries ) ; Preconditions
Distance : 7

196
Tree	Iterator entries = this . iter . iterator () ;
Code	Iterator entries = this . iter . iterator () ;
Distance : 4

197
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 9

198
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; {}
Code	Iterator iter = iterator ( res.entries ) . iterator () ; {}
Distance : 5

199
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; {}
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; {}
Distance : 5

========================================================================


========================================================================
Example Number: 66
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	Iterator iter = iterator ( iter . class ) ; toString
Code	Iterator iter = iterator ( iter . class ) ; toString
Distance : 6

1
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; toString
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; toString
Distance : 9

2
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Class
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Class
Distance : 5

3
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; f
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; f
Distance : 5

4
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; ParamChecks
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; ParamChecks
Distance : 5

5
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Preconditions
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Preconditions
Distance : 11

6
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; -
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; -
Distance : 11

7
Tree	Iterator iter = iterator ( res.entries ) ; Preconditions
Code	Iterator iter = iterator ( res.entries ) ; Preconditions
Distance : 5

8
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; ParamChecks
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; ParamChecks
Distance : 11

9
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Test
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Test
Distance : 5

10
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; Preconditions
Code	Iterator iter = iterator ( res.entries ) . iterator () ; Preconditions
Distance : 5

11
Tree	Iterator entries = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 6

12
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 6

13
Tree	Iterator entries = iterator ( this . iter ) ;
Code	Iterator entries = iterator ( this . iter ) ;
Distance : 6

14
Tree	Iterator entries = iterator ( entries . class ) ;
Code	Iterator entries = iterator ( entries . class ) ;
Distance : 5

15
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; -
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; -
Distance : 5

16
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; source
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; source
Distance : 9

17
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; options
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; options
Distance : 9

18
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; p
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; p
Distance : 9

19
Tree	Iterator iter = res.entries . iterator () ; {}
Code	Iterator iter = res.entries . iterator () ; {}
Distance : 2

20
Tree	Iterator iter = res.entries . iterator () ; f
Code	Iterator iter = res.entries . iterator () ; f
Distance : 2

21
Tree	Iterator iter = res.entries . iterator () ; ParamChecks
Code	Iterator iter = res.entries . iterator () ; ParamChecks
Distance : 2

22
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; {}
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; {}
Distance : 11

23
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MathRuntimeException
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MathRuntimeException
Distance : 11

24
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 11

25
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 11

26
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; Class
Code	Iterator iter = iterator ( res.entries ) . iterator () ; Class
Distance : 5

27
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; MathRuntimeException
Code	Iterator iter = iterator ( res.entries ) . iterator () ; MathRuntimeException
Distance : 5

28
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; f
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; f
Distance : 9

29
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; {}
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; {}
Distance : 9

30
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MathRuntimeException
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MathRuntimeException
Distance : 9

31
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 9

32
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; f
Code	Iterator iter = iterator ( res.entries ) . iterator () ; f
Distance : 5

33
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

34
Tree	Iterator entries = iterator ( this . entries ) ;
Code	Iterator entries = iterator ( this . entries ) ;
Distance : 6

35
Tree	Iterator entries = iterator ( res.entries ) . iterator () ;
Code	Iterator entries = iterator ( res.entries ) . iterator () ;
Distance : 5

36
Tree	Iterator entries = entries . iterator ( iter . class ) ;
Code	Iterator entries = entries . iterator ( iter . class ) ;
Distance : 6

37
Tree	Iterator entries = iter . iterator ( entries . class ) ;
Code	Iterator entries = iter . iterator ( entries . class ) ;
Distance : 7

38
Tree	Iterator iter = iterator ( res.entries ) ;
Code	Iterator iter = iterator ( res.entries ) ;
Distance : 4

39
Tree	Iterator iter = iter . iterator ( super(); ) ;
Code	Iterator iter = iter . iterator ( super(); ) ;
Distance : 4

40
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 6

41
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

42
Tree	Iterator iter = iterator ( iter . class ) ;
Code	Iterator iter = iterator ( iter . class ) ;
Distance : 5

43
Tree	Iterator iter = this . iter . iterator () ;
Code	Iterator iter = this . iter . iterator () ;
Distance : 3

44
Tree	Iterator iter = this . entries . iterator () ;
Code	Iterator iter = this . entries . iterator () ;
Distance : 2

45
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

46
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Distance : 4

47
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

48
Tree	Iterator iter = iter . iterator ( iter . class ) ;
Code	Iterator iter = iter . iterator ( iter . class ) ;
Distance : 6

49
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

50
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

51
Tree	Iterator iter = iter . iterator () ;
Code	Iterator iter = iter . iterator () ;
Distance : 1

52
Tree	Iterator iter = iter . iterator ( null ) ;
Code	Iterator iter = iter . iterator ( null ) ;
Distance : 4

53
Tree	Iterator iter = iter . iterator ( return; ) ;
Code	Iterator iter = iter . iterator ( return; ) ;
Distance : 4

54
Tree	Iterator iter = res.entries . iterator () ; MathRuntimeException
Code	Iterator iter = res.entries . iterator () ; MathRuntimeException
Distance : 2

55
Tree	Iterator iter = iter . iterator ( entries . class ) ;
Code	Iterator iter = iter . iterator ( entries . class ) ;
Distance : 6

56
Tree	Iterator iter = entries . iterator ( iter . class ) ;
Code	Iterator iter = entries . iterator ( iter . class ) ;
Distance : 5

57
Tree	Iterator entries = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 7

58
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 7

59
Tree	Iterator entries = entries . iterator () ;
Code	Iterator entries = entries . iterator () ;
Distance : 1

60
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

61
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

62
Tree	Iterator entries = iterator ( iter . class ) ;
Code	Iterator entries = iterator ( iter . class ) ;
Distance : 6

63
Tree	Iterator iter = entries . iterator ( entries . class ) ;
Code	Iterator iter = entries . iterator ( entries . class ) ;
Distance : 5

64
Tree	Iterator iter = entries . iterator ( return; ) ;
Code	Iterator iter = entries . iterator ( return; ) ;
Distance : 3

65
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 5

66
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

67
Tree	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Distance : 5

68
Tree	Iterator entries = iterator () ;
Code	Iterator entries = iterator () ;
Distance : 3

69
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

70
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

71
Tree	Iterator iter = iterator ( res.entries ) . iterator () ;
Code	Iterator iter = iterator ( res.entries ) . iterator () ;
Distance : 4

72
Tree	Iterator iter = iter . iterator ( continue; ) ;
Code	Iterator iter = iter . iterator ( continue; ) ;
Distance : 4

73
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; ParamChecks
Code	Iterator iter = iterator ( res.entries ) . iterator () ; ParamChecks
Distance : 5

74
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

75
Tree	Iterator iter = iterator () ; Preconditions
Code	Iterator iter = iterator () ; Preconditions
Distance : 3

76
Tree	Iterator iter = this . entries . iterator () ; options
Code	Iterator iter = this . entries . iterator () ; options
Distance : 3

77
Tree	Iterator iter = this . entries . iterator () ; p
Code	Iterator iter = this . entries . iterator () ; p
Distance : 3

78
Tree	Iterator iter = this . entries . iterator () ; &&
Code	Iterator iter = this . entries . iterator () ; &&
Distance : 3

79
Tree	Iterator iter = this . entries . iterator () ; T
Code	Iterator iter = this . entries . iterator () ; T
Distance : 3

80
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; toString
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; toString
Distance : 5

81
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; source
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; source
Distance : 5

82
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; &&
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; &&
Distance : 5

83
Tree	Iterator iter = iter . iterator ( iter . class ) ; wanted
Code	Iterator iter = iter . iterator ( iter . class ) ; wanted
Distance : 7

84
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; source
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; source
Distance : 7

85
Tree	Iterator iter = iterator ( iter . class ) ; options
Code	Iterator iter = iterator ( iter . class ) ; options
Distance : 6

86
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; options
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; options
Distance : 7

87
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; ParamChecks
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; ParamChecks
Distance : 7

88
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; -
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; -
Distance : 7

89
Tree	Iterator iter = iterator () ; f
Code	Iterator iter = iterator () ; f
Distance : 3

90
Tree	Iterator iter = iterator () ; ParamChecks
Code	Iterator iter = iterator () ; ParamChecks
Distance : 3

91
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; MathRuntimeException
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; MathRuntimeException
Distance : 7

92
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 7

93
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 7

94
Tree	Iterator iter = iterator ( this . entries ) ; T
Code	Iterator iter = iterator ( this . entries ) ; T
Distance : 6

95
Tree	Iterator iter = iterator ( this . entries ) ; &&
Code	Iterator iter = iterator ( this . entries ) ; &&
Distance : 6

96
Tree	Iterator iter = iterator ( this . entries ) ; p
Code	Iterator iter = iterator ( this . entries ) ; p
Distance : 6

97
Tree	Iterator iter = iterator ( this . entries ) ; options
Code	Iterator iter = iterator ( this . entries ) ; options
Distance : 6

98
Tree	Iterator iter = iterator () ; -
Code	Iterator iter = iterator () ; -
Distance : 3

99
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Preconditions
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Preconditions
Distance : 7

100
Tree	Iterator iter = iterator ( this . entries ) ; source
Code	Iterator iter = iterator ( this . entries ) ; source
Distance : 6

101
Tree	Iterator iter = this . entries . iterator () ; source
Code	Iterator iter = this . entries . iterator () ; source
Distance : 3

102
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; p
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; p
Distance : 7

103
Tree	Iterator iter = this . entries . iterator () ; toString
Code	Iterator iter = this . entries . iterator () ; toString
Distance : 3

104
Tree	Iterator iter = iterator ( iter . class ) ; p
Code	Iterator iter = iterator ( iter . class ) ; p
Distance : 6

105
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; T
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; T
Distance : 7

106
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; Test
Code	Iterator iter = iterator ( res.entries , res.entries ) ; Test
Distance : 7

107
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; Class
Code	Iterator iter = iterator ( res.entries , res.entries ) ; Class
Distance : 7

108
Tree	Iterator iter = iter . iterator () ; &&
Code	Iterator iter = iter . iterator () ; &&
Distance : 2

109
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; MathRuntimeException
Code	Iterator iter = iterator ( res.entries , res.entries ) ; MathRuntimeException
Distance : 7

110
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; {}
Code	Iterator iter = iterator ( res.entries , res.entries ) ; {}
Distance : 7

111
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; p
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; p
Distance : 7

112
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; f
Code	Iterator iter = iterator ( res.entries , res.entries ) ; f
Distance : 7

113
Tree	Iterator iter = iter . iterator () ; p
Code	Iterator iter = iter . iterator () ; p
Distance : 2

114
Tree	Iterator iter = iter . iterator () ; options
Code	Iterator iter = iter . iterator () ; options
Distance : 2

115
Tree	Iterator iter = iter . iterator () ; source
Code	Iterator iter = iter . iterator () ; source
Distance : 2

116
Tree	Iterator iter = iter . iterator () ; toString
Code	Iterator iter = iter . iterator () ; toString
Distance : 2

117
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; -
Code	Iterator iter = iterator ( res.entries , res.entries ) ; -
Distance : 7

118
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Preconditions
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Preconditions
Distance : 5

119
Tree	Iterator iter = iterator () ; MathRuntimeException
Code	Iterator iter = iterator () ; MathRuntimeException
Distance : 3

120
Tree	Iterator iter = iterator () ; {}
Code	Iterator iter = iterator () ; {}
Distance : 3

121
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; ParamChecks
Code	Iterator iter = iterator ( res.entries , res.entries ) ; ParamChecks
Distance : 7

122
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; options
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; options
Distance : 7

123
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; source
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; source
Distance : 7

124
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; MathRuntimeException
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; MathRuntimeException
Distance : 5

125
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Class
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Class
Distance : 5

126
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Test
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Test
Distance : 5

127
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; toString
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; toString
Distance : 7

128
Tree	Iterator iter = iterator () ; Class
Code	Iterator iter = iterator () ; Class
Distance : 3

129
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; &&
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; &&
Distance : 7

130
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; {}
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; {}
Distance : 5

131
Tree	Iterator iter = iter . iterator ( break; ) ;
Code	Iterator iter = iter . iterator ( break; ) ;
Distance : 4

132
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

133
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; &&
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; &&
Distance : 9

134
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 3

135
Tree	Iterator iter = iterator ( iter . class ) ; source
Code	Iterator iter = iterator ( iter . class ) ; source
Distance : 6

136
Tree	Iterator iter = entries . iterator ( null ) ;
Code	Iterator iter = entries . iterator ( null ) ;
Distance : 3

137
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; p
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; p
Distance : 5

138
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

139
Tree	Iterator iter = iterator ( this . entries ) ;
Code	Iterator iter = iterator ( this . entries ) ;
Distance : 5

140
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; MathRuntimeException
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; MathRuntimeException
Distance : 5

141
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; &&
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ; &&
Distance : 7

142
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

143
Tree	Iterator iter = iterator ( res.entries ) ; -
Code	Iterator iter = iterator ( res.entries ) ; -
Distance : 5

144
Tree	Iterator iter = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 5

145
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; ParamChecks
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; ParamChecks
Distance : 9

146
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; -
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; -
Distance : 5

147
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; toString
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; toString
Distance : 7

148
Tree	Iterator iter = iter . iterator ( default: ) ;
Code	Iterator iter = iter . iterator ( default: ) ;
Distance : 4

149
Tree	Iterator iter = iterator ( res.entries ) ; {}
Code	Iterator iter = iterator ( res.entries ) ; {}
Distance : 5

150
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; f
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; f
Distance : 11

151
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; Test
Code	Iterator iter = iterator ( res.entries ) . iterator () ; Test
Distance : 5

152
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; T
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; T
Distance : 9

153
Tree	Iterator entries = iter . iterator ( null ) ;
Code	Iterator entries = iter . iterator ( null ) ;
Distance : 5

154
Tree	Iterator iter = iterator ( res.entries ) ; ParamChecks
Code	Iterator iter = iterator ( res.entries ) ; ParamChecks
Distance : 5

155
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

156
Tree	Iterator entries = iterator ( res.entries ) ;
Code	Iterator entries = iterator ( res.entries ) ;
Distance : 5

157
Tree	Iterator entries = entries . iterator ( entries . class ) ;
Code	Iterator entries = entries . iterator ( entries . class ) ;
Distance : 6

158
Tree	Iterator iter = iterator ( iter . class ) ; T
Code	Iterator iter = iterator ( iter . class ) ; T
Distance : 6

159
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; f
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; f
Distance : 7

160
Tree	Iterator iter = entries . iterator () ;
Code	Iterator iter = entries . iterator () ;
Distance : 0

161
Tree	Iterator iter = iterator ( entries . class ) ;
Code	Iterator iter = iterator ( entries . class ) ;
Distance : 4

162
Tree	Iterator iter = iterator ( this . entries ) ; toString
Code	Iterator iter = iterator ( this . entries ) ; toString
Distance : 6

163
Tree	Iterator iter = iter . iterator ( iter . class ) ; Math
Code	Iterator iter = iter . iterator ( iter . class ) ; Math
Distance : 7

164
Tree	Iterator iter = iterator ( res.entries ) ; MathRuntimeException
Code	Iterator iter = iterator ( res.entries ) ; MathRuntimeException
Distance : 5

165
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 6

166
Tree	Iterator iter = iterator () ; Test
Code	Iterator iter = iterator () ; Test
Distance : 3

167
Tree	Iterator iter = iterator ( res.entries ) ; Class
Code	Iterator iter = iterator ( res.entries ) ; Class
Distance : 5

168
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; options
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; options
Distance : 5

169
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

170
Tree	Iterator iter = entries . iterator ( super(); ) ;
Code	Iterator iter = entries . iterator ( super(); ) ;
Distance : 3

171
Tree	Iterator iter = iterator ( res.entries ) ; Test
Code	Iterator iter = iterator ( res.entries ) ; Test
Distance : 5

172
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; -
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; -
Distance : 9

173
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; ParamChecks
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; ParamChecks
Distance : 5

174
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Preconditions
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Preconditions
Distance : 5

175
Tree	Iterator entries = iter . iterator ( iter . class ) ;
Code	Iterator entries = iter . iterator ( iter . class ) ;
Distance : 7

176
Tree	Iterator iter = res.entries . iterator () ; Test
Code	Iterator iter = res.entries . iterator () ; Test
Distance : 2

177
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; T
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; T
Distance : 5

178
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; -
Code	Iterator iter = iterator ( res.entries ) . iterator () ; -
Distance : 5

179
Tree	Iterator entries = iter . iterator () ;
Code	Iterator entries = iter . iterator () ;
Distance : 2

180
Tree	Iterator iter = iterator ( res.entries ) ; f
Code	Iterator iter = iterator ( res.entries ) ; f
Distance : 5

181
Tree	Iterator entries = this . entries . iterator () ;
Code	Iterator entries = this . entries . iterator () ;
Distance : 3

182
Tree	Iterator iter = res.entries . iterator () ; Class
Code	Iterator iter = res.entries . iterator () ; Class
Distance : 2

183
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Preconditions
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Preconditions
Distance : 9

184
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; f
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; f
Distance : 5

185
Tree	Iterator iter = iter . iterator () ; T
Code	Iterator iter = iter . iterator () ; T
Distance : 2

186
Tree	Iterator iter = res.entries . iterator () ; Preconditions
Code	Iterator iter = res.entries . iterator () ; Preconditions
Distance : 2

187
Tree	Iterator iter = res.entries . iterator () ; -
Code	Iterator iter = res.entries . iterator () ; -
Distance : 2

188
Tree	Iterator iter = iterator () ;
Code	Iterator iter = iterator () ;
Distance : 2

189
Tree	Iterator iter = iterator ( res.entries , res.entries ) ;
Code	Iterator iter = iterator ( res.entries , res.entries ) ;
Distance : 6

190
Tree	Iterator entries = iterator ( res.entries , res.entries ) ;
Code	Iterator entries = iterator ( res.entries , res.entries ) ;
Distance : 7

191
Tree	Iterator iter = iterator ( iter . class ) ; &&
Code	Iterator iter = iterator ( iter . class ) ; &&
Distance : 6

192
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; {}
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; {}
Distance : 7

193
Tree	Iterator iter = iterator ( this . iter ) ;
Code	Iterator iter = iterator ( this . iter ) ;
Distance : 5

194
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; T
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ; T
Distance : 7

195
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; Preconditions
Code	Iterator iter = iterator ( res.entries , res.entries ) ; Preconditions
Distance : 7

196
Tree	Iterator entries = this . iter . iterator () ;
Code	Iterator entries = this . iter . iterator () ;
Distance : 4

197
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 9

198
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; {}
Code	Iterator iter = iterator ( res.entries ) . iterator () ; {}
Distance : 5

199
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; {}
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; {}
Distance : 5

========================================================================


========================================================================
Example Number: 67
Parent Code is: 
if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/47/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( divisor . isAliasDefinition ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( divisor , false ) ) { return NaN ; }
Distance : 11

1
Tree	if ( divisor . equalsIgnoreCase ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . equalsIgnoreCase ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

2
Tree	if ( this . primitiveType () ) { return NaN ; }
Code	if ( this . primitiveType () ) { return NaN ; }
Distance : 8

3
Tree	if ( divisor ) { return NaN ; }
Code	if ( divisor ) { return NaN ; }
Distance : 6

4
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

5
Tree	if ( this . getTypeParameters () ) { return NaN ; }
Code	if ( this . getTypeParameters () ) { return NaN ; }
Distance : 8

6
Tree	if ( divisor ) { return isZero ; }
Code	if ( divisor ) { return isZero ; }
Distance : 6

7
Tree	if ( containsNow ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( containsNow ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

8
Tree	if ( isZero == NUMBER_CONSTANT ) { return divisor ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return divisor ; }
Distance : 6

9
Tree	if ( this . equalsIgnoreCase () ) { return NaN ; }
Code	if ( this . equalsIgnoreCase () ) { return NaN ; }
Distance : 8

10
Tree	if ( divisor . isAssignableFrom ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

11
Tree	if ( this . maximumLabelWidth () ) { return NaN ; }
Code	if ( this . maximumLabelWidth () ) { return NaN ; }
Distance : 8

12
Tree	if ( divisor ) { return NaN ; }
Code	if ( divisor ) { return NaN ; }
Distance : 6

13
Tree	if ( divisor . isAssignableFrom ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( divisor , false ) ) { return NaN ; }
Distance : 11

14
Tree	if ( this . optimizePropertyIndex () ) { return NaN ; }
Code	if ( this . optimizePropertyIndex () ) { return NaN ; }
Distance : 8

15
Tree	if ( divisor . getVertices ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . getVertices ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

16
Tree	if ( getTypeParameters ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( getTypeParameters ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

17
Tree	if ( divisor . isAliasDefinition ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

18
Tree	if ( this . divisor . getAllValues () ) { return NaN ; }
Code	if ( this . divisor . getAllValues () ) { return NaN ; }
Distance : 9

19
Tree	if ( divisor ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 7

20
Tree	if ( com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

21
Tree	if ( divisor . isAssignableFrom ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

22
Tree	if ( ready ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( ready ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

23
Tree	if ( isTypeCompatible ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isTypeCompatible ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

24
Tree	if ( NaN == NUMBER_CONSTANT ) { return divisor ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return divisor ; }
Distance : 6

25
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ; }
Distance : 5

26
Tree	if ( isZero ) { return divisor ; }
Code	if ( isZero ) { return divisor ; }
Distance : 8

27
Tree	if ( NaN ) { return divisor ; }
Code	if ( NaN ) { return divisor ; }
Distance : 8

28
Tree	if ( isExprConditional ( divisor ) ) { return NaN ; }
Code	if ( isExprConditional ( divisor ) ) { return NaN ; }
Distance : 8

29
Tree	if ( divisor . isAssignableFrom () ) { return NaN ; }
Code	if ( divisor . isAssignableFrom () ) { return NaN ; }
Distance : 7

30
Tree	if ( divisor . getInstrumentForCoverageOnly ( divisor ) ) { return NaN ; }
Code	if ( divisor . getInstrumentForCoverageOnly ( divisor ) ) { return NaN ; }
Distance : 9

31
Tree	if ( divisor . regionMatches ( divisor ) ) { return NaN ; }
Code	if ( divisor . regionMatches ( divisor ) ) { return NaN ; }
Distance : 9

32
Tree	if ( divisor . equalsIgnoreCase ( divisor ) ) { return NaN ; }
Code	if ( divisor . equalsIgnoreCase ( divisor ) ) { return NaN ; }
Distance : 9

33
Tree	if ( containsNow ( divisor ) ) { return NaN ; }
Code	if ( containsNow ( divisor ) ) { return NaN ; }
Distance : 8

34
Tree	if ( ready () ) { return NaN ; }
Code	if ( ready () ) { return NaN ; }
Distance : 7

35
Tree	if ( isComingFromJDK ( divisor ) ) { return NaN ; }
Code	if ( isComingFromJDK ( divisor ) ) { return NaN ; }
Distance : 8

36
Tree	if ( divisor . shouldExtract ( divisor ) ) { return NaN ; }
Code	if ( divisor . shouldExtract ( divisor ) ) { return NaN ; }
Distance : 9

37
Tree	if ( isTypeCompatible () ) { return NaN ; }
Code	if ( isTypeCompatible () ) { return NaN ; }
Distance : 7

38
Tree	if ( divisor . primitiveTypeOf () ) { return NaN ; }
Code	if ( divisor . primitiveTypeOf () ) { return NaN ; }
Distance : 7

39
Tree	if ( divisor . getInstance () ) { return NaN ; }
Code	if ( divisor . getInstance () ) { return NaN ; }
Distance : 7

40
Tree	if ( divisor . copySelf ( divisor ) ) { return NaN ; }
Code	if ( divisor . copySelf ( divisor ) ) { return NaN ; }
Distance : 9

41
Tree	if ( getTypeParameters () ) { return NaN ; }
Code	if ( getTypeParameters () ) { return NaN ; }
Distance : 7

42
Tree	if ( isPrimitiveWrapper ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isPrimitiveWrapper ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

43
Tree	if ( isExprConditional ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isExprConditional ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

44
Tree	if ( getTypeParameters ( divisor ) ) { return NaN ; }
Code	if ( getTypeParameters ( divisor ) ) { return NaN ; }
Distance : 8

45
Tree	if ( divisor () ) { return NaN ; }
Code	if ( divisor () ) { return NaN ; }
Distance : 6

46
Tree	if ( divisor ) { return NaN ; }
Code	if ( divisor ) { return NaN ; }
Distance : 6

47
Tree	if ( com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders () ) { return NaN ; }
Code	if ( com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders () ) { return NaN ; }
Distance : 7

48
Tree	if ( options.skipNonTranspilationPasses () ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses () ) { return NaN ; }
Distance : 7

49
Tree	if ( divisor . getInstrumentForCoverageOnly () ) { return NaN ; }
Code	if ( divisor . getInstrumentForCoverageOnly () ) { return NaN ; }
Distance : 7

50
Tree	if ( containsNow ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( containsNow ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

51
Tree	if ( divisor ( divisor ) ) { return NaN ; }
Code	if ( divisor ( divisor ) ) { return NaN ; }
Distance : 7

52
Tree	if ( isComingFromJDK ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isComingFromJDK ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

53
Tree	if ( divisor . regionMatches () ) { return NaN ; }
Code	if ( divisor . regionMatches () ) { return NaN ; }
Distance : 7

54
Tree	if ( divisor . equalsIgnoreCase () ) { return NaN ; }
Code	if ( divisor . equalsIgnoreCase () ) { return NaN ; }
Distance : 7

55
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

56
Tree	if ( STRING_CONSTANT . getText ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . getText ( divisor ) ) { return NaN ; }
Distance : 10

57
Tree	if ( this . renderAsPercentages () ) { return NaN ; }
Code	if ( this . renderAsPercentages () ) { return NaN ; }
Distance : 8

58
Tree	if ( com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ( divisor ) ) { return NaN ; }
Code	if ( com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ( divisor ) ) { return NaN ; }
Distance : 8

59
Tree	if ( divisor . getVertices ( divisor ) ) { return NaN ; }
Code	if ( divisor . getVertices ( divisor ) ) { return NaN ; }
Distance : 9

60
Tree	if ( isPrimitiveWrapper () ) { return NaN ; }
Code	if ( isPrimitiveWrapper () ) { return NaN ; }
Distance : 7

61
Tree	if ( isExprConditional () ) { return NaN ; }
Code	if ( isExprConditional () ) { return NaN ; }
Distance : 7

62
Tree	if ( divisor . copySelf ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . copySelf ( divisor , false ) ) { return NaN ; }
Distance : 11

63
Tree	if ( divisor . shouldExtract () ) { return NaN ; }
Code	if ( divisor . shouldExtract () ) { return NaN ; }
Distance : 7

64
Tree	if ( divisor . getInstance ( divisor ) ) { return NaN ; }
Code	if ( divisor . getInstance ( divisor ) ) { return NaN ; }
Distance : 9

65
Tree	if ( divisor . isAliasDefinition ( divisor ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( divisor ) ) { return NaN ; }
Distance : 9

66
Tree	if ( this . divisor . getDaysInYearMax () ) { return NaN ; }
Code	if ( this . divisor . getDaysInYearMax () ) { return NaN ; }
Distance : 9

67
Tree	if ( isComingFromJDK ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isComingFromJDK ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

68
Tree	if ( ready ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( ready ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

69
Tree	if ( divisor . primitiveTypeOf ( divisor ) ) { return NaN ; }
Code	if ( divisor . primitiveTypeOf ( divisor ) ) { return NaN ; }
Distance : 9

70
Tree	if ( options.skipNonTranspilationPasses ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

71
Tree	if ( this . containsNow () ) { return NaN ; }
Code	if ( this . containsNow () ) { return NaN ; }
Distance : 8

72
Tree	if ( divisor . copySelf () ) { return NaN ; }
Code	if ( divisor . copySelf () ) { return NaN ; }
Distance : 7

73
Tree	if ( ready ( divisor ) ) { return NaN ; }
Code	if ( ready ( divisor ) ) { return NaN ; }
Distance : 8

74
Tree	if ( this . divisor . getClass () ) { return NaN ; }
Code	if ( this . divisor . getClass () ) { return NaN ; }
Distance : 9

75
Tree	if ( divisor . isAssignableFrom ( divisor ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( divisor ) ) { return NaN ; }
Distance : 9

76
Tree	if ( STRING_CONSTANT . hasHaltingErrors ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . hasHaltingErrors ( divisor ) ) { return NaN ; }
Distance : 10

77
Tree	if ( new Converter () . length ( divisor ) ) { return NaN ; }
Code	if ( new Converter () . length ( divisor ) ) { return NaN ; }
Distance : 12

78
Tree	if ( divisor . copySelf ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . copySelf ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

79
Tree	if ( isTypeCompatible ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isTypeCompatible ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

80
Tree	if ( this . chartArea () ) { return NaN ; }
Code	if ( this . chartArea () ) { return NaN ; }
Distance : 8

81
Tree	if ( this . divisor () ) { return NaN ; }
Code	if ( this . divisor () ) { return NaN ; }
Distance : 8

82
Tree	if ( divisor . getInstrumentForCoverageOnly ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . getInstrumentForCoverageOnly ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

83
Tree	if ( divisor . getInstrumentForCoverageOnly ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . getInstrumentForCoverageOnly ( divisor , false ) ) { return NaN ; }
Distance : 11

84
Tree	if ( divisor . getVertices ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . getVertices ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

85
Tree	if ( divisor . regionMatches ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . regionMatches ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

86
Tree	if ( containsNow () ) { return NaN ; }
Code	if ( containsNow () ) { return NaN ; }
Distance : 7

87
Tree	if ( divisor . equalsIgnoreCase ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . equalsIgnoreCase ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

88
Tree	if ( isTypeCompatible ( divisor ) ) { return NaN ; }
Code	if ( isTypeCompatible ( divisor ) ) { return NaN ; }
Distance : 8

89
Tree	if ( options.skipNonTranspilationPasses ( divisor ) ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses ( divisor ) ) { return NaN ; }
Distance : 8

90
Tree	if ( divisor . regionMatches ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . regionMatches ( divisor , false ) ) { return NaN ; }
Distance : 11

91
Tree	if ( containsNow ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( containsNow ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

92
Tree	if ( this . showValueLines () ) { return NaN ; }
Code	if ( this . showValueLines () ) { return NaN ; }
Distance : 8

93
Tree	if ( new AtLeastDiscrepancy () . length ( divisor ) ) { return NaN ; }
Code	if ( new AtLeastDiscrepancy () . length ( divisor ) ) { return NaN ; }
Distance : 12

94
Tree	if ( this . divisor . getVertices () ) { return NaN ; }
Code	if ( this . divisor . getVertices () ) { return NaN ; }
Distance : 9

95
Tree	if ( divisor . getVertices ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . getVertices ( divisor , false ) ) { return NaN ; }
Distance : 11

96
Tree	if ( isPrimitiveWrapper ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isPrimitiveWrapper ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

97
Tree	if ( ready ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( ready ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

98
Tree	if ( isExprConditional ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isExprConditional ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

99
Tree	if ( options.skipNonTranspilationPasses ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

100
Tree	if ( divisor . equalsIgnoreCase ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . equalsIgnoreCase ( divisor , false ) ) { return NaN ; }
Distance : 11

101
Tree	if ( this . divisor . getBytes () ) { return NaN ; }
Code	if ( this . divisor . getBytes () ) { return NaN ; }
Distance : 9

102
Tree	if ( this . divisor . clone () ) { return NaN ; }
Code	if ( this . divisor . clone () ) { return NaN ; }
Distance : 9

103
Tree	if ( divisor . getVertices () ) { return NaN ; }
Code	if ( divisor . getVertices () ) { return NaN ; }
Distance : 7

104
Tree	if ( isTypeCompatible ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isTypeCompatible ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

105
Tree	if ( isPrimitiveWrapper ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isPrimitiveWrapper ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

106
Tree	if ( isExprConditional ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isExprConditional ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

107
Tree	if ( new Es6SyntacticScopeCreator () . getName ( divisor ) ) { return NaN ; }
Code	if ( new Es6SyntacticScopeCreator () . getName ( divisor ) ) { return NaN ; }
Distance : 12

108
Tree	if ( divisor ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

109
Tree	if ( divisor . isAliasDefinition () ) { return NaN ; }
Code	if ( divisor . isAliasDefinition () ) { return NaN ; }
Distance : 7

110
Tree	if ( isComingFromJDK () ) { return NaN ; }
Code	if ( isComingFromJDK () ) { return NaN ; }
Distance : 7

111
Tree	if ( isComingFromJDK ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isComingFromJDK ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

112
Tree	if ( new VerifyingRecorder () . getName ( divisor ) ) { return NaN ; }
Code	if ( new VerifyingRecorder () . getName ( divisor ) ) { return NaN ; }
Distance : 12

113
Tree	if ( isPrimitiveWrapper ( divisor ) ) { return NaN ; }
Code	if ( isPrimitiveWrapper ( divisor ) ) { return NaN ; }
Distance : 8

114
Tree	if ( STRING_CONSTANT . isAllType ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . isAllType ( divisor ) ) { return NaN ; }
Distance : 10

115
Tree	if ( divisor . getVertices ( config.tracerMode ) ) { return NaN ; }
Code	if ( divisor . getVertices ( config.tracerMode ) ) { return NaN ; }
Distance : 9

116
Tree	if ( STRING_CONSTANT . appendPrefix ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . appendPrefix ( divisor ) ) { return NaN ; }
Distance : 10

117
Tree	if ( new VerifyingRecorder () . contains ( divisor ) ) { return NaN ; }
Code	if ( new VerifyingRecorder () . contains ( divisor ) ) { return NaN ; }
Distance : 12

118
Tree	if ( divisor . primitiveTypeOf ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . primitiveTypeOf ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

119
Tree	if ( divisor . primitiveTypeOf ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . primitiveTypeOf ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

120
Tree	if ( STRING_CONSTANT . equalsIgnoreCase ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . equalsIgnoreCase ( divisor ) ) { return NaN ; }
Distance : 10

121
Tree	if ( getTypeParameters ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( getTypeParameters ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

122
Tree	if ( divisor . getInstance ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . getInstance ( divisor , false ) ) { return NaN ; }
Distance : 11

123
Tree	if ( divisor . getInstrumentForCoverageOnly ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . getInstrumentForCoverageOnly ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

124
Tree	if ( divisor . primitiveTypeOf ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . primitiveTypeOf ( divisor , false ) ) { return NaN ; }
Distance : 11

125
Tree	if ( divisor . getInstance ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . getInstance ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

126
Tree	if ( getTypeParameters ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( getTypeParameters ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

127
Tree	if ( divisor . isAliasDefinition ( config.tracerMode ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( config.tracerMode ) ) { return NaN ; }
Distance : 9

128
Tree	if ( new Es6SyntacticScopeCreator () . length ( divisor ) ) { return NaN ; }
Code	if ( new Es6SyntacticScopeCreator () . length ( divisor ) ) { return NaN ; }
Distance : 12

129
Tree	if ( this . divisor . getMethod () ) { return NaN ; }
Code	if ( this . divisor . getMethod () ) { return NaN ; }
Distance : 9

130
Tree	if ( divisor . shouldExtract ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . shouldExtract ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

131
Tree	if ( divisor . isAliasDefinition ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

132
Tree	if ( new AtLeastDiscrepancy () . contains ( divisor ) ) { return NaN ; }
Code	if ( new AtLeastDiscrepancy () . contains ( divisor ) ) { return NaN ; }
Distance : 12

133
Tree	if ( com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

134
Tree	if ( options.skipNonTranspilationPasses ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

135
Tree	if ( STRING_CONSTANT . getClass ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . getClass ( divisor ) ) { return NaN ; }
Distance : 10

136
Tree	if ( divisor . regionMatches ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . regionMatches ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

137
Tree	if ( STRING_CONSTANT . shouldExtract ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . shouldExtract ( divisor ) ) { return NaN ; }
Distance : 10

138
Tree	if ( this . divisor . contains () ) { return NaN ; }
Code	if ( this . divisor . contains () ) { return NaN ; }
Distance : 9

139
Tree	if ( this . divisor . isSubtype () ) { return NaN ; }
Code	if ( this . divisor . isSubtype () ) { return NaN ; }
Distance : 9

140
Tree	if ( new AtLeastDiscrepancy () . getName ( divisor ) ) { return NaN ; }
Code	if ( new AtLeastDiscrepancy () . getName ( divisor ) ) { return NaN ; }
Distance : 12

141
Tree	if ( new VerifyingRecorder () . length ( divisor ) ) { return NaN ; }
Code	if ( new VerifyingRecorder () . length ( divisor ) ) { return NaN ; }
Distance : 12

142
Tree	if ( new Converter () . getName ( divisor ) ) { return NaN ; }
Code	if ( new Converter () . getName ( divisor ) ) { return NaN ; }
Distance : 12

143
Tree	if ( divisor ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

144
Tree	if ( STRING_CONSTANT . contains ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . contains ( divisor ) ) { return NaN ; }
Distance : 10

145
Tree	if ( divisor . getInstance ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . getInstance ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

146
Tree	if ( divisor . shouldExtract ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . shouldExtract ( divisor , false ) ) { return NaN ; }
Distance : 11

147
Tree	if ( divisor . getVertices ( FeatureSet.ES6 ) ) { return NaN ; }
Code	if ( divisor . getVertices ( FeatureSet.ES6 ) ) { return NaN ; }
Distance : 9

148
Tree	if ( divisor . copySelf ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . copySelf ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

149
Tree	if ( STRING_CONSTANT . isTypeMockable ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . isTypeMockable ( divisor ) ) { return NaN ; }
Distance : 10

150
Tree	if ( this . divisor . get () ) { return NaN ; }
Code	if ( this . divisor . get () ) { return NaN ; }
Distance : 9

151
Tree	if ( com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

152
Tree	if ( divisor . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return NaN ; }
Distance : 9

153
Tree	if ( divisor . shouldExtract ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . shouldExtract ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

154
Tree	if ( divisor . isAssignableFrom ( FeatureSet.ES6 ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( FeatureSet.ES6 ) ) { return NaN ; }
Distance : 9

155
Tree	if ( divisor . isAssignableFrom ( config.tracerMode ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( config.tracerMode ) ) { return NaN ; }
Distance : 9

156
Tree	if ( divisor . isAliasDefinition ( FeatureSet.ES6 ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( FeatureSet.ES6 ) ) { return NaN ; }
Distance : 9

157
Tree	if ( options.skipNonTranspilationPasses ( getSlope () ) ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses ( getSlope () ) ) { return NaN ; }
Distance : 9

158
Tree	if ( options.skipNonTranspilationPasses ( isNotNull () ) ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses ( isNotNull () ) ) { return NaN ; }
Distance : 9

159
Tree	if ( isTypeCompatible ( and () ) ) { return NaN ; }
Code	if ( isTypeCompatible ( and () ) ) { return NaN ; }
Distance : 9

160
Tree	if ( ready ( isNotNull () ) ) { return NaN ; }
Code	if ( ready ( isNotNull () ) ) { return NaN ; }
Distance : 9

161
Tree	if ( ready ( getSlope () ) ) { return NaN ; }
Code	if ( ready ( getSlope () ) ) { return NaN ; }
Distance : 9

162
Tree	if ( ready ( onlyThoseClasses () ) ) { return NaN ; }
Code	if ( ready ( onlyThoseClasses () ) ) { return NaN ; }
Distance : 9

163
Tree	if ( divisor . getVertices ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return NaN ; }
Code	if ( divisor . getVertices ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return NaN ; }
Distance : 9

164
Tree	if ( new VerifyingRecorder ( NUMBER_CONSTANT ) . NaN ( NaN ) ) { return NaN ; }
Code	if ( new VerifyingRecorder ( NUMBER_CONSTANT ) . NaN ( NaN ) ) { return NaN ; }
Distance : 12

165
Tree	if ( isTypeCompatible ( getSlope () ) ) { return NaN ; }
Code	if ( isTypeCompatible ( getSlope () ) ) { return NaN ; }
Distance : 9

166
Tree	if ( new VerifyingRecorder ( NUMBER_CONSTANT ) . incrementalCheckMode ( NaN ) ) { return NaN ; }
Code	if ( new VerifyingRecorder ( NUMBER_CONSTANT ) . incrementalCheckMode ( NaN ) ) { return NaN ; }
Distance : 12

167
Tree	if ( divisor . getVertices ( divisor ) ) { return NaN ; }
Code	if ( divisor . getVertices ( divisor ) ) { return NaN ; }
Distance : 9

168
Tree	if ( isTypeCompatible ( isNotNull () ) ) { return NaN ; }
Code	if ( isTypeCompatible ( isNotNull () ) ) { return NaN ; }
Distance : 9

169
Tree	if ( new Es6SyntacticScopeCreator ( NUMBER_CONSTANT ) . NaN ( NaN ) ) { return NaN ; }
Code	if ( new Es6SyntacticScopeCreator ( NUMBER_CONSTANT ) . NaN ( NaN ) ) { return NaN ; }
Distance : 12

170
Tree	if ( divisor . isAliasDefinition ( and () , hasFirstMethodInStackTrace ( divisor ) ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( and () , hasFirstMethodInStackTrace ( divisor ) ) ) { return NaN ; }
Distance : 15

171
Tree	if ( divisor . getVertices ( getSlope () , hasFirstMethodInStackTrace ( divisor ) ) ) { return NaN ; }
Code	if ( divisor . getVertices ( getSlope () , hasFirstMethodInStackTrace ( divisor ) ) ) { return NaN ; }
Distance : 15

172
Tree	if ( STRING_CONSTANT . methodName ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . methodName ( divisor ) ) { return NaN ; }
Distance : 10

173
Tree	if ( new AtLeastDiscrepancy ( NUMBER_CONSTANT ) . NaN ( NaN ) ) { return NaN ; }
Code	if ( new AtLeastDiscrepancy ( NUMBER_CONSTANT ) . NaN ( NaN ) ) { return NaN ; }
Distance : 12

174
Tree	if ( new AtLeastDiscrepancy ( NUMBER_CONSTANT ) . incrementalCheckMode ( NaN ) ) { return NaN ; }
Code	if ( new AtLeastDiscrepancy ( NUMBER_CONSTANT ) . incrementalCheckMode ( NaN ) ) { return NaN ; }
Distance : 12

175
Tree	if ( new Es6SyntacticScopeCreator ( NUMBER_CONSTANT ) . incrementalCheckMode ( NaN ) ) { return NaN ; }
Code	if ( new Es6SyntacticScopeCreator ( NUMBER_CONSTANT ) . incrementalCheckMode ( NaN ) ) { return NaN ; }
Distance : 12

176
Tree	if ( new VerifyingRecorder ( NUMBER_CONSTANT ) . sampleSize ( NaN ) ) { return NaN ; }
Code	if ( new VerifyingRecorder ( NUMBER_CONSTANT ) . sampleSize ( NaN ) ) { return NaN ; }
Distance : 12

177
Tree	if ( ready ( and () ) ) { return NaN ; }
Code	if ( ready ( and () ) ) { return NaN ; }
Distance : 9

178
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

179
Tree	if ( divisor . isAssignableFrom ( and () , hasFirstMethodInStackTrace ( divisor ) ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( and () , hasFirstMethodInStackTrace ( divisor ) ) ) { return NaN ; }
Distance : 15

180
Tree	if ( isTypeCompatible ( onlyThoseClasses () ) ) { return NaN ; }
Code	if ( isTypeCompatible ( onlyThoseClasses () ) ) { return NaN ; }
Distance : 9

181
Tree	if ( divisor . isAliasDefinition ( getSlope () , hasFirstMethodInStackTrace ( divisor ) ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( getSlope () , hasFirstMethodInStackTrace ( divisor ) ) ) { return NaN ; }
Distance : 15

182
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

183
Tree	if ( divisor . isAssignableFrom ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return NaN ; }
Distance : 9

184
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ; }
Distance : 5

185
Tree	if ( divisor . getVertices ( anyString () , hasFirstMethodInStackTrace ( divisor ) ) ) { return NaN ; }
Code	if ( divisor . getVertices ( anyString () , hasFirstMethodInStackTrace ( divisor ) ) ) { return NaN ; }
Distance : 15

186
Tree	if ( divisor . isAliasDefinition ( anyString () , hasFirstMethodInStackTrace ( divisor ) ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( anyString () , hasFirstMethodInStackTrace ( divisor ) ) ) { return NaN ; }
Distance : 15

187
Tree	if ( isZero ) { return NaN ; }
Code	if ( isZero ) { return NaN ; }
Distance : 7

188
Tree	if ( new VerifyingRecorder ( NUMBER_CONSTANT ) . that ( NaN ) ) { return NaN ; }
Code	if ( new VerifyingRecorder ( NUMBER_CONSTANT ) . that ( NaN ) ) { return NaN ; }
Distance : 12

189
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

190
Tree	if ( divisor . getVertices ( onlyThoseClasses () , hasFirstMethodInStackTrace ( divisor ) ) ) { return NaN ; }
Code	if ( divisor . getVertices ( onlyThoseClasses () , hasFirstMethodInStackTrace ( divisor ) ) ) { return NaN ; }
Distance : 15

191
Tree	if ( new AtLeastDiscrepancy ( NUMBER_CONSTANT ) . sampleSize ( NaN ) ) { return NaN ; }
Code	if ( new AtLeastDiscrepancy ( NUMBER_CONSTANT ) . sampleSize ( NaN ) ) { return NaN ; }
Distance : 12

192
Tree	if ( new AtLeastDiscrepancy ( NUMBER_CONSTANT ) . that ( NaN ) ) { return NaN ; }
Code	if ( new AtLeastDiscrepancy ( NUMBER_CONSTANT ) . that ( NaN ) ) { return NaN ; }
Distance : 12

193
Tree	if ( divisor . isAliasDefinition ( onlyThoseClasses () , hasFirstMethodInStackTrace ( divisor ) ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( onlyThoseClasses () , hasFirstMethodInStackTrace ( divisor ) ) ) { return NaN ; }
Distance : 15

194
Tree	if ( divisor . getVertices ( and () , hasFirstMethodInStackTrace ( divisor ) ) ) { return NaN ; }
Code	if ( divisor . getVertices ( and () , hasFirstMethodInStackTrace ( divisor ) ) ) { return NaN ; }
Distance : 15

195
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Distance : 4

196
Tree	if ( divisor . isAssignableFrom ( onlyThoseClasses () , hasFirstMethodInStackTrace ( divisor ) ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( onlyThoseClasses () , hasFirstMethodInStackTrace ( divisor ) ) ) { return NaN ; }
Distance : 15

197
Tree	if ( NaN ) { return NaN ; }
Code	if ( NaN ) { return NaN ; }
Distance : 7

198
Tree	if ( divisor ) { return divisor ; }
Code	if ( divisor ) { return divisor ; }
Distance : 7

199
Tree	if ( divisor ) { return divisor ; }
Code	if ( divisor ) { return divisor ; }
Distance : 7

========================================================================


========================================================================
Example Number: 68
Parent Code is: 
if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/46/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 7

1
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Distance : 7

2
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? LanguageMode.TYPESCRIPT : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? LanguageMode.TYPESCRIPT : FunctionFlavor.NORMAL ; }
Distance : 7

3
Tree	if ( divisor == NUMBER_CONSTANT ) { throw NaN . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw NaN . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 8

4
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? Boolean.FALSE : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? Boolean.FALSE : FunctionFlavor.NORMAL ; }
Distance : 7

5
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . primitiveTypeOf () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . primitiveTypeOf () ? CHAR_CONS : null ; }
Distance : 7

6
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

7
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . that () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . that () : divisor ; }
Distance : 7

8
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . getBeta () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . getBeta () ? CHAR_CONS : null ; }
Distance : 7

9
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . getNumberInstance () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . getNumberInstance () : NaN ; }
Distance : 7

10
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? CHAR_CONS : null ; }
Distance : 7

11
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? startPoint.length : IncrementalCheckMode.GENERATE_IJS ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? startPoint.length : IncrementalCheckMode.GENERATE_IJS ; }
Distance : 7

12
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF : IncrementalCheckMode.GENERATE_IJS ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF : IncrementalCheckMode.GENERATE_IJS ; }
Distance : 4

13
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . getTopDefiningInterface () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . getTopDefiningInterface () ? CHAR_CONS : null ; }
Distance : 7

14
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? interceptors.target : IncrementalCheckMode.GENERATE_IJS ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? interceptors.target : IncrementalCheckMode.GENERATE_IJS ; }
Distance : 4

15
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . getBeta ( this . getMethod () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . getBeta ( this . getMethod () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 12

16
Tree	if ( divisor == NUMBER_CONSTANT ) { throw NaN . createIllegalArgumentException ( config.tracerMode , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw NaN . createIllegalArgumentException ( config.tracerMode , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 8

17
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getVertices ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getVertices ( CHAR_CONS ) : divisor ; }
Distance : 9

18
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . dereference () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . dereference () : divisor ; }
Distance : 7

19
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( this . getClass () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( this . getClass () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 12

20
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? Locale.FRENCH : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? Locale.FRENCH : FunctionFlavor.NORMAL ; }
Distance : 7

21
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . toString () , reporterStub.location , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . toString () , reporterStub.location , divisor ) ; }
Distance : 12

22
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? startPoint.length : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? startPoint.length : FunctionFlavor.NORMAL ; }
Distance : 4

23
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( FeatureSet.ES6 , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( FeatureSet.ES6 , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 7

24
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . getLastChild () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . getLastChild () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 12

25
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? LanguageMode.TYPESCRIPT : IncrementalCheckMode.GENERATE_IJS ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? LanguageMode.TYPESCRIPT : IncrementalCheckMode.GENERATE_IJS ; }
Distance : 7

26
Tree	if ( divisor == NUMBER_CONSTANT ) { return return; ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return return; ; }
Distance : 1

27
Tree	if ( divisor == NUMBER_CONSTANT ) { throw NaN . createIllegalArgumentException ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw NaN . createIllegalArgumentException ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 8

28
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? & : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? & : null ; }
Distance : 7

29
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Distance : 1

30
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES , PropertyCollapseLevel.ALL ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES , PropertyCollapseLevel.ALL ) ; }
Distance : 7

31
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? startConfiguration.length : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? startConfiguration.length : FunctionFlavor.NORMAL ; }
Distance : 4

32
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getLValue () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getLValue () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 10

33
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( config.tracerMode , FunctionFlavor.GENERATOR ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( config.tracerMode , FunctionFlavor.GENERATOR ) ; }
Distance : 7

34
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( FeatureSet.ES6 , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( FeatureSet.ES6 , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Distance : 7

35
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? isNamedType : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? isNamedType : FunctionFlavor.NORMAL ; }
Distance : 7

36
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? Locale.US : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? Locale.US : FunctionFlavor.NORMAL ; }
Distance : 7

37
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 7

38
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . enumLiteralHasKey () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . enumLiteralHasKey () : divisor ; }
Distance : 7

39
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.GENERATE_IJS : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.GENERATE_IJS : FunctionFlavor.NORMAL ; }
Distance : 4

40
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isEmptyType () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isEmptyType () : divisor ; }
Distance : 7

41
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( config.tracerMode , PropertyCollapseLevel.ALL ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( config.tracerMode , PropertyCollapseLevel.ALL ) ; }
Distance : 7

42
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isModifiableClass () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isModifiableClass () ? CHAR_CONS : null ; }
Distance : 7

43
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isRest () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isRest () : divisor ; }
Distance : 7

44
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.GENERATE_IJS : IncrementalCheckMode.GENERATE_IJS ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.GENERATE_IJS : IncrementalCheckMode.GENERATE_IJS ; }
Distance : 4

45
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . findZBounds () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . findZBounds () : divisor ; }
Distance : 7

46
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getVertices () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getVertices () : divisor ; }
Distance : 7

47
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? startPoint.length : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? startPoint.length : FunctionFlavor.NORMAL ; }
Distance : 7

48
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of ( CHAR_CONS ) : divisor ; }
Distance : 9

49
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( config.tracerMode , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( config.tracerMode , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 7

50
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF . getTopDefiningInterface () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF . getTopDefiningInterface () : divisor ; }
Distance : 7

51
Tree	if ( divisor == NUMBER_CONSTANT ) { throw NaN . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw NaN . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Distance : 8

52
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getReferenceName () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getReferenceName () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 10

53
Tree	if ( isZero == NUMBER_CONSTANT ) { return null ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return null ; }
Distance : 2

54
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( config.tracerMode , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( config.tracerMode , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Distance : 7

55
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . createInternalError () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . createInternalError () : NaN ; }
Distance : 7

56
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getBeta ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getBeta ( CHAR_CONS ) : divisor ; }
Distance : 9

57
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

58
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . dereference ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . dereference ( CHAR_CONS ) : divisor ; }
Distance : 9

59
Tree	if ( divisor == NUMBER_CONSTANT ) { throw NaN . createIllegalArgumentException ( checkSuper , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw NaN . createIllegalArgumentException ( checkSuper , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 8

60
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . enumLiteralHasKey ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . enumLiteralHasKey ( CHAR_CONS ) : divisor ; }
Distance : 9

61
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getDaysInYearMax ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getDaysInYearMax ( CHAR_CONS ) : divisor ; }
Distance : 9

62
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isEmptyType ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isEmptyType ( CHAR_CONS ) : divisor ; }
Distance : 9

63
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? startPoint.length . getTopDefiningInterface () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? startPoint.length . getTopDefiningInterface () : divisor ; }
Distance : 7

64
Tree	if ( divisor == NUMBER_CONSTANT ) { throw NaN . createIllegalArgumentException ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw NaN . createIllegalArgumentException ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 8

65
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? startConfiguration.length . getTopDefiningInterface () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? startConfiguration.length . getTopDefiningInterface () : divisor ; }
Distance : 7

66
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isRest ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isRest ( CHAR_CONS ) : divisor ; }
Distance : 9

67
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . withLoose () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . withLoose () : divisor ; }
Distance : 9

68
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? interceptors.target . getBeta () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? interceptors.target . getBeta () : divisor ; }
Distance : 7

69
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . withLoose () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . withLoose () : NaN ; }
Distance : 7

70
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 5

71
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . createsScope () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . createsScope () : NaN ; }
Distance : 7

72
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . isLoose () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . isLoose () : NaN ; }
Distance : 7

73
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF . getBeta () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF . getBeta () : divisor ; }
Distance : 7

74
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? uniqueId () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? uniqueId () : NaN ; }
Distance : 5

75
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . findZBounds ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . findZBounds ( CHAR_CONS ) : divisor ; }
Distance : 9

76
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.GENERATE_IJS . getTopDefiningInterface () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.GENERATE_IJS . getTopDefiningInterface () : divisor ; }
Distance : 7

77
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 5

78
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getNumberInstance () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getNumberInstance () : divisor ; }
Distance : 9

79
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF . isSubtypeWithoutStructuralTyping () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF . isSubtypeWithoutStructuralTyping () : divisor ; }
Distance : 7

80
Tree	if ( divisor == NUMBER_CONSTANT ) { throw NaN . createIllegalArgumentException ( config.tracerMode , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw NaN . createIllegalArgumentException ( config.tracerMode , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Distance : 8

81
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? isSubtypeWithoutStructuralTyping () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? isSubtypeWithoutStructuralTyping () : NaN ; }
Distance : 5

82
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getBeta () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getBeta () : divisor ; }
Distance : 9

83
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getBottomObject () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getBottomObject () : divisor ; }
Distance : 9

84
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? interceptors.target . isSubtypeWithoutStructuralTyping () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? interceptors.target . isSubtypeWithoutStructuralTyping () : divisor ; }
Distance : 7

85
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getSlope () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getSlope () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 10

86
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 5

87
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? isNamedType () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? isNamedType () : NaN ; }
Distance : 5

88
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . escapeJson () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . escapeJson () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 12

89
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . get () , reporterStub.location , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . get () , reporterStub.location , divisor ) ; }
Distance : 12

90
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . getLastChild () , ClassFileVersion.JAVA_V7 , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . getLastChild () , ClassFileVersion.JAVA_V7 , divisor ) ; }
Distance : 12

91
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getOutputFeatureSet () , startPoint.length , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getOutputFeatureSet () , startPoint.length , divisor ) ; }
Distance : 10

92
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . latest ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . latest ( CHAR_CONS ) : divisor ; }
Distance : 9

93
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? startConfiguration.length : IncrementalCheckMode.GENERATE_IJS ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? startConfiguration.length : IncrementalCheckMode.GENERATE_IJS ; }
Distance : 4

94
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getOutputFeatureSet () , ClassFileVersion.JAVA_V7 , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getOutputFeatureSet () , ClassFileVersion.JAVA_V7 , divisor ) ; }
Distance : 10

95
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

96
Tree	if ( divisor == NUMBER_CONSTANT ) { return default: ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return default: ; }
Distance : 1

97
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? startPoint.length : IncrementalCheckMode.GENERATE_IJS ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? startPoint.length : IncrementalCheckMode.GENERATE_IJS ; }
Distance : 4

98
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . get () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . get () : divisor ; }
Distance : 9

99
Tree	if ( isZero == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 6

100
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

101
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getRMS () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getRMS () : divisor ; }
Distance : 9

102
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . primitiveTypeOf ( getOutputFeatureSet () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . primitiveTypeOf ( getOutputFeatureSet () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 10

103
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . latest () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . latest () : divisor ; }
Distance : 9

104
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? PropertyCollapseLevel.NONE : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? PropertyCollapseLevel.NONE : FunctionFlavor.NORMAL ; }
Distance : 7

105
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . isPropDefinedOnSubtype () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . isPropDefinedOnSubtype () : divisor ; }
Distance : 9

106
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( onlyThoseClassesInStackTrace () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( onlyThoseClassesInStackTrace () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 10

107
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getConstructor () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getConstructor () : divisor ; }
Distance : 9

108
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Distance : 0

109
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 4

110
Tree	if ( divisor == NUMBER_CONSTANT ) { return null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return null ; }
Distance : 1

111
Tree	if ( isZero == NUMBER_CONSTANT ) { return return; ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return return; ; }
Distance : 2

112
Tree	if ( isZero == NUMBER_CONSTANT ) { return divisor ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return divisor ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 6

113
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 5

114
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 1

115
Tree	if ( divisor == NUMBER_CONSTANT ) { return StringUtils.EMPTY ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return StringUtils.EMPTY ; }
Distance : 1

116
Tree	if ( NaN == NUMBER_CONSTANT ) { return divisor ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return divisor ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 6

117
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

118
Tree	if ( divisor == NUMBER_CONSTANT ) { return DecompositionType.UNDECOMPOSABLE ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return DecompositionType.UNDECOMPOSABLE ; }
Distance : 1

119
Tree	if ( isZero == NUMBER_CONSTANT ) { return divisor ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return divisor ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 6

120
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 4

121
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ; }
Distance : 1

122
Tree	if ( isZero == NUMBER_CONSTANT ) { return divisor ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return divisor ; }
Distance : 2

123
Tree	if ( isZero == NUMBER_CONSTANT ) { return isZero ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return isZero ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 6

124
Tree	if ( divisor == NUMBER_CONSTANT ) { return varInfo.hasNonLocalOrNonLiteralValue ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return varInfo.hasNonLocalOrNonLiteralValue ; }
Distance : 1

125
Tree	if ( divisor == NUMBER_CONSTANT ) { return DecompositionType.DECOMPOSABLE ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return DecompositionType.DECOMPOSABLE ; }
Distance : 1

126
Tree	if ( divisor == NUMBER_CONSTANT ) { return ConformanceResult.POSSIBLE_VIOLATION_DUE_TO_LOOSE_TYPES ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ConformanceResult.POSSIBLE_VIOLATION_DUE_TO_LOOSE_TYPES ; }
Distance : 1

127
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 4

128
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of () : divisor ; }
Distance : 7

129
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . latest () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . latest () : divisor ; }
Distance : 7

130
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 4

131
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ? this . that () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ? this . that () : NaN ; }
Distance : 7

132
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . createEOFException () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . createEOFException () ? CHAR_CONS : null ; }
Distance : 7

133
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeOf () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeOf () ? CHAR_CONS : null ; }
Distance : 7

134
Tree	if ( divisor == NUMBER_CONSTANT ) { return continue; ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return continue; ; }
Distance : 1

135
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ; }
Distance : 1

136
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . that () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . that () : NaN ; }
Distance : 7

137
Tree	if ( divisor == NUMBER_CONSTANT ) { return Answers.RETURNS_DEFAULTS ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return Answers.RETURNS_DEFAULTS ; }
Distance : 1

138
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Distance : 1

139
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? <= : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? <= : null ; }
Distance : 7

140
Tree	if ( divisor == NUMBER_CONSTANT ) { throw NaN . createIllegalArgumentException ( LocalizedFormats.NEGATIVE_NUMBER_OF_SUCCESSES , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw NaN . createIllegalArgumentException ( LocalizedFormats.NEGATIVE_NUMBER_OF_SUCCESSES , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 8

141
Tree	if ( divisor == NUMBER_CONSTANT ) { throw NaN . createIllegalArgumentException ( LocalizedFormats.POWER_NEGATIVE_PARAMETERS , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw NaN . createIllegalArgumentException ( LocalizedFormats.POWER_NEGATIVE_PARAMETERS , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 8

142
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . escapeJson () , reporterStub.location , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . escapeJson () , reporterStub.location , divisor ) ; }
Distance : 12

143
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? startConfiguration.length . isSubtypeWithoutStructuralTyping () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? startConfiguration.length . isSubtypeWithoutStructuralTyping () : divisor ; }
Distance : 7

144
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 5

145
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? INFINITE_WINDOW () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? INFINITE_WINDOW () : NaN ; }
Distance : 5

146
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . ADDITIVE_MODE () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . ADDITIVE_MODE () ? CHAR_CONS : null ; }
Distance : 7

147
Tree	if ( divisor == NUMBER_CONSTANT ) { return ArrayUtils.EMPTY_STRING_ARRAY ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ArrayUtils.EMPTY_STRING_ARRAY ; }
Distance : 1

148
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Distance : 0

149
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . getEmptyObjectLiteral () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . getEmptyObjectLiteral () : NaN ; }
Distance : 7

150
Tree	if ( isZero == NUMBER_CONSTANT ) { return isZero ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return isZero ; }
Distance : 2

151
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getBeta () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getBeta () : divisor ; }
Distance : 7

152
Tree	if ( NaN == NUMBER_CONSTANT ) { return divisor ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return divisor ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 6

153
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . copySelf () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . copySelf () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 12

154
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF : FunctionFlavor.NORMAL ; }
Distance : 4

155
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . getPackage () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . getPackage () : NaN ; }
Distance : 7

156
Tree	if ( divisor == NUMBER_CONSTANT ) { return CallSiteType.DECOMPOSABLE_EXPRESSION ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return CallSiteType.DECOMPOSABLE_EXPRESSION ; }
Distance : 1

157
Tree	if ( divisor == NUMBER_CONSTANT ) { throw NaN . createIllegalArgumentException ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw NaN . createIllegalArgumentException ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Distance : 8

158
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Distance : 1

159
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? uniqueId () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? uniqueId () : divisor ; }
Distance : 5

160
Tree	if ( divisor == NUMBER_CONSTANT ) { return Format.TYPED ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return Format.TYPED ; }
Distance : 1

161
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? getInstanceType () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? getInstanceType () : NaN ; }
Distance : 5

162
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? isNamedType () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? isNamedType () : divisor ; }
Distance : 5

163
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? interceptors.target . getTopDefiningInterface () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? interceptors.target . getTopDefiningInterface () : divisor ; }
Distance : 7

164
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

165
Tree	if ( divisor == NUMBER_CONSTANT ) { return containsNow ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return containsNow ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

166
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . getBeta ( this . returnZero () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . getBeta ( this . returnZero () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 12

167
Tree	if ( divisor == NUMBER_CONSTANT ) { return getYearMonthTypeUTC ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return getYearMonthTypeUTC ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

168
Tree	if ( divisor == NUMBER_CONSTANT ) { return getReferenceName ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return getReferenceName ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

169
Tree	if ( divisor == NUMBER_CONSTANT ) { return null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return null ; }
Distance : 1

170
Tree	if ( divisor == NUMBER_CONSTANT ) { return isAfterNow ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isAfterNow ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

171
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( this . returnZero () , reporterStub.location , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( this . returnZero () , reporterStub.location , divisor ) ; }
Distance : 12

172
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . getTopDefiningInterface ( this . returnZero () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . getTopDefiningInterface ( this . returnZero () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 12

173
Tree	if ( divisor == NUMBER_CONSTANT ) { return DecompositionType.UNDECOMPOSABLE ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return DecompositionType.UNDECOMPOSABLE ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

174
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . getLastChild () , reporterStub.location , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . getLastChild () , reporterStub.location , divisor ) ; }
Distance : 12

175
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( this . getCharset () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( this . getCharset () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 12

176
Tree	if ( divisor == NUMBER_CONSTANT ) { return splitWorker ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return splitWorker ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

177
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . primitiveTypeOf ( this . getMethod () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . primitiveTypeOf ( this . getMethod () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 12

178
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getRemoveUnusedCode () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getRemoveUnusedCode () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 10

179
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? interceptors.target : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? interceptors.target : FunctionFlavor.NORMAL ; }
Distance : 4

180
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( isNamedType () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( isNamedType () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 10

181
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . copySelf () , reporterStub.location , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . copySelf () , reporterStub.location , divisor ) ; }
Distance : 12

182
Tree	if ( divisor == NUMBER_CONSTANT ) { return toAnswer ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return toAnswer ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

183
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getDaysInYearMax () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getDaysInYearMax () : divisor ; }
Distance : 7

184
Tree	if ( NaN == NUMBER_CONSTANT ) { return divisor ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return divisor ; }
Distance : 2

185
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? Boolean.FALSE : IncrementalCheckMode.GENERATE_IJS ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? Boolean.FALSE : IncrementalCheckMode.GENERATE_IJS ; }
Distance : 7

186
Tree	if ( divisor == NUMBER_CONSTANT ) { return getAccessibleMethod ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return getAccessibleMethod ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

187
Tree	if ( divisor == NUMBER_CONSTANT ) { return filterNoResolvedType ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return filterNoResolvedType ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

188
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . toString () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . toString () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 12

189
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? Calendar.SUNDAY () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? Calendar.SUNDAY () : NaN ; }
Distance : 5

190
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? copySign () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? copySign () : NaN ; }
Distance : 5

191
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( this . returnZero () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( this . returnZero () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 12

192
Tree	if ( divisor == NUMBER_CONSTANT ) { return break; ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return break; ; }
Distance : 1

193
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? getOwnerFunction () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? getOwnerFunction () : NaN ; }
Distance : 5

194
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( this . getMethod () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( this . getMethod () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 12

195
Tree	if ( NaN == NUMBER_CONSTANT ) { return null ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return null ; }
Distance : 2

196
Tree	if ( divisor == NUMBER_CONSTANT ) { return super(); ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return super(); ; }
Distance : 1

197
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . primitiveTypeOf ( this . returnZero () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . primitiveTypeOf ( this . returnZero () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 12

198
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getOutputFeatureSet () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getOutputFeatureSet () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 10

199
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getDaysInYearMax () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getDaysInYearMax () : divisor ; }
Distance : 9

========================================================================


========================================================================
Example Number: 69
Parent Code is: 
if ( divisor.isZero ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor.isZero ) { return NaN ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (40{val=divisor.isZero}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (40{val=divisor.isZero}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/46/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( this . radiusGridlinesVisible () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . radiusGridlinesVisible () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

1
Tree	if ( this . getTracerMode () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . getTracerMode () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

2
Tree	if ( this . isTopLevel () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isTopLevel () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

3
Tree	if ( this . getStringBuffer () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . getStringBuffer () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

4
Tree	if ( this . isSame () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isSame () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

5
Tree	if ( this . subtypes () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . subtypes () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

6
Tree	if ( this . isUnknownObject () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isUnknownObject () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

7
Tree	if ( this . verticalTickLabels () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . verticalTickLabels () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

8
Tree	if ( this . labelLinkMargin () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . labelLinkMargin () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

9
Tree	if ( this . resetBuilder () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . resetBuilder () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

10
Tree	if ( divisor.isZero . isAliasDefinition ( isZero ) ) { return false ; }
Code	if ( divisor.isZero . isAliasDefinition ( isZero ) ) { return false ; }
Distance : 6

11
Tree	if ( divisor.isZero . options.removeUnusedLocalVars ( isZero ) ) { return false ; }
Code	if ( divisor.isZero . options.removeUnusedLocalVars ( isZero ) ) { return false ; }
Distance : 6

12
Tree	if ( divisor.isZero . astValidationEnabled ( isZero ) ) { return false ; }
Code	if ( divisor.isZero . astValidationEnabled ( isZero ) ) { return false ; }
Distance : 6

13
Tree	if ( divisor.isZero . isAliasDefinition ( ) ) ) { return false ; }
Code	if ( divisor.isZero . isAliasDefinition ( ) ) ) { return false ; }
Distance : 6

14
Tree	if ( divisor.isZero . isAliasDefinition ( NaN ) ) { return false ; }
Code	if ( divisor.isZero . isAliasDefinition ( NaN ) ) { return false ; }
Distance : 6

15
Tree	if ( divisor.isZero . isTypeCompatible ( isZero ) ) { return false ; }
Code	if ( divisor.isZero . isTypeCompatible ( isZero ) ) { return false ; }
Distance : 6

16
Tree	if ( divisor.isZero . runMode ( isZero ) ) { return false ; }
Code	if ( divisor.isZero . runMode ( isZero ) ) { return false ; }
Distance : 6

17
Tree	if ( divisor.isZero . getCountry ( isZero ) ) { return false ; }
Code	if ( divisor.isZero . getCountry ( isZero ) ) { return false ; }
Distance : 6

18
Tree	if ( divisor.isZero . isPrimitiveWrapper ( isZero ) ) { return false ; }
Code	if ( divisor.isZero . isPrimitiveWrapper ( isZero ) ) { return false ; }
Distance : 6

19
Tree	if ( divisor.isZero . containsAny ( isZero ) ) { return false ; }
Code	if ( divisor.isZero . containsAny ( isZero ) ) { return false ; }
Distance : 6

20
Tree	if ( this . isZero . containsKey () ) { return false ; }
Code	if ( this . isZero . containsKey () ) { return false ; }
Distance : 7

21
Tree	if ( STRING_CONSTANT . astValidationEnabled ( isZero ) ) { return false ; }
Code	if ( STRING_CONSTANT . astValidationEnabled ( isZero ) ) { return false ; }
Distance : 7

22
Tree	if ( STRING_CONSTANT . isAliasDefinition ( isZero ) ) { return false ; }
Code	if ( STRING_CONSTANT . isAliasDefinition ( isZero ) ) { return false ; }
Distance : 7

23
Tree	if ( STRING_CONSTANT . getRhs ( isZero ) ) { return false ; }
Code	if ( STRING_CONSTANT . getRhs ( isZero ) ) { return false ; }
Distance : 7

24
Tree	if ( STRING_CONSTANT . isTypeCompatible ( isZero ) ) { return false ; }
Code	if ( STRING_CONSTANT . isTypeCompatible ( isZero ) ) { return false ; }
Distance : 7

25
Tree	if ( STRING_CONSTANT . hasNode ( isZero ) ) { return false ; }
Code	if ( STRING_CONSTANT . hasNode ( isZero ) ) { return false ; }
Distance : 7

26
Tree	if ( STRING_CONSTANT . astValidationEnabled ( isZero ) ) { return null ; }
Code	if ( STRING_CONSTANT . astValidationEnabled ( isZero ) ) { return null ; }
Distance : 7

27
Tree	if ( STRING_CONSTANT . isAliasDefinition ( isZero ) ) { return null ; }
Code	if ( STRING_CONSTANT . isAliasDefinition ( isZero ) ) { return null ; }
Distance : 7

28
Tree	if ( STRING_CONSTANT . shouldRunRemoveUnusedCode ( isZero ) ) { return false ; }
Code	if ( STRING_CONSTANT . shouldRunRemoveUnusedCode ( isZero ) ) { return false ; }
Distance : 7

29
Tree	if ( STRING_CONSTANT . containsAny ( isZero ) ) { return false ; }
Code	if ( STRING_CONSTANT . containsAny ( isZero ) ) { return false ; }
Distance : 7

30
Tree	if ( this . labelLinkMargin () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . labelLinkMargin () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

31
Tree	if ( this . resetBuilder () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . resetBuilder () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

32
Tree	if ( this . isZero . withLoose () ) { return null ; }
Code	if ( this . isZero . withLoose () ) { return null ; }
Distance : 7

33
Tree	if ( this . isZero . withLoose () ) { return false ; }
Code	if ( this . isZero . withLoose () ) { return false ; }
Distance : 7

34
Tree	if ( this . isZero . copySelf () ) { return null ; }
Code	if ( this . isZero . copySelf () ) { return null ; }
Distance : 7

35
Tree	if ( this . isZero . copySelf () ) { return false ; }
Code	if ( this . isZero . copySelf () ) { return false ; }
Distance : 7

36
Tree	if ( divisor.isZero . isAliasDefinition ( divisor.isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( divisor.isZero . isAliasDefinition ( divisor.isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 9

37
Tree	if ( divisor.isZero . options.removeUnusedLocalVars ( divisor.isZero ) ) { return NaN ? NaN : ( ; }
Code	if ( divisor.isZero . options.removeUnusedLocalVars ( divisor.isZero ) ) { return NaN ? NaN : ( ; }
Distance : 9

38
Tree	if ( this . isZero . escapeJson () ) { return null ; }
Code	if ( this . isZero . escapeJson () ) { return null ; }
Distance : 7

39
Tree	if ( divisor.isZero . astValidationEnabled ( divisor.isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( divisor.isZero . astValidationEnabled ( divisor.isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 9

40
Tree	if ( divisor.isZero . isTypeCompatible ( divisor.isZero ) ) { return NaN ? NaN : ( ; }
Code	if ( divisor.isZero . isTypeCompatible ( divisor.isZero ) ) { return NaN ? NaN : ( ; }
Distance : 9

41
Tree	if ( this . NaN . equals () ) { return null ; }
Code	if ( this . NaN . equals () ) { return null ; }
Distance : 7

42
Tree	if ( divisor.isZero . runMode ( divisor.isZero ) ) { return NaN ? NaN : ( ; }
Code	if ( divisor.isZero . runMode ( divisor.isZero ) ) { return NaN ? NaN : ( ; }
Distance : 9

43
Tree	if ( divisor.isZero . getCountry ( divisor.isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( divisor.isZero . getCountry ( divisor.isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 9

44
Tree	if ( divisor.isZero . isPrimitiveWrapper ( divisor.isZero ) ) { return NaN ? NaN : ( ; }
Code	if ( divisor.isZero . isPrimitiveWrapper ( divisor.isZero ) ) { return NaN ? NaN : ( ; }
Distance : 9

45
Tree	if ( divisor.isZero . containsAny ( divisor.isZero ) ) { return NaN ? NaN : : ; }
Code	if ( divisor.isZero . containsAny ( divisor.isZero ) ) { return NaN ? NaN : : ; }
Distance : 9

46
Tree	if ( this . isZero . escapeJson () ) { return false ; }
Code	if ( this . isZero . escapeJson () ) { return false ; }
Distance : 7

47
Tree	if ( divisor.isZero . isNotEqualTo ( divisor.isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( divisor.isZero . isNotEqualTo ( divisor.isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 9

48
Tree	if ( divisor.isZero . bg ( divisor.isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( divisor.isZero . bg ( divisor.isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 9

49
Tree	if ( this . isZero . isString () ) { return null ; }
Code	if ( this . isZero . isString () ) { return null ; }
Distance : 7

50
Tree	if ( this . verticalTickLabels () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . verticalTickLabels () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

51
Tree	if ( divisor.isZero . isTypeCompatible ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isTypeCompatible ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

52
Tree	if ( this . labelLinkMargin () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . labelLinkMargin () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

53
Tree	if ( this . resetBuilder () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . resetBuilder () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

54
Tree	if ( divisor.isZero . runMode ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . runMode ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

55
Tree	if ( divisor.isZero . getCountry ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . getCountry ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

56
Tree	if ( divisor.isZero . isPrimitiveWrapper ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isPrimitiveWrapper ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

57
Tree	if ( divisor.isZero . containsAny ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . containsAny ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

58
Tree	if ( divisor.isZero . isNotEqualTo ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isNotEqualTo ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

59
Tree	if ( divisor.isZero . bg ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . bg ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

60
Tree	if ( STRING_CONSTANT . getRhs ( isZero ) ) { return null ; }
Code	if ( STRING_CONSTANT . getRhs ( isZero ) ) { return null ; }
Distance : 7

61
Tree	if ( STRING_CONSTANT . isPrimitiveWrapper ( isZero ) ) { return false ; }
Code	if ( STRING_CONSTANT . isPrimitiveWrapper ( isZero ) ) { return false ; }
Distance : 7

62
Tree	if ( STRING_CONSTANT . isEquivalentWithSideEffectsToShallow ( isZero ) ) { return false ; }
Code	if ( STRING_CONSTANT . isEquivalentWithSideEffectsToShallow ( isZero ) ) { return false ; }
Distance : 7

63
Tree	if ( STRING_CONSTANT . isTypeCompatible ( isZero ) ) { return null ; }
Code	if ( STRING_CONSTANT . isTypeCompatible ( isZero ) ) { return null ; }
Distance : 7

64
Tree	if ( STRING_CONSTANT . canRecoverFromFailure ( isZero ) ) { return false ; }
Code	if ( STRING_CONSTANT . canRecoverFromFailure ( isZero ) ) { return false ; }
Distance : 7

65
Tree	if ( divisor.isZero . containsAny ( divisor.isZero ) ) { return false ; }
Code	if ( divisor.isZero . containsAny ( divisor.isZero ) ) { return false ; }
Distance : 6

66
Tree	if ( divisor.isZero . isTypeCompatible ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . isTypeCompatible ( divisor.isZero ) ) { return null ; }
Distance : 6

67
Tree	if ( STRING_CONSTANT . hasNode ( isZero ) ) { return null ; }
Code	if ( STRING_CONSTANT . hasNode ( isZero ) ) { return null ; }
Distance : 7

68
Tree	if ( isZero . runMode ( CHAR_CONS ) ) { return false ; }
Code	if ( isZero . runMode ( CHAR_CONS ) ) { return false ; }
Distance : 7

69
Tree	if ( divisor.isZero . runMode ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . runMode ( divisor.isZero ) ) { return null ; }
Distance : 6

70
Tree	if ( divisor.isZero . isNotEqualTo ( divisor.isZero ) ) { return false ; }
Code	if ( divisor.isZero . isNotEqualTo ( divisor.isZero ) ) { return false ; }
Distance : 6

71
Tree	if ( divisor.isZero . bg ( divisor.isZero ) ) { return false ; }
Code	if ( divisor.isZero . bg ( divisor.isZero ) ) { return false ; }
Distance : 6

72
Tree	if ( STRING_CONSTANT . shouldRunRemoveUnusedCode ( isZero ) ) { return null ; }
Code	if ( STRING_CONSTANT . shouldRunRemoveUnusedCode ( isZero ) ) { return null ; }
Distance : 7

73
Tree	if ( divisor.isZero . getCountry ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . getCountry ( divisor.isZero ) ) { return null ; }
Distance : 6

74
Tree	if ( divisor.isZero . isPrimitiveWrapper ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . isPrimitiveWrapper ( divisor.isZero ) ) { return null ; }
Distance : 6

75
Tree	if ( STRING_CONSTANT . containsAny ( isZero ) ) { return null ; }
Code	if ( STRING_CONSTANT . containsAny ( isZero ) ) { return null ; }
Distance : 7

76
Tree	if ( divisor.isZero . containsAny ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . containsAny ( divisor.isZero ) ) { return null ; }
Distance : 6

77
Tree	if ( divisor.isZero . isNotEqualTo ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . isNotEqualTo ( divisor.isZero ) ) { return null ; }
Distance : 6

78
Tree	if ( STRING_CONSTANT . isPrimitiveWrapper ( isZero ) ) { return null ; }
Code	if ( STRING_CONSTANT . isPrimitiveWrapper ( isZero ) ) { return null ; }
Distance : 7

79
Tree	if ( divisor.isZero . bg ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . bg ( divisor.isZero ) ) { return null ; }
Distance : 6

80
Tree	if ( this . radiusGridlinesVisible () ) { return isZero ; }
Code	if ( this . radiusGridlinesVisible () ) { return isZero ; }
Distance : 5

81
Tree	if ( this . getTracerMode () ) { return isZero ; }
Code	if ( this . getTracerMode () ) { return isZero ; }
Distance : 5

82
Tree	if ( this . isTopLevel () ) { return isZero ; }
Code	if ( this . isTopLevel () ) { return isZero ; }
Distance : 5

83
Tree	if ( this . getStringBuffer () ) { return isZero ; }
Code	if ( this . getStringBuffer () ) { return isZero ; }
Distance : 5

84
Tree	if ( this . isSame () ) { return isZero ; }
Code	if ( this . isSame () ) { return isZero ; }
Distance : 5

85
Tree	if ( this . subtypes () ) { return isZero ; }
Code	if ( this . subtypes () ) { return isZero ; }
Distance : 5

86
Tree	if ( STRING_CONSTANT . astValidationEnabled ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . astValidationEnabled ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

87
Tree	if ( this . isUnknownObject () ) { return isZero ; }
Code	if ( this . isUnknownObject () ) { return isZero ; }
Distance : 5

88
Tree	if ( STRING_CONSTANT . isAliasDefinition ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isAliasDefinition ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

89
Tree	if ( STRING_CONSTANT . getRhs ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . getRhs ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

90
Tree	if ( divisor.isZero . isAliasDefinition ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isAliasDefinition ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

91
Tree	if ( this . radiusGridlinesVisible () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . radiusGridlinesVisible () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

92
Tree	if ( this . getTracerMode () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . getTracerMode () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

93
Tree	if ( divisor.isZero . options.removeUnusedLocalVars ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . options.removeUnusedLocalVars ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

94
Tree	if ( this . isTopLevel () ) { return NaN ? NaN : ( ; }
Code	if ( this . isTopLevel () ) { return NaN ? NaN : ( ; }
Distance : 8

95
Tree	if ( this . getStringBuffer () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . getStringBuffer () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

96
Tree	if ( this . radiusGridlinesVisible () ) { return false ; }
Code	if ( this . radiusGridlinesVisible () ) { return false ; }
Distance : 5

97
Tree	if ( this . isSame () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . isSame () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

98
Tree	if ( this . getTracerMode () ) { return false ; }
Code	if ( this . getTracerMode () ) { return false ; }
Distance : 5

99
Tree	if ( this . isTopLevel () ) { return false ; }
Code	if ( this . isTopLevel () ) { return false ; }
Distance : 5

100
Tree	if ( this . subtypes () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . subtypes () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

101
Tree	if ( divisor.isZero . astValidationEnabled ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . astValidationEnabled ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

102
Tree	if ( this . getStringBuffer () ) { return false ; }
Code	if ( this . getStringBuffer () ) { return false ; }
Distance : 5

103
Tree	if ( this . isUnknownObject () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . isUnknownObject () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

104
Tree	if ( this . isSame () ) { return false ; }
Code	if ( this . isSame () ) { return false ; }
Distance : 5

105
Tree	if ( this . subtypes () ) { return false ; }
Code	if ( this . subtypes () ) { return false ; }
Distance : 5

106
Tree	if ( this . isUnknownObject () ) { return false ; }
Code	if ( this . isUnknownObject () ) { return false ; }
Distance : 5

107
Tree	if ( this . verticalTickLabels () ) { return false ; }
Code	if ( this . verticalTickLabels () ) { return false ; }
Distance : 5

108
Tree	if ( this . labelLinkMargin () ) { return false ; }
Code	if ( this . labelLinkMargin () ) { return false ; }
Distance : 5

109
Tree	if ( this . resetBuilder () ) { return false ; }
Code	if ( this . resetBuilder () ) { return false ; }
Distance : 5

110
Tree	if ( this . radiusGridlinesVisible () ) { return null ; }
Code	if ( this . radiusGridlinesVisible () ) { return null ; }
Distance : 5

111
Tree	if ( this . getTracerMode () ) { return null ; }
Code	if ( this . getTracerMode () ) { return null ; }
Distance : 5

112
Tree	if ( this . isTopLevel () ) { return null ; }
Code	if ( this . isTopLevel () ) { return null ; }
Distance : 5

113
Tree	if ( this . getStringBuffer () ) { return null ; }
Code	if ( this . getStringBuffer () ) { return null ; }
Distance : 5

114
Tree	if ( this . isSame () ) { return null ; }
Code	if ( this . isSame () ) { return null ; }
Distance : 5

115
Tree	if ( this . subtypes () ) { return null ; }
Code	if ( this . subtypes () ) { return null ; }
Distance : 5

116
Tree	if ( this . isUnknownObject () ) { return null ; }
Code	if ( this . isUnknownObject () ) { return null ; }
Distance : 5

117
Tree	if ( this . radiusGridlinesVisible () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . radiusGridlinesVisible () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

118
Tree	if ( this . verticalTickLabels () ) { return null ; }
Code	if ( this . verticalTickLabels () ) { return null ; }
Distance : 5

119
Tree	if ( this . getTracerMode () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . getTracerMode () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

120
Tree	if ( this . isZero . equals () ) { return null ; }
Code	if ( this . isZero . equals () ) { return null ; }
Distance : 7

121
Tree	if ( this . isTopLevel () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . isTopLevel () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

122
Tree	if ( this . getStringBuffer () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . getStringBuffer () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

123
Tree	if ( this . labelLinkMargin () ) { return null ; }
Code	if ( this . labelLinkMargin () ) { return null ; }
Distance : 5

124
Tree	if ( this . isSame () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . isSame () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

125
Tree	if ( this . verticalTickLabels () ) { return isZero ; }
Code	if ( this . verticalTickLabels () ) { return isZero ; }
Distance : 5

126
Tree	if ( this . subtypes () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . subtypes () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

127
Tree	if ( this . labelLinkMargin () ) { return divisor.isZero ; }
Code	if ( this . labelLinkMargin () ) { return divisor.isZero ; }
Distance : 5

128
Tree	if ( STRING_CONSTANT . isTypeCompatible ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isTypeCompatible ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

129
Tree	if ( this . isZero . equals () ) { return false ; }
Code	if ( this . isZero . equals () ) { return false ; }
Distance : 7

130
Tree	if ( this . resetBuilder () ) { return isZero ; }
Code	if ( this . resetBuilder () ) { return isZero ; }
Distance : 5

131
Tree	if ( STRING_CONSTANT . hasNode ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . hasNode ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

132
Tree	if ( this . isUnknownObject () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . isUnknownObject () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

133
Tree	if ( this . verticalTickLabels () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . verticalTickLabels () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

134
Tree	if ( STRING_CONSTANT . shouldRunRemoveUnusedCode ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . shouldRunRemoveUnusedCode ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

135
Tree	if ( STRING_CONSTANT . containsAny ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . containsAny ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

136
Tree	if ( STRING_CONSTANT . isPrimitiveWrapper ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isPrimitiveWrapper ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

137
Tree	if ( STRING_CONSTANT . isEquivalentWithSideEffectsToShallow ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isEquivalentWithSideEffectsToShallow ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

138
Tree	if ( STRING_CONSTANT . canRecoverFromFailure ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . canRecoverFromFailure ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

139
Tree	if ( STRING_CONSTANT . isEquivalentWithSideEffectsToShallow ( isZero ) ) { return null ; }
Code	if ( STRING_CONSTANT . isEquivalentWithSideEffectsToShallow ( isZero ) ) { return null ; }
Distance : 7

140
Tree	if ( this . resetBuilder () ) { return null ; }
Code	if ( this . resetBuilder () ) { return null ; }
Distance : 5

141
Tree	if ( isZero . regionMatches ( CHAR_CONS ) ) { return false ; }
Code	if ( isZero . regionMatches ( CHAR_CONS ) ) { return false ; }
Distance : 7

142
Tree	if ( divisor.isZero . isAliasDefinition ( divisor.isZero ) ) { return false ; }
Code	if ( divisor.isZero . isAliasDefinition ( divisor.isZero ) ) { return false ; }
Distance : 6

143
Tree	if ( STRING_CONSTANT . canRecoverFromFailure ( isZero ) ) { return null ; }
Code	if ( STRING_CONSTANT . canRecoverFromFailure ( isZero ) ) { return null ; }
Distance : 7

144
Tree	if ( isZero . isChromePassEnabled ( CHAR_CONS ) ) { return false ; }
Code	if ( isZero . isChromePassEnabled ( CHAR_CONS ) ) { return false ; }
Distance : 7

145
Tree	if ( isZero . getKey ( CHAR_CONS ) ) { return false ; }
Code	if ( isZero . getKey ( CHAR_CONS ) ) { return false ; }
Distance : 7

146
Tree	if ( isZero . ofThisVm ( CHAR_CONS ) ) { return false ; }
Code	if ( isZero . ofThisVm ( CHAR_CONS ) ) { return false ; }
Distance : 7

147
Tree	if ( divisor.isZero . isAliasDefinition ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . isAliasDefinition ( divisor.isZero ) ) { return null ; }
Distance : 6

148
Tree	if ( divisor.isZero . options.removeUnusedLocalVars ( divisor.isZero ) ) { return false ; }
Code	if ( divisor.isZero . options.removeUnusedLocalVars ( divisor.isZero ) ) { return false ; }
Distance : 6

149
Tree	if ( divisor.isZero . astValidationEnabled ( divisor.isZero ) ) { return false ; }
Code	if ( divisor.isZero . astValidationEnabled ( divisor.isZero ) ) { return false ; }
Distance : 6

150
Tree	if ( divisor.isZero . options.removeUnusedLocalVars ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . options.removeUnusedLocalVars ( divisor.isZero ) ) { return null ; }
Distance : 6

151
Tree	if ( divisor.isZero . isAliasDefinition ( CHAR_CONS ) ) { return false ; }
Code	if ( divisor.isZero . isAliasDefinition ( CHAR_CONS ) ) { return false ; }
Distance : 6

152
Tree	if ( divisor.isZero . isTypeCompatible ( divisor.isZero ) ) { return false ; }
Code	if ( divisor.isZero . isTypeCompatible ( divisor.isZero ) ) { return false ; }
Distance : 6

153
Tree	if ( divisor.isZero . runMode ( divisor.isZero ) ) { return false ; }
Code	if ( divisor.isZero . runMode ( divisor.isZero ) ) { return false ; }
Distance : 6

154
Tree	if ( isZero . getInstrumentForCoverageOnly ( CHAR_CONS ) ) { return false ; }
Code	if ( isZero . getInstrumentForCoverageOnly ( CHAR_CONS ) ) { return false ; }
Distance : 7

155
Tree	if ( divisor.isZero . astValidationEnabled ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . astValidationEnabled ( divisor.isZero ) ) { return null ; }
Distance : 6

156
Tree	if ( NaN . isAliasDefinition ( CHAR_CONS ) ) { return false ; }
Code	if ( NaN . isAliasDefinition ( CHAR_CONS ) ) { return false ; }
Distance : 7

157
Tree	if ( divisor.isZero . getCountry ( divisor.isZero ) ) { return false ; }
Code	if ( divisor.isZero . getCountry ( divisor.isZero ) ) { return false ; }
Distance : 6

158
Tree	if ( this . isZero . getConstructor () ) { return null ; }
Code	if ( this . isZero . getConstructor () ) { return null ; }
Distance : 7

159
Tree	if ( this . isZero . get () ) { return null ; }
Code	if ( this . isZero . get () ) { return null ; }
Distance : 7

160
Tree	if ( this . isZero . getObjectType () ) { return null ; }
Code	if ( this . isZero . getObjectType () ) { return null ; }
Distance : 7

161
Tree	if ( this . NaN . equals () ) { return false ; }
Code	if ( this . NaN . equals () ) { return false ; }
Distance : 7

162
Tree	if ( isZero . shouldExtract ( CHAR_CONS ) ) { return false ; }
Code	if ( isZero . shouldExtract ( CHAR_CONS ) ) { return false ; }
Distance : 7

163
Tree	if ( this . isZero . isString () ) { return false ; }
Code	if ( this . isZero . isString () ) { return false ; }
Distance : 7

164
Tree	if ( this . isZero . getConstructor () ) { return false ; }
Code	if ( this . isZero . getConstructor () ) { return false ; }
Distance : 7

165
Tree	if ( this . isZero . get () ) { return false ; }
Code	if ( this . isZero . get () ) { return false ; }
Distance : 7

166
Tree	if ( this . isZero . containsKey () ) { return null ; }
Code	if ( this . isZero . containsKey () ) { return null ; }
Distance : 7

167
Tree	if ( divisor.isZero . isPrimitiveWrapper ( divisor.isZero ) ) { return false ; }
Code	if ( divisor.isZero . isPrimitiveWrapper ( divisor.isZero ) ) { return false ; }
Distance : 6

168
Tree	if ( this . isZero . getObjectType () ) { return false ; }
Code	if ( this . isZero . getObjectType () ) { return false ; }
Distance : 7

169
Tree	if ( isZero . isAliasDefinition ( CHAR_CONS ) ) { return false ; }
Code	if ( isZero . isAliasDefinition ( CHAR_CONS ) ) { return false ; }
Distance : 7

170
Tree	if ( divisor.isZero . isAliasDefinition ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( divisor.isZero . isAliasDefinition ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 9

171
Tree	if ( divisor.isZero . options.removeUnusedLocalVars ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( divisor.isZero . options.removeUnusedLocalVars ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 9

172
Tree	if ( divisor.isZero . astValidationEnabled ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( divisor.isZero . astValidationEnabled ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 9

173
Tree	if ( divisor.isZero . isAliasDefinition ( return ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( divisor.isZero . isAliasDefinition ( return ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 9

174
Tree	if ( divisor.isZero . isAliasDefinition ( NaN ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( divisor.isZero . isAliasDefinition ( NaN ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 9

175
Tree	if ( divisor.isZero . isTypeCompatible ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( divisor.isZero . isTypeCompatible ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 9

176
Tree	if ( divisor.isZero . runMode ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( divisor.isZero . runMode ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 9

177
Tree	if ( divisor.isZero . getCountry ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( divisor.isZero . getCountry ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 9

178
Tree	if ( divisor.isZero . isPrimitiveWrapper ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( divisor.isZero . isPrimitiveWrapper ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 9

179
Tree	if ( divisor.isZero . containsAny ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( divisor.isZero . containsAny ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 9

180
Tree	if ( divisor.isZero . isAliasDefinition ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isAliasDefinition ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

181
Tree	if ( divisor.isZero . options.removeUnusedLocalVars ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . options.removeUnusedLocalVars ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

182
Tree	if ( divisor.isZero . astValidationEnabled ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . astValidationEnabled ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

183
Tree	if ( divisor.isZero . isAliasDefinition ( ) ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isAliasDefinition ( ) ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

184
Tree	if ( divisor.isZero . isAliasDefinition ( NaN ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isAliasDefinition ( NaN ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

185
Tree	if ( divisor.isZero . isTypeCompatible ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isTypeCompatible ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

186
Tree	if ( divisor.isZero . runMode ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . runMode ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

187
Tree	if ( divisor.isZero . getCountry ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . getCountry ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

188
Tree	if ( divisor.isZero . isPrimitiveWrapper ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isPrimitiveWrapper ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

189
Tree	if ( divisor.isZero . containsAny ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . containsAny ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

190
Tree	if ( STRING_CONSTANT . astValidationEnabled ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( STRING_CONSTANT . astValidationEnabled ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 10

191
Tree	if ( STRING_CONSTANT . isAliasDefinition ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( STRING_CONSTANT . isAliasDefinition ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 10

192
Tree	if ( STRING_CONSTANT . getRhs ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( STRING_CONSTANT . getRhs ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 10

193
Tree	if ( STRING_CONSTANT . isTypeCompatible ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( STRING_CONSTANT . isTypeCompatible ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 10

194
Tree	if ( STRING_CONSTANT . hasNode ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( STRING_CONSTANT . hasNode ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 10

195
Tree	if ( STRING_CONSTANT . shouldRunRemoveUnusedCode ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( STRING_CONSTANT . shouldRunRemoveUnusedCode ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 10

196
Tree	if ( STRING_CONSTANT . containsAny ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( STRING_CONSTANT . containsAny ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 10

197
Tree	if ( STRING_CONSTANT . isPrimitiveWrapper ( isZero ) ) { return NaN ? NaN : ( ; }
Code	if ( STRING_CONSTANT . isPrimitiveWrapper ( isZero ) ) { return NaN ? NaN : ( ; }
Distance : 10

198
Tree	if ( STRING_CONSTANT . isEquivalentWithSideEffectsToShallow ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( STRING_CONSTANT . isEquivalentWithSideEffectsToShallow ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 10

199
Tree	if ( STRING_CONSTANT . canRecoverFromFailure ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( STRING_CONSTANT . canRecoverFromFailure ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 10

========================================================================


========================================================================
Example Number: 70
Parent Code is: 
{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( populationLimit ) ; setElitismRate ( elitismRate ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=elitismRate})) (204{val==}) (800{val=elitismRate})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (32 (802{val=setElitismRate}) (214{val=(}) (800{val=elitismRate}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/35/parent/src_main_java_org_apache_commons_math3_genetics_ElitisticListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; if }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; if }
Distance : 10

1
Tree	{ ; } MathRuntimeException
Code	{ ; } MathRuntimeException
Distance : 10

2
Tree	{ this . populationLimit = super ( populationLimit ) ; } toString
Code	{ this . populationLimit = super ( populationLimit ) ; } toString
Distance : 7

3
Tree	{ ; } [
Code	{ ; } [
Distance : 10

4
Tree	{ ; } mock
Code	{ ; } mock
Distance : 10

5
Tree	{ super(); this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ super(); this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 9

6
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [ NUMBER_CONSTANT ] ; }
Distance : 8

7
Tree	{ this ( elitismRate , ( populationLimit ) return; ) ; }
Code	{ this ( elitismRate , ( populationLimit ) return; ) ; }
Distance : 7

8
Tree	{ super ( populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

9
Tree	{ super ( populationLimit ) ; this . elitismRate = populationLimit ; }
Code	{ super ( populationLimit ) ; this . elitismRate = populationLimit ; }
Distance : 4

10
Tree	{ super ( elitismRate ) ; this . populationLimit = populationLimit ; }
Code	{ super ( elitismRate ) ; this . populationLimit = populationLimit ; }
Distance : 6

11
Tree	{ super ( populationLimit ) ; this . populationLimit = populationLimit . elitismRate () ; }
Code	{ super ( populationLimit ) ; this . populationLimit = populationLimit . elitismRate () ; }
Distance : 7

12
Tree	{ super ( populationLimit ) ; this . elitismRate = new short [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new short [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

13
Tree	{ this ( populationLimit , ( populationLimit ) return; ) ; }
Code	{ this ( populationLimit , ( populationLimit ) return; ) ; }
Distance : 6

14
Tree	{ super ( populationLimit ) ; this . elitismRate = new boolean [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new boolean [] { populationLimit } ; }
Distance : 9

15
Tree	{ super ( populationLimit ) ; this . elitismRate = new float [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new float [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

16
Tree	{ super(); this . elitismRate = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ super(); this . elitismRate = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 10

17
Tree	{ continue; this . populationLimit = elitismRate ; this . populationLimit = elitismRate ; }
Code	{ continue; this . populationLimit = elitismRate ; this . populationLimit = elitismRate ; }
Distance : 10

18
Tree	{ super ( populationLimit ) ; this . populationLimit = populationLimit ; }
Code	{ super ( populationLimit ) ; this . populationLimit = populationLimit ; }
Distance : 5

19
Tree	{ this . populationLimit = this ( elitismRate ) ; }
Code	{ this . populationLimit = this ( elitismRate ) ; }
Distance : 5

20
Tree	{ this . elitismRate = this ( populationLimit ) ; }
Code	{ this . elitismRate = this ( populationLimit ) ; }
Distance : 7

21
Tree	{ super ( elitismRate , populationLimit ) ; }
Code	{ super ( elitismRate , populationLimit ) ; }
Distance : 6

22
Tree	{ ; } notifyListeners
Code	{ ; } notifyListeners
Distance : 10

23
Tree	{ super ( populationLimit ) ; } ParamChecks
Code	{ super ( populationLimit ) ; } ParamChecks
Distance : 6

24
Tree	{ this . populationLimit = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ this . populationLimit = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 8

25
Tree	{ super ( populationLimit ) ; this . elitismRate = new GeneratorFunctionsTranspiler [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new GeneratorFunctionsTranspiler [] { elitismRate } ; }
Distance : 9

26
Tree	{ super ( populationLimit ) ; this . elitismRate = new void [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new void [] { populationLimit } ; }
Distance : 9

27
Tree	{ break; this . populationLimit = this ( populationLimit ) ; super }
Code	{ break; this . populationLimit = this ( populationLimit ) ; super }
Distance : 8

28
Tree	{ super ( populationLimit ) ; this . elitismRate = new GeneralPath [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new GeneralPath [] { elitismRate } ; }
Distance : 9

29
Tree	{ super ( populationLimit ) ; this . elitismRate = new Localized [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new Localized [] { elitismRate } ; }
Distance : 9

30
Tree	{ super ( populationLimit ) ; this . elitismRate = new IdentityPreconditioner [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new IdentityPreconditioner [] { elitismRate } ; }
Distance : 9

31
Tree	{ super ( populationLimit ) ; this . elitismRate = new char [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new char [] { populationLimit } ; }
Distance : 9

32
Tree	{ this . populationLimit = elitismRate ; this . populationLimit = elitismRate ; }
Code	{ this . populationLimit = elitismRate ; this . populationLimit = elitismRate ; }
Distance : 9

33
Tree	{ this . populationLimit = elitismRate ; } source
Code	{ this . populationLimit = elitismRate ; } source
Distance : 8

34
Tree	{ super ( populationLimit ) ; this . elitismRate = new Coordinates3D [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new Coordinates3D [] { elitismRate } ; }
Distance : 9

35
Tree	{ return; this . populationLimit = this ( populationLimit ) ; super }
Code	{ return; this . populationLimit = this ( populationLimit ) ; super }
Distance : 8

36
Tree	{ super(); this . populationLimit = elitismRate ; this . populationLimit = elitismRate ; }
Code	{ super(); this . populationLimit = elitismRate ; this . populationLimit = elitismRate ; }
Distance : 10

37
Tree	{ super ( populationLimit ) ; this . elitismRate = new CachingTranspiler [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new CachingTranspiler [] { elitismRate } ; }
Distance : 9

38
Tree	{ super ( populationLimit ) ; this . elitismRate = new HashSet [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new HashSet [] { elitismRate } ; }
Distance : 9

39
Tree	{ this . populationLimit = elitismRate ; } toString
Code	{ this . populationLimit = elitismRate ; } toString
Distance : 8

40
Tree	{ super ( populationLimit ) ; } Preconditions
Code	{ super ( populationLimit ) ; } Preconditions
Distance : 6

41
Tree	{ super ( populationLimit ) ; } Class
Code	{ super ( populationLimit ) ; } Class
Distance : 6

42
Tree	{ super ( populationLimit ) ; } -
Code	{ super ( populationLimit ) ; } -
Distance : 6

43
Tree	{ super ( populationLimit ) ; } Test
Code	{ super ( populationLimit ) ; } Test
Distance : 6

44
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate . elitismRate () ; }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate . elitismRate () ; }
Distance : 7

45
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 4

46
Tree	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [ NUMBER_CONSTANT ] ; }
Distance : 8

47
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; static }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; static }
Distance : 10

48
Tree	{ super ( elitismRate ) ; this . populationLimit = elitismRate . elitismRate () ; }
Code	{ super ( elitismRate ) ; this . populationLimit = elitismRate . elitismRate () ; }
Distance : 8

49
Tree	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [ NUMBER_CONSTANT ] ; }
Distance : 8

50
Tree	{ null this . populationLimit = this ( populationLimit ) ; super }
Code	{ null this . populationLimit = this ( populationLimit ) ; super }
Distance : 8

51
Tree	{ super ( populationLimit ) ; this . populationLimit = new double [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . populationLimit = new double [] { populationLimit } ; }
Distance : 10

52
Tree	{ super ( populationLimit ) ; this . elitismRate = new char [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new char [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

53
Tree	{ super(); this . populationLimit = this ( populationLimit ) ; super }
Code	{ super(); this . populationLimit = this ( populationLimit ) ; super }
Distance : 8

54
Tree	{ continue; this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ continue; this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 14

55
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; assertFalse }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; assertFalse }
Distance : 10

56
Tree	{ super ( elitismRate ) ; this . elitismRate = populationLimit . } () ; }
Code	{ super ( elitismRate ) ; this . elitismRate = populationLimit . } () ; }
Distance : 8

57
Tree	{ this . populationLimit = this ( populationLimit ) ; }
Code	{ this . populationLimit = this ( populationLimit ) ; }
Distance : 6

58
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] {} ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] {} ; super }
Distance : 8

59
Tree	{ super ( elitismRate ) ; this . populationLimit = populationLimit . ( () ; }
Code	{ super ( elitismRate ) ; this . populationLimit = populationLimit . ( () ; }
Distance : 9

60
Tree	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new int [] { populationLimit } ; }
Code	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new int [] { populationLimit } ; }
Distance : 14

61
Tree	{ super ( populationLimit ) ; this . elitismRate = new GeneralPath [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new GeneralPath [ NUMBER_CONSTANT ] ; }
Distance : 8

62
Tree	{ this . populationLimit = super ( populationLimit ) ; } &&
Code	{ this . populationLimit = super ( populationLimit ) ; } &&
Distance : 7

63
Tree	{ super ( elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 5

64
Tree	{ default: this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ default: this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 9

65
Tree	{ this . populationLimit = elitismRate ; } options
Code	{ this . populationLimit = elitismRate ; } options
Distance : 8

66
Tree	{ super ( populationLimit ) ; this . elitismRate = new CachingTranspiler [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new CachingTranspiler [ NUMBER_CONSTANT ] ; }
Distance : 8

67
Tree	{ super ( populationLimit , populationLimit ) ; }
Code	{ super ( populationLimit , populationLimit ) ; }
Distance : 5

68
Tree	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] extends ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] extends ; super }
Distance : 8

69
Tree	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] <> ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] <> ; super }
Distance : 8

70
Tree	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] {} ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] {} ; super }
Distance : 8

71
Tree	{ super ( populationLimit ) ; this . elitismRate = new void [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new void [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

72
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; synchronized }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; synchronized }
Distance : 10

73
Tree	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new byte [] { populationLimit } ; }
Code	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new byte [] { populationLimit } ; }
Distance : 14

74
Tree	{ this ( populationLimit , false ) ; } toString
Code	{ this ( populationLimit , false ) ; } toString
Distance : 7

75
Tree	{ super ( populationLimit ) ; this . elitismRate = new byte [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new byte [] { populationLimit } ; }
Distance : 9

76
Tree	{ super ( populationLimit , elitismRate ) ; }
Code	{ super ( populationLimit , elitismRate ) ; }
Distance : 4

77
Tree	{ this ( populationLimit , false ) ; }
Code	{ this ( populationLimit , false ) ; }
Distance : 6

78
Tree	{ ; }
Code	{ ; }
Distance : 9

79
Tree	{ super ( populationLimit ) ; }
Code	{ super ( populationLimit ) ; }
Distance : 5

80
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 9

81
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; reportMatcher }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; reportMatcher }
Distance : 10

82
Tree	{ super ( populationLimit , elitismRate ) ; } &&
Code	{ super ( populationLimit , elitismRate ) ; } &&
Distance : 5

83
Tree	{ this ( populationLimit , ( populationLimit ) null ) ; }
Code	{ this ( populationLimit , ( populationLimit ) null ) ; }
Distance : 6

84
Tree	{ this . populationLimit = elitismRate ; }
Code	{ this . populationLimit = elitismRate ; }
Distance : 7

85
Tree	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new short [] { populationLimit } ; }
Code	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new short [] { populationLimit } ; }
Distance : 14

86
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; fireAnnotationChanged }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; fireAnnotationChanged }
Distance : 10

87
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

88
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; else }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; else }
Distance : 10

89
Tree	{ super ( populationLimit , elitismRate ) ; } p
Code	{ super ( populationLimit , elitismRate ) ; } p
Distance : 5

90
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; private }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; private }
Distance : 10

91
Tree	{ this ( populationLimit , true ) ; }
Code	{ this ( populationLimit , true ) ; }
Distance : 6

92
Tree	{ super ( populationLimit ) ; this . elitismRate = new long [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new long [] { populationLimit } ; }
Distance : 9

93
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] {} ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] {} ; }
Distance : 7

94
Tree	{ super ( populationLimit , elitismRate ) ; } T
Code	{ super ( populationLimit , elitismRate ) ; } T
Distance : 5

95
Tree	{ super ( elitismRate , elitismRate ) ; }
Code	{ super ( elitismRate , elitismRate ) ; }
Distance : 5

96
Tree	{ super ( populationLimit ) ; this . elitismRate = new long [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new long [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

97
Tree	{ super ( populationLimit ) ; this . elitismRate = new Coordinates3D [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new Coordinates3D [ NUMBER_CONSTANT ] ; }
Distance : 8

98
Tree	{ super ( populationLimit ) ; this . elitismRate = new short [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new short [] { populationLimit } ; }
Distance : 9

99
Tree	{ super ( populationLimit ) ; this . elitismRate = new Localized [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new Localized [ NUMBER_CONSTANT ] ; }
Distance : 8

100
Tree	{ super ( elitismRate ) ; this . populationLimit = elitismRate ; }
Code	{ super ( elitismRate ) ; this . populationLimit = elitismRate ; }
Distance : 6

101
Tree	{ this ( populationLimit , ( populationLimit ) super(); ) ; }
Code	{ this ( populationLimit , ( populationLimit ) super(); ) ; }
Distance : 6

102
Tree	{ super ( elitismRate ) ; }
Code	{ super ( elitismRate ) ; }
Distance : 5

103
Tree	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] { elitismRate } ; }
Distance : 9

104
Tree	{ super ( populationLimit ) ; this . elitismRate = new boolean [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new boolean [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

105
Tree	{ this ( populationLimit , ( elitismRate ) null ) ; }
Code	{ this ( populationLimit , ( elitismRate ) null ) ; }
Distance : 6

106
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] <> ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] <> ; super }
Distance : 8

107
Tree	{ super ( populationLimit ) ; this . elitismRate = populationLimit . elitismRate () ; }
Code	{ super ( populationLimit ) ; this . elitismRate = populationLimit . elitismRate () ; }
Distance : 7

108
Tree	{ super ( populationLimit ) ; this . populationLimit = elitismRate . } () ; }
Code	{ super ( populationLimit ) ; this . populationLimit = elitismRate . } () ; }
Distance : 7

109
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; checkNotNull }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; checkNotNull }
Distance : 10

110
Tree	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new char [] { populationLimit } ; }
Code	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new char [] { populationLimit } ; }
Distance : 14

111
Tree	{ return; this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ return; this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 14

112
Tree	{ continue; this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ continue; this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 9

113
Tree	{ this . populationLimit = elitismRate ; this . populationLimit = populationLimit ; }
Code	{ this . populationLimit = elitismRate ; this . populationLimit = populationLimit ; }
Distance : 9

114
Tree	{ this . populationLimit = elitismRate ; } p
Code	{ this . populationLimit = elitismRate ; } p
Distance : 8

115
Tree	{ super(); this . populationLimit = this ( populationLimit ) ; getContext }
Code	{ super(); this . populationLimit = this ( populationLimit ) ; getContext }
Distance : 8

116
Tree	{ break; this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ break; this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 14

117
Tree	{ super ( populationLimit ) ; this . elitismRate = new int [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new int [] { populationLimit } ; }
Distance : 9

118
Tree	{ super ( elitismRate ) ; this . elitismRate = populationLimit ; }
Code	{ super ( elitismRate ) ; this . elitismRate = populationLimit ; }
Distance : 5

119
Tree	{ this . populationLimit = super ( populationLimit ) ; } T
Code	{ this . populationLimit = super ( populationLimit ) ; } T
Distance : 7

120
Tree	{ this ( populationLimit , false ) ; } source
Code	{ this ( populationLimit , false ) ; } source
Distance : 7

121
Tree	{ super ( elitismRate ) ; this . elitismRate = elitismRate . elitismRate () ; }
Code	{ super ( elitismRate ) ; this . elitismRate = elitismRate . elitismRate () ; }
Distance : 8

122
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } wanted
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } wanted
Distance : 5

123
Tree	{ null this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ null this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 14

124
Tree	{ this . elitismRate = elitismRate ; this . populationLimit = elitismRate ; }
Code	{ this . elitismRate = elitismRate ; this . populationLimit = elitismRate ; }
Distance : 10

125
Tree	{ this . populationLimit = elitismRate ; } &&
Code	{ this . populationLimit = elitismRate ; } &&
Distance : 8

126
Tree	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] {} ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] {} ; super }
Distance : 8

127
Tree	{ this . populationLimit = populationLimit ; this . populationLimit = elitismRate ; }
Code	{ this . populationLimit = populationLimit ; this . populationLimit = elitismRate ; }
Distance : 9

128
Tree	{ this . elitismRate = elitismRate ; this . elitismRate = populationLimit ; }
Code	{ this . elitismRate = elitismRate ; this . elitismRate = populationLimit ; }
Distance : 9

129
Tree	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] { elitismRate } ; }
Distance : 9

130
Tree	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new float [] { populationLimit } ; }
Code	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new float [] { populationLimit } ; }
Distance : 14

131
Tree	{ super(); this . populationLimit = this ( populationLimit ) ; disableTypeCheck }
Code	{ super(); this . populationLimit = this ( populationLimit ) ; disableTypeCheck }
Distance : 8

132
Tree	{ super(); this . populationLimit = this ( populationLimit ) ; enableTypeCheck }
Code	{ super(); this . populationLimit = this ( populationLimit ) ; enableTypeCheck }
Distance : 8

133
Tree	{ super(); this . populationLimit = this ( populationLimit ) ; addMessage }
Code	{ super(); this . populationLimit = this ( populationLimit ) ; addMessage }
Distance : 8

134
Tree	{ super(); this . populationLimit = this ( populationLimit ) ; this }
Code	{ super(); this . populationLimit = this ( populationLimit ) ; this }
Distance : 8

135
Tree	{ super ( populationLimit ) ; } f
Code	{ super ( populationLimit ) ; } f
Distance : 6

136
Tree	{ this ( populationLimit , ( populationLimit ) default: ) ; }
Code	{ this ( populationLimit , ( populationLimit ) default: ) ; }
Distance : 6

137
Tree	{ this ( elitismRate , true ) ; }
Code	{ this ( elitismRate , true ) ; }
Distance : 7

138
Tree	{ this . populationLimit = elitismRate ; this . elitismRate = populationLimit ; }
Code	{ this . populationLimit = elitismRate ; this . elitismRate = populationLimit ; }
Distance : 8

139
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate . ; () ; } wanted
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate . ; () ; } wanted
Distance : 8

140
Tree	{ super(); this . populationLimit = elitismRate ; this . elitismRate = populationLimit ; }
Code	{ super(); this . populationLimit = elitismRate ; this . elitismRate = populationLimit ; }
Distance : 9

141
Tree	{ this . elitismRate = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ this . elitismRate = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 9

142
Tree	{ this . populationLimit = elitismRate ; } T
Code	{ this . populationLimit = elitismRate ; } T
Distance : 8

143
Tree	{ super ( populationLimit ) ; } {}
Code	{ super ( populationLimit ) ; } {}
Distance : 6

144
Tree	{ this ( populationLimit , ( populationLimit ) continue; ) ; }
Code	{ this ( populationLimit , ( populationLimit ) continue; ) ; }
Distance : 6

145
Tree	{ this ( elitismRate , ( populationLimit ) null ) ; }
Code	{ this ( elitismRate , ( populationLimit ) null ) ; }
Distance : 7

146
Tree	{ this ( populationLimit , ( populationLimit ) break; ) ; }
Code	{ this ( populationLimit , ( populationLimit ) break; ) ; }
Distance : 6

147
Tree	{ this . elitismRate = elitismRate ; }
Code	{ this . elitismRate = elitismRate ; }
Distance : 8

148
Tree	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] {} ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] {} ; }
Distance : 7

149
Tree	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] {} ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] {} ; }
Distance : 7

150
Tree	{ this ( populationLimit , ( elitismRate ) return; ) ; }
Code	{ this ( populationLimit , ( elitismRate ) return; ) ; }
Distance : 6

151
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] <> ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] <> ; }
Distance : 7

152
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] extends ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] extends ; }
Distance : 7

153
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] [] ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] [] ; super }
Distance : 8

154
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] [] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] [] ; }
Distance : 7

155
Tree	{ super ( populationLimit ) ; this . elitismRate = new float [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new float [] { populationLimit } ; }
Distance : 9

156
Tree	{ this . populationLimit = populationLimit ; this . elitismRate = populationLimit ; }
Code	{ this . populationLimit = populationLimit ; this . elitismRate = populationLimit ; }
Distance : 8

157
Tree	{ super ( populationLimit ) ; this . populationLimit = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . populationLimit = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

158
Tree	{ this ( populationLimit , false ) ; } T
Code	{ this ( populationLimit , false ) ; } T
Distance : 7

159
Tree	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] <> ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] <> ; }
Distance : 7

160
Tree	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 14

161
Tree	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] [] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] [] ; }
Distance : 7

162
Tree	{ this . populationLimit = populationLimit ; }
Code	{ this . populationLimit = populationLimit ; }
Distance : 8

163
Tree	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] extends ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] extends ; }
Distance : 7

164
Tree	{ super ( populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

165
Tree	{ this ( populationLimit , false ) ; } &&
Code	{ this ( populationLimit , false ) ; } &&
Distance : 7

166
Tree	{ super ( populationLimit ) ; this . elitismRate = new HashSet [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new HashSet [ NUMBER_CONSTANT ] ; }
Distance : 8

167
Tree	{ this ( populationLimit , false ) ; } p
Code	{ this ( populationLimit , false ) ; } p
Distance : 7

168
Tree	{ super ( populationLimit ) ; this . elitismRate = new GeneralPath [] {} ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new GeneralPath [] {} ; }
Distance : 7

169
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] extends ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] extends ; super }
Distance : 8

170
Tree	{ super ( populationLimit ) ; this . populationLimit = elitismRate ; }
Code	{ super ( populationLimit ) ; this . populationLimit = elitismRate ; }
Distance : 5

171
Tree	{ super ( populationLimit ) ; this . elitismRate = new Sin [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new Sin [ NUMBER_CONSTANT ] ; }
Distance : 8

172
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; super }
Distance : 10

173
Tree	{ continue; this . populationLimit = this ( populationLimit ) ; super }
Code	{ continue; this . populationLimit = this ( populationLimit ) ; super }
Distance : 8

174
Tree	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] <> ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] <> ; super }
Distance : 8

175
Tree	{ return; this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ return; this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 9

176
Tree	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] [] ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] [] ; super }
Distance : 8

177
Tree	{ super ( populationLimit , elitismRate ) ; } options
Code	{ super ( populationLimit , elitismRate ) ; } options
Distance : 5

178
Tree	{ break; this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ break; this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 9

179
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { elitismRate } ; }
Distance : 9

180
Tree	{ null this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ null this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 9

181
Tree	{ super ( populationLimit , elitismRate ) ; } source
Code	{ super ( populationLimit , elitismRate ) ; } source
Distance : 5

182
Tree	{ ; } class
Code	{ ; } class
Distance : 10

183
Tree	{ ; } f
Code	{ ; } f
Distance : 10

184
Tree	{ this . populationLimit = this ( populationLimit ) ; } options
Code	{ this . populationLimit = this ( populationLimit ) ; } options
Distance : 7

185
Tree	{ this . populationLimit = super ( populationLimit ) ; } p
Code	{ this . populationLimit = super ( populationLimit ) ; } p
Distance : 7

186
Tree	{ ; } Override
Code	{ ; } Override
Distance : 10

187
Tree	{ super ( populationLimit , elitismRate ) ; } toString
Code	{ super ( populationLimit , elitismRate ) ; } toString
Distance : 5

188
Tree	{ this . populationLimit = super ( populationLimit ) ; } source
Code	{ this . populationLimit = super ( populationLimit ) ; } source
Distance : 7

189
Tree	{ ; } -
Code	{ ; } -
Distance : 10

190
Tree	{ this ( populationLimit , false ) ; } options
Code	{ this ( populationLimit , false ) ; } options
Distance : 7

191
Tree	{ ; } array
Code	{ ; } array
Distance : 10

192
Tree	{ this . elitismRate = this ( elitismRate ) ; }
Code	{ this . elitismRate = this ( elitismRate ) ; }
Distance : 6

193
Tree	{ this ( elitismRate , false ) ; }
Code	{ this ( elitismRate , false ) ; }
Distance : 7

194
Tree	{ super ( populationLimit ) ; this . elitismRate = new IdentityPreconditioner [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new IdentityPreconditioner [ NUMBER_CONSTANT ] ; }
Distance : 8

195
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate . elitismRate () ; } Math
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate . elitismRate () ; } Math
Distance : 8

196
Tree	{ this . elitismRate = populationLimit ; }
Code	{ this . elitismRate = populationLimit ; }
Distance : 9

197
Tree	{ this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 8

198
Tree	{ super ( populationLimit ) ; } MathRuntimeException
Code	{ super ( populationLimit ) ; } MathRuntimeException
Distance : 6

199
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } Math
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } Math
Distance : 5

========================================================================


========================================================================
Example Number: 71
Parent Code is: 
{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( chromosomes , populationLimit ) ; setElitismRate ( elitismRate ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=chromosomes}) (234{val=,}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=elitismRate})) (204{val==}) (800{val=elitismRate})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=chromosomes}) (234{val=,}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (32 (802{val=setElitismRate}) (214{val=(}) (800{val=elitismRate}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/35/parent/src_main_java_org_apache_commons_math3_genetics_ElitisticListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ this ( elitismRate , false ) ; }
Code	{ this ( elitismRate , false ) ; }
Distance : 8

1
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new long [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new long [] { chromosomes } ; }
Distance : 9

2
Tree	{ this . populationLimit = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ this . populationLimit = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 9

3
Tree	{ super ( elitismRate , elitismRate ) ; }
Code	{ super ( elitismRate , elitismRate ) ; }
Distance : 6

4
Tree	{ this . chromosomes = populationLimit ; this . elitismRate = populationLimit ; }
Code	{ this . chromosomes = populationLimit ; this . elitismRate = populationLimit ; }
Distance : 8

5
Tree	{ super ( chromosomes , populationLimit , populationLimit ) ; this . elitismRate = new byte [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , populationLimit ) ; this . elitismRate = new byte [] { chromosomes } ; }
Distance : 11

6
Tree	{ super ( chromosomes , populationLimit , populationLimit ) ; this . elitismRate = new short [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , populationLimit ) ; this . elitismRate = new short [] { chromosomes } ; }
Distance : 11

7
Tree	{ this ( chromosomes , elitismRate , false ) ; }
Code	{ this ( chromosomes , elitismRate , false ) ; }
Distance : 7

8
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

9
Tree	{ super ( chromosomes ) ; this . elitismRate = new short [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new short [] { chromosomes } ; }
Distance : 11

10
Tree	{ super ( chromosomes ) ; this . elitismRate = new byte [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new byte [] { chromosomes } ; }
Distance : 11

11
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

12
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 15

13
Tree	{ this ( chromosomes , ( populationLimit ) super(); ) ; }
Code	{ this ( chromosomes , ( populationLimit ) super(); ) ; }
Distance : 6

14
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new float [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new float [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

15
Tree	{ super ( chromosomes , chromosomes ) ; }
Code	{ super ( chromosomes , chromosomes ) ; }
Distance : 6

16
Tree	{ super ( chromosomes ) ; this . elitismRate = new float [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new float [] { chromosomes } ; }
Distance : 11

17
Tree	{ super ( chromosomes ) ; this . elitismRate = new void [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new void [] { chromosomes } ; }
Distance : 11

18
Tree	{ super ( elitismRate , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( elitismRate , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 5

19
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; fireChangeEvent }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; fireChangeEvent }
Distance : 10

20
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; StringBuffer }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; StringBuffer }
Distance : 10

21
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 15

22
Tree	{ this . chromosomes = populationLimit ; this . populationLimit = elitismRate ; }
Code	{ this . chromosomes = populationLimit ; this . populationLimit = elitismRate ; }
Distance : 9

23
Tree	{ this ( chromosomes , chromosomes , false ) ; }
Code	{ this ( chromosomes , chromosomes , false ) ; }
Distance : 7

24
Tree	{ super ( chromosomes ) ; this . elitismRate = new long [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new long [] { chromosomes } ; }
Distance : 11

25
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new DefaultTransformer [] <> ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new DefaultTransformer [] <> ; }
Distance : 7

26
Tree	{ super ( dialBackgroundPaint , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( dialBackgroundPaint , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 5

27
Tree	{ this ( chromosomes , populationLimit , true ) ; }
Code	{ this ( chromosomes , populationLimit , true ) ; }
Distance : 6

28
Tree	{ this . chromosomes = chromosomes ; }
Code	{ this . chromosomes = chromosomes ; }
Distance : 10

29
Tree	{ this ( elitismRate , populationLimit , true ) ; }
Code	{ this ( elitismRate , populationLimit , true ) ; }
Distance : 7

30
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new ArrayDeque [] <> ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new ArrayDeque [] <> ; }
Distance : 7

31
Tree	{ this ( elitismRate , ( populationLimit ) null ) ; }
Code	{ this ( elitismRate , ( populationLimit ) null ) ; }
Distance : 7

32
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = populationLimit ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = populationLimit ; }
Distance : 4

33
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new DefaultTransformer [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new DefaultTransformer [ NUMBER_CONSTANT ] ; }
Distance : 8

34
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new long [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new long [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 15

35
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new char [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new char [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

36
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new HashSet [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new HashSet [ NUMBER_CONSTANT ] ; }
Distance : 8

37
Tree	{ this . chromosomes = elitismRate ; }
Code	{ this . chromosomes = elitismRate ; }
Distance : 9

38
Tree	{ this ( chromosomes , ( populationLimit ) continue; ) ; }
Code	{ this ( chromosomes , ( populationLimit ) continue; ) ; }
Distance : 6

39
Tree	{ this ( elitismRate , populationLimit , false ) ; }
Code	{ this ( elitismRate , populationLimit , false ) ; }
Distance : 7

40
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] <> ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] <> ; }
Distance : 7

41
Tree	{ this ( populationLimit , true ) ; }
Code	{ this ( populationLimit , true ) ; }
Distance : 8

42
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Localized [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Localized [ NUMBER_CONSTANT ] ; }
Distance : 8

43
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new float [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new float [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 15

44
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new char [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new char [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 15

45
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { chromosomes } ; }
Distance : 9

46
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 4

47
Tree	{ super ( chromosomes ) ; this . elitismRate = new char [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new char [] { chromosomes } ; }
Distance : 11

48
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; if }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; if }
Distance : 10

49
Tree	{ this . populationLimit = populationLimit ; }
Code	{ this . populationLimit = populationLimit ; }
Distance : 10

50
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new ArrayDeque [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new ArrayDeque [ NUMBER_CONSTANT ] ; }
Distance : 8

51
Tree	{ super ( CategoryLabelPosition , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( CategoryLabelPosition , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 5

52
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new char [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new char [] { chromosomes } ; }
Distance : 9

53
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new boolean [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new boolean [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

54
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [ NUMBER_CONSTANT ] ; }
Distance : 8

55
Tree	{ this ( populationLimit , ( populationLimit ) null ) ; }
Code	{ this ( populationLimit , ( populationLimit ) null ) ; }
Distance : 7

56
Tree	{ this ( ComposableFunction.SQRT , populationLimit ) ; }
Code	{ this ( ComposableFunction.SQRT , populationLimit ) ; }
Distance : 7

57
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new void [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new void [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

58
Tree	{ super ( chromosomes , populationLimit , populationLimit ) ; this . elitismRate = new float [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , populationLimit ) ; this . elitismRate = new float [] { chromosomes } ; }
Distance : 11

59
Tree	{ this ( System.in , populationLimit ) ; }
Code	{ this ( System.in , populationLimit ) ; }
Distance : 7

60
Tree	{ super ( chromosomes ) ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 11

61
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new void [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new void [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 15

62
Tree	{ this ( chromosomes , ( populationLimit ) null ) ; }
Code	{ this ( chromosomes , ( populationLimit ) null ) ; }
Distance : 6

63
Tree	{ super ( Fraction.ZERO , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( Fraction.ZERO , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 5

64
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new void [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new void [] { chromosomes } ; }
Distance : 9

65
Tree	{ this ( chromosomes , populationLimit , false ) ; }
Code	{ this ( chromosomes , populationLimit , false ) ; }
Distance : 6

66
Tree	{ this ( populationLimit , false ) ; }
Code	{ this ( populationLimit , false ) ; }
Distance : 8

67
Tree	{ super ( populationLimit , populationLimit ) ; }
Code	{ super ( populationLimit , populationLimit ) ; }
Distance : 6

68
Tree	{ super ( ComposableFunction.SQRT , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( ComposableFunction.SQRT , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 5

69
Tree	{ super ( elitismRate , populationLimit ) ; }
Code	{ super ( elitismRate , populationLimit ) ; }
Distance : 6

70
Tree	{ this ( new ThrowsException ( chromosomes ) , populationLimit ) ; }
Code	{ this ( new ThrowsException ( chromosomes ) , populationLimit ) ; }
Distance : 9

71
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

72
Tree	{ this ( elitismRate , true ) ; }
Code	{ this ( elitismRate , true ) ; }
Distance : 8

73
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 9

74
Tree	{ this ( chromosomes , ( elitismRate ) null ) ; }
Code	{ this ( chromosomes , ( elitismRate ) null ) ; }
Distance : 7

75
Tree	{ this ( chromosomes , true ) ; }
Code	{ this ( chromosomes , true ) ; }
Distance : 7

76
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = chromosomes ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = chromosomes ; }
Distance : 5

77
Tree	{ super ( chromosomes , elitismRate ) ; }
Code	{ super ( chromosomes , elitismRate ) ; }
Distance : 5

78
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = chromosomes ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = chromosomes ; }
Distance : 4

79
Tree	{ this ( chromosomes , ( chromosomes ) null ) ; }
Code	{ this ( chromosomes , ( chromosomes ) null ) ; }
Distance : 7

80
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 9

81
Tree	{ this ( new DummyLocalizable ( chromosomes ) , populationLimit ) ; }
Code	{ this ( new DummyLocalizable ( chromosomes ) , populationLimit ) ; }
Distance : 9

82
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new boolean [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new boolean [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 15

83
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; fireAnnotationChanged }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; fireAnnotationChanged }
Distance : 10

84
Tree	{ this ( populationLimit , populationLimit , false ) ; }
Code	{ this ( populationLimit , populationLimit , false ) ; }
Distance : 7

85
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; static }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; static }
Distance : 10

86
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new double [] { chromosomes } ; }
Distance : 10

87
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; char }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; char }
Distance : 10

88
Tree	{ this . chromosomes = populationLimit ; this () ; }
Code	{ this . chromosomes = populationLimit ; this () ; }
Distance : 8

89
Tree	{ this . chromosomes = chromosomes ; this . elitismRate = elitismRate ; }
Code	{ this . chromosomes = chromosomes ; this . elitismRate = elitismRate ; }
Distance : 9

90
Tree	{ this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 8

91
Tree	{ super ( chromosomes ) ; this . chromosomes = new double [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . chromosomes = new double [] { chromosomes } ; }
Distance : 12

92
Tree	{ super ( chromosomes , populationLimit , elitismRate ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , elitismRate ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 11

93
Tree	{ super ( chromosomes , populationLimit , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 11

94
Tree	{ this . chromosomes = populationLimit ; this . chromosomes = elitismRate ; }
Code	{ this . chromosomes = populationLimit ; this . chromosomes = elitismRate ; }
Distance : 9

95
Tree	{ this ( chromosomes , ( populationLimit ) break; ) ; }
Code	{ this ( chromosomes , ( populationLimit ) break; ) ; }
Distance : 6

96
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new long [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new long [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

97
Tree	{ this . elitismRate = populationLimit ; }
Code	{ this . elitismRate = populationLimit ; }
Distance : 10

98
Tree	{ super ( changeListeners , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( changeListeners , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 5

99
Tree	{ this . elitismRate = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ this . elitismRate = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 9

100
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; short }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; short }
Distance : 10

101
Tree	{ this . populationLimit = elitismRate ; this () ; }
Code	{ this . populationLimit = elitismRate ; this () ; }
Distance : 10

102
Tree	{ super ( populationLimit , elitismRate ) ; }
Code	{ super ( populationLimit , elitismRate ) ; }
Distance : 6

103
Tree	{ this . elitismRate = chromosomes ; this () ; }
Code	{ this . elitismRate = chromosomes ; this () ; }
Distance : 10

104
Tree	{ this . elitismRate = elitismRate ; this () ; }
Code	{ this . elitismRate = elitismRate ; this () ; }
Distance : 10

105
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new HashSet [] <> ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new HashSet [] <> ; }
Distance : 7

106
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new IdentityPreconditioner [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new IdentityPreconditioner [ NUMBER_CONSTANT ] ; }
Distance : 8

107
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; assertFalse }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; assertFalse }
Distance : 10

108
Tree	{ super ( dialBackgroundPaint , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( dialBackgroundPaint , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 10

109
Tree	{ this ( chromosomes , false ) ; } p
Code	{ this ( chromosomes , false ) ; } p
Distance : 8

110
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Localized [] <> ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Localized [] <> ; }
Distance : 7

111
Tree	{ super ( labelLinksVisible , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( labelLinksVisible , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 5

112
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new CachingTranspiler [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new CachingTranspiler [ NUMBER_CONSTANT ] ; }
Distance : 8

113
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = elitismRate ; }
Distance : 5

114
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 4

115
Tree	{ this ( chromosomes , false ) ; } options
Code	{ this ( chromosomes , false ) ; } options
Distance : 8

116
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { chromosomes } ; }
Distance : 9

117
Tree	{ this . chromosomes = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ this . chromosomes = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 9

118
Tree	{ super ( populationLimit , chromosomes ) ; }
Code	{ super ( populationLimit , chromosomes ) ; }
Distance : 7

119
Tree	{ super ( yTmp , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( yTmp , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 5

120
Tree	{ this ( chromosomes , false ) ; } value
Code	{ this ( chromosomes , false ) ; } value
Distance : 8

121
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 15

122
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 9

123
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new GeneratorFunctionsTranspiler [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new GeneratorFunctionsTranspiler [ NUMBER_CONSTANT ] ; }
Distance : 8

124
Tree	{ super ( yTmp , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( yTmp , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 10

125
Tree	{ this ( new RandomDataGenerator ( chromosomes ) , populationLimit ) ; }
Code	{ this ( new RandomDataGenerator ( chromosomes ) , populationLimit ) ; }
Distance : 9

126
Tree	{ super ( CategoryLabelPosition , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( CategoryLabelPosition , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 10

127
Tree	{ this ( chromosomes , false ) ; } i
Code	{ this ( chromosomes , false ) ; } i
Distance : 8

128
Tree	{ this ( new SerializableTypeVariable ( chromosomes ) , populationLimit ) ; }
Code	{ this ( new SerializableTypeVariable ( chromosomes ) , populationLimit ) ; }
Distance : 9

129
Tree	{ super ( Locale.JAPAN , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( Locale.JAPAN , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 10

130
Tree	{ this ( chromosomes , elitismRate , true ) ; }
Code	{ this ( chromosomes , elitismRate , true ) ; }
Distance : 7

131
Tree	{ this ( new Matches ( chromosomes ) , populationLimit ) ; }
Code	{ this ( new Matches ( chromosomes ) , populationLimit ) ; }
Distance : 9

132
Tree	{ super ( Fraction.ZERO , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( Fraction.ZERO , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 10

133
Tree	{ super ( chromosomes , populationLimit ) ; } wanted
Code	{ super ( chromosomes , populationLimit ) ; } wanted
Distance : 6

134
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

135
Tree	{ this ( new URL ( chromosomes ) , populationLimit ) ; }
Code	{ this ( new URL ( chromosomes ) , populationLimit ) ; }
Distance : 9

136
Tree	{ super ( ComposableFunction.SQRT , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( ComposableFunction.SQRT , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 10

137
Tree	{ super ( Locale.JAPAN , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( Locale.JAPAN , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 5

138
Tree	{ this ( new InstanceOf ( chromosomes ) , populationLimit ) ; }
Code	{ this ( new InstanceOf ( chromosomes ) , populationLimit ) ; }
Distance : 9

139
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Coordinates3D [] <> ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Coordinates3D [] <> ; }
Distance : 7

140
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new GeneralPath [] <> ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new GeneralPath [] <> ; }
Distance : 7

141
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Coordinates3D [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Coordinates3D [ NUMBER_CONSTANT ] ; }
Distance : 8

142
Tree	{ this ( new Returns ( chromosomes ) , populationLimit ) ; }
Code	{ this ( new Returns ( chromosomes ) , populationLimit ) ; }
Distance : 9

143
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; super }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; super }
Distance : 10

144
Tree	{ super ( changeListeners , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( changeListeners , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 10

145
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

146
Tree	{ super ( ComposableFunction.SINH , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( ComposableFunction.SINH , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 10

147
Tree	{ super ( ComposableFunction.SINH , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( ComposableFunction.SINH , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 5

148
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new IdentityPreconditioner [] <> ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new IdentityPreconditioner [] <> ; }
Distance : 7

149
Tree	{ super ( chromosomes ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 11

150
Tree	{ this ( new LocalizedMatcher ( chromosomes ) , populationLimit ) ; }
Code	{ this ( new LocalizedMatcher ( chromosomes ) , populationLimit ) ; }
Distance : 9

151
Tree	{ this ( new RandomDataImpl ( chromosomes ) , populationLimit ) ; }
Code	{ this ( new RandomDataImpl ( chromosomes ) , populationLimit ) ; }
Distance : 9

152
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 16

153
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new GeneralPath [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new GeneralPath [ NUMBER_CONSTANT ] ; }
Distance : 8

154
Tree	{ super ( labelLinksVisible , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( labelLinksVisible , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 10

155
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new CachingTranspiler [] <> ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new CachingTranspiler [] <> ; }
Distance : 7

156
Tree	{ super ( chromosomes ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 11

157
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 9

158
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new GeneratorFunctionsTranspiler [] <> ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new GeneratorFunctionsTranspiler [] <> ; }
Distance : 7

159
Tree	{ this . chromosomes = populationLimit ; }
Code	{ this . chromosomes = populationLimit ; }
Distance : 9

160
Tree	{ this . chromosomes = populationLimit ; } wanted
Code	{ this . chromosomes = populationLimit ; } wanted
Distance : 10

161
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 15

162
Tree	{ this . populationLimit = elitismRate ; }
Code	{ this . populationLimit = elitismRate ; }
Distance : 9

163
Tree	{ super ( elitismRate , chromosomes ) ; }
Code	{ super ( elitismRate , chromosomes ) ; }
Distance : 7

164
Tree	{ super ( chromosomes , populationLimit , elitismRate ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , elitismRate ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 11

165
Tree	{ this . chromosomes = populationLimit ; this . chromosomes = chromosomes ; }
Code	{ this . chromosomes = populationLimit ; this . chromosomes = chromosomes ; }
Distance : 9

166
Tree	{ this . populationLimit = populationLimit ; this () ; }
Code	{ this . populationLimit = populationLimit ; this () ; }
Distance : 9

167
Tree	{ this ( chromosomes , false ) ; }
Code	{ this ( chromosomes , false ) ; }
Distance : 7

168
Tree	{ this . chromosomes = chromosomes ; this () ; }
Code	{ this . chromosomes = chromosomes ; this () ; }
Distance : 9

169
Tree	{ this . chromosomes = elitismRate ; this () ; }
Code	{ this . chromosomes = elitismRate ; this () ; }
Distance : 9

170
Tree	{ this . elitismRate = chromosomes ; }
Code	{ this . elitismRate = chromosomes ; }
Distance : 11

171
Tree	{ this ( dialBackgroundPaint , populationLimit ) ; }
Code	{ this ( dialBackgroundPaint , populationLimit ) ; }
Distance : 7

172
Tree	{ this ( Locale.JAPAN , populationLimit ) ; }
Code	{ this ( Locale.JAPAN , populationLimit ) ; }
Distance : 7

173
Tree	{ this . elitismRate = elitismRate ; }
Code	{ this . elitismRate = elitismRate ; }
Distance : 10

174
Tree	{ super ( chromosomes , populationLimit ) ; }
Code	{ super ( chromosomes , populationLimit ) ; }
Distance : 5

175
Tree	{ this ( ComposableFunction.SINH , populationLimit ) ; }
Code	{ this ( ComposableFunction.SINH , populationLimit ) ; }
Distance : 7

176
Tree	{ this ( labelLinksVisible , populationLimit ) ; }
Code	{ this ( labelLinksVisible , populationLimit ) ; }
Distance : 7

177
Tree	{ this ( yTmp , populationLimit ) ; }
Code	{ this ( yTmp , populationLimit ) ; }
Distance : 7

178
Tree	{ this . elitismRate = populationLimit ; this () ; }
Code	{ this . elitismRate = populationLimit ; this () ; }
Distance : 9

179
Tree	{ this ( chromosomes , populationLimit ) ; }
Code	{ this ( chromosomes , populationLimit ) ; }
Distance : 6

180
Tree	{ this ( chromosomes , ( populationLimit ) return; ) ; }
Code	{ this ( chromosomes , ( populationLimit ) return; ) ; }
Distance : 6

181
Tree	{ this . populationLimit = chromosomes ; this () ; }
Code	{ this . populationLimit = chromosomes ; this () ; }
Distance : 10

182
Tree	{ this ( changeListeners , populationLimit ) ; }
Code	{ this ( changeListeners , populationLimit ) ; }
Distance : 7

183
Tree	{ this . chromosomes = populationLimit ; this () ; } wanted
Code	{ this . chromosomes = populationLimit ; this () ; } wanted
Distance : 9

184
Tree	{ super ( chromosomes , populationLimit , populationLimit ) ; this . elitismRate = new long [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , populationLimit ) ; this . elitismRate = new long [] { chromosomes } ; }
Distance : 11

185
Tree	{ this ( LocalizedFormats.MAX_COUNT_EXCEEDED , populationLimit ) ; }
Code	{ this ( LocalizedFormats.MAX_COUNT_EXCEEDED , populationLimit ) ; }
Distance : 7

186
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new float [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new float [] { chromosomes } ; }
Distance : 9

187
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; else }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; else }
Distance : 10

188
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 5

189
Tree	{ this ( chromosomes , ( populationLimit ) default: ) ; }
Code	{ this ( chromosomes , ( populationLimit ) default: ) ; }
Distance : 6

190
Tree	{ super ( chromosomes , populationLimit ) ; this . populationLimit = elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; this . populationLimit = elitismRate ; }
Distance : 5

191
Tree	{ super ( chromosomes , populationLimit , chromosomes ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , chromosomes ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 11

192
Tree	{ this ( populationLimit , populationLimit , true ) ; }
Code	{ this ( populationLimit , populationLimit , true ) ; }
Distance : 7

193
Tree	{ this . chromosomes = populationLimit ; this . elitismRate = chromosomes ; }
Code	{ this . chromosomes = populationLimit ; this . elitismRate = chromosomes ; }
Distance : 8

194
Tree	{ super ( populationLimit , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( populationLimit , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 5

195
Tree	{ this ( chromosomes , chromosomes , true ) ; }
Code	{ this ( chromosomes , chromosomes , true ) ; }
Distance : 7

196
Tree	{ super ( chromosomes , populationLimit , chromosomes ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , chromosomes ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 11

197
Tree	{ super ( chromosomes , chromosomes ) ; this . elitismRate = elitismRate ; }
Code	{ super ( chromosomes , chromosomes ) ; this . elitismRate = elitismRate ; }
Distance : 5

198
Tree	{ super ( chromosomes , populationLimit , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 11

199
Tree	{ this . populationLimit = chromosomes ; }
Code	{ this . populationLimit = chromosomes ; }
Distance : 10

========================================================================


========================================================================
Example Number: 72
Parent Code is: 
{ return chromosomes . iterator () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return getChromosomes () . iterator () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=chromosomes}) (235{val=.}) (802{val=iterator}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=getChromosomes}) (216{val=()})) (235{val=.}) (802{val=iterator}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/34/parent/src_main_java_org_apache_commons_math3_genetics_ListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return chromosomes . iterator () ; } Preconditions
Code	{ return chromosomes . iterator () ; } Preconditions
Distance : 3

1
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } ParamChecks
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } ParamChecks
Distance : 5

2
Tree	{ return ! chromosomes . iterator () ; } f
Code	{ return ! chromosomes . iterator () ; } f
Distance : 3

3
Tree	{ return ! chromosomes . iterator () ; } ParamChecks
Code	{ return ! chromosomes . iterator () ; } ParamChecks
Distance : 3

4
Tree	{ return ! chromosomes . iterator () ; } Preconditions
Code	{ return ! chromosomes . iterator () ; } Preconditions
Distance : 3

5
Tree	{ return chromosomes . iterator () . iterator () ; } p
Code	{ return chromosomes . iterator () . iterator () ; } p
Distance : 4

6
Tree	{ return chromosomes . iterator () . iterator () ; } options
Code	{ return chromosomes . iterator () . iterator () ; } options
Distance : 4

7
Tree	{ return chromosomes . iterator () . iterator () ; } source
Code	{ return chromosomes . iterator () . iterator () ; } source
Distance : 4

8
Tree	{ return chromosomes . iterator () . iterator () ; } toString
Code	{ return chromosomes . iterator () . iterator () ; } toString
Distance : 4

9
Tree	{ return chromosomes . iterator () ; } Test
Code	{ return chromosomes . iterator () ; } Test
Distance : 3

10
Tree	{ return chromosomes . iterator () ; } f
Code	{ return chromosomes . iterator () ; } f
Distance : 3

11
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } f
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } f
Distance : 5

12
Tree	{ return chromosomes . iterator ( chromosomes ) ; } Test
Code	{ return chromosomes . iterator ( chromosomes ) ; } Test
Distance : 6

13
Tree	{ return chromosomes . iterator ( chromosomes ) ; } Class
Code	{ return chromosomes . iterator ( chromosomes ) ; } Class
Distance : 6

14
Tree	{ return chromosomes . iterator ( chromosomes ) ; } MathRuntimeException
Code	{ return chromosomes . iterator ( chromosomes ) ; } MathRuntimeException
Distance : 6

15
Tree	{ return chromosomes . iterator ( chromosomes ) ; } {}
Code	{ return chromosomes . iterator ( chromosomes ) ; } {}
Distance : 6

16
Tree	{ return chromosomes . iterator ( chromosomes ) ; } f
Code	{ return chromosomes . iterator ( chromosomes ) ; } f
Distance : 6

17
Tree	{ return chromosomes . iterator ( chromosomes ) ; } ParamChecks
Code	{ return chromosomes . iterator ( chromosomes ) ; } ParamChecks
Distance : 6

18
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } Test
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } Test
Distance : 5

19
Tree	{ return chromosomes . iterator () ; } Class
Code	{ return chromosomes . iterator () ; } Class
Distance : 3

20
Tree	{ return chromosomes . iterator () () chromosomes . iterator () ; } p
Code	{ return chromosomes . iterator () () chromosomes . iterator () ; } p
Distance : 6

21
Tree	{ return chromosomes . iterator () ; } ParamChecks
Code	{ return chromosomes . iterator () ; } ParamChecks
Distance : 3

22
Tree	{ return new chromosomes () ; } -
Code	{ return new chromosomes () ; } -
Distance : 5

23
Tree	{ return new chromosomes () ; } [
Code	{ return new chromosomes () ; } [
Distance : 5

24
Tree	{ return ! chromosomes . iterator () ; } {}
Code	{ return ! chromosomes . iterator () ; } {}
Distance : 3

25
Tree	{ return chromosomes . iterator () . iterator () ; }
Code	{ return chromosomes . iterator () . iterator () ; }
Distance : 3

26
Tree	{ return new chromosomes () ; } notifyListeners
Code	{ return new chromosomes () ; } notifyListeners
Distance : 5

27
Tree	{ return chromosomes . iterator () () chromosomes . iterator () ; } source
Code	{ return chromosomes . iterator () () chromosomes . iterator () ; } source
Distance : 6

28
Tree	{ return chromosomes . iterator () ; } MathRuntimeException
Code	{ return chromosomes . iterator () ; } MathRuntimeException
Distance : 3

29
Tree	{ return chromosomes . iterator () ; } {}
Code	{ return chromosomes . iterator () ; } {}
Distance : 3

30
Tree	{ return chromosomes ; }
Code	{ return chromosomes ; }
Distance : 5

31
Tree	{ return chromosomes . iterator ( chromosomes ) ; } -
Code	{ return chromosomes . iterator ( chromosomes ) ; } -
Distance : 6

32
Tree	{ return new chromosomes () ; } class
Code	{ return new chromosomes () ; } class
Distance : 5

33
Tree	{ return ! chromosomes . iterator () ; } MathRuntimeException
Code	{ return ! chromosomes . iterator () ; } MathRuntimeException
Distance : 3

34
Tree	{ return ! chromosomes . iterator () ; } Class
Code	{ return ! chromosomes . iterator () ; } Class
Distance : 3

35
Tree	{ return ! chromosomes . iterator () ; } Test
Code	{ return ! chromosomes . iterator () ; } Test
Distance : 3

36
Tree	{ return chromosomes . iterator () && chromosomes . iterator () ; }
Code	{ return chromosomes . iterator () && chromosomes . iterator () ; }
Distance : 5

37
Tree	{ return ! chromosomes . getChromosomes () ; }
Code	{ return ! chromosomes . getChromosomes () ; }
Distance : 3

38
Tree	{ return ( chromosomes == null ? break; : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? break; : chromosomes . iterator () ) ; }
Distance : 9

39
Tree	{ return chromosomes . iterator () && chromosomes . getChromosomes () ; }
Code	{ return chromosomes . iterator () && chromosomes . getChromosomes () ; }
Distance : 6

40
Tree	{ return ( chromosomes == null ? continue; : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? continue; : chromosomes . iterator () ) ; }
Distance : 9

41
Tree	{ return ( chromosomes == null ? return; : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? return; : chromosomes . iterator () ) ; }
Distance : 9

42
Tree	{ return chromosomes . iterator ( chromosomes . iterator () ) ; }
Code	{ return chromosomes . iterator ( chromosomes . iterator () ) ; }
Distance : 6

43
Tree	{ return ( chromosomes == null ? null : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == null ? null : chromosomes . getChromosomes () ) ; }
Distance : 10

44
Tree	{ return ( chromosomes == null ? super(); : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? super(); : chromosomes . iterator () ) ; }
Distance : 9

45
Tree	{ return getChromosomes () ; }
Code	{ return getChromosomes () ; }
Distance : 3

46
Tree	{ return chromosomes . getChromosomes () ; }
Code	{ return chromosomes . getChromosomes () ; }
Distance : 3

47
Tree	{ return chromosomes . iterator ( chromosomes ) ; }
Code	{ return chromosomes . iterator ( chromosomes ) ; }
Distance : 5

48
Tree	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; }
Distance : 5

49
Tree	{ return true ; }
Code	{ return true ; }
Distance : 5

50
Tree	{ return chromosomes . getChromosomes () - NUMBER_CONSTANT ; }
Code	{ return chromosomes . getChromosomes () - NUMBER_CONSTANT ; }
Distance : 5

51
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } Class
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } Class
Distance : 5

52
Tree	{ return new PascalDistribution ( chromosomes ) ; }
Code	{ return new PascalDistribution ( chromosomes ) ; }
Distance : 5

53
Tree	{ return new outerProduct ( chromosomes ) ; }
Code	{ return new outerProduct ( chromosomes ) ; }
Distance : 5

54
Tree	{ return chromosomes . iterator () () chromosomes . iterator () ; } T
Code	{ return chromosomes . iterator () () chromosomes . iterator () ; } T
Distance : 6

55
Tree	{ return chromosomes . iterator () () chromosomes . iterator () ; } options
Code	{ return chromosomes . iterator () () chromosomes . iterator () ; } options
Distance : 6

56
Tree	{ return chromosomes . getChromosomes ( chromosomes . getChromosomes () ) ; }
Code	{ return chromosomes . getChromosomes ( chromosomes . getChromosomes () ) ; }
Distance : 6

57
Tree	{ return chromosomes . iterator () () chromosomes . getChromosomes () ; }
Code	{ return chromosomes . iterator () () chromosomes . getChromosomes () ; }
Distance : 6

58
Tree	{ return chromosomes == null chromosomes chromosomes . getChromosomes () ; }
Code	{ return chromosomes == null chromosomes chromosomes . getChromosomes () ; }
Distance : 6

59
Tree	{ return chromosomes . getChromosomes ( chromosomes . iterator () ) ; }
Code	{ return chromosomes . getChromosomes ( chromosomes . iterator () ) ; }
Distance : 5

60
Tree	{ return new underlying ( chromosomes ) ; }
Code	{ return new underlying ( chromosomes ) ; }
Distance : 5

61
Tree	{ return chromosomes . getChromosomes () && chromosomes . iterator () ; }
Code	{ return chromosomes . getChromosomes () && chromosomes . iterator () ; }
Distance : 4

62
Tree	{ return new RealMatrixImpl ( chromosomes ) ; }
Code	{ return new RealMatrixImpl ( chromosomes ) ; }
Distance : 5

63
Tree	{ return new ByteArrayInputStream ( chromosomes ) ; }
Code	{ return new ByteArrayInputStream ( chromosomes ) ; }
Distance : 5

64
Tree	{ return ( chromosomes ) chromosomes . iterator () ; }
Code	{ return ( chromosomes ) chromosomes . iterator () ; }
Distance : 4

65
Tree	{ return this . chromosomes ; }
Code	{ return this . chromosomes ; }
Distance : 4

66
Tree	{ return new FieldHermiteInterpolator ( chromosomes ) ; }
Code	{ return new FieldHermiteInterpolator ( chromosomes ) ; }
Distance : 5

67
Tree	{ return new RunnerProvider ( chromosomes ) ; }
Code	{ return new RunnerProvider ( chromosomes ) ; }
Distance : 5

68
Tree	{ return chromosomes . getChromosomes () && chromosomes . getChromosomes () ; }
Code	{ return chromosomes . getChromosomes () && chromosomes . getChromosomes () ; }
Distance : 5

69
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } MathRuntimeException
Distance : 5

70
Tree	{ return new chromosomes () ; } array
Code	{ return new chromosomes () ; } array
Distance : 5

71
Tree	{ return new chromosomes ( chromosomes ) ; }
Code	{ return new chromosomes ( chromosomes ) ; }
Distance : 5

72
Tree	{ return new chromosomes ( chromosomes ) ; } class
Code	{ return new chromosomes ( chromosomes ) ; } class
Distance : 6

73
Tree	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } Preconditions
Code	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } Preconditions
Distance : 6

74
Tree	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } Test
Code	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } Test
Distance : 6

75
Tree	{ return iterator () ; } ParamChecks
Code	{ return iterator () ; } ParamChecks
Distance : 4

76
Tree	{ return PRODUCT ; }
Code	{ return PRODUCT ; }
Distance : 5

77
Tree	{ return iterator () ; } Class
Code	{ return iterator () ; } Class
Distance : 4

78
Tree	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } f
Code	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } f
Distance : 6

79
Tree	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } {}
Code	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } {}
Distance : 6

80
Tree	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } MathRuntimeException
Code	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } MathRuntimeException
Distance : 6

81
Tree	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } Class
Code	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } Class
Distance : 6

82
Tree	{ return chromosomes ; } f
Code	{ return chromosomes ; } f
Distance : 6

83
Tree	{ return chromosomes ; } Override
Code	{ return chromosomes ; } Override
Distance : 6

84
Tree	{ return chromosomes ; } MathRuntimeException
Code	{ return chromosomes ; } MathRuntimeException
Distance : 6

85
Tree	{ return chromosomes . iterator ( chromosomes . iterator () ) ; } source
Code	{ return chromosomes . iterator ( chromosomes . iterator () ) ; } source
Distance : 7

86
Tree	{ return iterator () ; } Test
Code	{ return iterator () ; } Test
Distance : 4

87
Tree	{ return dialBackgroundPaint ; }
Code	{ return dialBackgroundPaint ; }
Distance : 5

88
Tree	{ return iterator () ; } f
Code	{ return iterator () ; } f
Distance : 4

89
Tree	{ return iterator () ; } {}
Code	{ return iterator () ; } {}
Distance : 4

90
Tree	{ return new iterator ( chromosomes ) ; }
Code	{ return new iterator ( chromosomes ) ; }
Distance : 5

91
Tree	{ return chromosomes . iterator ( chromosomes . iterator () ) ; } T
Code	{ return chromosomes . iterator ( chromosomes . iterator () ) ; } T
Distance : 7

92
Tree	{ return chromosomes . iterator ( chromosomes . iterator () ) ; } &&
Code	{ return chromosomes . iterator ( chromosomes . iterator () ) ; } &&
Distance : 7

93
Tree	{ return chromosomes . iterator ( chromosomes . iterator () ) ; } p
Code	{ return chromosomes . iterator ( chromosomes . iterator () ) ; } p
Distance : 7

94
Tree	{ return chromosomes . iterator ( chromosomes . iterator () ) ; } options
Code	{ return chromosomes . iterator ( chromosomes . iterator () ) ; } options
Distance : 7

95
Tree	{ return new chromosomes ( chromosomes ) ; } [
Code	{ return new chromosomes ( chromosomes ) ; } [
Distance : 6

96
Tree	{ return chromosomes ; } mock
Code	{ return chromosomes ; } mock
Distance : 6

97
Tree	{ return ( chromosomes ) chromosomes . iterator () ; } Preconditions
Code	{ return ( chromosomes ) chromosomes . iterator () ; } Preconditions
Distance : 5

98
Tree	{ return ( chromosomes ) chromosomes . iterator () ; } -
Code	{ return ( chromosomes ) chromosomes . iterator () ; } -
Distance : 5

99
Tree	{ return ( chromosomes ) chromosomes . iterator () ; } {}
Code	{ return ( chromosomes ) chromosomes . iterator () ; } {}
Distance : 5

100
Tree	{ return ( chromosomes ) chromosomes . iterator () ; } MathRuntimeException
Code	{ return ( chromosomes ) chromosomes . iterator () ; } MathRuntimeException
Distance : 5

101
Tree	{ return new chromosomes ( chromosomes ) ; } array
Code	{ return new chromosomes ( chromosomes ) ; } array
Distance : 6

102
Tree	{ return new chromosomes ( chromosomes ) ; } mock
Code	{ return new chromosomes ( chromosomes ) ; } mock
Distance : 6

103
Tree	{ return iterator () ; } MathRuntimeException
Code	{ return iterator () ; } MathRuntimeException
Distance : 4

104
Tree	{ return iterator () ; } -
Code	{ return iterator () ; } -
Distance : 4

105
Tree	{ return this . chromosomes ; } f
Code	{ return this . chromosomes ; } f
Distance : 5

106
Tree	{ return this . chromosomes ; } Override
Code	{ return this . chromosomes ; } Override
Distance : 5

107
Tree	{ return this . chromosomes ; } MathRuntimeException
Code	{ return this . chromosomes ; } MathRuntimeException
Distance : 5

108
Tree	{ return this . chromosomes ; } mock
Code	{ return this . chromosomes ; } mock
Distance : 5

109
Tree	{ return chromosomes . iterator () && chromosomes . getChromosomes () ; } p
Code	{ return chromosomes . iterator () && chromosomes . getChromosomes () ; } p
Distance : 7

110
Tree	{ return chromosomes . iterator () && chromosomes . getChromosomes () ; } options
Code	{ return chromosomes . iterator () && chromosomes . getChromosomes () ; } options
Distance : 7

111
Tree	{ return chromosomes . iterator () && chromosomes . getChromosomes () ; } source
Code	{ return chromosomes . iterator () && chromosomes . getChromosomes () ; } source
Distance : 7

112
Tree	{ return chromosomes . iterator () && chromosomes . getChromosomes () ; } toString
Code	{ return chromosomes . iterator () && chromosomes . getChromosomes () ; } toString
Distance : 7

113
Tree	{ return new chromosomes ( chromosomes ) ; } MathRuntimeException
Code	{ return new chromosomes ( chromosomes ) ; } MathRuntimeException
Distance : 6

114
Tree	{ return chromosomes ; } -
Code	{ return chromosomes ; } -
Distance : 6

115
Tree	{ return chromosomes ; } [
Code	{ return chromosomes ; } [
Distance : 6

116
Tree	{ return this . chromosomes ; } array
Code	{ return this . chromosomes ; } array
Distance : 5

117
Tree	{ return this . chromosomes ; } notifyListeners
Code	{ return this . chromosomes ; } notifyListeners
Distance : 5

118
Tree	{ return Pair ; }
Code	{ return Pair ; }
Distance : 5

119
Tree	{ return Complex.ZERO ; }
Code	{ return Complex.ZERO ; }
Distance : 5

120
Tree	{ return new chromosomes ( chromosomes ) ; } f
Code	{ return new chromosomes ( chromosomes ) ; } f
Distance : 6

121
Tree	{ return new chromosomes ( chromosomes ) ; } Override
Code	{ return new chromosomes ( chromosomes ) ; } Override
Distance : 6

122
Tree	{ return ( chromosomes ) chromosomes . iterator () ; } Test
Code	{ return ( chromosomes ) chromosomes . iterator () ; } Test
Distance : 5

123
Tree	{ return chromosomes . iterator () && chromosomes . getChromosomes () ; } T
Code	{ return chromosomes . iterator () && chromosomes . getChromosomes () ; } T
Distance : 7

124
Tree	{ return chromosomes . getChromosomes () () chromosomes . iterator () ; }
Code	{ return chromosomes . getChromosomes () () chromosomes . iterator () ; }
Distance : 4

125
Tree	{ return chromosomes == default: chromosomes chromosomes . iterator () ; }
Code	{ return chromosomes == default: chromosomes chromosomes . iterator () ; }
Distance : 5

126
Tree	{ return chromosomes . getChromosomes () () chromosomes . getChromosomes () ; }
Code	{ return chromosomes . getChromosomes () () chromosomes . getChromosomes () ; }
Distance : 5

127
Tree	{ return ConstantFuture ; }
Code	{ return ConstantFuture ; }
Distance : 5

128
Tree	{ return chromosomes == super(); chromosomes chromosomes . getChromosomes () ; }
Code	{ return chromosomes == super(); chromosomes chromosomes . getChromosomes () ; }
Distance : 6

129
Tree	{ return EscapeUtils.ESCAPE_JAVA ; }
Code	{ return EscapeUtils.ESCAPE_JAVA ; }
Distance : 5

130
Tree	{ return chromosomes == return; chromosomes chromosomes . getChromosomes () ; }
Code	{ return chromosomes == return; chromosomes chromosomes . getChromosomes () ; }
Distance : 6

131
Tree	{ return chromosomes == break; chromosomes chromosomes . getChromosomes () ; }
Code	{ return chromosomes == break; chromosomes chromosomes . getChromosomes () ; }
Distance : 6

132
Tree	{ return chromosomes . iterator () . iterator () ; } &&
Code	{ return chromosomes . iterator () . iterator () ; } &&
Distance : 4

133
Tree	{ return chromosomes . iterator () . iterator () ; } T
Code	{ return chromosomes . iterator () . iterator () ; } T
Distance : 4

134
Tree	{ return new chromosomes () ; } mock
Code	{ return new chromosomes () ; } mock
Distance : 5

135
Tree	{ return new BigFraction ( chromosomes ) ; }
Code	{ return new BigFraction ( chromosomes ) ; }
Distance : 5

136
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } -
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } -
Distance : 5

137
Tree	{ return new chromosomes () ; } MathRuntimeException
Code	{ return new chromosomes () ; } MathRuntimeException
Distance : 5

138
Tree	{ return chromosomes == super(); chromosomes chromosomes . iterator () ; }
Code	{ return chromosomes == super(); chromosomes chromosomes . iterator () ; }
Distance : 5

139
Tree	{ return chromosomes == return; chromosomes chromosomes . iterator () ; }
Code	{ return chromosomes == return; chromosomes chromosomes . iterator () ; }
Distance : 5

140
Tree	{ return this . chromosomes ; } [
Code	{ return this . chromosomes ; } [
Distance : 5

141
Tree	{ return retrieveLineSegments ; }
Code	{ return retrieveLineSegments ; }
Distance : 5

142
Tree	{ return ( chromosomes ) chromosomes . iterator () ; } ParamChecks
Code	{ return ( chromosomes ) chromosomes . iterator () ; } ParamChecks
Distance : 5

143
Tree	{ return false ; } MathRuntimeException
Code	{ return false ; } MathRuntimeException
Distance : 6

144
Tree	{ return false ; } {}
Code	{ return false ; } {}
Distance : 6

145
Tree	{ return new chromosomes () ; } Override
Code	{ return new chromosomes () ; } Override
Distance : 5

146
Tree	{ return false ; } f
Code	{ return false ; } f
Distance : 6

147
Tree	{ return ( chromosomes ) chromosomes . getChromosomes () ; }
Code	{ return ( chromosomes ) chromosomes . getChromosomes () ; }
Distance : 5

148
Tree	{ return this . chromosomes ; } -
Code	{ return this . chromosomes ; } -
Distance : 5

149
Tree	{ return false ; } ParamChecks
Code	{ return false ; } ParamChecks
Distance : 6

150
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } Preconditions
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } Preconditions
Distance : 5

151
Tree	{ return new chromosomes ( chromosomes ) ; } -
Code	{ return new chromosomes ( chromosomes ) ; } -
Distance : 6

152
Tree	{ return new chromosomes () ; } f
Code	{ return new chromosomes () ; } f
Distance : 5

153
Tree	{ return chromosomes == break; chromosomes chromosomes . iterator () ; }
Code	{ return chromosomes == break; chromosomes chromosomes . iterator () ; }
Distance : 5

154
Tree	{ return ( chromosomes ) chromosomes . iterator () ; } Class
Code	{ return ( chromosomes ) chromosomes . iterator () ; } Class
Distance : 5

155
Tree	{ return false ; } -
Code	{ return false ; } -
Distance : 6

156
Tree	{ return chromosomes == continue; chromosomes chromosomes . iterator () ; }
Code	{ return chromosomes == continue; chromosomes chromosomes . iterator () ; }
Distance : 5

157
Tree	{ return false ; } Preconditions
Code	{ return false ; } Preconditions
Distance : 6

158
Tree	{ return chromosomes ; } notifyListeners
Code	{ return chromosomes ; } notifyListeners
Distance : 6

159
Tree	{ return chromosomes ; } class
Code	{ return chromosomes ; } class
Distance : 6

160
Tree	{ return chromosomes . iterator () && chromosomes . getChromosomes () ; } &&
Code	{ return chromosomes . iterator () && chromosomes . getChromosomes () ; } &&
Distance : 7

161
Tree	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } -
Code	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } -
Distance : 6

162
Tree	{ return chromosomes ; } array
Code	{ return chromosomes ; } array
Distance : 6

163
Tree	{ return chromosomes . iterator ( chromosomes ) ; } Preconditions
Code	{ return chromosomes . iterator ( chromosomes ) ; } Preconditions
Distance : 6

164
Tree	{ return false ; } Test
Code	{ return false ; } Test
Distance : 6

165
Tree	{ return ( chromosomes ) chromosomes . iterator () ; } f
Code	{ return ( chromosomes ) chromosomes . iterator () ; } f
Distance : 5

166
Tree	{ return chromosomes == null chromosomes chromosomes . iterator () ; }
Code	{ return chromosomes == null chromosomes chromosomes . iterator () ; }
Distance : 5

167
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } {}
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } {}
Distance : 5

168
Tree	{ return this . chromosomes ; } class
Code	{ return this . chromosomes ; } class
Distance : 5

169
Tree	{ return chromosomes . iterator () . getChromosomes () ; }
Code	{ return chromosomes . iterator () . getChromosomes () ; }
Distance : 4

170
Tree	{ return iterator () ; }
Code	{ return iterator () ; }
Distance : 3

171
Tree	{ return chromosomes . iterator () ; }
Code	{ return chromosomes . iterator () ; }
Distance : 2

172
Tree	{ return false ; }
Code	{ return false ; }
Distance : 5

173
Tree	{ return Locale.US ; }
Code	{ return Locale.US ; }
Distance : 5

174
Tree	{ return CompilerOptions.J2clPassMode ; }
Code	{ return CompilerOptions.J2clPassMode ; }
Distance : 5

175
Tree	{ return new chromosomes () ; }
Code	{ return new chromosomes () ; }
Distance : 4

176
Tree	{ return new Array2DRowFieldMatrix ( chromosomes ) ; }
Code	{ return new Array2DRowFieldMatrix ( chromosomes ) ; }
Distance : 5

177
Tree	{ return chromosomes . iterator ( chromosomes . iterator () ) ; } toString
Code	{ return chromosomes . iterator ( chromosomes . iterator () ) ; } toString
Distance : 7

178
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; }
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; }
Distance : 4

179
Tree	{ return changeListeners ; }
Code	{ return changeListeners ; }
Distance : 5

180
Tree	{ return ( chromosomes == super(); ? null : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == super(); ? null : chromosomes . iterator () ) ; }
Distance : 9

181
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; }
Distance : 9

182
Tree	{ return chromosomes . getChromosomes () . iterator () ; }
Code	{ return chromosomes . getChromosomes () . iterator () ; }
Distance : 2

183
Tree	{ return STRING_CONSTANT + chromosomes . getChromosomes () + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + chromosomes . getChromosomes () + STRING_CONSTANT ; }
Distance : 6

184
Tree	{ return ! chromosomes . iterator () ; } -
Code	{ return ! chromosomes . iterator () ; } -
Distance : 3

185
Tree	{ return ( chromosomes == return; ? null : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == return; ? null : chromosomes . iterator () ) ; }
Distance : 9

186
Tree	{ return chromosomes . iterator ( chromosomes . getChromosomes () ) ; }
Code	{ return chromosomes . iterator ( chromosomes . getChromosomes () ) ; }
Distance : 7

187
Tree	{ return ( chromosomes == null ? default: : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? default: : chromosomes . iterator () ) ; }
Distance : 9

188
Tree	{ return ! chromosomes . iterator () ; }
Code	{ return ! chromosomes . iterator () ; }
Distance : 2

189
Tree	{ return ( chromosomes == continue; ? null : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == continue; ? null : chromosomes . iterator () ) ; }
Distance : 9

190
Tree	{ return new chromosomes ( chromosomes ) ; } notifyListeners
Code	{ return new chromosomes ( chromosomes ) ; } notifyListeners
Distance : 6

191
Tree	{ return iterator () ; } Preconditions
Code	{ return iterator () ; } Preconditions
Distance : 4

192
Tree	{ return chromosomes . getChromosomes ( chromosomes ) ; }
Code	{ return chromosomes . getChromosomes ( chromosomes ) ; }
Distance : 6

193
Tree	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } ParamChecks
Code	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } ParamChecks
Distance : 6

194
Tree	{ return chromosomes . iterator () () chromosomes . iterator () ; } toString
Code	{ return chromosomes . iterator () () chromosomes . iterator () ; } toString
Distance : 6

195
Tree	{ return chromosomes . iterator () () chromosomes . iterator () ; }
Code	{ return chromosomes . iterator () () chromosomes . iterator () ; }
Distance : 5

196
Tree	{ return chromosomes . getChromosomes () . getChromosomes () ; }
Code	{ return chromosomes . getChromosomes () . getChromosomes () ; }
Distance : 3

197
Tree	{ return chromosomes . iterator () ; } -
Code	{ return chromosomes . iterator () ; } -
Distance : 3

198
Tree	{ return false ; } Class
Code	{ return false ; } Class
Distance : 6

199
Tree	{ return chromosomes . iterator () () chromosomes . iterator () ; } &&
Code	{ return chromosomes . iterator () () chromosomes . iterator () ; } &&
Distance : 6

========================================================================


========================================================================
Example Number: 73
Parent Code is: 
if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=Precision}) (235{val=.}) (802{val=compareTo}) (214{val=(}) (800{val=entry}) (234{val=,}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=maxUlps}) (215{val=)})) (231{val=>}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=columnsToDrop}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=i}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=Precision}) (235{val=.}) (802{val=compareTo}) (214{val=(}) (800{val=entry}) (234{val=,}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=epsilon}) (215{val=)})) (231{val=>}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=columnsToDrop}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=i}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/33/parent/src_main_java_org_apache_commons_math3_optimization_linear_SimplexTableau.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( Precision . compareTo ( null , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

1
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , CombinatoricsUtils ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , CombinatoricsUtils ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

2
Tree	if ( Precision . compareTo ( null , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

3
Tree	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 9

4
Tree	if ( compareTo ( entry , i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

5
Tree	if ( entry . compareTo ( entry , maxUlps , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , maxUlps , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

6
Tree	if ( compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

7
Tree	if ( Precision . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

8
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

9
Tree	if ( Precision . compareTo ( null , null ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( null , null ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

10
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT , PivotSelectionRule.BLAND ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT , PivotSelectionRule.BLAND ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

11
Tree	if ( compareTo ( i , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( i , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

12
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , GoalType.MINIMIZE ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , GoalType.MINIMIZE ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

13
Tree	if ( Precision . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

14
Tree	if ( finderStub.actualToReturn != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( finderStub.actualToReturn != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

15
Tree	if ( Precision . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

16
Tree	if ( entry . compareTo ( null , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

17
Tree	if ( Precision . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

18
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

19
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , obj2.props ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , obj2.props ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

20
Tree	if ( entry . compareTo ( null , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

21
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

22
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , importedName.value ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , importedName.value ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

23
Tree	if ( Precision . compareTo ( entry , i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

24
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

25
Tree	if ( compareTo ( entry . add ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . add ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

26
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

27
Tree	if ( i . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

28
Tree	if ( Precision . compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

29
Tree	if ( Precision . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 4

30
Tree	if ( i . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

31
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

32
Tree	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , i ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , i ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

33
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

34
Tree	if ( call.returnType . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( call.returnType . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

35
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

36
Tree	if ( finderStub.actualToReturn . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( finderStub.actualToReturn . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

37
Tree	if ( getX != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( getX != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

38
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , PivotSelectionRule.BLAND ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , PivotSelectionRule.BLAND ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

39
Tree	if ( getX . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( getX . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

40
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 6

41
Tree	if ( Precision . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

42
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

43
Tree	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 6

44
Tree	if ( compareTo ( entry , i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( entry , i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

45
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { entry . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { entry . add ( i ) ; }
Distance : 7

46
Tree	if ( add ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( add ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

47
Tree	if ( add ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( add ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

48
Tree	if ( i . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( i . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 11

49
Tree	if ( Precision . compareTo ( i , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( i , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

50
Tree	if ( Double.MIN_VALUE != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( Double.MIN_VALUE != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

51
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

52
Tree	if ( Precision . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

53
Tree	if ( Boolean.FALSE != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( Boolean.FALSE != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

54
Tree	if ( entry . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 4

55
Tree	if ( entry . compareTo ( entry , that.defaultGroup , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , that.defaultGroup , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

56
Tree	if ( knots.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( knots.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

57
Tree	if ( Precision . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

58
Tree	if ( compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

59
Tree	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 10

60
Tree	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

61
Tree	if ( entry . compareTo ( entry , cutOff , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , cutOff , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

62
Tree	if ( Precision . compareTo ( entry / entry , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry / entry , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

63
Tree	if ( entry . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

64
Tree	if ( i . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( i . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

65
Tree	if ( columnsToDrop . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( columnsToDrop . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 10

66
Tree	if ( maxUlps . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

67
Tree	if ( entry . compareTo ( entry , this . entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , this . entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

68
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 7

69
Tree	if ( entry . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

70
Tree	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 6

71
Tree	if ( i . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( i . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

72
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 6

73
Tree	if ( Double.MIN_VALUE . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Double.MIN_VALUE . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

74
Tree	if ( Precision . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

75
Tree	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

76
Tree	if ( call.returnType != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( call.returnType != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

77
Tree	if ( i . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

78
Tree	if ( entry . compareTo ( entry , i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

79
Tree	if ( Precision . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

80
Tree	if ( entry . compareTo ( entry / entry , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / entry , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

81
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 7

82
Tree	if ( entry . compareTo ( entry , this . epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , this . epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

83
Tree	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 10

84
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

85
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

86
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

87
Tree	if ( i . compareTo ( null , null ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( i . compareTo ( null , null ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

88
Tree	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 8

89
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT , cutOff ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT , cutOff ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

90
Tree	if ( compareTo ( maxUlps , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( maxUlps , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

91
Tree	if ( i . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 10

92
Tree	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 10

93
Tree	if ( Boolean.FALSE . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Boolean.FALSE . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

94
Tree	if ( maxUlps . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

95
Tree	if ( Integer.MAX_VALUE . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Integer.MAX_VALUE . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

96
Tree	if ( Precision . compareTo ( entry , maxUlps , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , maxUlps , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

97
Tree	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

98
Tree	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , i ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , i ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 8

99
Tree	if ( entry . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

100
Tree	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

101
Tree	if ( maxUlps . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 10

102
Tree	if ( entry . compareTo ( entry / maxUlps , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / maxUlps , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

103
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

104
Tree	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 6

105
Tree	if ( entry . compareTo ( entry / entry , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry / entry , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

106
Tree	if ( compareTo ( entry , columnsToDrop , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , columnsToDrop , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

107
Tree	if ( i . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

108
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 6

109
Tree	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 8

110
Tree	if ( Precision . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

111
Tree	if ( Precision . compareTo ( entry / i , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry / i , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

112
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

113
Tree	if ( entry . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

114
Tree	if ( compareTo ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

115
Tree	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

116
Tree	if ( entry . compareTo ( null , entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( null , entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

117
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

118
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 6

119
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 7

120
Tree	if ( entry . compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

121
Tree	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 6

122
Tree	if ( i . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

123
Tree	if ( Precision . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 4

124
Tree	if ( Precision . compareTo ( entry , this . entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , this . entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

125
Tree	if ( entry . compareTo ( null , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

126
Tree	if ( columnsToDrop . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( columnsToDrop . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

127
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( columnsToDrop ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( columnsToDrop ) ; }
Distance : 6

128
Tree	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

129
Tree	if ( maxUlps . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

130
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 5

131
Tree	if ( columnsToDrop . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( columnsToDrop . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

132
Tree	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

133
Tree	if ( compareTo ( entry , epsilon , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , epsilon , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

134
Tree	if ( Precision . compareTo ( entry , this . epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , this . epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

135
Tree	if ( entry . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

136
Tree	if ( Integer.MAX_VALUE != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( Integer.MAX_VALUE != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

137
Tree	if ( entry . compareTo ( i , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( i , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

138
Tree	if ( i . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( i . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

139
Tree	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 11

140
Tree	if ( entry . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

141
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 4

142
Tree	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 11

143
Tree	if ( entry . compareTo ( entry , this . i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , this . i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

144
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( maxUlps ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( maxUlps ) ; }
Distance : 6

145
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 2

146
Tree	if ( Precision . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

147
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 7

148
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 5

149
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

150
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

151
Tree	if ( knots.length != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( knots.length != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

152
Tree	if ( c.length != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( c.length != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

153
Tree	if ( i . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

154
Tree	if ( LocalizedFormats.OUT_OF_RANGE_SIMPLE != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( LocalizedFormats.OUT_OF_RANGE_SIMPLE != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

155
Tree	if ( Var.ARGUMENTS != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( Var.ARGUMENTS != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

156
Tree	if ( maxUlps . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

157
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( maxUlps ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( maxUlps ) ; }
Distance : 7

158
Tree	if ( entry . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

159
Tree	if ( entry . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( entry . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 6

160
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 6

161
Tree	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

162
Tree	if ( LocalizedFormats.OUT_OF_RANGE_SIMPLE . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( LocalizedFormats.OUT_OF_RANGE_SIMPLE . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

163
Tree	if ( entry . compareTo ( entry , PivotSelectionRule.BLAND , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , PivotSelectionRule.BLAND , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

164
Tree	if ( c.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( c.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

165
Tree	if ( entry . compareTo ( entry , OrderDirection.INCREASING , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , OrderDirection.INCREASING , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

166
Tree	if ( Var.ARGUMENTS . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Var.ARGUMENTS . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

167
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( entry ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( entry ) ; }
Distance : 8

168
Tree	if ( compareTo ( entry . add ( entry , NUMBER_CONSTANT , entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . add ( entry , NUMBER_CONSTANT , entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

169
Tree	if ( i . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

170
Tree	if ( entry . compareTo ( entry , maxUlps , maxUlps , LocalizedFormats.OVERFLOW_IN_ADDITION ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , maxUlps , maxUlps , LocalizedFormats.OVERFLOW_IN_ADDITION ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

171
Tree	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

172
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , cutOff ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , cutOff ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

173
Tree	if ( maxUlps . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

174
Tree	if ( Precision . Precision ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . Precision ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

175
Tree	if ( entry . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

176
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

177
Tree	if ( columnsToDrop . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( columnsToDrop . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

178
Tree	if ( entry . compareTo ( entry / i , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / i , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

179
Tree	if ( Precision . compareTo ( entry , cutOff , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , cutOff , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

180
Tree	if ( i . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( i . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

181
Tree	if ( entry . compareTo ( entry , epsilon , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , epsilon , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

182
Tree	if ( entry . entry ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . entry ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

183
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( entry ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( entry ) ; }
Distance : 7

184
Tree	if ( entry . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

185
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

186
Tree	if ( entry . compareTo ( entry , maxUlps , maxUlps , Context.OTHER ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , maxUlps , maxUlps , Context.OTHER ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

187
Tree	if ( entry . compareTo ( entry , ConstructorStrategy.Default.IMITATE_SUPER_TYPE , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , ConstructorStrategy.Default.IMITATE_SUPER_TYPE , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

188
Tree	if ( columnsToDrop . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( columnsToDrop . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

189
Tree	if ( Precision . entry ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . entry ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

190
Tree	if ( entry . Precision ( entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . Precision ( entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 7

191
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

192
Tree	if ( Precision . Precision ( entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . Precision ( entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

193
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( columnsToDrop ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( columnsToDrop ) ; }
Distance : 7

194
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { entry . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { entry . add ( i ) ; }
Distance : 6

195
Tree	if ( entry . entry ( entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . entry ( entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 7

196
Tree	if ( Precision . entry ( entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . entry ( entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

197
Tree	if ( i . Precision ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . Precision ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

198
Tree	if ( entry . maxUlps ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . maxUlps ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

199
Tree	if ( entry . Precision ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . Precision ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

========================================================================


========================================================================
Example Number: 74
Parent Code is: 
final int n1n2prod = n1 * n2 ;
-------------------------------------------------------------------------------
Child code is: 
final double n1n2prod = n1 * n2 ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=n1n2prod}) (204{val==}) (27 (800{val=n1}) (202{val=*}) (800{val=n2}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=double}) (59 (800{val=n1n2prod}) (204{val==}) (27 (800{val=n1}) (202{val=*}) (800{val=n2}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/30/parent/src_main_java_org_apache_commons_math3_stat_inference_MannWhitneyUTest.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	final int n1n2prod = NUMBER_CONSTANT - n2 ;
Code	final int n1n2prod = NUMBER_CONSTANT - n2 ;
Distance : 3

1
Tree	final int n1n2prod = CHAR_CONS * n1 * n2 ;
Code	final int n1n2prod = CHAR_CONS * n1 * n2 ;
Distance : 3

2
Tree	final int n1n2prod = {} / n2 ;
Code	final int n1n2prod = {} / n2 ;
Distance : 3

3
Tree	final int n1n2prod = n1 * n1 / n2 ;
Code	final int n1n2prod = n1 * n1 / n2 ;
Distance : 3

4
Tree	final int n1n2prod = n1 - R [ n2 ] ;
Code	final int n1n2prod = n1 - R [ n2 ] ;
Distance : 5

5
Tree	final int n1n2prod = super / n1 ;
Code	final int n1n2prod = super / n1 ;
Distance : 4

6
Tree	final int n1n2prod = n2 * n1 ;
Code	final int n1n2prod = n2 * n1 ;
Distance : 3

7
Tree	final int n2 = ( long ) n1 * n2 ;
Code	final int n2 = ( long ) n1 * n2 ;
Distance : 5

8
Tree	final int n1n2prod = CHAR_CONS + n2 ;
Code	final int n1n2prod = CHAR_CONS + n2 ;
Distance : 3

9
Tree	final int n1n2prod = NUMBER_CONSTANT * LocalizedFormats.NUMBER_TOO_SMALL ;
Code	final int n1n2prod = NUMBER_CONSTANT * LocalizedFormats.NUMBER_TOO_SMALL ;
Distance : 3

10
Tree	final int n1n2prod = NUMBER_CONSTANT * n2 * n1 * currentState.length ;
Code	final int n1n2prod = NUMBER_CONSTANT * n2 * n1 * currentState.length ;
Distance : 6

11
Tree	final int n1n2prod = n2 > n2 ;
Code	final int n1n2prod = n2 > n2 ;
Distance : 3

12
Tree	final int n1n2prod = super * n2 * n2 ;
Code	final int n1n2prod = super * n2 * n2 ;
Distance : 4

13
Tree	final int n1n2prod = n1 - tol [ n2 ] ;
Code	final int n1n2prod = n1 - tol [ n2 ] ;
Distance : 5

14
Tree	final int n1 = n1 + NUMBER_CONSTANT ;
Code	final int n1 = n1 + NUMBER_CONSTANT ;
Distance : 4

15
Tree	final double n1n2prod = n1 + NUMBER_CONSTANT ;
Code	final double n1n2prod = n1 + NUMBER_CONSTANT ;
Distance : 2

16
Tree	final int n1n2prod = n1 . intValue () - NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 . intValue () - NUMBER_CONSTANT ;
Distance : 6

17
Tree	final int n1n2prod = n2 - extends ;
Code	final int n1n2prod = n2 - extends ;
Distance : 4

18
Tree	final int n1n2prod = n2 * n1 / n2 ;
Code	final int n1n2prod = n2 * n1 / n2 ;
Distance : 4

19
Tree	final int n1n2prod = NUMBER_CONSTANT / n1 ;
Code	final int n1n2prod = NUMBER_CONSTANT / n1 ;
Distance : 4

20
Tree	final int n1n2prod = {} * n2 ;
Code	final int n1n2prod = {} * n2 ;
Distance : 2

21
Tree	final int n2 = ( int ) n1 * n2 ;
Code	final int n2 = ( int ) n1 * n2 ;
Distance : 5

22
Tree	final int n1n2prod = n2 - n1 [ n2 ] ;
Code	final int n1n2prod = n2 - n1 [ n2 ] ;
Distance : 5

23
Tree	final int n1n2prod = super / n2 ;
Code	final int n1n2prod = super / n2 ;
Distance : 3

24
Tree	final int n1n2prod = ( long ) n2 * n1 ;
Code	final int n1n2prod = ( long ) n2 * n1 ;
Distance : 6

25
Tree	final int n1n2prod = n2 == CHAR_CONS ;
Code	final int n1n2prod = n2 == CHAR_CONS ;
Distance : 4

26
Tree	final int n1n2prod = / / n2 ;
Code	final int n1n2prod = / / n2 ;
Distance : 3

27
Tree	final int n1n2prod = CHAR_CONS * n2 ;
Code	final int n1n2prod = CHAR_CONS * n2 ;
Distance : 2

28
Tree	final int n1n2prod = NUMBER_CONSTANT * MathUtils.TWO_PI ;
Code	final int n1n2prod = NUMBER_CONSTANT * MathUtils.TWO_PI ;
Distance : 3

29
Tree	final int n1n2prod = CHAR_CONS / n1 ;
Code	final int n1n2prod = CHAR_CONS / n1 ;
Distance : 4

30
Tree	final int n1n2prod = / * n1 * n2 ;
Code	final int n1n2prod = / * n1 * n2 ;
Distance : 3

31
Tree	final int n1n2prod = n1 * n2 / n2 ;
Code	final int n1n2prod = n1 * n2 / n2 ;
Distance : 3

32
Tree	final int n1n2prod = n2 > > NUMBER_CONSTANT ;
Code	final int n1n2prod = n2 > > NUMBER_CONSTANT ;
Distance : 5

33
Tree	final int n1n2prod = n1 - n2 [ n2 ] ;
Code	final int n1n2prod = n1 - n2 [ n2 ] ;
Distance : 5

34
Tree	final int n1n2prod = n2 * n1 / n1 ;
Code	final int n1n2prod = n2 * n1 / n1 ;
Distance : 5

35
Tree	final int n1n2prod = n1 . is () - NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 . is () - NUMBER_CONSTANT ;
Distance : 6

36
Tree	final int n1n2prod = CHAR_CONS * n2 * n2 ;
Code	final int n1n2prod = CHAR_CONS * n2 * n2 ;
Distance : 4

37
Tree	final int n1n2prod = NUMBER_CONSTANT * Vector1D.ZERO ;
Code	final int n1n2prod = NUMBER_CONSTANT * Vector1D.ZERO ;
Distance : 3

38
Tree	final int n1n2prod = NUMBER_CONSTANT * n1 * n2 * currentState.length ;
Code	final int n1n2prod = NUMBER_CONSTANT * n1 * n2 * currentState.length ;
Distance : 5

39
Tree	final int n1n2prod = bLoop [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Code	final int n1n2prod = bLoop [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Distance : 11

40
Tree	final int n1n2prod = n1 > n2 ;
Code	final int n1n2prod = n1 > n2 ;
Distance : 2

41
Tree	final int n1n2prod = NUMBER_CONSTANT * n1 * n2 * FunctionFlavor.NORMAL ;
Code	final int n1n2prod = NUMBER_CONSTANT * n1 * n2 * FunctionFlavor.NORMAL ;
Distance : 5

42
Tree	final int n1n2prod = CHAR_CONS + n1 ;
Code	final int n1n2prod = CHAR_CONS + n1 ;
Distance : 4

43
Tree	final int n2 = n2 > n1 ;
Code	final int n2 = n2 > n1 ;
Distance : 5

44
Tree	final int n1n2prod = n1 - extends ;
Code	final int n1n2prod = n1 - extends ;
Distance : 3

45
Tree	final int n1n2prod = / * n2 ;
Code	final int n1n2prod = / * n2 ;
Distance : 2

46
Tree	final int n1n2prod = n2 * n2 / n2 ;
Code	final int n1n2prod = n2 * n2 / n2 ;
Distance : 4

47
Tree	final int n1n2prod = MathUtils.TWO_PI . intValue () - NUMBER_CONSTANT ;
Code	final int n1n2prod = MathUtils.TWO_PI . intValue () - NUMBER_CONSTANT ;
Distance : 7

48
Tree	final int n1n2prod = n1 - n1 [ n2 ] ;
Code	final int n1n2prod = n1 - n1 [ n2 ] ;
Distance : 5

49
Tree	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * Vector1D.ZERO ;
Code	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * Vector1D.ZERO ;
Distance : 6

50
Tree	final int n2 = n2 * n2 ;
Code	final int n2 = n2 * n2 ;
Distance : 3

51
Tree	final int n1n2prod = compiler.globalTypeInfo . get () - NUMBER_CONSTANT ;
Code	final int n1n2prod = compiler.globalTypeInfo . get () - NUMBER_CONSTANT ;
Distance : 7

52
Tree	final int n1n2prod = n1 [ n2 ] + STRING_CONSTANT + getColumnDimension [ n2 ] ;
Code	final int n1n2prod = n1 [ n2 ] + STRING_CONSTANT + getColumnDimension [ n2 ] ;
Distance : 10

53
Tree	final int n1n2prod = ( int ) n2 * n1 ;
Code	final int n1n2prod = ( int ) n2 * n1 ;
Distance : 6

54
Tree	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * currentState.length ;
Code	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * currentState.length ;
Distance : 6

55
Tree	final int n1n2prod = {} * n1 ;
Code	final int n1n2prod = {} * n1 ;
Distance : 3

56
Tree	final int n1n2prod = NUMBER_CONSTANT * FastMath.PI ;
Code	final int n1n2prod = NUMBER_CONSTANT * FastMath.PI ;
Distance : 3

57
Tree	final int n1n2prod = ? * n2 ;
Code	final int n1n2prod = ? * n2 ;
Distance : 2

58
Tree	final int n2 = n1 * n1 ;
Code	final int n2 = n1 * n1 ;
Distance : 3

59
Tree	final int n1n2prod = n1 [ n2 ] + STRING_CONSTANT + CHAR_CONS [ n2 ] ;
Code	final int n1n2prod = n1 [ n2 ] + STRING_CONSTANT + CHAR_CONS [ n2 ] ;
Distance : 10

60
Tree	final int n1n2prod = MathUtils.TWO_PI . get () - NUMBER_CONSTANT ;
Code	final int n1n2prod = MathUtils.TWO_PI . get () - NUMBER_CONSTANT ;
Distance : 7

61
Tree	final int n1n2prod = n2 - n2 [ n2 ] ;
Code	final int n1n2prod = n2 - n2 [ n2 ] ;
Distance : 6

62
Tree	final int n2 = n2 + NUMBER_CONSTANT ;
Code	final int n2 = n2 + NUMBER_CONSTANT ;
Distance : 5

63
Tree	final int n1n2prod = CHAR_CONS / n2 ;
Code	final int n1n2prod = CHAR_CONS / n2 ;
Distance : 3

64
Tree	final int n1n2prod = n1 ^ n2 ;
Code	final int n1n2prod = n1 ^ n2 ;
Distance : 2

65
Tree	final int n2 = n1 * n2 / n2 ;
Code	final int n2 = n1 * n2 / n2 ;
Distance : 4

66
Tree	final int n1n2prod = location [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Code	final int n1n2prod = location [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Distance : 11

67
Tree	final int n1n2prod = MathUtils.TWO_PI . getAnchorPoint () - NUMBER_CONSTANT ;
Code	final int n1n2prod = MathUtils.TWO_PI . getAnchorPoint () - NUMBER_CONSTANT ;
Distance : 7

68
Tree	final int n1n2prod = ^ * n2 * n2 ;
Code	final int n1n2prod = ^ * n2 * n2 ;
Distance : 4

69
Tree	final int n1n2prod = ^ * n2 ;
Code	final int n1n2prod = ^ * n2 ;
Distance : 2

70
Tree	final int n1n2prod = ^ / n1 ;
Code	final int n1n2prod = ^ / n1 ;
Distance : 4

71
Tree	final int n1n2prod = n2 ^ n2 ;
Code	final int n1n2prod = n2 ^ n2 ;
Distance : 3

72
Tree	final int n1n2prod = / * n2 * n1 ;
Code	final int n1n2prod = / * n2 * n1 ;
Distance : 4

73
Tree	final int n2 = NUMBER_CONSTANT - n2 ;
Code	final int n2 = NUMBER_CONSTANT - n2 ;
Distance : 4

74
Tree	final int n1n2prod = NUMBER_CONSTANT * f.length ;
Code	final int n1n2prod = NUMBER_CONSTANT * f.length ;
Distance : 3

75
Tree	final int n1n2prod = n2 + NUMBER_CONSTANT ;
Code	final int n1n2prod = n2 + NUMBER_CONSTANT ;
Distance : 4

76
Tree	final int n1n2prod = n1 [ n1 ] + STRING_CONSTANT + Object [ n2 ] ;
Code	final int n1n2prod = n1 [ n1 ] + STRING_CONSTANT + Object [ n2 ] ;
Distance : 10

77
Tree	abstract int n1n2prod = n1 + NUMBER_CONSTANT ;
Code	abstract int n1n2prod = n1 + NUMBER_CONSTANT ;
Distance : 4

78
Tree	final int n1n2prod = ^ / n2 ;
Code	final int n1n2prod = ^ / n2 ;
Distance : 3

79
Tree	final double n1n2prod = CHAR_CONS + n2 ;
Code	final double n1n2prod = CHAR_CONS + n2 ;
Distance : 2

80
Tree	final double n1n2prod = n1 > n1 ;
Code	final double n1n2prod = n1 > n1 ;
Distance : 2

81
Tree	final int n1n2prod = n1 - % ;
Code	final int n1n2prod = n1 - % ;
Distance : 3

82
Tree	final int n2 = n1 - n2 [ n2 ] ;
Code	final int n2 = n1 - n2 [ n2 ] ;
Distance : 6

83
Tree	final int n1 = n1 == CHAR_CONS ;
Code	final int n1 = n1 == CHAR_CONS ;
Distance : 4

84
Tree	final int n1n2prod = n1 * n1 / n1 ;
Code	final int n1n2prod = n1 * n1 / n1 ;
Distance : 4

85
Tree	final int n1n2prod = ( long ) n1 * n2 ;
Code	final int n1n2prod = ( long ) n1 * n2 ;
Distance : 4

86
Tree	final int n1n2prod = CHAR_CONS * n1 ;
Code	final int n1n2prod = CHAR_CONS * n1 ;
Distance : 3

87
Tree	final int n1n2prod = super * n1 ;
Code	final int n1n2prod = super * n1 ;
Distance : 3

88
Tree	final int n1n2prod = ( int ) n1 * n2 ;
Code	final int n1n2prod = ( int ) n1 * n2 ;
Distance : 4

89
Tree	final int n1n2prod = u [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Code	final int n1n2prod = u [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Distance : 11

90
Tree	final int n1n2prod = n1 [ n2 ] + STRING_CONSTANT + size [ n2 ] ;
Code	final int n1n2prod = n1 [ n2 ] + STRING_CONSTANT + size [ n2 ] ;
Distance : 10

91
Tree	final int n1n2prod = NUMBER_CONSTANT * currentState.length ;
Code	final int n1n2prod = NUMBER_CONSTANT * currentState.length ;
Distance : 3

92
Tree	final int n1n2prod = NUMBER_CONSTANT * y.length ;
Code	final int n1n2prod = NUMBER_CONSTANT * y.length ;
Distance : 3

93
Tree	final double n1n2prod = n1 == CHAR_CONS ;
Code	final double n1n2prod = n1 == CHAR_CONS ;
Distance : 2

94
Tree	final int n2 = n1 ^ n1 ;
Code	final int n2 = n1 ^ n1 ;
Distance : 4

95
Tree	final int n1n2prod = NUMBER_CONSTANT * IncrementalCheckMode.GENERATE_IJS ;
Code	final int n1n2prod = NUMBER_CONSTANT * IncrementalCheckMode.GENERATE_IJS ;
Distance : 3

96
Tree	final int n1 = n2 > > NUMBER_CONSTANT ;
Code	final int n1 = n2 > > NUMBER_CONSTANT ;
Distance : 6

97
Tree	final int n1n2prod = n1 - n2 [ n1 ] ;
Code	final int n1n2prod = n1 - n2 [ n1 ] ;
Distance : 5

98
Tree	final int n1n2prod = n1 * n2 ;
Code	final int n1n2prod = n1 * n2 ;
Distance : 1

99
Tree	final int n1n2prod = n1 - scale [ n2 ] ;
Code	final int n1n2prod = n1 - scale [ n2 ] ;
Distance : 5

100
Tree	final int n1n2prod = MathUtils.TWO_PI . is () - NUMBER_CONSTANT ;
Code	final int n1n2prod = MathUtils.TWO_PI . is () - NUMBER_CONSTANT ;
Distance : 7

101
Tree	final int n1n2prod = ( long ) n1 * n1 ;
Code	final int n1n2prod = ( long ) n1 * n1 ;
Distance : 5

102
Tree	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * FunctionFlavor.NORMAL ;
Code	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * FunctionFlavor.NORMAL ;
Distance : 6

103
Tree	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * Boolean.FALSE ;
Code	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * Boolean.FALSE ;
Distance : 6

104
Tree	final int n1n2prod = MathUtils.TWO_PI . clone () - NUMBER_CONSTANT ;
Code	final int n1n2prod = MathUtils.TWO_PI . clone () - NUMBER_CONSTANT ;
Distance : 7

105
Tree	final int n1n2prod = n1 . get () - NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 . get () - NUMBER_CONSTANT ;
Distance : 6

106
Tree	final int n1n2prod = ( int ) n1 * n1 ;
Code	final int n1n2prod = ( int ) n1 * n1 ;
Distance : 5

107
Tree	final int n1n2prod = n1 - / ;
Code	final int n1n2prod = n1 - / ;
Distance : 3

108
Tree	final int n1 = n1 > n1 ;
Code	final int n1 = n1 > n1 ;
Distance : 4

109
Tree	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * iChronology.MILLIS_PER_DAY ;
Code	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * iChronology.MILLIS_PER_DAY ;
Distance : 6

110
Tree	final int n1n2prod = NUMBER_CONSTANT * LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ;
Code	final int n1n2prod = NUMBER_CONSTANT * LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ;
Distance : 3

111
Tree	final int n1n2prod = n1 * n2 / n1 ;
Code	final int n1n2prod = n1 * n2 / n1 ;
Distance : 3

112
Tree	final int n1n2prod = n1 * n1 ;
Code	final int n1n2prod = n1 * n1 ;
Distance : 2

113
Tree	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ;
Code	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ;
Distance : 6

114
Tree	final int n1n2prod = {} * n2 * n2 ;
Code	final int n1n2prod = {} * n2 * n2 ;
Distance : 4

115
Tree	final int n1n2prod = NUMBER_CONSTANT - n1 ;
Code	final int n1n2prod = NUMBER_CONSTANT - n1 ;
Distance : 4

116
Tree	final int n2 = n1 - / ;
Code	final int n2 = n1 - / ;
Distance : 4

117
Tree	final int n1n2prod = n1 ^ n1 ;
Code	final int n1n2prod = n1 ^ n1 ;
Distance : 3

118
Tree	final int n1n2prod = MathUtils.TWO_PI . abs () - NUMBER_CONSTANT ;
Code	final int n1n2prod = MathUtils.TWO_PI . abs () - NUMBER_CONSTANT ;
Distance : 7

119
Tree	final int n1n2prod = n2 ^ n1 ;
Code	final int n1n2prod = n2 ^ n1 ;
Distance : 4

120
Tree	final int n2 = n2 == CHAR_CONS ;
Code	final int n2 = n2 == CHAR_CONS ;
Distance : 5

121
Tree	final int n1 = NUMBER_CONSTANT / n1 ;
Code	final int n1 = NUMBER_CONSTANT / n1 ;
Distance : 5

122
Tree	final int n2 = n1 * n2 / n1 ;
Code	final int n2 = n1 * n2 / n1 ;
Distance : 4

123
Tree	final int n1n2prod = n1 - <> ;
Code	final int n1n2prod = n1 - <> ;
Distance : 3

124
Tree	final double n1n2prod = n2 > > NUMBER_CONSTANT ;
Code	final double n1n2prod = n2 > > NUMBER_CONSTANT ;
Distance : 4

125
Tree	final int n1n2prod = n2 * n2 ;
Code	final int n1n2prod = n2 * n2 ;
Distance : 2

126
Tree	final int n1n2prod = super * n2 * n1 ;
Code	final int n1n2prod = super * n2 * n1 ;
Distance : 4

127
Tree	final int n1 = CHAR_CONS + n2 ;
Code	final int n1 = CHAR_CONS + n2 ;
Distance : 4

128
Tree	final int n1n2prod = NUMBER_CONSTANT / n2 ;
Code	final int n1n2prod = NUMBER_CONSTANT / n2 ;
Distance : 3

129
Tree	final int n1n2prod = n2 [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Code	final int n1n2prod = n2 [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Distance : 11

130
Tree	final int n1n2prod = super * n1 * n2 ;
Code	final int n1n2prod = super * n1 * n2 ;
Distance : 3

131
Tree	final int n1n2prod = n1 - &= ;
Code	final int n1n2prod = n1 - &= ;
Distance : 3

132
Tree	final double n1n2prod = NUMBER_CONSTANT / n1 ;
Code	final double n1n2prod = NUMBER_CONSTANT / n1 ;
Distance : 3

133
Tree	final int n1n2prod = / * n1 ;
Code	final int n1n2prod = / * n1 ;
Distance : 3

134
Tree	final int n2 = n1 > > NUMBER_CONSTANT ;
Code	final int n2 = n1 > > NUMBER_CONSTANT ;
Distance : 5

135
Tree	final int n2 = NUMBER_CONSTANT / n2 ;
Code	final int n2 = NUMBER_CONSTANT / n2 ;
Distance : 4

136
Tree	final int n1n2prod = ( long ) n2 * n2 ;
Code	final int n1n2prod = ( long ) n2 * n2 ;
Distance : 5

137
Tree	final int n2 = n1 + NUMBER_CONSTANT ;
Code	final int n2 = n1 + NUMBER_CONSTANT ;
Distance : 4

138
Tree	final int n1n2prod = super * n2 ;
Code	final int n1n2prod = super * n2 ;
Distance : 2

139
Tree	final int n1n2prod = n2 - / ;
Code	final int n1n2prod = n2 - / ;
Distance : 4

140
Tree	final int n1n2prod = NUMBER_CONSTANT * n2 * n1 * FunctionFlavor.NORMAL ;
Code	final int n1n2prod = NUMBER_CONSTANT * n2 * n1 * FunctionFlavor.NORMAL ;
Distance : 6

141
Tree	final int n1n2prod = n1 + NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 + NUMBER_CONSTANT ;
Distance : 3

142
Tree	final int n1n2prod = {} / n1 ;
Code	final int n1n2prod = {} / n1 ;
Distance : 4

143
Tree	final int n1n2prod = n2 > n1 ;
Code	final int n1n2prod = n2 > n1 ;
Distance : 4

144
Tree	final int n2 = n2 ^ n2 ;
Code	final int n2 = n2 ^ n2 ;
Distance : 4

145
Tree	final int n1 = n1 * n2 ;
Code	final int n1 = n1 * n2 ;
Distance : 2

146
Tree	final int n1n2prod = n1 > > NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 > > NUMBER_CONSTANT ;
Distance : 4

147
Tree	final int n1n2prod = n1 - ? ;
Code	final int n1n2prod = n1 - ? ;
Distance : 3

148
Tree	final int n1n2prod = n1 [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Code	final int n1n2prod = n1 [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Distance : 10

149
Tree	final int n2 = n1 * n2 ;
Code	final int n2 = n1 * n2 ;
Distance : 2

150
Tree	final int n1n2prod = NUMBER_CONSTANT * Color.BLUE ;
Code	final int n1n2prod = NUMBER_CONSTANT * Color.BLUE ;
Distance : 3

151
Tree	final byte n1n2prod = n1 > > NUMBER_CONSTANT ;
Code	final byte n1n2prod = n1 > > NUMBER_CONSTANT ;
Distance : 4

152
Tree	final int n1 = n2 + NUMBER_CONSTANT ;
Code	final int n1 = n2 + NUMBER_CONSTANT ;
Distance : 5

153
Tree	final int n2 = n1 > n2 ;
Code	final int n2 = n1 > n2 ;
Distance : 3

154
Tree	final int n1 = CHAR_CONS + n1 ;
Code	final int n1 = CHAR_CONS + n1 ;
Distance : 5

155
Tree	final int n1 = n1 ^ n1 ;
Code	final int n1 = n1 ^ n1 ;
Distance : 4

156
Tree	final byte n1n2prod = n1 + NUMBER_CONSTANT ;
Code	final byte n1n2prod = n1 + NUMBER_CONSTANT ;
Distance : 3

157
Tree	final double n1n2prod = n1 * n2 ;
Code	final double n1n2prod = n1 * n2 ;
Distance : 0

158
Tree	final int n1 = n1 > > NUMBER_CONSTANT ;
Code	final int n1 = n1 > > NUMBER_CONSTANT ;
Distance : 5

159
Tree	final double n1n2prod = n1 > > NUMBER_CONSTANT ;
Code	final double n1n2prod = n1 > > NUMBER_CONSTANT ;
Distance : 3

160
Tree	final int n2 = n1 == CHAR_CONS ;
Code	final int n2 = n1 == CHAR_CONS ;
Distance : 4

161
Tree	final int n2 = n2 > > NUMBER_CONSTANT ;
Code	final int n2 = n2 > > NUMBER_CONSTANT ;
Distance : 6

162
Tree	final int n2 = CHAR_CONS + n2 ;
Code	final int n2 = CHAR_CONS + n2 ;
Distance : 4

163
Tree	final int n2 = CHAR_CONS + n1 ;
Code	final int n2 = CHAR_CONS + n1 ;
Distance : 5

164
Tree	final int n1n2prod = n2 * n2 / n1 ;
Code	final int n1n2prod = n2 * n2 / n1 ;
Distance : 4

165
Tree	final int n1n2prod = / * n2 * n2 ;
Code	final int n1n2prod = / * n2 * n2 ;
Distance : 4

166
Tree	final int n1n2prod = ( int ) n2 * n2 ;
Code	final int n1n2prod = ( int ) n2 * n2 ;
Distance : 5

167
Tree	final double n1n2prod = n2 + NUMBER_CONSTANT ;
Code	final double n1n2prod = n2 + NUMBER_CONSTANT ;
Distance : 3

168
Tree	final int n1 = n1 * n1 ;
Code	final int n1 = n1 * n1 ;
Distance : 3

169
Tree	final double n1n2prod = NUMBER_CONSTANT / n2 ;
Code	final double n1n2prod = NUMBER_CONSTANT / n2 ;
Distance : 2

170
Tree	final int n1n2prod = n1 == CHAR_CONS ;
Code	final int n1n2prod = n1 == CHAR_CONS ;
Distance : 3

171
Tree	abstract int n1n2prod = n1 > > NUMBER_CONSTANT ;
Code	abstract int n1n2prod = n1 > > NUMBER_CONSTANT ;
Distance : 5

172
Tree	final int n1n2prod = n1 > n1 ;
Code	final int n1n2prod = n1 > n1 ;
Distance : 3

173
Tree	final int n1n2prod = / / n1 ;
Code	final int n1n2prod = / / n1 ;
Distance : 4

174
Tree	final int n1n2prod = range [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Code	final int n1n2prod = range [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Distance : 11

175
Tree	final int n1n2prod = n1 - facetB [ n2 ] ;
Code	final int n1n2prod = n1 - facetB [ n2 ] ;
Distance : 5

176
Tree	final int n2 = n1 > n1 ;
Code	final int n2 = n1 > n1 ;
Distance : 4

177
Tree	final int n2 = n1 ^ n2 ;
Code	final int n2 = n1 ^ n2 ;
Distance : 3

178
Tree	final double n1n2prod = CHAR_CONS + n1 ;
Code	final double n1n2prod = CHAR_CONS + n1 ;
Distance : 3

179
Tree	final int n1 = NUMBER_CONSTANT / n2 ;
Code	final int n1 = NUMBER_CONSTANT / n2 ;
Distance : 4

180
Tree	final int n1 = NUMBER_CONSTANT - n2 ;
Code	final int n1 = NUMBER_CONSTANT - n2 ;
Distance : 4

181
Tree	final int n1n2prod = n1 - ^ ;
Code	final int n1n2prod = n1 - ^ ;
Distance : 3

182
Tree	final int n2 = NUMBER_CONSTANT / n1 ;
Code	final int n2 = NUMBER_CONSTANT / n1 ;
Distance : 5

183
Tree	final double n1n2prod = n2 == CHAR_CONS ;
Code	final double n1n2prod = n2 == CHAR_CONS ;
Distance : 3

184
Tree	final int n1 = n1 ^ n2 ;
Code	final int n1 = n1 ^ n2 ;
Distance : 3

185
Tree	final int n1 = n1 > n2 ;
Code	final int n1 = n1 > n2 ;
Distance : 3

186
Tree	abstract int n1n2prod = NUMBER_CONSTANT / n2 ;
Code	abstract int n1n2prod = NUMBER_CONSTANT / n2 ;
Distance : 4

187
Tree	final byte n1n2prod = CHAR_CONS + n2 ;
Code	final byte n1n2prod = CHAR_CONS + n2 ;
Distance : 3

188
Tree	final byte n1n2prod = CHAR_CONS + n1 ;
Code	final byte n1n2prod = CHAR_CONS + n1 ;
Distance : 4

189
Tree	final int n2 = NUMBER_CONSTANT - n1 ;
Code	final int n2 = NUMBER_CONSTANT - n1 ;
Distance : 5

190
Tree	final byte n1n2prod = n1 == CHAR_CONS ;
Code	final byte n1n2prod = n1 == CHAR_CONS ;
Distance : 3

191
Tree	final double n1n2prod = n1 ^ n2 ;
Code	final double n1n2prod = n1 ^ n2 ;
Distance : 1

192
Tree	final int n1 = NUMBER_CONSTANT - n1 ;
Code	final int n1 = NUMBER_CONSTANT - n1 ;
Distance : 5

193
Tree	final int n1 = n2 == CHAR_CONS ;
Code	final int n1 = n2 == CHAR_CONS ;
Distance : 5

194
Tree	final double n1n2prod = NUMBER_CONSTANT - n2 ;
Code	final double n1n2prod = NUMBER_CONSTANT - n2 ;
Distance : 2

195
Tree	abstract int n1n2prod = n1 == CHAR_CONS ;
Code	abstract int n1n2prod = n1 == CHAR_CONS ;
Distance : 4

196
Tree	final double n1n2prod = NUMBER_CONSTANT - n1 ;
Code	final double n1n2prod = NUMBER_CONSTANT - n1 ;
Distance : 3

197
Tree	final byte n1n2prod = NUMBER_CONSTANT / n2 ;
Code	final byte n1n2prod = NUMBER_CONSTANT / n2 ;
Distance : 3

198
Tree	final byte n1n2prod = NUMBER_CONSTANT - n2 ;
Code	final byte n1n2prod = NUMBER_CONSTANT - n2 ;
Distance : 3

199
Tree	abstract int n1n2prod = NUMBER_CONSTANT - n2 ;
Code	abstract int n1n2prod = NUMBER_CONSTANT - n2 ;
Distance : 4

========================================================================


========================================================================
Example Number: 75
Parent Code is: 
if ( y >= TWO_POWER_52  y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( y >= TWO_POWER_53  y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=y}) (251{val=>=}) (800{val=TWO_POWER_52})) (250{val=||}) (27 (800{val=y}) (252{val=<=}) (38 (201{val=-}) (800{val=TWO_POWER_52})))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=pow}) (214{val=(}) (38 (201{val=-}) (800{val=x})) (234{val=,}) (800{val=y}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=y}) (251{val=>=}) (800{val=TWO_POWER_53})) (250{val=||}) (27 (800{val=y}) (252{val=<=}) (38 (201{val=-}) (800{val=TWO_POWER_53})))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=pow}) (214{val=(}) (38 (201{val=-}) (800{val=x})) (234{val=,}) (800{val=y}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/15/parent/src_main_java_org_apache_commons_math3_util_FastMath.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( y >= y y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

1
Tree	if ( y == CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y == CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 5

2
Tree	if ( y >= NUMBER_CONSTANT y y <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y y <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

3
Tree	if ( y.length != null TWO_POWER_52 TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y.length != null TWO_POWER_52 TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 6

4
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Distance : 6

5
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

6
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < y.length ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < y.length ) { return pow ( - x , y ) ; }
Distance : 6

7
Tree	if ( v.length != null TWO_POWER_52 TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( v.length != null TWO_POWER_52 TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 6

8
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 < y.length ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 < y.length ) { return pow ( - x , y ) ; }
Distance : 6

9
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

10
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 4

11
Tree	if ( y >= NUMBER_CONSTANT y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

12
Tree	if ( x.length != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x.length != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

13
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

14
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

15
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 != - y ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 != - y ) { return pow ( - x , y ) ; }
Distance : 5

16
Tree	if ( y >= NUMBER_CONSTANT y y <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y y <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 4

17
Tree	if ( y >= NUMBER_CONSTANT y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

18
Tree	if ( y == CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y == CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

19
Tree	if ( y >= NUMBER_CONSTANT y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

20
Tree	if ( TWO_POWER_52 >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

21
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 < MathUtils.TWO_PI ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 < MathUtils.TWO_PI ) { return pow ( - x , y ) ; }
Distance : 6

22
Tree	if ( x >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( x >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 5

23
Tree	if ( y >= NUMBER_CONSTANT y x != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y x != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 5

24
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 5

25
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

26
Tree	if ( y >= TWO_POWER_52 y x <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 4

27
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

28
Tree	if ( y >= TWO_POWER_52 y x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

29
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 < Integer.MAX_VALUE ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 < Integer.MAX_VALUE ) { return pow ( - x , y ) ; }
Distance : 6

30
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 5

31
Tree	if ( y == CHAR_CONS TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y == CHAR_CONS TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

32
Tree	if ( y == CHAR_CONS TWO_POWER_52 TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y == CHAR_CONS TWO_POWER_52 TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 6

33
Tree	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

34
Tree	if ( y >= x y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= x y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

35
Tree	if ( y > - TWO_POWER_52 - TWO_POWER_52 < / ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 - TWO_POWER_52 < / ) { return pow ( - x , y ) ; }
Distance : 7

36
Tree	if ( y >= TWO_POWER_52 - x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 - x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

37
Tree	if ( x >= NUMBER_CONSTANT y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x >= NUMBER_CONSTANT y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

38
Tree	if ( x >= TWO_POWER_52 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

39
Tree	if ( y >= x y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= x y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

40
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

41
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 < v.length ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 < v.length ) { return pow ( - x , y ) ; }
Distance : 6

42
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

43
Tree	if ( y >= NUMBER_CONSTANT y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

44
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

45
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y != - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y != - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 5

46
Tree	if ( y >= y y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= y y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 5

47
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

48
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Distance : 3

49
Tree	if ( y == CHAR_CONS y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y == CHAR_CONS y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

50
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 6

51
Tree	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

52
Tree	if ( y >= NUMBER_CONSTANT y x <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y x <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 4

53
Tree	if ( x >= NUMBER_CONSTANT y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x >= NUMBER_CONSTANT y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

54
Tree	if ( y >= NUMBER_CONSTANT y x != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y x != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

55
Tree	if ( y > - x.length y TWO_POWER_52 < Precision.SAFE_MIN ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y TWO_POWER_52 < Precision.SAFE_MIN ) { return pow ( - x , y ) ; }
Distance : 6

56
Tree	if ( y > - x.length - TWO_POWER_52 < MathUtils.TWO_PI ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length - TWO_POWER_52 < MathUtils.TWO_PI ) { return pow ( - x , y ) ; }
Distance : 7

57
Tree	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

58
Tree	if ( y > - / y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Code	if ( y > - / y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Distance : 6

59
Tree	if ( y >= y y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

60
Tree	if ( y > - Double.NaN y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Code	if ( y > - Double.NaN y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Distance : 6

61
Tree	if ( y == CHAR_CONS TWO_POWER_52 TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Code	if ( y == CHAR_CONS TWO_POWER_52 TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Distance : 5

62
Tree	if ( x == CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x == CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

63
Tree	if ( y >= x y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= x y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

64
Tree	if ( y > - v.length y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Code	if ( y > - v.length y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Distance : 6

65
Tree	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

66
Tree	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

67
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 10

68
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

69
Tree	if ( y.length != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y.length != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

70
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - TWO_POWER_52 < pow ( - x , y ) * x ) /
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - TWO_POWER_52 < pow ( - x , y ) * x ) /
Distance : 14

71
Tree	if ( v.length != null y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( v.length != null y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

72
Tree	if ( y >= pow ( x , NUMBER_CONSTANT , y ) <= y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( x , NUMBER_CONSTANT , y ) <= y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 10

73
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= TWO_POWER_52 < pow ( - x , x ) * x ) /
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= TWO_POWER_52 < pow ( - x , x ) * x ) /
Distance : 15

74
Tree	if ( TWO_POWER_52 >= NUMBER_CONSTANT y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= NUMBER_CONSTANT y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

75
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 10

76
Tree	if ( y > - y y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Code	if ( y > - y y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Distance : 6

77
Tree	if ( x >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( x >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 7

78
Tree	if ( y >= pow ( x , NUMBER_CONSTANT , y ) <= y < pow ( - x , y ) * x ) /
Code	if ( y >= pow ( x , NUMBER_CONSTANT , y ) <= y < pow ( - x , y ) * x ) /
Distance : 14

79
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

80
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= y <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= y <= - y ) { return pow ( - x , y ) ; }
Distance : 10

81
Tree	if ( y >= TWO_POWER_52 - TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 - TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 6

82
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y != - y ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y != - y ) { return pow ( - x , y ) ; }
Distance : 4

83
Tree	if ( y >= NUMBER_CONSTANT y y != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y y != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 5

84
Tree	if ( y != - TWO_POWER_52 y y < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y y < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Distance : 6

85
Tree	if ( y > - y.length y TWO_POWER_52 < y.length ) { return pow ( - x , y ) ; }
Code	if ( y > - y.length y TWO_POWER_52 < y.length ) { return pow ( - x , y ) ; }
Distance : 6

86
Tree	if ( y >= TWO_POWER_52 y x != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y x != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 5

87
Tree	if ( y >= CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

88
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= x < pow ( - x , y ) * x ) /
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= x < pow ( - x , y ) * x ) /
Distance : 14

89
Tree	if ( y >= TWO_POWER_52 y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

90
Tree	if ( x >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

91
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - y ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - y ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

92
Tree	if ( x.length != null y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x.length != null y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

93
Tree	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

94
Tree	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

95
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Distance : 6

96
Tree	if ( y.length != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y.length != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

97
Tree	if ( v.length != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( v.length != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

98
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < Precision.SAFE_MIN ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < Precision.SAFE_MIN ) { return pow ( - x , y ) ; }
Distance : 6

99
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

100
Tree	if ( y == CHAR_CONS y y <= - y ) { return pow ( - x , y ) ; }
Code	if ( y == CHAR_CONS y y <= - y ) { return pow ( - x , y ) ; }
Distance : 4

101
Tree	if ( x.length != null TWO_POWER_52 TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x.length != null TWO_POWER_52 TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 6

102
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

103
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

104
Tree	if ( y == CHAR_CONS TWO_POWER_52 TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y == CHAR_CONS TWO_POWER_52 TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

105
Tree	if ( y >= NUMBER_CONSTANT y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

106
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 5

107
Tree	if ( Integer.MAX_VALUE != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( Integer.MAX_VALUE != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

108
Tree	if ( y >= TWO_POWER_52 - NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 - NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 5

109
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= y < pow ( - x , y ) * x ) <=
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= y < pow ( - x , y ) * x ) <=
Distance : 14

110
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

111
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

112
Tree	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

113
Tree	if ( x.length != null TWO_POWER_52 TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x.length != null TWO_POWER_52 TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 6

114
Tree	if ( y >= x y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= x y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

115
Tree	if ( y >= y y NUMBER_CONSTANT - y ) { return pow ( - x , y ) ; }
Code	if ( y >= y y NUMBER_CONSTANT - y ) { return pow ( - x , y ) ; }
Distance : 3

116
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - y ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - y ) { return pow ( - x , y ) ; }
Distance : 4

117
Tree	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 6

118
Tree	if ( Integer.MAX_VALUE != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( Integer.MAX_VALUE != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

119
Tree	if ( MathUtils.TWO_PI != null y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( MathUtils.TWO_PI != null y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

120
Tree	if ( y >= CHAR_CONS y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

121
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 < sample2.length ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 < sample2.length ) { return pow ( - x , y ) ; }
Distance : 6

122
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < currentState.length ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < currentState.length ) { return pow ( - x , y ) ; }
Distance : 6

123
Tree	if ( y >= CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

124
Tree	if ( y >= y y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

125
Tree	if ( c.length != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( c.length != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

126
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

127
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , y ) ; }
Distance : 4

128
Tree	if ( y >= NUMBER_CONSTANT y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

129
Tree	if ( MathUtils.TWO_PI != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( MathUtils.TWO_PI != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

130
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 10

131
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

132
Tree	if ( y >= NUMBER_CONSTANT y y <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y <= - y ) { return pow ( - x , y ) ; }
Distance : 3

133
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

134
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Distance : 6

135
Tree	if ( x.length != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( x.length != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 6

136
Tree	if ( y >= pow ( x , NUMBER_CONSTANT , y ) <= TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( x , NUMBER_CONSTANT , y ) <= TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 10

137
Tree	if ( y > - x.length y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Distance : 6

138
Tree	if ( x >= NUMBER_CONSTANT y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x >= NUMBER_CONSTANT y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

139
Tree	if ( x.length != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( x.length != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 6

140
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - y < pow ( - x , y ) * x ) /
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - y < pow ( - x , y ) * x ) /
Distance : 14

141
Tree	if ( y >= TWO_POWER_52 y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

142
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Distance : 10

143
Tree	if ( y >= pow ( x , NUMBER_CONSTANT , y ) <= TWO_POWER_52 < pow ( - x , y ) * x ) /
Code	if ( y >= pow ( x , NUMBER_CONSTANT , y ) <= TWO_POWER_52 < pow ( - x , y ) * x ) /
Distance : 14

144
Tree	if ( y >= pow ( y , NUMBER_CONSTANT , y ) - TWO_POWER_52 < pow ( - x , y ) * x ) /
Code	if ( y >= pow ( y , NUMBER_CONSTANT , y ) - TWO_POWER_52 < pow ( - x , y ) * x ) /
Distance : 13

145
Tree	if ( y.length != null y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y.length != null y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

146
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

147
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , MathUtils.TWO_PI , y , x.length ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , MathUtils.TWO_PI , y , x.length ) ; }
Distance : 10

148
Tree	if ( y >= TWO_POWER_52 y x != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

149
Tree	if ( y >= y y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 4

150
Tree	if ( x >= TWO_POWER_52 y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

151
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 5

152
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - y ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - y ) { return pow ( - x , x ) ; }
Distance : 5

153
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 11

154
Tree	if ( y >= CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

155
Tree	if ( y >= CHAR_CONS y y <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y y <= - y ) { return pow ( - x , y ) ; }
Distance : 3

156
Tree	if ( y >= CHAR_CONS y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

157
Tree	if ( v.length != null y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( v.length != null y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

158
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , x.length , y , v2.y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , x.length , y , v2.y ) ; }
Distance : 10

159
Tree	if ( y >= x - TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= x - TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

160
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , x.length , y , x.length ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , x.length , y , x.length ) ; }
Distance : 10

161
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - x ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - x ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

162
Tree	if ( c.length != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( c.length != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

163
Tree	if ( y >= CHAR_CONS y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= CHAR_CONS y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

164
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= TWO_POWER_52 < pow ( - x , y ) * x ) <=
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= TWO_POWER_52 < pow ( - x , y ) * x ) <=
Distance : 14

165
Tree	if ( x >= NUMBER_CONSTANT y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x >= NUMBER_CONSTANT y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

166
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , x.length , y , TextAnchor.TOP_CENTER ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , x.length , y , TextAnchor.TOP_CENTER ) ; }
Distance : 10

167
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , Integer.MAX_VALUE , y , x.length ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , Integer.MAX_VALUE , y , x.length ) ; }
Distance : 10

168
Tree	if ( y >= y y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= y y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

169
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

170
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , v.length , y , x.length ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , v.length , y , x.length ) ; }
Distance : 10

171
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - y ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - y ) { return pow ( - x , y ) ; }
Distance : 3

172
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , Math.PI , y , x.length ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , Math.PI , y , x.length ) ; }
Distance : 10

173
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 10

174
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 4

175
Tree	if ( y >= x y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= x y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

176
Tree	if ( x >= CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x >= CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

177
Tree	if ( y > - y.length y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Code	if ( y > - y.length y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Distance : 6

178
Tree	if ( x >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

179
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= TWO_POWER_52 < pow ( - x , y ) * x ) /
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= TWO_POWER_52 < pow ( - x , y ) * x ) /
Distance : 14

180
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

181
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , x.length , y , Precision.SAFE_MIN ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , x.length , y , Precision.SAFE_MIN ) ; }
Distance : 10

182
Tree	if ( y >= CHAR_CONS y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

183
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 10

184
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - y ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - y ) { return pow ( - x , x ) ; }
Distance : 4

185
Tree	if ( y >= CHAR_CONS y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Distance : 3

186
Tree	if ( y > - x.length y TWO_POWER_52 < y.length ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y TWO_POWER_52 < y.length ) { return pow ( - x , y ) ; }
Distance : 6

187
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < sample2.length ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < sample2.length ) { return pow ( - x , y ) ; }
Distance : 6

188
Tree	if ( y > - x.length y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Distance : 6

189
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < SHORTCUT ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < SHORTCUT ) { return pow ( - x , y ) ; }
Distance : 6

190
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

191
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , Double.NaN , y , x.length ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , Double.NaN , y , x.length ) ; }
Distance : 10

192
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Distance : 6

193
Tree	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

194
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Distance : 3

195
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < Integer.MAX_VALUE ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < Integer.MAX_VALUE ) { return pow ( - x , y ) ; }
Distance : 6

196
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , x.length , y , Double.MIN_VALUE ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , x.length , y , Double.MIN_VALUE ) ; }
Distance : 10

197
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 < Precision.SAFE_MIN ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 < Precision.SAFE_MIN ) { return pow ( - x , y ) ; }
Distance : 6

198
Tree	if ( y == CHAR_CONS y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y == CHAR_CONS y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

199
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < MathUtils.TWO_PI ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < MathUtils.TWO_PI ) { return pow ( - x , y ) ; }
Distance : 6

========================================================================


========================================================================
Example Number: 76
Parent Code is: 
FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
-------------------------------------------------------------------------------
Child code is: 
FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - NUMBER_CONSTANT * dim ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (40{val=FastMath.PI})) (234{val=,}) (27 (38 (201{val=-}) (800{val=dim})) (203{val=/}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (800{val=covarianceMatrixDeterminant}) (234{val=,}) (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (802{val=getExponentTerm}) (214{val=(}) (800{val=vals}) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (40{val=FastMath.PI})) (234{val=,}) (27 (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (202{val=*}) (800{val=dim})) (215{val=)})) (202{val=*}) (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (800{val=covarianceMatrixDeterminant}) (234{val=,}) (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (802{val=getExponentTerm}) (214{val=(}) (800{val=vals}) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/11/parent/src_main_java_org_apache_commons_math3_distribution_MultivariateNormalDistribution.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 40
Wrong
========================================================================
False

0
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( vals )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( vals )
Distance : 16

1
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , FastMath ) * FastMath . pow ( vals )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , FastMath ) * FastMath . pow ( vals )
Distance : 17

2
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - dim
Distance : 16

3
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - getExponentTerm
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - getExponentTerm
Distance : 15

4
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - dim
Distance : 15

5
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Distance : 16

6
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( dim )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( dim )
Distance : 17

7
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( FastMath )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( FastMath )
Distance : 17

8
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - FastMath
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - FastMath
Distance : 16

9
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( covarianceMatrixDeterminant )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( covarianceMatrixDeterminant )
Distance : 16

10
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

11
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * pow ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * pow ( vals )
Distance : 5

12
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

13
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * pow ( FastMath )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * pow ( FastMath )
Distance : 6

14
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * pow ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * pow ( vals )
Distance : 5

15
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * pow ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * pow ( vals )
Distance : 5

16
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 3

17
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( vals )
Distance : 4

18
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

19
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( FastMath )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( FastMath )
Distance : 5

20
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - getExponentTerm
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - getExponentTerm
Distance : 14

21
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - dim
Distance : 16

22
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - vals
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - vals
Distance : 15

23
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - FastMath
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - FastMath
Distance : 15

24
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - getExponentTerm
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - getExponentTerm
Distance : 15

25
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . pow ( vals ) - dim
Distance : 20

26
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Distance : 19

27
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . pow ( vals ) - dim
Distance : 20

28
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . pow ( vals ) - dim
Distance : 20

29
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Distance : 19

30
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Distance : 19

31
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , FastMath ) * FastMath . pow ( covarianceMatrixDeterminant )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , FastMath ) * FastMath . pow ( covarianceMatrixDeterminant )
Distance : 17

32
Tree	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . pow ( vals ) - dim
Distance : 21

33
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . pow ( vals ) - getExponentTerm
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . pow ( vals ) - getExponentTerm
Distance : 20

34
Tree	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . getExponentTerm ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * getExponentTerm ( vals ) . getExponentTerm ( vals ) - dim
Distance : 20

35
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * getExponentTerm ( vals ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * getExponentTerm ( vals ) . pow ( vals ) - dim
Distance : 21

36
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , FastMath ) * FastMath . pow ( FastMath )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , FastMath ) * FastMath . pow ( FastMath )
Distance : 18

37
Tree	FastMath / vals * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( vals )
Code	FastMath / vals * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( vals )
Distance : 16

38
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( vals )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( vals )
Distance : 16

39
Tree	FastMath / dim * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( vals )
Code	FastMath / dim * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( vals )
Distance : 16

========================================================================


========================================================================
Example Number: 77
Parent Code is: 
iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ;
-------------------------------------------------------------------------------
Child code is: 
iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (800{val=iterations}) (204{val==}) (14 (304{val=new}) (43 (801{val=Incrementor})) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=MaxIterCallback})) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (800{val=iterations}) (204{val==}) (14 (304{val=new}) (43 (801{val=Incrementor})) (214{val=(}) (40{val=Integer.MAX_VALUE}) (234{val=,}) (14 (304{val=new}) (43 (801{val=MaxIterCallback})) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/6/parent/src_main_java_org_apache_commons_math3_optim_BaseOptimizer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	iterations = new Incrementor ( return; , iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( return; , iterations , new MaxIterCallback () ) ;
Distance : 3

1
Tree	iterations = new Incrementor < iterations > ( iterations , false ) ; MathRuntimeException
Code	iterations = new Incrementor < iterations > ( iterations , false ) ; MathRuntimeException
Distance : 8

2
Tree	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; array
Code	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; array
Distance : 6

3
Tree	iterations = new Incrementor ( new Incrementor () ) ; -
Code	iterations = new Incrementor ( new Incrementor () ) ; -
Distance : 4

4
Tree	iterations = new Incrementor ( new Incrementor () ) ; notifyListeners
Code	iterations = new Incrementor ( new Incrementor () ) ; notifyListeners
Distance : 4

5
Tree	iterations = new Incrementor ( new Incrementor () ) ; class
Code	iterations = new Incrementor ( new Incrementor () ) ; class
Distance : 4

6
Tree	iterations = new Incrementor ( new Incrementor () ) ; array
Code	iterations = new Incrementor ( new Incrementor () ) ; array
Distance : 4

7
Tree	iterations = new Incrementor ( new Incrementor () ) ; mock
Code	iterations = new Incrementor ( new Incrementor () ) ; mock
Distance : 4

8
Tree	iterations = new Incrementor ( iterations , moduleGraph () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , moduleGraph () , new MaxIterCallback () ) ;
Distance : 4

9
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , super(); ) ;
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , super(); ) ;
Distance : 5

10
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , true , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , true , iterations ) ;
Distance : 7

11
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , FeatureSet.ES3 , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , FeatureSet.ES3 , iterations ) ;
Distance : 7

12
Tree	iterations = new Incrementor ( break; , iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( break; , iterations , new MaxIterCallback () ) ;
Distance : 3

13
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , ODEIntegrator , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , ODEIntegrator , iterations ) ;
Distance : 7

14
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , hex , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , hex , iterations ) ;
Distance : 7

15
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , Dialog , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , Dialog , iterations ) ;
Distance : 7

16
Tree	iterations = new iterations ( iterations , boundDifference () , new MaxIterCallback () ) ;
Code	iterations = new iterations ( iterations , boundDifference () , new MaxIterCallback () ) ;
Distance : 5

17
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , CHAR_CONS , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , CHAR_CONS , iterations ) ;
Distance : 7

18
Tree	iterations = new Incrementor ( new Incrementor ( default: ) ) ;
Code	iterations = new Incrementor ( new Incrementor ( default: ) ) ;
Distance : 5

19
Tree	iterations = new Incrementor ( this , new MaxIterCallback () ) ; Override
Code	iterations = new Incrementor ( this , new MaxIterCallback () ) ; Override
Distance : 2

20
Tree	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; MathRuntimeException
Code	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; MathRuntimeException
Distance : 6

21
Tree	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; notifyListeners
Code	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; notifyListeners
Distance : 6

22
Tree	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; mock
Code	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; mock
Distance : 6

23
Tree	iterations = new Incrementor ( break; , iterations , new MaxIterCallback () , null ) ;
Code	iterations = new Incrementor ( break; , iterations , new MaxIterCallback () , null ) ;
Distance : 5

24
Tree	iterations = new Incrementor ( continue; , iterations , new MaxIterCallback () , null ) ;
Code	iterations = new Incrementor ( continue; , iterations , new MaxIterCallback () , null ) ;
Distance : 5

25
Tree	iterations = new Incrementor ( return; , iterations , new MaxIterCallback () , null ) ;
Code	iterations = new Incrementor ( return; , iterations , new MaxIterCallback () , null ) ;
Distance : 5

26
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , break; ) ;
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , break; ) ;
Distance : 5

27
Tree	iterations = new Incrementor < iterations > ( default: ) ;
Code	iterations = new Incrementor < iterations > ( default: ) ;
Distance : 6

28
Tree	iterations = new Incrementor ( new Incrementor ( super(); ) , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new Incrementor ( super(); ) , Integer.MAX_VALUE ) ;
Distance : 7

29
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , continue; ) ;
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , continue; ) ;
Distance : 5

30
Tree	iterations = new Incrementor ( iterations , Calendar.MINUTE () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , Calendar.MINUTE () , new MaxIterCallback () ) ;
Distance : 4

31
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , hex ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , hex ) ;
Distance : 3

32
Tree	iterations = new Incrementor ( new Incrementor ( return; ) , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new Incrementor ( return; ) , Integer.MAX_VALUE ) ;
Distance : 7

33
Tree	iterations = new Incrementor ( new Incrementor ( break; ) , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new Incrementor ( break; ) , Integer.MAX_VALUE ) ;
Distance : 7

34
Tree	iterations = new Incrementor ( new Incrementor ( continue; ) , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new Incrementor ( continue; ) , Integer.MAX_VALUE ) ;
Distance : 7

35
Tree	iterations = new Incrementor ( new Incrementor ( default: ) , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new Incrementor ( default: ) , Integer.MAX_VALUE ) ;
Distance : 7

36
Tree	iterations = new Incrementor ( iterations , getNaNStrategy () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , getNaNStrategy () , new MaxIterCallback () ) ;
Distance : 4

37
Tree	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; [
Code	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; [
Distance : 6

38
Tree	iterations = new Incrementor ( this , new MaxIterCallback () ) ; MathRuntimeException
Code	iterations = new Incrementor ( this , new MaxIterCallback () ) ; MathRuntimeException
Distance : 2

39
Tree	iterations = new Incrementor < iterations > () ; -
Code	iterations = new Incrementor < iterations > () ; -
Distance : 7

40
Tree	iterations = new Incrementor < iterations > () ; [
Code	iterations = new Incrementor < iterations > () ; [
Distance : 7

41
Tree	iterations = new iterations ( iterations , getNodes () , new MaxIterCallback () ) ;
Code	iterations = new iterations ( iterations , getNodes () , new MaxIterCallback () ) ;
Distance : 5

42
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , return; ) ;
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , return; ) ;
Distance : 5

43
Tree	iterations = new Incrementor ( iterations , isInClosurizedFile () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , isInClosurizedFile () , new MaxIterCallback () ) ;
Distance : 4

44
Tree	iterations = new Incrementor ( this , new MaxIterCallback () ) ; class
Code	iterations = new Incrementor ( this , new MaxIterCallback () ) ; class
Distance : 2

45
Tree	iterations = new Incrementor ( this , new MaxIterCallback () ) ; f
Code	iterations = new Incrementor ( this , new MaxIterCallback () ) ; f
Distance : 2

46
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , CHAR_CONS , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , CHAR_CONS , iterations ) ;
Distance : 4

47
Tree	iterations = new Incrementor ( new Incrementor ( null ) ) ; options
Code	iterations = new Incrementor ( new Incrementor ( null ) ) ; options
Distance : 6

48
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , formatMethodCall ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , formatMethodCall ) ;
Distance : 2

49
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , FeatureSet.ES3 ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , FeatureSet.ES3 ) ;
Distance : 2

50
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , Color.green ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , Color.green ) ;
Distance : 2

51
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , ReplaceIdGenerators.CONDITIONAL_ID_GENERATOR_CALL ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , ReplaceIdGenerators.CONDITIONAL_ID_GENERATOR_CALL ) ;
Distance : 2

52
Tree	iterations = new Incrementor ( new Incrementor () , FeatureSet.ES3 , false ) ;
Code	iterations = new Incrementor ( new Incrementor () , FeatureSet.ES3 , false ) ;
Distance : 6

53
Tree	iterations = new Incrementor ( new Incrementor () , NAME_DEFINED_LATE_WARNING , false ) ;
Code	iterations = new Incrementor ( new Incrementor () , NAME_DEFINED_LATE_WARNING , false ) ;
Distance : 6

54
Tree	iterations = new Incrementor ( new Incrementor () , ^ , false ) ;
Code	iterations = new Incrementor ( new Incrementor () , ^ , false ) ;
Distance : 6

55
Tree	iterations = new Incrementor ( new Incrementor () , iterations ) ; -
Code	iterations = new Incrementor ( new Incrementor () , iterations ) ; -
Distance : 6

56
Tree	iterations = new Incrementor ( new Incrementor () , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR , false ) ;
Code	iterations = new Incrementor ( new Incrementor () , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR , false ) ;
Distance : 6

57
Tree	iterations = new Incrementor < iterations > ( iterations , false ) ; Preconditions
Code	iterations = new Incrementor < iterations > ( iterations , false ) ; Preconditions
Distance : 8

58
Tree	iterations = new Incrementor ( new Incrementor () , iterations ) ; notifyListeners
Code	iterations = new Incrementor ( new Incrementor () , iterations ) ; notifyListeners
Distance : 6

59
Tree	iterations = new Incrementor ( new Incrementor () , iterations ) ; class
Code	iterations = new Incrementor ( new Incrementor () , iterations ) ; class
Distance : 6

60
Tree	iterations = new Incrementor ( new Incrementor () , iterations ) ; array
Code	iterations = new Incrementor ( new Incrementor () , iterations ) ; array
Distance : 6

61
Tree	iterations = new Incrementor ( new Incrementor () , iterations ) ; mock
Code	iterations = new Incrementor ( new Incrementor () , iterations ) ; mock
Distance : 6

62
Tree	iterations = new Incrementor ( new Incrementor () , iterations ) ; MathRuntimeException
Code	iterations = new Incrementor ( new Incrementor () , iterations ) ; MathRuntimeException
Distance : 6

63
Tree	iterations = new Incrementor ( new Incrementor () , iterations ) ; Override
Code	iterations = new Incrementor ( new Incrementor () , iterations ) ; Override
Distance : 6

64
Tree	iterations = new Incrementor ( new Incrementor () , iterations ) ; f
Code	iterations = new Incrementor ( new Incrementor () , iterations ) ; f
Distance : 6

65
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; array
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; array
Distance : 2

66
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; class
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; class
Distance : 2

67
Tree	iterations = new iterations ( iterations , getTolerance () , new MaxIterCallback () ) ;
Code	iterations = new iterations ( iterations , getTolerance () , new MaxIterCallback () ) ;
Distance : 5

68
Tree	iterations = new Incrementor ( false ) ; f
Code	iterations = new Incrementor ( false ) ; f
Distance : 6

69
Tree	iterations = new Incrementor ( false ) ; ParamChecks
Code	iterations = new Incrementor ( false ) ; ParamChecks
Distance : 6

70
Tree	iterations = new Incrementor ( new Incrementor ( null ) , Integer.MAX_VALUE ) ; p
Code	iterations = new Incrementor ( new Incrementor ( null ) , Integer.MAX_VALUE ) ; p
Distance : 8

71
Tree	iterations = new Incrementor < iterations > ( iterations , false ) ; ParamChecks
Code	iterations = new Incrementor < iterations > ( iterations , false ) ; ParamChecks
Distance : 8

72
Tree	iterations = new Incrementor ( new Incrementor ( null ) , Integer.MAX_VALUE ) ; i
Code	iterations = new Incrementor ( new Incrementor ( null ) , Integer.MAX_VALUE ) ; i
Distance : 8

73
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () ) ; i
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () ) ; i
Distance : 4

74
Tree	iterations = new Incrementor < iterations > ( iterations , false ) ; f
Code	iterations = new Incrementor < iterations > ( iterations , false ) ; f
Distance : 8

75
Tree	iterations = new Incrementor ( new Incrementor ( null ) , Integer.MAX_VALUE ) ; value
Code	iterations = new Incrementor ( new Incrementor ( null ) , Integer.MAX_VALUE ) ; value
Distance : 8

76
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () ) ; value
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () ) ; value
Distance : 4

77
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () ) ; options
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () ) ; options
Distance : 4

78
Tree	iterations = new Incrementor ( new Incrementor ( super(); ) ) ;
Code	iterations = new Incrementor ( new Incrementor ( super(); ) ) ;
Distance : 5

79
Tree	iterations = new Incrementor ( false ) ; Class
Code	iterations = new Incrementor ( false ) ; Class
Distance : 6

80
Tree	iterations = new Incrementor < iterations > ( super(); ) ;
Code	iterations = new Incrementor < iterations > ( super(); ) ;
Distance : 6

81
Tree	iterations = new Incrementor < iterations > ( iterations , true ) ;
Code	iterations = new Incrementor < iterations > ( iterations , true ) ;
Distance : 7

82
Tree	iterations = new Incrementor ( false ) ; MathRuntimeException
Code	iterations = new Incrementor ( false ) ; MathRuntimeException
Distance : 6

83
Tree	iterations = new Incrementor ( false ) ; {}
Code	iterations = new Incrementor ( false ) ; {}
Distance : 6

84
Tree	iterations = new Incrementor ( false ) ; Test
Code	iterations = new Incrementor ( false ) ; Test
Distance : 6

85
Tree	iterations = new Incrementor ( new Incrementor ( null ) , Integer.MAX_VALUE ) ; options
Code	iterations = new Incrementor ( new Incrementor ( null ) , Integer.MAX_VALUE ) ; options
Distance : 8

86
Tree	iterations = new Incrementor < iterations > () ; mock
Code	iterations = new Incrementor < iterations > () ; mock
Distance : 7

87
Tree	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; -
Code	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; -
Distance : 6

88
Tree	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; Override
Code	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; Override
Distance : 6

89
Tree	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; f
Code	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; f
Distance : 6

90
Tree	iterations = new Incrementor < iterations > ( iterations , false ) ;
Code	iterations = new Incrementor < iterations > ( iterations , false ) ;
Distance : 7

91
Tree	iterations = new Incrementor < iterations > () ; array
Code	iterations = new Incrementor < iterations > () ; array
Distance : 7

92
Tree	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ;
Distance : 5

93
Tree	iterations = new Incrementor ( this , new MaxIterCallback () ) ; array
Code	iterations = new Incrementor ( this , new MaxIterCallback () ) ; array
Distance : 2

94
Tree	iterations = new Incrementor ( new Incrementor () , formatMethodCall , false ) ;
Code	iterations = new Incrementor ( new Incrementor () , formatMethodCall , false ) ;
Distance : 6

95
Tree	iterations = new Incrementor ( iterations , getTolerance () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , getTolerance () , new MaxIterCallback () ) ;
Distance : 4

96
Tree	iterations = new Incrementor ( iterations , getNodes () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , getNodes () , new MaxIterCallback () ) ;
Distance : 4

97
Tree	iterations = new Incrementor ( iterations , boundDifference () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , boundDifference () , new MaxIterCallback () ) ;
Distance : 4

98
Tree	iterations = new Incrementor ( new Incrementor ( null ) ) ; i
Code	iterations = new Incrementor ( new Incrementor ( null ) ) ; i
Distance : 6

99
Tree	iterations = new Incrementor < iterations > () ; notifyListeners
Code	iterations = new Incrementor < iterations > () ; notifyListeners
Distance : 7

100
Tree	iterations = new Incrementor < iterations > () ; f
Code	iterations = new Incrementor < iterations > () ; f
Distance : 7

101
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , CHAR_CONS ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , CHAR_CONS ) ;
Distance : 3

102
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , CHAR_CONS ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , CHAR_CONS ) ;
Distance : 2

103
Tree	iterations = new Incrementor ( iterations , BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY () , new MaxIterCallback () ) ;
Distance : 4

104
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , hex ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , hex ) ;
Distance : 2

105
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , else ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , else ) ;
Distance : 3

106
Tree	iterations = new Incrementor < iterations > () ; class
Code	iterations = new Incrementor < iterations > () ; class
Distance : 7

107
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR ) ;
Distance : 3

108
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , else ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , else ) ;
Distance : 2

109
Tree	iterations = new iterations ( iterations , BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY () , new MaxIterCallback () ) ;
Code	iterations = new iterations ( iterations , BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY () , new MaxIterCallback () ) ;
Distance : 5

110
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , NAME_DEFINED_LATE_WARNING ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , NAME_DEFINED_LATE_WARNING ) ;
Distance : 3

111
Tree	iterations = new iterations ( iterations , isInClosurizedFile () , new MaxIterCallback () ) ;
Code	iterations = new iterations ( iterations , isInClosurizedFile () , new MaxIterCallback () ) ;
Distance : 5

112
Tree	iterations = new iterations ( iterations , Calendar.MINUTE () , new MaxIterCallback () ) ;
Code	iterations = new iterations ( iterations , Calendar.MINUTE () , new MaxIterCallback () ) ;
Distance : 5

113
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR ) ;
Distance : 2

114
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , ReplaceIdGenerators.CONDITIONAL_ID_GENERATOR_CALL ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , ReplaceIdGenerators.CONDITIONAL_ID_GENERATOR_CALL ) ;
Distance : 3

115
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , Color.green ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , Color.green ) ;
Distance : 3

116
Tree	iterations = new Incrementor ( iterations , LangVersion.TYPESCRIPT () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , LangVersion.TYPESCRIPT () , new MaxIterCallback () ) ;
Distance : 4

117
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , FeatureSet.ES3 ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , FeatureSet.ES3 ) ;
Distance : 3

118
Tree	iterations = new iterations ( iterations , LangVersion.TYPESCRIPT () , new MaxIterCallback () ) ;
Code	iterations = new iterations ( iterations , LangVersion.TYPESCRIPT () , new MaxIterCallback () ) ;
Distance : 5

119
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , ToStringBuilder ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , ToStringBuilder ) ;
Distance : 3

120
Tree	iterations = new iterations ( iterations , getDiagnosticGroups () , new MaxIterCallback () ) ;
Code	iterations = new iterations ( iterations , getDiagnosticGroups () , new MaxIterCallback () ) ;
Distance : 5

121
Tree	iterations = new Incrementor < iterations > () ; Override
Code	iterations = new Incrementor < iterations > () ; Override
Distance : 7

122
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , realMatrixFormat ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , realMatrixFormat ) ;
Distance : 3

123
Tree	iterations = new Incrementor ( new Incrementor () , ToStringBuilder , false ) ;
Code	iterations = new Incrementor ( new Incrementor () , ToStringBuilder , false ) ;
Distance : 6

124
Tree	iterations = new Incrementor ( new Incrementor () , InvocationMarker , false ) ;
Code	iterations = new Incrementor ( new Incrementor () , InvocationMarker , false ) ;
Distance : 6

125
Tree	iterations = new iterations ( iterations , getNaNStrategy () , new MaxIterCallback () ) ;
Code	iterations = new iterations ( iterations , getNaNStrategy () , new MaxIterCallback () ) ;
Distance : 5

126
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , NAME_DEFINED_LATE_WARNING ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , NAME_DEFINED_LATE_WARNING ) ;
Distance : 2

127
Tree	iterations = new Incrementor ( new Incrementor ( null ) ) ; p
Code	iterations = new Incrementor ( new Incrementor ( null ) ) ; p
Distance : 6

128
Tree	iterations = new Incrementor < iterations > ( iterations , false ) ; -
Code	iterations = new Incrementor < iterations > ( iterations , false ) ; -
Distance : 8

129
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () ) ;
Distance : 3

130
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; notifyListeners
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; notifyListeners
Distance : 2

131
Tree	iterations = new iterations ( iterations , moduleGraph () , new MaxIterCallback () ) ;
Code	iterations = new iterations ( iterations , moduleGraph () , new MaxIterCallback () ) ;
Distance : 5

132
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , ^ ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , ^ ) ;
Distance : 2

133
Tree	iterations = new Incrementor ( new Incrementor ( null ) , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new Incrementor ( null ) , Integer.MAX_VALUE ) ;
Distance : 7

134
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , null ) ;
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , null ) ;
Distance : 5

135
Tree	iterations = new Incrementor < iterations > ( iterations , false ) ; Class
Code	iterations = new Incrementor < iterations > ( iterations , false ) ; Class
Distance : 8

136
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR , iterations ) ;
Distance : 4

137
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , ^ , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , ^ , iterations ) ;
Distance : 7

138
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , NAME_DEFINED_LATE_WARNING , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , NAME_DEFINED_LATE_WARNING , iterations ) ;
Distance : 4

139
Tree	iterations = new Incrementor ( super(); , iterations , new MaxIterCallback () , null ) ;
Code	iterations = new Incrementor ( super(); , iterations , new MaxIterCallback () , null ) ;
Distance : 5

140
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , ^ , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , ^ , iterations ) ;
Distance : 4

141
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , ReplaceIdGenerators.CONDITIONAL_ID_GENERATOR_CALL , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , ReplaceIdGenerators.CONDITIONAL_ID_GENERATOR_CALL , iterations ) ;
Distance : 4

142
Tree	iterations = new Incrementor ( new Incrementor () ) ; Override
Code	iterations = new Incrementor ( new Incrementor () ) ; Override
Distance : 4

143
Tree	iterations = new Incrementor ( new Incrementor () ) ; f
Code	iterations = new Incrementor ( new Incrementor () ) ; f
Distance : 4

144
Tree	iterations = new Incrementor ( new Incrementor () ) ; [
Code	iterations = new Incrementor ( new Incrementor () ) ; [
Distance : 4

145
Tree	iterations = new Incrementor < iterations > ( null ) ; i
Code	iterations = new Incrementor < iterations > ( null ) ; i
Distance : 7

146
Tree	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; class
Code	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; class
Distance : 6

147
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , Color.green , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , Color.green , iterations ) ;
Distance : 4

148
Tree	iterations = new Incrementor ( false ) ;
Code	iterations = new Incrementor ( false ) ;
Distance : 5

149
Tree	iterations = new Incrementor ( true ) ;
Code	iterations = new Incrementor ( true ) ;
Distance : 5

150
Tree	iterations = new Incrementor < iterations > () ;
Code	iterations = new Incrementor < iterations > () ;
Distance : 6

151
Tree	iterations = new Incrementor ( new Incrementor () ) ;
Code	iterations = new Incrementor ( new Incrementor () ) ;
Distance : 3

152
Tree	iterations = new Incrementor < iterations > ( null ) ;
Code	iterations = new Incrementor < iterations > ( null ) ;
Distance : 6

153
Tree	iterations = new Incrementor ( new Incrementor ( null ) ) ;
Code	iterations = new Incrementor ( new Incrementor ( null ) ) ;
Distance : 5

154
Tree	iterations = new Incrementor < iterations > ( null ) ; value
Code	iterations = new Incrementor < iterations > ( null ) ; value
Distance : 7

155
Tree	iterations = new Incrementor ( this , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( this , new MaxIterCallback () ) ;
Distance : 1

156
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , FeatureSet.ES3 , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , FeatureSet.ES3 , iterations ) ;
Distance : 4

157
Tree	iterations = new Incrementor < iterations > ( null ) ; options
Code	iterations = new Incrementor < iterations > ( null ) ; options
Distance : 7

158
Tree	iterations = new Incrementor < iterations > ( null ) ; p
Code	iterations = new Incrementor < iterations > ( null ) ; p
Distance : 7

159
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , formatMethodCall , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , formatMethodCall , iterations ) ;
Distance : 4

160
Tree	iterations = new Incrementor ( continue; , iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( continue; , iterations , new MaxIterCallback () ) ;
Distance : 3

161
Tree	iterations = new Incrementor ( this , new MaxIterCallback () ) ; mock
Code	iterations = new Incrementor ( this , new MaxIterCallback () ) ; mock
Distance : 2

162
Tree	iterations = new Incrementor ( new Incrementor () , CHAR_CONS , false ) ;
Code	iterations = new Incrementor ( new Incrementor () , CHAR_CONS , false ) ;
Distance : 6

163
Tree	iterations = new Incrementor ( new Incrementor () , hex , false ) ;
Code	iterations = new Incrementor ( new Incrementor () , hex , false ) ;
Distance : 6

164
Tree	iterations = new Incrementor ( new Incrementor () , else , false ) ;
Code	iterations = new Incrementor ( new Incrementor () , else , false ) ;
Distance : 6

165
Tree	iterations = new Incrementor ( new Incrementor ( null ) ) ; value
Code	iterations = new Incrementor ( new Incrementor ( null ) ) ; value
Distance : 6

166
Tree	iterations = new Incrementor ( this , new MaxIterCallback () ) ; -
Code	iterations = new Incrementor ( this , new MaxIterCallback () ) ; -
Distance : 2

167
Tree	iterations = new Incrementor ( false ) ; -
Code	iterations = new Incrementor ( false ) ; -
Distance : 6

168
Tree	iterations = new Incrementor ( this , new MaxIterCallback () ) ; notifyListeners
Code	iterations = new Incrementor ( this , new MaxIterCallback () ) ; notifyListeners
Distance : 2

169
Tree	iterations = new Incrementor < iterations > ( iterations , false ) ; Test
Code	iterations = new Incrementor < iterations > ( iterations , false ) ; Test
Distance : 8

170
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; -
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; -
Distance : 2

171
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; [
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; [
Distance : 2

172
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; f
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; f
Distance : 2

173
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , false , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , false , iterations ) ;
Distance : 7

174
Tree	iterations = new Incrementor ( this , new MaxIterCallback () ) ; [
Code	iterations = new Incrementor ( this , new MaxIterCallback () ) ; [
Distance : 2

175
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; Override
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; Override
Distance : 2

176
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; MathRuntimeException
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; MathRuntimeException
Distance : 2

177
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; mock
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; mock
Distance : 2

178
Tree	iterations = new Incrementor ( new Incrementor () , iterations ) ; [
Code	iterations = new Incrementor ( new Incrementor () , iterations ) ; [
Distance : 6

179
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ;
Distance : 1

180
Tree	iterations = new Incrementor ( new Incrementor () ) ; MathRuntimeException
Code	iterations = new Incrementor ( new Incrementor () ) ; MathRuntimeException
Distance : 4

181
Tree	iterations = new Incrementor ( iterations , getDiagnosticGroups () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , getDiagnosticGroups () , new MaxIterCallback () ) ;
Distance : 4

182
Tree	iterations = new Incrementor < iterations > () ; MathRuntimeException
Code	iterations = new Incrementor < iterations > () ; MathRuntimeException
Distance : 7

183
Tree	iterations = new Incrementor < iterations > ( return; ) ;
Code	iterations = new Incrementor < iterations > ( return; ) ;
Distance : 6

184
Tree	iterations = new Incrementor ( new Incrementor ( break; ) ) ;
Code	iterations = new Incrementor ( new Incrementor ( break; ) ) ;
Distance : 5

185
Tree	iterations = new Incrementor ( new Incrementor ( continue; ) ) ;
Code	iterations = new Incrementor ( new Incrementor ( continue; ) ) ;
Distance : 5

186
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , hex , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , hex , iterations ) ;
Distance : 4

187
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , super , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , super , iterations ) ;
Distance : 7

188
Tree	iterations = new Incrementor < iterations > ( continue; ) ;
Code	iterations = new Incrementor < iterations > ( continue; ) ;
Distance : 6

189
Tree	iterations = new Incrementor < iterations > ( break; ) ;
Code	iterations = new Incrementor < iterations > ( break; ) ;
Distance : 6

190
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , else , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , else , iterations ) ;
Distance : 4

191
Tree	iterations = new Incrementor ( super(); , iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( super(); , iterations , new MaxIterCallback () ) ;
Distance : 3

192
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , else , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , else , iterations ) ;
Distance : 7

193
Tree	iterations = new Incrementor ( new Incrementor ( return; ) ) ;
Code	iterations = new Incrementor ( new Incrementor ( return; ) ) ;
Distance : 5

194
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () ) ; p
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () ) ; p
Distance : 4

195
Tree	iterations = new Incrementor ( new Incrementor () , iterations ) ;
Code	iterations = new Incrementor ( new Incrementor () , iterations ) ;
Distance : 5

196
Tree	iterations = new Incrementor ( false ) ; Preconditions
Code	iterations = new Incrementor ( false ) ; Preconditions
Distance : 6

197
Tree	iterations = new Incrementor < iterations > ( iterations , false ) ; {}
Code	iterations = new Incrementor < iterations > ( iterations , false ) ; {}
Distance : 8

198
Tree	iterations = new Incrementor ( default: , iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( default: , iterations , new MaxIterCallback () ) ;
Distance : 3

199
Tree	iterations = new Incrementor ( default: , iterations , new MaxIterCallback () , null ) ;
Code	iterations = new Incrementor ( default: , iterations , new MaxIterCallback () , null ) ;
Distance : 5

========================================================================


========================================================================
Example Number: 78
Parent Code is: 
if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Child code is: 
if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=real}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=imaginary}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=real}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=imaginary}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=INF}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/5/parent/src_main_java_org_apache_commons_math3_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( real == NUMBER_CONSTANT && estimationType () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && estimationType () == null ) { return NaN ; }
Distance : 4

1
Tree	if ( real == NUMBER_CONSTANT && imaginary < DisposalCheckingPolicy.OFF ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < DisposalCheckingPolicy.OFF ) { return NaN ; }
Distance : 3

2
Tree	if ( real == NUMBER_CONSTANT && RegularizedGamma.P == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && RegularizedGamma.P == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

3
Tree	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 4

4
Tree	if ( real == NUMBER_CONSTANT && getEnums () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && getEnums () == null ) { return NaN ; }
Distance : 4

5
Tree	if ( real == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Distance : 3

6
Tree	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Distance : 3

7
Tree	if ( real == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Distance : 3

8
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

9
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary != real ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary != real ) { return NaN ; }
Distance : 4

10
Tree	if ( real == NUMBER_CONSTANT && imaginary != real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != real ) { return NaN ; }
Distance : 3

11
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Distance : 4

12
Tree	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Distance : 3

13
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

14
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Distance : 4

15
Tree	if ( real == NUMBER_CONSTANT && imaginary < TypeInferenceMode.DISABLED ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < TypeInferenceMode.DISABLED ) { return NaN ; }
Distance : 3

16
Tree	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 4

17
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Distance : 4

18
Tree	if ( real == NUMBER_CONSTANT && imaginary <= isLastMatcherVarargMatcher () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= isLastMatcherVarargMatcher () ) { return NaN ; }
Distance : 4

19
Tree	if ( real == NUMBER_CONSTANT && imaginary != TernaryValue.TRUE ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != TernaryValue.TRUE ) { return NaN ; }
Distance : 3

20
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary <= real ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary <= real ) { return NaN ; }
Distance : 4

21
Tree	if ( real == NUMBER_CONSTANT && real > real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real > real ) { return NaN ; }
Distance : 4

22
Tree	if ( real == NUMBER_CONSTANT && real == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

23
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

24
Tree	if ( real == NUMBER_CONSTANT && real >= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real >= imaginary ) { return NaN ; }
Distance : 4

25
Tree	if ( real == NUMBER_CONSTANT && real != imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real != imaginary ) { return NaN ; }
Distance : 4

26
Tree	if ( real == NUMBER_CONSTANT && real && imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real && imaginary ) { return NaN ; }
Distance : 4

27
Tree	if ( real == NUMBER_CONSTANT && imaginary == getAbstractScope () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == getAbstractScope () ) { return NaN ; }
Distance : 3

28
Tree	if ( real == NUMBER_CONSTANT && RegularizedGamma.P () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && RegularizedGamma.P () == null ) { return NaN ; }
Distance : 4

29
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 3

30
Tree	if ( NaN == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Distance : 4

31
Tree	if ( real == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Distance : 2

32
Tree	if ( real == NUMBER_CONSTANT && TracerMode.OFF == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && TracerMode.OFF == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

33
Tree	if ( real . isAbstract ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . isAbstract ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

34
Tree	if ( real == NUMBER_CONSTANT && real < real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real < real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

35
Tree	if ( real == NUMBER_CONSTANT && ParseTreeType.CALL_EXPRESSION == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && ParseTreeType.CALL_EXPRESSION == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

36
Tree	if ( real . regionMatches ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . regionMatches ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

37
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

38
Tree	if ( real == NUMBER_CONSTANT && definitionsGatherer.definitions () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && definitionsGatherer.definitions () == null ) { return NaN ; }
Distance : 4

39
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 6

40
Tree	if ( NaN == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Distance : 3

41
Tree	if ( real == NUMBER_CONSTANT && imaginary == firstNonNull () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == firstNonNull () ) { return NaN ; }
Distance : 3

42
Tree	if ( real == NUMBER_CONSTANT && imaginary < rhs.b ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < rhs.b ) { return NaN ; }
Distance : 3

43
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 1

44
Tree	if ( real == NUMBER_CONSTANT && real == CHAR_CONS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real == CHAR_CONS ) { return NaN ; }
Distance : 3

45
Tree	if ( real == NUMBER_CONSTANT && real < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 6

46
Tree	if ( real . regionMatches ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . regionMatches ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

47
Tree	if ( imaginary == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

48
Tree	if ( real == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Distance : 3

49
Tree	if ( real == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Distance : 3

50
Tree	if ( real == NUMBER_CONSTANT && this == imaginary ) { return real ; }
Code	if ( real == NUMBER_CONSTANT && this == imaginary ) { return real ; }
Distance : 3

51
Tree	if ( imaginary == NUMBER_CONSTANT && real == CHAR_CONS ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && real == CHAR_CONS ) { return NaN ; }
Distance : 4

52
Tree	if ( NaN == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

53
Tree	if ( imaginary == NUMBER_CONSTANT && real < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && real < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 7

54
Tree	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 4

55
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + real ) { return NaN ; }
Distance : 5

56
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Distance : 3

57
Tree	if ( real == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Distance : 3

58
Tree	if ( real == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Distance : 3

59
Tree	if ( real == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

60
Tree	if ( real == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Distance : 3

61
Tree	if ( real == NUMBER_CONSTANT && TernaryValue.TRUE == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && TernaryValue.TRUE == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

62
Tree	if ( real == NUMBER_CONSTANT && real != real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real != real ) { return NaN ; }
Distance : 4

63
Tree	if ( NaN == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 6

64
Tree	if ( real == NUMBER_CONSTANT && real <= real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real <= real ) { return NaN ; }
Distance : 4

65
Tree	if ( real == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

66
Tree	if ( real == NUMBER_CONSTANT && LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

67
Tree	if ( real == NUMBER_CONSTANT && children == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && children == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

68
Tree	if ( real == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

69
Tree	if ( real == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

70
Tree	if ( real . escapeJson ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . escapeJson ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

71
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary < real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary < real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

72
Tree	if ( real == NUMBER_CONSTANT && imaginary != metadata.superClassNameNode ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != metadata.superClassNameNode ) { return NaN ; }
Distance : 3

73
Tree	if ( real . getMatchers ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . getMatchers ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

74
Tree	if ( real == NUMBER_CONSTANT && getObjTypeIfSingletonObj () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && getObjTypeIfSingletonObj () == null ) { return NaN ; }
Distance : 4

75
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 3

76
Tree	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + real ) { return NaN ; }
Distance : 4

77
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary && real ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary && real ) { return NaN ; }
Distance : 4

78
Tree	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return real ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return real ; }
Distance : 4

79
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 3

80
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

81
Tree	if ( real . copySelf ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . copySelf ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

82
Tree	if ( real . getPrinter ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . getPrinter ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

83
Tree	if ( real . isGeneric ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . isGeneric ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

84
Tree	if ( real == NUMBER_CONSTANT && imaginary < IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Distance : 3

85
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + real ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + real ) { return NaN ; }
Distance : 6

86
Tree	if ( real == NUMBER_CONSTANT && imaginary == getReferenceName () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == getReferenceName () ) { return NaN ; }
Distance : 3

87
Tree	if ( real == NUMBER_CONSTANT && imaginary < PropertyRenamingPolicy.ALL_UNQUOTED ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < PropertyRenamingPolicy.ALL_UNQUOTED ) { return NaN ; }
Distance : 3

88
Tree	if ( real == NUMBER_CONSTANT && definitionsGatherer.definitions == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && definitionsGatherer.definitions == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

89
Tree	if ( real == NUMBER_CONSTANT && requiredTypesBuilder () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && requiredTypesBuilder () == null ) { return NaN ; }
Distance : 4

90
Tree	if ( real == NUMBER_CONSTANT && imaginary < Long.MAX_VALUE ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < Long.MAX_VALUE ) { return NaN ; }
Distance : 3

91
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 1

92
Tree	if ( real == NUMBER_CONSTANT && imaginary < IncrementalCheckMode.OFF ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < IncrementalCheckMode.OFF ) { return NaN ; }
Distance : 3

93
Tree	if ( NaN == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

94
Tree	if ( real == NUMBER_CONSTANT && children () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && children () == null ) { return NaN ; }
Distance : 4

95
Tree	if ( real == NUMBER_CONSTANT && imaginary == Calendar.SUNDAY () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == Calendar.SUNDAY () ) { return NaN ; }
Distance : 3

96
Tree	if ( real == NUMBER_CONSTANT && imaginary != definitionsGatherer.definitions ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != definitionsGatherer.definitions ) { return NaN ; }
Distance : 3

97
Tree	if ( real == NUMBER_CONSTANT && imaginary () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary () == null ) { return NaN ; }
Distance : 3

98
Tree	if ( NaN == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Distance : 4

99
Tree	if ( real == NUMBER_CONSTANT && imaginary == findDomainAxisIndex () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == findDomainAxisIndex () ) { return NaN ; }
Distance : 3

100
Tree	if ( NaN == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Distance : 4

101
Tree	if ( imaginary == NUMBER_CONSTANT && real == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && real == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 6

102
Tree	if ( real == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Distance : 3

103
Tree	if ( imaginary == NUMBER_CONSTANT && this == real ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && this == real ) { return NaN ; }
Distance : 4

104
Tree	if ( real == NUMBER_CONSTANT && imaginary == rhs.b () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == rhs.b () ) { return NaN ; }
Distance : 3

105
Tree	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Distance : 3

106
Tree	if ( real == NUMBER_CONSTANT && real && real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real && real ) { return NaN ; }
Distance : 4

107
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 1

108
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 1

109
Tree	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Distance : 3

110
Tree	if ( real == NUMBER_CONSTANT && this == NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == NaN ) { return NaN ; }
Distance : 3

111
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Distance : 4

112
Tree	if ( real == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return real ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return real ; }
Distance : 2

113
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary >= real ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary >= real ) { return NaN ; }
Distance : 4

114
Tree	if ( real . size ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . size ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

115
Tree	if ( real == NUMBER_CONSTANT && NaN == CHAR_CONS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN == CHAR_CONS ) { return NaN ; }
Distance : 3

116
Tree	if ( real . getKey ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . getKey ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

117
Tree	if ( real == NUMBER_CONSTANT && real >= real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real >= real ) { return NaN ; }
Distance : 4

118
Tree	if ( real == NUMBER_CONSTANT && imaginary <= getIntercept () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= getIntercept () ) { return NaN ; }
Distance : 4

119
Tree	if ( real . isAbstract ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . isAbstract ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

120
Tree	if ( real == NUMBER_CONSTANT && imaginary != RegularizedGamma.P ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != RegularizedGamma.P ) { return NaN ; }
Distance : 3

121
Tree	if ( real == NUMBER_CONSTANT && imaginary < Year.MAXIMUM_YEAR ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < Year.MAXIMUM_YEAR ) { return NaN ; }
Distance : 3

122
Tree	if ( real == NUMBER_CONSTANT && imaginary <= isObjectLiteralThatCanBeSkipped () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= isObjectLiteralThatCanBeSkipped () ) { return NaN ; }
Distance : 4

123
Tree	if ( real == NUMBER_CONSTANT && imaginary <= withSettings () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= withSettings () ) { return NaN ; }
Distance : 4

124
Tree	if ( real == NUMBER_CONSTANT && imaginary == firstNonBottom () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == firstNonBottom () ) { return NaN ; }
Distance : 3

125
Tree	if ( real == NUMBER_CONSTANT && imaginary <= pluralize () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= pluralize () ) { return NaN ; }
Distance : 4

126
Tree	if ( real == NUMBER_CONSTANT && imaginary == withSettings () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == withSettings () ) { return NaN ; }
Distance : 3

127
Tree	if ( real == NUMBER_CONSTANT && getEnums == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && getEnums == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

128
Tree	if ( real . getMatchers ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . getMatchers ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

129
Tree	if ( real == NUMBER_CONSTANT && RenameStrategy.MAPPED == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && RenameStrategy.MAPPED == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

130
Tree	if ( real == NUMBER_CONSTANT && imaginary <= shouldEmitUseStrict () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= shouldEmitUseStrict () ) { return NaN ; }
Distance : 4

131
Tree	if ( real == NUMBER_CONSTANT && imaginary == getMask () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == getMask () ) { return NaN ; }
Distance : 3

132
Tree	if ( real . copySelf ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . copySelf ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

133
Tree	if ( real == NUMBER_CONSTANT && imaginary < real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

134
Tree	if ( real == NUMBER_CONSTANT && imaginary != IncrementalCheckMode.OFF ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != IncrementalCheckMode.OFF ) { return NaN ; }
Distance : 3

135
Tree	if ( real . isGeneric ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . isGeneric ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

136
Tree	if ( real == NUMBER_CONSTANT && imaginary != LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) { return NaN ; }
Distance : 3

137
Tree	if ( real == NUMBER_CONSTANT && imaginary != OutputJs.NORMAL ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != OutputJs.NORMAL ) { return NaN ; }
Distance : 3

138
Tree	if ( real == NUMBER_CONSTANT && imaginary <= getReferenceName () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= getReferenceName () ) { return NaN ; }
Distance : 4

139
Tree	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

140
Tree	if ( real == NUMBER_CONSTANT && imaginary <= LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED () ) { return NaN ; }
Distance : 4

141
Tree	if ( real == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Distance : 4

142
Tree	if ( real == NUMBER_CONSTANT && real == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

143
Tree	if ( real . getKey ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . getKey ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

144
Tree	if ( real . getPrinter ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . getPrinter ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

145
Tree	if ( real . toBooleanObject ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . toBooleanObject ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

146
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

147
Tree	if ( real == NUMBER_CONSTANT && imaginary <= real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= real ) { return NaN ; }
Distance : 3

148
Tree	if ( imaginary == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Distance : 4

149
Tree	if ( real == NUMBER_CONSTANT && imaginary && real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary && real ) { return NaN ; }
Distance : 3

150
Tree	if ( real == NUMBER_CONSTANT && imaginary <= isPointInRect () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= isPointInRect () ) { return NaN ; }
Distance : 4

151
Tree	if ( real == NUMBER_CONSTANT && imaginary == real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

152
Tree	if ( real == NUMBER_CONSTANT && imaginary == updateScopeForAssignment () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == updateScopeForAssignment () ) { return NaN ; }
Distance : 3

153
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 1

154
Tree	if ( real == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Distance : 3

155
Tree	if ( real == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Distance : 3

156
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 3

157
Tree	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 4

158
Tree	if ( real == NUMBER_CONSTANT && imaginary != TracerMode.OFF ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != TracerMode.OFF ) { return NaN ; }
Distance : 3

159
Tree	if ( real == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

160
Tree	if ( real == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

161
Tree	if ( real == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Distance : 3

162
Tree	if ( real == NUMBER_CONSTANT && imaginary != mant.length ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != mant.length ) { return NaN ; }
Distance : 3

163
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Distance : 4

164
Tree	if ( real == NUMBER_CONSTANT && real <= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real <= imaginary ) { return NaN ; }
Distance : 4

165
Tree	if ( real == NUMBER_CONSTANT && real < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

166
Tree	if ( real == NUMBER_CONSTANT && this == real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == real ) { return NaN ; }
Distance : 3

167
Tree	if ( real == NUMBER_CONSTANT && containsArray () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && containsArray () == null ) { return NaN ; }
Distance : 4

168
Tree	if ( real == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

169
Tree	if ( real . size ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . size ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

170
Tree	if ( real == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Distance : 3

171
Tree	if ( real == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Distance : 3

172
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 4

173
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

174
Tree	if ( NaN == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 4

175
Tree	if ( real == NUMBER_CONSTANT && imaginary < current.parent.scopes ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < current.parent.scopes ) { return NaN ; }
Distance : 3

176
Tree	if ( real == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Distance : 2

177
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

178
Tree	if ( NaN == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Distance : 4

179
Tree	if ( NaN == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

180
Tree	if ( real == NUMBER_CONSTANT && RenameStrategy.MAPPED () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && RenameStrategy.MAPPED () == null ) { return NaN ; }
Distance : 4

181
Tree	if ( NaN == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

182
Tree	if ( real == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Distance : 3

183
Tree	if ( real == NUMBER_CONSTANT && imaginary >= real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary >= real ) { return NaN ; }
Distance : 3

184
Tree	if ( real . escapeJson ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . escapeJson ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

185
Tree	if ( real == NUMBER_CONSTANT && imaginary != RenameStrategy.MAPPED ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != RenameStrategy.MAPPED ) { return NaN ; }
Distance : 3

186
Tree	if ( real == NUMBER_CONSTANT && imaginary <= anyObject () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= anyObject () ) { return NaN ; }
Distance : 4

187
Tree	if ( real == NUMBER_CONSTANT && imaginary < startConfiguration.length ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < startConfiguration.length ) { return NaN ; }
Distance : 3

188
Tree	if ( imaginary == NUMBER_CONSTANT && real == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && real == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

189
Tree	if ( real == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Distance : 3

190
Tree	if ( real == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Distance : 3

191
Tree	if ( real == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Distance : 2

192
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

193
Tree	if ( NaN == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Distance : 4

194
Tree	if ( real == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

195
Tree	if ( real == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Distance : 3

196
Tree	if ( real == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

197
Tree	if ( real == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Distance : 2

198
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return real ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return real ; }
Distance : 1

199
Tree	if ( real . toBooleanObject ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . toBooleanObject ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

========================================================================


========================================================================
Example Number: 79
Parent Code is: 
new Reporter () . smartNullPointerException ( location ) ;
-------------------------------------------------------------------------------
Child code is: 
new Reporter () . smartNullPointerException ( obj , location ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (32 (14 (304{val=new}) (43 (801{val=Reporter})) (216{val=()})) (235{val=.}) (802{val=smartNullPointerException}) (214{val=(}) (800{val=location}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (14 (304{val=new}) (43 (801{val=Reporter})) (216{val=()})) (235{val=.}) (802{val=smartNullPointerException}) (214{val=(}) (800{val=obj}) (234{val=,}) (800{val=location}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/30/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsSmartNulls.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	location . smartNullPointerException ( obj ) . smartNullPointerException ( obj ) ;
Code	location . smartNullPointerException ( obj ) . smartNullPointerException ( obj ) ;
Distance : 8

1
Tree	smartNullPointerException ( obj , obj ) ;
Code	smartNullPointerException ( obj , obj ) ;
Distance : 5

2
Tree	smartNullPointerException ( obj , location ) ;
Code	smartNullPointerException ( obj , location ) ;
Distance : 4

3
Tree	location . smartNullPointerException () . smartNullPointerException ( obj , location ) ;
Code	location . smartNullPointerException () . smartNullPointerException ( obj , location ) ;
Distance : 3

4
Tree	obj . smartNullPointerException () . smartNullPointerException ( obj , obj ) ;
Code	obj . smartNullPointerException () . smartNullPointerException ( obj , obj ) ;
Distance : 4

5
Tree	location . smartNullPointerException ( obj , true ) ;
Code	location . smartNullPointerException ( obj , true ) ;
Distance : 4

6
Tree	obj . smartNullPointerException ( obj , location , new Reporter () ) ;
Code	obj . smartNullPointerException ( obj , location , new Reporter () ) ;
Distance : 7

7
Tree	obj . smartNullPointerException ( obj , location ) ;
Code	obj . smartNullPointerException ( obj , location ) ;
Distance : 3

8
Tree	obj . smartNullPointerException ( obj , true ) ;
Code	obj . smartNullPointerException ( obj , true ) ;
Distance : 4

9
Tree	smartNullPointerException ( obj , obj , obj ) ;
Code	smartNullPointerException ( obj , obj , obj ) ;
Distance : 7

10
Tree	smartNullPointerException ( obj , location , obj ) ;
Code	smartNullPointerException ( obj , location , obj ) ;
Distance : 6

11
Tree	new Reporter ( location ) . smartNullPointerException ( location ) ;
Code	new Reporter ( location ) . smartNullPointerException ( location ) ;
Distance : 5

12
Tree	obj . smartNullPointerException ( obj ) . smartNullPointerException ( obj ) ;
Code	obj . smartNullPointerException ( obj ) . smartNullPointerException ( obj ) ;
Distance : 8

13
Tree	new Reporter () . smartNullPointerException ( location ) ; Class
Code	new Reporter () . smartNullPointerException ( location ) ; Class
Distance : 3

14
Tree	location . smartNullPointerException ( location , new Reporter () ) ; T
Code	location . smartNullPointerException ( location , new Reporter () ) ; T
Distance : 8

15
Tree	new Reporter () . smartNullPointerException ( obj ) . smartNullPointerException ( obj ) ;
Code	new Reporter () . smartNullPointerException ( obj ) . smartNullPointerException ( obj ) ;
Distance : 5

16
Tree	smartNullPointerException ( location , obj , obj ) ; Math
Code	smartNullPointerException ( location , obj , obj ) ; Math
Distance : 8

17
Tree	new Reporter () . smartNullPointerException ( location ) ; MathRuntimeException
Code	new Reporter () . smartNullPointerException ( location ) ; MathRuntimeException
Distance : 3

18
Tree	new Reporter () . smartNullPointerException ( location ) ; {}
Code	new Reporter () . smartNullPointerException ( location ) ; {}
Distance : 3

19
Tree	new Reporter () . smartNullPointerException ( location ) ; Preconditions
Code	new Reporter () . smartNullPointerException ( location ) ; Preconditions
Distance : 3

20
Tree	location . smartNullPointerException ( location , new Reporter () ) ; &&
Code	location . smartNullPointerException ( location , new Reporter () ) ; &&
Distance : 8

21
Tree	location . smartNullPointerException ( location ) ; source
Code	location . smartNullPointerException ( location ) ; source
Distance : 6

22
Tree	location . smartNullPointerException () . smartNullPointerException ( location ) ; p
Code	location . smartNullPointerException () . smartNullPointerException ( location ) ; p
Distance : 6

23
Tree	location . smartNullPointerException ( location , new Reporter () ) ; toString
Code	location . smartNullPointerException ( location , new Reporter () ) ; toString
Distance : 8

24
Tree	new Reporter () . smartNullPointerException ( location ) ; -
Code	new Reporter () . smartNullPointerException ( location ) ; -
Distance : 3

25
Tree	location . smartNullPointerException ( location ) ; options
Code	location . smartNullPointerException ( location ) ; options
Distance : 6

26
Tree	location . smartNullPointerException () . smartNullPointerException ( location ) ; &&
Code	location . smartNullPointerException () . smartNullPointerException ( location ) ; &&
Distance : 6

27
Tree	location . smartNullPointerException ( location ) ; p
Code	location . smartNullPointerException ( location ) ; p
Distance : 6

28
Tree	location . smartNullPointerException ( location ) ; &&
Code	location . smartNullPointerException ( location ) ; &&
Distance : 6

29
Tree	location . smartNullPointerException ( location ) ; T
Code	location . smartNullPointerException ( location ) ; T
Distance : 6

30
Tree	new Reporter () . smartNullPointerException ( location ) ; ParamChecks
Code	new Reporter () . smartNullPointerException ( location ) ; ParamChecks
Distance : 3

31
Tree	location . smartNullPointerException ( location , new Reporter ( location ) ) ; Math
Code	location . smartNullPointerException ( location , new Reporter ( location ) ) ; Math
Distance : 9

32
Tree	location . smartNullPointerException ( location , new Reporter () ) ; p
Code	location . smartNullPointerException ( location , new Reporter () ) ; p
Distance : 8

33
Tree	obj . smartNullPointerException ( location ) . smartNullPointerException ( obj ) ;
Code	obj . smartNullPointerException ( location ) . smartNullPointerException ( obj ) ;
Distance : 8

34
Tree	obj . smartNullPointerException ( obj , false ) ;
Code	obj . smartNullPointerException ( obj , false ) ;
Distance : 4

35
Tree	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( location ) ;
Code	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( location ) ;
Distance : 5

36
Tree	smartNullPointerException ( location ) ;
Code	smartNullPointerException ( location ) ;
Distance : 6

37
Tree	smartNullPointerException ( location ) . smartNullPointerException ( location ) ;
Code	smartNullPointerException ( location ) . smartNullPointerException ( location ) ;
Distance : 6

38
Tree	new Reporter () . smartNullPointerException ( location . smartNullPointerException () , location ) ;
Code	new Reporter () . smartNullPointerException ( location . smartNullPointerException () , location ) ;
Distance : 4

39
Tree	obj . smartNullPointerException ( location , new Reporter () ) ;
Code	obj . smartNullPointerException ( location , new Reporter () ) ;
Distance : 7

40
Tree	location . smartNullPointerException ( location ) ;
Code	location . smartNullPointerException ( location ) ;
Distance : 5

41
Tree	obj . smartNullPointerException ( false ) ;
Code	obj . smartNullPointerException ( false ) ;
Distance : 6

42
Tree	obj . smartNullPointerException () ;
Code	obj . smartNullPointerException () ;
Distance : 8

43
Tree	new Reporter () . smartNullPointerException ( obj ) . smartNullPointerException ( location ) ;
Code	new Reporter () . smartNullPointerException ( obj ) . smartNullPointerException ( location ) ;
Distance : 4

44
Tree	location . smartNullPointerException ( true ) ;
Code	location . smartNullPointerException ( true ) ;
Distance : 6

45
Tree	obj . smartNullPointerException ( true ) ;
Code	obj . smartNullPointerException ( true ) ;
Distance : 6

46
Tree	smartNullPointerException ( obj ) ;
Code	smartNullPointerException ( obj ) ;
Distance : 6

47
Tree	smartNullPointerException ( location ) . smartNullPointerException ( obj ) ;
Code	smartNullPointerException ( location ) . smartNullPointerException ( obj ) ;
Distance : 6

48
Tree	smartNullPointerException ( obj ) . smartNullPointerException ( location ) ;
Code	smartNullPointerException ( obj ) . smartNullPointerException ( location ) ;
Distance : 6

49
Tree	new Reporter ( obj ) . smartNullPointerException ( obj ) ;
Code	new Reporter ( obj ) . smartNullPointerException ( obj ) ;
Distance : 5

50
Tree	location . smartNullPointerException ( location , obj , new Reporter () ) ;
Code	location . smartNullPointerException ( location , obj , new Reporter () ) ;
Distance : 8

51
Tree	location . smartNullPointerException () . smartNullPointerException ( location , obj ) ;
Code	location . smartNullPointerException () . smartNullPointerException ( location , obj ) ;
Distance : 5

52
Tree	obj . smartNullPointerException ( location , obj , new Reporter () ) ;
Code	obj . smartNullPointerException ( location , obj , new Reporter () ) ;
Distance : 8

53
Tree	obj . smartNullPointerException ( location , obj ) ;
Code	obj . smartNullPointerException ( location , obj ) ;
Distance : 5

54
Tree	location . smartNullPointerException ( location , true ) ;
Code	location . smartNullPointerException ( location , true ) ;
Distance : 5

55
Tree	location . smartNullPointerException () . smartNullPointerException ( location , location ) ;
Code	location . smartNullPointerException () . smartNullPointerException ( location , location ) ;
Distance : 4

56
Tree	new Reporter () . smartNullPointerException ( obj . smartNullPointerException () , location ) ;
Code	new Reporter () . smartNullPointerException ( obj . smartNullPointerException () , location ) ;
Distance : 3

57
Tree	obj . smartNullPointerException () . smartNullPointerException ( location , location ) ;
Code	obj . smartNullPointerException () . smartNullPointerException ( location , location ) ;
Distance : 4

58
Tree	new Reporter () . smartNullPointerException ( location . smartNullPointerException () , obj ) ;
Code	new Reporter () . smartNullPointerException ( location . smartNullPointerException () , obj ) ;
Distance : 5

59
Tree	new Reporter () . smartNullPointerException ( obj , obj ) ;
Code	new Reporter () . smartNullPointerException ( obj , obj ) ;
Distance : 1

60
Tree	smartNullPointerException ( location , obj , obj ) ;
Code	smartNullPointerException ( location , obj , obj ) ;
Distance : 7

61
Tree	smartNullPointerException ( location , location , obj ) ;
Code	smartNullPointerException ( location , location , obj ) ;
Distance : 7

62
Tree	smartNullPointerException ( location , obj , location ) ;
Code	smartNullPointerException ( location , obj , location ) ;
Distance : 6

63
Tree	location . smartNullPointerException () . smartNullPointerException ( obj ) ;
Code	location . smartNullPointerException () . smartNullPointerException ( obj ) ;
Distance : 5

64
Tree	obj . smartNullPointerException () . smartNullPointerException ( obj ) ;
Code	obj . smartNullPointerException () . smartNullPointerException ( obj ) ;
Distance : 5

65
Tree	location . smartNullPointerException ( location , obj ) ;
Code	location . smartNullPointerException ( location , obj ) ;
Distance : 5

66
Tree	location . smartNullPointerException () . smartNullPointerException ( location ) ; T
Code	location . smartNullPointerException () . smartNullPointerException ( location ) ; T
Distance : 6

67
Tree	new Reporter () . smartNullPointerException ( location ) ;
Code	new Reporter () . smartNullPointerException ( location ) ;
Distance : 2

68
Tree	location . smartNullPointerException ( location ) . smartNullPointerException ( location ) ; wanted
Code	location . smartNullPointerException ( location ) . smartNullPointerException ( location ) ; wanted
Distance : 9

69
Tree	new Reporter ( location ) . smartNullPointerException ( location ) ; T
Code	new Reporter ( location ) . smartNullPointerException ( location ) ; T
Distance : 6

70
Tree	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( location ) ; source
Code	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( location ) ; source
Distance : 6

71
Tree	smartNullPointerException ( location , obj ) ; options
Code	smartNullPointerException ( location , obj ) ; options
Distance : 7

72
Tree	smartNullPointerException ( location ) . smartNullPointerException ( location ) ; p
Code	smartNullPointerException ( location ) . smartNullPointerException ( location ) ; p
Distance : 7

73
Tree	smartNullPointerException ( location , obj ) ; &&
Code	smartNullPointerException ( location , obj ) ; &&
Distance : 7

74
Tree	location . smartNullPointerException () ; MathRuntimeException
Code	location . smartNullPointerException () ; MathRuntimeException
Distance : 9

75
Tree	location . smartNullPointerException () ; {}
Code	location . smartNullPointerException () ; {}
Distance : 9

76
Tree	new Reporter () . smartNullPointerException ( location . smartNullPointerException () , location ) ; toString
Code	new Reporter () . smartNullPointerException ( location . smartNullPointerException () , location ) ; toString
Distance : 5

77
Tree	location . smartNullPointerException () ; f
Code	location . smartNullPointerException () ; f
Distance : 9

78
Tree	smartNullPointerException ( location ) . smartNullPointerException ( location ) ; options
Code	smartNullPointerException ( location ) . smartNullPointerException ( location ) ; options
Distance : 7

79
Tree	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( location ) ; options
Code	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( location ) ; options
Distance : 6

80
Tree	location . smartNullPointerException () ; -
Code	location . smartNullPointerException () ; -
Distance : 9

81
Tree	smartNullPointerException ( location , obj ) ; T
Code	smartNullPointerException ( location , obj ) ; T
Distance : 7

82
Tree	new Reporter () . smartNullPointerException ( location . smartNullPointerException () , location ) ; p
Code	new Reporter () . smartNullPointerException ( location . smartNullPointerException () , location ) ; p
Distance : 5

83
Tree	new Reporter () . smartNullPointerException ( location . smartNullPointerException () , location ) ; options
Code	new Reporter () . smartNullPointerException ( location . smartNullPointerException () , location ) ; options
Distance : 5

84
Tree	new Reporter () . smartNullPointerException ( location . smartNullPointerException () , location ) ; source
Code	new Reporter () . smartNullPointerException ( location . smartNullPointerException () , location ) ; source
Distance : 5

85
Tree	location . smartNullPointerException () ; ParamChecks
Code	location . smartNullPointerException () ; ParamChecks
Distance : 9

86
Tree	new Reporter ( location ) . smartNullPointerException ( location ) ; &&
Code	new Reporter ( location ) . smartNullPointerException ( location ) ; &&
Distance : 6

87
Tree	smartNullPointerException ( location ) . smartNullPointerException ( location ) ; source
Code	smartNullPointerException ( location ) . smartNullPointerException ( location ) ; source
Distance : 7

88
Tree	smartNullPointerException ( location ) . smartNullPointerException ( location ) ; T
Code	smartNullPointerException ( location ) . smartNullPointerException ( location ) ; T
Distance : 7

89
Tree	location . smartNullPointerException () . smartNullPointerException ( location , obj ) ; Math
Code	location . smartNullPointerException () . smartNullPointerException ( location , obj ) ; Math
Distance : 6

90
Tree	smartNullPointerException ( location , obj ) ; toString
Code	smartNullPointerException ( location , obj ) ; toString
Distance : 7

91
Tree	smartNullPointerException ( location ) ; Class
Code	smartNullPointerException ( location ) ; Class
Distance : 7

92
Tree	location . smartNullPointerException ( false ) ; p
Code	location . smartNullPointerException ( false ) ; p
Distance : 7

93
Tree	smartNullPointerException ( location ) . smartNullPointerException ( location ) ; &&
Code	smartNullPointerException ( location ) . smartNullPointerException ( location ) ; &&
Distance : 7

94
Tree	location . smartNullPointerException ( false ) ; &&
Code	location . smartNullPointerException ( false ) ; &&
Distance : 7

95
Tree	smartNullPointerException ( location ) ; MathRuntimeException
Code	smartNullPointerException ( location ) ; MathRuntimeException
Distance : 7

96
Tree	new Reporter ( location ) . smartNullPointerException ( location ) ; p
Code	new Reporter ( location ) . smartNullPointerException ( location ) ; p
Distance : 6

97
Tree	location . smartNullPointerException () . smartNullPointerException ( location , obj ) ; wanted
Code	location . smartNullPointerException () . smartNullPointerException ( location , obj ) ; wanted
Distance : 6

98
Tree	location . smartNullPointerException ( location , new Reporter ( location ) ) ;
Code	location . smartNullPointerException ( location , new Reporter ( location ) ) ;
Distance : 8

99
Tree	location . smartNullPointerException () . smartNullPointerException ( location ) ;
Code	location . smartNullPointerException () . smartNullPointerException ( location ) ;
Distance : 5

100
Tree	location . smartNullPointerException ( false ) ; T
Code	location . smartNullPointerException ( false ) ; T
Distance : 7

101
Tree	new Reporter () . smartNullPointerException ( location , obj ) ; toString
Code	new Reporter () . smartNullPointerException ( location , obj ) ; toString
Distance : 3

102
Tree	smartNullPointerException ( location ) ; {}
Code	smartNullPointerException ( location ) ; {}
Distance : 7

103
Tree	smartNullPointerException ( location ) ; f
Code	smartNullPointerException ( location ) ; f
Distance : 7

104
Tree	smartNullPointerException ( location ) ; ParamChecks
Code	smartNullPointerException ( location ) ; ParamChecks
Distance : 7

105
Tree	smartNullPointerException ( location ) ; -
Code	smartNullPointerException ( location ) ; -
Distance : 7

106
Tree	obj . smartNullPointerException ( location , false ) ;
Code	obj . smartNullPointerException ( location , false ) ;
Distance : 5

107
Tree	location . smartNullPointerException ( obj , new Reporter () ) ;
Code	location . smartNullPointerException ( obj , new Reporter () ) ;
Distance : 6

108
Tree	new Reporter () . smartNullPointerException ( location . smartNullPointerException () , location ) ; T
Code	new Reporter () . smartNullPointerException ( location . smartNullPointerException () , location ) ; T
Distance : 5

109
Tree	location . smartNullPointerException ( location ) . smartNullPointerException ( location ) ;
Code	location . smartNullPointerException ( location ) . smartNullPointerException ( location ) ;
Distance : 8

110
Tree	obj . smartNullPointerException ( obj , new Reporter () ) ;
Code	obj . smartNullPointerException ( obj , new Reporter () ) ;
Distance : 6

111
Tree	location . smartNullPointerException ( location , obj , new Reporter () ) ; Math
Code	location . smartNullPointerException ( location , obj , new Reporter () ) ; Math
Distance : 9

112
Tree	location . smartNullPointerException ( obj ) ;
Code	location . smartNullPointerException ( obj ) ;
Distance : 5

113
Tree	location . smartNullPointerException () ; Test
Code	location . smartNullPointerException () ; Test
Distance : 9

114
Tree	location . smartNullPointerException ( obj , new Reporter ( location ) ) ;
Code	location . smartNullPointerException ( obj , new Reporter ( location ) ) ;
Distance : 7

115
Tree	location . smartNullPointerException ( location , obj ) ; Math
Code	location . smartNullPointerException ( location , obj ) ; Math
Distance : 6

116
Tree	new Reporter () . smartNullPointerException ( obj . smartNullPointerException () , obj ) ;
Code	new Reporter () . smartNullPointerException ( obj . smartNullPointerException () , obj ) ;
Distance : 4

117
Tree	new Reporter () . smartNullPointerException ( location , obj ) ;
Code	new Reporter () . smartNullPointerException ( location , obj ) ;
Distance : 2

118
Tree	obj . smartNullPointerException () . smartNullPointerException ( obj , location ) ;
Code	obj . smartNullPointerException () . smartNullPointerException ( obj , location ) ;
Distance : 3

119
Tree	location . smartNullPointerException ( obj , obj , new Reporter () ) ;
Code	location . smartNullPointerException ( obj , obj , new Reporter () ) ;
Distance : 8

120
Tree	location . smartNullPointerException ( obj , obj ) ;
Code	location . smartNullPointerException ( obj , obj ) ;
Distance : 4

121
Tree	smartNullPointerException ( obj , obj , location ) ;
Code	smartNullPointerException ( obj , obj , location ) ;
Distance : 6

122
Tree	location . smartNullPointerException ( false ) ;
Code	location . smartNullPointerException ( false ) ;
Distance : 6

123
Tree	obj . smartNullPointerException ( location ) ;
Code	obj . smartNullPointerException ( location ) ;
Distance : 5

124
Tree	location . smartNullPointerException ( obj ) . smartNullPointerException ( location ) ;
Code	location . smartNullPointerException ( obj ) . smartNullPointerException ( location ) ;
Distance : 7

125
Tree	obj . smartNullPointerException ( obj ) . smartNullPointerException ( location ) ;
Code	obj . smartNullPointerException ( obj ) . smartNullPointerException ( location ) ;
Distance : 7

126
Tree	new Reporter () . smartNullPointerException ( location ) ; f
Code	new Reporter () . smartNullPointerException ( location ) ; f
Distance : 3

127
Tree	location . smartNullPointerException () ;
Code	location . smartNullPointerException () ;
Distance : 8

128
Tree	location . smartNullPointerException () . smartNullPointerException ( location ) ; options
Code	location . smartNullPointerException () . smartNullPointerException ( location ) ; options
Distance : 6

129
Tree	new Reporter ( obj ) . smartNullPointerException ( location ) ;
Code	new Reporter ( obj ) . smartNullPointerException ( location ) ;
Distance : 5

130
Tree	obj . smartNullPointerException ( location , new Reporter ( location ) ) ;
Code	obj . smartNullPointerException ( location , new Reporter ( location ) ) ;
Distance : 8

131
Tree	new Reporter ( location ) . smartNullPointerException ( obj ) ;
Code	new Reporter ( location ) . smartNullPointerException ( obj ) ;
Distance : 5

132
Tree	new Reporter () . smartNullPointerException ( location , obj ) ; source
Code	new Reporter () . smartNullPointerException ( location , obj ) ; source
Distance : 3

133
Tree	location . smartNullPointerException () ; Preconditions
Code	location . smartNullPointerException () ; Preconditions
Distance : 9

134
Tree	new Reporter () . smartNullPointerException ( location , obj ) ; options
Code	new Reporter () . smartNullPointerException ( location , obj ) ; options
Distance : 3

135
Tree	location . smartNullPointerException ( location , false ) ; Math
Code	location . smartNullPointerException ( location , false ) ; Math
Distance : 6

136
Tree	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( location ) ; p
Code	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( location ) ; p
Distance : 6

137
Tree	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( location ) ; &&
Code	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( location ) ; &&
Distance : 6

138
Tree	smartNullPointerException ( location , obj ) ; p
Code	smartNullPointerException ( location , obj ) ; p
Distance : 7

139
Tree	location . smartNullPointerException ( location , obj , new Reporter () ) ; wanted
Code	location . smartNullPointerException ( location , obj , new Reporter () ) ; wanted
Distance : 9

140
Tree	new Reporter () . smartNullPointerException ( location , obj ) ; p
Code	new Reporter () . smartNullPointerException ( location , obj ) ; p
Distance : 3

141
Tree	new Reporter () . smartNullPointerException ( location , obj ) ; &&
Code	new Reporter () . smartNullPointerException ( location , obj ) ; &&
Distance : 3

142
Tree	obj . smartNullPointerException ( location , location , new Reporter () ) ;
Code	obj . smartNullPointerException ( location , location , new Reporter () ) ;
Distance : 8

143
Tree	smartNullPointerException ( location ) ; Preconditions
Code	smartNullPointerException ( location ) ; Preconditions
Distance : 7

144
Tree	new Reporter ( location ) . smartNullPointerException ( location ) ; toString
Code	new Reporter ( location ) . smartNullPointerException ( location ) ; toString
Distance : 6

145
Tree	new Reporter ( location ) . smartNullPointerException ( location ) ; source
Code	new Reporter ( location ) . smartNullPointerException ( location ) ; source
Distance : 6

146
Tree	new Reporter ( location ) . smartNullPointerException ( location ) ; options
Code	new Reporter ( location ) . smartNullPointerException ( location ) ; options
Distance : 6

147
Tree	obj . smartNullPointerException ( location , location ) ;
Code	obj . smartNullPointerException ( location , location ) ;
Distance : 4

148
Tree	new Reporter () . smartNullPointerException ( obj ) ;
Code	new Reporter () . smartNullPointerException ( obj ) ;
Distance : 2

149
Tree	location . smartNullPointerException ( obj , location , new Reporter () ) ;
Code	location . smartNullPointerException ( obj , location , new Reporter () ) ;
Distance : 7

150
Tree	smartNullPointerException ( location , obj ) ;
Code	smartNullPointerException ( location , obj ) ;
Distance : 6

151
Tree	location . smartNullPointerException ( obj , location ) ;
Code	location . smartNullPointerException ( obj , location ) ;
Distance : 3

152
Tree	obj . smartNullPointerException ( obj ) ;
Code	obj . smartNullPointerException ( obj ) ;
Distance : 5

153
Tree	location . smartNullPointerException ( location , obj ) ; wanted
Code	location . smartNullPointerException ( location , obj ) ; wanted
Distance : 6

154
Tree	new Reporter () . smartNullPointerException ( location , location ) ;
Code	new Reporter () . smartNullPointerException ( location , location ) ;
Distance : 1

155
Tree	obj . smartNullPointerException ( obj , obj , new Reporter () ) ;
Code	obj . smartNullPointerException ( obj , obj , new Reporter () ) ;
Distance : 8

156
Tree	smartNullPointerException ( location , location ) ;
Code	smartNullPointerException ( location , location ) ;
Distance : 5

157
Tree	obj . smartNullPointerException ( obj , new Reporter ( location ) ) ;
Code	obj . smartNullPointerException ( obj , new Reporter ( location ) ) ;
Distance : 7

158
Tree	location . smartNullPointerException ( false ) ; toString
Code	location . smartNullPointerException ( false ) ; toString
Distance : 7

159
Tree	obj . smartNullPointerException ( obj , obj ) ;
Code	obj . smartNullPointerException ( obj , obj ) ;
Distance : 4

160
Tree	location . smartNullPointerException ( obj , false ) ;
Code	location . smartNullPointerException ( obj , false ) ;
Distance : 4

161
Tree	location . smartNullPointerException ( false ) ; source
Code	location . smartNullPointerException ( false ) ; source
Distance : 7

162
Tree	location . smartNullPointerException ( location ) . smartNullPointerException ( obj ) ;
Code	location . smartNullPointerException ( location ) . smartNullPointerException ( obj ) ;
Distance : 8

163
Tree	location . smartNullPointerException ( false ) ; options
Code	location . smartNullPointerException ( false ) ; options
Distance : 7

164
Tree	smartNullPointerException ( obj , location , location ) ;
Code	smartNullPointerException ( obj , location , location ) ;
Distance : 6

165
Tree	location . smartNullPointerException ( obj , new Reporter ( obj ) ) ;
Code	location . smartNullPointerException ( obj , new Reporter ( obj ) ) ;
Distance : 8

166
Tree	location . smartNullPointerException ( location , new Reporter () ) ; source
Code	location . smartNullPointerException ( location , new Reporter () ) ; source
Distance : 8

167
Tree	smartNullPointerException ( location , location , location ) ;
Code	smartNullPointerException ( location , location , location ) ;
Distance : 7

168
Tree	new Reporter () . smartNullPointerException ( obj , location ) ;
Code	new Reporter () . smartNullPointerException ( obj , location ) ;
Distance : 0

169
Tree	location . smartNullPointerException ( location , new Reporter ( location ) ) ; wanted
Code	location . smartNullPointerException ( location , new Reporter ( location ) ) ; wanted
Distance : 9

170
Tree	smartNullPointerException ( location , obj , obj ) ; wanted
Code	smartNullPointerException ( location , obj , obj ) ; wanted
Distance : 8

171
Tree	obj . smartNullPointerException () . smartNullPointerException ( location ) ;
Code	obj . smartNullPointerException () . smartNullPointerException ( location ) ;
Distance : 5

172
Tree	smartNullPointerException ( obj ) . smartNullPointerException ( obj ) ;
Code	smartNullPointerException ( obj ) . smartNullPointerException ( obj ) ;
Distance : 6

173
Tree	location . smartNullPointerException () . smartNullPointerException ( obj , obj ) ;
Code	location . smartNullPointerException () . smartNullPointerException ( obj , obj ) ;
Distance : 4

174
Tree	location . smartNullPointerException () . smartNullPointerException ( location ) ; source
Code	location . smartNullPointerException () . smartNullPointerException ( location ) ; source
Distance : 6

175
Tree	location . smartNullPointerException () . smartNullPointerException ( location ) ; toString
Code	location . smartNullPointerException () . smartNullPointerException ( location ) ; toString
Distance : 6

176
Tree	location . smartNullPointerException ( location , false ) ;
Code	location . smartNullPointerException ( location , false ) ;
Distance : 5

177
Tree	obj . smartNullPointerException ( location ) . smartNullPointerException ( location ) ;
Code	obj . smartNullPointerException ( location ) . smartNullPointerException ( location ) ;
Distance : 8

178
Tree	location . smartNullPointerException ( location , location , new Reporter () ) ;
Code	location . smartNullPointerException ( location , location , new Reporter () ) ;
Distance : 8

179
Tree	location . smartNullPointerException ( location , new Reporter ( obj ) ) ;
Code	location . smartNullPointerException ( location , new Reporter ( obj ) ) ;
Distance : 9

180
Tree	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( obj ) ;
Code	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( obj ) ;
Distance : 6

181
Tree	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( location ) ; toString
Code	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( location ) ; toString
Distance : 6

182
Tree	new Reporter () . smartNullPointerException ( location , obj ) ; T
Code	new Reporter () . smartNullPointerException ( location , obj ) ; T
Distance : 3

183
Tree	location . smartNullPointerException ( location , location ) ;
Code	location . smartNullPointerException ( location , location ) ;
Distance : 4

184
Tree	location . smartNullPointerException ( location , false ) ; wanted
Code	location . smartNullPointerException ( location , false ) ; wanted
Distance : 6

185
Tree	obj . smartNullPointerException ( location , new Reporter ( obj ) ) ;
Code	obj . smartNullPointerException ( location , new Reporter ( obj ) ) ;
Distance : 9

186
Tree	smartNullPointerException ( location ) ; Test
Code	smartNullPointerException ( location ) ; Test
Distance : 7

187
Tree	location . smartNullPointerException () ; Class
Code	location . smartNullPointerException () ; Class
Distance : 9

188
Tree	location . smartNullPointerException ( location ) . smartNullPointerException ( location ) ; Math
Code	location . smartNullPointerException ( location ) . smartNullPointerException ( location ) ; Math
Distance : 9

189
Tree	new Reporter () . smartNullPointerException ( location . smartNullPointerException () , location ) ; &&
Code	new Reporter () . smartNullPointerException ( location . smartNullPointerException () , location ) ; &&
Distance : 5

190
Tree	smartNullPointerException ( location ) . smartNullPointerException ( location ) ; toString
Code	smartNullPointerException ( location ) . smartNullPointerException ( location ) ; toString
Distance : 7

191
Tree	obj . smartNullPointerException () . smartNullPointerException ( location , obj ) ;
Code	obj . smartNullPointerException () . smartNullPointerException ( location , obj ) ;
Distance : 5

192
Tree	smartNullPointerException ( location , obj ) ; source
Code	smartNullPointerException ( location , obj ) ; source
Distance : 7

193
Tree	obj . smartNullPointerException ( location , true ) ;
Code	obj . smartNullPointerException ( location , true ) ;
Distance : 5

194
Tree	location . smartNullPointerException ( location , new Reporter () ) ;
Code	location . smartNullPointerException ( location , new Reporter () ) ;
Distance : 7

195
Tree	obj . smartNullPointerException ( obj , new Reporter ( obj ) ) ;
Code	obj . smartNullPointerException ( obj , new Reporter ( obj ) ) ;
Distance : 8

196
Tree	location . smartNullPointerException ( location , new Reporter () ) ; options
Code	location . smartNullPointerException ( location , new Reporter () ) ; options
Distance : 8

197
Tree	new Reporter () . smartNullPointerException ( location ) ; Test
Code	new Reporter () . smartNullPointerException ( location ) ; Test
Distance : 3

198
Tree	location . smartNullPointerException ( location ) ; toString
Code	location . smartNullPointerException ( location ) ; toString
Distance : 6

199
Tree	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( location ) ; T
Code	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( location ) ; T
Distance : 6

========================================================================


========================================================================
Example Number: 80
Parent Code is: 
return getMock ( invocation ) ;
-------------------------------------------------------------------------------
Child code is: 
return getMock ( invocation , returnTypeGenericMetadata ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=getMock}) (214{val=(}) (800{val=invocation}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=getMock}) (214{val=(}) (800{val=invocation}) (234{val=,}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/25/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsDeepStubs.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; p
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; p
Distance : 9

1
Tree	return this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 6

2
Tree	return getMock ( returnTypeGenericMetadata ) ;
Code	return getMock ( returnTypeGenericMetadata ) ;
Distance : 2

3
Tree	return returnTypeGenericMetadata + this . invocation . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return returnTypeGenericMetadata + this . invocation . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

4
Tree	return getMock ( invocation , returnTypeGenericMetadata ) ;
Code	return getMock ( invocation , returnTypeGenericMetadata ) ;
Distance : 0

5
Tree	return invocation . getMock ( this , invocation ) ;
Code	return invocation . getMock ( this , invocation ) ;
Distance : 4

6
Tree	return this . invocation ;
Code	return this . invocation ;
Distance : 5

7
Tree	return invocation + getMock ( invocation ) ;
Code	return invocation + getMock ( invocation ) ;
Distance : 4

8
Tree	return invocation . getMock () ;
Code	return invocation . getMock () ;
Distance : 5

9
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( JavaVersion.JAVA_1_5 , invocation , invocation ) ;
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( JavaVersion.JAVA_1_5 , invocation , invocation ) ;
Distance : 9

10
Tree	return returnTypeGenericMetadata . getMock ( this , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . getMock ( this , returnTypeGenericMetadata ) ;
Distance : 3

11
Tree	return invocation + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return invocation + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

12
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( Locale.US , invocation , invocation ) ;
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( Locale.US , invocation , invocation ) ;
Distance : 9

13
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE , invocation , invocation ) ;
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE , invocation , invocation ) ;
Distance : 9

14
Tree	return returnTypeGenericMetadata + this . invocation . getMock ( JavaVersion.JAVA_1_5 , invocation , invocation ) ;
Code	return returnTypeGenericMetadata + this . invocation . getMock ( JavaVersion.JAVA_1_5 , invocation , invocation ) ;
Distance : 9

15
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

16
Tree	return this . invocation . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return this . invocation . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 6

17
Tree	return NUMBER_CONSTANT / bindComponents.thisValue ;
Code	return NUMBER_CONSTANT / bindComponents.thisValue ;
Distance : 6

18
Tree	return returnTypeGenericMetadata + NUMBER_CONSTANT ; Test
Code	return returnTypeGenericMetadata + NUMBER_CONSTANT ; Test
Distance : 7

19
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; T
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; T
Distance : 9

20
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; &&
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; &&
Distance : 9

21
Tree	return getMock ( invocation ) ; -
Code	return getMock ( invocation ) ; -
Distance : 3

22
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; options
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; options
Distance : 9

23
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; source
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; source
Distance : 9

24
Tree	return returnTypeGenericMetadata + NUMBER_CONSTANT ; MathRuntimeException
Code	return returnTypeGenericMetadata + NUMBER_CONSTANT ; MathRuntimeException
Distance : 7

25
Tree	return returnTypeGenericMetadata . getMock ( invocation ) ; T
Code	return returnTypeGenericMetadata . getMock ( invocation ) ; T
Distance : 5

26
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; p
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; p
Distance : 7

27
Tree	return getMock ( invocation ) ; f
Code	return getMock ( invocation ) ; f
Distance : 3

28
Tree	return returnTypeGenericMetadata + NUMBER_CONSTANT ; f
Code	return returnTypeGenericMetadata + NUMBER_CONSTANT ; f
Distance : 7

29
Tree	return getMock ( invocation ) ; {}
Code	return getMock ( invocation ) ; {}
Distance : 3

30
Tree	return getMock ( invocation ) ; MathRuntimeException
Code	return getMock ( invocation ) ; MathRuntimeException
Distance : 3

31
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( LocalizedFormats.NO_DATA , invocation , invocation ) ;
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( LocalizedFormats.NO_DATA , invocation , invocation ) ;
Distance : 9

32
Tree	return returnTypeGenericMetadata + NUMBER_CONSTANT ; ParamChecks
Code	return returnTypeGenericMetadata + NUMBER_CONSTANT ; ParamChecks
Distance : 7

33
Tree	return returnTypeGenericMetadata + anovaPValue . getMock ( invocation ) ;
Code	return returnTypeGenericMetadata + anovaPValue . getMock ( invocation ) ;
Distance : 6

34
Tree	return returnTypeGenericMetadata + getTopObject . getMock ( invocation ) ;
Code	return returnTypeGenericMetadata + getTopObject . getMock ( invocation ) ;
Distance : 6

35
Tree	return NUMBER_CONSTANT / getSlot ;
Code	return NUMBER_CONSTANT / getSlot ;
Distance : 6

36
Tree	return getMock ( invocation ) ;
Code	return getMock ( invocation ) ;
Distance : 2

37
Tree	return NUMBER_CONSTANT / that.data ;
Code	return NUMBER_CONSTANT / that.data ;
Distance : 6

38
Tree	return NUMBER_CONSTANT / getTopObject ;
Code	return NUMBER_CONSTANT / getTopObject ;
Distance : 6

39
Tree	return NUMBER_CONSTANT / that.cache.functionScope ;
Code	return NUMBER_CONSTANT / that.cache.functionScope ;
Distance : 6

40
Tree	return NUMBER_CONSTANT / BooleanLiteralSet.EMPTY ;
Code	return NUMBER_CONSTANT / BooleanLiteralSet.EMPTY ;
Distance : 6

41
Tree	return returnTypeGenericMetadata + NUMBER_CONSTANT ;
Code	return returnTypeGenericMetadata + NUMBER_CONSTANT ;
Distance : 6

42
Tree	return getMock ( invocation , invocation ) ;
Code	return getMock ( invocation , invocation ) ;
Distance : 1

43
Tree	return returnTypeGenericMetadata != bindComponents.thisValue ;
Code	return returnTypeGenericMetadata != bindComponents.thisValue ;
Distance : 6

44
Tree	return returnTypeGenericMetadata ;
Code	return returnTypeGenericMetadata ;
Distance : 5

45
Tree	return returnTypeGenericMetadata != createsScope ;
Code	return returnTypeGenericMetadata != createsScope ;
Distance : 6

46
Tree	return returnTypeGenericMetadata != MockHandlerInterface ;
Code	return returnTypeGenericMetadata != MockHandlerInterface ;
Distance : 6

47
Tree	return returnTypeGenericMetadata != that.data ;
Code	return returnTypeGenericMetadata != that.data ;
Distance : 6

48
Tree	return getMock ( invocation ) . getMock () ;
Code	return getMock ( invocation ) . getMock () ;
Distance : 4

49
Tree	return invocation < < NUMBER_CONSTANT ;
Code	return invocation < < NUMBER_CONSTANT ;
Distance : 5

50
Tree	return returnTypeGenericMetadata != anovaPValue ;
Code	return returnTypeGenericMetadata != anovaPValue ;
Distance : 6

51
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ;
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ;
Distance : 4

52
Tree	return this . returnTypeGenericMetadata ;
Code	return this . returnTypeGenericMetadata ;
Distance : 5

53
Tree	return returnTypeGenericMetadata + bindComponents.thisValue . getMock ( invocation ) ;
Code	return returnTypeGenericMetadata + bindComponents.thisValue . getMock ( invocation ) ;
Distance : 6

54
Tree	return returnTypeGenericMetadata + getMock ( Null.NULL , this . invocation ) ;
Code	return returnTypeGenericMetadata + getMock ( Null.NULL , this . invocation ) ;
Distance : 6

55
Tree	return STRING_CONSTANT + returnTypeGenericMetadata + STRING_CONSTANT + invocation ;
Code	return STRING_CONSTANT + returnTypeGenericMetadata + STRING_CONSTANT + invocation ;
Distance : 7

56
Tree	return returnTypeGenericMetadata + getSlot . getMock ( invocation ) ;
Code	return returnTypeGenericMetadata + getSlot . getMock ( invocation ) ;
Distance : 6

57
Tree	return returnTypeGenericMetadata + getMock ( PropertyCollapseLevel.ALL , this . invocation ) ;
Code	return returnTypeGenericMetadata + getMock ( PropertyCollapseLevel.ALL , this . invocation ) ;
Distance : 6

58
Tree	return returnTypeGenericMetadata + getMock ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , this . invocation ) ;
Code	return returnTypeGenericMetadata + getMock ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , this . invocation ) ;
Distance : 6

59
Tree	return returnTypeGenericMetadata + getMock ( loopNode.collection , this . invocation ) ;
Code	return returnTypeGenericMetadata + getMock ( loopNode.collection , this . invocation ) ;
Distance : 6

60
Tree	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Code	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Distance : 10

61
Tree	return returnTypeGenericMetadata + that.cache.functionScope . getMock ( invocation ) ;
Code	return returnTypeGenericMetadata + that.cache.functionScope . getMock ( invocation ) ;
Distance : 6

62
Tree	return returnTypeGenericMetadata + reflectionCompare . getMock ( invocation ) ;
Code	return returnTypeGenericMetadata + reflectionCompare . getMock ( invocation ) ;
Distance : 6

63
Tree	return invocation ;
Code	return invocation ;
Distance : 5

64
Tree	return returnTypeGenericMetadata + getBinaryModuleNamespace . getMock ( invocation ) ;
Code	return returnTypeGenericMetadata + getBinaryModuleNamespace . getMock ( invocation ) ;
Distance : 6

65
Tree	return returnTypeGenericMetadata != isInvalidatingType ;
Code	return returnTypeGenericMetadata != isInvalidatingType ;
Distance : 6

66
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; options
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; options
Distance : 7

67
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ;
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ;
Distance : 6

68
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; &&
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; &&
Distance : 7

69
Tree	return getMock ( invocation , invocation ) ; &&
Code	return getMock ( invocation , invocation ) ; &&
Distance : 2

70
Tree	return this . returnTypeGenericMetadata ; -
Code	return this . returnTypeGenericMetadata ; -
Distance : 6

71
Tree	return this . returnTypeGenericMetadata ; ParamChecks
Code	return this . returnTypeGenericMetadata ; ParamChecks
Distance : 6

72
Tree	return this . returnTypeGenericMetadata ; MathRuntimeException
Code	return this . returnTypeGenericMetadata ; MathRuntimeException
Distance : 6

73
Tree	return this . returnTypeGenericMetadata ; Class
Code	return this . returnTypeGenericMetadata ; Class
Distance : 6

74
Tree	return this . returnTypeGenericMetadata ; Test
Code	return this . returnTypeGenericMetadata ; Test
Distance : 6

75
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; T
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; T
Distance : 5

76
Tree	return getMock ( invocation ) . getMock () ; Class
Code	return getMock ( invocation ) . getMock () ; Class
Distance : 5

77
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; &&
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; &&
Distance : 5

78
Tree	return getMock ( invocation , invocation ) ; T
Code	return getMock ( invocation , invocation ) ; T
Distance : 2

79
Tree	return returnTypeGenericMetadata + getMock ( invocation ) ; T
Code	return returnTypeGenericMetadata + getMock ( invocation ) ; T
Distance : 5

80
Tree	return getMock ( invocation , invocation ) ; toString
Code	return getMock ( invocation , invocation ) ; toString
Distance : 2

81
Tree	return getMock ( invocation , invocation ) ; source
Code	return getMock ( invocation , invocation ) ; source
Distance : 2

82
Tree	return getMock ( invocation , invocation ) ; options
Code	return getMock ( invocation , invocation ) ; options
Distance : 2

83
Tree	return getMock ( invocation , invocation ) ; p
Code	return getMock ( invocation , invocation ) ; p
Distance : 2

84
Tree	return returnTypeGenericMetadata < < NUMBER_CONSTANT ; {}
Code	return returnTypeGenericMetadata < < NUMBER_CONSTANT ; {}
Distance : 7

85
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; p
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; p
Distance : 5

86
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; source
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; source
Distance : 5

87
Tree	return returnTypeGenericMetadata < < NUMBER_CONSTANT ; Test
Code	return returnTypeGenericMetadata < < NUMBER_CONSTANT ; Test
Distance : 7

88
Tree	return getMock ( invocation ) . getMock () ; {}
Code	return getMock ( invocation ) . getMock () ; {}
Distance : 5

89
Tree	return returnTypeGenericMetadata . getMock () ; MathRuntimeException
Code	return returnTypeGenericMetadata . getMock () ; MathRuntimeException
Distance : 7

90
Tree	return returnTypeGenericMetadata < < NUMBER_CONSTANT ; f
Code	return returnTypeGenericMetadata < < NUMBER_CONSTANT ; f
Distance : 7

91
Tree	return returnTypeGenericMetadata ; f
Code	return returnTypeGenericMetadata ; f
Distance : 6

92
Tree	return getMock ( invocation ) . getMock () ; MathRuntimeException
Code	return getMock ( invocation ) . getMock () ; MathRuntimeException
Distance : 5

93
Tree	return returnTypeGenericMetadata ; {}
Code	return returnTypeGenericMetadata ; {}
Distance : 6

94
Tree	return returnTypeGenericMetadata ; MathRuntimeException
Code	return returnTypeGenericMetadata ; MathRuntimeException
Distance : 6

95
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; options
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; options
Distance : 5

96
Tree	return returnTypeGenericMetadata ; Test
Code	return returnTypeGenericMetadata ; Test
Distance : 6

97
Tree	return getMock ( invocation ) . getMock () ; Preconditions
Code	return getMock ( invocation ) . getMock () ; Preconditions
Distance : 5

98
Tree	return getMock ( invocation ) . getMock () ; f
Code	return getMock ( invocation ) . getMock () ; f
Distance : 5

99
Tree	return returnTypeGenericMetadata ; Class
Code	return returnTypeGenericMetadata ; Class
Distance : 6

100
Tree	return returnTypeGenericMetadata < < NUMBER_CONSTANT ; MathRuntimeException
Code	return returnTypeGenericMetadata < < NUMBER_CONSTANT ; MathRuntimeException
Distance : 7

101
Tree	return returnTypeGenericMetadata . getMock () ; f
Code	return returnTypeGenericMetadata . getMock () ; f
Distance : 7

102
Tree	return returnTypeGenericMetadata . getMock () ; ParamChecks
Code	return returnTypeGenericMetadata . getMock () ; ParamChecks
Distance : 7

103
Tree	return returnTypeGenericMetadata . getMock () ; -
Code	return returnTypeGenericMetadata . getMock () ; -
Distance : 7

104
Tree	return returnTypeGenericMetadata . getMock () ; Preconditions
Code	return returnTypeGenericMetadata . getMock () ; Preconditions
Distance : 7

105
Tree	return returnTypeGenericMetadata < < NUMBER_CONSTANT ;
Code	return returnTypeGenericMetadata < < NUMBER_CONSTANT ;
Distance : 6

106
Tree	return NUMBER_CONSTANT / reflectionCompare ;
Code	return NUMBER_CONSTANT / reflectionCompare ;
Distance : 6

107
Tree	return returnTypeGenericMetadata < < NUMBER_CONSTANT ; Class
Code	return returnTypeGenericMetadata < < NUMBER_CONSTANT ; Class
Distance : 7

108
Tree	return returnTypeGenericMetadata + getMock ( invocation ) ; toString
Code	return returnTypeGenericMetadata + getMock ( invocation ) ; toString
Distance : 5

109
Tree	return getMock ( invocation ) ; Class
Code	return getMock ( invocation ) ; Class
Distance : 3

110
Tree	return returnTypeGenericMetadata + getMock ( invocation ) ; source
Code	return returnTypeGenericMetadata + getMock ( invocation ) ; source
Distance : 5

111
Tree	return returnTypeGenericMetadata + getMock ( invocation ) ; options
Code	return returnTypeGenericMetadata + getMock ( invocation ) ; options
Distance : 5

112
Tree	return returnTypeGenericMetadata . getMock ( invocation ) ;
Code	return returnTypeGenericMetadata . getMock ( invocation ) ;
Distance : 4

113
Tree	return returnTypeGenericMetadata < < NUMBER_CONSTANT ; ParamChecks
Code	return returnTypeGenericMetadata < < NUMBER_CONSTANT ; ParamChecks
Distance : 7

114
Tree	return returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata ) ;
Distance : 4

115
Tree	return invocation . getMock ( this , returnTypeGenericMetadata ) ;
Code	return invocation . getMock ( this , returnTypeGenericMetadata ) ;
Distance : 3

116
Tree	return returnTypeGenericMetadata + invocation . getMock ( returnTypeGenericMetadata , NUMBER_CONSTANT , invocation . getMock () ) ;
Code	return returnTypeGenericMetadata + invocation . getMock ( returnTypeGenericMetadata , NUMBER_CONSTANT , invocation . getMock () ) ;
Distance : 11

117
Tree	return returnTypeGenericMetadata ; ParamChecks
Code	return returnTypeGenericMetadata ; ParamChecks
Distance : 6

118
Tree	return invocation . getMock ( returnTypeGenericMetadata ) ;
Code	return invocation . getMock ( returnTypeGenericMetadata ) ;
Distance : 4

119
Tree	return getMock ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ;
Code	return getMock ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ;
Distance : 1

120
Tree	return invocation + getMock ( returnTypeGenericMetadata ) ;
Code	return invocation + getMock ( returnTypeGenericMetadata ) ;
Distance : 4

121
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; T
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; T
Distance : 7

122
Tree	return invocation + invocation . getMock ( invocation , NUMBER_CONSTANT , returnTypeGenericMetadata . getMock () ) ;
Code	return invocation + invocation . getMock ( invocation , NUMBER_CONSTANT , returnTypeGenericMetadata . getMock () ) ;
Distance : 9

123
Tree	return returnTypeGenericMetadata + that.data . getMock ( invocation ) ;
Code	return returnTypeGenericMetadata + that.data . getMock ( invocation ) ;
Distance : 6

124
Tree	return invocation + returnTypeGenericMetadata . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Code	return invocation + returnTypeGenericMetadata . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Distance : 10

125
Tree	return invocation + invocation . getMock ( returnTypeGenericMetadata , NUMBER_CONSTANT , invocation . getMock () ) ;
Code	return invocation + invocation . getMock ( returnTypeGenericMetadata , NUMBER_CONSTANT , invocation . getMock () ) ;
Distance : 11

126
Tree	return returnTypeGenericMetadata + returnTypeGenericMetadata . getMock ( invocation , NUMBER_CONSTANT , returnTypeGenericMetadata . getMock () ) ;
Code	return returnTypeGenericMetadata + returnTypeGenericMetadata . getMock ( invocation , NUMBER_CONSTANT , returnTypeGenericMetadata . getMock () ) ;
Distance : 9

127
Tree	return returnTypeGenericMetadata ; -
Code	return returnTypeGenericMetadata ; -
Distance : 6

128
Tree	return getMock ( invocation ) ; Test
Code	return getMock ( invocation ) ; Test
Distance : 3

129
Tree	return returnTypeGenericMetadata + invocation . getMock ( returnTypeGenericMetadata , NUMBER_CONSTANT , returnTypeGenericMetadata . getMock () ) ;
Code	return returnTypeGenericMetadata + invocation . getMock ( returnTypeGenericMetadata , NUMBER_CONSTANT , returnTypeGenericMetadata . getMock () ) ;
Distance : 10

130
Tree	return returnTypeGenericMetadata + getMock ( invocation ) ; p
Code	return returnTypeGenericMetadata + getMock ( invocation ) ; p
Distance : 5

131
Tree	return NUMBER_CONSTANT / createsScope ;
Code	return NUMBER_CONSTANT / createsScope ;
Distance : 6

132
Tree	return returnTypeGenericMetadata != BooleanLiteralSet.EMPTY ;
Code	return returnTypeGenericMetadata != BooleanLiteralSet.EMPTY ;
Distance : 6

133
Tree	return returnTypeGenericMetadata != that.cache.functionScope ;
Code	return returnTypeGenericMetadata != that.cache.functionScope ;
Distance : 6

134
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; toString
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; toString
Distance : 9

135
Tree	return returnTypeGenericMetadata + NUMBER_CONSTANT ; Preconditions
Code	return returnTypeGenericMetadata + NUMBER_CONSTANT ; Preconditions
Distance : 7

136
Tree	return NUMBER_CONSTANT / MockHandlerInterface ;
Code	return NUMBER_CONSTANT / MockHandlerInterface ;
Distance : 6

137
Tree	return returnTypeGenericMetadata ; Preconditions
Code	return returnTypeGenericMetadata ; Preconditions
Distance : 6

138
Tree	return this . returnTypeGenericMetadata ; {}
Code	return this . returnTypeGenericMetadata ; {}
Distance : 6

139
Tree	return returnTypeGenericMetadata + MockHandlerInterface . getMock ( invocation ) ;
Code	return returnTypeGenericMetadata + MockHandlerInterface . getMock ( invocation ) ;
Distance : 6

140
Tree	return getMock ( invocation ) . getMock () ; Test
Code	return getMock ( invocation ) . getMock () ; Test
Distance : 5

141
Tree	return returnTypeGenericMetadata + getMock ( invocation ) ;
Code	return returnTypeGenericMetadata + getMock ( invocation ) ;
Distance : 4

142
Tree	return this . returnTypeGenericMetadata ; Preconditions
Code	return this . returnTypeGenericMetadata ; Preconditions
Distance : 6

143
Tree	return returnTypeGenericMetadata . getMock () ;
Code	return returnTypeGenericMetadata . getMock () ;
Distance : 6

144
Tree	return returnTypeGenericMetadata + createsScope . getMock ( invocation ) ;
Code	return returnTypeGenericMetadata + createsScope . getMock ( invocation ) ;
Distance : 6

145
Tree	return returnTypeGenericMetadata + getMock ( Locale.US , this . invocation ) ;
Code	return returnTypeGenericMetadata + getMock ( Locale.US , this . invocation ) ;
Distance : 6

146
Tree	return returnTypeGenericMetadata + getMock ( JavaVersion.JAVA_1_5 , this . invocation ) ;
Code	return returnTypeGenericMetadata + getMock ( JavaVersion.JAVA_1_5 , this . invocation ) ;
Distance : 6

147
Tree	return getMock ( returnTypeGenericMetadata , invocation ) ;
Code	return getMock ( returnTypeGenericMetadata , invocation ) ;
Distance : 2

148
Tree	return invocation + NUMBER_CONSTANT ;
Code	return invocation + NUMBER_CONSTANT ;
Distance : 5

149
Tree	return returnTypeGenericMetadata + getMock ( TernaryValue.UNKNOWN , this . invocation ) ;
Code	return returnTypeGenericMetadata + getMock ( TernaryValue.UNKNOWN , this . invocation ) ;
Distance : 6

150
Tree	return returnTypeGenericMetadata + getMock ( JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE , this . invocation ) ;
Code	return returnTypeGenericMetadata + getMock ( JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE , this . invocation ) ;
Distance : 6

151
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + returnTypeGenericMetadata ;
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + returnTypeGenericMetadata ;
Distance : 6

152
Tree	return returnTypeGenericMetadata + getMock ( invocation ) ; &&
Code	return returnTypeGenericMetadata + getMock ( invocation ) ; &&
Distance : 5

153
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; source
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; source
Distance : 7

154
Tree	return returnTypeGenericMetadata + NUMBER_CONSTANT ; Class
Code	return returnTypeGenericMetadata + NUMBER_CONSTANT ; Class
Distance : 7

155
Tree	return returnTypeGenericMetadata + NUMBER_CONSTANT ; {}
Code	return returnTypeGenericMetadata + NUMBER_CONSTANT ; {}
Distance : 7

156
Tree	return returnTypeGenericMetadata + getMock ( bindComponents.thisValue , this . invocation ) ;
Code	return returnTypeGenericMetadata + getMock ( bindComponents.thisValue , this . invocation ) ;
Distance : 6

157
Tree	return returnTypeGenericMetadata < < NUMBER_CONSTANT ; -
Code	return returnTypeGenericMetadata < < NUMBER_CONSTANT ; -
Distance : 7

158
Tree	return getMock ( invocation ) ; Preconditions
Code	return getMock ( invocation ) ; Preconditions
Distance : 3

159
Tree	return returnTypeGenericMetadata + getMock ( v.data , this . invocation ) ;
Code	return returnTypeGenericMetadata + getMock ( v.data , this . invocation ) ;
Distance : 6

160
Tree	return getMock ( invocation ) ; ParamChecks
Code	return getMock ( invocation ) ; ParamChecks
Distance : 3

161
Tree	return returnTypeGenericMetadata . getMock ( invocation ) ; toString
Code	return returnTypeGenericMetadata . getMock ( invocation ) ; toString
Distance : 5

162
Tree	return returnTypeGenericMetadata < < NUMBER_CONSTANT ; Preconditions
Code	return returnTypeGenericMetadata < < NUMBER_CONSTANT ; Preconditions
Distance : 7

163
Tree	return returnTypeGenericMetadata . getMock ( invocation ) ; source
Code	return returnTypeGenericMetadata . getMock ( invocation ) ; source
Distance : 5

164
Tree	return returnTypeGenericMetadata . getMock ( invocation ) ; options
Code	return returnTypeGenericMetadata . getMock ( invocation ) ; options
Distance : 5

165
Tree	return getMock ( invocation ) . getMock () ; ParamChecks
Code	return getMock ( invocation ) . getMock () ; ParamChecks
Distance : 5

166
Tree	return returnTypeGenericMetadata . getMock ( invocation ) ; p
Code	return returnTypeGenericMetadata . getMock ( invocation ) ; p
Distance : 5

167
Tree	return returnTypeGenericMetadata . getMock ( invocation ) ; &&
Code	return returnTypeGenericMetadata . getMock ( invocation ) ; &&
Distance : 5

168
Tree	return returnTypeGenericMetadata != rhs.a ;
Code	return returnTypeGenericMetadata != rhs.a ;
Distance : 6

169
Tree	return returnTypeGenericMetadata != getSlot ;
Code	return returnTypeGenericMetadata != getSlot ;
Distance : 6

170
Tree	return this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; Class
Code	return this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; Class
Distance : 7

171
Tree	return this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; MathRuntimeException
Code	return this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; MathRuntimeException
Distance : 7

172
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; toString
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; toString
Distance : 7

173
Tree	return returnTypeGenericMetadata + NUMBER_CONSTANT ; -
Code	return returnTypeGenericMetadata + NUMBER_CONSTANT ; -
Distance : 7

174
Tree	return this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; {}
Code	return this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; {}
Distance : 7

175
Tree	return this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; f
Code	return this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; f
Distance : 7

176
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( bindComponents.thisValue , invocation , invocation ) ;
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( bindComponents.thisValue , invocation , invocation ) ;
Distance : 9

177
Tree	return this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; ParamChecks
Code	return this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; ParamChecks
Distance : 7

178
Tree	return this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; -
Code	return this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; -
Distance : 7

179
Tree	return this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; Preconditions
Code	return this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; Preconditions
Distance : 7

180
Tree	return returnTypeGenericMetadata . getMock () ; Test
Code	return returnTypeGenericMetadata . getMock () ; Test
Distance : 7

181
Tree	return returnTypeGenericMetadata . getMock () ; Class
Code	return returnTypeGenericMetadata . getMock () ; Class
Distance : 7

182
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; toString
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; toString
Distance : 5

183
Tree	return invocation . getMock ( invocation ) ;
Code	return invocation . getMock ( invocation ) ;
Distance : 4

184
Tree	return invocation + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Code	return invocation + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Distance : 10

185
Tree	return returnTypeGenericMetadata . getMock () ; {}
Code	return returnTypeGenericMetadata . getMock () ; {}
Distance : 7

186
Tree	return NUMBER_CONSTANT / options.checksOnly ;
Code	return NUMBER_CONSTANT / options.checksOnly ;
Distance : 6

187
Tree	return getMock ( invocation ) . getMock () ; -
Code	return getMock ( invocation ) . getMock () ; -
Distance : 5

188
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( stat.aggregateStatistics , invocation , invocation ) ;
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( stat.aggregateStatistics , invocation , invocation ) ;
Distance : 9

189
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( TernaryValue.UNKNOWN , invocation , invocation ) ;
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( TernaryValue.UNKNOWN , invocation , invocation ) ;
Distance : 9

190
Tree	return invocation + this . invocation . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return invocation + this . invocation . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

191
Tree	return returnTypeGenericMetadata + this . invocation . getMock ( Locale.US , invocation , invocation ) ;
Code	return returnTypeGenericMetadata + this . invocation . getMock ( Locale.US , invocation , invocation ) ;
Distance : 9

192
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( other.call , invocation , invocation ) ;
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( other.call , invocation , invocation ) ;
Distance : 9

193
Tree	return getMock ( returnTypeGenericMetadata ) . getMock () ;
Code	return getMock ( returnTypeGenericMetadata ) . getMock () ;
Distance : 5

194
Tree	return STRING_CONSTANT + returnTypeGenericMetadata + STRING_CONSTANT + returnTypeGenericMetadata ;
Code	return STRING_CONSTANT + returnTypeGenericMetadata + STRING_CONSTANT + returnTypeGenericMetadata ;
Distance : 7

195
Tree	return returnTypeGenericMetadata + getMock ( returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata + getMock ( returnTypeGenericMetadata ) ;
Distance : 4

196
Tree	return this . returnTypeGenericMetadata ; f
Code	return this . returnTypeGenericMetadata ; f
Distance : 6

197
Tree	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , returnTypeGenericMetadata . getMock () ) ;
Code	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , returnTypeGenericMetadata . getMock () ) ;
Distance : 9

198
Tree	return returnTypeGenericMetadata + returnTypeGenericMetadata . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Code	return returnTypeGenericMetadata + returnTypeGenericMetadata . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Distance : 10

199
Tree	return this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; Test
Code	return this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; Test
Distance : 7

========================================================================


========================================================================
Example Number: 81
Parent Code is: 
return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
-------------------------------------------------------------------------------
Child code is: 
return mockSettings . serializable () . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=mockSettings}) (235{val=.}) (802{val=defaultAnswer}) (214{val=(}) (32 (802{val=returnsDeepStubsAnswerUsing}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (32 (800{val=mockSettings}) (235{val=.}) (802{val=serializable}) (216{val=()})) (235{val=.}) (802{val=defaultAnswer}) (214{val=(}) (32 (802{val=returnsDeepStubsAnswerUsing}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/23/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsDeepStubs.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return mockSettings . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Code	return mockSettings . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Distance : 6

1
Tree	return ! mockSettings . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return ! mockSettings . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 5

2
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && classToMock ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && classToMock ;
Distance : 8

3
Tree	return defaultAnswer ( mockSettings , returnTypeGenericMetadata ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( mockSettings , returnTypeGenericMetadata ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 9

4
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 8

5
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && <= ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && <= ;
Distance : 8

6
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && Cartesian2D ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && Cartesian2D ;
Distance : 8

7
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Distance : 6

8
Tree	return serializable ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return serializable ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 6

9
Tree	return mockSettings . defaultAnswer ( new MockAwareVerificationMode ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new MockAwareVerificationMode ( returnTypeGenericMetadata ) ) ;
Distance : 5

10
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && extends ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && extends ;
Distance : 7

11
Tree	return mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 6

12
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , mockSettings ) ;
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , mockSettings ) ;
Distance : 7

13
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 8

14
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && extends ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && extends ;
Distance : 8

15
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( mockSettings ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( mockSettings ) ;
Distance : 8

16
Tree	return mockSettings . returnsDeepStubsAnswerUsing ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . returnsDeepStubsAnswerUsing ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 5

17
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && getString ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && getString ;
Distance : 7

18
Tree	return defaultAnswer ( super(); , returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( super(); , returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 7

19
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && extraInterfaces ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && extraInterfaces ;
Distance : 8

20
Tree	return ! mockSettings . defaultAnswer ( defaultAnswer ( mockSettings ) ) ;
Code	return ! mockSettings . defaultAnswer ( defaultAnswer ( mockSettings ) ) ;
Distance : 6

21
Tree	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 5

22
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Distance : 8

23
Tree	return mockSettings . defaultAnswer ( new DateTickUnit ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new DateTickUnit ( returnTypeGenericMetadata ) ) ;
Distance : 5

24
Tree	return mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) < mockSettings ;
Code	return mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) < mockSettings ;
Distance : 6

25
Tree	return ( mockSettings ) returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 6

26
Tree	return mockSettings . defaultAnswer ( new RunnerProvider ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new RunnerProvider ( returnTypeGenericMetadata ) ) ;
Distance : 5

27
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && getString ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && getString ;
Distance : 8

28
Tree	return ( mockSettings ) returnTypeGenericMetadata . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnTypeGenericMetadata . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 5

29
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Distance : 7

30
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && ^ ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && ^ ;
Distance : 8

31
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , mockSettings ) ;
Distance : 5

32
Tree	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 4

33
Tree	return mockSettings . defaultAnswer ( defaultAnswer ( mockSettings ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( defaultAnswer ( mockSettings ) , STRING_CONSTANT , mockSettings ) ;
Distance : 9

34
Tree	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) , mockSettings ) ;
Distance : 6

35
Tree	return mockSettings . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Distance : 8

36
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && serializable ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && serializable ( returnTypeGenericMetadata ) ;
Distance : 7

37
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && ^ ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && ^ ;
Distance : 5

38
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 6

39
Tree	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Distance : 8

40
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && extraInterfaces ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && extraInterfaces ;
Distance : 5

41
Tree	return defaultAnswer ( super(); , defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( super(); , defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 7

42
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Distance : 5

43
Tree	return mockSettings . defaultAnswer ( defaultAnswer ( mockSettings ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( defaultAnswer ( mockSettings ) , returnTypeGenericMetadata ) ;
Distance : 7

44
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && getString ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && getString ;
Distance : 5

45
Tree	return mockSettings . defaultAnswer ( mockSettings ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( mockSettings ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

46
Tree	return ! mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return ! mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 5

47
Tree	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Code	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Distance : 6

48
Tree	return returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) . defaultAnswer () ;
Code	return returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) . defaultAnswer () ;
Distance : 10

49
Tree	return ! mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return ! mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 5

50
Tree	return returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 6

51
Tree	return mockSettings . defaultAnswer ( new RemoveCode ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new RemoveCode ( returnTypeGenericMetadata ) ) ;
Distance : 5

52
Tree	return defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) , mockSettings ) ;
Code	return defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) , mockSettings ) ;
Distance : 8

53
Tree	return returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 4

54
Tree	return defaultAnswer ( mockSettings ) . defaultAnswer () ;
Code	return defaultAnswer ( mockSettings ) . defaultAnswer () ;
Distance : 10

55
Tree	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) , STRING_CONSTANT , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) , STRING_CONSTANT , returnTypeGenericMetadata ) ;
Distance : 8

56
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && classToMock ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && classToMock ;
Distance : 7

57
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && DateUtils.MILLIS_PER_DAY ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && DateUtils.MILLIS_PER_DAY ;
Distance : 7

58
Tree	return defaultAnswer ( mockSettings , returnTypeGenericMetadata ) && returnTypeGenericMetadata . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( mockSettings , returnTypeGenericMetadata ) && returnTypeGenericMetadata . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 8

59
Tree	return mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 4

60
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && classToMock ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && classToMock ;
Distance : 5

61
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && anyList ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && anyList ;
Distance : 7

62
Tree	return serializable ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return serializable ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

63
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

64
Tree	return mockSettings . defaultAnswer ( new CompilerOptions.LanguageMode.ECMASCRIPT_2017 ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new CompilerOptions.LanguageMode.ECMASCRIPT_2017 ( returnTypeGenericMetadata ) ) ;
Distance : 5

65
Tree	return ( mockSettings ) mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 4

66
Tree	return mockSettings . defaultAnswer ( mockSettings ) && serializable ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( mockSettings ) && serializable ( returnTypeGenericMetadata ) ;
Distance : 7

67
Tree	return returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 6

68
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && ^ ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && ^ ;
Distance : 7

69
Tree	return returnTypeGenericMetadata . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

70
Tree	return returnsDeepStubsAnswerUsing ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return returnsDeepStubsAnswerUsing ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 7

71
Tree	return defaultAnswer ( mockSettings , returnTypeGenericMetadata ) && serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( mockSettings , returnTypeGenericMetadata ) && serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 7

72
Tree	return returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

73
Tree	return returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 8

74
Tree	return defaultAnswer ( mockSettings ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( mockSettings ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

75
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && anyList ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && anyList ;
Distance : 8

76
Tree	return mockSettings . serializable ( mockSettings ) ;
Code	return mockSettings . serializable ( mockSettings ) ;
Distance : 7

77
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 7

78
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 5

79
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) , returnTypeGenericMetadata ) ;
Distance : 8

80
Tree	return ! mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return ! mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 4

81
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 9

82
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && extraInterfaces ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && extraInterfaces ;
Distance : 7

83
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) , returnTypeGenericMetadata ) ;
Distance : 6

84
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && returnTypeGenericMetadata . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && returnTypeGenericMetadata . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 9

85
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && <= ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && <= ;
Distance : 7

86
Tree	return mockSettings . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Code	return mockSettings . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Distance : 6

87
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Distance : 7

88
Tree	return mockSettings . defaultAnswer ( mockSettings ) ;
Code	return mockSettings . defaultAnswer ( mockSettings ) ;
Distance : 7

89
Tree	return mockSettings . returnsDeepStubsAnswerUsing ( mockSettings ) ;
Code	return mockSettings . returnsDeepStubsAnswerUsing ( mockSettings ) ;
Distance : 7

90
Tree	return defaultAnswer ( mockSettings ) . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( mockSettings ) . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Distance : 7

91
Tree	return defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 8

92
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 6

93
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && verifyNoMoreInteractions ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && verifyNoMoreInteractions ;
Distance : 8

94
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && defaultAnswer ( mockSettings ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && defaultAnswer ( mockSettings ) ;
Distance : 10

95
Tree	return defaultAnswer ( mockSettings ) . defaultAnswer ( mockSettings ) ;
Code	return defaultAnswer ( mockSettings ) . defaultAnswer ( mockSettings ) ;
Distance : 8

96
Tree	return defaultAnswer ( mockSettings , returnTypeGenericMetadata ) && mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( mockSettings , returnTypeGenericMetadata ) && mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 7

97
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) , STRING_CONSTANT , mockSettings ) ;
Distance : 8

98
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && verifyNoMoreInteractions ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && verifyNoMoreInteractions ;
Distance : 7

99
Tree	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 6

100
Tree	return defaultAnswer ( return; , returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( return; , returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 7

101
Tree	return ! mockSettings . returnsDeepStubsAnswerUsing ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return ! mockSettings . returnsDeepStubsAnswerUsing ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 6

102
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && defaultAnswer ( mockSettings ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && defaultAnswer ( mockSettings ) ;
Distance : 8

103
Tree	return mockSettings . serializable ( returnTypeGenericMetadata ) ;
Code	return mockSettings . serializable ( returnTypeGenericMetadata ) ;
Distance : 6

104
Tree	return defaultAnswer ( mockSettings , returnTypeGenericMetadata ) && defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( mockSettings , returnTypeGenericMetadata ) && defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 6

105
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) < mockSettings ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) < mockSettings ;
Distance : 5

106
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && returnsDeepStubsAnswerUsing ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && returnsDeepStubsAnswerUsing ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 9

107
Tree	return defaultAnswer ( mockSettings ) . serializable () ;
Code	return defaultAnswer ( mockSettings ) . serializable () ;
Distance : 10

108
Tree	return defaultAnswer ( mockSettings , returnTypeGenericMetadata ) && mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( mockSettings , returnTypeGenericMetadata ) && mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 8

109
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 9

110
Tree	return returnsDeepStubsAnswerUsing ( defaultAnswer ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return returnsDeepStubsAnswerUsing ( defaultAnswer ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 9

111
Tree	return defaultAnswer ( returnTypeGenericMetadata , mockSettings ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , mockSettings ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 9

112
Tree	return defaultAnswer ( mockSettings , returnTypeGenericMetadata ) && returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( mockSettings , returnTypeGenericMetadata ) && returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 7

113
Tree	return defaultAnswer ( mockSettings , returnTypeGenericMetadata ) && returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( mockSettings , returnTypeGenericMetadata ) && returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Distance : 8

114
Tree	return serializable ( mockSettings ) . defaultAnswer () ;
Code	return serializable ( mockSettings ) . defaultAnswer () ;
Distance : 10

115
Tree	return ! mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return ! mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 4

116
Tree	return mockSettings . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) && serializable ( returnTypeGenericMetadata ) ;
Code	return mockSettings . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) && serializable ( returnTypeGenericMetadata ) ;
Distance : 7

117
Tree	return mockSettings . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 4

118
Tree	return ( mockSettings ) returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 5

119
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && &= ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && &= ;
Distance : 7

120
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 8

121
Tree	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 5

122
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 8

123
Tree	return returnsDeepStubsAnswerUsing ( mockSettings ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return returnsDeepStubsAnswerUsing ( mockSettings ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

124
Tree	return serializable ( returnTypeGenericMetadata ) . defaultAnswer () ;
Code	return serializable ( returnTypeGenericMetadata ) . defaultAnswer () ;
Distance : 10

125
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && serializable ( mockSettings ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && serializable ( mockSettings ) ;
Distance : 10

126
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && serializable ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && serializable ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 9

127
Tree	return returnTypeGenericMetadata . defaultAnswer ( mockSettings ) ;
Code	return returnTypeGenericMetadata . defaultAnswer ( mockSettings ) ;
Distance : 8

128
Tree	return defaultAnswer ( null , defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( null , defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 7

129
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && returnTypeGenericMetadata . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && returnTypeGenericMetadata . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 9

130
Tree	return defaultAnswer ( defaultAnswer ( mockSettings ) ) ;
Code	return defaultAnswer ( defaultAnswer ( mockSettings ) ) ;
Distance : 7

131
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 4

132
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Distance : 5

133
Tree	return returnsDeepStubsAnswerUsing ( mockSettings ) . defaultAnswer () ;
Code	return returnsDeepStubsAnswerUsing ( mockSettings ) . defaultAnswer () ;
Distance : 10

134
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , STRING_CONSTANT , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , STRING_CONSTANT , returnTypeGenericMetadata ) ;
Distance : 7

135
Tree	return mockSettings . serializable ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . serializable ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 4

136
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 5

137
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 3

138
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 5

139
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

140
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && & ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && & ;
Distance : 5

141
Tree	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 5

142
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer () ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer () ;
Distance : 10

143
Tree	return mockSettings . defaultAnswer ( new CallsRealMethods ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new CallsRealMethods ( returnTypeGenericMetadata ) ) ;
Distance : 5

144
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 8

145
Tree	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 4

146
Tree	return ! mockSettings . serializable ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return ! mockSettings . serializable ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 5

147
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Distance : 7

148
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 7

149
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && &= ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && &= ;
Distance : 5

150
Tree	return defaultAnswer ( null , returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( null , returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 7

151
Tree	return mockSettings . defaultAnswer ( new InstantiatorProvider2Adapter ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new InstantiatorProvider2Adapter ( returnTypeGenericMetadata ) ) ;
Distance : 5

152
Tree	return mockSettings . defaultAnswer ( new MethodsImpl ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new MethodsImpl ( returnTypeGenericMetadata ) ) ;
Distance : 5

153
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . serializable () ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . serializable () ;
Distance : 10

154
Tree	return serializable ( null , returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return serializable ( null , returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 6

155
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && extends ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && extends ;
Distance : 5

156
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && anyList ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && anyList ;
Distance : 5

157
Tree	return mockSettings . defaultAnswer ( new MockMethodInterceptor ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new MockMethodInterceptor ( returnTypeGenericMetadata ) ) ;
Distance : 5

158
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && <= ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && <= ;
Distance : 5

159
Tree	return defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 6

160
Tree	return defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 6

161
Tree	return returnsDeepStubsAnswerUsing ( null , returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return returnsDeepStubsAnswerUsing ( null , returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 7

162
Tree	return mockSettings . defaultAnswer ( new ReductionGatherer ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new ReductionGatherer ( returnTypeGenericMetadata ) ) ;
Distance : 5

163
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && DateUtils.MILLIS_PER_DAY ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && DateUtils.MILLIS_PER_DAY ;
Distance : 5

164
Tree	return defaultAnswer ( serializable ( mockSettings ) ) ;
Code	return defaultAnswer ( serializable ( mockSettings ) ) ;
Distance : 7

165
Tree	return defaultAnswer ( returnTypeGenericMetadata , mockSettings ) && serializable ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , mockSettings ) && serializable ( returnTypeGenericMetadata ) ;
Distance : 9

166
Tree	return returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Code	return returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Distance : 8

167
Tree	return ( returnTypeGenericMetadata ) returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return ( returnTypeGenericMetadata ) returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 4

168
Tree	return ( mockSettings ) mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 5

169
Tree	return defaultAnswer ( mockSettings ) . returnsDeepStubsAnswerUsing () ;
Code	return defaultAnswer ( mockSettings ) . returnsDeepStubsAnswerUsing () ;
Distance : 10

170
Tree	return defaultAnswer ( null , returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return defaultAnswer ( null , returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 8

171
Tree	return mockSettings . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return mockSettings . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

172
Tree	return ! returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return ! returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 4

173
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) < returnTypeGenericMetadata ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) < returnTypeGenericMetadata ;
Distance : 6

174
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 9

175
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && &= ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && &= ;
Distance : 8

176
Tree	return serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 7

177
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . serializable ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . serializable ( returnTypeGenericMetadata ) ;
Distance : 8

178
Tree	return defaultAnswer ( serializable ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( serializable ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 8

179
Tree	return ! mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return ! mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 5

180
Tree	return mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Code	return mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Distance : 6

181
Tree	return defaultAnswer ( defaultAnswer ( mockSettings ) , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( defaultAnswer ( mockSettings ) , returnTypeGenericMetadata ) ;
Distance : 9

182
Tree	return defaultAnswer ( mockSettings , returnTypeGenericMetadata ) && serializable ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( mockSettings , returnTypeGenericMetadata ) && serializable ( returnTypeGenericMetadata ) ;
Distance : 9

183
Tree	return defaultAnswer ( null , serializable ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( null , serializable ( returnTypeGenericMetadata ) ) ;
Distance : 8

184
Tree	return defaultAnswer ( continue; , returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( continue; , returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 7

185
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && serializable ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && serializable ( returnTypeGenericMetadata ) ;
Distance : 9

186
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && serializable ( mockSettings ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && serializable ( mockSettings ) ;
Distance : 8

187
Tree	return mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Distance : 8

188
Tree	return serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 5

189
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 8

190
Tree	return mockSettings . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 6

191
Tree	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Distance : 7

192
Tree	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) < mockSettings ;
Code	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) < mockSettings ;
Distance : 6

193
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . returnsDeepStubsAnswerUsing () ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . returnsDeepStubsAnswerUsing () ;
Distance : 10

194
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 3

195
Tree	return mockSettings . defaultAnswer ( defaultAnswer ( mockSettings ) ) ;
Code	return mockSettings . defaultAnswer ( defaultAnswer ( mockSettings ) ) ;
Distance : 5

196
Tree	return mockSettings . defaultAnswer ( mockSettings ) && returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( mockSettings ) && returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Distance : 6

197
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) < mockSettings ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) < mockSettings ;
Distance : 6

198
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && serializable ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && serializable ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 9

199
Tree	return returnTypeGenericMetadata . serializable ( returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . serializable ( returnTypeGenericMetadata ) ;
Distance : 7

========================================================================


========================================================================
Example Number: 82
Parent Code is: 
{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withParams ( cls , outerClassInstance ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=outerClassInstance}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=noArgConstructor}) (214{val=(}) (800{val=cls}) (215{val=)})) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (32 (802{val=withOuterClass}) (214{val=(}) (800{val=cls}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=outerClassInstance}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=noArgConstructor}) (214{val=(}) (800{val=cls}) (215{val=)})) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (32 (802{val=withParams}) (214{val=(}) (800{val=cls}) (234{val=,}) (800{val=outerClassInstance}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/21/parent/src_org_mockito_internal_creation_instance_ConstructorInstantiator.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; }
Distance : 4

1
Tree	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( withOuterClass ( cls ) ) ; } Format.COMPACT }
Code	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( withOuterClass ( cls ) ) ; } Format.COMPACT }
Distance : 9

2
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 4

3
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Distance : 6

4
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( LocalizedFormats.EVALUATION_FAILED , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( LocalizedFormats.EVALUATION_FAILED , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

5
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor () ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor () ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 6

6
Tree	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( withOuterClass ( cls ) ) ; } indexOfAny }
Code	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( withOuterClass ( cls ) ) ; } indexOfAny }
Distance : 9

7
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( CompilerOptions.J2clPassMode , false ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( CompilerOptions.J2clPassMode , false ) ; } return withOuterClass ( cls ) ; }
Distance : 8

8
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 4

9
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls , outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls , outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 7

10
Tree	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( ( ( cls ) ) ; } updateCovarianceDiagonalOnly }
Code	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( ( ( cls ) ) ; } updateCovarianceDiagonalOnly }
Distance : 9

11
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( outerClassInstance ) ; }
Distance : 4

12
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 3

13
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , outerClassInstance ) ; }
Distance : 3

14
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( outerClassInstance , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( outerClassInstance , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

15
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 4

16
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Token.PARAM_LIST , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Token.PARAM_LIST , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

17
Tree	{ if ( outerClassInstance == super(); ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

18
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , configureWith ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , configureWith ) ; }
Distance : 2

19
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 7

20
Tree	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( withOuterClass ( cls ) ) ; } visitCode }
Code	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( withOuterClass ( cls ) ) ; } visitCode }
Distance : 9

21
Tree	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( withOuterClass ( cls ) ) ; } RemovalType.REMOVE_RHS }
Code	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( withOuterClass ( cls ) ) ; } RemovalType.REMOVE_RHS }
Distance : 9

22
Tree	{ if ( outerClassInstance == super(); ) { return outerClassInstance . noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return outerClassInstance . noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 8

23
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 6

24
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) . withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) . withOuterClass ( cls ) ; }
Distance : 9

25
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( CompilerOptions.J2clPassMode , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( CompilerOptions.J2clPassMode , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

26
Tree	{ if ( cls == null ) { return cls . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return cls . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 8

27
Tree	{ if ( cls == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

28
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) . withOuterClass ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) . withOuterClass ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 8

29
Tree	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( withOuterClass ( cls ) ) ; } validateObjectPattern }
Code	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( withOuterClass ( cls ) ) ; } validateObjectPattern }
Distance : 9

30
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Distance : 5

31
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( FastDateParser.JAPANESE_IMPERIAL , cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( FastDateParser.JAPANESE_IMPERIAL , cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 9

32
Tree	{ if ( cls == null ) { return noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

33
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return outerClassInstance . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return outerClassInstance . withOuterClass ( cls ) ; }
Distance : 5

34
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , CheckLevel.WARNING ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , CheckLevel.WARNING ) ; }
Distance : 2

35
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( BigFraction.ZERO , false ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( BigFraction.ZERO , false ) ; } return withOuterClass ( cls ) ; }
Distance : 8

36
Tree	{ if ( cls == null ) { return cls . noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return cls . noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 8

37
Tree	{ if ( outerClassInstance == continue; ) { return outerClassInstance . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == continue; ) { return outerClassInstance . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

38
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( LocalizedFormats.EVALUATION_FAILED , cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( LocalizedFormats.EVALUATION_FAILED , cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 9

39
Tree	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( ( ( cls ) ) ; } FeatureSet.ES3 }
Code	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( ( ( cls ) ) ; } FeatureSet.ES3 }
Distance : 9

40
Tree	{ if ( outerClassInstance == return; ) { return outerClassInstance . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == return; ) { return outerClassInstance . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

41
Tree	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 4

42
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 7

43
Tree	{ if ( cls == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; }
Code	{ if ( cls == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; }
Distance : 5

44
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( BigFraction.ZERO , cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( BigFraction.ZERO , cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 9

45
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) . withOuterClass ( cls ) ; }
Distance : 9

46
Tree	{ if ( outerClassInstance == return; ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == return; ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 8

47
Tree	{ if ( cls == null ) { return noArgConstructor () ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( cls == null ) { return noArgConstructor () ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 7

48
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Token.PARAM_LIST , cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Token.PARAM_LIST , cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 9

49
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) ) ; }
Distance : 6

50
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return cls . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return cls . withOuterClass ( cls ) ; }
Distance : 6

51
Tree	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Distance : 6

52
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) ) ; }
Distance : 7

53
Tree	{ if ( outerClassInstance == null ) { return cls . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 6

54
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance , cls . ( ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance , cls . ( ( cls ) ) ; }
Distance : 8

55
Tree	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . == ( cls ) ) ; }
Code	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . == ( cls ) ) ; }
Distance : 8

56
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls , cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls , cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 7

57
Tree	{ if ( cls == null ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 8

58
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

59
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; }
Distance : 4

60
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls , cls . ( ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls , cls . ( ( cls ) ) ; }
Distance : 8

61
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 8

62
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ( ( outerClassInstance ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ( ( outerClassInstance ) ) ; }
Distance : 6

63
Tree	{ if ( cls == super(); ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == super(); ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 8

64
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( outerClassInstance ) . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( outerClassInstance ) . withOuterClass ( cls ) ; }
Distance : 9

65
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , p2.vector ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , p2.vector ) ; }
Distance : 2

66
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( ComposableFunction.SQRT , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( ComposableFunction.SQRT , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

67
Tree	{ if ( outerClassInstance == break; ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == break; ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 8

68
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 9

69
Tree	{ if ( cls == super(); ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == super(); ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

70
Tree	{ if ( outerClassInstance == null ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 5

71
Tree	{ if ( outerClassInstance == super(); ) { return outerClassInstance . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return outerClassInstance . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

72
Tree	{ if ( cls == null ) { return outerClassInstance . noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return outerClassInstance . noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 8

73
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Distance : 2

74
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( LocalizedFormats.EVALUATION_FAILED , false ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( LocalizedFormats.EVALUATION_FAILED , false ) ; } return withOuterClass ( cls ) ; }
Distance : 8

75
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ( ( cls ) ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ( ( cls ) ) ; }
Distance : 8

76
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Any.ANY , cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Any.ANY , cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 9

77
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 5

78
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

79
Tree	{ if ( outerClassInstance == null ) { return this . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return this . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 6

80
Tree	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 4

81
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; }
Distance : 4

82
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return cls . withOuterClass ( cls , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return cls . withOuterClass ( cls , cls ) ; }
Distance : 5

83
Tree	{ if ( outerClassInstance == return; ) { return outerClassInstance . noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == return; ) { return outerClassInstance . noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 8

84
Tree	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

85
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , CheckConformance.CONFORMANCE_VIOLATION ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , CheckConformance.CONFORMANCE_VIOLATION ) ; }
Distance : 2

86
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , outerClassInstance ) ; }
Distance : 2

87
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( ComposableFunction.TAN , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( ComposableFunction.TAN , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

88
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Distance : 6

89
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ( ( cls ) ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ( ( cls ) ) ; }
Distance : 8

90
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , getUnitMillis ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , getUnitMillis ) ; }
Distance : 2

91
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 7

92
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Distance : 6

93
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return outerClassInstance . withOuterClass ( cls ) . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return outerClassInstance . withOuterClass ( cls ) . withOuterClass ( cls ) ; }
Distance : 8

94
Tree	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; }
Code	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; }
Distance : 4

95
Tree	{ if ( cls == null ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

96
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( FastDateParser.JAPANESE_IMPERIAL , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( FastDateParser.JAPANESE_IMPERIAL , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

97
Tree	{ if ( outerClassInstance == continue; ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == continue; ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 8

98
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 5

99
Tree	{ if ( cls == null ) { return cls . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return cls . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

100
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

101
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return cls . withOuterClass ( cls ) . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return cls . withOuterClass ( cls ) . withOuterClass ( cls ) ; }
Distance : 9

102
Tree	{ if ( outerClassInstance == super(); ) { return cls . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return cls . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 8

103
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , notNull ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , notNull ) ; }
Distance : 2

104
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

105
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) . withOuterClass ( cls ) ; }
Distance : 9

106
Tree	{ if ( outerClassInstance == super(); ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 8

107
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Distance : 5

108
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Token.PARAM_LIST , false ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Token.PARAM_LIST , false ) ; } return withOuterClass ( cls ) ; }
Distance : 8

109
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return outerClassInstance . withOuterClass ( cls , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return outerClassInstance . withOuterClass ( cls , cls ) ; }
Distance : 4

110
Tree	{ if ( outerClassInstance == return; ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == return; ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

111
Tree	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

112
Tree	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; }
Code	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; }
Distance : 4

113
Tree	{ if ( outerClassInstance == break; ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == break; ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 7

114
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ) ( cls ) ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ) ( cls ) ) ; }
Distance : 8

115
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ( ( cls ) ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ( ( cls ) ) ; }
Distance : 8

116
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Distance : 5

117
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) ) ; }
Distance : 7

118
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 9

119
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( java.util.Locale.US ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( java.util.Locale.US ) ; } return withOuterClass ( cls ) ; }
Distance : 6

120
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( DiagnosticGroups.MISSING_OVERRIDE ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( DiagnosticGroups.MISSING_OVERRIDE ) ; } return withOuterClass ( cls ) ; }
Distance : 6

121
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( ComposableFunction.SQRT ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( ComposableFunction.SQRT ) ; } return withOuterClass ( cls ) ; }
Distance : 6

122
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( ComposableFunction.TAN ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( ComposableFunction.TAN ) ; } return withOuterClass ( cls ) ; }
Distance : 6

123
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( FastDateParser.JAPANESE_IMPERIAL ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( FastDateParser.JAPANESE_IMPERIAL ) ; } return withOuterClass ( cls ) ; }
Distance : 6

124
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) . withOuterClass ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) . withOuterClass ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 8

125
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( BigFraction.ZERO ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( BigFraction.ZERO ) ; } return withOuterClass ( cls ) ; }
Distance : 6

126
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( LocalizedFormats.EVALUATION_FAILED ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( LocalizedFormats.EVALUATION_FAILED ) ; } return withOuterClass ( cls ) ; }
Distance : 6

127
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) . withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) . withOuterClass ( outerClassInstance ) ; }
Distance : 7

128
Tree	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 9

129
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 7

130
Tree	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( withOuterClass ( cls ) ) ; } else }
Code	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( withOuterClass ( cls ) ) ; } else }
Distance : 9

131
Tree	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( withOuterClass ( cls ) ) ; } fireChartChanged }
Code	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( withOuterClass ( cls ) ) ; } fireChartChanged }
Distance : 9

132
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( BigFraction.ZERO , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( BigFraction.ZERO , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

133
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 8

134
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 4

135
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Any.ANY ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Any.ANY ) ; } return withOuterClass ( cls ) ; }
Distance : 6

136
Tree	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) . withOuterClass ( cls ) ; }
Distance : 9

137
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) ) ; }
Distance : 7

138
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Token.PARAM_LIST ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Token.PARAM_LIST ) ; } return withOuterClass ( cls ) ; }
Distance : 6

139
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Any.ANY , false ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Any.ANY , false ) ; } return withOuterClass ( cls ) ; }
Distance : 8

140
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) . withOuterClass ( cls ) ; }
Distance : 9

141
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Any.ANY , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Any.ANY , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

142
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( java.util.Locale.US , false ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( java.util.Locale.US , false ) ; } return withOuterClass ( cls ) ; }
Distance : 8

143
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Any.ANY , cls , outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Any.ANY , cls , outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 9

144
Tree	{ if ( outerClassInstance == null ) { return cls . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

145
Tree	{ if ( outerClassInstance == default: ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == default: ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 7

146
Tree	{ if ( cls == null ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 7

147
Tree	{ if ( outerClassInstance == null ) { return cls . noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls . noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

148
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ( ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ( ( cls ) ) ; }
Distance : 7

149
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( CompilerOptions.J2clPassMode ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( CompilerOptions.J2clPassMode ) ; } return withOuterClass ( cls ) ; }
Distance : 6

150
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( DiagnosticGroups.MISSING_OVERRIDE , false ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( DiagnosticGroups.MISSING_OVERRIDE , false ) ; } return withOuterClass ( cls ) ; }
Distance : 8

151
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( java.util.Locale.US , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( java.util.Locale.US , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

152
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( DiagnosticGroups.MISSING_OVERRIDE , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( DiagnosticGroups.MISSING_OVERRIDE , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

153
Tree	{ if ( outerClassInstance == null ) { return cls . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 7

154
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 4

155
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( ComposableFunction.SQRT , false ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( ComposableFunction.SQRT , false ) ; } return withOuterClass ( cls ) ; }
Distance : 8

156
Tree	{ if ( cls == null ) { return outerClassInstance . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return outerClassInstance . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

157
Tree	{ if ( outerClassInstance == break; ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == break; ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

158
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( ComposableFunction.TAN , false ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( ComposableFunction.TAN , false ) ; } return withOuterClass ( cls ) ; }
Distance : 8

159
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( java.util.Locale.US , cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( java.util.Locale.US , cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 9

160
Tree	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( withOuterClass ( cls ) ) ; } inlineEmptyMethod }
Code	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( withOuterClass ( cls ) ) ; } inlineEmptyMethod }
Distance : 9

161
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( outerClassInstance , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( outerClassInstance , cls ) ; }
Distance : 5

162
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) . withOuterClass ( cls ) ; }
Distance : 8

163
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

164
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( DiagnosticGroups.MISSING_OVERRIDE , cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( DiagnosticGroups.MISSING_OVERRIDE , cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 9

165
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; }
Distance : 4

166
Tree	{ if ( outerClassInstance == continue; ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == continue; ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

167
Tree	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Distance : 6

168
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Distance : 5

169
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( ComposableFunction.SQRT , cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( ComposableFunction.SQRT , cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 9

170
Tree	{ if ( outerClassInstance == null ) { return cls . noArgConstructor ( cls , outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls . noArgConstructor ( cls , outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 7

171
Tree	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) ) ; }
Code	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) ) ; }
Distance : 7

172
Tree	{ if ( outerClassInstance == default: ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == default: ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

173
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 9

174
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance . ) ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance . ) ( cls ) ) ; }
Distance : 7

175
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( outerClassInstance ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( outerClassInstance ) ) ; }
Distance : 5

176
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Distance : 6

177
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( FastDateParser.JAPANESE_IMPERIAL , false ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( FastDateParser.JAPANESE_IMPERIAL , false ) ; } return withOuterClass ( cls ) ; }
Distance : 8

178
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( ComposableFunction.TAN , cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( ComposableFunction.TAN , cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 9

179
Tree	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls ) . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls ) . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 9

180
Tree	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Code	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Distance : 5

181
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , outerClassInstance . null ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , outerClassInstance . null ( cls ) ) ; }
Distance : 6

182
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) ) ; }
Distance : 7

183
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 3

184
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 6

185
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Distance : 5

186
Tree	{ if ( outerClassInstance == null ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

187
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Distance : 4

188
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

189
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; }
Distance : 3

190
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , iValues.length ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , iValues.length ) ; }
Distance : 2

191
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , Any.ANY ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , Any.ANY ) ; }
Distance : 2

192
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , StringUtils.EMPTY ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , StringUtils.EMPTY ) ; }
Distance : 2

193
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

194
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 7

195
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( this , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( this , cls ) ; }
Distance : 4

196
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 5

197
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 9

198
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls . ) ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls . ) ( cls ) ) ; }
Distance : 7

199
Tree	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) ) ; }
Code	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) ) ; }
Distance : 7

========================================================================


========================================================================
Example Number: 83
Parent Code is: 
Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
-------------------------------------------------------------------------------
Child code is: 
Object injected = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields , instance ) . thenInject () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Object})) (59 (800{val=injected}) (204{val==}) (32 (32 (800{val=mockCandidateFilter}) (235{val=.}) (802{val=filterCandidate}) (214{val=(}) (800{val=mocks}) (234{val=,}) (800{val=field}) (234{val=,}) (800{val=instance}) (215{val=)})) (235{val=.}) (802{val=thenInject}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Object})) (59 (800{val=injected}) (204{val==}) (32 (32 (800{val=mockCandidateFilter}) (235{val=.}) (802{val=filterCandidate}) (214{val=(}) (800{val=mocks}) (234{val=,}) (800{val=field}) (234{val=,}) (800{val=orderedInstanceFields}) (234{val=,}) (800{val=instance}) (215{val=)})) (235{val=.}) (802{val=thenInject}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/19/parent/src_org_mockito_internal_configuration_injection_PropertyAndSetterInjection.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 2

1
Tree	Object injected = injected . filterCandidate ( computeMillis , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( computeMillis , field , instance ) . thenInject () ;
Distance : 4

2
Tree	Object mocks = ( ( mocks ) this ) . thenInject ( mocks , field , field ) . thenInject () ;
Code	Object mocks = ( ( mocks ) this ) . thenInject ( mocks , field , field ) . thenInject () ;
Distance : 11

3
Tree	Object injected = filterCandidate ( mocks , mocks ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , mocks ) . thenInject () ;
Distance : 7

4
Tree	Object injected = mocks . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = mocks . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

5
Tree	Object mocks = injected . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Distance : 4

6
Tree	Object mocks = injected ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = injected ( mocks , field , instance ) . thenInject () ;
Distance : 6

7
Tree	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , field , instance , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , field , instance , field ) . thenInject () ;
Distance : 4

8
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) ;
Distance : 6

9
Tree	Object injected = injected ( mocks , field , field ) . thenInject () ;
Code	Object injected = injected ( mocks , field , field ) . thenInject () ;
Distance : 6

10
Tree	Object instance = injected ( mocks , field ) . thenInject () ;
Code	Object instance = injected ( mocks , field ) . thenInject () ;
Distance : 8

11
Tree	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Distance : 3

12
Tree	Object injected = injected ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected ( mocks , field , instance ) . thenInject () ;
Distance : 5

13
Tree	Object injected = mocks . filterCandidate ( mocks , field , instance ) ;
Code	Object injected = mocks . filterCandidate ( mocks , field , instance ) ;
Distance : 6

14
Tree	Object injected = mocks . filterCandidate ( mocks , field ) . thenInject () ;
Code	Object injected = mocks . filterCandidate ( mocks , field ) . thenInject () ;
Distance : 5

15
Tree	Object injected = injected . filterCandidate ( mocks , field , field ) ;
Code	Object injected = injected . filterCandidate ( mocks , field , field ) ;
Distance : 7

16
Tree	Object field = filterCandidate ( mocks , field ) . thenInject () ;
Code	Object field = filterCandidate ( mocks , field ) . thenInject () ;
Distance : 7

17
Tree	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , field , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , field , field , instance ) . thenInject () ;
Distance : 3

18
Tree	Object field = injected ( mocks , field ) . thenInject () ;
Code	Object field = injected ( mocks , field ) . thenInject () ;
Distance : 8

19
Tree	Object injected = mocks ( mocks , field , instance ) . thenInject () ;
Code	Object injected = mocks ( mocks , field , instance ) . thenInject () ;
Distance : 5

20
Tree	Object injected = filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 5

21
Tree	Object injected = filterCandidate ( injected , NUMBER_CONSTANT ) . thenInject () ;
Code	Object injected = filterCandidate ( injected , NUMBER_CONSTANT ) . thenInject () ;
Distance : 8

22
Tree	Object field = injected . filterCandidate ( mocks , field ) . thenInject () ;
Code	Object field = injected . filterCandidate ( mocks , field ) . thenInject () ;
Distance : 6

23
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

24
Tree	Object injected = injected ( mocks , instance ) . thenInject () ;
Code	Object injected = injected ( mocks , instance ) . thenInject () ;
Distance : 7

25
Tree	Object field = filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object field = filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 5

26
Tree	Object injected = mocks . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Code	Object injected = mocks . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Distance : 4

27
Tree	Object mocks = mockCandidateFilter ( mocks , field ) . thenInject () ;
Code	Object mocks = mockCandidateFilter ( mocks , field ) . thenInject () ;
Distance : 7

28
Tree	Object mocks = ( ( mocks ) this ) . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = ( ( mocks ) this ) . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 10

29
Tree	Object field = injected ( mocks , field , instance ) . thenInject () ;
Code	Object field = injected ( mocks , field , instance ) . thenInject () ;
Distance : 6

30
Tree	Object injected = ( ( mocks ) this ) . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object injected = ( ( mocks ) this ) . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 9

31
Tree	Object injected = mocks . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Code	Object injected = mocks . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Distance : 3

32
Tree	Object injected = mockCandidateFilter ( mocks , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter ( mocks , field ) . thenInject () ;
Distance : 6

33
Tree	Object field = injected . filterCandidate ( mocks , field , instance ) ;
Code	Object field = injected . filterCandidate ( mocks , field , instance ) ;
Distance : 7

34
Tree	Object injected = filterCandidate ( mocks , NUMBER_CONSTANT ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , NUMBER_CONSTANT ) . thenInject () ;
Distance : 7

35
Tree	Object mocks = this . filterCandidate () . filterCandidate () ;
Code	Object mocks = this . filterCandidate () . filterCandidate () ;
Distance : 12

36
Tree	Object mocks = ( ( mocks ) field ) . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = ( ( mocks ) field ) . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 10

37
Tree	Object instance = filterCandidate ( mocks , field ) . thenInject () ;
Code	Object instance = filterCandidate ( mocks , field ) . thenInject () ;
Distance : 7

38
Tree	Object injected = injected ( mocks , field ) . thenInject () ;
Code	Object injected = injected ( mocks , field ) . thenInject () ;
Distance : 7

39
Tree	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field , instance ) ;
Code	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field , instance ) ;
Distance : 6

40
Tree	Object injected = ( ( mocks ) this ) . thenInject ( mocks , field , field ) . thenInject () ;
Code	Object injected = ( ( mocks ) this ) . thenInject ( mocks , field , field ) . thenInject () ;
Distance : 10

41
Tree	Object injected = this . filterCandidate () . filterCandidate () ;
Code	Object injected = this . filterCandidate () . filterCandidate () ;
Distance : 11

42
Tree	Object injected = filterCandidate ( mocks , field ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field ) . thenInject () ;
Distance : 6

43
Tree	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field ) . thenInject () ;
Code	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field ) . thenInject () ;
Distance : 5

44
Tree	Object injected = filterCandidate ( mocks , field , instance , instance ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field , instance , instance ) . thenInject () ;
Distance : 3

45
Tree	Object mocks = filterCandidate ( mocks , NUMBER_CONSTANT ) . thenInject () ;
Code	Object mocks = filterCandidate ( mocks , NUMBER_CONSTANT ) . thenInject () ;
Distance : 8

46
Tree	Object instance = filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object instance = filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 5

47
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Distance : 3

48
Tree	Object mocks = mockCandidateFilter ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = mockCandidateFilter ( mocks , field , instance ) . thenInject () ;
Distance : 5

49
Tree	Object mocks = filterCandidate ( mocks , instance ) . thenInject () ;
Code	Object mocks = filterCandidate ( mocks , instance ) . thenInject () ;
Distance : 7

50
Tree	Object injected = ( ( mocks ) field ) . thenInject ( mocks , field , field ) . thenInject () ;
Code	Object injected = ( ( mocks ) field ) . thenInject ( mocks , field , field ) . thenInject () ;
Distance : 10

51
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) ;
Distance : 5

52
Tree	Object injected = filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

53
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) ;
Distance : 6

54
Tree	Object injected = ( ( mocks ) field ) . thenInject ( mocks , field , field ) . thenInject () ;
Code	Object injected = ( ( mocks ) field ) . thenInject ( mocks , field , field ) . thenInject () ;
Distance : 10

55
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 2

56
Tree	Object field = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object field = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

57
Tree	Object injected = mockCandidateFilter . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Distance : 2

58
Tree	Object injected = ( ( mocks ) field ) . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object injected = ( ( mocks ) field ) . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 9

59
Tree	Object injected = mockCandidateFilter ( mocks , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter ( mocks , field , instance ) . thenInject () ;
Distance : 4

60
Tree	Object instance = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object instance = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

61
Tree	Object injected = ( ( mocks ) field ) . thenInject ( mocks , instance , instance ) . thenInject () ;
Code	Object injected = ( ( mocks ) field ) . thenInject ( mocks , instance , instance ) . thenInject () ;
Distance : 10

62
Tree	Object instance = injected . filterCandidate ( mocks , field , instance ) ;
Code	Object instance = injected . filterCandidate ( mocks , field , instance ) ;
Distance : 7

63
Tree	Object mocks = injected . filterCandidate ( mocks , field ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( mocks , field ) . thenInject () ;
Distance : 6

64
Tree	Object injected = injected ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected ( mocks , field , instance ) . thenInject () ;
Distance : 5

65
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field ) . thenInject () ;
Distance : 4

66
Tree	Object injected = filterCandidate ( mocks , field , instance , mocks ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field , instance , mocks ) . thenInject () ;
Distance : 4

67
Tree	Object injected = filterCandidate ( mocks , instance ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , instance ) . thenInject () ;
Distance : 6

68
Tree	Object injected = filterCandidate ( injected , field ) . thenInject () ;
Code	Object injected = filterCandidate ( injected , field ) . thenInject () ;
Distance : 7

69
Tree	Object injected = ( ( mocks ) this ) . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object injected = ( ( mocks ) this ) . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 9

70
Tree	Object injected = filterCandidate ( mocks , instance ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , instance ) . thenInject () ;
Distance : 6

71
Tree	Object instance = injected ( mocks , field , instance ) . thenInject () ;
Code	Object instance = injected ( mocks , field , instance ) . thenInject () ;
Distance : 6

72
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 2

73
Tree	Object injected = injected . filterCandidate ( mocks , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field ) . thenInject () ;
Distance : 5

74
Tree	Object injected = injected . filterCandidate ( mocks , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field ) . thenInject () ;
Distance : 5

75
Tree	Object instance = filterCandidate ( mocks , field , instance , instance ) . thenInject () ;
Code	Object instance = filterCandidate ( mocks , field , instance , instance ) . thenInject () ;
Distance : 4

76
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks . filterCandidate () , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks . filterCandidate () , field , instance ) . thenInject () ;
Distance : 4

77
Tree	Object field = filterCandidate ( mocks , field , instance , instance ) . thenInject () ;
Code	Object field = filterCandidate ( mocks , field , instance , instance ) . thenInject () ;
Distance : 4

78
Tree	Object injected = mockCandidateFilter . filterCandidate () . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate () . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 5

79
Tree	Object injected = filterCandidate ( mocks , instance , instance ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , instance , instance ) . thenInject () ;
Distance : 5

80
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Distance : 3

81
Tree	Object field = ( ( mocks ) this ) . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object field = ( ( mocks ) this ) . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 10

82
Tree	Object injected = injected . filterCandidate ( finderStub.actualToReturn , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( finderStub.actualToReturn , field , instance ) . thenInject () ;
Distance : 4

83
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks . instance ( mocks , field , instance ) , thenInject , instance ) ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks . instance ( mocks , field , instance ) , thenInject , instance ) ;
Distance : 9

84
Tree	Object mocks = injected . filterCandidate ( mocks . filterCandidate () , field , instance ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( mocks . filterCandidate () , field , instance ) . thenInject () ;
Distance : 6

85
Tree	Object mocks = injected . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Distance : 5

86
Tree	Object injected = this . filterCandidate () . filterCandidate () ;
Code	Object injected = this . filterCandidate () . filterCandidate () ;
Distance : 11

87
Tree	Object instance = injected . filterCandidate () . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object instance = injected . filterCandidate () . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 7

88
Tree	Object injected = ( ( mocks ) field ) . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object injected = ( ( mocks ) field ) . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 9

89
Tree	Object mocks = injected . filterCandidate () . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = injected . filterCandidate () . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 7

90
Tree	Object injected = injected . filterCandidate ( mocks , Color.RED ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , Color.RED ) . thenInject () ;
Distance : 6

91
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) ;
Distance : 5

92
Tree	Object injected = mockCandidateFilter . filterCandidate ( NUMBER_CONSTANT , field , instance , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( NUMBER_CONSTANT , field , instance , field ) . thenInject () ;
Distance : 3

93
Tree	Object field = filterCandidate ( mocks , NUMBER_CONSTANT ) . thenInject () ;
Code	Object field = filterCandidate ( mocks , NUMBER_CONSTANT ) . thenInject () ;
Distance : 8

94
Tree	Object instance = injected . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Code	Object instance = injected . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Distance : 5

95
Tree	Object injected = field . filterCandidate ( mocks , field ) . thenInject () ;
Code	Object injected = field . filterCandidate ( mocks , field ) . thenInject () ;
Distance : 5

96
Tree	Object injected = ( ( mocks ) instance ) . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object injected = ( ( mocks ) instance ) . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 9

97
Tree	Object mocks = injected . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Distance : 5

98
Tree	Object instance = injected . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Code	Object instance = injected . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Distance : 5

99
Tree	Object injected = field . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Code	Object injected = field . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Distance : 4

100
Tree	Object injected = injected . filterCandidate ( mocks . filterCandidate () , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks . filterCandidate () , field , instance ) . thenInject () ;
Distance : 5

101
Tree	Object instance = filterCandidate ( mocks , NUMBER_CONSTANT ) . thenInject () ;
Code	Object instance = filterCandidate ( mocks , NUMBER_CONSTANT ) . thenInject () ;
Distance : 8

102
Tree	Object injected = filterCandidate ( mocks , field , instance , instance ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field , instance , instance ) . thenInject () ;
Distance : 3

103
Tree	Object injected = injected . filterCandidate ( mocks , p2.vector ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , p2.vector ) . thenInject () ;
Distance : 6

104
Tree	Object injected = injected . filterCandidate ( mocks , NodeUtil.isNameDeclaration ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , NodeUtil.isNameDeclaration ) . thenInject () ;
Distance : 6

105
Tree	Object injected = injected . filterCandidate () . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate () . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 6

106
Tree	Object injected = filterCandidate ( mocks , field , instance , thenInject ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field , instance , thenInject ) . thenInject () ;
Distance : 4

107
Tree	Object injected = mockCandidateFilter ( mocks , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter ( mocks , field , instance ) . thenInject () ;
Distance : 4

108
Tree	Object injected = injected . filterCandidate ( mocks , FastMath.PI ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , FastMath.PI ) . thenInject () ;
Distance : 6

109
Tree	Object injected = injected . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Distance : 4

110
Tree	Object instance = this . filterCandidate () . filterCandidate () ;
Code	Object instance = this . filterCandidate () . filterCandidate () ;
Distance : 12

111
Tree	Object injected = filterCandidate ( instance , NUMBER_CONSTANT ) . thenInject () ;
Code	Object injected = filterCandidate ( instance , NUMBER_CONSTANT ) . thenInject () ;
Distance : 8

112
Tree	Object injected = injected . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , thenInject , instance ) ;
Code	Object injected = injected . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , thenInject , instance ) ;
Distance : 10

113
Tree	Object mocks = filterCandidate ( mocks , field ) . thenInject () ;
Code	Object mocks = filterCandidate ( mocks , field ) . thenInject () ;
Distance : 7

114
Tree	Object injected = injected . filterCandidate ( className , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( className , field , instance ) . thenInject () ;
Distance : 4

115
Tree	Object instance = ( ( mocks ) field ) . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object instance = ( ( mocks ) field ) . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 10

116
Tree	Object injected = injected . filterCandidate ( mocks , b1.value ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , b1.value ) . thenInject () ;
Distance : 6

117
Tree	Object injected = injected . filterCandidate ( LanguageMode.ECMASCRIPT8 , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( LanguageMode.ECMASCRIPT8 , field , instance ) . thenInject () ;
Distance : 4

118
Tree	Object mocks = filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object mocks = filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 6

119
Tree	Object injected = mockCandidateFilter ( mocks , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter ( mocks , field ) . thenInject () ;
Distance : 6

120
Tree	Object injected = injected . filterCandidate ( BASE_DATE , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( BASE_DATE , field , instance ) . thenInject () ;
Distance : 4

121
Tree	Object injected = this . filterCandidate () . filterCandidate () ; T
Code	Object injected = this . filterCandidate () . filterCandidate () ; T
Distance : 12

122
Tree	Object injected = injected . filterCandidate ( sleep , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( sleep , field , instance ) . thenInject () ;
Distance : 4

123
Tree	Object mocks = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

124
Tree	Object field = this . filterCandidate () . filterCandidate () ;
Code	Object field = this . filterCandidate () . filterCandidate () ;
Distance : 12

125
Tree	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

126
Tree	Object injected = mocks . filterCandidate ( mocks . filterCandidate () , field , instance ) . thenInject () ;
Code	Object injected = mocks . filterCandidate ( mocks . filterCandidate () , field , instance ) . thenInject () ;
Distance : 5

127
Tree	Object injected = this . filterCandidate () . filterCandidate () ; p
Code	Object injected = this . filterCandidate () . filterCandidate () ; p
Distance : 12

128
Tree	Object field = ( ( mocks ) field ) . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object field = ( ( mocks ) field ) . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 10

129
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

130
Tree	Object injected = mocks . filterCandidate () . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = mocks . filterCandidate () . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 6

131
Tree	Object mocks = filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 5

132
Tree	Object injected = filterCandidate ( mocks , field , field , instance ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field , field , instance ) . thenInject () ;
Distance : 3

133
Tree	Object injected = this . filterCandidate () . filterCandidate () ; Math
Code	Object injected = this . filterCandidate () . filterCandidate () ; Math
Distance : 12

134
Tree	Object injected = mocks . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Code	Object injected = mocks . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Distance : 4

135
Tree	Object injected = injected . filterCandidate ( mocks , line.cos ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , line.cos ) . thenInject () ;
Distance : 6

136
Tree	Object injected = ( ( mocks ) this ) . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object injected = ( ( mocks ) this ) . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 9

137
Tree	Object injected = ( ( mocks ) this ) . thenInject ( mocks , instance , instance ) . thenInject () ;
Code	Object injected = ( ( mocks ) this ) . thenInject ( mocks , instance , instance ) . thenInject () ;
Distance : 10

138
Tree	Object injected = injected . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Distance : 4

139
Tree	Object injected = this . filterCandidate () . filterCandidate () ; source
Code	Object injected = this . filterCandidate () . filterCandidate () ; source
Distance : 12

140
Tree	Object injected = injected . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , injected , field ) ;
Code	Object injected = injected . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , injected , field ) ;
Distance : 11

141
Tree	Object field = injected . filterCandidate ( mocks . filterCandidate () , field , instance ) . thenInject () ;
Code	Object field = injected . filterCandidate ( mocks . filterCandidate () , field , instance ) . thenInject () ;
Distance : 6

142
Tree	Object injected = injected . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Distance : 4

143
Tree	Object injected = injected . filterCandidate ( mocks . filterCandidate () , field , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks . filterCandidate () , field , field ) . thenInject () ;
Distance : 6

144
Tree	Object field = injected . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Code	Object field = injected . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Distance : 5

145
Tree	Object injected = filterCandidate ( mocks , field , instance , injected ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field , instance , injected ) . thenInject () ;
Distance : 4

146
Tree	Object injected = filterCandidate ( mocks , field ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field ) . thenInject () ;
Distance : 6

147
Tree	Object injected = injected . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , injected , instance ) ;
Code	Object injected = injected . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , injected , instance ) ;
Distance : 11

148
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

149
Tree	Object field = injected . filterCandidate () . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object field = injected . filterCandidate () . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 7

150
Tree	Object injected = filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

151
Tree	Object injected = injected . filterCandidate ( getInstantMillis , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( getInstantMillis , field , instance ) . thenInject () ;
Distance : 4

152
Tree	Object injected = injected . filterCandidate ( mocks , values.length ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , values.length ) . thenInject () ;
Distance : 6

153
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field ) . thenInject () ;
Distance : 4

154
Tree	Object injected = injected . filterCandidate ( mocks . filterCandidate () , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks . filterCandidate () , field , instance ) . thenInject () ;
Distance : 5

155
Tree	Object mocks = injected . filterCandidate ( mocks , field , instance ) ;
Code	Object mocks = injected . filterCandidate ( mocks , field , instance ) ;
Distance : 7

156
Tree	Object mocks = ( ( mocks ) field ) . thenInject ( mocks , field , field ) . thenInject () ;
Code	Object mocks = ( ( mocks ) field ) . thenInject ( mocks , field , field ) . thenInject () ;
Distance : 11

157
Tree	Object mocks = injected ( mocks , field ) . thenInject () ;
Code	Object mocks = injected ( mocks , field ) . thenInject () ;
Distance : 8

158
Tree	Object injected = injected . filterCandidate ( mocks , Any.ANY ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , Any.ANY ) . thenInject () ;
Distance : 6

159
Tree	Object injected = filterCandidate ( mocks , field , injected ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field , injected ) . thenInject () ;
Distance : 5

160
Tree	Object injected = filterCandidate ( mocks , NUMBER_CONSTANT ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , NUMBER_CONSTANT ) . thenInject () ;
Distance : 7

161
Tree	Object field = injected . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Code	Object field = injected . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Distance : 4

162
Tree	Object injected = injected . filterCandidate ( mocks , v.data ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , v.data ) . thenInject () ;
Distance : 6

163
Tree	Object field = injected . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Code	Object field = injected . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Distance : 5

164
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , injected , instance ) ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , injected , instance ) ;
Distance : 10

165
Tree	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Distance : 3

166
Tree	Object injected = injected . filterCandidate () . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate () . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 6

167
Tree	Object instance = injected . filterCandidate ( mocks , field ) . thenInject () ;
Code	Object instance = injected . filterCandidate ( mocks , field ) . thenInject () ;
Distance : 6

168
Tree	Object mocks = filterCandidate ( injected , NUMBER_CONSTANT ) . thenInject () ;
Code	Object mocks = filterCandidate ( injected , NUMBER_CONSTANT ) . thenInject () ;
Distance : 9

169
Tree	Object injected = filterCandidate ( mocks , field , instance , field ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field , instance , field ) . thenInject () ;
Distance : 4

170
Tree	Object injected = filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 5

171
Tree	Object mocks = injected . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , injected , instance ) ;
Code	Object mocks = injected . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , injected , instance ) ;
Distance : 12

172
Tree	Object injected = injected . filterCandidate ( mocks . filterCandidate ( mocks , field , field ) , injected , instance ) ;
Code	Object injected = injected . filterCandidate ( mocks . filterCandidate ( mocks , field , field ) , injected , instance ) ;
Distance : 12

173
Tree	Object injected = this . filterCandidate () . filterCandidate () ; value
Code	Object injected = this . filterCandidate () . filterCandidate () ; value
Distance : 12

174
Tree	Object mocks = mockCandidateFilter . filterCandidate ( mocks . filterCandidate () , field , instance ) . thenInject () ;
Code	Object mocks = mockCandidateFilter . filterCandidate ( mocks . filterCandidate () , field , instance ) . thenInject () ;
Distance : 5

175
Tree	Object injected = injected . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , injected , instance ) ;
Code	Object injected = injected . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , injected , instance ) ;
Distance : 11

176
Tree	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Code	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Distance : 4

177
Tree	Object mocks = filterCandidate ( mocks , field , instance , instance ) . thenInject () ;
Code	Object mocks = filterCandidate ( mocks , field , instance , instance ) . thenInject () ;
Distance : 4

178
Tree	Object injected = filterCandidate ( mocks , NUMBER_CONSTANT ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , NUMBER_CONSTANT ) . thenInject () ;
Distance : 7

179
Tree	Object instance = ( ( mocks ) this ) . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object instance = ( ( mocks ) this ) . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 10

180
Tree	Object injected = injected . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , mocks , instance ) ;
Code	Object injected = injected . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , mocks , instance ) ;
Distance : 11

181
Tree	Object injected = filterCandidate ( field , NUMBER_CONSTANT ) . thenInject () ;
Code	Object injected = filterCandidate ( field , NUMBER_CONSTANT ) . thenInject () ;
Distance : 7

182
Tree	Object mocks = mockCandidateFilter . filterCandidate () . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = mockCandidateFilter . filterCandidate () . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 6

183
Tree	Object injected = injected . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Distance : 4

184
Tree	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Code	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Distance : 4

185
Tree	Object injected = injected . filterCandidate ( mocks , field , field . instance () ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , field . instance () ) . thenInject () ;
Distance : 4

186
Tree	Object injected = injected . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 4

187
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Distance : 3

188
Tree	Object injected = mocks ( mocks , field ) . thenInject () ;
Code	Object injected = mocks ( mocks , field ) . thenInject () ;
Distance : 7

189
Tree	Object injected = ( ( mocks ) this ) . thenInject ( mocks , field , field ) . thenInject () ;
Code	Object injected = ( ( mocks ) this ) . thenInject ( mocks , field , field ) . thenInject () ;
Distance : 10

190
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks . field () , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks . field () , field , instance ) . thenInject () ;
Distance : 3

191
Tree	Object injected = injected ( mocks , field ) . thenInject () ;
Code	Object injected = injected ( mocks , field ) . thenInject () ;
Distance : 7

192
Tree	Object injected = mockCandidateFilter . filterCandidate () . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate () . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 5

193
Tree	Object injected = injected . filterCandidate ( getStackTrace , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( getStackTrace , field , instance ) . thenInject () ;
Distance : 4

194
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Distance : 3

195
Tree	Object injected = injected . filterCandidate ( mocks , PolymerClassDefinition.DefinitionType.ObjectLiteral ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , PolymerClassDefinition.DefinitionType.ObjectLiteral ) . thenInject () ;
Distance : 6

196
Tree	Object mocks = mockCandidateFilter . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Code	Object mocks = mockCandidateFilter . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Distance : 3

197
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks . filterCandidate () , field , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks . filterCandidate () , field , field ) . thenInject () ;
Distance : 5

198
Tree	Object injected = injected . filterCandidate () . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate () . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 7

199
Tree	Object injected = injected . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , thenInject , field ) ;
Code	Object injected = injected . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , thenInject , field ) ;
Distance : 10

========================================================================


========================================================================
Example Number: 84
Parent Code is: 
{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return MOCKITO_CORE . mock ( classToMock , mockSettings , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=MOCKITO_CORE}) (235{val=.}) (802{val=mock}) (214{val=(}) (800{val=classToMock}) (234{val=,}) (800{val=mockSettings}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=MOCKITO_CORE}) (235{val=.}) (802{val=mock}) (214{val=(}) (800{val=classToMock}) (234{val=,}) (800{val=mockSettings}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/16/parent/src_org_mockito_Mockito.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings ) ; }
Distance : 3

1
Tree	{ return mock ( classToMock . mock ( classToMock ) , mockSettings ) ; }
Code	{ return mock ( classToMock . mock ( classToMock ) , mockSettings ) ; }
Distance : 6

2
Tree	{ return mock ( MOCKITO_CORE , super(); ) ; }
Code	{ return mock ( MOCKITO_CORE , super(); ) ; }
Distance : 6

3
Tree	{ return MOCKITO_CORE . mock ( ComposableFunction.ASIN , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( ComposableFunction.ASIN , mockSettings ) ; }
Distance : 3

4
Tree	{ return MOCKITO_CORE . mock ( getDefaultAnswer , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( getDefaultAnswer , mockSettings ) ; }
Distance : 3

5
Tree	{ return classToMock . mock ( MOCKITO_CORE , mockSettings ) ; }
Code	{ return classToMock . mock ( MOCKITO_CORE , mockSettings ) ; }
Distance : 4

6
Tree	{ return MOCKITO_CORE . mock ( substring , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( substring , mockSettings ) ; }
Distance : 3

7
Tree	{ return boolean . mock ( this ) ; }
Code	{ return boolean . mock ( this ) ; }
Distance : 6

8
Tree	{ return final . mock ( this ) ; }
Code	{ return final . mock ( this ) ; }
Distance : 6

9
Tree	{ return MOCKITO_CORE . mock ( configureWith , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( configureWith , mockSettings ) ; }
Distance : 3

10
Tree	{ return mock () . mock ( classToMock . mock ( classToMock ) ) ; }
Code	{ return mock () . mock ( classToMock . mock ( classToMock ) ) ; }
Distance : 7

11
Tree	{ return mock ( MOCKITO_CORE , mockSettings ) ; }
Code	{ return mock ( MOCKITO_CORE , mockSettings ) ; }
Distance : 5

12
Tree	{ return mock ( classToMock . mock () , mockSettings ) ; }
Code	{ return mock ( classToMock . mock () , mockSettings ) ; }
Distance : 6

13
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , classToMock , mockSettings . mock () ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , classToMock , mockSettings . mock () ) ; }
Distance : 5

14
Tree	{ return mock () . mock ( classToMock , classToMock ) ; }
Code	{ return mock () . mock ( classToMock , classToMock ) ; }
Distance : 5

15
Tree	{ return MOCKITO_CORE . mock ( classToMock , MOCKITO_CORE ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , MOCKITO_CORE ) ; }
Distance : 3

16
Tree	{ return mock ( classToMock , null , classToMock ) ; }
Code	{ return mock ( classToMock , null , classToMock ) ; }
Distance : 4

17
Tree	{ return MOCKITO_CORE . mock ( classToMock , null , classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , null , classToMock ) ; }
Distance : 2

18
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE ) ; }
Distance : 5

19
Tree	{ return MOCKITO_CORE . mock () . mock ( mockSettings , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock () . mock ( mockSettings , mockSettings ) ; }
Distance : 5

20
Tree	{ return mock ( MOCKITO_CORE , null ) ; }
Code	{ return mock ( MOCKITO_CORE , null ) ; }
Distance : 6

21
Tree	{ return mock ( classToMock , classToMock ) ; }
Code	{ return mock ( classToMock , classToMock ) ; }
Distance : 5

22
Tree	{ return MOCKITO_CORE . mock ( mockSettings , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings , mockSettings ) ; }
Distance : 3

23
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE ) . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE ) . mock ( classToMock , mockSettings ) ; }
Distance : 7

24
Tree	{ return mock ( mockSettings , mockSettings ) ; }
Code	{ return mock ( mockSettings , mockSettings ) ; }
Distance : 5

25
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . mock ( classToMock ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . mock ( classToMock ) ) ; }
Distance : 5

26
Tree	{ return MOCKITO_CORE . mock ( mockSettings , mockSettings , mockSettings . mock () ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings , mockSettings , mockSettings . mock () ) ; }
Distance : 5

27
Tree	{ return MOCKITO_CORE . mock ( mockSettings , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings , null , mockSettings ) ; }
Distance : 3

28
Tree	{ return mock () . mock ( MOCKITO_CORE , mockSettings ) ; }
Code	{ return mock () . mock ( MOCKITO_CORE , mockSettings ) ; }
Distance : 5

29
Tree	{ return stubber . mock ( classToMock , mockSettings ) ; }
Code	{ return stubber . mock ( classToMock , mockSettings ) ; }
Distance : 3

30
Tree	{ return mock ( classToMock , null , MOCKITO_CORE ) ; }
Code	{ return mock ( classToMock , null , MOCKITO_CORE ) ; }
Distance : 4

31
Tree	{ return try . mock ( this ) ; }
Code	{ return try . mock ( this ) ; }
Distance : 6

32
Tree	{ return mock () . mock ( mockSettings . mock ( mockSettings ) ) ; }
Code	{ return mock () . mock ( mockSettings . mock ( mockSettings ) ) ; }
Distance : 8

33
Tree	{ return mock ( mockSettings , null ) ; }
Code	{ return mock ( mockSettings , null ) ; }
Distance : 5

34
Tree	{ return MOCKITO_CORE . mock ( classToMock ) . mock ( MOCKITO_CORE , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) . mock ( MOCKITO_CORE , mockSettings ) ; }
Distance : 6

35
Tree	{ return extends . mock ( this ) ; }
Code	{ return extends . mock ( this ) ; }
Distance : 6

36
Tree	{ return finderStub.actualToReturn . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return finderStub.actualToReturn . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

37
Tree	{ return mockSettings . mock ( classToMock , mockSettings . mock ( classToMock ) ) ; }
Code	{ return mockSettings . mock ( classToMock , mockSettings . mock ( classToMock ) ) ; }
Distance : 6

38
Tree	{ return mock ( mockSettings . mock ( mockSettings ) , mockSettings ) ; }
Code	{ return mock ( mockSettings . mock ( mockSettings ) , mockSettings ) ; }
Distance : 7

39
Tree	{ return MOCKITO_CORE . mock ( mockSettings , classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings , classToMock ) ; }
Distance : 3

40
Tree	{ return mock ( mockSettings , mockSettings , mockSettings ) ; }
Code	{ return mock ( mockSettings , mockSettings , mockSettings ) ; }
Distance : 4

41
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . mock () ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . mock () ) ; }
Distance : 4

42
Tree	{ return mock ( mockSettings , return; ) ; }
Code	{ return mock ( mockSettings , return; ) ; }
Distance : 5

43
Tree	{ return mockitoCore . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return mockitoCore . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

44
Tree	{ return MOCKITO_CORE . mock () . mock ( MOCKITO_CORE , classToMock ) ; }
Code	{ return MOCKITO_CORE . mock () . mock ( MOCKITO_CORE , classToMock ) ; }
Distance : 6

45
Tree	{ return mock ( classToMock , MOCKITO_CORE ) ; }
Code	{ return mock ( classToMock , MOCKITO_CORE ) ; }
Distance : 5

46
Tree	{ return mock ( classToMock , classToMock , mockSettings ) ; }
Code	{ return mock ( classToMock , classToMock , mockSettings ) ; }
Distance : 4

47
Tree	{ return mock ( classToMock , super(); , mockSettings ) ; }
Code	{ return mock ( classToMock , super(); , mockSettings ) ; }
Distance : 4

48
Tree	{ return MOCKITO_CORE . mock ( classToMock , MOCKITO_CORE . mock ( classToMock ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , MOCKITO_CORE . mock ( classToMock ) ) ; }
Distance : 6

49
Tree	{ return mock ( mockSettings . mock () , classToMock ) ; }
Code	{ return mock ( mockSettings . mock () , classToMock ) ; }
Distance : 7

50
Tree	{ return mock ( MOCKITO_CORE , MOCKITO_CORE ) ; }
Code	{ return mock ( MOCKITO_CORE , MOCKITO_CORE ) ; }
Distance : 6

51
Tree	{ return MOCKITO_CORE . mock ( classToMock ) . mock ( classToMock , classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) . mock ( classToMock , classToMock ) ; }
Distance : 6

52
Tree	{ return mock ( MOCKITO_CORE . mock ( classToMock ) , mockSettings ) ; }
Code	{ return mock ( MOCKITO_CORE . mock ( classToMock ) , mockSettings ) ; }
Distance : 5

53
Tree	{ return mock ( mockSettings , null , mockSettings ) ; }
Code	{ return mock ( mockSettings , null , mockSettings ) ; }
Distance : 5

54
Tree	{ return classToMock . mock ( MOCKITO_CORE ) ; }
Code	{ return classToMock . mock ( MOCKITO_CORE ) ; }
Distance : 6

55
Tree	{ return mock ( MOCKITO_CORE , null , mockSettings ) ; }
Code	{ return mock ( MOCKITO_CORE , null , mockSettings ) ; }
Distance : 5

56
Tree	{ return mock () . mock ( mockSettings , classToMock ) ; }
Code	{ return mock () . mock ( mockSettings , classToMock ) ; }
Distance : 5

57
Tree	{ return mock ( mockSettings , null , classToMock ) ; }
Code	{ return mock ( mockSettings , null , classToMock ) ; }
Distance : 5

58
Tree	{ return mock () ; } Override
Code	{ return mock () ; } Override
Distance : 10

59
Tree	{ return mock () . mock ( classToMock . mock ( classToMock ) ) ; } wanted
Code	{ return mock () . mock ( classToMock . mock ( classToMock ) ) ; } wanted
Distance : 8

60
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings . mock ( mockSettings ) ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings . mock ( mockSettings ) ) ; }
Distance : 6

61
Tree	{ return mock ( classToMock , continue; ) ; }
Code	{ return mock ( classToMock , continue; ) ; }
Distance : 5

62
Tree	{ return mock () . mock ( MOCKITO_CORE . mock ( classToMock ) ) ; }
Code	{ return mock () . mock ( MOCKITO_CORE . mock ( classToMock ) ) ; }
Distance : 8

63
Tree	{ return mock ( MOCKITO_CORE . mock () , MOCKITO_CORE ) ; }
Code	{ return mock ( MOCKITO_CORE . mock () , MOCKITO_CORE ) ; }
Distance : 7

64
Tree	{ return mockSettings . mock ( classToMock ) ; }
Code	{ return mockSettings . mock ( classToMock ) ; }
Distance : 5

65
Tree	{ return mock ( classToMock . mock () , mockSettings ) ; } wanted
Code	{ return mock ( classToMock . mock () , mockSettings ) ; } wanted
Distance : 7

66
Tree	{ return mock ( classToMock . mock ( mockSettings ) , mockSettings ) ; }
Code	{ return mock ( classToMock . mock ( mockSettings ) , mockSettings ) ; }
Distance : 7

67
Tree	{ return mock ( mockSettings . mock () , mockSettings ) ; }
Code	{ return mock ( mockSettings . mock () , mockSettings ) ; }
Distance : 7

68
Tree	{ return classToMock . mock ( classToMock , null , mockSettings ) ; }
Code	{ return classToMock . mock ( classToMock , null , mockSettings ) ; }
Distance : 3

69
Tree	{ return classToMock . mock ( classToMock ) ; }
Code	{ return classToMock . mock ( classToMock ) ; }
Distance : 5

70
Tree	{ return classToMock . mock ( classToMock , mockSettings , mockSettings . mock () ) ; }
Code	{ return classToMock . mock ( classToMock , mockSettings , mockSettings . mock () ) ; }
Distance : 5

71
Tree	{ return mockSettings . mock ( classToMock , mockSettings ) ; }
Code	{ return mockSettings . mock ( classToMock , mockSettings ) ; }
Distance : 3

72
Tree	{ return MOCKITO_CORE . mock () . mock ( classToMock , classToMock ) ; }
Code	{ return MOCKITO_CORE . mock () . mock ( classToMock , classToMock ) ; }
Distance : 6

73
Tree	{ return mock ( classToMock , mockSettings , classToMock ) ; }
Code	{ return mock ( classToMock , mockSettings , classToMock ) ; }
Distance : 3

74
Tree	{ return static . mock ( this ) ; }
Code	{ return static . mock ( this ) ; }
Distance : 6

75
Tree	{ return reportMatcher . mock ( this ) ; }
Code	{ return reportMatcher . mock ( this ) ; }
Distance : 6

76
Tree	{ return mock ( MOCKITO_CORE , mockSettings , mockSettings ) ; }
Code	{ return mock ( MOCKITO_CORE , mockSettings , mockSettings ) ; }
Distance : 4

77
Tree	{ return char . mock ( this ) ; }
Code	{ return char . mock ( this ) ; }
Distance : 6

78
Tree	{ return MOCKITO_CORE . mock ( mockSettings ) . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings ) . mock ( classToMock , mockSettings ) ; }
Distance : 7

79
Tree	{ return mock ( MOCKITO_CORE . mock () , mockSettings ) ; }
Code	{ return mock ( MOCKITO_CORE . mock () , mockSettings ) ; }
Distance : 6

80
Tree	{ return mock () . mock ( classToMock , MOCKITO_CORE ) ; }
Code	{ return mock () . mock ( classToMock , MOCKITO_CORE ) ; }
Distance : 5

81
Tree	{ return MOCKITO_CORE . mock ( LanguageMode.ECMASCRIPT_2015 , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( LanguageMode.ECMASCRIPT_2015 , mockSettings ) ; }
Distance : 3

82
Tree	{ return mock ( classToMock , return; ) ; }
Code	{ return mock ( classToMock , return; ) ; }
Distance : 5

83
Tree	{ return guessName . mock ( classToMock , mockSettings ) ; }
Code	{ return guessName . mock ( classToMock , mockSettings ) ; }
Distance : 3

84
Tree	{ return MOCKITO_CORE . mock () . mock ( MOCKITO_CORE , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock () . mock ( MOCKITO_CORE , mockSettings ) ; }
Distance : 6

85
Tree	{ return finderStub.actualToReturn . mock ( classToMock , mockSettings ) ; }
Code	{ return finderStub.actualToReturn . mock ( classToMock , mockSettings ) ; }
Distance : 3

86
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . mock ( mockSettings ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . mock ( mockSettings ) ) ; }
Distance : 5

87
Tree	{ return mock () . mock ( classToMock . mock ( mockSettings ) ) ; }
Code	{ return mock () . mock ( classToMock . mock ( mockSettings ) ) ; }
Distance : 7

88
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings , mockSettings . mock () ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings , mockSettings . mock () ) ; }
Distance : 5

89
Tree	{ return cloneReset . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return cloneReset . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

90
Tree	{ return MOCKITO_CORE . mock ( classToMock , continue; , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , continue; , mockSettings ) ; }
Distance : 2

91
Tree	{ return Hibernate.DATE . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return Hibernate.DATE . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

92
Tree	{ return mock () . mock ( mockSettings , mockSettings ) ; }
Code	{ return mock () . mock ( mockSettings , mockSettings ) ; }
Distance : 5

93
Tree	{ return mockSettings . mock ( classToMock , null , mockSettings ) ; }
Code	{ return mockSettings . mock ( classToMock , null , mockSettings ) ; }
Distance : 3

94
Tree	{ return mockitoCore . mock ( classToMock , mockSettings ) ; }
Code	{ return mockitoCore . mock ( classToMock , mockSettings ) ; }
Distance : 3

95
Tree	{ return mock ( classToMock , MOCKITO_CORE , mockSettings ) ; }
Code	{ return mock ( classToMock , MOCKITO_CORE , mockSettings ) ; }
Distance : 4

96
Tree	{ return MOCKITO_CORE . mock () . mock ( classToMock , MOCKITO_CORE ) ; }
Code	{ return MOCKITO_CORE . mock () . mock ( classToMock , MOCKITO_CORE ) ; }
Distance : 6

97
Tree	{ return mock () . mock ( mockSettings . mock ( classToMock ) ) ; }
Code	{ return mock () . mock ( mockSettings . mock ( classToMock ) ) ; }
Distance : 8

98
Tree	{ return cloneReset . mock ( classToMock , mockSettings ) ; }
Code	{ return cloneReset . mock ( classToMock , mockSettings ) ; }
Distance : 3

99
Tree	{ return mockSettings . mock () . mock ( classToMock , mockSettings ) ; }
Code	{ return mockSettings . mock () . mock ( classToMock , mockSettings ) ; }
Distance : 6

100
Tree	{ return mock ( classToMock . mock ( classToMock ) , classToMock ) ; }
Code	{ return mock ( classToMock . mock ( classToMock ) , classToMock ) ; }
Distance : 6

101
Tree	{ return Hibernate.DATE . mock ( classToMock , mockSettings ) ; }
Code	{ return Hibernate.DATE . mock ( classToMock , mockSettings ) ; }
Distance : 3

102
Tree	{ return MOCKITO_CORE . mock ( LanguageMode.ECMASCRIPT8 , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( LanguageMode.ECMASCRIPT8 , mockSettings ) ; }
Distance : 3

103
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE ) . mock ( mockSettings , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE ) . mock ( mockSettings , mockSettings ) ; }
Distance : 6

104
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings . mock ( classToMock ) ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings . mock ( classToMock ) ) ; }
Distance : 6

105
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , classToMock ) ; }
Distance : 4

106
Tree	{ return MOCKITO_CORE . mock ( NotNull.NOT_NULL , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( NotNull.NOT_NULL , mockSettings ) ; }
Distance : 3

107
Tree	{ return MOCKITO_CORE . mock () . mock ( mockSettings , classToMock ) ; }
Code	{ return MOCKITO_CORE . mock () . mock ( mockSettings , classToMock ) ; }
Distance : 5

108
Tree	{ return com.google.protobuf.GeneratedMessageV3 . mock ( classToMock , mockSettings ) ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 . mock ( classToMock , mockSettings ) ; }
Distance : 3

109
Tree	{ return MOCKITO_CORE . mock ( classToMock ) . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) . mock ( classToMock , mockSettings ) ; }
Distance : 6

110
Tree	{ return mock () . mock ( MOCKITO_CORE , MOCKITO_CORE ) ; }
Code	{ return mock () . mock ( MOCKITO_CORE , MOCKITO_CORE ) ; }
Distance : 6

111
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . mock ( MOCKITO_CORE ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . mock ( MOCKITO_CORE ) ) ; }
Distance : 5

112
Tree	{ return mock () . mock ( MOCKITO_CORE . mock ( MOCKITO_CORE ) ) ; }
Code	{ return mock () . mock ( MOCKITO_CORE . mock ( MOCKITO_CORE ) ) ; }
Distance : 8

113
Tree	{ return mock ( mockSettings . mock () , MOCKITO_CORE ) ; }
Code	{ return mock ( mockSettings . mock () , MOCKITO_CORE ) ; }
Distance : 7

114
Tree	{ return org.joda.time.gwt.util.Arrays . mock ( classToMock , mockSettings ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . mock ( classToMock , mockSettings ) ; }
Distance : 3

115
Tree	{ return MOCKITO_CORE . mock ( classToMock , classToMock , mockSettings . mock () ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , classToMock , mockSettings . mock () ) ; }
Distance : 5

116
Tree	{ return MOCKITO_CORE . mock ( mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings ) ; }
Distance : 4

117
Tree	{ return mock ( MOCKITO_CORE , classToMock ) ; }
Code	{ return mock ( MOCKITO_CORE , classToMock ) ; }
Distance : 6

118
Tree	{ return classToMock . mock () . mock ( classToMock , mockSettings ) ; }
Code	{ return classToMock . mock () . mock ( classToMock , mockSettings ) ; }
Distance : 6

119
Tree	{ return MOCKITO_CORE . mock ( classToMock ) . mock ( classToMock , MOCKITO_CORE ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) . mock ( classToMock , MOCKITO_CORE ) ; }
Distance : 6

120
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , classToMock . mock () ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , classToMock . mock () ) ; }
Distance : 4

121
Tree	{ return false . mock ( this ) ; }
Code	{ return false . mock ( this ) ; }
Distance : 6

122
Tree	{ return mock ( MOCKITO_CORE , classToMock , mockSettings ) ; }
Code	{ return mock ( MOCKITO_CORE , classToMock , mockSettings ) ; }
Distance : 5

123
Tree	{ return mock ( MOCKITO_CORE . mock ( MOCKITO_CORE ) , mockSettings ) ; }
Code	{ return mock ( MOCKITO_CORE . mock ( MOCKITO_CORE ) , mockSettings ) ; }
Distance : 6

124
Tree	{ return mock ( classToMock . mock () , classToMock ) ; }
Code	{ return mock ( classToMock . mock () , classToMock ) ; }
Distance : 6

125
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , null , mockSettings ) ; }
Distance : 3

126
Tree	{ return mock ( classToMock , continue; , mockSettings ) ; }
Code	{ return mock ( classToMock , continue; , mockSettings ) ; }
Distance : 4

127
Tree	{ return mock () ; } f
Code	{ return mock () ; } f
Distance : 10

128
Tree	{ return mock ( classToMock . mock () , MOCKITO_CORE ) ; }
Code	{ return mock ( classToMock . mock () , MOCKITO_CORE ) ; }
Distance : 6

129
Tree	{ return mock . mock ( classToMock , mockSettings ) ; }
Code	{ return mock . mock ( classToMock , mockSettings ) ; }
Distance : 3

130
Tree	{ return mock ( classToMock , null ) ; }
Code	{ return mock ( classToMock , null ) ; }
Distance : 5

131
Tree	{ return mock () . mock ( MOCKITO_CORE , classToMock ) ; }
Code	{ return mock () . mock ( MOCKITO_CORE , classToMock ) ; }
Distance : 6

132
Tree	{ return mock () . mock ( mockSettings . mock ( MOCKITO_CORE ) ) ; }
Code	{ return mock () . mock ( mockSettings . mock ( MOCKITO_CORE ) ) ; }
Distance : 8

133
Tree	{ return org.joda.time.gwt.util.Arrays . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

134
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } wanted
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } wanted
Distance : 5

135
Tree	{ return mock ( classToMock , super(); ) ; }
Code	{ return mock ( classToMock , super(); ) ; }
Distance : 5

136
Tree	{ return mock () ; }
Code	{ return mock () ; }
Distance : 9

137
Tree	{ return MOCKITO_CORE . mock ( classToMock ) ; } wanted
Code	{ return MOCKITO_CORE . mock ( classToMock ) ; } wanted
Distance : 5

138
Tree	{ return mock ( mockSettings , MOCKITO_CORE ) ; }
Code	{ return mock ( mockSettings , MOCKITO_CORE ) ; }
Distance : 5

139
Tree	{ return mock ( MOCKITO_CORE , return; ) ; }
Code	{ return mock ( MOCKITO_CORE , return; ) ; }
Distance : 6

140
Tree	{ return mock () ; } [
Code	{ return mock () ; } [
Distance : 10

141
Tree	{ return mock ( MOCKITO_CORE , null , classToMock ) ; }
Code	{ return mock ( MOCKITO_CORE , null , classToMock ) ; }
Distance : 5

142
Tree	{ return mock ( MOCKITO_CORE , mockSettings , classToMock ) ; }
Code	{ return mock ( MOCKITO_CORE , mockSettings , classToMock ) ; }
Distance : 4

143
Tree	{ return mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 3

144
Tree	{ return super . mock ( this ) ; }
Code	{ return super . mock ( this ) ; }
Distance : 6

145
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
Distance : 2

146
Tree	{ return mock ( classToMock . mock ( classToMock ) , MOCKITO_CORE ) ; }
Code	{ return mock ( classToMock . mock ( classToMock ) , MOCKITO_CORE ) ; }
Distance : 6

147
Tree	{ return mock () ; } array
Code	{ return mock () ; } array
Distance : 10

148
Tree	{ return mock () ; } -
Code	{ return mock () ; } -
Distance : 10

149
Tree	{ return stubber . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return stubber . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

150
Tree	{ return mock ( classToMock , mockSettings ) ; } wanted
Code	{ return mock ( classToMock , mockSettings ) ; } wanted
Distance : 5

151
Tree	{ return classToMock . mock ( classToMock , mockSettings ) ; }
Code	{ return classToMock . mock ( classToMock , mockSettings ) ; }
Distance : 3

152
Tree	{ return mock () ; } class
Code	{ return mock () ; } class
Distance : 10

153
Tree	{ return MOCKITO_CORE . mock ( classToMock ) . mock ( mockSettings , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) . mock ( mockSettings , mockSettings ) ; }
Distance : 5

154
Tree	{ return MOCKITO_CORE . mock ( classToMock , return; , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , return; , mockSettings ) ; }
Distance : 2

155
Tree	{ return mock () ; } mock
Code	{ return mock () ; } mock
Distance : 10

156
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
Distance : 2

157
Tree	{ return mock ( classToMock , mockSettings ) ; }
Code	{ return mock ( classToMock , mockSettings ) ; }
Distance : 4

158
Tree	{ return MOCKITO_CORE . mock ( classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) ; }
Distance : 4

159
Tree	{ return mock . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return mock . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

160
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; }
Code	{ return mock () . mock ( classToMock , mockSettings ) ; }
Distance : 4

161
Tree	{ return MOCKITO_CORE . mock ( classToMock , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , null , mockSettings ) ; }
Distance : 2

162
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 1

163
Tree	{ return mock ( classToMock , mockSettings , MOCKITO_CORE ) ; }
Code	{ return mock ( classToMock , mockSettings , MOCKITO_CORE ) ; }
Distance : 3

164
Tree	{ return classToMock . mock ( classToMock ) . mock ( classToMock , mockSettings ) ; }
Code	{ return classToMock . mock ( classToMock ) . mock ( classToMock , mockSettings ) ; }
Distance : 7

165
Tree	{ return mock ( classToMock . mock ( MOCKITO_CORE ) , mockSettings ) ; }
Code	{ return mock ( classToMock . mock ( MOCKITO_CORE ) , mockSettings ) ; }
Distance : 7

166
Tree	{ return MOCKITO_CORE . mock ( classToMock , super(); , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , super(); , mockSettings ) ; }
Distance : 2

167
Tree	{ return mockSettings . mock ( classToMock , mockSettings , mockSettings . mock () ) ; }
Code	{ return mockSettings . mock ( classToMock , mockSettings , mockSettings . mock () ) ; }
Distance : 5

168
Tree	{ return MOCKITO_CORE . mock () . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock () . mock ( classToMock , mockSettings ) ; }
Distance : 5

169
Tree	{ return mock () . mock ( classToMock . mock ( MOCKITO_CORE ) ) ; }
Code	{ return mock () . mock ( classToMock . mock ( MOCKITO_CORE ) ) ; }
Distance : 7

170
Tree	{ return mock ( classToMock , null , mockSettings ) ; }
Code	{ return mock ( classToMock , null , mockSettings ) ; }
Distance : 4

171
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
Distance : 2

172
Tree	{ return MOCKITO_CORE . mock ( classToMock , MOCKITO_CORE , mockSettings . mock () ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , MOCKITO_CORE , mockSettings . mock () ) ; }
Distance : 5

173
Tree	{ return MOCKITO_CORE . mock ( classToMock , null , MOCKITO_CORE ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , null , MOCKITO_CORE ) ; }
Distance : 2

174
Tree	{ return mock ( classToMock , return; , mockSettings ) ; }
Code	{ return mock ( classToMock , return; , mockSettings ) ; }
Distance : 4

175
Tree	{ return mock () . mock ( mockSettings , MOCKITO_CORE ) ; }
Code	{ return mock () . mock ( mockSettings , MOCKITO_CORE ) ; }
Distance : 5

176
Tree	{ return mockSettings . mock ( MOCKITO_CORE ) ; }
Code	{ return mockSettings . mock ( MOCKITO_CORE ) ; }
Distance : 6

177
Tree	{ return classToMock . mock ( mockSettings ) ; }
Code	{ return classToMock . mock ( mockSettings ) ; }
Distance : 5

178
Tree	{ return MOCKITO_CORE . mock ( RETURNS_DEFAULTS , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( RETURNS_DEFAULTS , mockSettings ) ; }
Distance : 3

179
Tree	{ return mock ( mockSettings , classToMock , mockSettings ) ; }
Code	{ return mock ( mockSettings , classToMock , mockSettings ) ; }
Distance : 5

180
Tree	{ return mock ( classToMock , break; ) ; }
Code	{ return mock ( classToMock , break; ) ; }
Distance : 5

181
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , MOCKITO_CORE . mock () ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , MOCKITO_CORE . mock () ) ; }
Distance : 4

182
Tree	{ return MOCKITO_CORE . mock ( mockSettings , mockSettings . mock ( classToMock ) ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings , mockSettings . mock ( classToMock ) ) ; }
Distance : 6

183
Tree	{ return com.google.protobuf.GeneratedMessageV3 . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

184
Tree	{ return guessName . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return guessName . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

185
Tree	{ return MOCKITO_CORE . mock ( Any.ANY , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( Any.ANY , mockSettings ) ; }
Distance : 3

186
Tree	{ return MOCKITO_CORE . mock ( classToMock , classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , classToMock ) ; }
Distance : 3

187
Tree	{ return classToMock . mock ( classToMock , mockSettings . mock ( classToMock ) ) ; }
Code	{ return classToMock . mock ( classToMock , mockSettings . mock ( classToMock ) ) ; }
Distance : 6

188
Tree	{ return throws . mock ( this ) ; }
Code	{ return throws . mock ( this ) ; }
Distance : 6

189
Tree	{ return mockSettings . mock ( classToMock ) . mock ( classToMock , mockSettings ) ; }
Code	{ return mockSettings . mock ( classToMock ) . mock ( classToMock , mockSettings ) ; }
Distance : 7

190
Tree	{ return mockSettings . mock ( mockSettings ) ; }
Code	{ return mockSettings . mock ( mockSettings ) ; }
Distance : 5

191
Tree	{ return mock ( mockSettings . mock ( classToMock ) , mockSettings ) ; }
Code	{ return mock ( mockSettings . mock ( classToMock ) , mockSettings ) ; }
Distance : 6

192
Tree	{ return MOCKITO_CORE . mock ( classToMock , classToMock . mock ( classToMock ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , classToMock . mock ( classToMock ) ) ; }
Distance : 6

193
Tree	{ return mock () . mock ( MOCKITO_CORE . mock ( mockSettings ) ) ; }
Code	{ return mock () . mock ( MOCKITO_CORE . mock ( mockSettings ) ) ; }
Distance : 8

194
Tree	{ return mock ( mockSettings , classToMock ) ; }
Code	{ return mock ( mockSettings , classToMock ) ; }
Distance : 5

195
Tree	{ return classToMock . mock () . mock ( MOCKITO_CORE , mockSettings ) ; }
Code	{ return classToMock . mock () . mock ( MOCKITO_CORE , mockSettings ) ; }
Distance : 7

196
Tree	{ return mock ( MOCKITO_CORE . mock ( mockSettings ) , mockSettings ) ; }
Code	{ return mock ( MOCKITO_CORE . mock ( mockSettings ) , mockSettings ) ; }
Distance : 6

197
Tree	{ return mock ( MOCKITO_CORE . mock () , classToMock ) ; }
Code	{ return mock ( MOCKITO_CORE . mock () , classToMock ) ; }
Distance : 7

198
Tree	{ return mock () ; } notifyListeners
Code	{ return mock () ; } notifyListeners
Distance : 10

199
Tree	{ return mock () ; } MathRuntimeException
Code	{ return mock () ; } MathRuntimeException
Distance : 10

========================================================================


========================================================================
Example Number: 85
Parent Code is: 
mockingProgress . verificationStarted ( mode ) ;
-------------------------------------------------------------------------------
Child code is: 
mockingProgress . verificationStarted ( new MockAwareVerificationMode ( mock , mode ) ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=mockingProgress}) (235{val=.}) (802{val=verificationStarted}) (214{val=(}) (800{val=mode}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=mockingProgress}) (235{val=.}) (802{val=verificationStarted}) (214{val=(}) (14 (304{val=new}) (43 (801{val=MockAwareVerificationMode})) (214{val=(}) (800{val=mock}) (234{val=,}) (800{val=mode}) (215{val=)})) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/14/parent/src_org_mockito_internal_MockitoCore.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	verificationStarted ( mode , mode , mock ) ;
Code	verificationStarted ( mode , mode , mock ) ;
Distance : 8

1
Tree	mockingProgress = new MockAwareVerificationMode ( mock ) ;
Code	mockingProgress = new MockAwareVerificationMode ( mock ) ;
Distance : 6

2
Tree	verificationStarted ( mock , mode ) ;
Code	verificationStarted ( mock , mode ) ;
Distance : 6

3
Tree	verificationStarted ( mockingProgress , mode , mockingProgress ) ;
Code	verificationStarted ( mockingProgress , mode , mockingProgress ) ;
Distance : 8

4
Tree	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mockingProgress ) ) ;
Code	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mockingProgress ) ) ;
Distance : 5

5
Tree	mockingProgress . verificationStarted ( mock , new MockAwareVerificationMode ( mode ) ) ;
Code	mockingProgress . verificationStarted ( mock , new MockAwareVerificationMode ( mode ) ) ;
Distance : 4

6
Tree	mode . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ;
Code	mode . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ;
Distance : 5

7
Tree	mockingProgress . verificationStarted ( mockingProgress , new MockAwareVerificationMode ( mode ) ) ;
Code	mockingProgress . verificationStarted ( mockingProgress , new MockAwareVerificationMode ( mode ) ) ;
Distance : 4

8
Tree	mockingProgress . verificationStarted ( mockingProgress . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mockingProgress . verificationStarted () ) ;
Distance : 7

9
Tree	mode . verificationStarted ( mode , mockingProgress . verificationStarted () ) ;
Code	mode . verificationStarted ( mode , mockingProgress . verificationStarted () ) ;
Distance : 8

10
Tree	mode () . verificationStarted ( mode ) ;
Code	mode () . verificationStarted ( mode ) ;
Distance : 8

11
Tree	mockingProgress () . verificationStarted ( mock ) ;
Code	mockingProgress () . verificationStarted ( mock ) ;
Distance : 7

12
Tree	mockingProgress . verificationStarted ( mode , true ) ;
Code	mockingProgress . verificationStarted ( mode , true ) ;
Distance : 6

13
Tree	mockingProgress . verificationStarted ( getLastCompiler ) ;
Code	mockingProgress . verificationStarted ( getLastCompiler ) ;
Distance : 7

14
Tree	mockingProgress . verificationStarted ( LanguageMode.ECMASCRIPT_NEXT ) ;
Code	mockingProgress . verificationStarted ( LanguageMode.ECMASCRIPT_NEXT ) ;
Distance : 7

15
Tree	mockingProgress . verificationStarted ( java.util.Locale.US ) ;
Code	mockingProgress . verificationStarted ( java.util.Locale.US ) ;
Distance : 7

16
Tree	this . mockingProgress . verificationStarted ( mode ) ;
Code	this . mockingProgress . verificationStarted ( mode ) ;
Distance : 8

17
Tree	verificationStarted ( mockingProgress , mockingProgress , mockingProgress ) ;
Code	verificationStarted ( mockingProgress , mockingProgress , mockingProgress ) ;
Distance : 8

18
Tree	this . mock . verificationStarted ( mockingProgress ) ;
Code	this . mock . verificationStarted ( mockingProgress ) ;
Distance : 9

19
Tree	mockingProgress . verificationStarted ( mode ) ;
Code	mockingProgress . verificationStarted ( mode ) ;
Distance : 6

20
Tree	mockingProgress = new MockAwareVerificationMode ( mode ) ; wanted
Code	mockingProgress = new MockAwareVerificationMode ( mode ) ; wanted
Distance : 7

21
Tree	this . mode . verificationStarted ( mode ) ; wanted
Code	this . mode . verificationStarted ( mode ) ; wanted
Distance : 9

22
Tree	verificationStarted ( mode , mockingProgress ) ; wanted
Code	verificationStarted ( mode , mockingProgress ) ; wanted
Distance : 9

23
Tree	mockingProgress . verificationStarted ( false ) ; p
Code	mockingProgress . verificationStarted ( false ) ; p
Distance : 8

24
Tree	mockingProgress () . verificationStarted ( mode ) ; wanted
Code	mockingProgress () . verificationStarted ( mode ) ; wanted
Distance : 8

25
Tree	mockingProgress . verificationStarted ( false ) ; i
Code	mockingProgress . verificationStarted ( false ) ; i
Distance : 8

26
Tree	mockingProgress . verificationStarted ( false ) ; options
Code	mockingProgress . verificationStarted ( false ) ; options
Distance : 8

27
Tree	mockingProgress . verificationStarted ( false ) ; value
Code	mockingProgress . verificationStarted ( false ) ; value
Distance : 8

28
Tree	mock . verificationStarted ( new mode () ) ;
Code	mock . verificationStarted ( new mode () ) ;
Distance : 6

29
Tree	mockingProgress () . verificationStarted ( mockingProgress ) ;
Code	mockingProgress () . verificationStarted ( mockingProgress ) ;
Distance : 8

30
Tree	mode . verificationStarted ( STRING_CONSTANT , mode ) ;
Code	mode . verificationStarted ( STRING_CONSTANT , mode ) ;
Distance : 6

31
Tree	this . mode = mock ;
Code	this . mode = mock ;
Distance : 10

32
Tree	verificationStarted ( mock , mockingProgress , mockingProgress ) ;
Code	verificationStarted ( mock , mockingProgress , mockingProgress ) ;
Distance : 8

33
Tree	mockingProgress . verificationStarted ( mock , mockingProgress . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mock , mockingProgress . verificationStarted () ) ;
Distance : 7

34
Tree	mock . verificationStarted ( mock . verificationStarted () ) ;
Code	mock . verificationStarted ( mock . verificationStarted () ) ;
Distance : 7

35
Tree	mode . verificationStarted ( mock . verificationStarted () ) ;
Code	mode . verificationStarted ( mock . verificationStarted () ) ;
Distance : 7

36
Tree	verificationStarted ( mode ) ; toString
Code	verificationStarted ( mode ) ; toString
Distance : 9

37
Tree	verificationStarted ( mode , mode , mode ) ;
Code	verificationStarted ( mode , mode , mode ) ;
Distance : 7

38
Tree	this . mode . verificationStarted ( mock ) ;
Code	this . mode . verificationStarted ( mock ) ;
Distance : 8

39
Tree	verificationStarted ( mode , mock ) ;
Code	verificationStarted ( mode , mock ) ;
Distance : 8

40
Tree	mock . verificationStarted ( mode , false ) ;
Code	mock . verificationStarted ( mode , false ) ;
Distance : 7

41
Tree	mode . verificationStarted ( mode ) ;
Code	mode . verificationStarted ( mode ) ;
Distance : 7

42
Tree	verificationStarted ( mockingProgress ) ;
Code	verificationStarted ( mockingProgress ) ;
Distance : 9

43
Tree	mockingProgress . verificationStarted ( mockingProgress , mockingProgress ) ;
Code	mockingProgress . verificationStarted ( mockingProgress , mockingProgress ) ;
Distance : 6

44
Tree	mockingProgress . verificationStarted ( mock ) ;
Code	mockingProgress . verificationStarted ( mock ) ;
Distance : 6

45
Tree	mock . verificationStarted ( new mock () ) ;
Code	mock . verificationStarted ( new mock () ) ;
Distance : 6

46
Tree	this . mock = mockingProgress ;
Code	this . mock = mockingProgress ;
Distance : 10

47
Tree	verificationStarted ( mock , mockingProgress ) ;
Code	verificationStarted ( mock , mockingProgress ) ;
Distance : 7

48
Tree	new mockingProgress () . verificationStarted ( mockingProgress ) ;
Code	new mockingProgress () . verificationStarted ( mockingProgress ) ;
Distance : 9

49
Tree	verificationStarted ( mode ) ;
Code	verificationStarted ( mode ) ;
Distance : 8

50
Tree	mode . verificationStarted ( false ) ;
Code	mode . verificationStarted ( false ) ;
Distance : 8

51
Tree	mockingProgress . verificationStarted ( new mockingProgress () ) ;
Code	mockingProgress . verificationStarted ( new mockingProgress () ) ;
Distance : 6

52
Tree	new mock () . verificationStarted ( mode ) ;
Code	new mock () . verificationStarted ( mode ) ;
Distance : 9

53
Tree	mockingProgress . verificationStarted ( mode , false ) ;
Code	mockingProgress . verificationStarted ( mode , false ) ;
Distance : 6

54
Tree	new mode () . verificationStarted ( mode ) ;
Code	new mode () . verificationStarted ( mode ) ;
Distance : 9

55
Tree	new mockingProgress () . verificationStarted ( mock ) ;
Code	new mockingProgress () . verificationStarted ( mock ) ;
Distance : 8

56
Tree	mockingProgress . verificationStarted ( mode , mock ) ;
Code	mockingProgress . verificationStarted ( mode , mock ) ;
Distance : 6

57
Tree	mockingProgress . verificationStarted ( mode , mock . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mode , mock . verificationStarted () ) ;
Distance : 6

58
Tree	verificationStarted ( mockingProgress , mockingProgress ) ;
Code	verificationStarted ( mockingProgress , mockingProgress ) ;
Distance : 8

59
Tree	mock . verificationStarted ( mockingProgress , false ) ;
Code	mock . verificationStarted ( mockingProgress , false ) ;
Distance : 7

60
Tree	mock . verificationStarted ( STRING_CONSTANT , mockingProgress ) ;
Code	mock . verificationStarted ( STRING_CONSTANT , mockingProgress ) ;
Distance : 7

61
Tree	mode . verificationStarted ( mode , mode . verificationStarted () ) ;
Code	mode . verificationStarted ( mode , mode . verificationStarted () ) ;
Distance : 8

62
Tree	mock () . verificationStarted ( mock ) ;
Code	mock () . verificationStarted ( mock ) ;
Distance : 8

63
Tree	mode . verificationStarted ( mode . verificationStarted () ) ;
Code	mode . verificationStarted ( mode . verificationStarted () ) ;
Distance : 8

64
Tree	mode () . verificationStarted ( mockingProgress ) ;
Code	mode () . verificationStarted ( mockingProgress ) ;
Distance : 9

65
Tree	mode . verificationStarted ( STRING_CONSTANT , mockingProgress ) ;
Code	mode . verificationStarted ( STRING_CONSTANT , mockingProgress ) ;
Distance : 7

66
Tree	mode . verificationStarted ( mode , mockingProgress ) ;
Code	mode . verificationStarted ( mode , mockingProgress ) ;
Distance : 7

67
Tree	mode . verificationStarted () ;
Code	mode . verificationStarted () ;
Distance : 10

68
Tree	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mock ) ) ;
Code	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mock ) ) ;
Distance : 4

69
Tree	mockingProgress . verificationStarted ( mock . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mock . verificationStarted () ) ;
Distance : 6

70
Tree	new mockingProgress () . verificationStarted ( mode ) ; wanted
Code	new mockingProgress () . verificationStarted ( mode ) ; wanted
Distance : 9

71
Tree	mockingProgress . verificationStarted () ; &&
Code	mockingProgress . verificationStarted () ; &&
Distance : 10

72
Tree	mockingProgress . verificationStarted () ; Preconditions
Code	mockingProgress . verificationStarted () ; Preconditions
Distance : 10

73
Tree	mode . verificationStarted ( true ) ;
Code	mode . verificationStarted ( true ) ;
Distance : 8

74
Tree	mockingProgress . verificationStarted () ; ParamChecks
Code	mockingProgress . verificationStarted () ; ParamChecks
Distance : 10

75
Tree	mockingProgress . mockingProgress ( mode ) ;
Code	mockingProgress . mockingProgress ( mode ) ;
Distance : 7

76
Tree	verificationStarted ( mode ) ; {}
Code	verificationStarted ( mode ) ; {}
Distance : 9

77
Tree	mode . verificationStarted ( new mode () ) ;
Code	mode . verificationStarted ( new mode () ) ;
Distance : 6

78
Tree	mode . verificationStarted ( STRING_CONSTANT , mock ) ;
Code	mode . verificationStarted ( STRING_CONSTANT , mock ) ;
Distance : 7

79
Tree	verificationStarted ( mode , mock , mockingProgress ) ;
Code	verificationStarted ( mode , mock , mockingProgress ) ;
Distance : 7

80
Tree	mock = new MockAwareVerificationMode ( mockingProgress ) ;
Code	mock = new MockAwareVerificationMode ( mockingProgress ) ;
Distance : 8

81
Tree	mock . verificationStarted ( false ) ;
Code	mock . verificationStarted ( false ) ;
Distance : 8

82
Tree	mode = new MockAwareVerificationMode ( mockingProgress ) ;
Code	mode = new MockAwareVerificationMode ( mockingProgress ) ;
Distance : 8

83
Tree	this . mode . verificationStarted ( mockingProgress ) ;
Code	this . mode . verificationStarted ( mockingProgress ) ;
Distance : 9

84
Tree	mode . mockingProgress ( mode ) ;
Code	mode . mockingProgress ( mode ) ;
Distance : 8

85
Tree	mockingProgress . verificationStarted ( LanguageMode.ECMASCRIPT_2017 ) ;
Code	mockingProgress . verificationStarted ( LanguageMode.ECMASCRIPT_2017 ) ;
Distance : 7

86
Tree	verificationStarted ( mode ) ; p
Code	verificationStarted ( mode ) ; p
Distance : 9

87
Tree	verificationStarted ( mode ) ; ParamChecks
Code	verificationStarted ( mode ) ; ParamChecks
Distance : 9

88
Tree	verificationStarted ( mode ) ; Class
Code	verificationStarted ( mode ) ; Class
Distance : 9

89
Tree	verificationStarted ( mode ) ; Preconditions
Code	verificationStarted ( mode ) ; Preconditions
Distance : 9

90
Tree	verificationStarted ( mode ) ; &&
Code	verificationStarted ( mode ) ; &&
Distance : 9

91
Tree	new mode () . verificationStarted ( mockingProgress ) ;
Code	new mode () . verificationStarted ( mockingProgress ) ;
Distance : 10

92
Tree	new mock () . verificationStarted ( mockingProgress ) ;
Code	new mock () . verificationStarted ( mockingProgress ) ;
Distance : 10

93
Tree	this . mockingProgress . verificationStarted ( mock ) ;
Code	this . mockingProgress . verificationStarted ( mock ) ;
Distance : 8

94
Tree	verificationStarted ( mock , mock ) ;
Code	verificationStarted ( mock , mock ) ;
Distance : 7

95
Tree	mock . verificationStarted ( new mockingProgress () ) ;
Code	mock . verificationStarted ( new mockingProgress () ) ;
Distance : 7

96
Tree	this . mock = mode ;
Code	this . mock = mode ;
Distance : 9

97
Tree	mock . verificationStarted ( true ) ;
Code	mock . verificationStarted ( true ) ;
Distance : 8

98
Tree	mockingProgress . verificationStarted ( wantedCount ) ;
Code	mockingProgress . verificationStarted ( wantedCount ) ;
Distance : 7

99
Tree	mockingProgress . verificationStarted ( false ) ;
Code	mockingProgress . verificationStarted ( false ) ;
Distance : 7

100
Tree	verificationStarted ( mode , mockingProgress ) ;
Code	verificationStarted ( mode , mockingProgress ) ;
Distance : 8

101
Tree	mockingProgress . verificationStarted ( PropertyCollapseLevel.ALL ) ;
Code	mockingProgress . verificationStarted ( PropertyCollapseLevel.ALL ) ;
Distance : 7

102
Tree	mockingProgress = new MockAwareVerificationMode ( mockingProgress ) ;
Code	mockingProgress = new MockAwareVerificationMode ( mockingProgress ) ;
Distance : 7

103
Tree	mockingProgress . verificationStarted ( mode , mockingProgress ) ;
Code	mockingProgress . verificationStarted ( mode , mockingProgress ) ;
Distance : 6

104
Tree	mockingProgress . verificationStarted () ;
Code	mockingProgress . verificationStarted () ;
Distance : 9

105
Tree	mockingProgress () . verificationStarted ( mode ) ;
Code	mockingProgress () . verificationStarted ( mode ) ;
Distance : 7

106
Tree	verificationStarted ( mode , mockingProgress , mockingProgress ) ;
Code	verificationStarted ( mode , mockingProgress , mockingProgress ) ;
Distance : 8

107
Tree	mock . verificationStarted ( mockingProgress , new MockAwareVerificationMode ( mode ) ) ;
Code	mock . verificationStarted ( mockingProgress , new MockAwareVerificationMode ( mode ) ) ;
Distance : 5

108
Tree	this . mode = mockingProgress ;
Code	this . mode = mockingProgress ;
Distance : 10

109
Tree	mode . verificationStarted ( mockingProgress , new MockAwareVerificationMode ( mode ) ) ;
Code	mode . verificationStarted ( mockingProgress , new MockAwareVerificationMode ( mode ) ) ;
Distance : 5

110
Tree	mock . verificationStarted ( mock , new MockAwareVerificationMode ( mode ) ) ;
Code	mock . verificationStarted ( mock , new MockAwareVerificationMode ( mode ) ) ;
Distance : 5

111
Tree	mock = new MockAwareVerificationMode ( mock ) ;
Code	mock = new MockAwareVerificationMode ( mock ) ;
Distance : 7

112
Tree	mockingProgress . verificationStarted ( mockingProgress , false ) ;
Code	mockingProgress . verificationStarted ( mockingProgress , false ) ;
Distance : 6

113
Tree	mock = new MockAwareVerificationMode ( mode ) ;
Code	mock = new MockAwareVerificationMode ( mode ) ;
Distance : 7

114
Tree	verificationStarted ( mode , mockingProgress , mock ) ;
Code	verificationStarted ( mode , mockingProgress , mock ) ;
Distance : 8

115
Tree	mode = new MockAwareVerificationMode ( mock ) ;
Code	mode = new MockAwareVerificationMode ( mock ) ;
Distance : 7

116
Tree	mock . verificationStarted ( mockingProgress ) ;
Code	mock . verificationStarted ( mockingProgress ) ;
Distance : 8

117
Tree	mockingProgress . verificationStarted ( TypeInferenceMode.NEITHER ) ;
Code	mockingProgress . verificationStarted ( TypeInferenceMode.NEITHER ) ;
Distance : 7

118
Tree	mockingProgress . mock ( mockingProgress ) ;
Code	mockingProgress . mock ( mockingProgress ) ;
Distance : 8

119
Tree	mockingProgress . verificationStarted ( mode , mockingProgress . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mode , mockingProgress . verificationStarted () ) ;
Distance : 7

120
Tree	mockingProgress . verificationStarted ( mock , false ) ;
Code	mockingProgress . verificationStarted ( mock , false ) ;
Distance : 5

121
Tree	mockingProgress . verificationStarted ( true ) ;
Code	mockingProgress . verificationStarted ( true ) ;
Distance : 7

122
Tree	this . mockingProgress = mockingProgress ;
Code	this . mockingProgress = mockingProgress ;
Distance : 11

123
Tree	mock () . verificationStarted ( mode ) ;
Code	mock () . verificationStarted ( mode ) ;
Distance : 8

124
Tree	verificationStarted ( mock ) ;
Code	verificationStarted ( mock ) ;
Distance : 8

125
Tree	mock . verificationStarted ( mode , mode ) ;
Code	mock . verificationStarted ( mode , mode ) ;
Distance : 6

126
Tree	mockingProgress . verificationStarted ( STRING_CONSTANT , mockingProgress ) ;
Code	mockingProgress . verificationStarted ( STRING_CONSTANT , mockingProgress ) ;
Distance : 6

127
Tree	mockingProgress . mode ( mode ) ;
Code	mockingProgress . mode ( mode ) ;
Distance : 7

128
Tree	mockingProgress . mock ( mode ) ;
Code	mockingProgress . mock ( mode ) ;
Distance : 7

129
Tree	this . mockingProgress = mock ;
Code	this . mockingProgress = mock ;
Distance : 10

130
Tree	mode . verificationStarted ( mode , false ) ;
Code	mode . verificationStarted ( mode , false ) ;
Distance : 7

131
Tree	mode . verificationStarted ( new mockingProgress () ) ;
Code	mode . verificationStarted ( new mockingProgress () ) ;
Distance : 7

132
Tree	this . mock . verificationStarted ( mode ) ;
Code	this . mock . verificationStarted ( mode ) ;
Distance : 8

133
Tree	mockingProgress . verificationStarted ( STRING_CONSTANT , mock ) ;
Code	mockingProgress . verificationStarted ( STRING_CONSTANT , mock ) ;
Distance : 6

134
Tree	mode () . verificationStarted ( mock ) ;
Code	mode () . verificationStarted ( mock ) ;
Distance : 8

135
Tree	mock . verificationStarted ( mode , mode . verificationStarted () ) ;
Code	mock . verificationStarted ( mode , mode . verificationStarted () ) ;
Distance : 8

136
Tree	mock . verificationStarted ( mode , true ) ;
Code	mock . verificationStarted ( mode , true ) ;
Distance : 7

137
Tree	this . mock = mock ;
Code	this . mock = mock ;
Distance : 10

138
Tree	verificationStarted ( mockingProgress , mock ) ;
Code	verificationStarted ( mockingProgress , mock ) ;
Distance : 8

139
Tree	mockingProgress . verificationStarted ( mockingProgress , mockingProgress . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mockingProgress , mockingProgress . verificationStarted () ) ;
Distance : 7

140
Tree	mock . verificationStarted ( mode . verificationStarted () ) ;
Code	mock . verificationStarted ( mode . verificationStarted () ) ;
Distance : 8

141
Tree	new mode () . verificationStarted ( mock ) ;
Code	new mode () . verificationStarted ( mock ) ;
Distance : 9

142
Tree	mock . mock ( mode ) ;
Code	mock . mock ( mode ) ;
Distance : 8

143
Tree	mock . verificationStarted ( mode , mockingProgress ) ;
Code	mock . verificationStarted ( mode , mockingProgress ) ;
Distance : 7

144
Tree	this . mock . verificationStarted ( mock ) ;
Code	this . mock . verificationStarted ( mock ) ;
Distance : 8

145
Tree	mode . verificationStarted ( new mock () ) ;
Code	mode . verificationStarted ( new mock () ) ;
Distance : 6

146
Tree	mode . verificationStarted ( mode , true ) ;
Code	mode . verificationStarted ( mode , true ) ;
Distance : 7

147
Tree	mode . mock ( mode ) ;
Code	mode . mock ( mode ) ;
Distance : 8

148
Tree	mockingProgress . mock ( mock ) ;
Code	mockingProgress . mock ( mock ) ;
Distance : 7

149
Tree	mock . mockingProgress ( mode ) ;
Code	mock . mockingProgress ( mode ) ;
Distance : 8

150
Tree	new mockingProgress () . verificationStarted ( mode ) ;
Code	new mockingProgress () . verificationStarted ( mode ) ;
Distance : 8

151
Tree	mockingProgress . verificationStarted ( STRING_CONSTANT , mode ) ; wanted
Code	mockingProgress . verificationStarted ( STRING_CONSTANT , mode ) ; wanted
Distance : 6

152
Tree	this . mode . verificationStarted ( mode ) ;
Code	this . mode . verificationStarted ( mode ) ;
Distance : 8

153
Tree	mode . verificationStarted ( mockingProgress ) ;
Code	mode . verificationStarted ( mockingProgress ) ;
Distance : 8

154
Tree	mock . verificationStarted ( mock ) ;
Code	mock . verificationStarted ( mock ) ;
Distance : 7

155
Tree	mockingProgress . verificationStarted ( mock , mockingProgress ) ;
Code	mockingProgress . verificationStarted ( mock , mockingProgress ) ;
Distance : 5

156
Tree	verificationStarted ( mockingProgress , mode ) ;
Code	verificationStarted ( mockingProgress , mode ) ;
Distance : 7

157
Tree	mockingProgress . verificationStarted () ; p
Code	mockingProgress . verificationStarted () ; p
Distance : 10

158
Tree	mockingProgress . verificationStarted ( new mode () ) ; wanted
Code	mockingProgress . verificationStarted ( new mode () ) ; wanted
Distance : 6

159
Tree	mockingProgress . verificationStarted () ; toString
Code	mockingProgress . verificationStarted () ; toString
Distance : 10

160
Tree	mockingProgress . verificationStarted () ; {}
Code	mockingProgress . verificationStarted () ; {}
Distance : 10

161
Tree	mockingProgress . verificationStarted () ; Class
Code	mockingProgress . verificationStarted () ; Class
Distance : 10

162
Tree	mockingProgress . verificationStarted ( LanguageMode.ECMASCRIPT5 ) ;
Code	mockingProgress . verificationStarted ( LanguageMode.ECMASCRIPT5 ) ;
Distance : 7

163
Tree	mode = new MockAwareVerificationMode ( mode ) ;
Code	mode = new MockAwareVerificationMode ( mode ) ;
Distance : 7

164
Tree	mockingProgress . verificationStarted ( new mock () ) ;
Code	mockingProgress . verificationStarted ( new mock () ) ;
Distance : 5

165
Tree	mock . verificationStarted ( mockingProgress . verificationStarted () ) ;
Code	mock . verificationStarted ( mockingProgress . verificationStarted () ) ;
Distance : 8

166
Tree	mode . verificationStarted ( mode , mode ) ;
Code	mode . verificationStarted ( mode , mode ) ;
Distance : 6

167
Tree	mockingProgress . verificationStarted ( mode ) ;
Code	mockingProgress . verificationStarted ( mode ) ;
Distance : 6

168
Tree	mockingProgress . verificationStarted ( mode ) ; wanted
Code	mockingProgress . verificationStarted ( mode ) ; wanted
Distance : 7

169
Tree	mockingProgress . mockingProgress ( mockingProgress ) ;
Code	mockingProgress . mockingProgress ( mockingProgress ) ;
Distance : 8

170
Tree	new mock () . verificationStarted ( mock ) ;
Code	new mock () . verificationStarted ( mock ) ;
Distance : 9

171
Tree	this . mockingProgress . verificationStarted ( mockingProgress ) ;
Code	this . mockingProgress . verificationStarted ( mockingProgress ) ;
Distance : 9

172
Tree	mockingProgress = new MockAwareVerificationMode ( mode ) ;
Code	mockingProgress = new MockAwareVerificationMode ( mode ) ;
Distance : 6

173
Tree	verificationStarted ( mode , mode ) ;
Code	verificationStarted ( mode , mode ) ;
Distance : 7

174
Tree	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ;
Code	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ;
Distance : 4

175
Tree	verificationStarted ( mode , mode , mockingProgress ) ;
Code	verificationStarted ( mode , mode , mockingProgress ) ;
Distance : 8

176
Tree	this . mode = mode ;
Code	this . mode = mode ;
Distance : 10

177
Tree	mockingProgress . verificationStarted ( mode , mode . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mode , mode . verificationStarted () ) ;
Distance : 7

178
Tree	mockingProgress . verificationStarted ( mode . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mode . verificationStarted () ) ;
Distance : 7

179
Tree	mockingProgress . verificationStarted ( STRING_CONSTANT , mode ) ;
Code	mockingProgress . verificationStarted ( STRING_CONSTANT , mode ) ;
Distance : 5

180
Tree	this . mockingProgress = mode ;
Code	this . mockingProgress = mode ;
Distance : 10

181
Tree	verificationStarted ( mode , mockingProgress , mode ) ;
Code	verificationStarted ( mode , mockingProgress , mode ) ;
Distance : 7

182
Tree	mock . verificationStarted ( mode ) ;
Code	mock . verificationStarted ( mode ) ;
Distance : 7

183
Tree	mockingProgress . verificationStarted ( new mode () ) ;
Code	mockingProgress . verificationStarted ( new mode () ) ;
Distance : 5

184
Tree	mockingProgress . verificationStarted ( mockingProgress , mode ) ;
Code	mockingProgress . verificationStarted ( mockingProgress , mode ) ;
Distance : 5

185
Tree	mode . verificationStarted ( mockingProgress . verificationStarted () ) ;
Code	mode . verificationStarted ( mockingProgress . verificationStarted () ) ;
Distance : 8

186
Tree	mock . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ;
Code	mock . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ;
Distance : 5

187
Tree	mockingProgress . verificationStarted ( TypeInferenceMode.BOTH ) ;
Code	mockingProgress . verificationStarted ( TypeInferenceMode.BOTH ) ;
Distance : 7

188
Tree	mockingProgress . verificationStarted ( mode , mode ) ;
Code	mockingProgress . verificationStarted ( mode , mode ) ;
Distance : 5

189
Tree	mockingProgress . verificationStarted ( mockingProgress ) ;
Code	mockingProgress . verificationStarted ( mockingProgress ) ;
Distance : 7

190
Tree	mock . verificationStarted ( STRING_CONSTANT , mode ) ;
Code	mock . verificationStarted ( STRING_CONSTANT , mode ) ;
Distance : 6

191
Tree	mock . verificationStarted () ;
Code	mock . verificationStarted () ;
Distance : 10

192
Tree	mode . verificationStarted ( mock ) ;
Code	mode . verificationStarted ( mock ) ;
Distance : 7

193
Tree	mock . verificationStarted ( mode , mockingProgress . verificationStarted () ) ;
Code	mock . verificationStarted ( mode , mockingProgress . verificationStarted () ) ;
Distance : 8

194
Tree	mockingProgress . verificationStarted ( mockingProgress , mode . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mockingProgress , mode . verificationStarted () ) ;
Distance : 7

195
Tree	mockingProgress . verificationStarted ( mockingProgress , true ) ;
Code	mockingProgress . verificationStarted ( mockingProgress , true ) ;
Distance : 6

196
Tree	mock . verificationStarted ( STRING_CONSTANT , mock ) ;
Code	mock . verificationStarted ( STRING_CONSTANT , mock ) ;
Distance : 7

197
Tree	mock () . verificationStarted ( mockingProgress ) ;
Code	mock () . verificationStarted ( mockingProgress ) ;
Distance : 9

198
Tree	mockingProgress . verificationStarted ( mode . verificationStarted () ) ; wanted
Code	mockingProgress . verificationStarted ( mode . verificationStarted () ) ; wanted
Distance : 8

199
Tree	this . mode = mockingProgress ; wanted
Code	this . mode = mockingProgress ; wanted
Distance : 11

========================================================================


========================================================================
Example Number: 86
Parent Code is: 
return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
-------------------------------------------------------------------------------
Child code is: 
return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata , invocation . getMock () ) , container ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=recordDeepStubAnswer}) (214{val=(}) (32 (802{val=newDeepStubMock}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (234{val=,}) (800{val=container}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=recordDeepStubAnswer}) (214{val=(}) (32 (802{val=newDeepStubMock}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (234{val=,}) (32 (800{val=invocation}) (235{val=.}) (802{val=getMock}) (216{val=()})) (215{val=)})) (234{val=,}) (800{val=container}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/10/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsDeepStubs.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) ) ;
Code	return recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) ) ;
Distance : 8

1
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) && getMock ( invocation ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) && getMock ( invocation ) ;
Distance : 9

2
Tree	return getMock ( returnTypeGenericMetadata ) . getMock ( returnTypeGenericMetadata ) ;
Code	return getMock ( returnTypeGenericMetadata ) . getMock ( returnTypeGenericMetadata ) ;
Distance : 9

3
Tree	return recordDeepStubAnswer ( container , returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( container , returnTypeGenericMetadata ) ;
Distance : 10

4
Tree	return recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 8

5
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata ) . getMock ( invocation ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata ) . getMock ( invocation ) ;
Distance : 8

6
Tree	return recordDeepStubAnswer ( invocation ) < returnTypeGenericMetadata ;
Code	return recordDeepStubAnswer ( invocation ) < returnTypeGenericMetadata ;
Distance : 10

7
Tree	return getMock ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return getMock ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 8

8
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata . newDeepStubMock () , container ) < returnTypeGenericMetadata ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata . newDeepStubMock () , container ) < returnTypeGenericMetadata ;
Distance : 8

9
Tree	return ( returnTypeGenericMetadata ) container ( getMock ( returnTypeGenericMetadata ) , container ) ;
Code	return ( returnTypeGenericMetadata ) container ( getMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 8

10
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) ) ;
Distance : 10

11
Tree	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Code	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Distance : 9

12
Tree	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 10

13
Tree	return container . getMock ( returnTypeGenericMetadata , container + this . container . recordDeepStubAnswer ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return container . getMock ( returnTypeGenericMetadata , container + this . container . recordDeepStubAnswer ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

14
Tree	return container . recordDeepStubAnswer ( returnTypeGenericMetadata , container + this . container . getMock ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return container . recordDeepStubAnswer ( returnTypeGenericMetadata , container + this . container . getMock ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 12

15
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , invocation ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , invocation ) ;
Distance : 8

16
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && getMock ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && getMock ( returnTypeGenericMetadata ) ;
Distance : 9

17
Tree	return getMock ( returnTypeGenericMetadata , container ) && container ( returnTypeGenericMetadata ) ;
Code	return getMock ( returnTypeGenericMetadata , container ) && container ( returnTypeGenericMetadata ) ;
Distance : 10

18
Tree	return recordDeepStubAnswer ( container , container ) && getMock ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( container , container ) && getMock ( returnTypeGenericMetadata ) ;
Distance : 10

19
Tree	return getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 8

20
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) < container ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) < container ;
Distance : 7

21
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) < container ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) < container ;
Distance : 7

22
Tree	return recordDeepStubAnswer ( container ) . container ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( container ) . container ( returnTypeGenericMetadata ) ;
Distance : 10

23
Tree	return recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) ;
Code	return recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 6

24
Tree	return getMock ( returnTypeGenericMetadata ) . container ( returnTypeGenericMetadata ) ;
Code	return getMock ( returnTypeGenericMetadata ) . container ( returnTypeGenericMetadata ) ;
Distance : 10

25
Tree	return getMock ( getMock ( returnTypeGenericMetadata ) , container ) ;
Code	return getMock ( getMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

26
Tree	return recordDeepStubAnswer ( container ) . getMock ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( container ) . getMock ( returnTypeGenericMetadata ) ;
Distance : 9

27
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata . newDeepStubMock () , returnTypeGenericMetadata ) < container ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata . newDeepStubMock () , returnTypeGenericMetadata ) < container ;
Distance : 9

28
Tree	return recordDeepStubAnswer ( invocation , container ) && getMock ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( invocation , container ) && getMock ( returnTypeGenericMetadata ) ;
Distance : 10

29
Tree	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

30
Tree	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 10

31
Tree	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Code	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Distance : 10

32
Tree	return returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata , container + this . container . recordDeepStubAnswer ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata , container + this . container . recordDeepStubAnswer ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

33
Tree	return container . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return container . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 10

34
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata , container + this . container . getMock ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata , container + this . container . getMock ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 12

35
Tree	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Code	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Distance : 10

36
Tree	return invocation . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return invocation . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 10

37
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < returnTypeGenericMetadata ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < returnTypeGenericMetadata ;
Distance : 9

38
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 10

39
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) < returnTypeGenericMetadata ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) < returnTypeGenericMetadata ;
Distance : 9

40
Tree	return invocation . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Code	return invocation . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Distance : 10

41
Tree	return recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 7

42
Tree	return ( container ) getMock ( container ) ;
Code	return ( container ) getMock ( container ) ;
Distance : 10

43
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata ) . container ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata ) . container ( returnTypeGenericMetadata ) ;
Distance : 9

44
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , returnTypeGenericMetadata ) < container ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , returnTypeGenericMetadata ) < container ;
Distance : 8

45
Tree	return getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 6

46
Tree	return invocation . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) < container ;
Code	return invocation . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) < container ;
Distance : 8

47
Tree	return getMock ( returnTypeGenericMetadata , returnTypeGenericMetadata ) < container ;
Code	return getMock ( returnTypeGenericMetadata , returnTypeGenericMetadata ) < container ;
Distance : 9

48
Tree	return ( invocation ) getMock ( returnTypeGenericMetadata ) ;
Code	return ( invocation ) getMock ( returnTypeGenericMetadata ) ;
Distance : 10

49
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) && container ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) && container ( returnTypeGenericMetadata ) ;
Distance : 9

50
Tree	return invocation . recordDeepStubAnswer ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Code	return invocation . recordDeepStubAnswer ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

51
Tree	return getMock ( container , container ) ;
Code	return getMock ( container , container ) ;
Distance : 10

52
Tree	return ( container ) container ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return ( container ) container ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

53
Tree	return recordDeepStubAnswer ( newDeepStubMock ( container ) ) ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( container ) ) ;
Distance : 8

54
Tree	container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container )
Code	container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container )
Distance : 8

55
Tree	return getMock ( getMock ( returnTypeGenericMetadata ) ) ;
Code	return getMock ( getMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

56
Tree	return getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 7

57
Tree	returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container )
Code	returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container )
Distance : 8

58
Tree	return getMock ( getMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return getMock ( getMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 9

59
Tree	return getMock ( container ) < container ;
Code	return getMock ( container ) < container ;
Distance : 11

60
Tree	return getMock ( invocation ) < container ;
Code	return getMock ( invocation ) < container ;
Distance : 10

61
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 5

62
Tree	return getMock ( returnTypeGenericMetadata , container ) && getMock ( returnTypeGenericMetadata ) ;
Code	return getMock ( returnTypeGenericMetadata , container ) && getMock ( returnTypeGenericMetadata ) ;
Distance : 10

63
Tree	return container . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) ) < container ;
Code	return container . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) ) < container ;
Distance : 10

64
Tree	return container . getMock ( getMock ( returnTypeGenericMetadata ) , container ) ;
Code	return container . getMock ( getMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

65
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) ) < container ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) ) < container ;
Distance : 10

66
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Distance : 10

67
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && container ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && container ( returnTypeGenericMetadata ) ;
Distance : 9

68
Tree	container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata )
Code	container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata )
Distance : 9

69
Tree	return invocation . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return invocation . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 10

70
Tree	return recordDeepStubAnswer ( container ) < returnTypeGenericMetadata ;
Code	return recordDeepStubAnswer ( container ) < returnTypeGenericMetadata ;
Distance : 11

71
Tree	return container . getMock ( returnTypeGenericMetadata . getMock () , container ) < container ;
Code	return container . getMock ( returnTypeGenericMetadata . getMock () , container ) < container ;
Distance : 8

72
Tree	return recordDeepStubAnswer ( newDeepStubMock ( container ) , container ) < container ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( container ) , container ) < container ;
Distance : 8

73
Tree	return container . getMock ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Code	return container . getMock ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

74
Tree	return ( returnTypeGenericMetadata ) container ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return ( returnTypeGenericMetadata ) container ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

75
Tree	return ( returnTypeGenericMetadata ) getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return ( returnTypeGenericMetadata ) getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

76
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Distance : 10

77
Tree	return returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata . getMock () , container ) < container ;
Code	return returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata . getMock () , container ) < container ;
Distance : 8

78
Tree	return invocation . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return invocation . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 8

79
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata ) < container ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata ) < container ;
Distance : 9

80
Tree	return invocation . getMock ( newDeepStubMock ( returnTypeGenericMetadata , false ) , container ) ;
Code	return invocation . getMock ( newDeepStubMock ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 7

81
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) < container ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) < container ;
Distance : 8

82
Tree	return invocation . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return invocation . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 10

83
Tree	return ( container ) container ( returnTypeGenericMetadata ) ;
Code	return ( container ) container ( returnTypeGenericMetadata ) ;
Distance : 12

84
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) < container ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) < container ;
Distance : 8

85
Tree	invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container )
Code	invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container )
Distance : 8

86
Tree	return getMock ( container , container ) < container ;
Code	return getMock ( container , container ) < container ;
Distance : 10

87
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata . newDeepStubMock () , container ) < container ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata . newDeepStubMock () , container ) < container ;
Distance : 8

88
Tree	return recordDeepStubAnswer ( container , container ) < container ;
Code	return recordDeepStubAnswer ( container , container ) < container ;
Distance : 9

89
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

90
Tree	return ( invocation ) container ( returnTypeGenericMetadata ) ;
Code	return ( invocation ) container ( returnTypeGenericMetadata ) ;
Distance : 11

91
Tree	return recordDeepStubAnswer ( newDeepStubMock ( invocation ) , container ) < container ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( invocation ) , container ) < container ;
Distance : 7

92
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) ;
Distance : 8

93
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

94
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ;
Distance : 9

95
Tree	return getMock ( returnTypeGenericMetadata ) < container ;
Code	return getMock ( returnTypeGenericMetadata ) < container ;
Distance : 10

96
Tree	return recordDeepStubAnswer ( container , container ) ;
Code	return recordDeepStubAnswer ( container , container ) ;
Distance : 9

97
Tree	return returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Code	return returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

98
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) < returnTypeGenericMetadata ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) < returnTypeGenericMetadata ;
Distance : 7

99
Tree	return ( container ) container ( invocation ) ;
Code	return ( container ) container ( invocation ) ;
Distance : 11

100
Tree	return ( container ) getMock ( returnTypeGenericMetadata ) ;
Code	return ( container ) getMock ( returnTypeGenericMetadata ) ;
Distance : 11

101
Tree	return ( invocation ) getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return ( invocation ) getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

102
Tree	return container . recordDeepStubAnswer ( returnTypeGenericMetadata , container + this . returnTypeGenericMetadata . recordDeepStubAnswer ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return container . recordDeepStubAnswer ( returnTypeGenericMetadata , container + this . returnTypeGenericMetadata . recordDeepStubAnswer ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

103
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata ) . container ( invocation ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata ) . container ( invocation ) ;
Distance : 9

104
Tree	return invocation . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) ;
Code	return invocation . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 8

105
Tree	returnTypeGenericMetadata . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container )
Code	returnTypeGenericMetadata . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container )
Distance : 9

106
Tree	returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container )
Code	returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container )
Distance : 9

107
Tree	invocation . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container )
Code	invocation . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container )
Distance : 9

108
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 9

109
Tree	return ( returnTypeGenericMetadata ) container ( returnTypeGenericMetadata ) ;
Code	return ( returnTypeGenericMetadata ) container ( returnTypeGenericMetadata ) ;
Distance : 11

110
Tree	return invocation . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata , false ) , container ) ;
Code	return invocation . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 7

111
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

112
Tree	return container . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) < container ;
Code	return container . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) < container ;
Distance : 8

113
Tree	invocation . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container )
Code	invocation . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container )
Distance : 9

114
Tree	return invocation . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) ) ;
Code	return invocation . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) ) ;
Distance : 10

115
Tree	return getMock ( invocation , container ) ;
Code	return getMock ( invocation , container ) ;
Distance : 9

116
Tree	return container . recordDeepStubAnswer ( returnTypeGenericMetadata , container + ) ( returnTypeGenericMetadata ) ) ;
Code	return container . recordDeepStubAnswer ( returnTypeGenericMetadata , container + ) ( returnTypeGenericMetadata ) ) ;
Distance : 10

117
Tree	return recordDeepStubAnswer ( invocation ) < container ;
Code	return recordDeepStubAnswer ( invocation ) < container ;
Distance : 9

118
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata , container + this . returnTypeGenericMetadata . recordDeepStubAnswer ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata , container + this . returnTypeGenericMetadata . recordDeepStubAnswer ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

119
Tree	return recordDeepStubAnswer ( invocation , container ) < container ;
Code	return recordDeepStubAnswer ( invocation , container ) < container ;
Distance : 9

120
Tree	return ( container ) getMock ( invocation ) ;
Code	return ( container ) getMock ( invocation ) ;
Distance : 11

121
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 7

122
Tree	return invocation . getMock ( returnTypeGenericMetadata , container + this . container . recordDeepStubAnswer ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return invocation . getMock ( returnTypeGenericMetadata , container + this . container . recordDeepStubAnswer ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

123
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) && getMock ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) && getMock ( returnTypeGenericMetadata ) ;
Distance : 9

124
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < returnTypeGenericMetadata ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < returnTypeGenericMetadata ;
Distance : 7

125
Tree	return recordDeepStubAnswer ( getMock ( invocation ) , container ) ;
Code	return recordDeepStubAnswer ( getMock ( invocation ) , container ) ;
Distance : 6

126
Tree	return recordDeepStubAnswer ( invocation . newDeepStubMock () , container ) < container ;
Code	return recordDeepStubAnswer ( invocation . newDeepStubMock () , container ) < container ;
Distance : 8

127
Tree	return recordDeepStubAnswer ( invocation , container ) ;
Code	return recordDeepStubAnswer ( invocation , container ) ;
Distance : 8

128
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 9

129
Tree	return getMock ( newDeepStubMock ( invocation ) ) ;
Code	return getMock ( newDeepStubMock ( invocation ) ) ;
Distance : 8

130
Tree	return recordDeepStubAnswer ( container , container ) && container ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( container , container ) && container ( returnTypeGenericMetadata ) ;
Distance : 10

131
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Distance : 9

132
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata ) . getMock ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata ) . getMock ( returnTypeGenericMetadata ) ;
Distance : 8

133
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata , false ) , container ) ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 6

134
Tree	return recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) < returnTypeGenericMetadata ;
Code	return recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) < returnTypeGenericMetadata ;
Distance : 8

135
Tree	return container . getMock ( getMock ( returnTypeGenericMetadata , false ) , container ) ;
Code	return container . getMock ( getMock ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 8

136
Tree	return getMock ( returnTypeGenericMetadata , container ) < container ;
Code	return getMock ( returnTypeGenericMetadata , container ) < container ;
Distance : 9

137
Tree	return container . getMock ( getMock ( returnTypeGenericMetadata ) ) ;
Code	return container . getMock ( getMock ( returnTypeGenericMetadata ) ) ;
Distance : 11

138
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 8

139
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

140
Tree	return container . recordDeepStubAnswer ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Code	return container . recordDeepStubAnswer ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

141
Tree	return recordDeepStubAnswer ( newDeepStubMock ( invocation ) ) ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( invocation ) ) ;
Distance : 7

142
Tree	return container . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) < returnTypeGenericMetadata ;
Code	return container . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) < returnTypeGenericMetadata ;
Distance : 8

143
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata , container + ) ( returnTypeGenericMetadata ) ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata , container + ) ( returnTypeGenericMetadata ) ) ;
Distance : 10

144
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Distance : 9

145
Tree	return getMock ( returnTypeGenericMetadata , container ) < returnTypeGenericMetadata ;
Code	return getMock ( returnTypeGenericMetadata , container ) < returnTypeGenericMetadata ;
Distance : 10

146
Tree	return ( returnTypeGenericMetadata ) getMock ( invocation ) ;
Code	return ( returnTypeGenericMetadata ) getMock ( invocation ) ;
Distance : 10

147
Tree	return ( returnTypeGenericMetadata ) getMock ( returnTypeGenericMetadata ) ;
Code	return ( returnTypeGenericMetadata ) getMock ( returnTypeGenericMetadata ) ;
Distance : 10

148
Tree	return getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < returnTypeGenericMetadata ;
Code	return getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < returnTypeGenericMetadata ;
Distance : 8

149
Tree	return getMock ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ;
Code	return getMock ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ;
Distance : 10

150
Tree	return getMock ( returnTypeGenericMetadata , container ) ;
Code	return getMock ( returnTypeGenericMetadata , container ) ;
Distance : 9

151
Tree	return getMock ( returnTypeGenericMetadata . newDeepStubMock () , container ) < container ;
Code	return getMock ( returnTypeGenericMetadata . newDeepStubMock () , container ) < container ;
Distance : 9

152
Tree	return recordDeepStubAnswer ( invocation ) . getMock ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( invocation ) . getMock ( returnTypeGenericMetadata ) ;
Distance : 9

153
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata , false ) , container ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 6

154
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

155
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) < returnTypeGenericMetadata ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) < returnTypeGenericMetadata ;
Distance : 8

156
Tree	return recordDeepStubAnswer ( container . newDeepStubMock () , container ) < container ;
Code	return recordDeepStubAnswer ( container . newDeepStubMock () , container ) < container ;
Distance : 9

157
Tree	return recordDeepStubAnswer ( getMock ( container ) ) ;
Code	return recordDeepStubAnswer ( getMock ( container ) ) ;
Distance : 9

158
Tree	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 8

159
Tree	return ( container ) getMock ( getMock ( returnTypeGenericMetadata ) , container ) ;
Code	return ( container ) getMock ( getMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

160
Tree	return getMock ( returnTypeGenericMetadata . getMock () , container ) < container ;
Code	return getMock ( returnTypeGenericMetadata . getMock () , container ) < container ;
Distance : 8

161
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) < returnTypeGenericMetadata ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) < returnTypeGenericMetadata ;
Distance : 9

162
Tree	return getMock ( returnTypeGenericMetadata ) < returnTypeGenericMetadata ;
Code	return getMock ( returnTypeGenericMetadata ) < returnTypeGenericMetadata ;
Distance : 11

163
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata ) < returnTypeGenericMetadata ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata ) < returnTypeGenericMetadata ;
Distance : 10

164
Tree	return container . recordDeepStubAnswer ( returnTypeGenericMetadata , container + this . container . recordDeepStubAnswer ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return container . recordDeepStubAnswer ( returnTypeGenericMetadata , container + this . container . recordDeepStubAnswer ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

165
Tree	return invocation . getMock ( returnTypeGenericMetadata . getMock () , container ) < container ;
Code	return invocation . getMock ( returnTypeGenericMetadata . getMock () , container ) < container ;
Distance : 8

166
Tree	return getMock ( newDeepStubMock ( container ) ) ;
Code	return getMock ( newDeepStubMock ( container ) ) ;
Distance : 9

167
Tree	return recordDeepStubAnswer ( invocation ) . container ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( invocation ) . container ( returnTypeGenericMetadata ) ;
Distance : 10

168
Tree	return recordDeepStubAnswer ( getMock ( invocation ) ) ;
Code	return recordDeepStubAnswer ( getMock ( invocation ) ) ;
Distance : 8

169
Tree	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata , false ) , container ) ;
Code	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 6

170
Tree	return recordDeepStubAnswer ( newDeepStubMock ( container ) , container ) ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( container ) , container ) ;
Distance : 6

171
Tree	return ( container ) getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return ( container ) getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

172
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) < container ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) < container ;
Distance : 8

173
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 7

174
Tree	return recordDeepStubAnswer ( container ) < container ;
Code	return recordDeepStubAnswer ( container ) < container ;
Distance : 10

175
Tree	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

176
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 6

177
Tree	return container . recordDeepStubAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata + getMock ( returnTypeGenericMetadata ) ) ;
Code	return container . recordDeepStubAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata + getMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

178
Tree	return ( invocation ) container ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return ( invocation ) container ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

179
Tree	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata , false ) , container ) ;
Code	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 7

180
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata , container + this . container . recordDeepStubAnswer ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata , container + this . container . recordDeepStubAnswer ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

181
Tree	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 10

182
Tree	return ( returnTypeGenericMetadata ) getMock ( getMock ( returnTypeGenericMetadata ) , container ) ;
Code	return ( returnTypeGenericMetadata ) getMock ( getMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 8

183
Tree	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 8

184
Tree	return invocation . getMock ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Code	return invocation . getMock ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

185
Tree	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( returnTypeGenericMetadata , false ) , container ) ;
Code	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 7

186
Tree	return container . recordDeepStubAnswer ( returnTypeGenericMetadata . newDeepStubMock () , container ) < container ;
Code	return container . recordDeepStubAnswer ( returnTypeGenericMetadata . newDeepStubMock () , container ) < container ;
Distance : 9

187
Tree	container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container )
Code	container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container )
Distance : 9

188
Tree	container . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container )
Code	container . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container )
Distance : 9

189
Tree	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 10

190
Tree	return ( container ) container ( getMock ( returnTypeGenericMetadata ) , container ) ;
Code	return ( container ) container ( getMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

191
Tree	return invocation . recordDeepStubAnswer ( returnTypeGenericMetadata , container + this . container . recordDeepStubAnswer ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return invocation . recordDeepStubAnswer ( returnTypeGenericMetadata , container + this . container . recordDeepStubAnswer ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

192
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata + getMock ( returnTypeGenericMetadata ) ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata + getMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

193
Tree	return container . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata , false ) , container ) ;
Code	return container . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 7

194
Tree	return recordDeepStubAnswer ( newDeepStubMock ( invocation ) , container ) ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( invocation ) , container ) ;
Distance : 5

195
Tree	return container . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) ) ;
Code	return container . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) ) ;
Distance : 10

196
Tree	return container . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , returnTypeGenericMetadata ) < container ;
Code	return container . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , returnTypeGenericMetadata ) < container ;
Distance : 9

197
Tree	return container . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) ;
Code	return container . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 8

198
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata , false ) , container ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 7

199
Tree	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 9

========================================================================


========================================================================
Example Number: 87
Parent Code is: 
{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anyCollection () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=Collection})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyCollection}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 9
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return ( Collection ) Collection . reportMatcher ( Collection ) ; }
Code	{ return ( Collection ) Collection . reportMatcher ( Collection ) ; }
Distance : 9

1
Tree	{ return ( Collection ) returnList ( Collection ) ; }
Code	{ return ( Collection ) returnList ( Collection ) ; }
Distance : 7

2
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return break; ; }
Distance : 9

3
Tree	{ return () ; return super(); ; }
Code	{ return () ; return super(); ; }
Distance : 4

4
Tree	{ ( () ; return return; ; }
Code	{ ( () ; return return; ; }
Distance : 5

5
Tree	{ return ( Collection ) returnList ( Any.ANY ) . returnList ( Collection ) ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) . returnList ( Collection ) ; }
Distance : 12

6
Tree	{ return ( Collection ) reportMatcher ( Collection . returnList () ) ; }
Code	{ return ( Collection ) reportMatcher ( Collection . returnList () ) ; }
Distance : 9

7
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( Collection ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( Collection ) ; }
Distance : 12

8
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . reportMatcher ( Collection ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . reportMatcher ( Collection ) ; }
Distance : 12

9
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

10
Tree	{ return ( Collection ) returnList ( Collection . returnList () ) ; }
Code	{ return ( Collection ) returnList ( Collection . returnList () ) ; }
Distance : 9

11
Tree	{ super ( Collection . reportMatcher ( Collection ) ) ; returnList () ; }
Code	{ super ( Collection . reportMatcher ( Collection ) ) ; returnList () ; }
Distance : 11

12
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( Collection ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( Collection ) ; }
Distance : 12

13
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . reportMatcher ( Collection ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . reportMatcher ( Collection ) ; }
Distance : 12

14
Tree	{ super ( Collection . reportMatcher ( Collection ) ) ; returnList () ; }
Code	{ super ( Collection . reportMatcher ( Collection ) ) ; returnList () ; }
Distance : 11

15
Tree	{ super ( Collection . reportMatcher ( Collection ) ) ; reportMatcher () ; }
Code	{ super ( Collection . reportMatcher ( Collection ) ) ; reportMatcher () ; }
Distance : 11

16
Tree	{ return ( Collection ) reportMatcher ( Collection ) . returnList () ; }
Code	{ return ( Collection ) reportMatcher ( Collection ) . returnList () ; }
Distance : 9

17
Tree	{ return ( Collection ) reportMatcher ( Collection ) . reportMatcher () ; }
Code	{ return ( Collection ) reportMatcher ( Collection ) . reportMatcher () ; }
Distance : 9

18
Tree	{ return ( Collection ) reportMatcher ( Collection . returnList () ) ; }
Code	{ return ( Collection ) reportMatcher ( Collection . returnList () ) ; }
Distance : 9

19
Tree	{ return ( Collection ) reportMatcher () ; } ParamChecks
Code	{ return ( Collection ) reportMatcher () ; } ParamChecks
Distance : 5

20
Tree	{ return reportMatcher () ; } Preconditions
Code	{ return reportMatcher () ; } Preconditions
Distance : 2

21
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } p
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } p
Distance : 8

22
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } toString
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } toString
Distance : 8

23
Tree	{ return reportMatcher () ; } p
Code	{ return reportMatcher () ; } p
Distance : 2

24
Tree	{ return ( Collection ) reportMatcher ( Collection ) ; } toString
Code	{ return ( Collection ) reportMatcher ( Collection ) ; } toString
Distance : 8

25
Tree	{ return ( Collection ) reportMatcher () ; } Preconditions
Code	{ return ( Collection ) reportMatcher () ; } Preconditions
Distance : 5

26
Tree	{ return ( Collection ) Collection . returnList () ; }
Code	{ return ( Collection ) Collection . returnList () ; }
Distance : 6

27
Tree	{ return ( Collection ) Collection . returnList ( Collection ) ; } toString
Code	{ return ( Collection ) Collection . returnList ( Collection ) ; } toString
Distance : 10

28
Tree	{ reportMatcher () ; return default: ; }
Code	{ reportMatcher () ; return default: ; }
Distance : 5

29
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return super(); ; }
Distance : 9

30
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 2

31
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 7

32
Tree	{ return ( Collection ) returnList ( Any.ANY ) ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) ; }
Distance : 7

33
Tree	{ return ( Collection ) returnList () ; }
Code	{ return ( Collection ) returnList () ; }
Distance : 4

34
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 7

35
Tree	{ return ( Any.ANY ) ; return null ; }
Code	{ return ( Any.ANY ) ; return null ; }
Distance : 6

36
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 7

37
Tree	{ reportMatcher () ; return super(); ; }
Code	{ reportMatcher () ; return super(); ; }
Distance : 5

38
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 2

39
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 7

40
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 2

41
Tree	{ return returnList ( Any.ANY ) ; }
Code	{ return returnList ( Any.ANY ) ; }
Distance : 4

42
Tree	{ reportMatcher () ; return return; ; }
Code	{ reportMatcher () ; return return; ; }
Distance : 5

43
Tree	{ super ( Collection ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Collection ) ; reportMatcher ( Any.ANY ) ; }
Distance : 9

44
Tree	{ reportMatcher () ; return continue; ; }
Code	{ reportMatcher () ; return continue; ; }
Distance : 5

45
Tree	{ return ( Any.ANY ) ; return super(); ; }
Code	{ return ( Any.ANY ) ; return super(); ; }
Distance : 6

46
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; }
Distance : 7

47
Tree	{ reportMatcher () ; return break; ; }
Code	{ reportMatcher () ; return break; ; }
Distance : 5

48
Tree	{ return ( Collection ) reportMatcher () ; }
Code	{ return ( Collection ) reportMatcher () ; }
Distance : 4

49
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( Collection ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( Collection ) ; }
Distance : 12

50
Tree	{ return ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ return ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 8

51
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 2

52
Tree	{ returnList ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ returnList ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 9

53
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return return; ; }
Distance : 9

54
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

55
Tree	{ return ( Collection ) reportMatcher ( Collection ) . returnList () ; }
Code	{ return ( Collection ) reportMatcher ( Collection ) . returnList () ; }
Distance : 9

56
Tree	{ super ( Collection . reportMatcher ( Collection ) ) ; returnList () ; } wanted
Code	{ super ( Collection . reportMatcher ( Collection ) ) ; returnList () ; } wanted
Distance : 12

57
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

58
Tree	{ return Collection ; } mock
Code	{ return Collection ; } mock
Distance : 3

59
Tree	{ return reportMatcher ( Any.ANY ) ; } toString
Code	{ return reportMatcher ( Any.ANY ) ; } toString
Distance : 5

60
Tree	{ return reportMatcher ( Any.ANY ) ; } {}
Code	{ return reportMatcher ( Any.ANY ) ; } {}
Distance : 5

61
Tree	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 5

62
Tree	{ return reportMatcher ( Any.ANY ) ; } &&
Code	{ return reportMatcher ( Any.ANY ) ; } &&
Distance : 5

63
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; } Class
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; } Class
Distance : 10

64
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; } ParamChecks
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; } ParamChecks
Distance : 10

65
Tree	{ return ( Collection ) Collection . returnList ( Collection ) ; } ParamChecks
Code	{ return ( Collection ) Collection . returnList ( Collection ) ; } ParamChecks
Distance : 10

66
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; } Preconditions
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; } Preconditions
Distance : 10

67
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; } &&
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; } &&
Distance : 10

68
Tree	{ return ( Collection ) this . Collection . returnList () ; } Class
Code	{ return ( Collection ) this . Collection . returnList () ; } Class
Distance : 9

69
Tree	{ return ( Collection ) this . Collection . returnList () ; } {}
Code	{ return ( Collection ) this . Collection . returnList () ; } {}
Distance : 9

70
Tree	{ return ( Collection ) this . Collection . returnList () ; } toString
Code	{ return ( Collection ) this . Collection . returnList () ; } toString
Distance : 9

71
Tree	{ return ( Collection ) this . Collection . returnList () ; } p
Code	{ return ( Collection ) this . Collection . returnList () ; } p
Distance : 9

72
Tree	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 5

73
Tree	{ return Collection ; } MathRuntimeException
Code	{ return Collection ; } MathRuntimeException
Distance : 3

74
Tree	{ return ( Collection ) Collection . returnList ( Collection ) ; } Preconditions
Code	{ return ( Collection ) Collection . returnList ( Collection ) ; } Preconditions
Distance : 10

75
Tree	{ return Collection ; } Override
Code	{ return Collection ; } Override
Distance : 3

76
Tree	{ return STRING_CONSTANT ; } Override
Code	{ return STRING_CONSTANT ; } Override
Distance : 3

77
Tree	{ return STRING_CONSTANT ; } MathRuntimeException
Code	{ return STRING_CONSTANT ; } MathRuntimeException
Distance : 3

78
Tree	{ return STRING_CONSTANT ; } mock
Code	{ return STRING_CONSTANT ; } mock
Distance : 3

79
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 3

80
Tree	{ return Collection ; } array
Code	{ return Collection ; } array
Distance : 3

81
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 3

82
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 3

83
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } wanted
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } wanted
Distance : 10

84
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( Collection ) ; } wanted
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( Collection ) ; } wanted
Distance : 13

85
Tree	{ return Collection ; } f
Code	{ return Collection ; } f
Distance : 3

86
Tree	{ return ( Collection ) Collection . returnList ( Collection ) ; } &&
Code	{ return ( Collection ) Collection . returnList ( Collection ) ; } &&
Distance : 10

87
Tree	{ return Collection ; } class
Code	{ return Collection ; } class
Distance : 3

88
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 3

89
Tree	{ return reportMatcher ( Any.ANY ) ; } p
Code	{ return reportMatcher ( Any.ANY ) ; } p
Distance : 5

90
Tree	{ super ( Collection . reportMatcher ( Collection ) ) ; returnList () ; }
Code	{ super ( Collection . reportMatcher ( Collection ) ) ; returnList () ; }
Distance : 11

91
Tree	{ return ( Collection ) returnList ( Any.ANY ) . returnList ( Collection ) ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) . returnList ( Collection ) ; }
Distance : 12

92
Tree	{ return ( Collection ) returnList ( Collection ) . returnList () ; }
Code	{ return ( Collection ) returnList ( Collection ) . returnList () ; }
Distance : 9

93
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

94
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 1

95
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; }
Distance : 7

96
Tree	{ return ( Collection ) reportMatcher ( Collection ) ; } p
Code	{ return ( Collection ) reportMatcher ( Collection ) ; } p
Distance : 8

97
Tree	{ return ( Collection ) reportMatcher ( Collection ) ; } ParamChecks
Code	{ return ( Collection ) reportMatcher ( Collection ) ; } ParamChecks
Distance : 8

98
Tree	{ return ( Collection ) reportMatcher () ; }
Code	{ return ( Collection ) reportMatcher () ; }
Distance : 4

99
Tree	{ return Collection ; } [
Code	{ return Collection ; } [
Distance : 3

100
Tree	{ return ( Collection ) reportMatcher ( Collection ) ; }
Code	{ return ( Collection ) reportMatcher ( Collection ) ; }
Distance : 7

101
Tree	{ return ( Collection ) returnList ( Any.ANY ) . reportMatcher ( Collection ) ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) . reportMatcher ( Collection ) ; }
Distance : 12

102
Tree	{ return ( Collection ) reportMatcher ( Collection ) . returnList () ; }
Code	{ return ( Collection ) reportMatcher ( Collection ) . returnList () ; }
Distance : 9

103
Tree	{ return Collection ; } -
Code	{ return Collection ; } -
Distance : 3

104
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( Collection ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( Collection ) ; }
Distance : 12

105
Tree	{ return null ; }
Code	{ return null ; }
Distance : 2

106
Tree	{ reportMatcher () ; return null ; }
Code	{ reportMatcher () ; return null ; }
Distance : 5

107
Tree	{ return ( Collection ) reportMatcher ( Collection ) . reportMatcher () ; }
Code	{ return ( Collection ) reportMatcher ( Collection ) . reportMatcher () ; }
Distance : 9

108
Tree	{ ( ( Any.ANY , Any.ANY ) ; return return; ; }
Code	{ ( ( Any.ANY , Any.ANY ) ; return return; ; }
Distance : 9

109
Tree	{ return Collection ; }
Code	{ return Collection ; }
Distance : 2

110
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 5

111
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 4

112
Tree	{ return return () ; }
Code	{ return return () ; }
Distance : 1

113
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

114
Tree	{ return ( Collection ) reportMatcher ( Collection ) ; } Preconditions
Code	{ return ( Collection ) reportMatcher ( Collection ) ; } Preconditions
Distance : 8

115
Tree	{ return ( Collection ) Collection . returnList ( Collection ) ; } p
Code	{ return ( Collection ) Collection . returnList ( Collection ) ; } p
Distance : 10

116
Tree	{ return ( Collection ) this . Collection . returnList () ; } ParamChecks
Code	{ return ( Collection ) this . Collection . returnList () ; } ParamChecks
Distance : 9

117
Tree	{ return ( Collection ) reportMatcher ( Collection ) ; } &&
Code	{ return ( Collection ) reportMatcher ( Collection ) ; } &&
Distance : 8

118
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 7

119
Tree	{ super ( Collection . returnList ( Collection ) ) ; returnList () ; }
Code	{ super ( Collection . returnList ( Collection ) ) ; returnList () ; }
Distance : 11

120
Tree	{ returnList ( Any.ANY ) ; return null ; }
Code	{ returnList ( Any.ANY ) ; return null ; }
Distance : 7

121
Tree	{ return ( Collection ) this . Collection . reportMatcher () ; }
Code	{ return ( Collection ) this . Collection . reportMatcher () ; }
Distance : 8

122
Tree	{ return returnList () ; }
Code	{ return returnList () ; }
Distance : 1

123
Tree	{ super ( Collection . reportMatcher ( Collection ) ) ; returnList () ; }
Code	{ super ( Collection . reportMatcher ( Collection ) ) ; returnList () ; }
Distance : 11

124
Tree	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; }
Distance : 9

125
Tree	{ return ( Collection ) reportMatcher ( Collection . reportMatcher () ) ; }
Code	{ return ( Collection ) reportMatcher ( Collection . reportMatcher () ) ; }
Distance : 9

126
Tree	{ returnList ( Any.ANY , Any.ANY ) ; return return; ; }
Code	{ returnList ( Any.ANY , Any.ANY ) ; return return; ; }
Distance : 9

127
Tree	{ return reportMatcher () ; } toString
Code	{ return reportMatcher () ; } toString
Distance : 2

128
Tree	{ return ( Collection ) reportMatcher ( Collection . reportMatcher () ) ; }
Code	{ return ( Collection ) reportMatcher ( Collection . reportMatcher () ) ; }
Distance : 9

129
Tree	{ return reportMatcher () ; } {}
Code	{ return reportMatcher () ; } {}
Distance : 2

130
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 2

131
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 9

132
Tree	{ return ( Collection ) Collection . reportMatcher () ; }
Code	{ return ( Collection ) Collection . reportMatcher () ; }
Distance : 6

133
Tree	{ return ( Collection ) reportMatcher () ; } Class
Code	{ return ( Collection ) reportMatcher () ; } Class
Distance : 5

134
Tree	{ return ( Collection ) reportMatcher () ; } {}
Code	{ return ( Collection ) reportMatcher () ; } {}
Distance : 5

135
Tree	{ return ( Collection ) Collection . returnList ( Collection ) ; }
Code	{ return ( Collection ) Collection . returnList ( Collection ) ; }
Distance : 9

136
Tree	{ return ( Collection ) reportMatcher () ; } toString
Code	{ return ( Collection ) reportMatcher () ; } toString
Distance : 5

137
Tree	{ super ( Collection . reportMatcher ( Collection ) ) ; reportMatcher () ; }
Code	{ super ( Collection . reportMatcher ( Collection ) ) ; reportMatcher () ; }
Distance : 11

138
Tree	{ return ( Collection ) returnList ( Collection ) . returnList () ; }
Code	{ return ( Collection ) returnList ( Collection ) . returnList () ; }
Distance : 9

139
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

140
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; }
Distance : 9

141
Tree	{ return ( Collection ) this . Collection . returnList () ; } Preconditions
Code	{ return ( Collection ) this . Collection . returnList () ; } Preconditions
Distance : 9

142
Tree	{ return ( Collection ) this . Collection . returnList () ; }
Code	{ return ( Collection ) this . Collection . returnList () ; }
Distance : 8

143
Tree	{ return ( Collection ) returnList ( Collection ) . reportMatcher () ; }
Code	{ return ( Collection ) returnList ( Collection ) . reportMatcher () ; }
Distance : 9

144
Tree	{ return ( Collection ) this . Collection . returnList () ; }
Code	{ return ( Collection ) this . Collection . returnList () ; }
Distance : 8

145
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

146
Tree	{ return reportMatcher () ; } Class
Code	{ return reportMatcher () ; } Class
Distance : 2

147
Tree	{ return () ; return null ; }
Code	{ return () ; return null ; }
Distance : 4

148
Tree	{ returnList () ; return null ; }
Code	{ returnList () ; return null ; }
Distance : 5

149
Tree	{ return ( Collection ) Collection . returnList ( Collection ) ; } Class
Code	{ return ( Collection ) Collection . returnList ( Collection ) ; } Class
Distance : 10

150
Tree	{ return ( Collection ) Collection . returnList ( Collection ) ; } {}
Code	{ return ( Collection ) Collection . returnList ( Collection ) ; } {}
Distance : 10

151
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 8

152
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return default: ; }
Distance : 9

153
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; }
Distance : 9

154
Tree	{ return ( Collection ) reportMatcher () ; } &&
Code	{ return ( Collection ) reportMatcher () ; } &&
Distance : 5

155
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; } {}
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; } {}
Distance : 10

156
Tree	{ super ( Collection . returnList ( Collection ) ) ; returnList () ; }
Code	{ super ( Collection . returnList ( Collection ) ) ; returnList () ; }
Distance : 11

157
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 3

158
Tree	{ return ( Collection ) reportMatcher ( Collection ) . returnList () ; } wanted
Code	{ return ( Collection ) reportMatcher ( Collection ) . returnList () ; } wanted
Distance : 10

159
Tree	{ super ( Collection . returnList ( Collection ) ) ; reportMatcher () ; }
Code	{ super ( Collection . returnList ( Collection ) ) ; reportMatcher () ; }
Distance : 11

160
Tree	{ return ( Collection ) this . Collection . returnList () ; } &&
Code	{ return ( Collection ) this . Collection . returnList () ; } &&
Distance : 9

161
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } {}
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } {}
Distance : 8

162
Tree	{ return ( Collection ) Collection . returnList () ; } Class
Code	{ return ( Collection ) Collection . returnList () ; } Class
Distance : 7

163
Tree	{ return ( Any.ANY ) ; return return; ; }
Code	{ return ( Any.ANY ) ; return return; ; }
Distance : 6

164
Tree	{ return ( Collection ) returnList ( Collection . returnList () ) ; }
Code	{ return ( Collection ) returnList ( Collection . returnList () ) ; }
Distance : 9

165
Tree	{ return ( Collection ) Collection . returnList () ; }
Code	{ return ( Collection ) Collection . returnList () ; }
Distance : 6

166
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } Class
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } Class
Distance : 8

167
Tree	{ return ( Collection ) Collection . returnList () ; } {}
Code	{ return ( Collection ) Collection . returnList () ; } {}
Distance : 7

168
Tree	{ return reportMatcher () ; } &&
Code	{ return reportMatcher () ; } &&
Distance : 2

169
Tree	{ return ( Collection ) Collection . returnList ( Collection ) ; }
Code	{ return ( Collection ) Collection . returnList ( Collection ) ; }
Distance : 9

170
Tree	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; }
Distance : 9

171
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 2

172
Tree	{ return ( Collection ) reportMatcher ( Collection ) . returnList () ; }
Code	{ return ( Collection ) reportMatcher ( Collection ) . returnList () ; }
Distance : 9

173
Tree	{ return ( Collection ) returnList ( Collection . reportMatcher () ) ; }
Code	{ return ( Collection ) returnList ( Collection . reportMatcher () ) ; }
Distance : 9

174
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } &&
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } &&
Distance : 8

175
Tree	{ return ( Collection ) reportMatcher ( Collection ) ; }
Code	{ return ( Collection ) reportMatcher ( Collection ) ; }
Distance : 7

176
Tree	{ return ( Collection ) reportMatcher () ; } p
Code	{ return ( Collection ) reportMatcher () ; } p
Distance : 5

177
Tree	{ return reportMatcher () ; } ParamChecks
Code	{ return reportMatcher () ; } ParamChecks
Distance : 2

178
Tree	{ return ( Collection ) reportMatcher ( Collection ) ; } Class
Code	{ return ( Collection ) reportMatcher ( Collection ) ; } Class
Distance : 8

179
Tree	{ return STRING_CONSTANT ; } f
Code	{ return STRING_CONSTANT ; } f
Distance : 3

180
Tree	{ return return ( Any.ANY ) ; }
Code	{ return return ( Any.ANY ) ; }
Distance : 4

181
Tree	{ return ( Collection ) Collection . returnList () ; } toString
Code	{ return ( Collection ) Collection . returnList () ; } toString
Distance : 7

182
Tree	{ return STRING_CONSTANT ; } [
Code	{ return STRING_CONSTANT ; } [
Distance : 3

183
Tree	{ return ( Collection ) Collection . returnList () ; } p
Code	{ return ( Collection ) Collection . returnList () ; } p
Distance : 7

184
Tree	{ return ( Collection ) Collection . returnList () ; } ParamChecks
Code	{ return ( Collection ) Collection . returnList () ; } ParamChecks
Distance : 7

185
Tree	{ return ( Collection ) Collection . returnList () ; } Preconditions
Code	{ return ( Collection ) Collection . returnList () ; } Preconditions
Distance : 7

186
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; } toString
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; } toString
Distance : 10

187
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 3

188
Tree	{ return ( Collection ) Collection . returnList () ; } &&
Code	{ return ( Collection ) Collection . returnList () ; } &&
Distance : 7

189
Tree	{ return ( Collection ) reportMatcher ( Collection . reportMatcher () ) ; }
Code	{ return ( Collection ) reportMatcher ( Collection . reportMatcher () ) ; }
Distance : 9

190
Tree	{ return Collection ; } notifyListeners
Code	{ return Collection ; } notifyListeners
Distance : 3

191
Tree	{ return ( Collection ) reportMatcher ( Collection ) ; } {}
Code	{ return ( Collection ) reportMatcher ( Collection ) ; } {}
Distance : 8

192
Tree	{ return ( Collection ) returnList ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) . reportMatcher () ; }
Distance : 9

193
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return continue; ; }
Distance : 9

194
Tree	{ return ( Collection ) reportMatcher ( Collection . returnList () ) ; }
Code	{ return ( Collection ) reportMatcher ( Collection . returnList () ) ; }
Distance : 9

195
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 8

196
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; } p
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; } p
Distance : 10

197
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 3

198
Tree	{ return ( Collection ) reportMatcher ( Collection . returnList () ) ; } wanted
Code	{ return ( Collection ) reportMatcher ( Collection . returnList () ) ; } wanted
Distance : 10

199
Tree	{ return STRING_CONSTANT ; } -
Code	{ return STRING_CONSTANT ; } -
Distance : 3

========================================================================


========================================================================
Example Number: 88
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Collection . class ) ) . returnList () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Collection})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return this . Collection ; } Override
Code	{ return this . Collection ; } Override
Distance : 13

1
Tree	{ return ( Collection ) returnList ( Any.ANY ) ; } f
Code	{ return ( Collection ) returnList ( Any.ANY ) ; } f
Distance : 11

2
Tree	{ return ( Collection ) returnList ( Any.ANY ) ; } {}
Code	{ return ( Collection ) returnList ( Any.ANY ) ; } {}
Distance : 11

3
Tree	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; } p
Code	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; } p
Distance : 9

4
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } p
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } p
Distance : 8

5
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } source
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } source
Distance : 8

6
Tree	{ return ( Collection ) returnList ( Any.ANY ) ; } -
Code	{ return ( Collection ) returnList ( Any.ANY ) ; } -
Distance : 11

7
Tree	{ return ( Collection ) returnList ( Any.ANY ) ; } MathRuntimeException
Code	{ return ( Collection ) returnList ( Any.ANY ) ; } MathRuntimeException
Distance : 11

8
Tree	{ return ( Collection ) returnList ( Any.ANY ) ; } Preconditions
Code	{ return ( Collection ) returnList ( Any.ANY ) ; } Preconditions
Distance : 11

9
Tree	{ return ( Collection ) returnList ( Any.ANY ) ; } Test
Code	{ return ( Collection ) returnList ( Any.ANY ) ; } Test
Distance : 11

10
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } T
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } T
Distance : 8

11
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } toString
Distance : 8

12
Tree	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; } T
Code	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; } T
Distance : 9

13
Tree	{ returnList ( Any.ANY ) ; Collection = Any.ANY . reportMatcher () ; }
Code	{ returnList ( Any.ANY ) ; Collection = Any.ANY . reportMatcher () ; }
Distance : 10

14
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . Collection = Collection ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . Collection = Collection ; }
Distance : 12

15
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; initializeRegistry }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; initializeRegistry }
Distance : 13

16
Tree	{ return ( Collection ) returnList ( Any.ANY ) ; } ParamChecks
Code	{ return ( Collection ) returnList ( Any.ANY ) ; } ParamChecks
Distance : 11

17
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; setTolerance }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; setTolerance }
Distance : 13

18
Tree	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; } &&
Code	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; } &&
Distance : 9

19
Tree	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; } options
Code	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; } options
Distance : 9

20
Tree	{ return this . Collection ; } [
Code	{ return this . Collection ; } [
Distance : 13

21
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Distance : 12

22
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 12

23
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 12

24
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Distance : 12

25
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; } toString
Code	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; } toString
Distance : 10

26
Tree	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; } source
Code	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; } source
Distance : 9

27
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; } source
Code	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; } source
Distance : 10

28
Tree	{ return this . Collection ; } class
Code	{ return this . Collection ; } class
Distance : 13

29
Tree	{ return this . Collection ; } array
Code	{ return this . Collection ; } array
Distance : 13

30
Tree	{ return this . Collection ; } mock
Code	{ return this . Collection ; } mock
Distance : 13

31
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; } {}
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; } {}
Distance : 13

32
Tree	{ return this . Collection ; } MathRuntimeException
Code	{ return this . Collection ; } MathRuntimeException
Distance : 13

33
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

34
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; } options
Code	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; } options
Distance : 10

35
Tree	{ return this . Collection ; } -
Code	{ return this . Collection ; } -
Distance : 13

36
Tree	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; } toString
Code	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; } toString
Distance : 9

37
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; setCostAccuracy }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; setCostAccuracy }
Distance : 13

38
Tree	{ super ( Collection ) ; reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ super ( Collection ) ; reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

39
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

40
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 11

41
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

42
Tree	{ returnList ( Any.ANY ) ; return null ; }
Code	{ returnList ( Any.ANY ) ; return null ; }
Distance : 12

43
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

44
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

45
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

46
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

47
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

48
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

49
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

50
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

51
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

52
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

53
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 7

54
Tree	{ returnList ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnList ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

55
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; getMethodProxy }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; getMethodProxy }
Distance : 13

56
Tree	{ return returnList ( Any.ANY ) . returnList () ; }
Code	{ return returnList ( Any.ANY ) . returnList () ; }
Distance : 8

57
Tree	{ returnList ( Any.ANY ) ; return false ; }
Code	{ returnList ( Any.ANY ) ; return false ; }
Distance : 12

58
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 8

59
Tree	{ super ( Collection ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( Collection ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

60
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; }
Distance : 9

61
Tree	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; }
Distance : 8

62
Tree	{ super ( Collection ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Collection ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

63
Tree	{ return ( Collection ) reportMatcher () ; }
Code	{ return ( Collection ) reportMatcher () ; }
Distance : 9

64
Tree	{ reportMatcher ( Any.ANY ) ; Collection = Any.ANY . returnList () ; }
Code	{ reportMatcher ( Any.ANY ) ; Collection = Any.ANY . returnList () ; }
Distance : 8

65
Tree	{ return ( Collection ) returnList () ; }
Code	{ return ( Collection ) returnList () ; }
Distance : 8

66
Tree	{ return returnList ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnList ( Any.ANY ) . reportMatcher () ; }
Distance : 9

67
Tree	{ returnList ( Any.ANY ) ; return super(); ; }
Code	{ returnList ( Any.ANY ) ; return super(); ; }
Distance : 12

68
Tree	{ return reportMatcher ( Any.ANY ) . < Collection > returnList () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Collection > returnList () ; }
Distance : 8

69
Tree	{ return ( Collection ) returnList ( Any.ANY ) ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) ; }
Distance : 10

70
Tree	{ returnList ( Any.ANY ) ; return true ; }
Code	{ returnList ( Any.ANY ) ; return true ; }
Distance : 12

71
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

72
Tree	{ super ( Collection ) ; }
Code	{ super ( Collection ) ; }
Distance : 11

73
Tree	{ return this . Collection ; }
Code	{ return this . Collection ; }
Distance : 12

74
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; } MathRuntimeException
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; } MathRuntimeException
Distance : 13

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

76
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; } f
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; } f
Distance : 13

77
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . Collection = Collection ; } T
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . Collection = Collection ; } T
Distance : 13

78
Tree	{ return ( Collection ) returnList () ; } Test
Code	{ return ( Collection ) returnList () ; } Test
Distance : 9

79
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 11

80
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 11

81
Tree	{ super ( Collection ) ; } -
Code	{ super ( Collection ) ; } -
Distance : 12

82
Tree	{ super ( Collection ) ; } [
Code	{ super ( Collection ) ; } [
Distance : 12

83
Tree	{ super ( Collection ) ; } f
Code	{ super ( Collection ) ; } f
Distance : 12

84
Tree	{ super ( Collection ) ; } Override
Code	{ super ( Collection ) ; } Override
Distance : 12

85
Tree	{ super ( Collection ) ; } MathRuntimeException
Code	{ super ( Collection ) ; } MathRuntimeException
Distance : 12

86
Tree	{ super ( Collection ) ; } mock
Code	{ super ( Collection ) ; } mock
Distance : 12

87
Tree	{ return reportMatcher ( Any.ANY ) . < Collection > reportMatcher () ; } options
Code	{ return reportMatcher ( Any.ANY ) . < Collection > reportMatcher () ; } options
Distance : 10

88
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 14

89
Tree	{ return reportMatcher ( Any.ANY ) . < Collection > reportMatcher () ; } p
Code	{ return reportMatcher ( Any.ANY ) . < Collection > reportMatcher () ; } p
Distance : 10

90
Tree	{ return reportMatcher ( Any.ANY ) . < Collection > reportMatcher () ; } T
Code	{ return reportMatcher ( Any.ANY ) . < Collection > reportMatcher () ; } T
Distance : 10

91
Tree	{ reportMatcher ( Any.ANY ) ; Collection = Any.ANY . returnList () ; } toString
Code	{ reportMatcher ( Any.ANY ) ; Collection = Any.ANY . returnList () ; } toString
Distance : 9

92
Tree	{ reportMatcher ( Any.ANY ) ; Collection = Any.ANY . returnList () ; } source
Code	{ reportMatcher ( Any.ANY ) ; Collection = Any.ANY . returnList () ; } source
Distance : 9

93
Tree	{ reportMatcher ( Any.ANY ) ; Collection = Any.ANY . returnList () ; } p
Code	{ reportMatcher ( Any.ANY ) ; Collection = Any.ANY . returnList () ; } p
Distance : 9

94
Tree	{ reportMatcher ( Any.ANY ) ; Collection = Any.ANY . returnList () ; } &&
Code	{ reportMatcher ( Any.ANY ) ; Collection = Any.ANY . returnList () ; } &&
Distance : 9

95
Tree	{ return reportMatcher ( Any.ANY ) ; } -
Code	{ return reportMatcher ( Any.ANY ) ; } -
Distance : 11

96
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

97
Tree	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 11

98
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

99
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; } ParamChecks
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; } ParamChecks
Distance : 13

100
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 14

101
Tree	{ return reportMatcher ( Any.ANY ) . < Collection > reportMatcher () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . < Collection > reportMatcher () ; } &&
Distance : 10

102
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . Collection = Collection ; } &&
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . Collection = Collection ; } &&
Distance : 13

103
Tree	{ super ( Collection ) ; } notifyListeners
Code	{ super ( Collection ) ; } notifyListeners
Distance : 12

104
Tree	{ return ( Collection ) returnList () ; } Class
Code	{ return ( Collection ) returnList () ; } Class
Distance : 9

105
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } options
Code	{ reportMatcher ( Any.ANY ) ; return false ; } options
Distance : 12

106
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } source
Code	{ reportMatcher ( Any.ANY ) ; return false ; } source
Distance : 12

107
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } toString
Code	{ reportMatcher ( Any.ANY ) ; return false ; } toString
Distance : 12

108
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . Collection = Collection ; } options
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . Collection = Collection ; } options
Distance : 13

109
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

110
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

111
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

112
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

113
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } p
Code	{ reportMatcher ( Any.ANY ) ; return false ; } p
Distance : 12

114
Tree	{ return ( Collection ) returnList () ; } Preconditions
Code	{ return ( Collection ) returnList () ; } Preconditions
Distance : 9

115
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return false ; } &&
Distance : 12

116
Tree	{ return ( Collection ) returnList () ; } ParamChecks
Code	{ return ( Collection ) returnList () ; } ParamChecks
Distance : 9

117
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

118
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; Collection = false ; } wanted
Code	{ reportMatcher ( Any.ANY ) . returnList () ; Collection = false ; } wanted
Distance : 12

119
Tree	{ return ( Collection ) returnList () ; } MathRuntimeException
Code	{ return ( Collection ) returnList () ; } MathRuntimeException
Distance : 9

120
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . Collection = Collection ; } p
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . Collection = Collection ; } p
Distance : 13

121
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . Collection = Collection ; } source
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . Collection = Collection ; } source
Distance : 13

122
Tree	{ return ( Collection ) returnList () ; } -
Code	{ return ( Collection ) returnList () ; } -
Distance : 9

123
Tree	{ return returnList ( Any.ANY ) ; }
Code	{ return returnList ( Any.ANY ) ; }
Distance : 11

124
Tree	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; }
Distance : 11

125
Tree	{ returnList ( Any.ANY ) . returnList () ; Collection = true ; }
Code	{ returnList ( Any.ANY ) . returnList () ; Collection = true ; }
Distance : 12

126
Tree	{ returnList ( Any.ANY ) ; return return; ; }
Code	{ returnList ( Any.ANY ) ; return return; ; }
Distance : 12

127
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Collection = Collection ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Collection = Collection ; }
Distance : 12

128
Tree	{ return this . Collection ; } notifyListeners
Code	{ return this . Collection ; } notifyListeners
Distance : 13

129
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; Collection = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; Collection = false ; }
Distance : 11

130
Tree	{ returnList ( Any.ANY ) . reportMatcher () ; Collection = true ; }
Code	{ returnList ( Any.ANY ) . reportMatcher () ; Collection = true ; }
Distance : 12

131
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; } T
Code	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; } T
Distance : 10

132
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } {}
Distance : 12

133
Tree	{ returnList ( Any.ANY ) . returnList () ; this . Collection = Collection ; }
Code	{ returnList ( Any.ANY ) . returnList () ; this . Collection = Collection ; }
Distance : 13

134
Tree	{ returnList ( Any.ANY ) . reportMatcher () ; this . Collection = Collection ; }
Code	{ returnList ( Any.ANY ) . reportMatcher () ; this . Collection = Collection ; }
Distance : 13

135
Tree	{ return reportMatcher ( Any.ANY ) . < Collection > reportMatcher () ; } source
Code	{ return reportMatcher ( Any.ANY ) . < Collection > reportMatcher () ; } source
Distance : 10

136
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } options
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } options
Distance : 8

137
Tree	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 11

138
Tree	{ return reportMatcher ( Any.ANY ) . < Collection > reportMatcher () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . < Collection > reportMatcher () ; } toString
Distance : 10

139
Tree	{ return reportMatcher ( Any.ANY ) ; } f
Code	{ return reportMatcher ( Any.ANY ) ; } f
Distance : 11

140
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } f
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } f
Distance : 12

141
Tree	{ return ( Collection ) returnList ( Any.ANY ) ; } Class
Code	{ return ( Collection ) returnList ( Any.ANY ) ; } Class
Distance : 11

142
Tree	{ return ( Collection ) returnList ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) . reportMatcher () ; }
Distance : 9

143
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) . reportMatcher () ; }
Distance : 10

144
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; } &&
Code	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; } &&
Distance : 10

145
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

146
Tree	{ returnList ( Any.ANY ) ; this . Collection = Any.ANY ; }
Code	{ returnList ( Any.ANY ) ; this . Collection = Any.ANY ; }
Distance : 12

147
Tree	{ super ( Collection ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Collection ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

148
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Collection = true ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Collection = true ; }
Distance : 11

149
Tree	{ returnList ( Any.ANY ) . returnList () ; Collection = false ; }
Code	{ returnList ( Any.ANY ) . returnList () ; Collection = false ; }
Distance : 12

150
Tree	{ return returnList ( Any.ANY ) . < Collection > returnList () ; }
Code	{ return returnList ( Any.ANY ) . < Collection > returnList () ; }
Distance : 9

151
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; } Test
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; } Test
Distance : 13

152
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; } Preconditions
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; } Preconditions
Distance : 13

153
Tree	{ return reportMatcher ( Any.ANY ) ; } {}
Code	{ return reportMatcher ( Any.ANY ) ; } {}
Distance : 11

154
Tree	{ returnList ( Any.ANY ) ; Collection = Any.ANY . returnList () ; }
Code	{ returnList ( Any.ANY ) ; Collection = Any.ANY . returnList () ; }
Distance : 9

155
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; } -
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; } -
Distance : 13

156
Tree	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 11

157
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . Collection = Collection ; } toString
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . Collection = Collection ; } toString
Distance : 13

158
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Collection = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Collection = false ; }
Distance : 11

159
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; } p
Code	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; } p
Distance : 10

160
Tree	{ returnList ( Any.ANY ) . reportMatcher () ; Collection = false ; }
Code	{ returnList ( Any.ANY ) . reportMatcher () ; Collection = false ; }
Distance : 12

161
Tree	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; } f
Code	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; } f
Distance : 12

162
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } T
Code	{ reportMatcher ( Any.ANY ) ; return false ; } T
Distance : 12

163
Tree	{ return ( Collection ) returnList () ; } f
Code	{ return ( Collection ) returnList () ; } f
Distance : 9

164
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; makeStackTracesClean }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; makeStackTracesClean }
Distance : 13

165
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; Collection = false ; } Math
Code	{ reportMatcher ( Any.ANY ) . returnList () ; Collection = false ; } Math
Distance : 12

166
Tree	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; } {}
Code	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; } {}
Distance : 12

167
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ParamChecks
Distance : 12

168
Tree	{ return ( Collection ) returnList () ; } {}
Code	{ return ( Collection ) returnList () ; } {}
Distance : 9

169
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; }
Distance : 10

170
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; } Class
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; } Class
Distance : 13

171
Tree	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; } MathRuntimeException
Distance : 12

172
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } &&
Distance : 8

173
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

174
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; enableParseTypeInfo }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; enableParseTypeInfo }
Distance : 13

175
Tree	{ return reportMatcher ( Any.ANY ) . < Collection > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Collection > reportMatcher () ; }
Distance : 9

176
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; }
Distance : 12

177
Tree	{ reportMatcher ( Any.ANY ) ; Collection = Any.ANY . returnList () ; } options
Code	{ reportMatcher ( Any.ANY ) ; Collection = Any.ANY . returnList () ; } options
Distance : 9

178
Tree	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; } Preconditions
Distance : 12

179
Tree	{ super ( Collection ) ; } array
Code	{ super ( Collection ) ; } array
Distance : 12

180
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } -
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } -
Distance : 12

181
Tree	{ reportMatcher ( Any.ANY ) ; Collection = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Collection = Any.ANY . reportMatcher () ; }
Distance : 9

182
Tree	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; } Class
Code	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; } Class
Distance : 12

183
Tree	{ super ( Collection ) ; reportMatcher ( Any.ANY ) ; makeStackTracesClean }
Code	{ super ( Collection ) ; reportMatcher ( Any.ANY ) ; makeStackTracesClean }
Distance : 13

184
Tree	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; } Test
Code	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; } Test
Distance : 12

185
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; ServletUtilities.tempOneTimeFilePrefix }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; ServletUtilities.tempOneTimeFilePrefix }
Distance : 13

186
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; Collection = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; Collection = true ; }
Distance : 11

187
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 14

188
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 14

189
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

190
Tree	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; } -
Code	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; } -
Distance : 12

191
Tree	{ returnList ( Any.ANY ) ; return break; ; }
Code	{ returnList ( Any.ANY ) ; return break; ; }
Distance : 12

192
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

193
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

194
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; super }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; super }
Distance : 13

195
Tree	{ return returnList ( Any.ANY ) . < Collection > reportMatcher () ; }
Code	{ return returnList ( Any.ANY ) . < Collection > reportMatcher () ; }
Distance : 10

196
Tree	{ return this . Collection ; } f
Code	{ return this . Collection ; } f
Distance : 13

197
Tree	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; } ParamChecks
Distance : 12

198
Tree	{ super ( Collection ) ; } class
Code	{ super ( Collection ) ; } class
Distance : 12

199
Tree	{ reportMatcher ( Any.ANY ) ; Collection = Any.ANY . returnList () ; } T
Code	{ reportMatcher ( Any.ANY ) ; Collection = Any.ANY . returnList () ; } T
Distance : 9

========================================================================


========================================================================
Example Number: 89
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnMap () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anyMap () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

1
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; correlationMatrix = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; correlationMatrix = false ; }
Distance : 10

2
Tree	{ return ( T ) returnMap () ; }
Code	{ return ( T ) returnMap () ; }
Distance : 4

3
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 7

4
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; stopWatch = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; stopWatch = false ; }
Distance : 10

5
Tree	{ super ( Foo ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( Foo ) ; returnMap ( Any.ANY ) ; }
Distance : 9

6
Tree	{ returnMap ( Any.ANY ) ; return return; ; }
Code	{ returnMap ( Any.ANY ) ; return return; ; }
Distance : 7

7
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 2

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

9
Tree	{ return returnMap ( Any.ANY ) ; }
Code	{ return returnMap ( Any.ANY ) ; }
Distance : 4

10
Tree	{ super ( mockSettings ) ; }
Code	{ super ( mockSettings ) ; }
Distance : 4

11
Tree	{ returnMap ( Any.ANY ) ; return false ; }
Code	{ returnMap ( Any.ANY ) ; return false ; }
Distance : 7

12
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 7

13
Tree	{ super ( T ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( T ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 11

14
Tree	{ super ( object ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( object ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 11

15
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = Any.ANY . returnMap () ; }
Distance : 10

16
Tree	{ return ( reportMatcher ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( reportMatcher ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

17
Tree	{ return ( chronology ) returnMap ( Any.ANY ) ; }
Code	{ return ( chronology ) returnMap ( Any.ANY ) ; }
Distance : 7

18
Tree	{ super ( classToMock ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( classToMock ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 11

19
Tree	{ super ( mockSettings ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( mockSettings ) ; returnMap ( Any.ANY ) ; }
Distance : 9

20
Tree	{ return ( object ) returnMap ( Any.ANY ) ; }
Code	{ return ( object ) returnMap ( Any.ANY ) ; }
Distance : 7

21
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 2

22
Tree	{ reportMatcher ( Any.ANY ) ; this . canvas = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . canvas = Any.ANY ; }
Distance : 10

23
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 6

24
Tree	{ super ( matcher ) ; }
Code	{ super ( matcher ) ; }
Distance : 4

25
Tree	{ return this . object ; }
Code	{ return this . object ; }
Distance : 3

26
Tree	{ super ( RETURNS_DEFAULTS ) ; }
Code	{ super ( RETURNS_DEFAULTS ) ; }
Distance : 4

27
Tree	{ return this . RETURNS_DEFAULTS ; }
Code	{ return this . RETURNS_DEFAULTS ; }
Distance : 3

28
Tree	{ return this . mode ; }
Code	{ return this . mode ; }
Distance : 3

29
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 3

30
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 2

31
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 7

32
Tree	{ return ( T ) returnMap ( Any.ANY ) ; }
Code	{ return ( T ) returnMap ( Any.ANY ) ; }
Distance : 7

33
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 3

34
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 3

35
Tree	{ return reportMatcher ( Any.ANY ) . < RETURNS_SMART_NULLS > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < RETURNS_SMART_NULLS > reportMatcher () ; }
Distance : 9

36
Tree	{ return null ; }
Code	{ return null ; }
Distance : 2

37
Tree	{ return reportMatcher ( Any.ANY ) . < isAssertionCall > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < isAssertionCall > reportMatcher () ; }
Distance : 9

38
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 3

39
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 3

40
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 6

41
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } p
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } p
Distance : 8

42
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 3

43
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } toString
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } toString
Distance : 8

44
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . stepPoint = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . stepPoint = map ; }
Distance : 12

45
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } {}
Distance : 8

46
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 7

47
Tree	{ return reportMatcher ( Any.ANY ) . < getHandler > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < getHandler > reportMatcher () ; }
Distance : 9

48
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; author = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; author = false ; }
Distance : 10

49
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 8

50
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; commits = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; commits = false ; }
Distance : 10

51
Tree	{ returnMap ( Any.ANY ) ; return super(); ; }
Code	{ returnMap ( Any.ANY ) ; return super(); ; }
Distance : 7

52
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 3

53
Tree	{ reportMatcher ( Any.ANY ) ; this . subLabelFont = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . subLabelFont = Any.ANY ; }
Distance : 10

54
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; injected = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; injected = false ; }
Distance : 10

55
Tree	{ super ( T ) ; returnMap ( Any.ANY ) ; fieldWasInitializedUsingContructorArgs }
Code	{ super ( T ) ; returnMap ( Any.ANY ) ; fieldWasInitializedUsingContructorArgs }
Distance : 10

56
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; getAlternatesWithoutStructuralTyping = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; getAlternatesWithoutStructuralTyping = false ; }
Distance : 10

57
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; setTolerance }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; setTolerance }
Distance : 10

58
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; strictOrderVerifier = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; strictOrderVerifier = false ; }
Distance : 10

59
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; defaultTransformer = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; defaultTransformer = false ; }
Distance : 10

60
Tree	{ return ( reportMatcher ) returnMap ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) returnMap ( Any.ANY ) ; }
Distance : 7

61
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . stepPoint = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . stepPoint = scalar ; }
Distance : 12

62
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . legendBackgroundPaint = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . legendBackgroundPaint = map ; }
Distance : 12

63
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . legendItemPaint = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . legendItemPaint = map ; }
Distance : 12

64
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . labelAnchor = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . labelAnchor = map ; }
Distance : 12

65
Tree	{ return ( chronology ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( chronology ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

66
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 2

67
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . sublabelFont = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . sublabelFont = map ; }
Distance : 12

68
Tree	{ return ( object ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( object ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

69
Tree	{ return reportMatcher ( Any.ANY ) . < Primitives > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Primitives > reportMatcher () ; }
Distance : 9

70
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . extraLargeFont = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . extraLargeFont = map ; }
Distance : 12

71
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . canvas = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . canvas = map ; }
Distance : 12

72
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 3

73
Tree	{ return reportMatcher ( Any.ANY ) . < MatchResult.NO_MATCH > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < MatchResult.NO_MATCH > reportMatcher () ; }
Distance : 9

74
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 2

75
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 7

76
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 3

77
Tree	{ return returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return returnMap ( Any.ANY ) . returnMap () ; }
Distance : 6

78
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } wanted
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } wanted
Distance : 7

79
Tree	{ super ( Foo ) ; }
Code	{ super ( Foo ) ; }
Distance : 4

80
Tree	{ super ( DateTimeFieldType ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( DateTimeFieldType ) ; returnMap ( Any.ANY ) ; }
Distance : 9

81
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 11

82
Tree	{ return reportMatcher ( Any.ANY ) ; } p
Code	{ return reportMatcher ( Any.ANY ) ; } p
Distance : 5

83
Tree	{ reportMatcher ( Any.ANY ) ; this . stepPoint = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . stepPoint = Any.ANY ; }
Distance : 10

84
Tree	{ return reportMatcher ( Any.ANY ) ; } toString
Code	{ return reportMatcher ( Any.ANY ) ; } toString
Distance : 5

85
Tree	{ return ( T ) reportMatcher () ; }
Code	{ return ( T ) reportMatcher () ; }
Distance : 4

86
Tree	{ super ( matcher ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( matcher ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 11

87
Tree	{ return ( classToMock ) returnMap () ; }
Code	{ return ( classToMock ) returnMap () ; }
Distance : 4

88
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } value
Code	{ reportMatcher ( Any.ANY ) ; return false ; } value
Distance : 8

89
Tree	{ super ( RETURNS_DEFAULTS ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( RETURNS_DEFAULTS ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 11

90
Tree	{ return reportMatcher ( Any.ANY ) . < HALFDAY_OF_DAY_TYPE > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < HALFDAY_OF_DAY_TYPE > reportMatcher () ; }
Distance : 9

91
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 3

92
Tree	{ return ( RETURNS_DEFAULTS ) returnMap () ; }
Code	{ return ( RETURNS_DEFAULTS ) returnMap () ; }
Distance : 4

93
Tree	{ super ( chronology ) ; }
Code	{ super ( chronology ) ; }
Distance : 4

94
Tree	{ return reportMatcher ( Any.ANY ) ; } {}
Code	{ return reportMatcher ( Any.ANY ) ; } {}
Distance : 5

95
Tree	{ super ( DateTimeFieldType ) ; }
Code	{ super ( DateTimeFieldType ) ; }
Distance : 4

96
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } i
Code	{ reportMatcher ( Any.ANY ) ; return false ; } i
Distance : 8

97
Tree	{ reportMatcher ( Any.ANY ) ; this . unknownTypeNames = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . unknownTypeNames = Any.ANY ; }
Distance : 10

98
Tree	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 5

99
Tree	{ return ( Object ) returnMap () ; }
Code	{ return ( Object ) returnMap () ; }
Distance : 4

100
Tree	{ super ( DateTimeFieldType ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( DateTimeFieldType ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 11

101
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 9

102
Tree	{ return ( object ) returnMap () ; }
Code	{ return ( object ) returnMap () ; }
Distance : 4

103
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 7

104
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } options
Code	{ reportMatcher ( Any.ANY ) ; return false ; } options
Distance : 8

105
Tree	{ return ( Foo ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( Foo ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

106
Tree	{ returnMap ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnMap ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 7

107
Tree	{ reportMatcher ( Any.ANY ) ; defaultTransformer = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; defaultTransformer = Any.ANY . returnMap () ; }
Distance : 10

108
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Distance : 8

109
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 3

110
Tree	{ super ( classToMock ) ; returnMap ( Any.ANY ) ; setTolerance }
Code	{ super ( classToMock ) ; returnMap ( Any.ANY ) ; setTolerance }
Distance : 10

111
Tree	{ return ( matcher ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( matcher ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

112
Tree	{ return ( classToMock ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( classToMock ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

113
Tree	{ return ( RETURNS_DEFAULTS ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( RETURNS_DEFAULTS ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

114
Tree	{ return ( Object ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( Object ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

115
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 7

116
Tree	{ return ( chronology ) returnMap () ; }
Code	{ return ( chronology ) returnMap () ; }
Distance : 4

117
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } &&
Distance : 8

118
Tree	{ super ( T ) ; returnMap ( Any.ANY ) ; initializeBuiltInTypes }
Code	{ super ( T ) ; returnMap ( Any.ANY ) ; initializeBuiltInTypes }
Distance : 10

119
Tree	{ return ( Foo ) returnMap () ; }
Code	{ return ( Foo ) returnMap () ; }
Distance : 4

120
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; constructorsToProcess = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; constructorsToProcess = false ; }
Distance : 10

121
Tree	{ super ( object ) ; returnMap ( Any.ANY ) ; initializeBuiltInTypes }
Code	{ super ( object ) ; returnMap ( Any.ANY ) ; initializeBuiltInTypes }
Distance : 10

122
Tree	{ returnMap ( Any.ANY ) ; return null ; }
Code	{ returnMap ( Any.ANY ) ; return null ; }
Distance : 7

123
Tree	{ super ( T ) ; returnMap ( Any.ANY ) ; initializeRegistry }
Code	{ super ( T ) ; returnMap ( Any.ANY ) ; initializeRegistry }
Distance : 10

124
Tree	{ super ( T ) ; returnMap ( Any.ANY ) ; setTolerance }
Code	{ super ( T ) ; returnMap ( Any.ANY ) ; setTolerance }
Distance : 10

125
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ParamChecks
Distance : 8

126
Tree	{ super ( object ) ; returnMap ( Any.ANY ) ; setTolerance }
Code	{ super ( object ) ; returnMap ( Any.ANY ) ; setTolerance }
Distance : 10

127
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 3

128
Tree	{ reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; }
Distance : 10

129
Tree	{ super ( classToMock ) ; }
Code	{ super ( classToMock ) ; }
Distance : 4

130
Tree	{ return reportMatcher ( Any.ANY ) . < MISSING_REQUIRE_STRICT_WARNING > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < MISSING_REQUIRE_STRICT_WARNING > reportMatcher () ; }
Distance : 9

131
Tree	{ return reportMatcher ( Any.ANY ) . < WEEKYEARS_TYPE > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < WEEKYEARS_TYPE > reportMatcher () ; }
Distance : 9

132
Tree	{ reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; }
Distance : 10

133
Tree	{ reportMatcher ( Any.ANY ) ; this . hourFormatter = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . hourFormatter = Any.ANY ; }
Distance : 10

134
Tree	{ reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; }
Distance : 10

135
Tree	{ super ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; }
Distance : 4

136
Tree	{ reportMatcher ( Any.ANY ) ; this . extraLargeFont = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . extraLargeFont = Any.ANY ; }
Distance : 10

137
Tree	{ super ( object ) ; returnMap ( Any.ANY ) ; initializeRegistry }
Code	{ super ( object ) ; returnMap ( Any.ANY ) ; initializeRegistry }
Distance : 10

138
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . stepPoint = zFormat ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . stepPoint = zFormat ; }
Distance : 12

139
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . legendBackgroundPaint = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . legendBackgroundPaint = scalar ; }
Distance : 12

140
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 2

141
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 7

142
Tree	{ super ( T ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( T ) ; returnMap ( Any.ANY ) ; }
Distance : 9

143
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 6

144
Tree	{ super ( object ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( object ) ; returnMap ( Any.ANY ) ; }
Distance : 9

145
Tree	{ return reportMatcher ( Any.ANY ) . < getParameterTypes > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < getParameterTypes > reportMatcher () ; }
Distance : 9

146
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 7

147
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 3

148
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; tooShortStats = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; tooShortStats = false ; }
Distance : 10

149
Tree	{ super ( classToMock ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( classToMock ) ; returnMap ( Any.ANY ) ; }
Distance : 9

150
Tree	{ return ( classToMock ) returnMap ( Any.ANY ) ; }
Code	{ return ( classToMock ) returnMap ( Any.ANY ) ; }
Distance : 7

151
Tree	{ return ( reportMatcher ) returnMap () ; }
Code	{ return ( reportMatcher ) returnMap () ; }
Distance : 4

152
Tree	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = Any.ANY . returnMap () ; }
Distance : 10

153
Tree	{ return this . allowed ; }
Code	{ return this . allowed ; }
Distance : 3

154
Tree	{ return this . mockSettings ; }
Code	{ return this . mockSettings ; }
Distance : 3

155
Tree	{ reportMatcher ( Any.ANY ) ; MISSING_REQUIRE_STRICT_WARNING = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; MISSING_REQUIRE_STRICT_WARNING = Any.ANY . returnMap () ; }
Distance : 10

156
Tree	{ return ( RETURNS_DEFAULTS ) returnMap ( Any.ANY ) ; }
Code	{ return ( RETURNS_DEFAULTS ) returnMap ( Any.ANY ) ; }
Distance : 7

157
Tree	{ return this . classToMock ; }
Code	{ return this . classToMock ; }
Distance : 3

158
Tree	{ super ( mockSettings ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( mockSettings ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 11

159
Tree	{ reportMatcher ( Any.ANY ) ; expectedStepStart = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; expectedStepStart = Any.ANY . returnMap () ; }
Distance : 10

160
Tree	{ reportMatcher ( Any.ANY ) ; iMonths = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; iMonths = Any.ANY . returnMap () ; }
Distance : 10

161
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 6

162
Tree	{ reportMatcher ( Any.ANY ) ; correlationMatrix = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; correlationMatrix = Any.ANY . returnMap () ; }
Distance : 10

163
Tree	{ super ( Foo ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( Foo ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 11

164
Tree	{ return ( matcher ) returnMap () ; }
Code	{ return ( matcher ) returnMap () ; }
Distance : 4

165
Tree	{ super ( T ) ; returnMap ( Any.ANY ) ; isAssertionCall }
Code	{ super ( T ) ; returnMap ( Any.ANY ) ; isAssertionCall }
Distance : 10

166
Tree	{ return this . matcher ; }
Code	{ return this . matcher ; }
Distance : 3

167
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; }
Distance : 9

168
Tree	{ return this . reportMatcher ; }
Code	{ return this . reportMatcher ; }
Distance : 3

169
Tree	{ return this . MockitoCore ; }
Code	{ return this . MockitoCore ; }
Distance : 3

170
Tree	{ super ( chronology ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( chronology ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 11

171
Tree	{ reportMatcher ( Any.ANY ) ; strictOrderVerifier = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; strictOrderVerifier = Any.ANY . returnMap () ; }
Distance : 10

172
Tree	{ return this . capturingMatcher ; }
Code	{ return this . capturingMatcher ; }
Distance : 3

173
Tree	{ return ( Foo ) returnMap ( Any.ANY ) ; }
Code	{ return ( Foo ) returnMap ( Any.ANY ) ; }
Distance : 7

174
Tree	{ super ( matcher ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( matcher ) ; returnMap ( Any.ANY ) ; }
Distance : 9

175
Tree	{ super ( RETURNS_DEFAULTS ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( RETURNS_DEFAULTS ) ; returnMap ( Any.ANY ) ; }
Distance : 9

176
Tree	{ reportMatcher ( Any.ANY ) ; commits = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; commits = Any.ANY . returnMap () ; }
Distance : 10

177
Tree	{ reportMatcher ( Any.ANY ) ; copiedList = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; copiedList = Any.ANY . returnMap () ; }
Distance : 10

178
Tree	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; }
Distance : 10

179
Tree	{ return ( matcher ) returnMap ( Any.ANY ) ; }
Code	{ return ( matcher ) returnMap ( Any.ANY ) ; }
Distance : 7

180
Tree	{ super ( object ) ; }
Code	{ super ( object ) ; }
Distance : 4

181
Tree	{ super ( T ) ; }
Code	{ super ( T ) ; }
Distance : 4

182
Tree	{ return ( Object ) returnMap ( Any.ANY ) ; }
Code	{ return ( Object ) returnMap ( Any.ANY ) ; }
Distance : 7

183
Tree	{ return returnMap ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnMap ( Any.ANY ) . reportMatcher () ; }
Distance : 6

184
Tree	{ return returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return returnMap ( Any.ANY ) . returnMap () ; }
Distance : 6

185
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 7

186
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 4

187
Tree	{ returnMap ( Any.ANY ) ; return true ; }
Code	{ returnMap ( Any.ANY ) ; return true ; }
Distance : 7

188
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 6

189
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 6

190
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 4

191
Tree	{ return reportMatcher ( Any.ANY ) . < RealPointValuePair > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < RealPointValuePair > reportMatcher () ; }
Distance : 9

192
Tree	{ return ( T ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( T ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

193
Tree	{ super ( chronology ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( chronology ) ; returnMap ( Any.ANY ) ; }
Distance : 9

194
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 7

195
Tree	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 5

196
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 5

197
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 7

198
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } p
Code	{ reportMatcher ( Any.ANY ) ; return false ; } p
Distance : 8

199
Tree	{ return reportMatcher ( Any.ANY ) ; } &&
Code	{ return reportMatcher ( Any.ANY ) ; } &&
Distance : 5

========================================================================


========================================================================
Example Number: 90
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnMap () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Map . class ) ) . returnMap () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Map})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; } source
Code	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; } source
Distance : 10

1
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Distance : 12

2
Tree	{ return ( Map ) returnMap ( Any.ANY ) ; } MathRuntimeException
Code	{ return ( Map ) returnMap ( Any.ANY ) ; } MathRuntimeException
Distance : 11

3
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; } Class
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; } Class
Distance : 13

4
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; } Test
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; } Test
Distance : 13

5
Tree	{ return ( Map ) returnMap ( Any.ANY ) . returnMap () ; } toString
Code	{ return ( Map ) returnMap ( Any.ANY ) . returnMap () ; } toString
Distance : 9

6
Tree	{ return ( Map ) returnMap ( Any.ANY ) . returnMap () ; } source
Code	{ return ( Map ) returnMap ( Any.ANY ) . returnMap () ; } source
Distance : 9

7
Tree	{ return ( Map ) returnMap ( Any.ANY ) . returnMap () ; } options
Code	{ return ( Map ) returnMap ( Any.ANY ) . returnMap () ; } options
Distance : 9

8
Tree	{ return ( Map ) returnMap ( Any.ANY ) . returnMap () ; } p
Code	{ return ( Map ) returnMap ( Any.ANY ) . returnMap () ; } p
Distance : 9

9
Tree	{ return ( Map ) returnMap ( Any.ANY ) . returnMap () ; } &&
Code	{ return ( Map ) returnMap ( Any.ANY ) . returnMap () ; } &&
Distance : 9

10
Tree	{ return ( Map ) returnMap ( Any.ANY ) ; } Test
Code	{ return ( Map ) returnMap ( Any.ANY ) ; } Test
Distance : 11

11
Tree	{ return ( Map ) returnMap ( Any.ANY ) . returnMap () ; } T
Code	{ return ( Map ) returnMap ( Any.ANY ) . returnMap () ; } T
Distance : 9

12
Tree	{ return ( Map ) returnMap ( Any.ANY ) ; } Preconditions
Code	{ return ( Map ) returnMap ( Any.ANY ) ; } Preconditions
Distance : 11

13
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Map = Map ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Map = Map ; }
Distance : 12

14
Tree	{ returnMap ( Any.ANY ) . reportMatcher () ; Map = false ; }
Code	{ returnMap ( Any.ANY ) . reportMatcher () ; Map = false ; }
Distance : 12

15
Tree	{ returnMap ( Any.ANY ) ; return super(); ; }
Code	{ returnMap ( Any.ANY ) ; return super(); ; }
Distance : 12

16
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Distance : 12

17
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) . reportMatcher () ; }
Distance : 10

18
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } -
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } -
Distance : 12

19
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; } options
Code	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; } options
Distance : 10

20
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } f
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } f
Distance : 12

21
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } {}
Distance : 12

22
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } options
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } options
Distance : 8

23
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } p
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } p
Distance : 8

24
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } &&
Distance : 8

25
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } T
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } T
Distance : 8

26
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; } {}
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; } {}
Distance : 13

27
Tree	{ return this . Map ; } -
Code	{ return this . Map ; } -
Distance : 13

28
Tree	{ return this . Map ; } MathRuntimeException
Code	{ return this . Map ; } MathRuntimeException
Distance : 13

29
Tree	{ return this . Map ; } mock
Code	{ return this . Map ; } mock
Distance : 13

30
Tree	{ return this . Map ; } array
Code	{ return this . Map ; } array
Distance : 13

31
Tree	{ return this . Map ; } class
Code	{ return this . Map ; } class
Distance : 13

32
Tree	{ return this . Map ; } notifyListeners
Code	{ return this . Map ; } notifyListeners
Distance : 13

33
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 7

34
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; } &&
Code	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; } &&
Distance : 10

35
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; } p
Code	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; } p
Distance : 10

36
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ParamChecks
Distance : 12

37
Tree	{ returnMap ( Any.ANY ) ; return return; ; }
Code	{ returnMap ( Any.ANY ) ; return return; ; }
Distance : 12

38
Tree	{ return returnMap ( Any.ANY ) ; }
Code	{ return returnMap ( Any.ANY ) ; }
Distance : 11

39
Tree	{ return ( Map ) returnMap () ; }
Code	{ return ( Map ) returnMap () ; }
Distance : 8

40
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; }
Distance : 12

41
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

42
Tree	{ return ( Map ) returnMap ( Any.ANY ) ; }
Code	{ return ( Map ) returnMap ( Any.ANY ) ; }
Distance : 10

43
Tree	{ returnMap ( Any.ANY ) ; return null ; }
Code	{ returnMap ( Any.ANY ) ; return null ; }
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

45
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

46
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

47
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

48
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

49
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

50
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

51
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

52
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

53
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

54
Tree	{ return ( Map ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( Map ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 8

55
Tree	{ return reportMatcher ( Any.ANY ) . < Map > returnMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Map > returnMap () ; }
Distance : 8

56
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

57
Tree	{ return reportMatcher ( Any.ANY ) . < Map > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Map > reportMatcher () ; }
Distance : 9

58
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; Map = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; Map = false ; }
Distance : 11

59
Tree	{ return ( Map ) reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return ( Map ) reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 8

60
Tree	{ super ( Map ) ; reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ super ( Map ) ; reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 9

61
Tree	{ returnMap ( Any.ANY ) ; return false ; }
Code	{ returnMap ( Any.ANY ) ; return false ; }
Distance : 12

62
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

63
Tree	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; }
Distance : 11

64
Tree	{ return ( Map ) reportMatcher () ; }
Code	{ return ( Map ) reportMatcher () ; }
Distance : 9

65
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; getAlternatesWithoutStructuralTyping }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; getAlternatesWithoutStructuralTyping }
Distance : 13

66
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; getZoneStrings }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; getZoneStrings }
Distance : 13

67
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

68
Tree	{ returnMap ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnMap ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

69
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; makeStackTracesClean }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; makeStackTracesClean }
Distance : 13

70
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; fieldWasInitializedUsingContructorArgs }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; fieldWasInitializedUsingContructorArgs }
Distance : 13

71
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; setTolerance }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; setTolerance }
Distance : 13

72
Tree	{ return returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return returnMap ( Any.ANY ) . returnMap () ; }
Distance : 8

73
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

74
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; } MathRuntimeException
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; } MathRuntimeException
Distance : 13

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

76
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; } f
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; } f
Distance : 13

77
Tree	{ super ( Map ) ; } -
Code	{ super ( Map ) ; } -
Distance : 12

78
Tree	{ super ( Map ) ; } [
Code	{ super ( Map ) ; } [
Distance : 12

79
Tree	{ super ( Map ) ; } f
Code	{ super ( Map ) ; } f
Distance : 12

80
Tree	{ super ( Map ) ; } Override
Code	{ super ( Map ) ; } Override
Distance : 12

81
Tree	{ super ( Map ) ; } MathRuntimeException
Code	{ super ( Map ) ; } MathRuntimeException
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; Map = false ; } wanted
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; Map = false ; } wanted
Distance : 12

83
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

84
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

85
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

86
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

87
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

88
Tree	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 11

89
Tree	{ super ( Map ) ; } notifyListeners
Code	{ super ( Map ) ; } notifyListeners
Distance : 12

90
Tree	{ return ( Map ) returnMap () ; } Test
Code	{ return ( Map ) returnMap () ; } Test
Distance : 9

91
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 14

92
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; } ParamChecks
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; } ParamChecks
Distance : 13

93
Tree	{ return reportMatcher ( Any.ANY ) . < Map > reportMatcher () ; } options
Code	{ return reportMatcher ( Any.ANY ) . < Map > reportMatcher () ; } options
Distance : 10

94
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

95
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

96
Tree	{ return reportMatcher ( Any.ANY ) ; } -
Code	{ return reportMatcher ( Any.ANY ) ; } -
Distance : 11

97
Tree	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . returnMap () ; } &&
Code	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . returnMap () ; } &&
Distance : 9

98
Tree	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . returnMap () ; } p
Code	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . returnMap () ; } p
Distance : 9

99
Tree	{ return reportMatcher ( Any.ANY ) . < Map > reportMatcher () ; } p
Code	{ return reportMatcher ( Any.ANY ) . < Map > reportMatcher () ; } p
Distance : 10

100
Tree	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . returnMap () ; } source
Code	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . returnMap () ; } source
Distance : 9

101
Tree	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . returnMap () ; } toString
Code	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . returnMap () ; } toString
Distance : 9

102
Tree	{ return reportMatcher ( Any.ANY ) . < Map > reportMatcher () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . < Map > reportMatcher () ; } &&
Distance : 10

103
Tree	{ return reportMatcher ( Any.ANY ) . < Map > reportMatcher () ; } T
Code	{ return reportMatcher ( Any.ANY ) . < Map > reportMatcher () ; } T
Distance : 10

104
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 11

105
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 11

106
Tree	{ super ( Map ) ; } mock
Code	{ super ( Map ) ; } mock
Distance : 12

107
Tree	{ return ( Map ) returnMap () ; } Preconditions
Code	{ return ( Map ) returnMap () ; } Preconditions
Distance : 9

108
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Map = Map ; } p
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Map = Map ; } p
Distance : 13

109
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Map = Map ; } source
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Map = Map ; } source
Distance : 13

110
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } source
Code	{ reportMatcher ( Any.ANY ) ; return false ; } source
Distance : 12

111
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } toString
Code	{ reportMatcher ( Any.ANY ) ; return false ; } toString
Distance : 12

112
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Map = Map ; } T
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Map = Map ; } T
Distance : 13

113
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 14

114
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Map = Map ; } &&
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Map = Map ; } &&
Distance : 13

115
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Map = Map ; } options
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Map = Map ; } options
Distance : 13

116
Tree	{ return ( Map ) returnMap () ; } Class
Code	{ return ( Map ) returnMap () ; } Class
Distance : 9

117
Tree	{ return ( Map ) returnMap () ; } ParamChecks
Code	{ return ( Map ) returnMap () ; } ParamChecks
Distance : 9

118
Tree	{ return ( Map ) returnMap () ; } MathRuntimeException
Code	{ return ( Map ) returnMap () ; } MathRuntimeException
Distance : 9

119
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return false ; } &&
Distance : 12

120
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } p
Code	{ reportMatcher ( Any.ANY ) ; return false ; } p
Distance : 12

121
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } options
Code	{ reportMatcher ( Any.ANY ) ; return false ; } options
Distance : 12

122
Tree	{ return ( Map ) returnMap () ; } -
Code	{ return ( Map ) returnMap () ; } -
Distance : 9

123
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; initializeBuiltInTypes }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; initializeBuiltInTypes }
Distance : 13

124
Tree	{ returnMap ( Any.ANY ) . returnMap () ; Map = true ; }
Code	{ returnMap ( Any.ANY ) . returnMap () ; Map = true ; }
Distance : 12

125
Tree	{ return ( Map ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Map ) reportMatcher ( Any.ANY ) ; }
Distance : 10

126
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; } toString
Code	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; } toString
Distance : 10

127
Tree	{ returnMap ( Any.ANY ) ; Map = Any.ANY . reportMatcher () ; }
Code	{ returnMap ( Any.ANY ) ; Map = Any.ANY . reportMatcher () ; }
Distance : 10

128
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; initializeRegistry }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; initializeRegistry }
Distance : 13

129
Tree	{ returnMap ( Any.ANY ) . returnMap () ; this . Map = Map ; }
Code	{ returnMap ( Any.ANY ) . returnMap () ; this . Map = Map ; }
Distance : 13

130
Tree	{ returnMap ( Any.ANY ) . reportMatcher () ; Map = true ; }
Code	{ returnMap ( Any.ANY ) . reportMatcher () ; Map = true ; }
Distance : 12

131
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } source
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } source
Distance : 8

132
Tree	{ return this . Map ; } Override
Code	{ return this . Map ; } Override
Distance : 13

133
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; isAssertionCall }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; isAssertionCall }
Distance : 13

134
Tree	{ returnMap ( Any.ANY ) . reportMatcher () ; this . Map = Map ; }
Code	{ returnMap ( Any.ANY ) . reportMatcher () ; this . Map = Map ; }
Distance : 13

135
Tree	{ return ( Map ) returnMap ( Any.ANY ) ; } {}
Code	{ return ( Map ) returnMap ( Any.ANY ) ; } {}
Distance : 11

136
Tree	{ return this . Map ; } f
Code	{ return this . Map ; } f
Distance : 13

137
Tree	{ return ( Map ) returnMap ( Any.ANY ) ; } Class
Code	{ return ( Map ) returnMap ( Any.ANY ) ; } Class
Distance : 11

138
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } toString
Distance : 8

139
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; Format.PRETTY }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; Format.PRETTY }
Distance : 13

140
Tree	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 11

141
Tree	{ return reportMatcher ( Any.ANY ) . < Map > reportMatcher () ; } source
Code	{ return reportMatcher ( Any.ANY ) . < Map > reportMatcher () ; } source
Distance : 10

142
Tree	{ return ( Map ) returnMap ( Any.ANY ) ; } ParamChecks
Code	{ return ( Map ) returnMap ( Any.ANY ) ; } ParamChecks
Distance : 11

143
Tree	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; } f
Code	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; } f
Distance : 12

144
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; Map = false ; } Math
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; Map = false ; } Math
Distance : 12

145
Tree	{ return reportMatcher ( Any.ANY ) ; } f
Code	{ return reportMatcher ( Any.ANY ) ; } f
Distance : 11

146
Tree	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; } {}
Code	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; } {}
Distance : 12

147
Tree	{ return reportMatcher ( Any.ANY ) . < Map > reportMatcher () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . < Map > reportMatcher () ; } toString
Distance : 10

148
Tree	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; } MathRuntimeException
Distance : 12

149
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 12

150
Tree	{ return ( Map ) returnMap ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Map ) returnMap ( Any.ANY ) . reportMatcher () ; }
Distance : 9

151
Tree	{ return this . Map ; } [
Code	{ return this . Map ; } [
Distance : 13

152
Tree	{ super ( Map ) ; }
Code	{ super ( Map ) ; }
Distance : 11

153
Tree	{ return ( Map ) returnMap ( Any.ANY ) ; } -
Code	{ return ( Map ) returnMap ( Any.ANY ) ; } -
Distance : 11

154
Tree	{ return reportMatcher ( Any.ANY ) ; } {}
Code	{ return reportMatcher ( Any.ANY ) ; } {}
Distance : 11

155
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; } Preconditions
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; } Preconditions
Distance : 13

156
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; nextChar }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; nextChar }
Distance : 13

157
Tree	{ return returnMap ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnMap ( Any.ANY ) . reportMatcher () ; }
Distance : 9

158
Tree	{ return ( Map ) returnMap ( Any.ANY ) ; } f
Code	{ return ( Map ) returnMap ( Any.ANY ) ; } f
Distance : 11

159
Tree	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . returnMap () ; }
Distance : 8

160
Tree	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; } Class
Code	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; } Class
Distance : 12

161
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Map = Map ; } toString
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Map = Map ; } toString
Distance : 13

162
Tree	{ returnMap ( Any.ANY ) ; return true ; }
Code	{ returnMap ( Any.ANY ) ; return true ; }
Distance : 12

163
Tree	{ return returnMap ( Any.ANY ) . < Map > reportMatcher () ; }
Code	{ return returnMap ( Any.ANY ) . < Map > reportMatcher () ; }
Distance : 10

164
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; Map = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; Map = true ; }
Distance : 11

165
Tree	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . reportMatcher () ; }
Distance : 9

166
Tree	{ returnMap ( Any.ANY ) ; return break; ; }
Code	{ returnMap ( Any.ANY ) ; return break; ; }
Distance : 12

167
Tree	{ super ( Map ) ; } array
Code	{ super ( Map ) ; } array
Distance : 12

168
Tree	{ returnMap ( Any.ANY ) ; this . Map = Any.ANY ; }
Code	{ returnMap ( Any.ANY ) ; this . Map = Any.ANY ; }
Distance : 12

169
Tree	{ returnMap ( Any.ANY ) . returnMap () ; Map = false ; }
Code	{ returnMap ( Any.ANY ) . returnMap () ; Map = false ; }
Distance : 12

170
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Map = Map ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Map = Map ; }
Distance : 12

171
Tree	{ returnMap ( Any.ANY ) ; Map = Any.ANY . returnMap () ; }
Code	{ returnMap ( Any.ANY ) ; Map = Any.ANY . returnMap () ; }
Distance : 9

172
Tree	{ return ( Map ) returnMap () ; } f
Code	{ return ( Map ) returnMap () ; } f
Distance : 9

173
Tree	{ return returnMap ( Any.ANY ) . < Map > returnMap () ; }
Code	{ return returnMap ( Any.ANY ) . < Map > returnMap () ; }
Distance : 9

174
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Map = true ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Map = true ; }
Distance : 11

175
Tree	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; } Preconditions
Distance : 12

176
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 12

177
Tree	{ super ( Map ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Map ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

178
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Map = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Map = false ; }
Distance : 11

179
Tree	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 11

180
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; } -
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; } -
Distance : 13

181
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

182
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } T
Code	{ reportMatcher ( Any.ANY ) ; return false ; } T
Distance : 12

183
Tree	{ super ( Map ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Map ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

184
Tree	{ return ( Map ) returnMap () ; } {}
Code	{ return ( Map ) returnMap () ; } {}
Distance : 9

185
Tree	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; } Test
Code	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; } Test
Distance : 12

186
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 14

187
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 14

188
Tree	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; } -
Code	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; } -
Distance : 12

189
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

190
Tree	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . returnMap () ; } options
Code	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . returnMap () ; } options
Distance : 9

191
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

192
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

193
Tree	{ return this . Map ; }
Code	{ return this . Map ; }
Distance : 12

194
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 11

195
Tree	{ return ( Map ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Map ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

196
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; } T
Code	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; } T
Distance : 10

197
Tree	{ super ( Map ) ; } class
Code	{ super ( Map ) ; } class
Distance : 12

198
Tree	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; } ParamChecks
Distance : 12

199
Tree	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . returnMap () ; } T
Code	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . returnMap () ; } T
Distance : 9

========================================================================


========================================================================
Example Number: 91
Parent Code is: 
{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anySet () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=Set})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnSet}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anySet}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 9
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return reportMatcher () ; } {}
Code	{ return reportMatcher () ; } {}
Distance : 2

1
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( Set ) ; } p
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( Set ) ; } p
Distance : 13

2
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( Set ) ; } options
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( Set ) ; } options
Distance : 13

3
Tree	{ return ( Set ) reportMatcher ( Set . reportMatcher () ) ; }
Code	{ return ( Set ) reportMatcher ( Set . reportMatcher () ) ; }
Distance : 9

4
Tree	{ return ( Set ) reportMatcher ( Set ) . returnSet () ; }
Code	{ return ( Set ) reportMatcher ( Set ) . returnSet () ; }
Distance : 9

5
Tree	{ return ( Set ) reportMatcher ( Set . returnSet () ) ; }
Code	{ return ( Set ) reportMatcher ( Set . returnSet () ) ; }
Distance : 9

6
Tree	{ return ( Set ) reportMatcher ( Set ) . reportMatcher () ; }
Code	{ return ( Set ) reportMatcher ( Set ) . reportMatcher () ; }
Distance : 9

7
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet ( Set ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet ( Set ) ; }
Distance : 12

8
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( Set ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( Set ) ; }
Distance : 12

9
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 9

10
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

11
Tree	{ return ( Set ) this . Set . reportMatcher () ; }
Code	{ return ( Set ) this . Set . reportMatcher () ; }
Distance : 8

12
Tree	{ return ( Set ) reportMatcher ( Set ) ; }
Code	{ return ( Set ) reportMatcher ( Set ) ; }
Distance : 7

13
Tree	{ return ( Set ) this . Set . returnSet () ; }
Code	{ return ( Set ) this . Set . returnSet () ; }
Distance : 8

14
Tree	{ return ( Any.ANY , Any.ANY ) ; return continue; ; }
Code	{ return ( Any.ANY , Any.ANY ) ; return continue; ; }
Distance : 8

15
Tree	{ return ( Any.ANY , Any.ANY ) ; return super(); ; }
Code	{ return ( Any.ANY , Any.ANY ) ; return super(); ; }
Distance : 8

16
Tree	{ return ( Set ) Set . returnSet ( Set ) ; } ParamChecks
Code	{ return ( Set ) Set . returnSet ( Set ) ; } ParamChecks
Distance : 10

17
Tree	{ return () ; return continue; ; }
Code	{ return () ; return continue; ; }
Distance : 4

18
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( Set ) ; } T
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( Set ) ; } T
Distance : 13

19
Tree	{ return ( Set ) reportMatcher () ; } Test
Code	{ return ( Set ) reportMatcher () ; } Test
Distance : 5

20
Tree	{ return ( Set ) reportMatcher ( Set ) ; } ParamChecks
Code	{ return ( Set ) reportMatcher ( Set ) ; } ParamChecks
Distance : 8

21
Tree	{ return ( Set ) reportMatcher ( Set ) ; } -
Code	{ return ( Set ) reportMatcher ( Set ) ; } -
Distance : 8

22
Tree	{ return ( Set ) reportMatcher () ; } ParamChecks
Code	{ return ( Set ) reportMatcher () ; } ParamChecks
Distance : 5

23
Tree	{ return ( Set ) reportMatcher () ; } -
Code	{ return ( Set ) reportMatcher () ; } -
Distance : 5

24
Tree	{ return ( Set ) reportMatcher () ; } Preconditions
Code	{ return ( Set ) reportMatcher () ; } Preconditions
Distance : 5

25
Tree	{ return ( Set ) Set . returnSet ( Set ) ; } Test
Code	{ return ( Set ) Set . returnSet ( Set ) ; } Test
Distance : 10

26
Tree	{ return ( Set ) Set . returnSet ( Set ) ; } MathRuntimeException
Code	{ return ( Set ) Set . returnSet ( Set ) ; } MathRuntimeException
Distance : 10

27
Tree	{ return ( Set ) reportMatcher ( Set ) ; } {}
Code	{ return ( Set ) reportMatcher ( Set ) ; } {}
Distance : 8

28
Tree	{ return ( Set ) reportMatcher ( Set ) ; } MathRuntimeException
Code	{ return ( Set ) reportMatcher ( Set ) ; } MathRuntimeException
Distance : 8

29
Tree	{ return ( Set ) reportMatcher ( Set ) ; } Class
Code	{ return ( Set ) reportMatcher ( Set ) ; } Class
Distance : 8

30
Tree	{ return ( Set ) reportMatcher ( Set ) ; } Test
Code	{ return ( Set ) reportMatcher ( Set ) ; } Test
Distance : 8

31
Tree	{ return reportMatcher () ; } Test
Code	{ return reportMatcher () ; } Test
Distance : 2

32
Tree	{ return reportMatcher () ; } Class
Code	{ return reportMatcher () ; } Class
Distance : 2

33
Tree	{ return reportMatcher () ; } MathRuntimeException
Code	{ return reportMatcher () ; } MathRuntimeException
Distance : 2

34
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 1

35
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( Set ) ; } &&
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( Set ) ; } &&
Distance : 13

36
Tree	{ return ( Set ) reportMatcher ( Set ) ; } f
Code	{ return ( Set ) reportMatcher ( Set ) ; } f
Distance : 8

37
Tree	{ return ( Set ) Set . reportMatcher ( Set ) ; }
Code	{ return ( Set ) Set . reportMatcher ( Set ) ; }
Distance : 9

38
Tree	{ super ( Set . reportMatcher ( Set ) ) ; returnSet () ; }
Code	{ super ( Set . reportMatcher ( Set ) ) ; returnSet () ; }
Distance : 11

39
Tree	{ reportMatcher () ; return continue; ; }
Code	{ reportMatcher () ; return continue; ; }
Distance : 5

40
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return return; ; }
Distance : 9

41
Tree	{ return ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ return ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 8

42
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 7

43
Tree	{ return { () ; }
Code	{ return { () ; }
Distance : 1

44
Tree	{ return ( Set ) reportMatcher ( Set ) ; }
Code	{ return ( Set ) reportMatcher ( Set ) ; }
Distance : 7

45
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 7

46
Tree	{ return ( Any.ANY ) ; return null ; }
Code	{ return ( Any.ANY ) ; return null ; }
Distance : 6

47
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 7

48
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 9

49
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 7

50
Tree	{ return Set ; }
Code	{ return Set ; }
Distance : 2

51
Tree	{ return null ; }
Code	{ return null ; }
Distance : 2

52
Tree	{ return ( Set ) reportMatcher () ; }
Code	{ return ( Set ) reportMatcher () ; }
Distance : 4

53
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; }
Distance : 7

54
Tree	{ return ( Any.ANY ) ; return super(); ; }
Code	{ return ( Any.ANY ) ; return super(); ; }
Distance : 6

55
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return default: ; }
Distance : 9

56
Tree	{ reportMatcher () ; return break; ; }
Code	{ reportMatcher () ; return break; ; }
Distance : 5

57
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return super(); ; }
Distance : 9

58
Tree	{ return ( Set ) Set . returnSet ( Set ) ; }
Code	{ return ( Set ) Set . returnSet ( Set ) ; }
Distance : 9

59
Tree	{ return () ; return return; ; }
Code	{ return () ; return return; ; }
Distance : 4

60
Tree	{ return () ; return super(); ; }
Code	{ return () ; return super(); ; }
Distance : 4

61
Tree	{ return ( Set ) reportMatcher ( Set . reportMatcher () ) ; }
Code	{ return ( Set ) reportMatcher ( Set . reportMatcher () ) ; }
Distance : 9

62
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; }
Distance : 9

63
Tree	{ reportMatcher () ; return default: ; }
Code	{ reportMatcher () ; return default: ; }
Distance : 5

64
Tree	{ return ( Set ) reportMatcher ( Set ) . reportMatcher () ; }
Code	{ return ( Set ) reportMatcher ( Set ) . reportMatcher () ; }
Distance : 9

65
Tree	{ return ( Set ) reportMatcher () ; }
Code	{ return ( Set ) reportMatcher () ; }
Distance : 4

66
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet ( Set ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet ( Set ) ; }
Distance : 12

67
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; }
Distance : 7

68
Tree	{ super ( Set . reportMatcher ( Set ) ) ; reportMatcher () ; }
Code	{ super ( Set . reportMatcher ( Set ) ) ; reportMatcher () ; }
Distance : 11

69
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( Set ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( Set ) ; }
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return break; ; }
Distance : 9

71
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return continue; ; }
Distance : 9

72
Tree	{ return ( Set ) Set . reportMatcher () ; }
Code	{ return ( Set ) Set . reportMatcher () ; }
Distance : 6

73
Tree	{ return ( Set ) Set . returnSet () ; }
Code	{ return ( Set ) Set . returnSet () ; }
Distance : 6

74
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; } toString
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; } toString
Distance : 10

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

76
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; } options
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; } options
Distance : 10

77
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; } p
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; } p
Distance : 10

78
Tree	{ return Set ; } notifyListeners
Code	{ return Set ; } notifyListeners
Distance : 3

79
Tree	{ return Set ; } array
Code	{ return Set ; } array
Distance : 3

80
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 10

81
Tree	{ super ( Set . reportMatcher ( Set ) ) ; reportMatcher () ; } T
Code	{ super ( Set . reportMatcher ( Set ) ) ; reportMatcher () ; } T
Distance : 12

82
Tree	{ return ( Set ) this . Set . returnSet () ; } Class
Code	{ return ( Set ) this . Set . returnSet () ; } Class
Distance : 9

83
Tree	{ return ( Set ) this . Set . returnSet () ; } MathRuntimeException
Code	{ return ( Set ) this . Set . returnSet () ; } MathRuntimeException
Distance : 9

84
Tree	{ return ( Set ) this . Set . returnSet () ; } {}
Code	{ return ( Set ) this . Set . returnSet () ; } {}
Distance : 9

85
Tree	{ return ( Set ) this . Set . returnSet () ; } f
Code	{ return ( Set ) this . Set . returnSet () ; } f
Distance : 9

86
Tree	{ return ( Set ) this . Set . returnSet () ; } ParamChecks
Code	{ return ( Set ) this . Set . returnSet () ; } ParamChecks
Distance : 9

87
Tree	{ return ( Set ) this . Set . returnSet () ; } -
Code	{ return ( Set ) this . Set . returnSet () ; } -
Distance : 9

88
Tree	{ return ( Set ) this . Set . returnSet () ; } Preconditions
Code	{ return ( Set ) this . Set . returnSet () ; } Preconditions
Distance : 9

89
Tree	{ super ( Set . reportMatcher ( Set ) ) ; reportMatcher () ; } options
Code	{ super ( Set . reportMatcher ( Set ) ) ; reportMatcher () ; } options
Distance : 12

90
Tree	{ super ( Set . reportMatcher ( Set ) ) ; reportMatcher () ; } p
Code	{ super ( Set . reportMatcher ( Set ) ) ; reportMatcher () ; } p
Distance : 12

91
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } f
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } f
Distance : 10

92
Tree	{ return ( Set ) reportMatcher ( Set . returnSet () ) ; } source
Code	{ return ( Set ) reportMatcher ( Set . returnSet () ) ; } source
Distance : 10

93
Tree	{ super ( Set . reportMatcher ( Set ) ) ; reportMatcher () ; } &&
Code	{ super ( Set . reportMatcher ( Set ) ) ; reportMatcher () ; } &&
Distance : 12

94
Tree	{ return STRING_CONSTANT ; } [
Code	{ return STRING_CONSTANT ; } [
Distance : 3

95
Tree	{ return STRING_CONSTANT ; } f
Code	{ return STRING_CONSTANT ; } f
Distance : 3

96
Tree	{ return ( Set ) Set . reportMatcher () ; } {}
Code	{ return ( Set ) Set . reportMatcher () ; } {}
Distance : 7

97
Tree	{ return ( Set ) Set . returnSet () ; } f
Code	{ return ( Set ) Set . returnSet () ; } f
Distance : 7

98
Tree	{ return ( Set ) Set . returnSet () ; } ParamChecks
Code	{ return ( Set ) Set . returnSet () ; } ParamChecks
Distance : 7

99
Tree	{ return ( Set ) Set . returnSet () ; } -
Code	{ return ( Set ) Set . returnSet () ; } -
Distance : 7

100
Tree	{ return ( Set ) reportMatcher ( Set . returnSet () ) ; } p
Code	{ return ( Set ) reportMatcher ( Set . returnSet () ) ; } p
Distance : 10

101
Tree	{ return ( Set ) Set . returnSet () ; } Preconditions
Code	{ return ( Set ) Set . returnSet () ; } Preconditions
Distance : 7

102
Tree	{ return ( Set ) reportMatcher ( Set . returnSet () ) ; } options
Code	{ return ( Set ) reportMatcher ( Set . returnSet () ) ; } options
Distance : 10

103
Tree	{ return Set ; } class
Code	{ return Set ; } class
Distance : 3

104
Tree	{ return ( Set ) reportMatcher ( Set . returnSet () ) ; } toString
Code	{ return ( Set ) reportMatcher ( Set . returnSet () ) ; } toString
Distance : 10

105
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 3

106
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 3

107
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 3

108
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 3

109
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 3

110
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 3

111
Tree	{ return STRING_CONSTANT ; } mock
Code	{ return STRING_CONSTANT ; } mock
Distance : 3

112
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 3

113
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } {}
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } {}
Distance : 10

114
Tree	{ return ( Set ) this . Set . returnSet () ; } Test
Code	{ return ( Set ) this . Set . returnSet () ; } Test
Distance : 9

115
Tree	{ return reportMatcher ( Any.ANY ) ; } f
Code	{ return reportMatcher ( Any.ANY ) ; } f
Distance : 5

116
Tree	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 5

117
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } Class
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } Class
Distance : 10

118
Tree	{ return reportMatcher ( Any.ANY ) ; } {}
Code	{ return reportMatcher ( Any.ANY ) ; } {}
Distance : 5

119
Tree	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 5

120
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 5

121
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 5

122
Tree	{ return Set ; } MathRuntimeException
Code	{ return Set ; } MathRuntimeException
Distance : 3

123
Tree	{ return Set ; } mock
Code	{ return Set ; } mock
Distance : 3

124
Tree	{ return ( Set ) Set . returnSet ( Set ) ; } f
Code	{ return ( Set ) Set . returnSet ( Set ) ; } f
Distance : 10

125
Tree	{ return ( Set ) Set . reportMatcher ( Set ) ; } -
Code	{ return ( Set ) Set . reportMatcher ( Set ) ; } -
Distance : 10

126
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } Test
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } Test
Distance : 8

127
Tree	{ return ( Set ) Set . returnSet ( Set ) ; } Preconditions
Code	{ return ( Set ) Set . returnSet ( Set ) ; } Preconditions
Distance : 10

128
Tree	{ return Set ; } -
Code	{ return Set ; } -
Distance : 3

129
Tree	{ return Set ; } [
Code	{ return Set ; } [
Distance : 3

130
Tree	{ reportMatcher () ; return null ; }
Code	{ reportMatcher () ; return null ; }
Distance : 5

131
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; }
Distance : 9

132
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 10

133
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } Test
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } Test
Distance : 10

134
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 2

135
Tree	{ return STRING_CONSTANT ; } Override
Code	{ return STRING_CONSTANT ; } Override
Distance : 3

136
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

137
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 9

138
Tree	{ return () ; return null ; }
Code	{ return () ; return null ; }
Distance : 4

139
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 8

140
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 2

141
Tree	{ super ( Set . reportMatcher ( Set ) ) ; reportMatcher () ; } source
Code	{ super ( Set . reportMatcher ( Set ) ) ; reportMatcher () ; } source
Distance : 12

142
Tree	{ return return ( Any.ANY ) ; }
Code	{ return return ( Any.ANY ) ; }
Distance : 4

143
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 4

144
Tree	{ super ( Set . reportMatcher ( Set ) ) ; reportMatcher () ; } toString
Code	{ super ( Set . reportMatcher ( Set ) ) ; reportMatcher () ; } toString
Distance : 12

145
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } f
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } f
Distance : 8

146
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } {}
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } {}
Distance : 8

147
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 8

148
Tree	{ return ( Any.ANY ) ; return continue; ; }
Code	{ return ( Any.ANY ) ; return continue; ; }
Distance : 6

149
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 8

150
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( Set ) ; } toString
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( Set ) ; } toString
Distance : 13

151
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } -
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } -
Distance : 8

152
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( Set ) ; } source
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( Set ) ; } source
Distance : 13

153
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 10

154
Tree	{ return Set ; } f
Code	{ return Set ; } f
Distance : 3

155
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; } T
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; } T
Distance : 10

156
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 2

157
Tree	{ return Set ; } Override
Code	{ return Set ; } Override
Distance : 3

158
Tree	{ reportMatcher () ; return super(); ; }
Code	{ reportMatcher () ; return super(); ; }
Distance : 5

159
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 2

160
Tree	{ return ( Set ) reportMatcher () ; } f
Code	{ return ( Set ) reportMatcher () ; } f
Distance : 5

161
Tree	{ return ( Set ) Set . returnSet () ; } Test
Code	{ return ( Set ) Set . returnSet () ; } Test
Distance : 7

162
Tree	{ super ( Set . reportMatcher ( Set ) ) ; reportMatcher () ; }
Code	{ super ( Set . reportMatcher ( Set ) ) ; reportMatcher () ; }
Distance : 11

163
Tree	{ reportMatcher () ; return return; ; }
Code	{ reportMatcher () ; return return; ; }
Distance : 5

164
Tree	{ super ( Set . reportMatcher ( Set ) ) ; returnSet () ; }
Code	{ super ( Set . reportMatcher ( Set ) ) ; returnSet () ; }
Distance : 11

165
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } Class
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } Class
Distance : 8

166
Tree	{ return ( Set ) reportMatcher ( Set ) . reportMatcher () ; } T
Code	{ return ( Set ) reportMatcher ( Set ) . reportMatcher () ; } T
Distance : 10

167
Tree	{ return reportMatcher () ; } Preconditions
Code	{ return reportMatcher () ; } Preconditions
Distance : 2

168
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 7

169
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 2

170
Tree	{ return ( Set ) reportMatcher ( Set ) . reportMatcher () ; } &&
Code	{ return ( Set ) reportMatcher ( Set ) . reportMatcher () ; } &&
Distance : 10

171
Tree	{ return ( Set ) reportMatcher () ; } {}
Code	{ return ( Set ) reportMatcher () ; } {}
Distance : 5

172
Tree	{ return ( Set ) reportMatcher ( Set ) . reportMatcher () ; } p
Code	{ return ( Set ) reportMatcher ( Set ) . reportMatcher () ; } p
Distance : 10

173
Tree	{ return ( Set ) Set . returnSet ( Set ) ; } {}
Code	{ return ( Set ) Set . returnSet ( Set ) ; } {}
Distance : 10

174
Tree	{ return ( Set ) reportMatcher () ; } MathRuntimeException
Code	{ return ( Set ) reportMatcher () ; } MathRuntimeException
Distance : 5

175
Tree	{ return reportMatcher () ; } -
Code	{ return reportMatcher () ; } -
Distance : 2

176
Tree	{ return ( Set ) reportMatcher ( Set . returnSet () ) ; }
Code	{ return ( Set ) reportMatcher ( Set . returnSet () ) ; }
Distance : 9

177
Tree	{ return ( Set ) reportMatcher () ; } Class
Code	{ return ( Set ) reportMatcher () ; } Class
Distance : 5

178
Tree	{ return reportMatcher () ; } ParamChecks
Code	{ return reportMatcher () ; } ParamChecks
Distance : 2

179
Tree	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 5

180
Tree	{ return reportMatcher ( Any.ANY ) ; } -
Code	{ return reportMatcher ( Any.ANY ) ; } -
Distance : 5

181
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; } source
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; } source
Distance : 10

182
Tree	{ return ( Set ) reportMatcher ( Set ) . reportMatcher () ; } options
Code	{ return ( Set ) reportMatcher ( Set ) . reportMatcher () ; } options
Distance : 10

183
Tree	{ return ( Set ) Set . returnSet () ; } MathRuntimeException
Code	{ return ( Set ) Set . returnSet () ; } MathRuntimeException
Distance : 7

184
Tree	{ return STRING_CONSTANT ; } MathRuntimeException
Code	{ return STRING_CONSTANT ; } MathRuntimeException
Distance : 3

185
Tree	{ return ( Set ) reportMatcher ( Set ) . reportMatcher () ; } source
Code	{ return ( Set ) reportMatcher ( Set ) . reportMatcher () ; } source
Distance : 10

186
Tree	{ return ( Set ) reportMatcher ( Set ) . reportMatcher () ; } toString
Code	{ return ( Set ) reportMatcher ( Set ) . reportMatcher () ; } toString
Distance : 10

187
Tree	{ return ( Set ) reportMatcher ( Set . returnSet () ) ; } T
Code	{ return ( Set ) reportMatcher ( Set . returnSet () ) ; } T
Distance : 10

188
Tree	{ return ( Any.ANY ) ; return return; ; }
Code	{ return ( Any.ANY ) ; return return; ; }
Distance : 6

189
Tree	{ return ( Set ) reportMatcher ( Set . reportMatcher () ) ; } &&
Code	{ return ( Set ) reportMatcher ( Set . reportMatcher () ) ; } &&
Distance : 10

190
Tree	{ return ( Set ) Set . returnSet ( Set ) ; } Class
Code	{ return ( Set ) Set . returnSet ( Set ) ; } Class
Distance : 10

191
Tree	{ return ( Set ) reportMatcher ( Set ) . returnSet () ; }
Code	{ return ( Set ) reportMatcher ( Set ) . returnSet () ; }
Distance : 9

192
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 2

193
Tree	{ return reportMatcher () ; } f
Code	{ return reportMatcher () ; } f
Distance : 2

194
Tree	{ return ( Any.ANY , Any.ANY ) ; return return; ; }
Code	{ return ( Any.ANY , Any.ANY ) ; return return; ; }
Distance : 8

195
Tree	{ return ( Set ) reportMatcher ( Set ) ; } Preconditions
Code	{ return ( Set ) reportMatcher ( Set ) ; } Preconditions
Distance : 8

196
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } -
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } -
Distance : 10

197
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; } &&
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; } &&
Distance : 10

198
Tree	{ return ( Set ) Set . returnSet () ; } Class
Code	{ return ( Set ) Set . returnSet () ; } Class
Distance : 7

199
Tree	{ return STRING_CONSTANT ; } -
Code	{ return STRING_CONSTANT ; } -
Distance : 3

========================================================================


========================================================================
Example Number: 92
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnSet () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Set . class ) ) . returnSet () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnSet}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Set})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnSet}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return this . Set ; } notifyListeners
Code	{ return this . Set ; } notifyListeners
Distance : 13

1
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Distance : 12

2
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 11

3
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } -
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } -
Distance : 11

4
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } Test
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } Test
Distance : 11

5
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } Test
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } Test
Distance : 13

6
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } {}
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } {}
Distance : 11

7
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } f
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } f
Distance : 11

8
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } T
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } T
Distance : 9

9
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } p
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } p
Distance : 9

10
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } options
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } options
Distance : 9

11
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } source
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } source
Distance : 9

12
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } toString
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } toString
Distance : 9

13
Tree	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . reportMatcher () ; }
Distance : 9

14
Tree	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . returnSet () ; }
Code	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . returnSet () ; }
Distance : 8

15
Tree	{ return ( Set ) returnSet ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Set ) returnSet ( Any.ANY ) . reportMatcher () ; }
Distance : 9

16
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } toString
Distance : 9

17
Tree	{ return ( Set ) returnSet ( Any.ANY ) . returnSet () ; }
Code	{ return ( Set ) returnSet ( Any.ANY ) . returnSet () ; }
Distance : 8

18
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Distance : 12

19
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) . returnSet () ; } &&
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) . returnSet () ; } &&
Distance : 10

20
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ParamChecks
Distance : 12

21
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } f
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } f
Distance : 12

22
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } options
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } options
Distance : 9

23
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } p
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } p
Distance : 9

24
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } &&
Distance : 9

25
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } T
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } T
Distance : 9

26
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } {}
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } {}
Distance : 13

27
Tree	{ return this . Set ; } -
Code	{ return this . Set ; } -
Distance : 13

28
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) . returnSet () ; } source
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) . returnSet () ; } source
Distance : 10

29
Tree	{ return this . Set ; } MathRuntimeException
Code	{ return this . Set ; } MathRuntimeException
Distance : 13

30
Tree	{ return this . Set ; } mock
Code	{ return this . Set ; } mock
Distance : 13

31
Tree	{ return this . Set ; } array
Code	{ return this . Set ; } array
Distance : 13

32
Tree	{ return this . Set ; } class
Code	{ return this . Set ; } class
Distance : 13

33
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

34
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) . returnSet () ; } T
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) . returnSet () ; } T
Distance : 10

35
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) . returnSet () ; } p
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) . returnSet () ; } p
Distance : 10

36
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } -
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } -
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

38
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

39
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; }
Distance : 10

40
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

41
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

42
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

43
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

44
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

45
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

46
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 7

47
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

48
Tree	{ return this . Set ; }
Code	{ return this . Set ; }
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

50
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

51
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

52
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

53
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

54
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

55
Tree	{ super ( Set ) ; returnSet ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Set ) ; returnSet ( Any.ANY ) . reportMatcher () ; }
Distance : 10

56
Tree	{ return ( Set ) reportMatcher () ; }
Code	{ return ( Set ) reportMatcher () ; }
Distance : 9

57
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

58
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 9

59
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 8

60
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

61
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Set = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Set = false ; }
Distance : 11

62
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

63
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; Set = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; Set = false ; }
Distance : 11

64
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

65
Tree	{ super ( Set ) ; returnSet ( Any.ANY ) ; initializeBuiltInTypes }
Code	{ super ( Set ) ; returnSet ( Any.ANY ) ; initializeBuiltInTypes }
Distance : 13

66
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; ServletUtilities.tempOneTimeFilePrefix }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; ServletUtilities.tempOneTimeFilePrefix }
Distance : 13

67
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; setTolerance }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; setTolerance }
Distance : 13

68
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; initializeRegistry }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; initializeRegistry }
Distance : 13

69
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; initializeBuiltInTypes }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; initializeBuiltInTypes }
Distance : 13

70
Tree	{ return ( Set ) returnSet () ; }
Code	{ return ( Set ) returnSet () ; }
Distance : 8

71
Tree	{ return ( Set ) returnSet ( Any.ANY ) ; }
Code	{ return ( Set ) returnSet ( Any.ANY ) ; }
Distance : 10

72
Tree	{ super ( Set ) ; returnSet ( Any.ANY ) ; }
Code	{ super ( Set ) ; returnSet ( Any.ANY ) ; }
Distance : 12

73
Tree	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; }
Distance : 9

74
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 13

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

76
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } f
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } f
Distance : 13

77
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 11

78
Tree	{ super ( Set ) ; } -
Code	{ super ( Set ) ; } -
Distance : 12

79
Tree	{ super ( Set ) ; } [
Code	{ super ( Set ) ; } [
Distance : 12

80
Tree	{ super ( Set ) ; } f
Code	{ super ( Set ) ; } f
Distance : 12

81
Tree	{ super ( Set ) ; } Override
Code	{ super ( Set ) ; } Override
Distance : 12

82
Tree	{ super ( Set ) ; } MathRuntimeException
Code	{ super ( Set ) ; } MathRuntimeException
Distance : 12

83
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

84
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

85
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

86
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

87
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

88
Tree	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 11

89
Tree	{ super ( Set ) ; } notifyListeners
Code	{ super ( Set ) ; } notifyListeners
Distance : 12

90
Tree	{ return ( Set ) reportMatcher () ; } Test
Code	{ return ( Set ) reportMatcher () ; } Test
Distance : 10

91
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 14

92
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 13

93
Tree	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; } options
Code	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; } options
Distance : 10

94
Tree	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; } p
Code	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; } p
Distance : 10

95
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

96
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

97
Tree	{ return reportMatcher ( Any.ANY ) ; } -
Code	{ return reportMatcher ( Any.ANY ) ; } -
Distance : 11

98
Tree	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . returnSet () ; } &&
Code	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . returnSet () ; } &&
Distance : 9

99
Tree	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . returnSet () ; } p
Code	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . returnSet () ; } p
Distance : 9

100
Tree	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; } &&
Distance : 10

101
Tree	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . returnSet () ; } source
Code	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . returnSet () ; } source
Distance : 9

102
Tree	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . returnSet () ; } toString
Code	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . returnSet () ; } toString
Distance : 9

103
Tree	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; } T
Code	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; } T
Distance : 10

104
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 11

105
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; Set = false ; } wanted
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; Set = false ; } wanted
Distance : 12

106
Tree	{ super ( Set ) ; } mock
Code	{ super ( Set ) ; } mock
Distance : 12

107
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return false ; } &&
Distance : 12

108
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } p
Code	{ reportMatcher ( Any.ANY ) ; return false ; } p
Distance : 12

109
Tree	{ return ( Set ) reportMatcher () ; } ParamChecks
Code	{ return ( Set ) reportMatcher () ; } ParamChecks
Distance : 10

110
Tree	{ return ( Set ) reportMatcher () ; } -
Code	{ return ( Set ) reportMatcher () ; } -
Distance : 10

111
Tree	{ return ( Set ) reportMatcher () ; } Preconditions
Code	{ return ( Set ) reportMatcher () ; } Preconditions
Distance : 10

112
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = Set ; } source
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = Set ; } source
Distance : 13

113
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } toString
Code	{ reportMatcher ( Any.ANY ) ; return false ; } toString
Distance : 12

114
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } source
Code	{ reportMatcher ( Any.ANY ) ; return false ; } source
Distance : 12

115
Tree	{ return ( Set ) reportMatcher () ; } MathRuntimeException
Code	{ return ( Set ) reportMatcher () ; } MathRuntimeException
Distance : 10

116
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = Set ; } options
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = Set ; } options
Distance : 13

117
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = Set ; } &&
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = Set ; } &&
Distance : 13

118
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 14

119
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = Set ; } T
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = Set ; } T
Distance : 13

120
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = Set ; } p
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = Set ; } p
Distance : 13

121
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } options
Code	{ reportMatcher ( Any.ANY ) ; return false ; } options
Distance : 12

122
Tree	{ return ( Set ) reportMatcher () ; } Class
Code	{ return ( Set ) reportMatcher () ; } Class
Distance : 10

123
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; makeStackTracesClean }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; makeStackTracesClean }
Distance : 13

124
Tree	{ super ( Set ) ; returnSet ( Any.ANY ) ; makeStackTracesClean }
Code	{ super ( Set ) ; returnSet ( Any.ANY ) ; makeStackTracesClean }
Distance : 13

125
Tree	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; }
Distance : 9

126
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; Set = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; Set = true ; }
Distance : 11

127
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } source
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } source
Distance : 9

128
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) . returnSet () ; } toString
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) . returnSet () ; } toString
Distance : 10

129
Tree	{ return this . Set ; } Override
Code	{ return this . Set ; } Override
Distance : 13

130
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Set = true ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Set = true ; }
Distance : 11

131
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = Set ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = Set ; }
Distance : 12

132
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 11

133
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

134
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 12

135
Tree	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; }
Distance : 11

136
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Set = Set ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Set = Set ; }
Distance : 12

137
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } &&
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } &&
Distance : 9

138
Tree	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; } f
Code	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; } f
Distance : 12

139
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 12

140
Tree	{ return this . Set ; } f
Code	{ return this . Set ; } f
Distance : 13

141
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; getAlternatesWithoutStructuralTyping }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; getAlternatesWithoutStructuralTyping }
Distance : 13

142
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; Set = false ; } Math
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; Set = false ; } Math
Distance : 12

143
Tree	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; } Preconditions
Distance : 12

144
Tree	{ return this . Set ; } [
Code	{ return this . Set ; } [
Distance : 13

145
Tree	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; } {}
Code	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; } {}
Distance : 12

146
Tree	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 11

147
Tree	{ return reportMatcher ( Any.ANY ) ; } f
Code	{ return reportMatcher ( Any.ANY ) ; } f
Distance : 11

148
Tree	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; } MathRuntimeException
Distance : 12

149
Tree	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; } source
Code	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; } source
Distance : 10

150
Tree	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; } toString
Distance : 10

151
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 13

152
Tree	{ return reportMatcher ( Any.ANY ) ; } {}
Code	{ return reportMatcher ( Any.ANY ) ; } {}
Distance : 11

153
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } -
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } -
Distance : 13

154
Tree	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 11

155
Tree	{ super ( Set ) ; }
Code	{ super ( Set ) ; }
Distance : 11

156
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 11

157
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

158
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } Class
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } Class
Distance : 13

159
Tree	{ super ( Set ) ; } array
Code	{ super ( Set ) ; } array
Distance : 12

160
Tree	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; }
Distance : 9

161
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

162
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

163
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; Set = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; Set = true ; }
Distance : 11

164
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Set = true ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Set = true ; }
Distance : 11

165
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = Set ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = Set ; }
Distance : 12

166
Tree	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; }
Distance : 9

167
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Set = Set ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Set = Set ; }
Distance : 12

168
Tree	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; }
Distance : 11

169
Tree	{ super ( Set ) ; returnSet ( Any.ANY ) . returnSet () ; }
Code	{ super ( Set ) ; returnSet ( Any.ANY ) . returnSet () ; }
Distance : 9

170
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } Class
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } Class
Distance : 11

171
Tree	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; } Class
Code	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; } Class
Distance : 12

172
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; Set = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; Set = false ; }
Distance : 11

173
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Set = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Set = false ; }
Distance : 11

174
Tree	{ return ( Set ) reportMatcher () ; } f
Code	{ return ( Set ) reportMatcher () ; } f
Distance : 10

175
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = Set ; } toString
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = Set ; } toString
Distance : 13

176
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } T
Code	{ reportMatcher ( Any.ANY ) ; return false ; } T
Distance : 12

177
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } {}
Distance : 12

178
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

179
Tree	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . returnSet () ; }
Code	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . returnSet () ; }
Distance : 8

180
Tree	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; } Test
Code	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; } Test
Distance : 12

181
Tree	{ return ( Set ) reportMatcher () ; } {}
Code	{ return ( Set ) reportMatcher () ; } {}
Distance : 10

182
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

183
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 7

184
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

185
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 14

186
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 14

187
Tree	{ super ( Set ) ; returnSet ( Any.ANY ) ; initializeRegistry }
Code	{ super ( Set ) ; returnSet ( Any.ANY ) ; initializeRegistry }
Distance : 13

188
Tree	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; } -
Code	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; } -
Distance : 12

189
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

190
Tree	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; } ParamChecks
Distance : 12

191
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 11

192
Tree	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . returnSet () ; } options
Code	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . returnSet () ; } options
Distance : 9

193
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

194
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

195
Tree	{ super ( Set ) ; returnSet ( Any.ANY ) ; setTolerance }
Code	{ super ( Set ) ; returnSet ( Any.ANY ) ; setTolerance }
Distance : 13

196
Tree	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . reportMatcher () ; }
Distance : 9

197
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) . returnSet () ; } options
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) . returnSet () ; } options
Distance : 10

198
Tree	{ super ( Set ) ; } class
Code	{ super ( Set ) ; } class
Distance : 12

199
Tree	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . returnSet () ; } T
Code	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . returnSet () ; } T
Distance : 9

========================================================================


========================================================================
Example Number: 93
Parent Code is: 
{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anyList () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=List})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 9
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	{ super ( List . anyList ( List ) ) ; anyList () ; }
Code	{ super ( List . anyList ( List ) ) ; anyList () ; }
Distance : 10

1
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return super(); ; }
Distance : 9

2
Tree	{ return ( List ) reportMatcher ( List ) . anyList () ; }
Code	{ return ( List ) reportMatcher ( List ) . anyList () ; }
Distance : 8

3
Tree	{ return ( List ) returnList ( List ) ; }
Code	{ return ( List ) returnList ( List ) ; }
Distance : 7

4
Tree	{ return ( List ) reportMatcher ( List . returnList () ) ; }
Code	{ return ( List ) reportMatcher ( List . returnList () ) ; }
Distance : 9

5
Tree	{ reportMatcher () ; return default: ; }
Code	{ reportMatcher () ; return default: ; }
Distance : 5

6
Tree	{ anyList () ; return super(); ; }
Code	{ anyList () ; return super(); ; }
Distance : 4

7
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return continue; ; }
Distance : 9

8
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return break; ; }
Distance : 9

9
Tree	{ return ( List ) this . List . anyList () ; }
Code	{ return ( List ) this . List . anyList () ; }
Distance : 7

10
Tree	{ return ( List ) returnList ( List ) . anyList () ; }
Code	{ return ( List ) returnList ( List ) . anyList () ; }
Distance : 8

11
Tree	{ super ( List . returnList ( List ) ) ; reportMatcher () ; }
Code	{ super ( List . returnList ( List ) ) ; reportMatcher () ; }
Distance : 11

12
Tree	{ return ( List ) anyList ( List . returnList () ) ; }
Code	{ return ( List ) anyList ( List . returnList () ) ; }
Distance : 8

13
Tree	{ super ( List . anyList ( List ) ) ; returnList () ; }
Code	{ super ( List . anyList ( List ) ) ; returnList () ; }
Distance : 10

14
Tree	{ return ( List ) List . reportMatcher ( List ) ; }
Code	{ return ( List ) List . reportMatcher ( List ) ; }
Distance : 9

15
Tree	{ return ( List ) returnList ( List . reportMatcher () ) ; }
Code	{ return ( List ) returnList ( List . reportMatcher () ) ; }
Distance : 9

16
Tree	{ return ( List ) anyList ( Any.ANY ) . reportMatcher ( List ) ; }
Code	{ return ( List ) anyList ( Any.ANY ) . reportMatcher ( List ) ; }
Distance : 11

17
Tree	{ super ( List . anyList ( List ) ) ; reportMatcher () ; }
Code	{ super ( List . anyList ( List ) ) ; reportMatcher () ; }
Distance : 10

18
Tree	{ return ( List ) anyList ( List ) . reportMatcher () ; }
Code	{ return ( List ) anyList ( List ) . reportMatcher () ; }
Distance : 8

19
Tree	{ return ( List ) reportMatcher () ; } ParamChecks
Code	{ return ( List ) reportMatcher () ; } ParamChecks
Distance : 5

20
Tree	{ return reportMatcher () ; } Preconditions
Code	{ return reportMatcher () ; } Preconditions
Distance : 2

21
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } p
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } p
Distance : 8

22
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } toString
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } toString
Distance : 8

23
Tree	{ return reportMatcher () ; } p
Code	{ return reportMatcher () ; } p
Distance : 2

24
Tree	{ return ( List ) reportMatcher ( List ) ; } toString
Code	{ return ( List ) reportMatcher ( List ) ; } toString
Distance : 8

25
Tree	{ return ( List ) reportMatcher () ; } &&
Code	{ return ( List ) reportMatcher () ; } &&
Distance : 5

26
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . anyList ( List ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . anyList ( List ) ; }
Distance : 11

27
Tree	{ return ( List ) List . anyList ( List ) ; } toString
Code	{ return ( List ) List . anyList ( List ) ; } toString
Distance : 9

28
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return return; ; }
Distance : 9

29
Tree	{ returnList ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ returnList ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 9

30
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 7

31
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . anyList () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . anyList () ; }
Distance : 8

32
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 7

33
Tree	{ return ( List ) returnList ( Any.ANY ) ; }
Code	{ return ( List ) returnList ( Any.ANY ) ; }
Distance : 7

34
Tree	{ anyList ( Any.ANY ) ; return null ; }
Code	{ anyList ( Any.ANY ) ; return null ; }
Distance : 7

35
Tree	{ return ( List ) returnList () ; }
Code	{ return ( List ) returnList () ; }
Distance : 4

36
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 7

37
Tree	{ reportMatcher () ; return super(); ; }
Code	{ reportMatcher () ; return super(); ; }
Distance : 5

38
Tree	{ return ( List ) anyList () ; }
Code	{ return ( List ) anyList () ; }
Distance : 3

39
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 2

40
Tree	{ return ( List ) reportMatcher ( List ) ; }
Code	{ return ( List ) reportMatcher ( List ) ; }
Distance : 7

41
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 2

42
Tree	{ reportMatcher () ; return return; ; }
Code	{ reportMatcher () ; return return; ; }
Distance : 5

43
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 7

44
Tree	{ super ( List ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( List ) ; reportMatcher ( Any.ANY ) ; }
Distance : 9

45
Tree	{ anyList ( Any.ANY ) ; return return; ; }
Code	{ anyList ( Any.ANY ) ; return return; ; }
Distance : 7

46
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 2

47
Tree	{ reportMatcher () ; return continue; ; }
Code	{ reportMatcher () ; return continue; ; }
Distance : 5

48
Tree	{ anyList ( Any.ANY ) ; return super(); ; }
Code	{ anyList ( Any.ANY ) ; return super(); ; }
Distance : 7

49
Tree	{ reportMatcher () ; return break; ; }
Code	{ reportMatcher () ; return break; ; }
Distance : 5

50
Tree	{ return ( List ) anyList ( Any.ANY ) . returnList () ; }
Code	{ return ( List ) anyList ( Any.ANY ) . returnList () ; }
Distance : 8

51
Tree	{ anyList ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ anyList ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 9

52
Tree	{ return ( List ) reportMatcher ( List ) . returnList () ; }
Code	{ return ( List ) reportMatcher ( List ) . returnList () ; }
Distance : 9

53
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 2

54
Tree	{ return ( List ) returnList ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( List ) returnList ( Any.ANY ) . reportMatcher () ; }
Distance : 9

55
Tree	{ return ( List ) anyList ( Any.ANY ) . anyList () ; }
Code	{ return ( List ) anyList ( Any.ANY ) . anyList () ; }
Distance : 8

56
Tree	{ super ( List . reportMatcher ( List ) ) ; anyList () ; } wanted
Code	{ super ( List . reportMatcher ( List ) ) ; anyList () ; } wanted
Distance : 11

57
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

58
Tree	{ return List ; } mock
Code	{ return List ; } mock
Distance : 3

59
Tree	{ return reportMatcher ( Any.ANY ) ; } {}
Code	{ return reportMatcher ( Any.ANY ) ; } {}
Distance : 5

60
Tree	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 5

61
Tree	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 5

62
Tree	{ return reportMatcher ( Any.ANY ) ; } &&
Code	{ return reportMatcher ( Any.ANY ) ; } &&
Distance : 5

63
Tree	{ super ( List ) ; anyList ( Any.ANY ) ; } Class
Code	{ super ( List ) ; anyList ( Any.ANY ) ; } Class
Distance : 9

64
Tree	{ super ( List ) ; anyList ( Any.ANY ) ; } ParamChecks
Code	{ super ( List ) ; anyList ( Any.ANY ) ; } ParamChecks
Distance : 9

65
Tree	{ return ( List ) List . anyList ( List ) ; } ParamChecks
Code	{ return ( List ) List . anyList ( List ) ; } ParamChecks
Distance : 9

66
Tree	{ super ( List ) ; anyList ( Any.ANY ) ; } Preconditions
Code	{ super ( List ) ; anyList ( Any.ANY ) ; } Preconditions
Distance : 9

67
Tree	{ super ( List ) ; anyList ( Any.ANY ) ; } &&
Code	{ super ( List ) ; anyList ( Any.ANY ) ; } &&
Distance : 9

68
Tree	{ return ( List ) this . List . anyList () ; } Class
Code	{ return ( List ) this . List . anyList () ; } Class
Distance : 8

69
Tree	{ return ( List ) this . List . anyList () ; } {}
Code	{ return ( List ) this . List . anyList () ; } {}
Distance : 8

70
Tree	{ return ( List ) this . List . anyList () ; } toString
Code	{ return ( List ) this . List . anyList () ; } toString
Distance : 8

71
Tree	{ return ( List ) this . List . anyList () ; } p
Code	{ return ( List ) this . List . anyList () ; } p
Distance : 8

72
Tree	{ return reportMatcher ( Any.ANY ) ; } toString
Code	{ return reportMatcher ( Any.ANY ) ; } toString
Distance : 5

73
Tree	{ return List ; } MathRuntimeException
Code	{ return List ; } MathRuntimeException
Distance : 3

74
Tree	{ return ( List ) List . anyList ( List ) ; } Preconditions
Code	{ return ( List ) List . anyList ( List ) ; } Preconditions
Distance : 9

75
Tree	{ return List ; } Override
Code	{ return List ; } Override
Distance : 3

76
Tree	{ return STRING_CONSTANT ; } Override
Code	{ return STRING_CONSTANT ; } Override
Distance : 3

77
Tree	{ return STRING_CONSTANT ; } MathRuntimeException
Code	{ return STRING_CONSTANT ; } MathRuntimeException
Distance : 3

78
Tree	{ return STRING_CONSTANT ; } mock
Code	{ return STRING_CONSTANT ; } mock
Distance : 3

79
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 3

80
Tree	{ return List ; } array
Code	{ return List ; } array
Distance : 3

81
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 3

82
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 3

83
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } wanted
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } wanted
Distance : 10

84
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList ( List ) ; } wanted
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList ( List ) ; } wanted
Distance : 13

85
Tree	{ return List ; } f
Code	{ return List ; } f
Distance : 3

86
Tree	{ return ( List ) List . anyList ( List ) ; } &&
Code	{ return ( List ) List . anyList ( List ) ; } &&
Distance : 9

87
Tree	{ return List ; } class
Code	{ return List ; } class
Distance : 3

88
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 3

89
Tree	{ return reportMatcher ( Any.ANY ) ; } p
Code	{ return reportMatcher ( Any.ANY ) ; } p
Distance : 5

90
Tree	{ super ( List . reportMatcher ( List ) ) ; anyList () ; }
Code	{ super ( List . reportMatcher ( List ) ) ; anyList () ; }
Distance : 10

91
Tree	{ return ( List ) this . List . returnList () ; }
Code	{ return ( List ) this . List . returnList () ; }
Distance : 8

92
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 1

93
Tree	{ return ( List ) reportMatcher ( List ) ; } p
Code	{ return ( List ) reportMatcher ( List ) ; } p
Distance : 8

94
Tree	{ anyList ( Any.ANY , Any.ANY ) ; return return; ; }
Code	{ anyList ( Any.ANY , Any.ANY ) ; return return; ; }
Distance : 9

95
Tree	{ return List ; } [
Code	{ return List ; } [
Distance : 3

96
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; }
Distance : 7

97
Tree	{ return ( List ) reportMatcher ( List . reportMatcher () ) ; }
Code	{ return ( List ) reportMatcher ( List . reportMatcher () ) ; }
Distance : 9

98
Tree	{ return ( List ) reportMatcher () ; }
Code	{ return ( List ) reportMatcher () ; }
Distance : 4

99
Tree	{ return null ; }
Code	{ return null ; }
Distance : 2

100
Tree	{ return ( List ) anyList ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( List ) anyList ( Any.ANY ) . reportMatcher () ; }
Distance : 8

101
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . reportMatcher ( List ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . reportMatcher ( List ) ; }
Distance : 12

102
Tree	{ return ( List ) returnList ( List . returnList () ) ; }
Code	{ return ( List ) returnList ( List . returnList () ) ; }
Distance : 9

103
Tree	{ return ( List ) reportMatcher ( List ) ; } ParamChecks
Code	{ return ( List ) reportMatcher ( List ) ; } ParamChecks
Distance : 8

104
Tree	{ return List ; }
Code	{ return List ; }
Distance : 2

105
Tree	{ return ( List ) reportMatcher ( List ) ; } Preconditions
Code	{ return ( List ) reportMatcher ( List ) ; } Preconditions
Distance : 8

106
Tree	{ returnList ( Any.ANY ) ; return null ; }
Code	{ returnList ( Any.ANY ) ; return null ; }
Distance : 7

107
Tree	{ reportMatcher () ; return null ; }
Code	{ reportMatcher () ; return null ; }
Distance : 5

108
Tree	{ return ( List ) returnList ( List ) . returnList () ; }
Code	{ return ( List ) returnList ( List ) . returnList () ; }
Distance : 9

109
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 4

110
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

111
Tree	{ return ( List ) List . anyList ( List ) ; } p
Code	{ return ( List ) List . anyList ( List ) ; } p
Distance : 9

112
Tree	{ return List ; } -
Code	{ return List ; } -
Distance : 3

113
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 5

114
Tree	{ return returnList () ; }
Code	{ return returnList () ; }
Distance : 1

115
Tree	{ anyList ( Any.ANY , Any.ANY ) ; return super(); ; }
Code	{ anyList ( Any.ANY , Any.ANY ) ; return super(); ; }
Distance : 9

116
Tree	{ return ( List ) List . anyList ( List ) ; }
Code	{ return ( List ) List . anyList ( List ) ; }
Distance : 8

117
Tree	{ return anyList () ; }
Code	{ return anyList () ; }
Distance : 0

118
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 2

119
Tree	{ return ( List ) reportMatcher ( List ) . reportMatcher () ; }
Code	{ return ( List ) reportMatcher ( List ) . reportMatcher () ; }
Distance : 9

120
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 2

121
Tree	{ return ( List ) List . returnList ( List ) ; }
Code	{ return ( List ) List . returnList ( List ) ; }
Distance : 9

122
Tree	{ return ( List ) reportMatcher ( List ) ; } &&
Code	{ return ( List ) reportMatcher ( List ) ; } &&
Distance : 8

123
Tree	{ return ( List ) this . List . anyList () ; } ParamChecks
Code	{ return ( List ) this . List . anyList () ; } ParamChecks
Distance : 8

124
Tree	{ return ( List ) anyList ( List ) ; }
Code	{ return ( List ) anyList ( List ) ; }
Distance : 6

125
Tree	{ return ( List ) returnList ( Any.ANY ) . anyList ( List ) ; }
Code	{ return ( List ) returnList ( Any.ANY ) . anyList ( List ) ; }
Distance : 11

126
Tree	{ return ( List ) reportMatcher () ; } Class
Code	{ return ( List ) reportMatcher () ; } Class
Distance : 5

127
Tree	{ return reportMatcher () ; } toString
Code	{ return reportMatcher () ; } toString
Distance : 2

128
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 7

129
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 9

130
Tree	{ return ( List ) reportMatcher () ; } {}
Code	{ return ( List ) reportMatcher () ; } {}
Distance : 5

131
Tree	{ anyList () ; return return; ; }
Code	{ anyList () ; return return; ; }
Distance : 4

132
Tree	{ super ( List . returnList ( List ) ) ; anyList () ; }
Code	{ super ( List . returnList ( List ) ) ; anyList () ; }
Distance : 10

133
Tree	{ return ( List ) returnList ( Any.ANY ) . returnList () ; }
Code	{ return ( List ) returnList ( Any.ANY ) . returnList () ; }
Distance : 9

134
Tree	{ super ( List ) ; anyList ( Any.ANY ) ; }
Code	{ super ( List ) ; anyList ( Any.ANY ) ; }
Distance : 8

135
Tree	{ return ( List ) anyList ( List ) . returnList () ; }
Code	{ return ( List ) anyList ( List ) . returnList () ; }
Distance : 8

136
Tree	{ super ( List . returnList ( List ) ) ; returnList () ; }
Code	{ super ( List . returnList ( List ) ) ; returnList () ; }
Distance : 11

137
Tree	{ return ( List ) anyList ( Any.ANY ) . returnList ( List ) ; }
Code	{ return ( List ) anyList ( Any.ANY ) . returnList ( List ) ; }
Distance : 11

138
Tree	{ return ( List ) this . List . anyList () ; } Preconditions
Code	{ return ( List ) this . List . anyList () ; } Preconditions
Distance : 8

139
Tree	{ return ( List ) returnList ( List . anyList () ) ; }
Code	{ return ( List ) returnList ( List . anyList () ) ; }
Distance : 8

140
Tree	{ super ( List . reportMatcher ( List ) ) ; returnList () ; }
Code	{ super ( List . reportMatcher ( List ) ) ; returnList () ; }
Distance : 11

141
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; }
Code	{ super ( List ) ; returnList ( Any.ANY ) ; }
Distance : 9

142
Tree	{ return ( List ) reportMatcher () ; } toString
Code	{ return ( List ) reportMatcher () ; } toString
Distance : 5

143
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

144
Tree	{ return reportMatcher () ; } {}
Code	{ return reportMatcher () ; } {}
Distance : 2

145
Tree	{ anyList () ; return null ; }
Code	{ anyList () ; return null ; }
Distance : 4

146
Tree	{ return reportMatcher () ; } Class
Code	{ return reportMatcher () ; } Class
Distance : 2

147
Tree	{ return ( List ) List . anyList ( List ) ; } Class
Code	{ return ( List ) List . anyList ( List ) ; } Class
Distance : 9

148
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return default: ; }
Distance : 9

149
Tree	{ return ( List ) anyList ( Any.ANY ) ; }
Code	{ return ( List ) anyList ( Any.ANY ) ; }
Distance : 6

150
Tree	{ return ( List ) reportMatcher () ; } p
Code	{ return ( List ) reportMatcher () ; } p
Distance : 5

151
Tree	{ return ( List ) List . reportMatcher () ; }
Code	{ return ( List ) List . reportMatcher () ; }
Distance : 6

152
Tree	{ return ( List ) returnList ( Any.ANY ) . returnList ( List ) ; }
Code	{ return ( List ) returnList ( Any.ANY ) . returnList ( List ) ; }
Distance : 12

153
Tree	{ return ( List ) List . anyList ( List ) ; } {}
Code	{ return ( List ) List . anyList ( List ) ; } {}
Distance : 9

154
Tree	{ return ( List ) this . List . reportMatcher () ; }
Code	{ return ( List ) this . List . reportMatcher () ; }
Distance : 8

155
Tree	{ return ( List ) reportMatcher ( List ) . returnList () ; } wanted
Code	{ return ( List ) reportMatcher ( List ) . returnList () ; } wanted
Distance : 10

156
Tree	{ return ( List ) returnList ( Any.ANY ) . reportMatcher ( List ) ; }
Code	{ return ( List ) returnList ( Any.ANY ) . reportMatcher ( List ) ; }
Distance : 12

157
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } {}
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } {}
Distance : 8

158
Tree	{ return ( List ) List . anyList () ; } Class
Code	{ return ( List ) List . anyList () ; } Class
Distance : 6

159
Tree	{ return ( List ) returnList ( Any.ANY ) . anyList () ; }
Code	{ return ( List ) returnList ( Any.ANY ) . anyList () ; }
Distance : 8

160
Tree	{ return ( List ) List . anyList () ; }
Code	{ return ( List ) List . anyList () ; }
Distance : 5

161
Tree	{ return ( List ) List . returnList () ; }
Code	{ return ( List ) List . returnList () ; }
Distance : 6

162
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 8

163
Tree	{ return ( List ) List . anyList () ; } {}
Code	{ return ( List ) List . anyList () ; } {}
Distance : 6

164
Tree	{ super ( List . reportMatcher ( List ) ) ; reportMatcher () ; }
Code	{ super ( List . reportMatcher ( List ) ) ; reportMatcher () ; }
Distance : 11

165
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } Class
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } Class
Distance : 8

166
Tree	{ return ( List ) this . List . anyList () ; } &&
Code	{ return ( List ) this . List . anyList () ; } &&
Distance : 8

167
Tree	{ return reportMatcher () ; } &&
Code	{ return reportMatcher () ; } &&
Distance : 2

168
Tree	{ super ( List ) ; anyList ( Any.ANY ) ; } {}
Code	{ super ( List ) ; anyList ( Any.ANY ) ; } {}
Distance : 9

169
Tree	{ return ( List ) anyList ( Any.ANY ) . anyList ( List ) ; }
Code	{ return ( List ) anyList ( Any.ANY ) . anyList ( List ) ; }
Distance : 11

170
Tree	{ return ( List ) anyList ( List . anyList () ) ; }
Code	{ return ( List ) anyList ( List . anyList () ) ; }
Distance : 8

171
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 3

172
Tree	{ return ( List ) anyList ( List ) . anyList () ; }
Code	{ return ( List ) anyList ( List ) . anyList () ; }
Distance : 8

173
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } &&
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } &&
Distance : 8

174
Tree	{ return returnList ( Any.ANY ) ; }
Code	{ return returnList ( Any.ANY ) ; }
Distance : 4

175
Tree	{ return anyList ( Any.ANY ) ; }
Code	{ return anyList ( Any.ANY ) ; }
Distance : 3

176
Tree	{ return ( List ) reportMatcher () ; } Preconditions
Code	{ return ( List ) reportMatcher () ; } Preconditions
Distance : 5

177
Tree	{ return reportMatcher () ; } ParamChecks
Code	{ return reportMatcher () ; } ParamChecks
Distance : 2

178
Tree	{ return STRING_CONSTANT ; } f
Code	{ return STRING_CONSTANT ; } f
Distance : 3

179
Tree	{ return STRING_CONSTANT ; } [
Code	{ return STRING_CONSTANT ; } [
Distance : 3

180
Tree	{ returnList () ; return null ; }
Code	{ returnList () ; return null ; }
Distance : 5

181
Tree	{ return ( List ) List . anyList () ; } toString
Code	{ return ( List ) List . anyList () ; } toString
Distance : 6

182
Tree	{ return ( List ) List . anyList () ; } p
Code	{ return ( List ) List . anyList () ; } p
Distance : 6

183
Tree	{ return ( List ) List . anyList () ; } ParamChecks
Code	{ return ( List ) List . anyList () ; } ParamChecks
Distance : 6

184
Tree	{ super ( List ) ; anyList ( Any.ANY ) ; } toString
Code	{ super ( List ) ; anyList ( Any.ANY ) ; } toString
Distance : 9

185
Tree	{ return ( List ) List . anyList () ; } Preconditions
Code	{ return ( List ) List . anyList () ; } Preconditions
Distance : 6

186
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 3

187
Tree	{ return ( List ) List . anyList () ; } &&
Code	{ return ( List ) List . anyList () ; } &&
Distance : 6

188
Tree	{ return ( List ) reportMatcher ( List ) ; } Class
Code	{ return ( List ) reportMatcher ( List ) ; } Class
Distance : 8

189
Tree	{ return List ; } notifyListeners
Code	{ return List ; } notifyListeners
Distance : 3

190
Tree	{ return ( List ) anyList ( List . reportMatcher () ) ; }
Code	{ return ( List ) anyList ( List . reportMatcher () ) ; }
Distance : 8

191
Tree	{ return ( List ) reportMatcher ( List ) ; } {}
Code	{ return ( List ) reportMatcher ( List ) ; } {}
Distance : 8

192
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList ( List ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList ( List ) ; }
Distance : 12

193
Tree	{ return ( List ) returnList ( List ) . reportMatcher () ; }
Code	{ return ( List ) returnList ( List ) . reportMatcher () ; }
Distance : 9

194
Tree	{ return ( List ) reportMatcher ( List . anyList () ) ; }
Code	{ return ( List ) reportMatcher ( List . anyList () ) ; }
Distance : 8

195
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 8

196
Tree	{ super ( List ) ; anyList ( Any.ANY ) ; } p
Code	{ super ( List ) ; anyList ( Any.ANY ) ; } p
Distance : 9

197
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 3

198
Tree	{ return ( List ) reportMatcher ( List . anyList () ) ; } wanted
Code	{ return ( List ) reportMatcher ( List . anyList () ) ; } wanted
Distance : 9

199
Tree	{ return STRING_CONSTANT ; } -
Code	{ return STRING_CONSTANT ; } -
Distance : 3

========================================================================


========================================================================
Example Number: 94
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( List . class ) ) . returnList () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=List})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return this . List ; } Override
Code	{ return this . List ; } Override
Distance : 13

1
Tree	{ return ( List ) returnList ( Any.ANY ) ; } {}
Code	{ return ( List ) returnList ( Any.ANY ) ; } {}
Distance : 11

2
Tree	{ return ( List ) returnList ( Any.ANY ) ; } f
Code	{ return ( List ) returnList ( Any.ANY ) ; } f
Distance : 11

3
Tree	{ return ( List ) returnList ( Any.ANY ) ; } ParamChecks
Code	{ return ( List ) returnList ( Any.ANY ) ; } ParamChecks
Distance : 11

4
Tree	{ return ( List ) returnList ( Any.ANY ) ; } -
Code	{ return ( List ) returnList ( Any.ANY ) ; } -
Distance : 11

5
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } source
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } source
Distance : 8

6
Tree	{ return ( List ) returnList ( Any.ANY ) ; } Class
Code	{ return ( List ) returnList ( Any.ANY ) ; } Class
Distance : 11

7
Tree	{ return ( List ) returnList ( Any.ANY ) ; } MathRuntimeException
Code	{ return ( List ) returnList ( Any.ANY ) ; } MathRuntimeException
Distance : 11

8
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } &&
Distance : 8

9
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } T
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } T
Distance : 8

10
Tree	{ return ( List ) returnList ( Any.ANY ) . returnList () ; } T
Code	{ return ( List ) returnList ( Any.ANY ) . returnList () ; } T
Distance : 9

11
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } toString
Distance : 8

12
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; } Test
Code	{ super ( List ) ; returnList ( Any.ANY ) ; } Test
Distance : 13

13
Tree	{ returnList ( Any.ANY ) ; List = Any.ANY . reportMatcher () ; }
Code	{ returnList ( Any.ANY ) ; List = Any.ANY . reportMatcher () ; }
Distance : 10

14
Tree	{ returnList ( Any.ANY ) . reportMatcher () ; List = false ; }
Code	{ returnList ( Any.ANY ) . reportMatcher () ; List = false ; }
Distance : 12

15
Tree	{ returnList ( Any.ANY ) ; return break; ; }
Code	{ returnList ( Any.ANY ) ; return break; ; }
Distance : 12

16
Tree	{ return ( List ) returnList ( Any.ANY ) . returnList () ; } p
Code	{ return ( List ) returnList ( Any.ANY ) . returnList () ; } p
Distance : 9

17
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; enableParseTypeInfo }
Code	{ super ( List ) ; returnList ( Any.ANY ) ; enableParseTypeInfo }
Distance : 13

18
Tree	{ return ( List ) returnList ( Any.ANY ) . returnList () ; } &&
Code	{ return ( List ) returnList ( Any.ANY ) . returnList () ; } &&
Distance : 9

19
Tree	{ return ( List ) returnList ( Any.ANY ) . returnList () ; } options
Code	{ return ( List ) returnList ( Any.ANY ) . returnList () ; } options
Distance : 9

20
Tree	{ return this . List ; } [
Code	{ return this . List ; } [
Distance : 13

21
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Distance : 12

22
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 12

23
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 12

24
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Distance : 12

25
Tree	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; } toString
Code	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; } toString
Distance : 10

26
Tree	{ return ( List ) returnList ( Any.ANY ) . returnList () ; } source
Code	{ return ( List ) returnList ( Any.ANY ) . returnList () ; } source
Distance : 9

27
Tree	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; } source
Code	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; } source
Distance : 10

28
Tree	{ return this . List ; } class
Code	{ return this . List ; } class
Distance : 13

29
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; } {}
Code	{ super ( List ) ; returnList ( Any.ANY ) ; } {}
Distance : 13

30
Tree	{ return this . List ; } array
Code	{ return this . List ; } array
Distance : 13

31
Tree	{ return this . List ; } mock
Code	{ return this . List ; } mock
Distance : 13

32
Tree	{ return this . List ; } MathRuntimeException
Code	{ return this . List ; } MathRuntimeException
Distance : 13

33
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

34
Tree	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; } options
Code	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; } options
Distance : 10

35
Tree	{ return this . List ; } -
Code	{ return this . List ; } -
Distance : 13

36
Tree	{ return ( List ) returnList ( Any.ANY ) . returnList () ; } toString
Code	{ return ( List ) returnList ( Any.ANY ) . returnList () ; } toString
Distance : 9

37
Tree	{ reportMatcher ( Any.ANY ) ; List = Any.ANY . returnList () ; }
Code	{ reportMatcher ( Any.ANY ) ; List = Any.ANY . returnList () ; }
Distance : 8

38
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; getMethodProxy }
Code	{ super ( List ) ; returnList ( Any.ANY ) ; getMethodProxy }
Distance : 13

39
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

40
Tree	{ super ( List ) ; }
Code	{ super ( List ) ; }
Distance : 11

41
Tree	{ returnList ( Any.ANY ) ; return null ; }
Code	{ returnList ( Any.ANY ) ; return null ; }
Distance : 12

42
Tree	{ return this . List ; }
Code	{ return this . List ; }
Distance : 12

43
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

44
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

45
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

46
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

47
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

48
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

49
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

50
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

51
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

52
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

53
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 7

54
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

55
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; initializeRegistry }
Code	{ super ( List ) ; returnList ( Any.ANY ) ; initializeRegistry }
Distance : 13

56
Tree	{ returnList ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnList ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

57
Tree	{ return returnList ( Any.ANY ) . returnList () ; }
Code	{ return returnList ( Any.ANY ) . returnList () ; }
Distance : 8

58
Tree	{ return reportMatcher ( Any.ANY ) . < List > returnList () ; }
Code	{ return reportMatcher ( Any.ANY ) . < List > returnList () ; }
Distance : 8

59
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; makeStackTracesClean }
Code	{ super ( List ) ; returnList ( Any.ANY ) ; makeStackTracesClean }
Distance : 13

60
Tree	{ return returnList ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnList ( Any.ANY ) . reportMatcher () ; }
Distance : 9

61
Tree	{ returnList ( Any.ANY ) ; return super(); ; }
Code	{ returnList ( Any.ANY ) ; return super(); ; }
Distance : 12

62
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 8

63
Tree	{ super ( List ) ; reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ super ( List ) ; reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

64
Tree	{ returnList ( Any.ANY ) ; return true ; }
Code	{ returnList ( Any.ANY ) ; return true ; }
Distance : 12

65
Tree	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; }
Code	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; }
Distance : 9

66
Tree	{ super ( List ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( List ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

67
Tree	{ return ( List ) reportMatcher () ; }
Code	{ return ( List ) reportMatcher () ; }
Distance : 9

68
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; super }
Code	{ super ( List ) ; returnList ( Any.ANY ) ; super }
Distance : 13

69
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; }
Distance : 10

70
Tree	{ return ( List ) returnList () ; }
Code	{ return ( List ) returnList () ; }
Distance : 8

71
Tree	{ returnList ( Any.ANY ) ; return false ; }
Code	{ returnList ( Any.ANY ) ; return false ; }
Distance : 12

72
Tree	{ return ( List ) returnList ( Any.ANY ) ; }
Code	{ return ( List ) returnList ( Any.ANY ) ; }
Distance : 10

73
Tree	{ return reportMatcher ( Any.ANY ) . < List > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < List > reportMatcher () ; }
Distance : 9

74
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; } MathRuntimeException
Code	{ super ( List ) ; returnList ( Any.ANY ) ; } MathRuntimeException
Distance : 13

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

76
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; } f
Code	{ super ( List ) ; returnList ( Any.ANY ) ; } f
Distance : 13

77
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . List = List ; } T
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . List = List ; } T
Distance : 13

78
Tree	{ return ( List ) returnList () ; } Test
Code	{ return ( List ) returnList () ; } Test
Distance : 9

79
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 11

80
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 11

81
Tree	{ super ( List ) ; } -
Code	{ super ( List ) ; } -
Distance : 12

82
Tree	{ super ( List ) ; } [
Code	{ super ( List ) ; } [
Distance : 12

83
Tree	{ super ( List ) ; } f
Code	{ super ( List ) ; } f
Distance : 12

84
Tree	{ super ( List ) ; } Override
Code	{ super ( List ) ; } Override
Distance : 12

85
Tree	{ super ( List ) ; } MathRuntimeException
Code	{ super ( List ) ; } MathRuntimeException
Distance : 12

86
Tree	{ super ( List ) ; } mock
Code	{ super ( List ) ; } mock
Distance : 12

87
Tree	{ return reportMatcher ( Any.ANY ) . < List > reportMatcher () ; } options
Code	{ return reportMatcher ( Any.ANY ) . < List > reportMatcher () ; } options
Distance : 10

88
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 14

89
Tree	{ return reportMatcher ( Any.ANY ) . < List > reportMatcher () ; } p
Code	{ return reportMatcher ( Any.ANY ) . < List > reportMatcher () ; } p
Distance : 10

90
Tree	{ return reportMatcher ( Any.ANY ) . < List > reportMatcher () ; } T
Code	{ return reportMatcher ( Any.ANY ) . < List > reportMatcher () ; } T
Distance : 10

91
Tree	{ reportMatcher ( Any.ANY ) ; List = Any.ANY . returnList () ; } toString
Code	{ reportMatcher ( Any.ANY ) ; List = Any.ANY . returnList () ; } toString
Distance : 9

92
Tree	{ reportMatcher ( Any.ANY ) ; List = Any.ANY . returnList () ; } source
Code	{ reportMatcher ( Any.ANY ) ; List = Any.ANY . returnList () ; } source
Distance : 9

93
Tree	{ reportMatcher ( Any.ANY ) ; List = Any.ANY . returnList () ; } p
Code	{ reportMatcher ( Any.ANY ) ; List = Any.ANY . returnList () ; } p
Distance : 9

94
Tree	{ reportMatcher ( Any.ANY ) ; List = Any.ANY . returnList () ; } &&
Code	{ reportMatcher ( Any.ANY ) ; List = Any.ANY . returnList () ; } &&
Distance : 9

95
Tree	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 11

96
Tree	{ return reportMatcher ( Any.ANY ) ; } -
Code	{ return reportMatcher ( Any.ANY ) ; } -
Distance : 11

97
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

98
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

99
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; } ParamChecks
Code	{ super ( List ) ; returnList ( Any.ANY ) ; } ParamChecks
Distance : 13

100
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 14

101
Tree	{ return reportMatcher ( Any.ANY ) . < List > reportMatcher () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . < List > reportMatcher () ; } &&
Distance : 10

102
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . List = List ; } &&
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . List = List ; } &&
Distance : 13

103
Tree	{ super ( List ) ; } notifyListeners
Code	{ super ( List ) ; } notifyListeners
Distance : 12

104
Tree	{ return ( List ) returnList () ; } Class
Code	{ return ( List ) returnList () ; } Class
Distance : 9

105
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . List = List ; } options
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . List = List ; } options
Distance : 13

106
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } toString
Code	{ reportMatcher ( Any.ANY ) ; return false ; } toString
Distance : 12

107
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } source
Code	{ reportMatcher ( Any.ANY ) ; return false ; } source
Distance : 12

108
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } options
Code	{ reportMatcher ( Any.ANY ) ; return false ; } options
Distance : 12

109
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } p
Code	{ reportMatcher ( Any.ANY ) ; return false ; } p
Distance : 12

110
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return false ; } &&
Distance : 12

111
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

112
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

113
Tree	{ return ( List ) returnList () ; } -
Code	{ return ( List ) returnList () ; } -
Distance : 9

114
Tree	{ return ( List ) returnList () ; } Preconditions
Code	{ return ( List ) returnList () ; } Preconditions
Distance : 9

115
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

116
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

117
Tree	{ return ( List ) returnList () ; } MathRuntimeException
Code	{ return ( List ) returnList () ; } MathRuntimeException
Distance : 9

118
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; List = false ; } wanted
Code	{ reportMatcher ( Any.ANY ) . returnList () ; List = false ; } wanted
Distance : 12

119
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . List = List ; } source
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . List = List ; } source
Distance : 13

120
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . List = List ; } p
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . List = List ; } p
Distance : 13

121
Tree	{ return ( List ) returnList () ; } ParamChecks
Code	{ return ( List ) returnList () ; } ParamChecks
Distance : 9

122
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

123
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

124
Tree	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; }
Distance : 11

125
Tree	{ returnList ( Any.ANY ) . returnList () ; List = true ; }
Code	{ returnList ( Any.ANY ) . returnList () ; List = true ; }
Distance : 12

126
Tree	{ return returnList ( Any.ANY ) ; }
Code	{ return returnList ( Any.ANY ) ; }
Distance : 11

127
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . List = List ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . List = List ; }
Distance : 12

128
Tree	{ return this . List ; } notifyListeners
Code	{ return this . List ; } notifyListeners
Distance : 13

129
Tree	{ returnList ( Any.ANY ) . reportMatcher () ; List = true ; }
Code	{ returnList ( Any.ANY ) . reportMatcher () ; List = true ; }
Distance : 12

130
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; }
Code	{ super ( List ) ; returnList ( Any.ANY ) ; }
Distance : 12

131
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } {}
Distance : 12

132
Tree	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; } T
Code	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; } T
Distance : 10

133
Tree	{ returnList ( Any.ANY ) . returnList () ; this . List = List ; }
Code	{ returnList ( Any.ANY ) . returnList () ; this . List = List ; }
Distance : 13

134
Tree	{ returnList ( Any.ANY ) . reportMatcher () ; this . List = List ; }
Code	{ returnList ( Any.ANY ) . reportMatcher () ; this . List = List ; }
Distance : 13

135
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } options
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } options
Distance : 8

136
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } f
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } f
Distance : 12

137
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } p
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } p
Distance : 8

138
Tree	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; } &&
Code	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; } &&
Distance : 10

139
Tree	{ return reportMatcher ( Any.ANY ) . < List > reportMatcher () ; } source
Code	{ return reportMatcher ( Any.ANY ) . < List > reportMatcher () ; } source
Distance : 10

140
Tree	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 11

141
Tree	{ return reportMatcher ( Any.ANY ) . < List > reportMatcher () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . < List > reportMatcher () ; } toString
Distance : 10

142
Tree	{ return reportMatcher ( Any.ANY ) ; } f
Code	{ return reportMatcher ( Any.ANY ) ; } f
Distance : 11

143
Tree	{ return ( List ) returnList ( Any.ANY ) ; } Test
Code	{ return ( List ) returnList ( Any.ANY ) ; } Test
Distance : 11

144
Tree	{ super ( List ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( List ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

145
Tree	{ reportMatcher ( Any.ANY ) ; List = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; List = Any.ANY . reportMatcher () ; }
Distance : 9

146
Tree	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; } f
Code	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; } f
Distance : 12

147
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; List = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; List = true ; }
Distance : 11

148
Tree	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; } p
Code	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; } p
Distance : 10

149
Tree	{ return returnList ( Any.ANY ) . < List > reportMatcher () ; }
Code	{ return returnList ( Any.ANY ) . < List > reportMatcher () ; }
Distance : 10

150
Tree	{ returnList ( Any.ANY ) ; this . List = Any.ANY ; }
Code	{ returnList ( Any.ANY ) ; this . List = Any.ANY ; }
Distance : 12

151
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; List = true ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; List = true ; }
Distance : 11

152
Tree	{ returnList ( Any.ANY ) . returnList () ; List = false ; }
Code	{ returnList ( Any.ANY ) . returnList () ; List = false ; }
Distance : 12

153
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ParamChecks
Distance : 12

154
Tree	{ returnList ( Any.ANY ) ; List = Any.ANY . returnList () ; }
Code	{ returnList ( Any.ANY ) ; List = Any.ANY . returnList () ; }
Distance : 9

155
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; List = false ; } Math
Code	{ reportMatcher ( Any.ANY ) . returnList () ; List = false ; } Math
Distance : 12

156
Tree	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; } {}
Code	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; } {}
Distance : 12

157
Tree	{ return reportMatcher ( Any.ANY ) ; } {}
Code	{ return reportMatcher ( Any.ANY ) ; } {}
Distance : 11

158
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; } Preconditions
Code	{ super ( List ) ; returnList ( Any.ANY ) ; } Preconditions
Distance : 13

159
Tree	{ return ( List ) returnList ( Any.ANY ) . returnList () ; }
Code	{ return ( List ) returnList ( Any.ANY ) . returnList () ; }
Distance : 8

160
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; } Class
Code	{ super ( List ) ; returnList ( Any.ANY ) ; } Class
Distance : 13

161
Tree	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; } MathRuntimeException
Distance : 12

162
Tree	{ return returnList ( Any.ANY ) . < List > returnList () ; }
Code	{ return returnList ( Any.ANY ) . < List > returnList () ; }
Distance : 9

163
Tree	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 11

164
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; } -
Code	{ super ( List ) ; returnList ( Any.ANY ) ; } -
Distance : 13

165
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . List = List ; } toString
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . List = List ; } toString
Distance : 13

166
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; setCostAccuracy }
Code	{ super ( List ) ; returnList ( Any.ANY ) ; setCostAccuracy }
Distance : 13

167
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . List = List ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . List = List ; }
Distance : 12

168
Tree	{ return ( List ) returnList () ; } f
Code	{ return ( List ) returnList () ; } f
Distance : 9

169
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; setTolerance }
Code	{ super ( List ) ; returnList ( Any.ANY ) ; setTolerance }
Distance : 13

170
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } T
Code	{ reportMatcher ( Any.ANY ) ; return false ; } T
Distance : 12

171
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

172
Tree	{ return ( List ) returnList ( Any.ANY ) ; } Preconditions
Code	{ return ( List ) returnList ( Any.ANY ) ; } Preconditions
Distance : 11

173
Tree	{ super ( List ) ; reportMatcher ( Any.ANY ) ; makeStackTracesClean }
Code	{ super ( List ) ; reportMatcher ( Any.ANY ) ; makeStackTracesClean }
Distance : 13

174
Tree	{ super ( List ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( List ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

175
Tree	{ return ( List ) returnList () ; } {}
Code	{ return ( List ) returnList () ; } {}
Distance : 9

176
Tree	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; } Preconditions
Distance : 12

177
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } -
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } -
Distance : 12

178
Tree	{ super ( List ) ; } array
Code	{ super ( List ) ; } array
Distance : 12

179
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; ServletUtilities.tempOneTimeFilePrefix }
Code	{ super ( List ) ; returnList ( Any.ANY ) ; ServletUtilities.tempOneTimeFilePrefix }
Distance : 13

180
Tree	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; } Class
Code	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; } Class
Distance : 12

181
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; List = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; List = false ; }
Distance : 11

182
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 11

183
Tree	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; } Test
Code	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; } Test
Distance : 12

184
Tree	{ reportMatcher ( Any.ANY ) ; List = Any.ANY . returnList () ; } options
Code	{ reportMatcher ( Any.ANY ) ; List = Any.ANY . returnList () ; } options
Distance : 9

185
Tree	{ return ( List ) returnList ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( List ) returnList ( Any.ANY ) . reportMatcher () ; }
Distance : 9

186
Tree	{ super ( List ) ; returnList ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( List ) ; returnList ( Any.ANY ) . reportMatcher () ; }
Distance : 10

187
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 14

188
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 14

189
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

190
Tree	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; } -
Code	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; } -
Distance : 12

191
Tree	{ returnList ( Any.ANY ) ; return return; ; }
Code	{ returnList ( Any.ANY ) ; return return; ; }
Distance : 12

192
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

193
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

194
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; List = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; List = false ; }
Distance : 11

195
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

196
Tree	{ return this . List ; } f
Code	{ return this . List ; } f
Distance : 13

197
Tree	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; } ParamChecks
Distance : 12

198
Tree	{ super ( List ) ; } class
Code	{ super ( List ) ; } class
Distance : 12

199
Tree	{ reportMatcher ( Any.ANY ) ; List = Any.ANY . returnList () ; } T
Code	{ reportMatcher ( Any.ANY ) ; List = Any.ANY . returnList () ; } T
Distance : 9

========================================================================


========================================================================
Example Number: 95
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnString () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( String . class ) ) . returnString () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnString}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=String})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnString}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return this . String ; } MathRuntimeException
Code	{ return this . String ; } MathRuntimeException
Distance : 13

1
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) ; } Class
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) ; } Class
Distance : 13

2
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) ; } Test
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) ; } Test
Distance : 13

3
Tree	{ return ( String ) returnString ( Any.ANY ) ; } Preconditions
Code	{ return ( String ) returnString ( Any.ANY ) ; } Preconditions
Distance : 11

4
Tree	{ return ( String ) returnString ( Any.ANY ) ; } -
Code	{ return ( String ) returnString ( Any.ANY ) ; } -
Distance : 11

5
Tree	{ return ( String ) returnString ( Any.ANY ) ; } {}
Code	{ return ( String ) returnString ( Any.ANY ) ; } {}
Distance : 11

6
Tree	{ return ( String ) returnString ( Any.ANY ) . returnString () ; } options
Code	{ return ( String ) returnString ( Any.ANY ) . returnString () ; } options
Distance : 9

7
Tree	{ return ( String ) returnString ( Any.ANY ) ; } MathRuntimeException
Code	{ return ( String ) returnString ( Any.ANY ) ; } MathRuntimeException
Distance : 11

8
Tree	{ return ( String ) returnString ( Any.ANY ) ; } Class
Code	{ return ( String ) returnString ( Any.ANY ) ; } Class
Distance : 11

9
Tree	{ return this . String ; } notifyListeners
Code	{ return this . String ; } notifyListeners
Distance : 13

10
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } toString
Distance : 8

11
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } source
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } source
Distance : 8

12
Tree	{ return ( String ) returnString ( Any.ANY ) ; } Test
Code	{ return ( String ) returnString ( Any.ANY ) ; } Test
Distance : 11

13
Tree	{ returnString ( Any.ANY ) . reportMatcher () ; String = false ; }
Code	{ returnString ( Any.ANY ) . reportMatcher () ; String = false ; }
Distance : 12

14
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . String = String ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . String = String ; }
Distance : 12

15
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; }
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; }
Distance : 9

16
Tree	{ return ( String ) returnString ( Any.ANY ) . returnString () ; } p
Code	{ return ( String ) returnString ( Any.ANY ) . returnString () ; } p
Distance : 9

17
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; String = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; String = false ; }
Distance : 11

18
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } {}
Distance : 12

19
Tree	{ return ( String ) returnString ( Any.ANY ) . returnString () ; } toString
Code	{ return ( String ) returnString ( Any.ANY ) . returnString () ; } toString
Distance : 9

20
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Distance : 12

21
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } -
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } -
Distance : 12

22
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 12

23
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Distance : 12

24
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } &&
Distance : 8

25
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } T
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } T
Distance : 8

26
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) ; } {}
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) ; } {}
Distance : 13

27
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; } toString
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; } toString
Distance : 10

28
Tree	{ return this . String ; } [
Code	{ return this . String ; } [
Distance : 13

29
Tree	{ return this . String ; } f
Code	{ return this . String ; } f
Distance : 13

30
Tree	{ return this . String ; } Override
Code	{ return this . String ; } Override
Distance : 13

31
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; } &&
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; } &&
Distance : 10

32
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; } T
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; } T
Distance : 10

33
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

34
Tree	{ return this . String ; } array
Code	{ return this . String ; } array
Distance : 13

35
Tree	{ return ( String ) returnString ( Any.ANY ) . returnString () ; } source
Code	{ return ( String ) returnString ( Any.ANY ) . returnString () ; } source
Distance : 9

36
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } p
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } p
Distance : 8

37
Tree	{ return returnString ( Any.ANY ) . < String > reportMatcher () ; }
Code	{ return returnString ( Any.ANY ) . < String > reportMatcher () ; }
Distance : 10

38
Tree	{ returnString ( Any.ANY ) ; return true ; }
Code	{ returnString ( Any.ANY ) ; return true ; }
Distance : 12

39
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

40
Tree	{ returnString ( Any.ANY ) ; return null ; }
Code	{ returnString ( Any.ANY ) ; return null ; }
Distance : 12

41
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

42
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

43
Tree	{ return this . String ; }
Code	{ return this . String ; }
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

45
Tree	{ return reportMatcher ( Any.ANY ) . < String > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < String > reportMatcher () ; }
Distance : 9

46
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

47
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

48
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; }
Distance : 7

49
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

50
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

51
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

52
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

53
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

54
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 11

55
Tree	{ return ( String ) reportMatcher ( Any.ANY ) . returnString () ; }
Code	{ return ( String ) reportMatcher ( Any.ANY ) . returnString () ; }
Distance : 8

56
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

57
Tree	{ return ( String ) returnString ( Any.ANY ) ; }
Code	{ return ( String ) returnString ( Any.ANY ) ; }
Distance : 10

58
Tree	{ super ( String ) ; returnString ( Any.ANY ) ; toAnswer }
Code	{ super ( String ) ; returnString ( Any.ANY ) ; toAnswer }
Distance : 13

59
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) ; toAnswer }
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) ; toAnswer }
Distance : 13

60
Tree	{ returnString ( Any.ANY ) ; return super(); ; }
Code	{ returnString ( Any.ANY ) ; return super(); ; }
Distance : 12

61
Tree	{ return returnString ( Any.ANY ) . returnString () ; }
Code	{ return returnString ( Any.ANY ) . returnString () ; }
Distance : 8

62
Tree	{ super ( String ) ; returnString ( Any.ANY ) ; toReturn }
Code	{ super ( String ) ; returnString ( Any.ANY ) ; toReturn }
Distance : 13

63
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) ; toReturn }
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) ; toReturn }
Distance : 13

64
Tree	{ super ( String ) ; returnString ( Any.ANY ) ; MINUTE_OF_DAY_TYPE }
Code	{ super ( String ) ; returnString ( Any.ANY ) ; MINUTE_OF_DAY_TYPE }
Distance : 13

65
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) ; return; }
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) ; return; }
Distance : 13

66
Tree	{ returnString ( Any.ANY ) ; return return; ; }
Code	{ returnString ( Any.ANY ) ; return return; ; }
Distance : 12

67
Tree	{ super ( String ) ; returnString ( Any.ANY ) ; }
Code	{ super ( String ) ; returnString ( Any.ANY ) ; }
Distance : 12

68
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

69
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; }
Distance : 11

71
Tree	{ returnString ( Any.ANY ) ; return false ; }
Code	{ returnString ( Any.ANY ) ; return false ; }
Distance : 12

72
Tree	{ return ( String ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( String ) reportMatcher ( Any.ANY ) ; }
Distance : 10

73
Tree	{ returnString ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnString ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

74
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 13

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

76
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) ; } f
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) ; } f
Distance : 13

77
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

78
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 11

79
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 11

80
Tree	{ super ( String ) ; } -
Code	{ super ( String ) ; } -
Distance : 12

81
Tree	{ super ( String ) ; } [
Code	{ super ( String ) ; } [
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) ; String = Any.ANY . returnString () ; } &&
Code	{ reportMatcher ( Any.ANY ) ; String = Any.ANY . returnString () ; } &&
Distance : 9

83
Tree	{ super ( String ) ; } Override
Code	{ super ( String ) ; } Override
Distance : 12

84
Tree	{ super ( String ) ; } MathRuntimeException
Code	{ super ( String ) ; } MathRuntimeException
Distance : 12

85
Tree	{ super ( String ) ; } mock
Code	{ super ( String ) ; } mock
Distance : 12

86
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

87
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

88
Tree	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 11

89
Tree	{ return reportMatcher ( Any.ANY ) . < String > reportMatcher () ; } options
Code	{ return reportMatcher ( Any.ANY ) . < String > reportMatcher () ; } options
Distance : 10

90
Tree	{ return reportMatcher ( Any.ANY ) . < String > reportMatcher () ; } p
Code	{ return reportMatcher ( Any.ANY ) . < String > reportMatcher () ; } p
Distance : 10

91
Tree	{ return reportMatcher ( Any.ANY ) . < String > reportMatcher () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . < String > reportMatcher () ; } &&
Distance : 10

92
Tree	{ return reportMatcher ( Any.ANY ) . < String > reportMatcher () ; } T
Code	{ return reportMatcher ( Any.ANY ) . < String > reportMatcher () ; } T
Distance : 10

93
Tree	{ super ( String ) ; } notifyListeners
Code	{ super ( String ) ; } notifyListeners
Distance : 12

94
Tree	{ return ( String ) returnString () ; } Test
Code	{ return ( String ) returnString () ; } Test
Distance : 9

95
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 14

96
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 13

97
Tree	{ reportMatcher ( Any.ANY ) ; String = Any.ANY . returnString () ; } toString
Code	{ reportMatcher ( Any.ANY ) ; String = Any.ANY . returnString () ; } toString
Distance : 9

98
Tree	{ reportMatcher ( Any.ANY ) ; String = Any.ANY . returnString () ; } source
Code	{ reportMatcher ( Any.ANY ) ; String = Any.ANY . returnString () ; } source
Distance : 9

99
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

100
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

101
Tree	{ return reportMatcher ( Any.ANY ) ; } -
Code	{ return reportMatcher ( Any.ANY ) ; } -
Distance : 11

102
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; this . String = String ; } T
Code	{ reportMatcher ( Any.ANY ) . returnString () ; this . String = String ; } T
Distance : 13

103
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 14

104
Tree	{ super ( String ) ; } f
Code	{ super ( String ) ; } f
Distance : 12

105
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; this . String = String ; } options
Code	{ reportMatcher ( Any.ANY ) . returnString () ; this . String = String ; } options
Distance : 13

106
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; this . String = String ; } p
Code	{ reportMatcher ( Any.ANY ) . returnString () ; this . String = String ; } p
Distance : 13

107
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; this . String = String ; } source
Code	{ reportMatcher ( Any.ANY ) . returnString () ; this . String = String ; } source
Distance : 13

108
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return false ; } &&
Distance : 12

109
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } p
Code	{ reportMatcher ( Any.ANY ) ; return false ; } p
Distance : 12

110
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } options
Code	{ reportMatcher ( Any.ANY ) ; return false ; } options
Distance : 12

111
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } source
Code	{ reportMatcher ( Any.ANY ) ; return false ; } source
Distance : 12

112
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } toString
Code	{ reportMatcher ( Any.ANY ) ; return false ; } toString
Distance : 12

113
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; this . String = String ; } &&
Code	{ reportMatcher ( Any.ANY ) . returnString () ; this . String = String ; } &&
Distance : 13

114
Tree	{ return ( String ) returnString () ; } Preconditions
Code	{ return ( String ) returnString () ; } Preconditions
Distance : 9

115
Tree	{ return ( String ) returnString () ; } -
Code	{ return ( String ) returnString () ; } -
Distance : 9

116
Tree	{ reportMatcher ( Any.ANY ) ; String = Any.ANY . returnString () ; } p
Code	{ reportMatcher ( Any.ANY ) ; String = Any.ANY . returnString () ; } p
Distance : 9

117
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; String = false ; } wanted
Code	{ reportMatcher ( Any.ANY ) . returnString () ; String = false ; } wanted
Distance : 12

118
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

119
Tree	{ return ( String ) returnString () ; } ParamChecks
Code	{ return ( String ) returnString () ; } ParamChecks
Distance : 9

120
Tree	{ return ( String ) returnString () ; } Class
Code	{ return ( String ) returnString () ; } Class
Distance : 9

121
Tree	{ return ( String ) returnString () ; } MathRuntimeException
Code	{ return ( String ) returnString () ; } MathRuntimeException
Distance : 9

122
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

123
Tree	{ return ( String ) returnString () ; }
Code	{ return ( String ) returnString () ; }
Distance : 8

124
Tree	{ returnString ( Any.ANY ) ; String = Any.ANY . reportMatcher () ; }
Code	{ returnString ( Any.ANY ) ; String = Any.ANY . reportMatcher () ; }
Distance : 10

125
Tree	{ return reportMatcher ( Any.ANY ) . < String > returnString () ; }
Code	{ return reportMatcher ( Any.ANY ) . < String > returnString () ; }
Distance : 8

126
Tree	{ returnString ( Any.ANY ) . returnString () ; String = true ; }
Code	{ returnString ( Any.ANY ) . returnString () ; String = true ; }
Distance : 12

127
Tree	{ return this . String ; } -
Code	{ return this . String ; } -
Distance : 13

128
Tree	{ returnString ( Any.ANY ) . returnString () ; this . String = String ; }
Code	{ returnString ( Any.ANY ) . returnString () ; this . String = String ; }
Distance : 13

129
Tree	{ return ( String ) reportMatcher () ; }
Code	{ return ( String ) reportMatcher () ; }
Distance : 9

130
Tree	{ returnString ( Any.ANY ) . reportMatcher () ; String = true ; }
Code	{ returnString ( Any.ANY ) . reportMatcher () ; String = true ; }
Distance : 12

131
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; } p
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; } p
Distance : 10

132
Tree	{ returnString ( Any.ANY ) . reportMatcher () ; this . String = String ; }
Code	{ returnString ( Any.ANY ) . reportMatcher () ; this . String = String ; }
Distance : 13

133
Tree	{ return returnString ( Any.ANY ) ; }
Code	{ return returnString ( Any.ANY ) ; }
Distance : 11

134
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } options
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } options
Distance : 8

135
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 12

136
Tree	{ return ( String ) returnString ( Any.ANY ) ; } f
Code	{ return ( String ) returnString ( Any.ANY ) ; } f
Distance : 11

137
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; } options
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; } options
Distance : 10

138
Tree	{ return reportMatcher ( Any.ANY ) . < String > reportMatcher () ; } source
Code	{ return reportMatcher ( Any.ANY ) . < String > reportMatcher () ; } source
Distance : 10

139
Tree	{ return reportMatcher ( Any.ANY ) . < String > reportMatcher () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . < String > reportMatcher () ; } toString
Distance : 10

140
Tree	{ return ( String ) returnString ( Any.ANY ) . returnString () ; } T
Code	{ return ( String ) returnString ( Any.ANY ) . returnString () ; } T
Distance : 9

141
Tree	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 11

142
Tree	{ return reportMatcher ( Any.ANY ) ; } f
Code	{ return reportMatcher ( Any.ANY ) ; } f
Distance : 11

143
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; } source
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; } source
Distance : 10

144
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; String = false ; } Math
Code	{ reportMatcher ( Any.ANY ) . returnString () ; String = false ; } Math
Distance : 12

145
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 13

146
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) ; } -
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) ; } -
Distance : 13

147
Tree	{ return ( String ) returnString ( Any.ANY ) . returnString () ; } &&
Code	{ return ( String ) returnString ( Any.ANY ) . returnString () ; } &&
Distance : 9

148
Tree	{ return this . String ; } class
Code	{ return this . String ; } class
Distance : 13

149
Tree	{ return reportMatcher ( Any.ANY ) ; } {}
Code	{ return reportMatcher ( Any.ANY ) ; } {}
Distance : 11

150
Tree	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 11

151
Tree	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; } f
Code	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; } f
Distance : 12

152
Tree	{ super ( String ) ; returnString ( Any.ANY ) ; return; }
Code	{ super ( String ) ; returnString ( Any.ANY ) ; return; }
Distance : 13

153
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

154
Tree	{ super ( String ) ; returnString ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( String ) ; returnString ( Any.ANY ) . reportMatcher () ; }
Distance : 10

155
Tree	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; } {}
Code	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; } {}
Distance : 12

156
Tree	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; } Preconditions
Distance : 12

157
Tree	{ reportMatcher ( Any.ANY ) ; String = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; String = Any.ANY . reportMatcher () ; }
Distance : 9

158
Tree	{ returnString ( Any.ANY ) ; this . String = Any.ANY ; }
Code	{ returnString ( Any.ANY ) ; this . String = Any.ANY ; }
Distance : 12

159
Tree	{ return returnString ( Any.ANY ) . < String > returnString () ; }
Code	{ return returnString ( Any.ANY ) . < String > returnString () ; }
Distance : 9

160
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; String = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; String = true ; }
Distance : 11

161
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; this . String = String ; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; this . String = String ; }
Distance : 12

162
Tree	{ returnString ( Any.ANY ) . returnString () ; String = false ; }
Code	{ returnString ( Any.ANY ) . returnString () ; String = false ; }
Distance : 12

163
Tree	{ returnString ( Any.ANY ) ; String = Any.ANY . returnString () ; }
Code	{ returnString ( Any.ANY ) ; String = Any.ANY . returnString () ; }
Distance : 9

164
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; String = true ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; String = true ; }
Distance : 11

165
Tree	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; } MathRuntimeException
Distance : 12

166
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; this . String = String ; } toString
Code	{ reportMatcher ( Any.ANY ) . returnString () ; this . String = String ; } toString
Distance : 13

167
Tree	{ super ( String ) ; returnString ( Any.ANY ) . returnString () ; }
Code	{ super ( String ) ; returnString ( Any.ANY ) . returnString () ; }
Distance : 9

168
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } T
Code	{ reportMatcher ( Any.ANY ) ; return false ; } T
Distance : 12

169
Tree	{ return ( String ) returnString ( Any.ANY ) ; } ParamChecks
Code	{ return ( String ) returnString ( Any.ANY ) ; } ParamChecks
Distance : 11

170
Tree	{ super ( String ) ; }
Code	{ super ( String ) ; }
Distance : 11

171
Tree	{ returnString ( Any.ANY ) ; return break; ; }
Code	{ returnString ( Any.ANY ) ; return break; ; }
Distance : 12

172
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } f
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } f
Distance : 12

173
Tree	{ return ( String ) returnString ( Any.ANY ) . returnString () ; }
Code	{ return ( String ) returnString ( Any.ANY ) . returnString () ; }
Distance : 8

174
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) ; throw }
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) ; throw }
Distance : 13

175
Tree	{ return ( String ) returnString () ; } f
Code	{ return ( String ) returnString () ; } f
Distance : 9

176
Tree	{ return ( String ) returnString () ; } {}
Code	{ return ( String ) returnString () ; } {}
Distance : 9

177
Tree	{ super ( String ) ; } array
Code	{ super ( String ) ; } array
Distance : 12

178
Tree	{ return returnString ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnString ( Any.ANY ) . reportMatcher () ; }
Distance : 9

179
Tree	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; } Class
Code	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; } Class
Distance : 12

180
Tree	{ reportMatcher ( Any.ANY ) ; String = Any.ANY . returnString () ; }
Code	{ reportMatcher ( Any.ANY ) ; String = Any.ANY . returnString () ; }
Distance : 8

181
Tree	{ return ( String ) returnString ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( String ) returnString ( Any.ANY ) . reportMatcher () ; }
Distance : 9

182
Tree	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; } Test
Code	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; } Test
Distance : 12

183
Tree	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; } -
Code	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; } -
Distance : 12

184
Tree	{ return ( String ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( String ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

185
Tree	{ reportMatcher ( Any.ANY ) ; String = Any.ANY . returnString () ; } options
Code	{ reportMatcher ( Any.ANY ) ; String = Any.ANY . returnString () ; } options
Distance : 9

186
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 14

187
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ParamChecks
Distance : 12

188
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 14

189
Tree	{ super ( String ) ; returnString ( Any.ANY ) ; throw }
Code	{ super ( String ) ; returnString ( Any.ANY ) ; throw }
Distance : 13

190
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

191
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

192
Tree	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; } ParamChecks
Distance : 12

193
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

194
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

195
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) ; MINUTE_OF_DAY_TYPE }
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) ; MINUTE_OF_DAY_TYPE }
Distance : 13

196
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; String = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; String = false ; }
Distance : 11

197
Tree	{ return this . String ; } mock
Code	{ return this . String ; } mock
Distance : 13

198
Tree	{ super ( String ) ; } class
Code	{ super ( String ) ; } class
Distance : 12

199
Tree	{ reportMatcher ( Any.ANY ) ; String = Any.ANY . returnString () ; } T
Code	{ reportMatcher ( Any.ANY ) ; String = Any.ANY . returnString () ; } T
Distance : 9

========================================================================


========================================================================
Example Number: 96
Parent Code is: 
{ return ( T ) anyObject () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (802{val=anyObject}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnNull}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	{ return ( T ) reportMatcher ( T ) ; } Preconditions
Code	{ return ( T ) reportMatcher ( T ) ; } Preconditions
Distance : 5

1
Tree	{ return returnNull ( Any.ANY ) . anyObject () ; }
Code	{ return returnNull ( Any.ANY ) . anyObject () ; }
Distance : 5

2
Tree	{ return ( T ) returnNull ( Any.ANY ) . anyObject () ; }
Code	{ return ( T ) returnNull ( Any.ANY ) . anyObject () ; }
Distance : 2

3
Tree	{ return ( T ) returnNull ( Any.ANY ) . anyObject ( T ) ; }
Code	{ return ( T ) returnNull ( Any.ANY ) . anyObject ( T ) ; }
Distance : 5

4
Tree	{ return ( T ) this . T . anyObject () ; }
Code	{ return ( T ) this . T . anyObject () ; }
Distance : 5

5
Tree	{ return ( T ) returnNull ( Any.ANY ) . returnNull () ; }
Code	{ return ( T ) returnNull ( Any.ANY ) . returnNull () ; }
Distance : 1

6
Tree	{ return returnNull ( T ) . < T > returnNull () ; }
Code	{ return returnNull ( T ) . < T > returnNull () ; }
Distance : 6

7
Tree	{ return ( T ) T . returnNull ( T , ( T ) returnNull () ) ; }
Code	{ return ( T ) T . returnNull ( T , ( T ) returnNull () ) ; }
Distance : 9

8
Tree	{ return returnNull ( Any.ANY ) . returnNull () ; }
Code	{ return returnNull ( Any.ANY ) . returnNull () ; }
Distance : 4

9
Tree	{ return ( T ) returnNull ( Any.ANY ) . returnNull ( T ) ; }
Code	{ return ( T ) returnNull ( Any.ANY ) . returnNull ( T ) ; }
Distance : 4

10
Tree	{ return ( T ) anyObject ( T . anyObject () ) ; }
Code	{ return ( T ) anyObject ( T . anyObject () ) ; }
Distance : 5

11
Tree	{ return T . returnNull () ; }
Code	{ return T . returnNull () ; }
Distance : 6

12
Tree	{ return ( T ) this . T . reportMatcher () ; }
Code	{ return ( T ) this . T . reportMatcher () ; }
Distance : 5

13
Tree	{ returnNull ( Any.ANY ) ; return null ; }
Code	{ returnNull ( Any.ANY ) ; return null ; }
Distance : 8

14
Tree	{ return ( T ) returnNull ( Any.ANY ) ; }
Code	{ return ( T ) returnNull ( Any.ANY ) ; }
Distance : 4

15
Tree	{ return ( T ) returnNull ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( T ) returnNull ( Any.ANY ) . reportMatcher () ; }
Distance : 2

16
Tree	{ return ( T ) T . reportMatcher () ; } p
Code	{ return ( T ) T . reportMatcher () ; } p
Distance : 6

17
Tree	{ return ( T ) T . reportMatcher () ; } ParamChecks
Code	{ return ( T ) T . reportMatcher () ; } ParamChecks
Distance : 6

18
Tree	{ return ( T ) T . reportMatcher () ; } Preconditions
Code	{ return ( T ) T . reportMatcher () ; } Preconditions
Distance : 6

19
Tree	{ return ( T ) reportMatcher ( T ) ; } toString
Code	{ return ( T ) reportMatcher ( T ) ; } toString
Distance : 5

20
Tree	{ return ( T ) reportMatcher ( T ) ; } {}
Code	{ return ( T ) reportMatcher ( T ) ; } {}
Distance : 5

21
Tree	{ return ( T ) reportMatcher ( T ) ; } Class
Code	{ return ( T ) reportMatcher ( T ) ; } Class
Distance : 5

22
Tree	{ return reportMatcher () ; } {}
Code	{ return reportMatcher () ; } {}
Distance : 9

23
Tree	{ return reportMatcher () ; } toString
Code	{ return reportMatcher () ; } toString
Distance : 9

24
Tree	{ return reportMatcher () ; } Preconditions
Code	{ return reportMatcher () ; } Preconditions
Distance : 9

25
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher () ; } wanted
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher () ; } wanted
Distance : 2

26
Tree	{ return ( T ) reportMatcher () ; } &&
Code	{ return ( T ) reportMatcher () ; } &&
Distance : 6

27
Tree	{ return ( T ) reportMatcher () ; } Preconditions
Code	{ return ( T ) reportMatcher () ; } Preconditions
Distance : 6

28
Tree	{ return ( T ) reportMatcher () ; } ParamChecks
Code	{ return ( T ) reportMatcher () ; } ParamChecks
Distance : 6

29
Tree	{ return ( T ) reportMatcher () ; } p
Code	{ return ( T ) reportMatcher () ; } p
Distance : 6

30
Tree	{ return ( T ) reportMatcher () ; } toString
Code	{ return ( T ) reportMatcher () ; } toString
Distance : 6

31
Tree	{ return reportMatcher () ; } p
Code	{ return reportMatcher () ; } p
Distance : 9

32
Tree	{ return reportMatcher () ; } Class
Code	{ return reportMatcher () ; } Class
Distance : 9

33
Tree	{ return ( T ) T . reportMatcher () ; } &&
Code	{ return ( T ) T . reportMatcher () ; } &&
Distance : 6

34
Tree	{ return ( T ) T . returnNull ( T , ( T ) reportMatcher () ) ; }
Code	{ return ( T ) T . returnNull ( T , ( T ) reportMatcher () ) ; }
Distance : 10

35
Tree	{ return this . T ; } notifyListeners
Code	{ return this . T ; } notifyListeners
Distance : 10

36
Tree	{ return ( T ) anyObject ( T . reportMatcher () ) ; }
Code	{ return ( T ) anyObject ( T . reportMatcher () ) ; }
Distance : 5

37
Tree	{ return ( T ) reportMatcher ( T . anyObject () ) ; }
Code	{ return ( T ) reportMatcher ( T . anyObject () ) ; }
Distance : 4

38
Tree	{ return T ; }
Code	{ return T ; }
Distance : 9

39
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
Distance : 0

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

41
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( T ) ; }
Distance : 3

42
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 1

43
Tree	{ return anyObject ( Any.ANY ) . returnNull () ; }
Code	{ return anyObject ( Any.ANY ) . returnNull () ; }
Distance : 4

44
Tree	{ return reportMatcher ( T ) . < T > anyObject () ; }
Code	{ return reportMatcher ( T ) . < T > anyObject () ; }
Distance : 7

45
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 4

46
Tree	{ return reportMatcher ( Any.ANY ) . anyObject () ; }
Code	{ return reportMatcher ( Any.ANY ) . anyObject () ; }
Distance : 4

47
Tree	{ return ( T ) T . reportMatcher ( T ) ; }
Code	{ return ( T ) T . reportMatcher ( T ) ; }
Distance : 6

48
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 10

49
Tree	{ return ( T ) anyObject ( T ) ; }
Code	{ return ( T ) anyObject ( T ) ; }
Distance : 5

50
Tree	{ return this . T ; }
Code	{ return this . T ; }
Distance : 9

51
Tree	{ return ( T ) T . reportMatcher () ; }
Code	{ return ( T ) T . reportMatcher () ; }
Distance : 5

52
Tree	{ return ( T ) anyObject ( Any.ANY ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) ; }
Distance : 4

53
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . anyObject ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . anyObject ( T ) ; }
Distance : 4

54
Tree	{ return ( T ) T . returnNull () ; }
Code	{ return ( T ) T . returnNull () ; }
Distance : 4

55
Tree	{ return anyObject ( Any.ANY ) . anyObject () ; }
Code	{ return anyObject ( Any.ANY ) . anyObject () ; }
Distance : 5

56
Tree	{ return ( T ) anyObject ( Any.ANY ) . anyObject ( T ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . anyObject ( T ) ; }
Distance : 5

57
Tree	{ return anyObject ( T ) . < T > anyObject () ; }
Code	{ return anyObject ( T ) . < T > anyObject () ; }
Distance : 7

58
Tree	{ return T . reportMatcher () ; }
Code	{ return T . reportMatcher () ; }
Distance : 7

59
Tree	{ return ( T ) returnNull () ; }
Code	{ return ( T ) returnNull () ; }
Distance : 5

60
Tree	{ return ( T ) anyObject ( Any.ANY ) . returnNull () ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . returnNull () ; }
Distance : 1

61
Tree	{ return ( T ) reportMatcher ( T . returnNull () ) ; }
Code	{ return ( T ) reportMatcher ( T . returnNull () ) ; }
Distance : 3

62
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 10

63
Tree	{ return ( T ) anyObject ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . reportMatcher () ; }
Distance : 2

64
Tree	{ return ( T ) anyObject ( Any.ANY ) . returnNull ( T ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . returnNull ( T ) ; }
Distance : 4

65
Tree	{ return ( T ) T . anyObject () ; }
Code	{ return ( T ) T . anyObject () ; }
Distance : 5

66
Tree	{ return ( T ) T . reportMatcher ( T , ( T ) anyObject () ) ; }
Code	{ return ( T ) T . reportMatcher ( T , ( T ) anyObject () ) ; }
Distance : 9

67
Tree	{ return ( T ) reportMatcher ( T . reportMatcher () ) ; }
Code	{ return ( T ) reportMatcher ( T . reportMatcher () ) ; }
Distance : 4

68
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . anyObject () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . anyObject () ; }
Distance : 1

69
Tree	{ return ( T ) T . returnNull ( T ) ; }
Code	{ return ( T ) T . returnNull ( T ) ; }
Distance : 7

70
Tree	{ return ( T ) anyObject ( Any.ANY ) . reportMatcher ( T ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 5

71
Tree	{ return reportMatcher ( T ) . < T > reportMatcher () ; }
Code	{ return reportMatcher ( T ) . < T > reportMatcher () ; }
Distance : 7

72
Tree	{ return ( T ) reportMatcher ( T . reportMatcher () ) ; } wanted
Code	{ return ( T ) reportMatcher ( T . reportMatcher () ) ; } wanted
Distance : 5

73
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 8

74
Tree	{ return T . reportMatcher () ; } &&
Code	{ return T . reportMatcher () ; } &&
Distance : 8

75
Tree	{ return Any.ANY ; } notifyListeners
Code	{ return Any.ANY ; } notifyListeners
Distance : 10

76
Tree	{ return Any.ANY ; } class
Code	{ return Any.ANY ; } class
Distance : 10

77
Tree	{ return Any.ANY ; } array
Code	{ return Any.ANY ; } array
Distance : 10

78
Tree	{ return ( T ) T . reportMatcher ( T ) ; } Class
Code	{ return ( T ) T . reportMatcher ( T ) ; } Class
Distance : 7

79
Tree	{ return ( T ) T . reportMatcher ( T ) ; } {}
Code	{ return ( T ) T . reportMatcher ( T ) ; } {}
Distance : 7

80
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 11

81
Tree	{ return ( T ) T . reportMatcher ( T ) ; } p
Code	{ return ( T ) T . reportMatcher ( T ) ; } p
Distance : 7

82
Tree	{ return ( T ) this . T . reportMatcher () ; } {}
Code	{ return ( T ) this . T . reportMatcher () ; } {}
Distance : 6

83
Tree	{ return ( T ) T . reportMatcher ( T ) ; } ParamChecks
Code	{ return ( T ) T . reportMatcher ( T ) ; } ParamChecks
Distance : 7

84
Tree	{ return Any.ANY ; } Override
Code	{ return Any.ANY ; } Override
Distance : 10

85
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 11

86
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 11

87
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 11

88
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 11

89
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 11

90
Tree	{ return Any.ANY ; } mock
Code	{ return Any.ANY ; } mock
Distance : 10

91
Tree	{ return ( T ) T . reportMatcher ( T ) ; } Preconditions
Code	{ return ( T ) T . reportMatcher ( T ) ; } Preconditions
Distance : 7

92
Tree	{ return ( T ) this . T . reportMatcher () ; } toString
Code	{ return ( T ) this . T . reportMatcher () ; } toString
Distance : 6

93
Tree	{ return ( T ) T . reportMatcher ( T ) ; } toString
Code	{ return ( T ) T . reportMatcher ( T ) ; } toString
Distance : 7

94
Tree	{ return this . T ; } -
Code	{ return this . T ; } -
Distance : 10

95
Tree	{ return T ; } [
Code	{ return T ; } [
Distance : 10

96
Tree	{ return T ; } f
Code	{ return T ; } f
Distance : 10

97
Tree	{ return T ; } Override
Code	{ return T ; } Override
Distance : 10

98
Tree	{ return T ; } MathRuntimeException
Code	{ return T ; } MathRuntimeException
Distance : 10

99
Tree	{ return ( T ) this . T . reportMatcher () ; } p
Code	{ return ( T ) this . T . reportMatcher () ; } p
Distance : 6

100
Tree	{ return T ; } mock
Code	{ return T ; } mock
Distance : 10

101
Tree	{ return T ; } array
Code	{ return T ; } array
Distance : 10

102
Tree	{ return this . T ; } array
Code	{ return this . T ; } array
Distance : 10

103
Tree	{ return ( T ) this . T . reportMatcher () ; } ParamChecks
Code	{ return ( T ) this . T . reportMatcher () ; } ParamChecks
Distance : 6

104
Tree	{ return STRING_CONSTANT ; } -
Code	{ return STRING_CONSTANT ; } -
Distance : 11

105
Tree	{ return this . T ; } MathRuntimeException
Code	{ return this . T ; } MathRuntimeException
Distance : 10

106
Tree	{ return T ; } class
Code	{ return T ; } class
Distance : 10

107
Tree	{ returnNull ( Any.ANY ) ; return return; ; }
Code	{ returnNull ( Any.ANY ) ; return return; ; }
Distance : 8

108
Tree	{ anyObject ( Any.ANY ) ; return return; ; }
Code	{ anyObject ( Any.ANY ) ; return return; ; }
Distance : 8

109
Tree	{ returnNull ( Any.ANY ) ; return super(); ; }
Code	{ returnNull ( Any.ANY ) ; return super(); ; }
Distance : 8

110
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 7

111
Tree	{ return ( T ) T . reportMatcher () ; } Class
Code	{ return ( T ) T . reportMatcher () ; } Class
Distance : 6

112
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } wanted
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } wanted
Distance : 5

113
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } wanted
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } wanted
Distance : 5

114
Tree	{ return ( T ) returnNull ( T . returnNull () ) ; }
Code	{ return ( T ) returnNull ( T . returnNull () ) ; }
Distance : 4

115
Tree	{ return ( T ) T . anyObject ( T , ( T ) reportMatcher () ) ; }
Code	{ return ( T ) T . anyObject ( T , ( T ) reportMatcher () ) ; }
Distance : 10

116
Tree	{ return ( T ) reportMatcher () ; }
Code	{ return ( T ) reportMatcher () ; }
Distance : 5

117
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 4

118
Tree	{ return ( T ) reportMatcher ( T ) ; } &&
Code	{ return ( T ) reportMatcher ( T ) ; } &&
Distance : 5

119
Tree	{ return returnNull () ; }
Code	{ return returnNull () ; }
Distance : 8

120
Tree	{ return ( T ) reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher ( T ) ; }
Distance : 4

121
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } p
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } p
Distance : 4

122
Tree	{ return Any.ANY ; } MathRuntimeException
Code	{ return Any.ANY ; } MathRuntimeException
Distance : 10

123
Tree	{ return STRING_CONSTANT ; } f
Code	{ return STRING_CONSTANT ; } f
Distance : 11

124
Tree	{ return Any.ANY ; }
Code	{ return Any.ANY ; }
Distance : 9

125
Tree	{ return ( T ) this . T . reportMatcher () ; } Class
Code	{ return ( T ) this . T . reportMatcher () ; } Class
Distance : 6

126
Tree	{ return ( T ) returnNull ( T . anyObject () ) ; }
Code	{ return ( T ) returnNull ( T . anyObject () ) ; }
Distance : 5

127
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 4

128
Tree	{ return T . reportMatcher () ; } Preconditions
Code	{ return T . reportMatcher () ; } Preconditions
Distance : 8

129
Tree	{ return reportMatcher ( T ) . < T > returnNull () ; } wanted
Code	{ return reportMatcher ( T ) . < T > returnNull () ; } wanted
Distance : 7

130
Tree	{ return STRING_CONSTANT ; } Override
Code	{ return STRING_CONSTANT ; } Override
Distance : 11

131
Tree	{ return anyObject ( T ) . < T > reportMatcher () ; }
Code	{ return anyObject ( T ) . < T > reportMatcher () ; }
Distance : 7

132
Tree	{ return ( T ) anyObject ( T . returnNull () ) ; }
Code	{ return ( T ) anyObject ( T . returnNull () ) ; }
Distance : 4

133
Tree	{ return ( T ) anyObject ( Any.ANY ) . anyObject () ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . anyObject () ; }
Distance : 2

134
Tree	{ return returnNull ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnNull ( Any.ANY ) . reportMatcher () ; }
Distance : 5

135
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 4

136
Tree	{ return ( T ) T . anyObject ( T , ( T ) returnNull () ) ; }
Code	{ return ( T ) T . anyObject ( T , ( T ) returnNull () ) ; }
Distance : 9

137
Tree	{ return this . T ; } [
Code	{ return this . T ; } [
Distance : 10

138
Tree	{ return ( T ) T . anyObject ( T , ( T ) anyObject () ) ; }
Code	{ return ( T ) T . anyObject ( T , ( T ) anyObject () ) ; }
Distance : 10

139
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 3

140
Tree	{ return ( T ) this . T . returnNull () ; }
Code	{ return ( T ) this . T . returnNull () ; }
Distance : 4

141
Tree	{ return this . T ; } class
Code	{ return this . T ; } class
Distance : 10

142
Tree	{ return anyObject () ; }
Code	{ return anyObject () ; }
Distance : 9

143
Tree	{ anyObject ( Any.ANY ) ; return null ; }
Code	{ anyObject ( Any.ANY ) ; return null ; }
Distance : 8

144
Tree	{ return ( T ) returnNull ( T ) ; }
Code	{ return ( T ) returnNull ( T ) ; }
Distance : 5

145
Tree	{ return ( T ) T . reportMatcher () ; } {}
Code	{ return ( T ) T . reportMatcher () ; } {}
Distance : 6

146
Tree	{ return ( T ) reportMatcher ( T ) ; } ParamChecks
Code	{ return ( T ) reportMatcher ( T ) ; } ParamChecks
Distance : 5

147
Tree	{ return T . anyObject () ; }
Code	{ return T . anyObject () ; }
Distance : 7

148
Tree	{ return ( T ) anyObject () ; }
Code	{ return ( T ) anyObject () ; }
Distance : 6

149
Tree	{ return returnNull ( T ) . < T > anyObject () ; }
Code	{ return returnNull ( T ) . < T > anyObject () ; }
Distance : 7

150
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 11

151
Tree	{ return this . T ; } mock
Code	{ return this . T ; } mock
Distance : 10

152
Tree	{ return ( T ) T . reportMatcher ( T , ( T ) reportMatcher () ) ; }
Code	{ return ( T ) T . reportMatcher ( T , ( T ) reportMatcher () ) ; }
Distance : 9

153
Tree	{ return reportMatcher ( Any.ANY ) . returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnNull () ; }
Distance : 3

154
Tree	{ return STRING_CONSTANT ; } MathRuntimeException
Code	{ return STRING_CONSTANT ; } MathRuntimeException
Distance : 11

155
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 7

156
Tree	{ return ( T ) T . returnNull ( T , ( T ) anyObject () ) ; }
Code	{ return ( T ) T . returnNull ( T , ( T ) anyObject () ) ; }
Distance : 10

157
Tree	{ return Any.ANY ; } -
Code	{ return Any.ANY ; } -
Distance : 10

158
Tree	{ return T . reportMatcher () ; } ParamChecks
Code	{ return T . reportMatcher () ; } ParamChecks
Distance : 8

159
Tree	{ return reportMatcher ( T ) . < T > returnNull () ; }
Code	{ return reportMatcher ( T ) . < T > returnNull () ; }
Distance : 6

160
Tree	{ return ( T ) reportMatcher ( T ) ; } p
Code	{ return ( T ) reportMatcher ( T ) ; } p
Distance : 5

161
Tree	{ return ( T ) returnNull ( T . reportMatcher () ) ; }
Code	{ return ( T ) returnNull ( T . reportMatcher () ) ; }
Distance : 5

162
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } toString
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } toString
Distance : 4

163
Tree	{ return STRING_CONSTANT ; } mock
Code	{ return STRING_CONSTANT ; } mock
Distance : 11

164
Tree	{ return T ; } notifyListeners
Code	{ return T ; } notifyListeners
Distance : 10

165
Tree	{ return ( T ) T . reportMatcher ( T , ( T ) returnNull () ) ; }
Code	{ return ( T ) T . reportMatcher ( T , ( T ) returnNull () ) ; }
Distance : 8

166
Tree	{ return anyObject ( Any.ANY ) . reportMatcher () ; }
Code	{ return anyObject ( Any.ANY ) . reportMatcher () ; }
Distance : 5

167
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } {}
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } {}
Distance : 4

168
Tree	{ return reportMatcher () ; } ParamChecks
Code	{ return reportMatcher () ; } ParamChecks
Distance : 9

169
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 11

170
Tree	{ return ( T ) returnNull ( Any.ANY ) . reportMatcher ( T ) ; }
Code	{ return ( T ) returnNull ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 5

171
Tree	{ return STRING_CONSTANT ; } [
Code	{ return STRING_CONSTANT ; } [
Distance : 11

172
Tree	{ return ( T ) this . T . reportMatcher () ; } &&
Code	{ return ( T ) this . T . reportMatcher () ; } &&
Distance : 6

173
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 11

174
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 7

175
Tree	{ return ( T ) T . anyObject ( T ) ; }
Code	{ return ( T ) T . anyObject ( T ) ; }
Distance : 7

176
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } Class
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } Class
Distance : 4

177
Tree	{ return ( T ) T . reportMatcher () ; } toString
Code	{ return ( T ) T . reportMatcher () ; } toString
Distance : 6

178
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 11

179
Tree	{ return ( T ) T . reportMatcher ( T ) ; } &&
Code	{ return ( T ) T . reportMatcher ( T ) ; } &&
Distance : 7

180
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 7

181
Tree	{ return T . reportMatcher () ; } p
Code	{ return T . reportMatcher () ; } p
Distance : 8

182
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } &&
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } &&
Distance : 4

183
Tree	{ return reportMatcher () ; } &&
Code	{ return reportMatcher () ; } &&
Distance : 9

184
Tree	{ return T . reportMatcher () ; } toString
Code	{ return T . reportMatcher () ; } toString
Distance : 8

185
Tree	{ return ( T ) reportMatcher () ; } Class
Code	{ return ( T ) reportMatcher () ; } Class
Distance : 6

186
Tree	{ return anyObject ( T ) . < T > returnNull () ; }
Code	{ return anyObject ( T ) . < T > returnNull () ; }
Distance : 6

187
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 11

188
Tree	{ return T ; } -
Code	{ return T ; } -
Distance : 10

189
Tree	{ return ( T ) this . T . reportMatcher () ; } Preconditions
Code	{ return ( T ) this . T . reportMatcher () ; } Preconditions
Distance : 6

190
Tree	{ return T . reportMatcher () ; } {}
Code	{ return T . reportMatcher () ; } {}
Distance : 8

191
Tree	{ return returnNull ( T ) . < T > reportMatcher () ; }
Code	{ return returnNull ( T ) . < T > reportMatcher () ; }
Distance : 7

192
Tree	{ return T . reportMatcher () ; } Class
Code	{ return T . reportMatcher () ; } Class
Distance : 8

193
Tree	{ return Any.ANY ; } [
Code	{ return Any.ANY ; } [
Distance : 10

194
Tree	{ return this . T ; } f
Code	{ return this . T ; } f
Distance : 10

195
Tree	{ return ( T ) reportMatcher () ; } {}
Code	{ return ( T ) reportMatcher () ; } {}
Distance : 6

196
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 11

197
Tree	{ return ( T ) T . reportMatcher ( T , ( T ) reportMatcher () ) ; } wanted
Code	{ return ( T ) T . reportMatcher ( T , ( T ) reportMatcher () ) ; } wanted
Distance : 10

198
Tree	{ return Any.ANY ; } f
Code	{ return Any.ANY ; } f
Distance : 10

199
Tree	{ return this . T ; } Override
Code	{ return this . T ; } Override
Distance : 10

========================================================================


========================================================================
Example Number: 97
Parent Code is: 
{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( T ) reportMatcher ( new InstanceOf ( clazz ) ) . returnFor ( clazz ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnFor}) (214{val=(}) (800{val=clazz}) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (800{val=clazz}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnFor}) (214{val=(}) (800{val=clazz}) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 15

1
Tree	{ return returnFor ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return returnFor ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 9

2
Tree	{ return reportMatcher ( T . reportMatcher ( clazz ) ) ; }
Code	{ return reportMatcher ( T . reportMatcher ( clazz ) ) ; }
Distance : 10

3
Tree	{ clazz = T . reportMatcher ( clazz ) ; return null ; }
Code	{ clazz = T . reportMatcher ( clazz ) ; return null ; }
Distance : 12

4
Tree	{ return STRING_CONSTANT ; } -
Code	{ return STRING_CONSTANT ; } -
Distance : 17

5
Tree	{ return STRING_CONSTANT ; } [
Code	{ return STRING_CONSTANT ; } [
Distance : 17

6
Tree	{ return STRING_CONSTANT ; } f
Code	{ return STRING_CONSTANT ; } f
Distance : 17

7
Tree	{ return reportMatcher () ; } f
Code	{ return reportMatcher () ; } f
Distance : 16

8
Tree	{ return STRING_CONSTANT ; } MathRuntimeException
Code	{ return STRING_CONSTANT ; } MathRuntimeException
Distance : 17

9
Tree	{ return reportMatcher () ; } {}
Code	{ return reportMatcher () ; } {}
Distance : 16

10
Tree	{ return ( clazz ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return ( clazz ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 6

11
Tree	{ return ( T ) returnFor ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return ( T ) returnFor ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 6

12
Tree	{ return ( clazz ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( clazz ) reportMatcher ( Any.ANY ) ; }
Distance : 11

13
Tree	{ return ( T ) reportMatcher ( clazz ) ; } wanted
Code	{ return ( T ) reportMatcher ( clazz ) ; } wanted
Distance : 10

14
Tree	{ return ( T ) reportMatcher ( clazz ) ; } Math
Code	{ return ( T ) reportMatcher ( clazz ) ; } Math
Distance : 10

15
Tree	{ return T . returnFor ( T ) ; }
Code	{ return T . returnFor ( T ) ; }
Distance : 11

16
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 17

17
Tree	{ return reportMatcher () ; } MathRuntimeException
Code	{ return reportMatcher () ; } MathRuntimeException
Distance : 16

18
Tree	{ return ( clazz ) returnFor ( T ) ; }
Code	{ return ( clazz ) returnFor ( T ) ; }
Distance : 10

19
Tree	{ return ( clazz ) reportMatcher ( Any.ANY ) . returnFor ( T ) ; }
Code	{ return ( clazz ) reportMatcher ( Any.ANY ) . returnFor ( T ) ; }
Distance : 7

20
Tree	{ return returnFor ( clazz , returnFor ( Any.ANY ) ) ; }
Code	{ return returnFor ( clazz , returnFor ( Any.ANY ) ) ; }
Distance : 12

21
Tree	{ super . returnFor () ; return break; ; }
Code	{ super . returnFor () ; return break; ; }
Distance : 16

22
Tree	{ return this . clazz . reportMatcher ( clazz ) ; }
Code	{ return this . clazz . reportMatcher ( clazz ) ; }
Distance : 11

23
Tree	{ super . returnFor () ; return continue; ; }
Code	{ super . returnFor () ; return continue; ; }
Distance : 16

24
Tree	{ return ( clazz ) returnFor ( clazz , reportMatcher ( Any.ANY ) ) ; }
Code	{ return ( clazz ) returnFor ( clazz , reportMatcher ( Any.ANY ) ) ; }
Distance : 11

25
Tree	{ return returnFor ( clazz . returnFor ( clazz ) ) ; }
Code	{ return returnFor ( clazz . returnFor ( clazz ) ) ; }
Distance : 10

26
Tree	{ return ( clazz ) reportMatcher ( T , reportMatcher ( Any.ANY ) ) ; }
Code	{ return ( clazz ) reportMatcher ( T , reportMatcher ( Any.ANY ) ) ; }
Distance : 10

27
Tree	{ return ( clazz ) returnFor ( Any.ANY ) ; }
Code	{ return ( clazz ) returnFor ( Any.ANY ) ; }
Distance : 10

28
Tree	{ return ( T ) returnFor ( T ) ; }
Code	{ return ( T ) returnFor ( T ) ; }
Distance : 10

29
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 14

30
Tree	{ clazz = clazz . reportMatcher ( T ) ; return null ; }
Code	{ clazz = clazz . reportMatcher ( T ) ; return null ; }
Distance : 14

31
Tree	{ return reportMatcher () ; } Class
Code	{ return reportMatcher () ; } Class
Distance : 16

32
Tree	{ return returnFor ( this , T ) ; }
Code	{ return returnFor ( this , T ) ; }
Distance : 14

33
Tree	{ return ( clazz ) reportMatcher ( clazz ) ; }
Code	{ return ( clazz ) reportMatcher ( clazz ) ; }
Distance : 10

34
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 14

35
Tree	{ return reportMatcher ( this , T ) ; } p
Code	{ return reportMatcher ( this , T ) ; } p
Distance : 14

36
Tree	{ return reportMatcher ( this , T ) ; } &&
Code	{ return reportMatcher ( this , T ) ; } &&
Distance : 14

37
Tree	{ return reportMatcher ( this , T ) ; } T
Code	{ return reportMatcher ( this , T ) ; } T
Distance : 14

38
Tree	{ return reportMatcher () . reportMatcher ( super , false ) ; }
Code	{ return reportMatcher () . reportMatcher ( super , false ) ; }
Distance : 13

39
Tree	{ return reportMatcher ( Any.ANY ) . returnFor () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnFor () ; }
Distance : 11

40
Tree	{ super return }
Code	{ super return }
Distance : 18

41
Tree	{ super super }
Code	{ super super }
Distance : 18

42
Tree	{ return reportMatcher () . reportMatcher ( super , super ) ; }
Code	{ return reportMatcher () . reportMatcher ( super , super ) ; }
Distance : 13

43
Tree	{ return reportMatcher ( T ) ; }
Code	{ return reportMatcher ( T ) ; }
Distance : 13

44
Tree	{ super += }
Code	{ super += }
Distance : 18

45
Tree	{ super . reportMatcher () ; return null ; }
Code	{ super . reportMatcher () ; return null ; }
Distance : 16

46
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 16

47
Tree	{ return reportMatcher ( this , T ) ; } options
Code	{ return reportMatcher ( this , T ) ; } options
Distance : 14

48
Tree	{ return this . T . returnFor ( T ) ; }
Code	{ return this . T . returnFor ( T ) ; }
Distance : 12

49
Tree	{ return reportMatcher ( this , T ) ; } source
Code	{ return reportMatcher ( this , T ) ; } source
Distance : 14

50
Tree	{ returnFor ( Any.ANY ) ; return null ; }
Code	{ returnFor ( Any.ANY ) ; return null ; }
Distance : 15

51
Tree	{ return reportMatcher ( Any.ANY ) . returnFor () ; } options
Code	{ return reportMatcher ( Any.ANY ) . returnFor () ; } options
Distance : 12

52
Tree	{ return T . reportMatcher ( T ) ; }
Code	{ return T . reportMatcher ( T ) ; }
Distance : 12

53
Tree	{ if super }
Code	{ if super }
Distance : 18

54
Tree	{ return reportMatcher ( T , reportMatcher ( Any.ANY ) ) ; } Math
Code	{ return reportMatcher ( T , reportMatcher ( Any.ANY ) ) ; } Math
Distance : 12

55
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } wanted
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } wanted
Distance : 9

56
Tree	{ return ( T ) reportMatcher ( clazz , returnFor ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( clazz , returnFor ( Any.ANY ) ) ; }
Distance : 8

57
Tree	{ return this . T . returnFor ( T ) ; } Math
Code	{ return this . T . returnFor ( T ) ; } Math
Distance : 13

58
Tree	{ return reportMatcher ( this , T ) ; } toString
Code	{ return reportMatcher ( this , T ) ; } toString
Distance : 14

59
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Math
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Math
Distance : 9

60
Tree	{ super . returnFor () ; return super(); ; }
Code	{ super . returnFor () ; return super(); ; }
Distance : 16

61
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( clazz ) ; }
Distance : 6

62
Tree	{ return reportMatcher ( T ) ; } &&
Code	{ return reportMatcher ( T ) ; } &&
Distance : 14

63
Tree	{ return ( T ) reportMatcher ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( clazz ) ; }
Distance : 9

64
Tree	{ clazz = T . reportMatcher ( T ) ; return null ; }
Code	{ clazz = T . reportMatcher ( T ) ; return null ; }
Distance : 13

65
Tree	{ T = clazz . returnFor ( T ) ; return null ; }
Code	{ T = clazz . returnFor ( T ) ; return null ; }
Distance : 14

66
Tree	{ return reportMatcher ( T , returnFor ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( T , returnFor ( Any.ANY ) ) ; }
Distance : 12

67
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 14

68
Tree	{ return reportMatcher ( clazz ) ; }
Code	{ return reportMatcher ( clazz ) ; }
Distance : 12

69
Tree	{ returnFor ( Any.ANY ) ; return return; ; }
Code	{ returnFor ( Any.ANY ) ; return return; ; }
Distance : 15

70
Tree	{ super abstract }
Code	{ super abstract }
Distance : 18

71
Tree	{ super . returnFor () ; return return; ; }
Code	{ super . returnFor () ; return return; ; }
Distance : 16

72
Tree	{ return reportMatcher ( T ) ; } T
Code	{ return reportMatcher ( T ) ; } T
Distance : 14

73
Tree	{ return returnFor ( clazz . reportMatcher ( clazz ) ) ; }
Code	{ return returnFor ( clazz . reportMatcher ( clazz ) ) ; }
Distance : 11

74
Tree	{ return returnFor ( Any.ANY ) . returnFor () ; }
Code	{ return returnFor ( Any.ANY ) . returnFor () ; }
Distance : 12

75
Tree	{ return super }
Code	{ return super }
Distance : 17

76
Tree	{ T = T . returnFor ( T ) ; return null ; }
Code	{ T = T . returnFor ( T ) ; return null ; }
Distance : 14

77
Tree	{ return this . T . returnFor ( clazz ) ; }
Code	{ return this . T . returnFor ( clazz ) ; }
Distance : 11

78
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 17

79
Tree	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 14

80
Tree	{ return reportMatcher () ; } Preconditions
Code	{ return reportMatcher () ; } Preconditions
Distance : 16

81
Tree	{ return reportMatcher ( Any.ANY ) ; } -
Code	{ return reportMatcher ( Any.ANY ) ; } -
Distance : 14

82
Tree	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 14

83
Tree	{ return ( clazz ) reportMatcher ( clazz , reportMatcher ( Any.ANY ) ) ; }
Code	{ return ( clazz ) reportMatcher ( clazz , reportMatcher ( Any.ANY ) ) ; }
Distance : 10

84
Tree	{ return ( T ) reportMatcher ( T , reportMatcher ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( T , reportMatcher ( Any.ANY ) ) ; }
Distance : 9

85
Tree	{ return ( T ) returnFor ( Any.ANY ) ; }
Code	{ return ( T ) returnFor ( Any.ANY ) ; }
Distance : 10

86
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 5

87
Tree	{ return returnFor ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnFor ( Any.ANY ) . reportMatcher () ; }
Distance : 13

88
Tree	{ return ( clazz ) reportMatcher ( Any.ANY ) . reportMatcher ( clazz ) ; }
Code	{ return ( clazz ) reportMatcher ( Any.ANY ) . reportMatcher ( clazz ) ; }
Distance : 7

89
Tree	{ return ( clazz ) reportMatcher ( clazz , returnFor ( Any.ANY ) ) ; }
Code	{ return ( clazz ) reportMatcher ( clazz , returnFor ( Any.ANY ) ) ; }
Distance : 9

90
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 14

91
Tree	{ return returnFor ( T , returnFor ( Any.ANY ) ) ; }
Code	{ return returnFor ( T , returnFor ( Any.ANY ) ) ; }
Distance : 12

92
Tree	{ return ( T ) returnFor ( clazz , returnFor ( Any.ANY ) ) ; }
Code	{ return ( T ) returnFor ( clazz , returnFor ( Any.ANY ) ) ; }
Distance : 9

93
Tree	{ return clazz . reportMatcher ( clazz ) ; }
Code	{ return clazz . reportMatcher ( clazz ) ; }
Distance : 11

94
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( T ) ; }
Distance : 6

95
Tree	{ return reportMatcher () ; } -
Code	{ return reportMatcher () ; } -
Distance : 16

96
Tree	{ returnFor ( Any.ANY ) ; return super(); ; }
Code	{ returnFor ( Any.ANY ) ; return super(); ; }
Distance : 15

97
Tree	{ return T . reportMatcher ( clazz ) ; }
Code	{ return T . reportMatcher ( clazz ) ; }
Distance : 11

98
Tree	{ return reportMatcher () ; } ParamChecks
Code	{ return reportMatcher () ; } ParamChecks
Distance : 16

99
Tree	{ return returnFor ( this , clazz ) ; }
Code	{ return returnFor ( this , clazz ) ; }
Distance : 13

100
Tree	{ super . reportMatcher () ; return continue; ; }
Code	{ super . reportMatcher () ; return continue; ; }
Distance : 16

101
Tree	{ return ( T ) returnFor ( clazz , reportMatcher ( Any.ANY ) ) ; }
Code	{ return ( T ) returnFor ( clazz , reportMatcher ( Any.ANY ) ) ; }
Distance : 10

102
Tree	{ return this . T . reportMatcher ( T ) ; }
Code	{ return this . T . reportMatcher ( T ) ; }
Distance : 13

103
Tree	{ return reportMatcher ( clazz , reportMatcher ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( clazz , reportMatcher ( Any.ANY ) ) ; }
Distance : 12

104
Tree	{ return returnFor ( T ) ; }
Code	{ return returnFor ( T ) ; }
Distance : 13

105
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 10

106
Tree	{ return ( T ) returnFor ( Any.ANY ) . reportMatcher ( clazz ) ; }
Code	{ return ( T ) returnFor ( Any.ANY ) . reportMatcher ( clazz ) ; }
Distance : 7

107
Tree	{ return clazz . returnFor ( clazz ) ; }
Code	{ return clazz . returnFor ( clazz ) ; }
Distance : 10

108
Tree	{ return ( T ) reportMatcher ( T , returnFor ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( T , returnFor ( Any.ANY ) ) ; }
Distance : 9

109
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 13

110
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 14

111
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher ( clazz ) ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher ( clazz ) ; }
Distance : 9

112
Tree	{ return this . clazz . reportMatcher ( T ) ; }
Code	{ return this . clazz . reportMatcher ( T ) ; }
Distance : 12

113
Tree	{ return reportMatcher ( T , reportMatcher ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( T , reportMatcher ( Any.ANY ) ) ; }
Distance : 11

114
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 10

115
Tree	{ super . returnFor () ; return null ; }
Code	{ super . returnFor () ; return null ; }
Distance : 16

116
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } T
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } T
Distance : 11

117
Tree	{ return STRING_CONSTANT ; } Override
Code	{ return STRING_CONSTANT ; } Override
Distance : 17

118
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } &&
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } &&
Distance : 11

119
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } options
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } options
Distance : 11

120
Tree	{ return reportMatcher ( T . returnFor ( clazz ) ) ; }
Code	{ return reportMatcher ( T . returnFor ( clazz ) ) ; }
Distance : 10

121
Tree	{ T = T . reportMatcher ( T ) ; return null ; }
Code	{ T = T . reportMatcher ( T ) ; return null ; }
Distance : 13

122
Tree	{ super . reportMatcher () ; return break; ; }
Code	{ super . reportMatcher () ; return break; ; }
Distance : 16

123
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( T ) ; }
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( T ) ; }
Distance : 9

124
Tree	{ return returnFor ( clazz ) ; }
Code	{ return returnFor ( clazz ) ; }
Distance : 12

125
Tree	{ clazz = T . returnFor ( T ) ; return null ; }
Code	{ clazz = T . returnFor ( T ) ; return null ; }
Distance : 14

126
Tree	{ return ( clazz ) returnFor ( clazz ) ; }
Code	{ return ( clazz ) returnFor ( clazz ) ; }
Distance : 9

127
Tree	{ T = T . reportMatcher ( T ) ; return return; ; }
Code	{ T = T . reportMatcher ( T ) ; return return; ; }
Distance : 13

128
Tree	{ return reportMatcher ( this , T ) ; }
Code	{ return reportMatcher ( this , T ) ; }
Distance : 13

129
Tree	{ return this . T . reportMatcher ( clazz ) ; }
Code	{ return this . T . reportMatcher ( clazz ) ; }
Distance : 12

130
Tree	{ return ( clazz ) reportMatcher ( T ) ; }
Code	{ return ( clazz ) reportMatcher ( T ) ; }
Distance : 11

131
Tree	{ return returnFor ( T , reportMatcher ( Any.ANY ) ) ; }
Code	{ return returnFor ( T , reportMatcher ( Any.ANY ) ) ; }
Distance : 11

132
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 8

133
Tree	{ return returnFor ( Any.ANY ) ; }
Code	{ return returnFor ( Any.ANY ) ; }
Distance : 13

134
Tree	{ return reportMatcher ( clazz . reportMatcher ( clazz ) ) ; }
Code	{ return reportMatcher ( clazz . reportMatcher ( clazz ) ) ; }
Distance : 10

135
Tree	{ throw super }
Code	{ throw super }
Distance : 18

136
Tree	{ return STRING_CONSTANT ; } mock
Code	{ return STRING_CONSTANT ; } mock
Distance : 17

137
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 12

138
Tree	{ return reportMatcher () ; } Test
Code	{ return reportMatcher () ; } Test
Distance : 16

139
Tree	{ return reportMatcher ( Any.ANY ) . returnFor () ; } source
Code	{ return reportMatcher ( Any.ANY ) . returnFor () ; } source
Distance : 12

140
Tree	{ return reportMatcher ( Any.ANY ) ; } f
Code	{ return reportMatcher ( Any.ANY ) ; } f
Distance : 14

141
Tree	{ return reportMatcher ( Any.ANY ) ; } {}
Code	{ return reportMatcher ( Any.ANY ) ; } {}
Distance : 14

142
Tree	{ return ( T ) reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher ( T ) ; }
Distance : 10

143
Tree	{ return reportMatcher ( T ) ; } toString
Code	{ return reportMatcher ( T ) ; } toString
Distance : 14

144
Tree	{ return reportMatcher ( Any.ANY ) . returnFor () ; } T
Code	{ return reportMatcher ( Any.ANY ) . returnFor () ; } T
Distance : 12

145
Tree	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 14

146
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 14

147
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 7

148
Tree	{ return clazz . reportMatcher ( T ) ; }
Code	{ return clazz . reportMatcher ( T ) ; }
Distance : 12

149
Tree	{ return reportMatcher ( T ) ; } source
Code	{ return reportMatcher ( T ) ; } source
Distance : 14

150
Tree	{ return reportMatcher ( Any.ANY ) . returnFor () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . returnFor () ; } &&
Distance : 12

151
Tree	{ return reportMatcher ( T . returnFor ( T ) ) ; }
Code	{ return reportMatcher ( T . returnFor ( T ) ) ; }
Distance : 11

152
Tree	{ return returnFor ( T . returnFor ( clazz ) ) ; }
Code	{ return returnFor ( T . returnFor ( clazz ) ) ; }
Distance : 11

153
Tree	{ return returnFor ( Any.ANY ) . returnFor ( T ) ; }
Code	{ return returnFor ( Any.ANY ) . returnFor ( T ) ; }
Distance : 10

154
Tree	{ return reportMatcher ( this , clazz ) ; }
Code	{ return reportMatcher ( this , clazz ) ; }
Distance : 12

155
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } source
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } source
Distance : 11

156
Tree	{ return reportMatcher () . reportMatcher ( super , CHAR_CONS ) ; }
Code	{ return reportMatcher () . reportMatcher ( super , CHAR_CONS ) ; }
Distance : 13

157
Tree	{ return returnFor () ; }
Code	{ return returnFor () ; }
Distance : 15

158
Tree	{ return reportMatcher () . reportMatcher ( short , false ) ; }
Code	{ return reportMatcher () . reportMatcher ( short , false ) ; }
Distance : 13

159
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } p
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } p
Distance : 11

160
Tree	{ return reportMatcher () . returnFor ( super , false ) ; }
Code	{ return reportMatcher () . returnFor ( super , false ) ; }
Distance : 13

161
Tree	{ return reportMatcher ( clazz . returnFor ( clazz ) ) ; }
Code	{ return reportMatcher ( clazz . returnFor ( clazz ) ) ; }
Distance : 9

162
Tree	{ return reportMatcher () . reportMatcher ( super , class ) ; }
Code	{ return reportMatcher () . reportMatcher ( super , class ) ; }
Distance : 13

163
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } toString
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } toString
Distance : 11

164
Tree	{ return this . clazz . returnFor ( T ) ; }
Code	{ return this . clazz . returnFor ( T ) ; }
Distance : 11

165
Tree	{ return ( clazz ) returnFor ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return ( clazz ) returnFor ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 7

166
Tree	{ return T . reportMatcher ( T ) ; } Math
Code	{ return T . reportMatcher ( T ) ; } Math
Distance : 13

167
Tree	{ if return }
Code	{ if return }
Distance : 18

168
Tree	{ return clazz . returnFor ( T ) ; }
Code	{ return clazz . returnFor ( T ) ; }
Distance : 11

169
Tree	{ throw return }
Code	{ throw return }
Distance : 18

170
Tree	{ return reportMatcher () . returnFor ( super , super ) ; }
Code	{ return reportMatcher () . returnFor ( super , super ) ; }
Distance : 13

171
Tree	{ return T . reportMatcher ( T ) ; } wanted
Code	{ return T . reportMatcher ( T ) ; } wanted
Distance : 13

172
Tree	{ return returnFor ( clazz , reportMatcher ( Any.ANY ) ) ; }
Code	{ return returnFor ( clazz , reportMatcher ( Any.ANY ) ) ; }
Distance : 12

173
Tree	{ T = clazz . reportMatcher ( T ) ; return null ; }
Code	{ T = clazz . reportMatcher ( T ) ; return null ; }
Distance : 14

174
Tree	{ return returnFor ( Any.ANY ) . reportMatcher ( clazz ) ; }
Code	{ return returnFor ( Any.ANY ) . reportMatcher ( clazz ) ; }
Distance : 10

175
Tree	{ return reportMatcher () . reportMatcher ( nSteps , false ) ; }
Code	{ return reportMatcher () . reportMatcher ( nSteps , false ) ; }
Distance : 13

176
Tree	{ T = T . reportMatcher ( clazz ) ; return null ; }
Code	{ T = T . reportMatcher ( clazz ) ; return null ; }
Distance : 12

177
Tree	{ return reportMatcher ( clazz , returnFor ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( clazz , returnFor ( Any.ANY ) ) ; }
Distance : 11

178
Tree	{ return reportMatcher ( Any.ANY ) . returnFor () ; } p
Code	{ return reportMatcher ( Any.ANY ) . returnFor () ; } p
Distance : 12

179
Tree	{ return T . returnFor ( clazz ) ; }
Code	{ return T . returnFor ( clazz ) ; }
Distance : 10

180
Tree	{ return returnFor ( T . reportMatcher ( clazz ) ) ; }
Code	{ return returnFor ( T . reportMatcher ( clazz ) ) ; }
Distance : 10

181
Tree	{ super . reportMatcher () ; return super(); ; }
Code	{ super . reportMatcher () ; return super(); ; }
Distance : 16

182
Tree	{ return reportMatcher () . reportMatcher ( nSteps , super ) ; }
Code	{ return reportMatcher () . reportMatcher ( nSteps , super ) ; }
Distance : 13

183
Tree	{ return ( T ) reportMatcher ( clazz , reportMatcher ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( clazz , reportMatcher ( Any.ANY ) ) ; }
Distance : 9

184
Tree	{ return reportMatcher () . reportMatcher ( short , super ) ; }
Code	{ return reportMatcher () . reportMatcher ( short , super ) ; }
Distance : 13

185
Tree	{ super . reportMatcher () ; return return; ; }
Code	{ super . reportMatcher () ; return return; ; }
Distance : 16

186
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 14

187
Tree	{ super if }
Code	{ super if }
Distance : 18

188
Tree	{ return ( T ) returnFor ( clazz ) ; }
Code	{ return ( T ) returnFor ( clazz ) ; }
Distance : 9

189
Tree	{ return this . clazz . returnFor ( clazz ) ; }
Code	{ return this . clazz . returnFor ( clazz ) ; }
Distance : 10

190
Tree	{ returnFor ( Any.ANY ) ; return continue; ; }
Code	{ returnFor ( Any.ANY ) ; return continue; ; }
Distance : 15

191
Tree	{ return reportMatcher ( T ) ; } options
Code	{ return reportMatcher ( T ) ; } options
Distance : 14

192
Tree	{ return reportMatcher ( T . reportMatcher ( T ) ) ; }
Code	{ return reportMatcher ( T . reportMatcher ( T ) ) ; }
Distance : 11

193
Tree	{ return reportMatcher ( T ) ; } p
Code	{ return reportMatcher ( T ) ; } p
Distance : 14

194
Tree	{ return returnFor ( Any.ANY ) . reportMatcher ( T ) ; }
Code	{ return returnFor ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 11

195
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 17

196
Tree	{ return this . T . returnFor ( T ) ; } wanted
Code	{ return this . T . returnFor ( T ) ; } wanted
Distance : 13

197
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 14

198
Tree	{ return reportMatcher ( Any.ANY ) . returnFor () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . returnFor () ; } toString
Distance : 12

199
Tree	{ return reportMatcher ( T , reportMatcher ( Any.ANY ) ) ; } wanted
Code	{ return reportMatcher ( T , reportMatcher ( Any.ANY ) ) ; } wanted
Distance : 12

========================================================================


========================================================================
Example Number: 98
Parent Code is: 
{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( T ) reportMatcher ( new InstanceOf ( Object . class ) ) . returnNull () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnNull}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Object})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnNull}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return ( Object ) reportMatcher ( Any.ANY ) . returnNull ( T ) ; }
Code	{ return ( Object ) reportMatcher ( Any.ANY ) . returnNull ( T ) ; }
Distance : 11

1
Tree	{ return ( Object ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Object ) reportMatcher ( Any.ANY ) ; }
Distance : 11

2
Tree	{ super ( T . reportMatcher ( Object ) ) ; reportMatcher () ; }
Code	{ super ( T . reportMatcher ( Object ) ) ; reportMatcher () ; }
Distance : 9

3
Tree	{ return ( T ) reportMatcher ( T . reportMatcher () ) ; }
Code	{ return ( T ) reportMatcher ( T . reportMatcher () ) ; }
Distance : 9

4
Tree	{ super ( T ) ; returnNull ( Any.ANY ) ; } &&
Code	{ super ( T ) ; returnNull ( Any.ANY ) ; } &&
Distance : 13

5
Tree	{ super ( T ) ; returnNull ( Any.ANY ) ; } p
Code	{ super ( T ) ; returnNull ( Any.ANY ) ; } p
Distance : 13

6
Tree	{ return ( T ) reportMatcher ( Object ) . reportMatcher () ; }
Code	{ return ( T ) reportMatcher ( Object ) . reportMatcher () ; }
Distance : 7

7
Tree	{ return ( Object ) reportMatcher () ; }
Code	{ return ( Object ) reportMatcher () ; }
Distance : 12

8
Tree	{ return ( T ) Object . returnNull () ; }
Code	{ return ( T ) Object . returnNull () ; }
Distance : 9

9
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 10

10
Tree	{ return reportMatcher () ; } Class
Code	{ return reportMatcher () ; } Class
Distance : 15

11
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 14

12
Tree	{ return reportMatcher () ; } {}
Code	{ return reportMatcher () ; } {}
Distance : 15

13
Tree	{ return reportMatcher () ; } f
Code	{ return reportMatcher () ; } f
Distance : 15

14
Tree	{ return reportMatcher () ; } MathRuntimeException
Code	{ return reportMatcher () ; } MathRuntimeException
Distance : 15

15
Tree	{ return ( Object ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Object ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

16
Tree	{ return reportMatcher () ; } -
Code	{ return reportMatcher () ; } -
Distance : 15

17
Tree	{ return ( T ) returnNull ( T . returnNull () ) ; }
Code	{ return ( T ) returnNull ( T . returnNull () ) ; }
Distance : 10

18
Tree	{ return ( Object ) reportMatcher ( T ) . returnNull () ; }
Code	{ return ( Object ) reportMatcher ( T ) . returnNull () ; }
Distance : 8

19
Tree	{ return ( Object ) reportMatcher ( Object . returnNull () ) ; }
Code	{ return ( Object ) reportMatcher ( Object . returnNull () ) ; }
Distance : 9

20
Tree	{ super ( T . returnNull ( T ) ) ; reportMatcher () ; }
Code	{ super ( T . returnNull ( T ) ) ; reportMatcher () ; }
Distance : 11

21
Tree	{ return ( Object ) reportMatcher ( Any.ANY ) . returnNull ( Object ) ; }
Code	{ return ( Object ) reportMatcher ( Any.ANY ) . returnNull ( Object ) ; }
Distance : 11

22
Tree	{ return ( Object ) reportMatcher ( Object ) . returnNull () ; }
Code	{ return ( Object ) reportMatcher ( Object ) . returnNull () ; }
Distance : 7

23
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return break; ; }
Distance : 14

24
Tree	{ returnNull ( Any.ANY , Any.ANY ) ; return return; ; }
Code	{ returnNull ( Any.ANY , Any.ANY ) ; return return; ; }
Distance : 15

25
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return continue; ; }
Distance : 14

26
Tree	{ returnNull () ; return continue; ; }
Code	{ returnNull () ; return continue; ; }
Distance : 17

27
Tree	{ return ( Object ) returnNull ( Any.ANY ) ; }
Code	{ return ( Object ) returnNull ( Any.ANY ) ; }
Distance : 12

28
Tree	{ return ( T ) returnNull ( T ) . reportMatcher () ; }
Code	{ return ( T ) returnNull ( T ) . reportMatcher () ; }
Distance : 9

29
Tree	{ returnNull () ; return break; ; }
Code	{ returnNull () ; return break; ; }
Distance : 17

30
Tree	{ return ( T ) returnNull ( Object . reportMatcher () ) ; }
Code	{ return ( T ) returnNull ( Object . reportMatcher () ) ; }
Distance : 9

31
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( Object ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( Object ) ; }
Distance : 10

32
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 16

33
Tree	{ return ( T ) reportMatcher ( T ) . reportMatcher () ; }
Code	{ return ( T ) reportMatcher ( T ) . reportMatcher () ; }
Distance : 8

34
Tree	{ return returnNull ( Any.ANY ) ; }
Code	{ return returnNull ( Any.ANY ) ; }
Distance : 14

35
Tree	{ return ( T ) T . returnNull () ; }
Code	{ return ( T ) T . returnNull () ; }
Distance : 10

36
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 13

37
Tree	{ return returnNull () ; }
Code	{ return returnNull () ; }
Distance : 14

38
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 14

39
Tree	{ returnNull ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ returnNull ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 15

40
Tree	{ return ( T ) returnNull ( Any.ANY ) ; }
Code	{ return ( T ) returnNull ( Any.ANY ) ; }
Distance : 11

41
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 14

42
Tree	{ return ( T ) returnNull () ; }
Code	{ return ( T ) returnNull () ; }
Distance : 11

43
Tree	{ return ( T ) reportMatcher () ; } options
Code	{ return ( T ) reportMatcher () ; } options
Distance : 12

44
Tree	{ return ( T ) reportMatcher () ; } p
Code	{ return ( T ) reportMatcher () ; } p
Distance : 12

45
Tree	{ returnNull ( Any.ANY ) ; return continue; ; }
Code	{ returnNull ( Any.ANY ) ; return continue; ; }
Distance : 15

46
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Math
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Math
Distance : 8

47
Tree	{ return ( T ) reportMatcher () ; } T
Code	{ return ( T ) reportMatcher () ; } T
Distance : 12

48
Tree	{ return ( T ) reportMatcher () ; } &&
Code	{ return ( T ) reportMatcher () ; } &&
Distance : 12

49
Tree	{ return STRING_CONSTANT ; } [
Code	{ return STRING_CONSTANT ; } [
Distance : 17

50
Tree	{ return ( T ) returnNull ( Object ) ; }
Code	{ return ( T ) returnNull ( Object ) ; }
Distance : 10

51
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 17

52
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 17

53
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 17

54
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 17

55
Tree	{ return ( T ) T . returnNull () ; } Math
Code	{ return ( T ) T . returnNull () ; } Math
Distance : 11

56
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 17

57
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 17

58
Tree	{ returnNull ( Any.ANY ) ; return super(); ; }
Code	{ returnNull ( Any.ANY ) ; return super(); ; }
Distance : 15

59
Tree	{ return ( T ) returnNull ( Any.ANY ) . returnNull () ; }
Code	{ return ( T ) returnNull ( Any.ANY ) . returnNull () ; }
Distance : 8

60
Tree	{ super ( T . reportMatcher ( Object ) ) ; returnNull () ; }
Code	{ super ( T . reportMatcher ( Object ) ) ; returnNull () ; }
Distance : 8

61
Tree	{ return STRING_CONSTANT ; } f
Code	{ return STRING_CONSTANT ; } f
Distance : 17

62
Tree	{ return ( T ) returnNull ( T ) ; }
Code	{ return ( T ) returnNull ( T ) ; }
Distance : 11

63
Tree	{ return ( T ) T . returnNull ( T ) ; }
Code	{ return ( T ) T . returnNull ( T ) ; }
Distance : 11

64
Tree	{ return T ; }
Code	{ return T ; }
Distance : 15

65
Tree	{ return ( T ) returnNull ( Any.ANY ) . reportMatcher ( Object ) ; }
Code	{ return ( T ) returnNull ( Any.ANY ) . reportMatcher ( Object ) ; }
Distance : 11

66
Tree	{ super ( T ) ; returnNull ( Any.ANY ) ; }
Code	{ super ( T ) ; returnNull ( Any.ANY ) ; }
Distance : 12

67
Tree	{ super ( T . returnNull ( Object ) ) ; returnNull () ; }
Code	{ super ( T . returnNull ( Object ) ) ; returnNull () ; }
Distance : 9

68
Tree	{ return ( T ) returnNull ( Any.ANY ) . returnNull ( T ) ; }
Code	{ return ( T ) returnNull ( Any.ANY ) . returnNull ( T ) ; }
Distance : 11

69
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 14

70
Tree	{ super ( T ) ; returnNull ( Any.ANY ) ; } T
Code	{ super ( T ) ; returnNull ( Any.ANY ) ; } T
Distance : 13

71
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 14

72
Tree	{ return ( T ) this . T . returnNull () ; } Math
Code	{ return ( T ) this . T . returnNull () ; } Math
Distance : 10

73
Tree	{ return ( T ) reportMatcher ( T . returnNull () ) ; }
Code	{ return ( T ) reportMatcher ( T . returnNull () ) ; }
Distance : 9

74
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( T ) ; }
Distance : 10

75
Tree	{ super ( Object . reportMatcher ( Object ) ) ; returnNull () ; }
Code	{ super ( Object . reportMatcher ( Object ) ) ; returnNull () ; }
Distance : 9

76
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 14

77
Tree	{ super ( Object . reportMatcher ( T ) ) ; returnNull () ; }
Code	{ super ( Object . reportMatcher ( T ) ) ; returnNull () ; }
Distance : 10

78
Tree	{ return ( Object ) returnNull ( Any.ANY ) . returnNull () ; }
Code	{ return ( Object ) returnNull ( Any.ANY ) . returnNull () ; }
Distance : 9

79
Tree	{ return ( Object ) reportMatcher ( Object ) ; }
Code	{ return ( Object ) reportMatcher ( Object ) ; }
Distance : 10

80
Tree	{ return ( Object ) Object . returnNull () ; }
Code	{ return ( Object ) Object . returnNull () ; }
Distance : 10

81
Tree	{ super ( T ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( T ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

82
Tree	{ return ( T ) returnNull ( Object ) . returnNull () ; }
Code	{ return ( T ) returnNull ( Object ) . returnNull () ; }
Distance : 7

83
Tree	{ return ( Object ) T . returnNull () ; }
Code	{ return ( Object ) T . returnNull () ; }
Distance : 10

84
Tree	{ return reportMatcher () ; } Test
Code	{ return reportMatcher () ; } Test
Distance : 15

85
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 16

86
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return super(); ; }
Distance : 14

87
Tree	{ reportMatcher () ; return super(); ; }
Code	{ reportMatcher () ; return super(); ; }
Distance : 16

88
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 17

89
Tree	{ reportMatcher () ; return continue; ; }
Code	{ reportMatcher () ; return continue; ; }
Distance : 16

90
Tree	{ return ( T ) reportMatcher ( T ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( T ) . returnNull () ; }
Distance : 7

91
Tree	{ return ( T ) reportMatcher ( Object . returnNull () ) ; }
Code	{ return ( T ) reportMatcher ( Object . returnNull () ) ; }
Distance : 8

92
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( Object ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( Object ) ; }
Distance : 10

93
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 14

94
Tree	{ return ( T ) Object . reportMatcher () ; }
Code	{ return ( T ) Object . reportMatcher () ; }
Distance : 10

95
Tree	{ return ( Object ) Object . reportMatcher () ; }
Code	{ return ( Object ) Object . reportMatcher () ; }
Distance : 11

96
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 10

97
Tree	{ super ( T . returnNull ( T ) ) ; returnNull () ; }
Code	{ super ( T . returnNull ( T ) ) ; returnNull () ; }
Distance : 10

98
Tree	{ super ( T . reportMatcher ( T ) ) ; reportMatcher () ; }
Code	{ super ( T . reportMatcher ( T ) ) ; reportMatcher () ; }
Distance : 10

99
Tree	{ return ( Object ) this . T . reportMatcher () ; }
Code	{ return ( Object ) this . T . reportMatcher () ; }
Distance : 11

100
Tree	{ return ( Object ) T . returnNull ( Object ) ; }
Code	{ return ( Object ) T . returnNull ( Object ) ; }
Distance : 11

101
Tree	{ reportMatcher () ; return break; ; }
Code	{ reportMatcher () ; return break; ; }
Distance : 16

102
Tree	{ return ( Object ) T . returnNull ( T ) ; }
Code	{ return ( Object ) T . returnNull ( T ) ; }
Distance : 12

103
Tree	{ return ( T ) T . returnNull ( Object ) ; }
Code	{ return ( T ) T . returnNull ( Object ) ; }
Distance : 10

104
Tree	{ returnNull ( Any.ANY , Any.ANY ) ; return break; ; }
Code	{ returnNull ( Any.ANY , Any.ANY ) ; return break; ; }
Distance : 15

105
Tree	{ return ( T ) returnNull ( T ) . returnNull () ; }
Code	{ return ( T ) returnNull ( T ) . returnNull () ; }
Distance : 8

106
Tree	{ return ( Object ) T . reportMatcher () ; }
Code	{ return ( Object ) T . reportMatcher () ; }
Distance : 11

107
Tree	{ return reportMatcher ( Any.ANY ) ; } -
Code	{ return reportMatcher ( Any.ANY ) ; } -
Distance : 14

108
Tree	{ return ( T ) returnNull ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( T ) returnNull ( Any.ANY ) . reportMatcher () ; }
Distance : 9

109
Tree	{ return ( T ) reportMatcher ( Object ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( Object ) . returnNull () ; }
Distance : 6

110
Tree	{ return ( T ) this . T . returnNull () ; }
Code	{ return ( T ) this . T . returnNull () ; }
Distance : 9

111
Tree	{ return ( Object ) returnNull () ; }
Code	{ return ( Object ) returnNull () ; }
Distance : 11

112
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 14

113
Tree	{ return ( T ) reportMatcher () ; }
Code	{ return ( T ) reportMatcher () ; }
Distance : 11

114
Tree	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 14

115
Tree	{ returnNull () ; return null ; }
Code	{ returnNull () ; return null ; }
Distance : 17

116
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } source
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } source
Distance : 11

117
Tree	{ returnNull ( Any.ANY ) ; return null ; }
Code	{ returnNull ( Any.ANY ) ; return null ; }
Distance : 15

118
Tree	{ return ( T ) returnNull ( Object . returnNull () ) ; }
Code	{ return ( T ) returnNull ( Object . returnNull () ) ; }
Distance : 9

119
Tree	{ return ( T ) this . T . returnNull () ; } wanted
Code	{ return ( T ) this . T . returnNull () ; } wanted
Distance : 10

120
Tree	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 14

121
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } toString
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } toString
Distance : 11

122
Tree	{ return ( T ) returnNull ( T . reportMatcher () ) ; }
Code	{ return ( T ) returnNull ( T . reportMatcher () ) ; }
Distance : 10

123
Tree	{ return ( T ) T . reportMatcher () ; }
Code	{ return ( T ) T . reportMatcher () ; }
Distance : 11

124
Tree	{ return ( T ) this . Object . returnNull () ; }
Code	{ return ( T ) this . Object . returnNull () ; }
Distance : 9

125
Tree	{ return ( T ) reportMatcher ( Object . reportMatcher () ) ; }
Code	{ return ( T ) reportMatcher ( Object . reportMatcher () ) ; }
Distance : 8

126
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
Distance : 7

127
Tree	{ return ( Object ) reportMatcher ( Any.ANY ) . returnNull () ; }
Code	{ return ( Object ) reportMatcher ( Any.ANY ) . returnNull () ; }
Distance : 8

128
Tree	{ return ( Object ) reportMatcher ( T . returnNull () ) ; }
Code	{ return ( Object ) reportMatcher ( T . returnNull () ) ; }
Distance : 10

129
Tree	{ return Object ; }
Code	{ return Object ; }
Distance : 15

130
Tree	{ return reportMatcher () ; } ParamChecks
Code	{ return reportMatcher () ; } ParamChecks
Distance : 15

131
Tree	{ return ( T ) returnNull ( Object ) . reportMatcher () ; }
Code	{ return ( T ) returnNull ( Object ) . reportMatcher () ; }
Distance : 8

132
Tree	{ return ( Object ) returnNull ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Object ) returnNull ( Any.ANY ) . reportMatcher () ; }
Distance : 10

133
Tree	{ returnNull ( Any.ANY , Any.ANY ) ; return continue; ; }
Code	{ returnNull ( Any.ANY , Any.ANY ) ; return continue; ; }
Distance : 15

134
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return return; ; }
Distance : 14

135
Tree	{ reportMatcher () ; return return; ; }
Code	{ reportMatcher () ; return return; ; }
Distance : 16

136
Tree	{ return ( Object ) this . Object . returnNull () ; }
Code	{ return ( Object ) this . Object . returnNull () ; }
Distance : 10

137
Tree	{ return null ; }
Code	{ return null ; }
Distance : 16

138
Tree	{ return ( T ) Object . reportMatcher ( Object ) ; }
Code	{ return ( T ) Object . reportMatcher ( Object ) ; }
Distance : 10

139
Tree	{ return ( Object ) this . Object . reportMatcher () ; }
Code	{ return ( Object ) this . Object . reportMatcher () ; }
Distance : 11

140
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } options
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } options
Distance : 11

141
Tree	{ super ( T . returnNull ( Object ) ) ; reportMatcher () ; }
Code	{ super ( T . returnNull ( Object ) ) ; reportMatcher () ; }
Distance : 10

142
Tree	{ return reportMatcher ( Any.ANY ) ; } f
Code	{ return reportMatcher ( Any.ANY ) ; } f
Distance : 14

143
Tree	{ return ( T ) returnNull ( Any.ANY ) . returnNull ( Object ) ; }
Code	{ return ( T ) returnNull ( Any.ANY ) . returnNull ( Object ) ; }
Distance : 11

144
Tree	{ super ( T ) ; returnNull ( Any.ANY ) ; } toString
Code	{ super ( T ) ; returnNull ( Any.ANY ) ; } toString
Distance : 13

145
Tree	{ return ( T ) this . T . reportMatcher () ; }
Code	{ return ( T ) this . T . reportMatcher () ; }
Distance : 10

146
Tree	{ super ( Object ) ; returnNull ( Any.ANY ) ; }
Code	{ super ( Object ) ; returnNull ( Any.ANY ) ; }
Distance : 13

147
Tree	{ return ( T ) reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher ( T ) ; }
Distance : 10

148
Tree	{ return STRING_CONSTANT ; } mock
Code	{ return STRING_CONSTANT ; } mock
Distance : 17

149
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 16

150
Tree	{ return T ; } Test
Code	{ return T ; } Test
Distance : 16

151
Tree	{ reportMatcher () ; return null ; }
Code	{ reportMatcher () ; return null ; }
Distance : 16

152
Tree	{ return ( Object ) this . T . returnNull () ; }
Code	{ return ( Object ) this . T . returnNull () ; }
Distance : 10

153
Tree	{ return T ; } Class
Code	{ return T ; } Class
Distance : 16

154
Tree	{ super ( T . reportMatcher ( T ) ) ; returnNull () ; }
Code	{ super ( T . reportMatcher ( T ) ) ; returnNull () ; }
Distance : 9

155
Tree	{ return T ; } Preconditions
Code	{ return T ; } Preconditions
Distance : 16

156
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 14

157
Tree	{ return T ; } MathRuntimeException
Code	{ return T ; } MathRuntimeException
Distance : 16

158
Tree	{ return ( Object ) returnNull ( T ) ; }
Code	{ return ( Object ) returnNull ( T ) ; }
Distance : 12

159
Tree	{ return ( T ) reportMatcher ( Object ) ; }
Code	{ return ( T ) reportMatcher ( Object ) ; }
Distance : 9

160
Tree	{ return T ; } {}
Code	{ return T ; } {}
Distance : 16

161
Tree	{ return ( T ) this . Object . reportMatcher () ; }
Code	{ return ( T ) this . Object . reportMatcher () ; }
Distance : 10

162
Tree	{ return ( T ) reportMatcher ( T ) ; } wanted
Code	{ return ( T ) reportMatcher ( T ) ; } wanted
Distance : 11

163
Tree	{ return ( T ) T . reportMatcher ( T ) ; }
Code	{ return ( T ) T . reportMatcher ( T ) ; }
Distance : 11

164
Tree	{ super ( T ) ; returnNull ( Any.ANY ) ; } source
Code	{ super ( T ) ; returnNull ( Any.ANY ) ; } source
Distance : 13

165
Tree	{ return ( T ) reportMatcher ( T ) ; } Math
Code	{ return ( T ) reportMatcher ( T ) ; } Math
Distance : 11

166
Tree	{ return STRING_CONSTANT ; } MathRuntimeException
Code	{ return STRING_CONSTANT ; } MathRuntimeException
Distance : 17

167
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 16

168
Tree	{ return T ; } f
Code	{ return T ; } f
Distance : 16

169
Tree	{ return ( T ) reportMatcher () ; } source
Code	{ return ( T ) reportMatcher () ; } source
Distance : 12

170
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } p
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } p
Distance : 11

171
Tree	{ returnNull ( Any.ANY , Any.ANY ) ; return super(); ; }
Code	{ returnNull ( Any.ANY , Any.ANY ) ; return super(); ; }
Distance : 15

172
Tree	{ returnNull () ; return super(); ; }
Code	{ returnNull () ; return super(); ; }
Distance : 17

173
Tree	{ return ( T ) Object . reportMatcher ( T ) ; }
Code	{ return ( T ) Object . reportMatcher ( T ) ; }
Distance : 11

174
Tree	{ return T ; } ParamChecks
Code	{ return T ; } ParamChecks
Distance : 16

175
Tree	{ return reportMatcher () ; } Preconditions
Code	{ return reportMatcher () ; } Preconditions
Distance : 15

176
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 16

177
Tree	{ return ( Object ) reportMatcher ( T ) ; }
Code	{ return ( Object ) reportMatcher ( T ) ; }
Distance : 11

178
Tree	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 14

179
Tree	{ super ( Object ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Object ) ; reportMatcher ( Any.ANY ) ; }
Distance : 13

180
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } &&
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } &&
Distance : 11

181
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 16

182
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } T
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } T
Distance : 11

183
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

184
Tree	{ return ( T ) T . reportMatcher ( Object ) ; }
Code	{ return ( T ) T . reportMatcher ( Object ) ; }
Distance : 10

185
Tree	{ returnNull ( Any.ANY ) ; return return; ; }
Code	{ returnNull ( Any.ANY ) ; return return; ; }
Distance : 15

186
Tree	{ return ( T ) Object . returnNull ( T ) ; }
Code	{ return ( T ) Object . returnNull ( T ) ; }
Distance : 11

187
Tree	{ return reportMatcher ( Any.ANY ) ; } {}
Code	{ return reportMatcher ( Any.ANY ) ; } {}
Distance : 14

188
Tree	{ returnNull ( Any.ANY ) ; return break; ; }
Code	{ returnNull ( Any.ANY ) ; return break; ; }
Distance : 15

189
Tree	{ return ( T ) Object . returnNull ( Object ) ; }
Code	{ return ( T ) Object . returnNull ( Object ) ; }
Distance : 10

190
Tree	{ return ( T ) T . returnNull () ; } wanted
Code	{ return ( T ) T . returnNull () ; } wanted
Distance : 11

191
Tree	{ returnNull () ; return return; ; }
Code	{ returnNull () ; return return; ; }
Distance : 17

192
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } wanted
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } wanted
Distance : 8

193
Tree	{ return ( T ) returnNull ( Any.ANY ) . reportMatcher ( T ) ; }
Code	{ return ( T ) returnNull ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 11

194
Tree	{ return ( Object ) returnNull ( Object ) ; }
Code	{ return ( Object ) returnNull ( Object ) ; }
Distance : 11

195
Tree	{ return T ; } -
Code	{ return T ; } -
Distance : 16

196
Tree	{ super ( T ) ; returnNull ( Any.ANY ) ; } options
Code	{ super ( T ) ; returnNull ( Any.ANY ) ; } options
Distance : 13

197
Tree	{ return STRING_CONSTANT ; } Override
Code	{ return STRING_CONSTANT ; } Override
Distance : 17

198
Tree	{ return ( T ) reportMatcher () ; } toString
Code	{ return ( T ) reportMatcher () ; } toString
Distance : 12

199
Tree	{ return STRING_CONSTANT ; } -
Code	{ return STRING_CONSTANT ; } -
Distance : 17

========================================================================


========================================================================
Example Number: 99
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Short . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Short})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return this . Short ; } Override
Code	{ return this . Short ; } Override
Distance : 13

1
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) ; } -
Code	{ return ( Short ) reportMatcher ( Any.ANY ) ; } -
Distance : 11

2
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return ( Short ) reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 11

3
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) . returnZero () ; } p
Code	{ return ( Short ) reportMatcher ( Any.ANY ) . returnZero () ; } p
Distance : 9

4
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } options
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } options
Distance : 8

5
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } &&
Distance : 8

6
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } p
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } p
Distance : 8

7
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } source
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } source
Distance : 8

8
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } T
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } T
Distance : 8

9
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) ; } Class
Code	{ return ( Short ) reportMatcher ( Any.ANY ) ; } Class
Distance : 11

10
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) ; } Test
Code	{ return ( Short ) reportMatcher ( Any.ANY ) ; } Test
Distance : 11

11
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; } Class
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; } Class
Distance : 13

12
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) . returnZero () ; } T
Code	{ return ( Short ) reportMatcher ( Any.ANY ) . returnZero () ; } T
Distance : 9

13
Tree	{ returnZero ( Any.ANY ) ; Short = Any.ANY . reportMatcher () ; }
Code	{ returnZero ( Any.ANY ) ; Short = Any.ANY . reportMatcher () ; }
Distance : 10

14
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Short = true ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Short = true ; }
Distance : 11

15
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Short = Short ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Short = Short ; }
Distance : 12

16
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return ( Short ) reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 11

17
Tree	{ returnZero ( Any.ANY ) ; return break; ; }
Code	{ returnZero ( Any.ANY ) ; return break; ; }
Distance : 12

18
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) . returnZero () ; } &&
Code	{ return ( Short ) reportMatcher ( Any.ANY ) . returnZero () ; } &&
Distance : 9

19
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) . returnZero () ; } options
Code	{ return ( Short ) reportMatcher ( Any.ANY ) . returnZero () ; } options
Distance : 9

20
Tree	{ return this . Short ; } [
Code	{ return this . Short ; } [
Distance : 13

21
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; } toString
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; } toString
Distance : 10

22
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } {}
Distance : 12

23
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 12

24
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 12

25
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Distance : 12

26
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) . returnZero () ; } source
Code	{ return ( Short ) reportMatcher ( Any.ANY ) . returnZero () ; } source
Distance : 9

27
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; } source
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; } source
Distance : 10

28
Tree	{ return this . Short ; } class
Code	{ return this . Short ; } class
Distance : 13

29
Tree	{ return this . Short ; } array
Code	{ return this . Short ; } array
Distance : 13

30
Tree	{ return this . Short ; } mock
Code	{ return this . Short ; } mock
Distance : 13

31
Tree	{ return this . Short ; } MathRuntimeException
Code	{ return this . Short ; } MathRuntimeException
Distance : 13

32
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; } {}
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; } {}
Distance : 13

33
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

34
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; } options
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; } options
Distance : 10

35
Tree	{ return this . Short ; } -
Code	{ return this . Short ; } -
Distance : 13

36
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) . returnZero () ; } toString
Code	{ return ( Short ) reportMatcher ( Any.ANY ) . returnZero () ; } toString
Distance : 9

37
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; return }
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; return }
Distance : 13

38
Tree	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

39
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

40
Tree	{ return returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

41
Tree	{ return this . Short ; }
Code	{ return this . Short ; }
Distance : 12

42
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

43
Tree	{ return reportMatcher ( Any.ANY ) . < Short > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Short > returnZero () ; }
Distance : 8

44
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

45
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

46
Tree	{ returnZero ( Any.ANY ) ; return null ; }
Code	{ returnZero ( Any.ANY ) ; return null ; }
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

48
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

49
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

50
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

51
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

52
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

53
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

54
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Short ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

55
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; returnZero }
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; returnZero }
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) ; Short = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Short = Any.ANY . returnZero () ; }
Distance : 8

57
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

58
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; reportMatcher }
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; reportMatcher }
Distance : 13

59
Tree	{ returnZero ( Any.ANY ) ; return super(); ; }
Code	{ returnZero ( Any.ANY ) ; return super(); ; }
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) ; Short = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Short = Any.ANY . reportMatcher () ; }
Distance : 9

61
Tree	{ returnZero ( Any.ANY ) ; return return; ; }
Code	{ returnZero ( Any.ANY ) ; return return; ; }
Distance : 12

62
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

63
Tree	{ return returnZero ( Any.ANY ) ; }
Code	{ return returnZero ( Any.ANY ) ; }
Distance : 11

64
Tree	{ super ( Short ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( Short ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

65
Tree	{ super ( Short ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( Short ) ; returnZero ( Any.ANY ) ; }
Distance : 12

66
Tree	{ returnZero ( Any.ANY ) ; return false ; }
Code	{ returnZero ( Any.ANY ) ; return false ; }
Distance : 12

67
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 11

68
Tree	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; }
Distance : 11

69
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

70
Tree	{ return ( Short ) reportMatcher () ; }
Code	{ return ( Short ) reportMatcher () ; }
Distance : 9

71
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Short = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Short = false ; }
Distance : 11

72
Tree	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

73
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Short ) reportMatcher ( Any.ANY ) ; }
Distance : 10

74
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 13

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

76
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; } f
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; } f
Distance : 13

77
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Short = Short ; } T
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Short = Short ; } T
Distance : 13

78
Tree	{ return ( Short ) reportMatcher () ; } Test
Code	{ return ( Short ) reportMatcher () ; } Test
Distance : 10

79
Tree	{ return reportMatcher ( Any.ANY ) . < Short > returnZero () ; } options
Code	{ return reportMatcher ( Any.ANY ) . < Short > returnZero () ; } options
Distance : 9

80
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 11

81
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 11

82
Tree	{ super ( Short ) ; } -
Code	{ super ( Short ) ; } -
Distance : 12

83
Tree	{ super ( Short ) ; } [
Code	{ super ( Short ) ; } [
Distance : 12

84
Tree	{ super ( Short ) ; } f
Code	{ super ( Short ) ; } f
Distance : 12

85
Tree	{ super ( Short ) ; } Override
Code	{ super ( Short ) ; } Override
Distance : 12

86
Tree	{ super ( Short ) ; } MathRuntimeException
Code	{ super ( Short ) ; } MathRuntimeException
Distance : 12

87
Tree	{ super ( Short ) ; } mock
Code	{ super ( Short ) ; } mock
Distance : 12

88
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 14

89
Tree	{ return reportMatcher ( Any.ANY ) . < Short > returnZero () ; } p
Code	{ return reportMatcher ( Any.ANY ) . < Short > returnZero () ; } p
Distance : 9

90
Tree	{ return reportMatcher ( Any.ANY ) . < Short > returnZero () ; } T
Code	{ return reportMatcher ( Any.ANY ) . < Short > returnZero () ; } T
Distance : 9

91
Tree	{ reportMatcher ( Any.ANY ) ; Short = Any.ANY . returnZero () ; } toString
Code	{ reportMatcher ( Any.ANY ) ; Short = Any.ANY . returnZero () ; } toString
Distance : 9

92
Tree	{ reportMatcher ( Any.ANY ) ; Short = Any.ANY . returnZero () ; } source
Code	{ reportMatcher ( Any.ANY ) ; Short = Any.ANY . returnZero () ; } source
Distance : 9

93
Tree	{ reportMatcher ( Any.ANY ) ; Short = Any.ANY . returnZero () ; } p
Code	{ reportMatcher ( Any.ANY ) ; Short = Any.ANY . returnZero () ; } p
Distance : 9

94
Tree	{ reportMatcher ( Any.ANY ) ; Short = Any.ANY . returnZero () ; } &&
Code	{ reportMatcher ( Any.ANY ) ; Short = Any.ANY . returnZero () ; } &&
Distance : 9

95
Tree	{ return reportMatcher ( Any.ANY ) ; } -
Code	{ return reportMatcher ( Any.ANY ) ; } -
Distance : 11

96
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

97
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

98
Tree	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 11

99
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 13

100
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 14

101
Tree	{ return reportMatcher ( Any.ANY ) . < Short > returnZero () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . < Short > returnZero () ; } &&
Distance : 9

102
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Short = Short ; } &&
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Short = Short ; } &&
Distance : 13

103
Tree	{ super ( Short ) ; } notifyListeners
Code	{ super ( Short ) ; } notifyListeners
Distance : 12

104
Tree	{ return ( Short ) reportMatcher () ; } Class
Code	{ return ( Short ) reportMatcher () ; } Class
Distance : 10

105
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return false ; } &&
Distance : 12

106
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } p
Code	{ reportMatcher ( Any.ANY ) ; return false ; } p
Distance : 12

107
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } options
Code	{ reportMatcher ( Any.ANY ) ; return false ; } options
Distance : 12

108
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Short = Short ; } options
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Short = Short ; } options
Distance : 13

109
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

110
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } source
Code	{ reportMatcher ( Any.ANY ) ; return false ; } source
Distance : 12

111
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } toString
Code	{ reportMatcher ( Any.ANY ) ; return false ; } toString
Distance : 12

112
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

113
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

114
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

115
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

116
Tree	{ return ( Short ) reportMatcher () ; } -
Code	{ return ( Short ) reportMatcher () ; } -
Distance : 10

117
Tree	{ return ( Short ) reportMatcher () ; } ParamChecks
Code	{ return ( Short ) reportMatcher () ; } ParamChecks
Distance : 10

118
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Short = Short ; } p
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Short = Short ; } p
Distance : 13

119
Tree	{ return ( Short ) reportMatcher () ; } MathRuntimeException
Code	{ return ( Short ) reportMatcher () ; } MathRuntimeException
Distance : 10

120
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Short = false ; } wanted
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Short = false ; } wanted
Distance : 12

121
Tree	{ return ( Short ) reportMatcher () ; } Preconditions
Code	{ return ( Short ) reportMatcher () ; } Preconditions
Distance : 10

122
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Short = Short ; } source
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Short = Short ; } source
Distance : 13

123
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; Short = false ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; Short = false ; }
Distance : 12

124
Tree	{ super ( Short ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( Short ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

125
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Short = Short ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Short = Short ; }
Distance : 13

126
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

127
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Short = true ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Short = true ; }
Distance : 12

128
Tree	{ return this . Short ; } notifyListeners
Code	{ return this . Short ; } notifyListeners
Distance : 13

129
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Short = Short ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Short = Short ; }
Distance : 13

130
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } f
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } f
Distance : 12

131
Tree	{ return ( Short ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( Short ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

132
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) ; } {}
Code	{ return ( Short ) reportMatcher ( Any.ANY ) ; } {}
Distance : 11

133
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ParamChecks
Distance : 12

134
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; Short = true ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; Short = true ; }
Distance : 12

135
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; } T
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; } T
Distance : 10

136
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

137
Tree	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 11

138
Tree	{ return reportMatcher ( Any.ANY ) . < Short > returnZero () ; } source
Code	{ return reportMatcher ( Any.ANY ) . < Short > returnZero () ; } source
Distance : 9

139
Tree	{ return reportMatcher ( Any.ANY ) . < Short > returnZero () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . < Short > returnZero () ; } toString
Distance : 9

140
Tree	{ return reportMatcher ( Any.ANY ) ; } f
Code	{ return reportMatcher ( Any.ANY ) ; } f
Distance : 11

141
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; } Test
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; } Test
Distance : 13

142
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

143
Tree	{ super ( Short ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Short ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

144
Tree	{ return ( Short ) returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Short ) returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

145
Tree	{ returnZero ( Any.ANY ) ; return true ; }
Code	{ returnZero ( Any.ANY ) ; return true ; }
Distance : 12

146
Tree	{ return ( Short ) returnZero ( Any.ANY ) ; }
Code	{ return ( Short ) returnZero ( Any.ANY ) ; }
Distance : 10

147
Tree	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; } f
Code	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; } f
Distance : 12

148
Tree	{ returnZero ( Any.ANY ) ; Short = Any.ANY . returnZero () ; }
Code	{ returnZero ( Any.ANY ) ; Short = Any.ANY . returnZero () ; }
Distance : 9

149
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Short = false ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Short = false ; }
Distance : 12

150
Tree	{ return returnZero ( Any.ANY ) . < Short > returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . < Short > returnZero () ; }
Distance : 9

151
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ return ( Short ) reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 11

152
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Short = false ; } Math
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Short = false ; } Math
Distance : 12

153
Tree	{ returnZero ( Any.ANY ) ; this . Short = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) ; this . Short = Any.ANY ; }
Distance : 12

154
Tree	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; } {}
Code	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; } {}
Distance : 12

155
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; } &&
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; } &&
Distance : 10

156
Tree	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; } MathRuntimeException
Distance : 12

157
Tree	{ super ( Short ) ; returnZero ( Any.ANY ) ; return }
Code	{ super ( Short ) ; returnZero ( Any.ANY ) ; return }
Distance : 13

158
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

159
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Short = Short ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Short = Short ; }
Distance : 12

160
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Short = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Short = false ; }
Distance : 11

161
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

162
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } -
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } -
Distance : 12

163
Tree	{ return returnZero ( Any.ANY ) . < Short > reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . < Short > reportMatcher () ; }
Distance : 10

164
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Short = Short ; } toString
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Short = Short ; } toString
Distance : 13

165
Tree	{ return reportMatcher ( Any.ANY ) . < Short > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Short > reportMatcher () ; }
Distance : 9

166
Tree	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; } Class
Code	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; } Class
Distance : 12

167
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) ; } f
Code	{ return ( Short ) reportMatcher ( Any.ANY ) ; } f
Distance : 11

168
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } T
Code	{ reportMatcher ( Any.ANY ) ; return false ; } T
Distance : 12

169
Tree	{ super ( Short ) ; returnZero ( Any.ANY ) ; reportMatcher }
Code	{ super ( Short ) ; returnZero ( Any.ANY ) ; reportMatcher }
Distance : 13

170
Tree	{ return ( Short ) reportMatcher () ; } f
Code	{ return ( Short ) reportMatcher () ; } f
Distance : 10

171
Tree	{ return reportMatcher ( Any.ANY ) ; } {}
Code	{ return reportMatcher ( Any.ANY ) ; } {}
Distance : 11

172
Tree	{ super ( Short ) ; returnZero ( Any.ANY ) ; returnZero }
Code	{ super ( Short ) ; returnZero ( Any.ANY ) ; returnZero }
Distance : 12

173
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 13

174
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } toString
Distance : 8

175
Tree	{ super ( Short ) ; } array
Code	{ super ( Short ) ; } array
Distance : 12

176
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; } -
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; } -
Distance : 13

177
Tree	{ return ( Short ) reportMatcher () ; } {}
Code	{ return ( Short ) reportMatcher () ; } {}
Distance : 10

178
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; } p
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; } p
Distance : 10

179
Tree	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 11

180
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; Matcher }
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; Matcher }
Distance : 13

181
Tree	{ super ( Short ) ; }
Code	{ super ( Short ) ; }
Distance : 11

182
Tree	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; } Preconditions
Distance : 12

183
Tree	{ reportMatcher ( Any.ANY ) ; Short = Any.ANY . returnZero () ; } options
Code	{ reportMatcher ( Any.ANY ) ; Short = Any.ANY . returnZero () ; } options
Distance : 9

184
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; disableTypeCheck }
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; disableTypeCheck }
Distance : 13

185
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Distance : 12

186
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Short = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Short = true ; }
Distance : 11

187
Tree	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; } Test
Code	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; } Test
Distance : 12

188
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 14

189
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 14

190
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

191
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

192
Tree	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; } -
Code	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; } -
Distance : 12

193
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

194
Tree	{ return ( Short ) returnZero () ; }
Code	{ return ( Short ) returnZero () ; }
Distance : 8

195
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Short ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

196
Tree	{ return this . Short ; } f
Code	{ return this . Short ; } f
Distance : 13

197
Tree	{ super ( Short ) ; } class
Code	{ super ( Short ) ; } class
Distance : 12

198
Tree	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; } ParamChecks
Distance : 12

199
Tree	{ reportMatcher ( Any.ANY ) ; Short = Any.ANY . returnZero () ; } T
Code	{ reportMatcher ( Any.ANY ) ; Short = Any.ANY . returnZero () ; } T
Distance : 9

========================================================================


========================================================================
Example Number: 100
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Double . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Double})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return this . Double ; } Override
Code	{ return this . Double ; } Override
Distance : 13

1
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) ; } -
Code	{ return ( Double ) reportMatcher ( Any.ANY ) ; } -
Distance : 11

2
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return ( Double ) reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 11

3
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) ; } f
Code	{ return ( Double ) reportMatcher ( Any.ANY ) ; } f
Distance : 11

4
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) . returnZero () ; } p
Code	{ return ( Double ) reportMatcher ( Any.ANY ) . returnZero () ; } p
Distance : 9

5
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } &&
Distance : 8

6
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } source
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } source
Distance : 8

7
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } p
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } p
Distance : 8

8
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ return ( Double ) reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 11

9
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } toString
Distance : 8

10
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) ; } Test
Code	{ return ( Double ) reportMatcher ( Any.ANY ) ; } Test
Distance : 11

11
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } T
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } T
Distance : 8

12
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; } Class
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; } Class
Distance : 13

13
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Double = true ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Double = true ; }
Distance : 12

14
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Double = Double ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Double = Double ; }
Distance : 12

15
Tree	{ super ( Double ) ; returnZero ( Any.ANY ) ; return }
Code	{ super ( Double ) ; returnZero ( Any.ANY ) ; return }
Distance : 13

16
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return ( Double ) reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 11

17
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Double = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Double = true ; }
Distance : 11

18
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) . returnZero () ; } &&
Code	{ return ( Double ) reportMatcher ( Any.ANY ) . returnZero () ; } &&
Distance : 9

19
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) . returnZero () ; } options
Code	{ return ( Double ) reportMatcher ( Any.ANY ) . returnZero () ; } options
Distance : 9

20
Tree	{ return this . Double ; } [
Code	{ return this . Double ; } [
Distance : 13

21
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Distance : 12

22
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 12

23
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 12

24
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Distance : 12

25
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; } toString
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; } toString
Distance : 10

26
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) . returnZero () ; } source
Code	{ return ( Double ) reportMatcher ( Any.ANY ) . returnZero () ; } source
Distance : 9

27
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; } source
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; } source
Distance : 10

28
Tree	{ return this . Double ; } class
Code	{ return this . Double ; } class
Distance : 13

29
Tree	{ return this . Double ; } array
Code	{ return this . Double ; } array
Distance : 13

30
Tree	{ return this . Double ; } mock
Code	{ return this . Double ; } mock
Distance : 13

31
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; } {}
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; } {}
Distance : 13

32
Tree	{ return this . Double ; } MathRuntimeException
Code	{ return this . Double ; } MathRuntimeException
Distance : 13

33
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

34
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; } options
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; } options
Distance : 10

35
Tree	{ return this . Double ; } -
Code	{ return this . Double ; } -
Distance : 13

36
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) . returnZero () ; } toString
Code	{ return ( Double ) reportMatcher ( Any.ANY ) . returnZero () ; } toString
Distance : 9

37
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; return }
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; return }
Distance : 13

38
Tree	{ returnZero ( Any.ANY ) ; return break; ; }
Code	{ returnZero ( Any.ANY ) ; return break; ; }
Distance : 12

39
Tree	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

40
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

41
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

42
Tree	{ return returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

43
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

44
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

45
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

46
Tree	{ returnZero ( Any.ANY ) ; return null ; }
Code	{ returnZero ( Any.ANY ) ; return null ; }
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

48
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

49
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

50
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

51
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

52
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

53
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

54
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

55
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; returnZero }
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; returnZero }
Distance : 12

56
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

57
Tree	{ returnZero ( Any.ANY ) ; return false ; }
Code	{ returnZero ( Any.ANY ) ; return false ; }
Distance : 12

58
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; reportMatcher }
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; reportMatcher }
Distance : 13

59
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Double = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Double = false ; }
Distance : 11

60
Tree	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

61
Tree	{ return reportMatcher ( Any.ANY ) . < Double > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Double > reportMatcher () ; }
Distance : 9

62
Tree	{ returnZero ( Any.ANY ) ; return super(); ; }
Code	{ returnZero ( Any.ANY ) ; return super(); ; }
Distance : 12

63
Tree	{ reportMatcher ( Any.ANY ) ; Double = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Double = Any.ANY . returnZero () ; }
Distance : 8

64
Tree	{ returnZero ( Any.ANY ) ; return return; ; }
Code	{ returnZero ( Any.ANY ) ; return return; ; }
Distance : 12

65
Tree	{ super ( Double ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( Double ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

66
Tree	{ super ( Double ) ; }
Code	{ super ( Double ) ; }
Distance : 11

67
Tree	{ return reportMatcher ( Any.ANY ) . < Double > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Double > returnZero () ; }
Distance : 8

68
Tree	{ return ( Double ) reportMatcher () ; }
Code	{ return ( Double ) reportMatcher () ; }
Distance : 9

69
Tree	{ return ( Double ) returnZero ( Any.ANY ) ; }
Code	{ return ( Double ) returnZero ( Any.ANY ) ; }
Distance : 10

70
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

71
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Double ) reportMatcher ( Any.ANY ) ; }
Distance : 10

72
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Double ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

73
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 11

74
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 13

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

76
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; } f
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; } f
Distance : 13

77
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Double = Double ; } T
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Double = Double ; } T
Distance : 13

78
Tree	{ return ( Double ) reportMatcher () ; } Test
Code	{ return ( Double ) reportMatcher () ; } Test
Distance : 10

79
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 11

80
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 11

81
Tree	{ super ( Double ) ; } -
Code	{ super ( Double ) ; } -
Distance : 12

82
Tree	{ super ( Double ) ; } [
Code	{ super ( Double ) ; } [
Distance : 12

83
Tree	{ super ( Double ) ; } f
Code	{ super ( Double ) ; } f
Distance : 12

84
Tree	{ super ( Double ) ; } Override
Code	{ super ( Double ) ; } Override
Distance : 12

85
Tree	{ super ( Double ) ; } MathRuntimeException
Code	{ super ( Double ) ; } MathRuntimeException
Distance : 12

86
Tree	{ super ( Double ) ; } mock
Code	{ super ( Double ) ; } mock
Distance : 12

87
Tree	{ return reportMatcher ( Any.ANY ) . < Double > returnZero () ; } options
Code	{ return reportMatcher ( Any.ANY ) . < Double > returnZero () ; } options
Distance : 9

88
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 14

89
Tree	{ return reportMatcher ( Any.ANY ) . < Double > returnZero () ; } p
Code	{ return reportMatcher ( Any.ANY ) . < Double > returnZero () ; } p
Distance : 9

90
Tree	{ return reportMatcher ( Any.ANY ) . < Double > returnZero () ; } T
Code	{ return reportMatcher ( Any.ANY ) . < Double > returnZero () ; } T
Distance : 9

91
Tree	{ reportMatcher ( Any.ANY ) ; Double = Any.ANY . returnZero () ; } toString
Code	{ reportMatcher ( Any.ANY ) ; Double = Any.ANY . returnZero () ; } toString
Distance : 9

92
Tree	{ reportMatcher ( Any.ANY ) ; Double = Any.ANY . returnZero () ; } source
Code	{ reportMatcher ( Any.ANY ) ; Double = Any.ANY . returnZero () ; } source
Distance : 9

93
Tree	{ reportMatcher ( Any.ANY ) ; Double = Any.ANY . returnZero () ; } p
Code	{ reportMatcher ( Any.ANY ) ; Double = Any.ANY . returnZero () ; } p
Distance : 9

94
Tree	{ reportMatcher ( Any.ANY ) ; Double = Any.ANY . returnZero () ; } &&
Code	{ reportMatcher ( Any.ANY ) ; Double = Any.ANY . returnZero () ; } &&
Distance : 9

95
Tree	{ return reportMatcher ( Any.ANY ) ; } -
Code	{ return reportMatcher ( Any.ANY ) ; } -
Distance : 11

96
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

97
Tree	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 11

98
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

99
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 13

100
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 14

101
Tree	{ return reportMatcher ( Any.ANY ) . < Double > returnZero () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . < Double > returnZero () ; } &&
Distance : 9

102
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Double = Double ; } &&
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Double = Double ; } &&
Distance : 13

103
Tree	{ super ( Double ) ; } notifyListeners
Code	{ super ( Double ) ; } notifyListeners
Distance : 12

104
Tree	{ return ( Double ) reportMatcher () ; } Class
Code	{ return ( Double ) reportMatcher () ; } Class
Distance : 10

105
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return false ; } &&
Distance : 12

106
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } p
Code	{ reportMatcher ( Any.ANY ) ; return false ; } p
Distance : 12

107
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } options
Code	{ reportMatcher ( Any.ANY ) ; return false ; } options
Distance : 12

108
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } source
Code	{ reportMatcher ( Any.ANY ) ; return false ; } source
Distance : 12

109
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Double = Double ; } options
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Double = Double ; } options
Distance : 13

110
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

111
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } toString
Code	{ reportMatcher ( Any.ANY ) ; return false ; } toString
Distance : 12

112
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

113
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

114
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

115
Tree	{ return ( Double ) reportMatcher () ; } Preconditions
Code	{ return ( Double ) reportMatcher () ; } Preconditions
Distance : 10

116
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Double = false ; } wanted
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Double = false ; } wanted
Distance : 12

117
Tree	{ return ( Double ) reportMatcher () ; } ParamChecks
Code	{ return ( Double ) reportMatcher () ; } ParamChecks
Distance : 10

118
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

119
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Double = Double ; } p
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Double = Double ; } p
Distance : 13

120
Tree	{ return ( Double ) reportMatcher () ; } MathRuntimeException
Code	{ return ( Double ) reportMatcher () ; } MathRuntimeException
Distance : 10

121
Tree	{ return ( Double ) reportMatcher () ; } -
Code	{ return ( Double ) reportMatcher () ; } -
Distance : 10

122
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Double = Double ; } source
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Double = Double ; } source
Distance : 13

123
Tree	{ super ( Double ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( Double ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

124
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

125
Tree	{ returnZero ( Any.ANY ) ; Double = Any.ANY . reportMatcher () ; }
Code	{ returnZero ( Any.ANY ) ; Double = Any.ANY . reportMatcher () ; }
Distance : 10

126
Tree	{ super ( Double ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( Double ) ; returnZero ( Any.ANY ) ; }
Distance : 12

127
Tree	{ return this . Double ; } notifyListeners
Code	{ return this . Double ; } notifyListeners
Distance : 13

128
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Double = Double ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Double = Double ; }
Distance : 12

129
Tree	{ return ( Double ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( Double ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

130
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } {}
Distance : 12

131
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) ; } {}
Code	{ return ( Double ) reportMatcher ( Any.ANY ) ; } {}
Distance : 11

132
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; Double = true ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; Double = true ; }
Distance : 12

133
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; } T
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; } T
Distance : 10

134
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } f
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } f
Distance : 12

135
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Double = Double ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Double = Double ; }
Distance : 13

136
Tree	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 11

137
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Double = Double ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Double = Double ; }
Distance : 13

138
Tree	{ return reportMatcher ( Any.ANY ) ; } f
Code	{ return reportMatcher ( Any.ANY ) ; } f
Distance : 11

139
Tree	{ return reportMatcher ( Any.ANY ) . < Double > returnZero () ; } source
Code	{ return reportMatcher ( Any.ANY ) . < Double > returnZero () ; } source
Distance : 9

140
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; } &&
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; } &&
Distance : 10

141
Tree	{ return returnZero ( Any.ANY ) ; }
Code	{ return returnZero ( Any.ANY ) ; }
Distance : 11

142
Tree	{ return reportMatcher ( Any.ANY ) . < Double > returnZero () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . < Double > returnZero () ; } toString
Distance : 9

143
Tree	{ super ( Double ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Double ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

144
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Double ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

145
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Double = false ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Double = false ; }
Distance : 12

146
Tree	{ return ( Double ) returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Double ) returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

147
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; } Test
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; } Test
Distance : 13

148
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Double = true ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Double = true ; }
Distance : 11

149
Tree	{ return returnZero ( Any.ANY ) . < Double > returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . < Double > returnZero () ; }
Distance : 9

150
Tree	{ returnZero ( Any.ANY ) ; Double = Any.ANY . returnZero () ; }
Code	{ returnZero ( Any.ANY ) ; Double = Any.ANY . returnZero () ; }
Distance : 9

151
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } options
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } options
Distance : 8

152
Tree	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; } f
Code	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; } f
Distance : 12

153
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; Double = false ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; Double = false ; }
Distance : 12

154
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) ; } Class
Code	{ return ( Double ) reportMatcher ( Any.ANY ) ; } Class
Distance : 11

155
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Double = false ; } Math
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Double = false ; } Math
Distance : 12

156
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ParamChecks
Distance : 12

157
Tree	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; } {}
Code	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; } {}
Distance : 12

158
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; } p
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; } p
Distance : 10

159
Tree	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; } MathRuntimeException
Distance : 12

160
Tree	{ super ( Double ) ; returnZero ( Any.ANY ) ; returnZero }
Code	{ super ( Double ) ; returnZero ( Any.ANY ) ; returnZero }
Distance : 12

161
Tree	{ reportMatcher ( Any.ANY ) ; Double = Any.ANY . returnZero () ; } options
Code	{ reportMatcher ( Any.ANY ) ; Double = Any.ANY . returnZero () ; } options
Distance : 9

162
Tree	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; }
Distance : 11

163
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

164
Tree	{ returnZero ( Any.ANY ) ; this . Double = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) ; this . Double = Any.ANY ; }
Distance : 12

165
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Double = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Double = false ; }
Distance : 11

166
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } -
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } -
Distance : 12

167
Tree	{ super ( Double ) ; returnZero ( Any.ANY ) ; reportMatcher }
Code	{ super ( Double ) ; returnZero ( Any.ANY ) ; reportMatcher }
Distance : 13

168
Tree	{ return ( Double ) reportMatcher () ; } f
Code	{ return ( Double ) reportMatcher () ; } f
Distance : 10

169
Tree	{ return returnZero ( Any.ANY ) . < Double > reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . < Double > reportMatcher () ; }
Distance : 10

170
Tree	{ return reportMatcher ( Any.ANY ) ; } {}
Code	{ return reportMatcher ( Any.ANY ) ; } {}
Distance : 11

171
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Double = Double ; } toString
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Double = Double ; } toString
Distance : 13

172
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } T
Code	{ reportMatcher ( Any.ANY ) ; return false ; } T
Distance : 12

173
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 13

174
Tree	{ return ( Double ) reportMatcher () ; } {}
Code	{ return ( Double ) reportMatcher () ; } {}
Distance : 10

175
Tree	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 11

176
Tree	{ return ( Double ) returnZero () ; }
Code	{ return ( Double ) returnZero () ; }
Distance : 8

177
Tree	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; } Class
Code	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; } Class
Distance : 12

178
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; } -
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; } -
Distance : 13

179
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; Matcher }
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; Matcher }
Distance : 13

180
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) . returnZero () ; } T
Code	{ return ( Double ) reportMatcher ( Any.ANY ) . returnZero () ; } T
Distance : 9

181
Tree	{ super ( Double ) ; } array
Code	{ super ( Double ) ; } array
Distance : 12

182
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; disableTypeCheck }
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; disableTypeCheck }
Distance : 13

183
Tree	{ return this . Double ; }
Code	{ return this . Double ; }
Distance : 12

184
Tree	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; } Preconditions
Distance : 12

185
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

186
Tree	{ returnZero ( Any.ANY ) ; return true ; }
Code	{ returnZero ( Any.ANY ) ; return true ; }
Distance : 12

187
Tree	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; } Test
Code	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; } Test
Distance : 12

188
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 14

189
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 14

190
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

191
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

192
Tree	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; } -
Code	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; } -
Distance : 12

193
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

194
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

195
Tree	{ reportMatcher ( Any.ANY ) ; Double = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Double = Any.ANY . reportMatcher () ; }
Distance : 9

196
Tree	{ return this . Double ; } f
Code	{ return this . Double ; } f
Distance : 13

197
Tree	{ super ( Double ) ; } class
Code	{ super ( Double ) ; } class
Distance : 12

198
Tree	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; } ParamChecks
Distance : 12

199
Tree	{ reportMatcher ( Any.ANY ) ; Double = Any.ANY . returnZero () ; } T
Code	{ reportMatcher ( Any.ANY ) ; Double = Any.ANY . returnZero () ; } T
Distance : 9

========================================================================


========================================================================
Example Number: 101
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Float . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Float})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return this . Float ; } f
Code	{ return this . Float ; } f
Distance : 13

1
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; } Class
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; } Class
Distance : 13

2
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; } Test
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; } Test
Distance : 13

3
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return ( Float ) reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 11

4
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) ; } -
Code	{ return ( Float ) reportMatcher ( Any.ANY ) ; } -
Distance : 11

5
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) ; } {}
Code	{ return ( Float ) reportMatcher ( Any.ANY ) ; } {}
Distance : 11

6
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) . returnZero () ; } options
Code	{ return ( Float ) reportMatcher ( Any.ANY ) . returnZero () ; } options
Distance : 9

7
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ return ( Float ) reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 11

8
Tree	{ return this . Float ; } MathRuntimeException
Code	{ return this . Float ; } MathRuntimeException
Distance : 13

9
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) ; } Test
Code	{ return ( Float ) reportMatcher ( Any.ANY ) ; } Test
Distance : 11

10
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) . returnZero () ; } &&
Code	{ return ( Float ) reportMatcher ( Any.ANY ) . returnZero () ; } &&
Distance : 9

11
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } options
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } options
Distance : 8

12
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) . returnZero () ; } T
Code	{ return ( Float ) reportMatcher ( Any.ANY ) . returnZero () ; } T
Distance : 9

13
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Float = Float ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Float = Float ; }
Distance : 13

14
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Float = true ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Float = true ; }
Distance : 11

15
Tree	{ super ( Float ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Float ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

16
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) . returnZero () ; } p
Code	{ return ( Float ) reportMatcher ( Any.ANY ) . returnZero () ; } p
Distance : 9

17
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Float ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

18
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ParamChecks
Distance : 12

19
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) . returnZero () ; } toString
Code	{ return ( Float ) reportMatcher ( Any.ANY ) . returnZero () ; } toString
Distance : 9

20
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } &&
Distance : 8

21
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } T
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } T
Distance : 8

22
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } {}
Distance : 12

23
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 12

24
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 12

25
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Distance : 12

26
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; } toString
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; } toString
Distance : 10

27
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; } source
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; } source
Distance : 10

28
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; } T
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; } T
Distance : 10

29
Tree	{ return this . Float ; } notifyListeners
Code	{ return this . Float ; } notifyListeners
Distance : 13

30
Tree	{ return this . Float ; } class
Code	{ return this . Float ; } class
Distance : 13

31
Tree	{ return this . Float ; } -
Code	{ return this . Float ; } -
Distance : 13

32
Tree	{ return this . Float ; } [
Code	{ return this . Float ; } [
Distance : 13

33
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

34
Tree	{ return this . Float ; } array
Code	{ return this . Float ; } array
Distance : 13

35
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) . returnZero () ; } source
Code	{ return ( Float ) reportMatcher ( Any.ANY ) . returnZero () ; } source
Distance : 9

36
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } p
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } p
Distance : 8

37
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

38
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; Matcher }
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; Matcher }
Distance : 13

39
Tree	{ return ( Float ) reportMatcher () ; }
Code	{ return ( Float ) reportMatcher () ; }
Distance : 9

40
Tree	{ return ( Float ) returnZero ( Any.ANY ) ; }
Code	{ return ( Float ) returnZero ( Any.ANY ) ; }
Distance : 10

41
Tree	{ return ( Float ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( Float ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

42
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

43
Tree	{ return this . Float ; }
Code	{ return this . Float ; }
Distance : 12

44
Tree	{ super ( Float ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( Float ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

45
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Float ) reportMatcher ( Any.ANY ) ; }
Distance : 10

46
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Float ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

47
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

48
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

49
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

50
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

51
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

52
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

53
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

54
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

55
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

56
Tree	{ return reportMatcher ( Any.ANY ) . < Float > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Float > returnZero () ; }
Distance : 8

57
Tree	{ super ( Float ) ; }
Code	{ super ( Float ) ; }
Distance : 11

58
Tree	{ super ( Float ) ; returnZero ( Any.ANY ) ; returnZero }
Code	{ super ( Float ) ; returnZero ( Any.ANY ) ; returnZero }
Distance : 12

59
Tree	{ super ( Float ) ; returnZero ( Any.ANY ) ; return }
Code	{ super ( Float ) ; returnZero ( Any.ANY ) ; return }
Distance : 13

60
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; return }
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; return }
Distance : 13

61
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; returnZero }
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; returnZero }
Distance : 12

62
Tree	{ super ( Float ) ; returnZero ( Any.ANY ) ; reportMatcher }
Code	{ super ( Float ) ; returnZero ( Any.ANY ) ; reportMatcher }
Distance : 13

63
Tree	{ returnZero ( Any.ANY ) ; return false ; }
Code	{ returnZero ( Any.ANY ) ; return false ; }
Distance : 12

64
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; reportMatcher }
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; reportMatcher }
Distance : 13

65
Tree	{ return reportMatcher ( Any.ANY ) . < Float > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Float > reportMatcher () ; }
Distance : 9

66
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

67
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

68
Tree	{ reportMatcher ( Any.ANY ) ; Float = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Float = Any.ANY . returnZero () ; }
Distance : 8

69
Tree	{ return returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

70
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

71
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

72
Tree	{ returnZero ( Any.ANY ) ; return null ; }
Code	{ returnZero ( Any.ANY ) ; return null ; }
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

74
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 13

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

76
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; } f
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; } f
Distance : 13

77
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

78
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

79
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

80
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 11

81
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 11

82
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

83
Tree	{ super ( Float ) ; } [
Code	{ super ( Float ) ; } [
Distance : 12

84
Tree	{ super ( Float ) ; } f
Code	{ super ( Float ) ; } f
Distance : 12

85
Tree	{ super ( Float ) ; } Override
Code	{ super ( Float ) ; } Override
Distance : 12

86
Tree	{ super ( Float ) ; } MathRuntimeException
Code	{ super ( Float ) ; } MathRuntimeException
Distance : 12

87
Tree	{ super ( Float ) ; } mock
Code	{ super ( Float ) ; } mock
Distance : 12

88
Tree	{ return reportMatcher ( Any.ANY ) . < Float > returnZero () ; } options
Code	{ return reportMatcher ( Any.ANY ) . < Float > returnZero () ; } options
Distance : 9

89
Tree	{ return reportMatcher ( Any.ANY ) . < Float > returnZero () ; } p
Code	{ return reportMatcher ( Any.ANY ) . < Float > returnZero () ; } p
Distance : 9

90
Tree	{ return reportMatcher ( Any.ANY ) . < Float > returnZero () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . < Float > returnZero () ; } &&
Distance : 9

91
Tree	{ return reportMatcher ( Any.ANY ) . < Float > returnZero () ; } T
Code	{ return reportMatcher ( Any.ANY ) . < Float > returnZero () ; } T
Distance : 9

92
Tree	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 11

93
Tree	{ reportMatcher ( Any.ANY ) ; Float = Any.ANY . returnZero () ; } toString
Code	{ reportMatcher ( Any.ANY ) ; Float = Any.ANY . returnZero () ; } toString
Distance : 9

94
Tree	{ reportMatcher ( Any.ANY ) ; Float = Any.ANY . returnZero () ; } source
Code	{ reportMatcher ( Any.ANY ) ; Float = Any.ANY . returnZero () ; } source
Distance : 9

95
Tree	{ reportMatcher ( Any.ANY ) ; Float = Any.ANY . returnZero () ; } p
Code	{ reportMatcher ( Any.ANY ) ; Float = Any.ANY . returnZero () ; } p
Distance : 9

96
Tree	{ reportMatcher ( Any.ANY ) ; Float = Any.ANY . returnZero () ; } &&
Code	{ reportMatcher ( Any.ANY ) ; Float = Any.ANY . returnZero () ; } &&
Distance : 9

97
Tree	{ super ( Float ) ; } notifyListeners
Code	{ super ( Float ) ; } notifyListeners
Distance : 12

98
Tree	{ return ( Float ) reportMatcher () ; } Test
Code	{ return ( Float ) reportMatcher () ; } Test
Distance : 10

99
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 14

100
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 13

101
Tree	{ return reportMatcher ( Any.ANY ) ; } -
Code	{ return reportMatcher ( Any.ANY ) ; } -
Distance : 11

102
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Float = Float ; } T
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Float = Float ; } T
Distance : 13

103
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 14

104
Tree	{ super ( Float ) ; } -
Code	{ super ( Float ) ; } -
Distance : 12

105
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Float = Float ; } options
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Float = Float ; } options
Distance : 13

106
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Float = Float ; } p
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Float = Float ; } p
Distance : 13

107
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Float = Float ; } source
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Float = Float ; } source
Distance : 13

108
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return false ; } &&
Distance : 12

109
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } p
Code	{ reportMatcher ( Any.ANY ) ; return false ; } p
Distance : 12

110
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } options
Code	{ reportMatcher ( Any.ANY ) ; return false ; } options
Distance : 12

111
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } source
Code	{ reportMatcher ( Any.ANY ) ; return false ; } source
Distance : 12

112
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } toString
Code	{ reportMatcher ( Any.ANY ) ; return false ; } toString
Distance : 12

113
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Float = Float ; } &&
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Float = Float ; } &&
Distance : 13

114
Tree	{ return ( Float ) reportMatcher () ; } Preconditions
Code	{ return ( Float ) reportMatcher () ; } Preconditions
Distance : 10

115
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

116
Tree	{ return ( Float ) reportMatcher () ; } ParamChecks
Code	{ return ( Float ) reportMatcher () ; } ParamChecks
Distance : 10

117
Tree	{ return ( Float ) reportMatcher () ; } Class
Code	{ return ( Float ) reportMatcher () ; } Class
Distance : 10

118
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

119
Tree	{ return ( Float ) reportMatcher () ; } MathRuntimeException
Code	{ return ( Float ) reportMatcher () ; } MathRuntimeException
Distance : 10

120
Tree	{ return ( Float ) reportMatcher () ; } -
Code	{ return ( Float ) reportMatcher () ; } -
Distance : 10

121
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Float = false ; } wanted
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Float = false ; } wanted
Distance : 12

122
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

123
Tree	{ returnZero ( Any.ANY ) ; Float = Any.ANY . reportMatcher () ; }
Code	{ returnZero ( Any.ANY ) ; Float = Any.ANY . reportMatcher () ; }
Distance : 10

124
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

125
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; Float = false ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; Float = false ; }
Distance : 12

126
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Float = true ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Float = true ; }
Distance : 12

127
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; } &&
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; } &&
Distance : 10

128
Tree	{ super ( Float ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( Float ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

129
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Float = Float ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Float = Float ; }
Distance : 13

130
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } f
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } f
Distance : 12

131
Tree	{ return ( Float ) returnZero () ; }
Code	{ return ( Float ) returnZero () ; }
Distance : 8

132
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) ; } f
Code	{ return ( Float ) reportMatcher ( Any.ANY ) ; } f
Distance : 11

133
Tree	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

134
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; } {}
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; } {}
Distance : 13

135
Tree	{ return this . Float ; } mock
Code	{ return this . Float ; } mock
Distance : 13

136
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; Float = true ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; Float = true ; }
Distance : 12

137
Tree	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; } f
Code	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; } f
Distance : 12

138
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } source
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } source
Distance : 8

139
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Float = false ; } Math
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Float = false ; } Math
Distance : 12

140
Tree	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; } {}
Code	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; } {}
Distance : 12

141
Tree	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 11

142
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } toString
Distance : 8

143
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; } p
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; } p
Distance : 10

144
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Float = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Float = false ; }
Distance : 11

145
Tree	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; } MathRuntimeException
Distance : 12

146
Tree	{ return reportMatcher ( Any.ANY ) . < Float > returnZero () ; } source
Code	{ return reportMatcher ( Any.ANY ) . < Float > returnZero () ; } source
Distance : 9

147
Tree	{ return reportMatcher ( Any.ANY ) ; } f
Code	{ return reportMatcher ( Any.ANY ) ; } f
Distance : 11

148
Tree	{ returnZero ( Any.ANY ) ; return return; ; }
Code	{ returnZero ( Any.ANY ) ; return return; ; }
Distance : 12

149
Tree	{ return reportMatcher ( Any.ANY ) . < Float > returnZero () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . < Float > returnZero () ; } toString
Distance : 9

150
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

151
Tree	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

152
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Float = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Float = true ; }
Distance : 11

153
Tree	{ returnZero ( Any.ANY ) ; return break; ; }
Code	{ returnZero ( Any.ANY ) ; return break; ; }
Distance : 12

154
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Float = false ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Float = false ; }
Distance : 12

155
Tree	{ return returnZero ( Any.ANY ) . < Float > returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . < Float > returnZero () ; }
Distance : 9

156
Tree	{ returnZero ( Any.ANY ) ; Float = Any.ANY . returnZero () ; }
Code	{ returnZero ( Any.ANY ) ; Float = Any.ANY . returnZero () ; }
Distance : 9

157
Tree	{ returnZero ( Any.ANY ) ; return true ; }
Code	{ returnZero ( Any.ANY ) ; return true ; }
Distance : 12

158
Tree	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; }
Distance : 11

159
Tree	{ returnZero ( Any.ANY ) ; this . Float = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) ; this . Float = Any.ANY ; }
Distance : 12

160
Tree	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; } Class
Code	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; } Class
Distance : 12

161
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Float = Float ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Float = Float ; }
Distance : 12

162
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return ( Float ) reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 11

163
Tree	{ super ( Float ) ; } array
Code	{ super ( Float ) ; } array
Distance : 12

164
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } -
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } -
Distance : 12

165
Tree	{ reportMatcher ( Any.ANY ) ; Float = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Float = Any.ANY . reportMatcher () ; }
Distance : 9

166
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

167
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; } options
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; } options
Distance : 10

168
Tree	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; } Preconditions
Distance : 12

169
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Float = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Float = false ; }
Distance : 11

170
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) ; } Class
Code	{ return ( Float ) reportMatcher ( Any.ANY ) ; } Class
Distance : 11

171
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; disableTypeCheck }
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; disableTypeCheck }
Distance : 13

172
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Float = Float ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Float = Float ; }
Distance : 12

173
Tree	{ return ( Float ) returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Float ) returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

174
Tree	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; } Test
Code	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; } Test
Distance : 12

175
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 14

176
Tree	{ super ( Float ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( Float ) ; returnZero ( Any.ANY ) ; }
Distance : 12

177
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 14

178
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Distance : 12

179
Tree	{ return returnZero ( Any.ANY ) . < Float > reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . < Float > reportMatcher () ; }
Distance : 10

180
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Float = Float ; } toString
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Float = Float ; } toString
Distance : 13

181
Tree	{ return returnZero ( Any.ANY ) ; }
Code	{ return returnZero ( Any.ANY ) ; }
Distance : 11

182
Tree	{ return ( Float ) reportMatcher () ; } f
Code	{ return ( Float ) reportMatcher () ; } f
Distance : 10

183
Tree	{ return reportMatcher ( Any.ANY ) ; } {}
Code	{ return reportMatcher ( Any.ANY ) ; } {}
Distance : 11

184
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } T
Code	{ reportMatcher ( Any.ANY ) ; return false ; } T
Distance : 12

185
Tree	{ reportMatcher ( Any.ANY ) ; Float = Any.ANY . returnZero () ; } options
Code	{ reportMatcher ( Any.ANY ) ; Float = Any.ANY . returnZero () ; } options
Distance : 9

186
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 13

187
Tree	{ return ( Float ) reportMatcher () ; } {}
Code	{ return ( Float ) reportMatcher () ; } {}
Distance : 10

188
Tree	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 11

189
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

190
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; } -
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; } -
Distance : 13

191
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

192
Tree	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; } -
Code	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; } -
Distance : 12

193
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

194
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 11

195
Tree	{ returnZero ( Any.ANY ) ; return super(); ; }
Code	{ returnZero ( Any.ANY ) ; return super(); ; }
Distance : 12

196
Tree	{ return this . Float ; } Override
Code	{ return this . Float ; } Override
Distance : 13

197
Tree	{ super ( Float ) ; } class
Code	{ super ( Float ) ; } class
Distance : 12

198
Tree	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; } ParamChecks
Distance : 12

199
Tree	{ reportMatcher ( Any.ANY ) ; Float = Any.ANY . returnZero () ; } T
Code	{ reportMatcher ( Any.ANY ) ; Float = Any.ANY . returnZero () ; } T
Distance : 9

========================================================================


========================================================================
Example Number: 102
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Long . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Long})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return this . Long ; } Override
Code	{ return this . Long ; } Override
Distance : 13

1
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) ; } {}
Code	{ return ( Long ) reportMatcher ( Any.ANY ) ; } {}
Distance : 11

2
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) . returnZero () ; } p
Code	{ return ( Long ) reportMatcher ( Any.ANY ) . returnZero () ; } p
Distance : 9

3
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return ( Long ) reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 11

4
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } p
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } p
Distance : 8

5
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return ( Long ) reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 11

6
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ return ( Long ) reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 11

7
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) ; } Class
Code	{ return ( Long ) reportMatcher ( Any.ANY ) ; } Class
Distance : 11

8
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) ; } -
Code	{ return ( Long ) reportMatcher ( Any.ANY ) ; } -
Distance : 11

9
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } T
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } T
Distance : 8

10
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } source
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } source
Distance : 8

11
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) . returnZero () ; } T
Code	{ return ( Long ) reportMatcher ( Any.ANY ) . returnZero () ; } T
Distance : 9

12
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } toString
Distance : 8

13
Tree	{ return returnZero ( Any.ANY ) . < Long > reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . < Long > reportMatcher () ; }
Distance : 10

14
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; Long = false ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; Long = false ; }
Distance : 12

15
Tree	{ super ( Long ) ; returnZero ( Any.ANY ) ; returnZero }
Code	{ super ( Long ) ; returnZero ( Any.ANY ) ; returnZero }
Distance : 12

16
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) ; } f
Code	{ return ( Long ) reportMatcher ( Any.ANY ) ; } f
Distance : 11

17
Tree	{ super ( Long ) ; returnZero ( Any.ANY ) ; return }
Code	{ super ( Long ) ; returnZero ( Any.ANY ) ; return }
Distance : 13

18
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) . returnZero () ; } &&
Code	{ return ( Long ) reportMatcher ( Any.ANY ) . returnZero () ; } &&
Distance : 9

19
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) . returnZero () ; } options
Code	{ return ( Long ) reportMatcher ( Any.ANY ) . returnZero () ; } options
Distance : 9

20
Tree	{ return this . Long ; } [
Code	{ return this . Long ; } [
Distance : 13

21
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Distance : 12

22
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 12

23
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 12

24
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Distance : 12

25
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; } toString
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; } toString
Distance : 10

26
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) . returnZero () ; } source
Code	{ return ( Long ) reportMatcher ( Any.ANY ) . returnZero () ; } source
Distance : 9

27
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; } source
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; } source
Distance : 10

28
Tree	{ return this . Long ; } class
Code	{ return this . Long ; } class
Distance : 13

29
Tree	{ return this . Long ; } array
Code	{ return this . Long ; } array
Distance : 13

30
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; } {}
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; } {}
Distance : 13

31
Tree	{ return this . Long ; } mock
Code	{ return this . Long ; } mock
Distance : 13

32
Tree	{ return this . Long ; } MathRuntimeException
Code	{ return this . Long ; } MathRuntimeException
Distance : 13

33
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

34
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; } options
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; } options
Distance : 10

35
Tree	{ return this . Long ; } -
Code	{ return this . Long ; } -
Distance : 13

36
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) . returnZero () ; } toString
Code	{ return ( Long ) reportMatcher ( Any.ANY ) . returnZero () ; } toString
Distance : 9

37
Tree	{ returnZero ( Any.ANY ) ; return break; ; }
Code	{ returnZero ( Any.ANY ) ; return break; ; }
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Long = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Long = false ; }
Distance : 11

39
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

40
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Long ) reportMatcher ( Any.ANY ) ; }
Distance : 10

41
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Long ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

42
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

43
Tree	{ return this . Long ; }
Code	{ return this . Long ; }
Distance : 12

44
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

45
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

46
Tree	{ returnZero ( Any.ANY ) ; return null ; }
Code	{ returnZero ( Any.ANY ) ; return null ; }
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

48
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

49
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

50
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

51
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

52
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

53
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

54
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

55
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; return }
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; return }
Distance : 13

56
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Long = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Long = false ; }
Distance : 11

57
Tree	{ return ( Long ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( Long ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

58
Tree	{ super ( Long ) ; returnZero ( Any.ANY ) ; reportMatcher }
Code	{ super ( Long ) ; returnZero ( Any.ANY ) ; reportMatcher }
Distance : 13

59
Tree	{ returnZero ( Any.ANY ) ; return super(); ; }
Code	{ returnZero ( Any.ANY ) ; return super(); ; }
Distance : 12

60
Tree	{ return reportMatcher ( Any.ANY ) . < Long > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Long > reportMatcher () ; }
Distance : 9

61
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; reportMatcher }
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; reportMatcher }
Distance : 13

62
Tree	{ returnZero ( Any.ANY ) ; return return; ; }
Code	{ returnZero ( Any.ANY ) ; return return; ; }
Distance : 12

63
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

64
Tree	{ return returnZero ( Any.ANY ) ; }
Code	{ return returnZero ( Any.ANY ) ; }
Distance : 11

65
Tree	{ returnZero ( Any.ANY ) ; return false ; }
Code	{ returnZero ( Any.ANY ) ; return false ; }
Distance : 12

66
Tree	{ super ( Long ) ; }
Code	{ super ( Long ) ; }
Distance : 11

67
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 11

68
Tree	{ return ( Long ) returnZero () ; }
Code	{ return ( Long ) returnZero () ; }
Distance : 8

69
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

70
Tree	{ super ( Long ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( Long ) ; returnZero ( Any.ANY ) ; }
Distance : 12

71
Tree	{ return ( Long ) returnZero ( Any.ANY ) ; }
Code	{ return ( Long ) returnZero ( Any.ANY ) ; }
Distance : 10

72
Tree	{ super ( Long ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( Long ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

73
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

74
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 13

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

76
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; } f
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; } f
Distance : 13

77
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Long = Long ; } T
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Long = Long ; } T
Distance : 13

78
Tree	{ return ( Long ) reportMatcher () ; } Test
Code	{ return ( Long ) reportMatcher () ; } Test
Distance : 10

79
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 11

80
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 11

81
Tree	{ super ( Long ) ; } -
Code	{ super ( Long ) ; } -
Distance : 12

82
Tree	{ super ( Long ) ; } [
Code	{ super ( Long ) ; } [
Distance : 12

83
Tree	{ super ( Long ) ; } f
Code	{ super ( Long ) ; } f
Distance : 12

84
Tree	{ super ( Long ) ; } Override
Code	{ super ( Long ) ; } Override
Distance : 12

85
Tree	{ super ( Long ) ; } MathRuntimeException
Code	{ super ( Long ) ; } MathRuntimeException
Distance : 12

86
Tree	{ super ( Long ) ; } mock
Code	{ super ( Long ) ; } mock
Distance : 12

87
Tree	{ return reportMatcher ( Any.ANY ) . < Long > returnZero () ; } options
Code	{ return reportMatcher ( Any.ANY ) . < Long > returnZero () ; } options
Distance : 9

88
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 14

89
Tree	{ return reportMatcher ( Any.ANY ) . < Long > returnZero () ; } p
Code	{ return reportMatcher ( Any.ANY ) . < Long > returnZero () ; } p
Distance : 9

90
Tree	{ return reportMatcher ( Any.ANY ) . < Long > returnZero () ; } T
Code	{ return reportMatcher ( Any.ANY ) . < Long > returnZero () ; } T
Distance : 9

91
Tree	{ reportMatcher ( Any.ANY ) ; Long = Any.ANY . returnZero () ; } toString
Code	{ reportMatcher ( Any.ANY ) ; Long = Any.ANY . returnZero () ; } toString
Distance : 9

92
Tree	{ reportMatcher ( Any.ANY ) ; Long = Any.ANY . returnZero () ; } source
Code	{ reportMatcher ( Any.ANY ) ; Long = Any.ANY . returnZero () ; } source
Distance : 9

93
Tree	{ reportMatcher ( Any.ANY ) ; Long = Any.ANY . returnZero () ; } p
Code	{ reportMatcher ( Any.ANY ) ; Long = Any.ANY . returnZero () ; } p
Distance : 9

94
Tree	{ reportMatcher ( Any.ANY ) ; Long = Any.ANY . returnZero () ; } &&
Code	{ reportMatcher ( Any.ANY ) ; Long = Any.ANY . returnZero () ; } &&
Distance : 9

95
Tree	{ return reportMatcher ( Any.ANY ) ; } -
Code	{ return reportMatcher ( Any.ANY ) ; } -
Distance : 11

96
Tree	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 11

97
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

98
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

99
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 13

100
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 14

101
Tree	{ return reportMatcher ( Any.ANY ) . < Long > returnZero () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . < Long > returnZero () ; } &&
Distance : 9

102
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Long = Long ; } &&
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Long = Long ; } &&
Distance : 13

103
Tree	{ super ( Long ) ; } notifyListeners
Code	{ super ( Long ) ; } notifyListeners
Distance : 12

104
Tree	{ return ( Long ) reportMatcher () ; } Class
Code	{ return ( Long ) reportMatcher () ; } Class
Distance : 10

105
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } source
Code	{ reportMatcher ( Any.ANY ) ; return false ; } source
Distance : 12

106
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } toString
Code	{ reportMatcher ( Any.ANY ) ; return false ; } toString
Distance : 12

107
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Long = Long ; } options
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Long = Long ; } options
Distance : 13

108
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return false ; } &&
Distance : 12

109
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

110
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

111
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

112
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } options
Code	{ reportMatcher ( Any.ANY ) ; return false ; } options
Distance : 12

113
Tree	{ return ( Long ) reportMatcher () ; } Preconditions
Code	{ return ( Long ) reportMatcher () ; } Preconditions
Distance : 10

114
Tree	{ return ( Long ) reportMatcher () ; } -
Code	{ return ( Long ) reportMatcher () ; } -
Distance : 10

115
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } p
Code	{ reportMatcher ( Any.ANY ) ; return false ; } p
Distance : 12

116
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

117
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

118
Tree	{ return ( Long ) reportMatcher () ; } MathRuntimeException
Code	{ return ( Long ) reportMatcher () ; } MathRuntimeException
Distance : 10

119
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Long = false ; } wanted
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Long = false ; } wanted
Distance : 12

120
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Long = Long ; } source
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Long = Long ; } source
Distance : 13

121
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Long = Long ; } p
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Long = Long ; } p
Distance : 13

122
Tree	{ return ( Long ) reportMatcher () ; } ParamChecks
Code	{ return ( Long ) reportMatcher () ; } ParamChecks
Distance : 10

123
Tree	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

124
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Long = true ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Long = true ; }
Distance : 12

125
Tree	{ return ( Long ) reportMatcher () ; }
Code	{ return ( Long ) reportMatcher () ; }
Distance : 9

126
Tree	{ return this . Long ; } notifyListeners
Code	{ return this . Long ; } notifyListeners
Distance : 13

127
Tree	{ returnZero ( Any.ANY ) ; Long = Any.ANY . reportMatcher () ; }
Code	{ returnZero ( Any.ANY ) ; Long = Any.ANY . reportMatcher () ; }
Distance : 10

128
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } {}
Distance : 12

129
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Long = Long ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Long = Long ; }
Distance : 13

130
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

131
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } f
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } f
Distance : 12

132
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; Long = true ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; Long = true ; }
Distance : 12

133
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; } T
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; } T
Distance : 10

134
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } options
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } options
Distance : 8

135
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Long = Long ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Long = Long ; }
Distance : 13

136
Tree	{ super ( Long ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( Long ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

137
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

138
Tree	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 11

139
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; } &&
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; } &&
Distance : 10

140
Tree	{ return reportMatcher ( Any.ANY ) . < Long > returnZero () ; } source
Code	{ return reportMatcher ( Any.ANY ) . < Long > returnZero () ; } source
Distance : 9

141
Tree	{ return reportMatcher ( Any.ANY ) . < Long > returnZero () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . < Long > returnZero () ; } toString
Distance : 9

142
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) ; } Test
Code	{ return ( Long ) reportMatcher ( Any.ANY ) ; } Test
Distance : 11

143
Tree	{ return reportMatcher ( Any.ANY ) ; } f
Code	{ return reportMatcher ( Any.ANY ) ; } f
Distance : 11

144
Tree	{ reportMatcher ( Any.ANY ) ; Long = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Long = Any.ANY . reportMatcher () ; }
Distance : 9

145
Tree	{ return ( Long ) returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Long ) returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

146
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Long = Long ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Long = Long ; }
Distance : 12

147
Tree	{ returnZero ( Any.ANY ) ; return true ; }
Code	{ returnZero ( Any.ANY ) ; return true ; }
Distance : 12

148
Tree	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; } f
Code	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; } f
Distance : 12

149
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Long = false ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Long = false ; }
Distance : 12

150
Tree	{ returnZero ( Any.ANY ) ; this . Long = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) ; this . Long = Any.ANY ; }
Distance : 12

151
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Long = false ; } Math
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Long = false ; } Math
Distance : 12

152
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; } Class
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; } Class
Distance : 13

153
Tree	{ returnZero ( Any.ANY ) ; Long = Any.ANY . returnZero () ; }
Code	{ returnZero ( Any.ANY ) ; Long = Any.ANY . returnZero () ; }
Distance : 9

154
Tree	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; } {}
Code	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; } {}
Distance : 12

155
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ParamChecks
Distance : 12

156
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Long = true ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Long = true ; }
Distance : 11

157
Tree	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; } MathRuntimeException
Distance : 12

158
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; Matcher }
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; Matcher }
Distance : 13

159
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

160
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; } p
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; } p
Distance : 10

161
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } &&
Distance : 8

162
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } -
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } -
Distance : 12

163
Tree	{ return returnZero ( Any.ANY ) . < Long > returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . < Long > returnZero () ; }
Distance : 9

164
Tree	{ return reportMatcher ( Any.ANY ) . < Long > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Long > returnZero () ; }
Distance : 8

165
Tree	{ return returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

166
Tree	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; } Class
Code	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; } Class
Distance : 12

167
Tree	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

168
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Long = Long ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Long = Long ; }
Distance : 12

169
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Long = Long ; } toString
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Long = Long ; } toString
Distance : 13

170
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; disableTypeCheck }
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; disableTypeCheck }
Distance : 13

171
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } T
Code	{ reportMatcher ( Any.ANY ) ; return false ; } T
Distance : 12

172
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; returnZero }
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; returnZero }
Distance : 12

173
Tree	{ super ( Long ) ; } array
Code	{ super ( Long ) ; } array
Distance : 12

174
Tree	{ return ( Long ) reportMatcher () ; } f
Code	{ return ( Long ) reportMatcher () ; } f
Distance : 10

175
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 13

176
Tree	{ return reportMatcher ( Any.ANY ) ; } {}
Code	{ return reportMatcher ( Any.ANY ) ; } {}
Distance : 11

177
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Long ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

178
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; } Test
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; } Test
Distance : 13

179
Tree	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; }
Distance : 11

180
Tree	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; } Preconditions
Distance : 12

181
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; } -
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; } -
Distance : 13

182
Tree	{ return ( Long ) reportMatcher () ; } {}
Code	{ return ( Long ) reportMatcher () ; } {}
Distance : 10

183
Tree	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 11

184
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Long = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Long = true ; }
Distance : 11

185
Tree	{ reportMatcher ( Any.ANY ) ; Long = Any.ANY . returnZero () ; } options
Code	{ reportMatcher ( Any.ANY ) ; Long = Any.ANY . returnZero () ; } options
Distance : 9

186
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

187
Tree	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; } Test
Code	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; } Test
Distance : 12

188
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 14

189
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 14

190
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

191
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

192
Tree	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; } -
Code	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; } -
Distance : 12

193
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

194
Tree	{ reportMatcher ( Any.ANY ) ; Long = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Long = Any.ANY . returnZero () ; }
Distance : 8

195
Tree	{ super ( Long ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Long ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

196
Tree	{ return this . Long ; } f
Code	{ return this . Long ; } f
Distance : 13

197
Tree	{ super ( Long ) ; } class
Code	{ super ( Long ) ; } class
Distance : 12

198
Tree	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; } ParamChecks
Distance : 12

199
Tree	{ reportMatcher ( Any.ANY ) ; Long = Any.ANY . returnZero () ; } T
Code	{ reportMatcher ( Any.ANY ) ; Long = Any.ANY . returnZero () ; } T
Distance : 9

========================================================================


========================================================================
Example Number: 103
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Integer . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Integer})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return this . Integer ; } Override
Code	{ return this . Integer ; } Override
Distance : 13

1
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) ; } {}
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) ; } {}
Distance : 11

2
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) ; } f
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) ; } f
Distance : 11

3
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } source
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } source
Distance : 8

4
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 11

5
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 11

6
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) ; } Test
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) ; } Test
Distance : 11

7
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) ; } Class
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) ; } Class
Distance : 11

8
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } &&
Distance : 8

9
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 11

10
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) . returnZero () ; } T
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) . returnZero () ; } T
Distance : 9

11
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } toString
Distance : 8

12
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; } Test
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; } Test
Distance : 13

13
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Integer = true ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Integer = true ; }
Distance : 11

14
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Integer = Integer ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Integer = Integer ; }
Distance : 13

15
Tree	{ super ( Integer ) ; returnZero ( Any.ANY ) ; returnZero }
Code	{ super ( Integer ) ; returnZero ( Any.ANY ) ; returnZero }
Distance : 12

16
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) . returnZero () ; } p
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) . returnZero () ; } p
Distance : 9

17
Tree	{ super ( Integer ) ; returnZero ( Any.ANY ) ; return }
Code	{ super ( Integer ) ; returnZero ( Any.ANY ) ; return }
Distance : 13

18
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) . returnZero () ; } &&
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) . returnZero () ; } &&
Distance : 9

19
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) . returnZero () ; } options
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) . returnZero () ; } options
Distance : 9

20
Tree	{ return this . Integer ; } [
Code	{ return this . Integer ; } [
Distance : 13

21
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Distance : 12

22
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 12

23
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 12

24
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Distance : 12

25
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; } toString
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; } toString
Distance : 10

26
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) . returnZero () ; } source
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) . returnZero () ; } source
Distance : 9

27
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; } source
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; } source
Distance : 10

28
Tree	{ return this . Integer ; } class
Code	{ return this . Integer ; } class
Distance : 13

29
Tree	{ return this . Integer ; } array
Code	{ return this . Integer ; } array
Distance : 13

30
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; } {}
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; } {}
Distance : 13

31
Tree	{ return this . Integer ; } mock
Code	{ return this . Integer ; } mock
Distance : 13

32
Tree	{ return this . Integer ; } MathRuntimeException
Code	{ return this . Integer ; } MathRuntimeException
Distance : 13

33
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

34
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; } options
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; } options
Distance : 10

35
Tree	{ return this . Integer ; } -
Code	{ return this . Integer ; } -
Distance : 13

36
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) . returnZero () ; } toString
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) . returnZero () ; } toString
Distance : 9

37
Tree	{ returnZero ( Any.ANY ) ; return return; ; }
Code	{ returnZero ( Any.ANY ) ; return return; ; }
Distance : 12

38
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

39
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

40
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

41
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Integer = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Integer = false ; }
Distance : 11

42
Tree	{ return ( Integer ) returnZero ( Any.ANY ) ; }
Code	{ return ( Integer ) returnZero ( Any.ANY ) ; }
Distance : 10

43
Tree	{ return ( Integer ) reportMatcher () ; }
Code	{ return ( Integer ) reportMatcher () ; }
Distance : 9

44
Tree	{ return ( Integer ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( Integer ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

45
Tree	{ return reportMatcher ( Any.ANY ) . < Integer > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Integer > returnZero () ; }
Distance : 8

46
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

47
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) ; }
Distance : 10

48
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

49
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

50
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

51
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

52
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

53
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

54
Tree	{ return ( Integer ) returnZero () ; }
Code	{ return ( Integer ) returnZero () ; }
Distance : 8

55
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

56
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

57
Tree	{ return this . Integer ; }
Code	{ return this . Integer ; }
Distance : 12

58
Tree	{ super ( Integer ) ; returnZero ( Any.ANY ) ; reportMatcher }
Code	{ super ( Integer ) ; returnZero ( Any.ANY ) ; reportMatcher }
Distance : 13

59
Tree	{ return returnZero ( Any.ANY ) ; }
Code	{ return returnZero ( Any.ANY ) ; }
Distance : 11

60
Tree	{ reportMatcher ( Any.ANY ) ; Integer = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Integer = Any.ANY . reportMatcher () ; }
Distance : 9

61
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Integer = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Integer = false ; }
Distance : 11

62
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; reportMatcher }
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; reportMatcher }
Distance : 13

63
Tree	{ returnZero ( Any.ANY ) ; return false ; }
Code	{ returnZero ( Any.ANY ) ; return false ; }
Distance : 12

64
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 11

65
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

66
Tree	{ return returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

67
Tree	{ super ( Integer ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( Integer ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

68
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

69
Tree	{ return reportMatcher ( Any.ANY ) . < Integer > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Integer > reportMatcher () ; }
Distance : 9

70
Tree	{ super ( Integer ) ; }
Code	{ super ( Integer ) ; }
Distance : 11

71
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

72
Tree	{ super ( Integer ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( Integer ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

73
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

74
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 13

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

76
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; } f
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; } f
Distance : 13

77
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Integer = Integer ; } T
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Integer = Integer ; } T
Distance : 13

78
Tree	{ return ( Integer ) reportMatcher () ; } Test
Code	{ return ( Integer ) reportMatcher () ; } Test
Distance : 10

79
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 11

80
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 11

81
Tree	{ super ( Integer ) ; } -
Code	{ super ( Integer ) ; } -
Distance : 12

82
Tree	{ super ( Integer ) ; } [
Code	{ super ( Integer ) ; } [
Distance : 12

83
Tree	{ super ( Integer ) ; } f
Code	{ super ( Integer ) ; } f
Distance : 12

84
Tree	{ super ( Integer ) ; } Override
Code	{ super ( Integer ) ; } Override
Distance : 12

85
Tree	{ super ( Integer ) ; } MathRuntimeException
Code	{ super ( Integer ) ; } MathRuntimeException
Distance : 12

86
Tree	{ super ( Integer ) ; } mock
Code	{ super ( Integer ) ; } mock
Distance : 12

87
Tree	{ return reportMatcher ( Any.ANY ) . < Integer > returnZero () ; } options
Code	{ return reportMatcher ( Any.ANY ) . < Integer > returnZero () ; } options
Distance : 9

88
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 14

89
Tree	{ return reportMatcher ( Any.ANY ) . < Integer > returnZero () ; } p
Code	{ return reportMatcher ( Any.ANY ) . < Integer > returnZero () ; } p
Distance : 9

90
Tree	{ return reportMatcher ( Any.ANY ) . < Integer > returnZero () ; } T
Code	{ return reportMatcher ( Any.ANY ) . < Integer > returnZero () ; } T
Distance : 9

91
Tree	{ reportMatcher ( Any.ANY ) ; Integer = Any.ANY . returnZero () ; } toString
Code	{ reportMatcher ( Any.ANY ) ; Integer = Any.ANY . returnZero () ; } toString
Distance : 9

92
Tree	{ reportMatcher ( Any.ANY ) ; Integer = Any.ANY . returnZero () ; } source
Code	{ reportMatcher ( Any.ANY ) ; Integer = Any.ANY . returnZero () ; } source
Distance : 9

93
Tree	{ reportMatcher ( Any.ANY ) ; Integer = Any.ANY . returnZero () ; } p
Code	{ reportMatcher ( Any.ANY ) ; Integer = Any.ANY . returnZero () ; } p
Distance : 9

94
Tree	{ reportMatcher ( Any.ANY ) ; Integer = Any.ANY . returnZero () ; } &&
Code	{ reportMatcher ( Any.ANY ) ; Integer = Any.ANY . returnZero () ; } &&
Distance : 9

95
Tree	{ return reportMatcher ( Any.ANY ) ; } -
Code	{ return reportMatcher ( Any.ANY ) ; } -
Distance : 11

96
Tree	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 11

97
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

98
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

99
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 13

100
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 14

101
Tree	{ return reportMatcher ( Any.ANY ) . < Integer > returnZero () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . < Integer > returnZero () ; } &&
Distance : 9

102
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Integer = Integer ; } &&
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Integer = Integer ; } &&
Distance : 13

103
Tree	{ super ( Integer ) ; } notifyListeners
Code	{ super ( Integer ) ; } notifyListeners
Distance : 12

104
Tree	{ return ( Integer ) reportMatcher () ; } Class
Code	{ return ( Integer ) reportMatcher () ; } Class
Distance : 10

105
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Integer = Integer ; } options
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Integer = Integer ; } options
Distance : 13

106
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } toString
Code	{ reportMatcher ( Any.ANY ) ; return false ; } toString
Distance : 12

107
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } source
Code	{ reportMatcher ( Any.ANY ) ; return false ; } source
Distance : 12

108
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

109
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } options
Code	{ reportMatcher ( Any.ANY ) ; return false ; } options
Distance : 12

110
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

111
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } p
Code	{ reportMatcher ( Any.ANY ) ; return false ; } p
Distance : 12

112
Tree	{ return ( Integer ) reportMatcher () ; } Preconditions
Code	{ return ( Integer ) reportMatcher () ; } Preconditions
Distance : 10

113
Tree	{ return ( Integer ) reportMatcher () ; } ParamChecks
Code	{ return ( Integer ) reportMatcher () ; } ParamChecks
Distance : 10

114
Tree	{ return ( Integer ) reportMatcher () ; } -
Code	{ return ( Integer ) reportMatcher () ; } -
Distance : 10

115
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

116
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return false ; } &&
Distance : 12

117
Tree	{ return ( Integer ) reportMatcher () ; } MathRuntimeException
Code	{ return ( Integer ) reportMatcher () ; } MathRuntimeException
Distance : 10

118
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Integer = false ; } wanted
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Integer = false ; } wanted
Distance : 12

119
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Integer = Integer ; } source
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Integer = Integer ; } source
Distance : 13

120
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Integer = Integer ; } p
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Integer = Integer ; } p
Distance : 13

121
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

122
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

123
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; Integer = false ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; Integer = false ; }
Distance : 12

124
Tree	{ reportMatcher ( Any.ANY ) ; Integer = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Integer = Any.ANY . returnZero () ; }
Distance : 8

125
Tree	{ returnZero ( Any.ANY ) ; Integer = Any.ANY . reportMatcher () ; }
Code	{ returnZero ( Any.ANY ) ; Integer = Any.ANY . reportMatcher () ; }
Distance : 10

126
Tree	{ return this . Integer ; } notifyListeners
Code	{ return this . Integer ; } notifyListeners
Distance : 13

127
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Integer = true ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Integer = true ; }
Distance : 12

128
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Integer = Integer ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Integer = Integer ; }
Distance : 13

129
Tree	{ super ( Integer ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( Integer ) ; returnZero ( Any.ANY ) ; }
Distance : 12

130
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } {}
Distance : 12

131
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

132
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) ; } -
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) ; } -
Distance : 11

133
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; } T
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; } T
Distance : 10

134
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } f
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } f
Distance : 12

135
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

136
Tree	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; } f
Code	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; } f
Distance : 12

137
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; Integer = true ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; Integer = true ; }
Distance : 12

138
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Integer = false ; } Math
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Integer = false ; } Math
Distance : 12

139
Tree	{ return reportMatcher ( Any.ANY ) . < Integer > returnZero () ; } source
Code	{ return reportMatcher ( Any.ANY ) . < Integer > returnZero () ; } source
Distance : 9

140
Tree	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; } {}
Code	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; } {}
Distance : 12

141
Tree	{ return reportMatcher ( Any.ANY ) . < Integer > returnZero () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . < Integer > returnZero () ; } toString
Distance : 9

142
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } p
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } p
Distance : 8

143
Tree	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 11

144
Tree	{ super ( Integer ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Integer ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

145
Tree	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

146
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Integer = false ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Integer = false ; }
Distance : 12

147
Tree	{ returnZero ( Any.ANY ) ; return break; ; }
Code	{ returnZero ( Any.ANY ) ; return break; ; }
Distance : 12

148
Tree	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; } MathRuntimeException
Distance : 12

149
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; Matcher }
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; Matcher }
Distance : 13

150
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Integer = Integer ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Integer = Integer ; }
Distance : 12

151
Tree	{ return returnZero ( Any.ANY ) . < Integer > returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . < Integer > returnZero () ; }
Distance : 9

152
Tree	{ return reportMatcher ( Any.ANY ) ; } f
Code	{ return reportMatcher ( Any.ANY ) ; } f
Distance : 11

153
Tree	{ returnZero ( Any.ANY ) ; Integer = Any.ANY . returnZero () ; }
Code	{ returnZero ( Any.ANY ) ; Integer = Any.ANY . returnZero () ; }
Distance : 9

154
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

155
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; } &&
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; } &&
Distance : 10

156
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } T
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } T
Distance : 8

157
Tree	{ returnZero ( Any.ANY ) ; this . Integer = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) ; this . Integer = Any.ANY ; }
Distance : 12

158
Tree	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

159
Tree	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; } Class
Code	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; } Class
Distance : 12

160
Tree	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; }
Distance : 11

161
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; disableTypeCheck }
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; disableTypeCheck }
Distance : 13

162
Tree	{ super ( Integer ) ; } array
Code	{ super ( Integer ) ; } array
Distance : 12

163
Tree	{ return ( Integer ) returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Integer ) returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

164
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

165
Tree	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; } Preconditions
Distance : 12

166
Tree	{ returnZero ( Any.ANY ) ; return true ; }
Code	{ returnZero ( Any.ANY ) ; return true ; }
Distance : 12

167
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Integer = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Integer = true ; }
Distance : 11

168
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ParamChecks
Distance : 12

169
Tree	{ returnZero ( Any.ANY ) ; return null ; }
Code	{ returnZero ( Any.ANY ) ; return null ; }
Distance : 12

170
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } options
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } options
Distance : 8

171
Tree	{ return returnZero ( Any.ANY ) . < Integer > reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . < Integer > reportMatcher () ; }
Distance : 10

172
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Integer = Integer ; } toString
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Integer = Integer ; } toString
Distance : 13

173
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; } p
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; } p
Distance : 10

174
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } T
Code	{ reportMatcher ( Any.ANY ) ; return false ; } T
Distance : 12

175
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 13

176
Tree	{ reportMatcher ( Any.ANY ) ; Integer = Any.ANY . returnZero () ; } options
Code	{ reportMatcher ( Any.ANY ) ; Integer = Any.ANY . returnZero () ; } options
Distance : 9

177
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

178
Tree	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; } Test
Code	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; } Test
Distance : 12

179
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; returnZero }
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; returnZero }
Distance : 12

180
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 14

181
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 14

182
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; } -
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; } -
Distance : 13

183
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; } Class
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; } Class
Distance : 13

184
Tree	{ return ( Integer ) reportMatcher () ; } f
Code	{ return ( Integer ) reportMatcher () ; } f
Distance : 10

185
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; return }
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; return }
Distance : 13

186
Tree	{ return reportMatcher ( Any.ANY ) ; } {}
Code	{ return reportMatcher ( Any.ANY ) ; } {}
Distance : 11

187
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } -
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } -
Distance : 12

188
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

189
Tree	{ return ( Integer ) reportMatcher () ; } {}
Code	{ return ( Integer ) reportMatcher () ; } {}
Distance : 10

190
Tree	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 11

191
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

192
Tree	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; } -
Code	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; } -
Distance : 12

193
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

194
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Integer = Integer ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Integer = Integer ; }
Distance : 12

195
Tree	{ returnZero ( Any.ANY ) ; return super(); ; }
Code	{ returnZero ( Any.ANY ) ; return super(); ; }
Distance : 12

196
Tree	{ return this . Integer ; } f
Code	{ return this . Integer ; } f
Distance : 13

197
Tree	{ super ( Integer ) ; } class
Code	{ super ( Integer ) ; } class
Distance : 12

198
Tree	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; } ParamChecks
Distance : 12

199
Tree	{ reportMatcher ( Any.ANY ) ; Integer = Any.ANY . returnZero () ; } T
Code	{ reportMatcher ( Any.ANY ) ; Integer = Any.ANY . returnZero () ; } T
Distance : 9

========================================================================


========================================================================
Example Number: 104
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnChar () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Character . class ) ) . returnChar () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnChar}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Character})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnChar}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return this . Character ; } Override
Code	{ return this . Character ; } Override
Distance : 13

1
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; } Class
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; } Class
Distance : 13

2
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; } Test
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; } Test
Distance : 13

3
Tree	{ return ( Character ) returnChar ( Any.ANY ) ; } Preconditions
Code	{ return ( Character ) returnChar ( Any.ANY ) ; } Preconditions
Distance : 11

4
Tree	{ return ( Character ) returnChar ( Any.ANY ) ; } -
Code	{ return ( Character ) returnChar ( Any.ANY ) ; } -
Distance : 11

5
Tree	{ return ( Character ) returnChar ( Any.ANY ) ; } {}
Code	{ return ( Character ) returnChar ( Any.ANY ) ; } {}
Distance : 11

6
Tree	{ return ( Character ) returnChar ( Any.ANY ) . returnChar () ; } source
Code	{ return ( Character ) returnChar ( Any.ANY ) . returnChar () ; } source
Distance : 9

7
Tree	{ return ( Character ) returnChar ( Any.ANY ) ; } MathRuntimeException
Code	{ return ( Character ) returnChar ( Any.ANY ) ; } MathRuntimeException
Distance : 11

8
Tree	{ return ( Character ) returnChar ( Any.ANY ) ; } Class
Code	{ return ( Character ) returnChar ( Any.ANY ) ; } Class
Distance : 11

9
Tree	{ return this . Character ; } mock
Code	{ return this . Character ; } mock
Distance : 13

10
Tree	{ return ( Character ) returnChar ( Any.ANY ) . returnChar () ; } T
Code	{ return ( Character ) returnChar ( Any.ANY ) . returnChar () ; } T
Distance : 9

11
Tree	{ return ( Character ) returnChar ( Any.ANY ) . returnChar () ; } p
Code	{ return ( Character ) returnChar ( Any.ANY ) . returnChar () ; } p
Distance : 9

12
Tree	{ return ( Character ) returnChar ( Any.ANY ) . returnChar () ; } &&
Code	{ return ( Character ) returnChar ( Any.ANY ) . returnChar () ; } &&
Distance : 9

13
Tree	{ returnChar ( Any.ANY ) . reportMatcher () ; Character = false ; }
Code	{ returnChar ( Any.ANY ) . reportMatcher () ; Character = false ; }
Distance : 12

14
Tree	{ return returnChar ( Any.ANY ) . < Character > reportMatcher () ; }
Code	{ return returnChar ( Any.ANY ) . < Character > reportMatcher () ; }
Distance : 10

15
Tree	{ returnChar ( Any.ANY ) ; return return; ; }
Code	{ returnChar ( Any.ANY ) ; return return; ; }
Distance : 12

16
Tree	{ return ( Character ) returnChar ( Any.ANY ) . returnChar () ; } options
Code	{ return ( Character ) returnChar ( Any.ANY ) . returnChar () ; } options
Distance : 9

17
Tree	{ return ( Character ) returnChar ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Character ) returnChar ( Any.ANY ) . reportMatcher () ; }
Distance : 9

18
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ParamChecks
Distance : 12

19
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } options
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } options
Distance : 8

20
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } &&
Distance : 8

21
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Distance : 12

22
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 12

23
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 12

24
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Distance : 12

25
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } T
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } T
Distance : 8

26
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; } toString
Code	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; } toString
Distance : 10

27
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; } source
Code	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; } source
Distance : 10

28
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; } T
Code	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; } T
Distance : 10

29
Tree	{ return this . Character ; } notifyListeners
Code	{ return this . Character ; } notifyListeners
Distance : 13

30
Tree	{ return this . Character ; } -
Code	{ return this . Character ; } -
Distance : 13

31
Tree	{ return this . Character ; } [
Code	{ return this . Character ; } [
Distance : 13

32
Tree	{ return this . Character ; } f
Code	{ return this . Character ; } f
Distance : 13

33
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; }
Distance : 7

34
Tree	{ return this . Character ; } array
Code	{ return this . Character ; } array
Distance : 13

35
Tree	{ return ( Character ) returnChar ( Any.ANY ) . returnChar () ; } toString
Code	{ return ( Character ) returnChar ( Any.ANY ) . returnChar () ; } toString
Distance : 9

36
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } p
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } p
Distance : 8

37
Tree	{ return returnChar ( Any.ANY ) ; }
Code	{ return returnChar ( Any.ANY ) ; }
Distance : 11

38
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; checkNotNull }
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; checkNotNull }
Distance : 13

39
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; super }
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; super }
Distance : 13

40
Tree	{ return reportMatcher ( Any.ANY ) . < Character > returnChar () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Character > returnChar () ; }
Distance : 8

41
Tree	{ return ( Character ) returnChar ( Any.ANY ) ; }
Code	{ return ( Character ) returnChar ( Any.ANY ) ; }
Distance : 10

42
Tree	{ return this . Character ; }
Code	{ return this . Character ; }
Distance : 12

43
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

44
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; }
Code	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; }
Distance : 9

45
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; }
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; }
Distance : 12

46
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

47
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

48
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

49
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

50
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

51
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

52
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

53
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

54
Tree	{ return ( Character ) returnChar () ; }
Code	{ return ( Character ) returnChar () ; }
Distance : 8

55
Tree	{ return reportMatcher ( Any.ANY ) . < Character > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Character > reportMatcher () ; }
Distance : 9

56
Tree	{ return ( Character ) returnChar ( Any.ANY ) . returnChar () ; }
Code	{ return ( Character ) returnChar ( Any.ANY ) . returnChar () ; }
Distance : 8

57
Tree	{ returnChar ( Any.ANY ) ; return null ; }
Code	{ returnChar ( Any.ANY ) ; return null ; }
Distance : 12

58
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; fireChangeEvent }
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; fireChangeEvent }
Distance : 13

59
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; reportMatcher }
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; reportMatcher }
Distance : 13

60
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; assert }
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; assert }
Distance : 13

61
Tree	{ returnChar ( Any.ANY ) ; return false ; }
Code	{ returnChar ( Any.ANY ) ; return false ; }
Distance : 12

62
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; if }
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; if }
Distance : 13

63
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; return; }
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; return; }
Distance : 13

64
Tree	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; }
Distance : 11

65
Tree	{ return ( Character ) reportMatcher ( Any.ANY ) . returnChar () ; }
Code	{ return ( Character ) reportMatcher ( Any.ANY ) . returnChar () ; }
Distance : 8

66
Tree	{ return ( Character ) reportMatcher () ; }
Code	{ return ( Character ) reportMatcher () ; }
Distance : 9

67
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; throw }
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; throw }
Distance : 13

68
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 11

69
Tree	{ return returnChar ( Any.ANY ) . returnChar () ; }
Code	{ return returnChar ( Any.ANY ) . returnChar () ; }
Distance : 8

70
Tree	{ super ( Character ) ; reportMatcher ( Any.ANY ) . returnChar () ; }
Code	{ super ( Character ) ; reportMatcher ( Any.ANY ) . returnChar () ; }
Distance : 9

71
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; Character = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; Character = false ; }
Distance : 11

72
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

73
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

74
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; } MathRuntimeException
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; } MathRuntimeException
Distance : 13

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

76
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; } f
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; } f
Distance : 13

77
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

78
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

79
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 11

80
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 11

81
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

82
Tree	{ super ( Character ) ; } [
Code	{ super ( Character ) ; } [
Distance : 12

83
Tree	{ super ( Character ) ; } f
Code	{ super ( Character ) ; } f
Distance : 12

84
Tree	{ super ( Character ) ; } Override
Code	{ super ( Character ) ; } Override
Distance : 12

85
Tree	{ super ( Character ) ; } MathRuntimeException
Code	{ super ( Character ) ; } MathRuntimeException
Distance : 12

86
Tree	{ super ( Character ) ; } mock
Code	{ super ( Character ) ; } mock
Distance : 12

87
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

88
Tree	{ return reportMatcher ( Any.ANY ) . < Character > returnChar () ; } options
Code	{ return reportMatcher ( Any.ANY ) . < Character > returnChar () ; } options
Distance : 9

89
Tree	{ return reportMatcher ( Any.ANY ) . < Character > returnChar () ; } p
Code	{ return reportMatcher ( Any.ANY ) . < Character > returnChar () ; } p
Distance : 9

90
Tree	{ return reportMatcher ( Any.ANY ) . < Character > returnChar () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . < Character > returnChar () ; } &&
Distance : 9

91
Tree	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 11

92
Tree	{ return reportMatcher ( Any.ANY ) . < Character > returnChar () ; } T
Code	{ return reportMatcher ( Any.ANY ) . < Character > returnChar () ; } T
Distance : 9

93
Tree	{ reportMatcher ( Any.ANY ) ; Character = Any.ANY . returnChar () ; } toString
Code	{ reportMatcher ( Any.ANY ) ; Character = Any.ANY . returnChar () ; } toString
Distance : 9

94
Tree	{ reportMatcher ( Any.ANY ) ; Character = Any.ANY . returnChar () ; } source
Code	{ reportMatcher ( Any.ANY ) ; Character = Any.ANY . returnChar () ; } source
Distance : 9

95
Tree	{ reportMatcher ( Any.ANY ) ; Character = Any.ANY . returnChar () ; } p
Code	{ reportMatcher ( Any.ANY ) ; Character = Any.ANY . returnChar () ; } p
Distance : 9

96
Tree	{ super ( Character ) ; } notifyListeners
Code	{ super ( Character ) ; } notifyListeners
Distance : 12

97
Tree	{ return ( Character ) returnChar () ; } Test
Code	{ return ( Character ) returnChar () ; } Test
Distance : 9

98
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 14

99
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; } ParamChecks
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; } ParamChecks
Distance : 13

100
Tree	{ reportMatcher ( Any.ANY ) ; Character = Any.ANY . returnChar () ; } &&
Code	{ reportMatcher ( Any.ANY ) ; Character = Any.ANY . returnChar () ; } &&
Distance : 9

101
Tree	{ return reportMatcher ( Any.ANY ) ; } -
Code	{ return reportMatcher ( Any.ANY ) ; } -
Distance : 11

102
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

103
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Character = Character ; } T
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Character = Character ; } T
Distance : 13

104
Tree	{ super ( Character ) ; } -
Code	{ super ( Character ) ; } -
Distance : 12

105
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Character = Character ; } &&
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Character = Character ; } &&
Distance : 13

106
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Character = Character ; } p
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Character = Character ; } p
Distance : 13

107
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Character = Character ; } source
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Character = Character ; } source
Distance : 13

108
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return false ; } &&
Distance : 12

109
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } p
Code	{ reportMatcher ( Any.ANY ) ; return false ; } p
Distance : 12

110
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } options
Code	{ reportMatcher ( Any.ANY ) ; return false ; } options
Distance : 12

111
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } source
Code	{ reportMatcher ( Any.ANY ) ; return false ; } source
Distance : 12

112
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } toString
Code	{ reportMatcher ( Any.ANY ) ; return false ; } toString
Distance : 12

113
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 14

114
Tree	{ return ( Character ) returnChar () ; } Preconditions
Code	{ return ( Character ) returnChar () ; } Preconditions
Distance : 9

115
Tree	{ return ( Character ) returnChar () ; } -
Code	{ return ( Character ) returnChar () ; } -
Distance : 9

116
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

117
Tree	{ return ( Character ) returnChar () ; } MathRuntimeException
Code	{ return ( Character ) returnChar () ; } MathRuntimeException
Distance : 9

118
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Character = Character ; } options
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Character = Character ; } options
Distance : 13

119
Tree	{ return ( Character ) returnChar () ; } Class
Code	{ return ( Character ) returnChar () ; } Class
Distance : 9

120
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

121
Tree	{ return ( Character ) returnChar () ; } ParamChecks
Code	{ return ( Character ) returnChar () ; } ParamChecks
Distance : 9

122
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; Character = false ; } wanted
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; Character = false ; } wanted
Distance : 12

123
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

124
Tree	{ returnChar ( Any.ANY ) . returnChar () ; Character = true ; }
Code	{ returnChar ( Any.ANY ) . returnChar () ; Character = true ; }
Distance : 12

125
Tree	{ return ( Character ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Character ) reportMatcher ( Any.ANY ) ; }
Distance : 10

126
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; } &&
Code	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; } &&
Distance : 10

127
Tree	{ returnChar ( Any.ANY ) ; Character = Any.ANY . reportMatcher () ; }
Code	{ returnChar ( Any.ANY ) ; Character = Any.ANY . reportMatcher () ; }
Distance : 10

128
Tree	{ returnChar ( Any.ANY ) . returnChar () ; this . Character = Character ; }
Code	{ returnChar ( Any.ANY ) . returnChar () ; this . Character = Character ; }
Distance : 13

129
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } {}
Distance : 12

130
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

131
Tree	{ return ( Character ) returnChar ( Any.ANY ) ; } f
Code	{ return ( Character ) returnChar ( Any.ANY ) ; } f
Distance : 11

132
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; } p
Code	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; } p
Distance : 10

133
Tree	{ returnChar ( Any.ANY ) . reportMatcher () ; Character = true ; }
Code	{ returnChar ( Any.ANY ) . reportMatcher () ; Character = true ; }
Distance : 12

134
Tree	{ super ( Character ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( Character ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

135
Tree	{ returnChar ( Any.ANY ) . reportMatcher () ; this . Character = Character ; }
Code	{ returnChar ( Any.ANY ) . reportMatcher () ; this . Character = Character ; }
Distance : 13

136
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } f
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } f
Distance : 12

137
Tree	{ super ( Character ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Character ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

138
Tree	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; } f
Code	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; } f
Distance : 12

139
Tree	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 11

140
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; } {}
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; } {}
Distance : 13

141
Tree	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; } {}
Code	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; } {}
Distance : 12

142
Tree	{ return reportMatcher ( Any.ANY ) . < Character > returnChar () ; } source
Code	{ return reportMatcher ( Any.ANY ) . < Character > returnChar () ; } source
Distance : 9

143
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } toString
Distance : 8

144
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; Character = false ; } Math
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; Character = false ; } Math
Distance : 12

145
Tree	{ return ( Character ) returnChar ( Any.ANY ) ; } Test
Code	{ return ( Character ) returnChar ( Any.ANY ) ; } Test
Distance : 11

146
Tree	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; } MathRuntimeException
Distance : 12

147
Tree	{ return reportMatcher ( Any.ANY ) ; } f
Code	{ return reportMatcher ( Any.ANY ) ; } f
Distance : 11

148
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

149
Tree	{ return this . Character ; } MathRuntimeException
Code	{ return this . Character ; } MathRuntimeException
Distance : 13

150
Tree	{ return reportMatcher ( Any.ANY ) . < Character > returnChar () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . < Character > returnChar () ; } toString
Distance : 9

151
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Character = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Character = false ; }
Distance : 11

152
Tree	{ return ( Character ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Character ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

153
Tree	{ returnChar ( Any.ANY ) ; return break; ; }
Code	{ returnChar ( Any.ANY ) ; return break; ; }
Distance : 12

154
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Character = Character ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Character = Character ; }
Distance : 12

155
Tree	{ return returnChar ( Any.ANY ) . < Character > returnChar () ; }
Code	{ return returnChar ( Any.ANY ) . < Character > returnChar () ; }
Distance : 9

156
Tree	{ reportMatcher ( Any.ANY ) ; Character = Any.ANY . returnChar () ; }
Code	{ reportMatcher ( Any.ANY ) ; Character = Any.ANY . returnChar () ; }
Distance : 8

157
Tree	{ returnChar ( Any.ANY ) . returnChar () ; Character = false ; }
Code	{ returnChar ( Any.ANY ) . returnChar () ; Character = false ; }
Distance : 12

158
Tree	{ returnChar ( Any.ANY ) ; return true ; }
Code	{ returnChar ( Any.ANY ) ; return true ; }
Distance : 12

159
Tree	{ return ( Character ) returnChar ( Any.ANY ) ; } ParamChecks
Code	{ return ( Character ) returnChar ( Any.ANY ) ; } ParamChecks
Distance : 11

160
Tree	{ super ( Character ) ; } array
Code	{ super ( Character ) ; } array
Distance : 12

161
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Character = true ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Character = true ; }
Distance : 11

162
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; } options
Code	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; } options
Distance : 10

163
Tree	{ returnChar ( Any.ANY ) ; Character = Any.ANY . returnChar () ; }
Code	{ returnChar ( Any.ANY ) ; Character = Any.ANY . returnChar () ; }
Distance : 9

164
Tree	{ return reportMatcher ( Any.ANY ) ; } {}
Code	{ return reportMatcher ( Any.ANY ) ; } {}
Distance : 11

165
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

166
Tree	{ returnChar ( Any.ANY ) ; this . Character = Any.ANY ; }
Code	{ returnChar ( Any.ANY ) ; this . Character = Any.ANY ; }
Distance : 12

167
Tree	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; } Class
Code	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; } Class
Distance : 12

168
Tree	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; } Preconditions
Distance : 12

169
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; } Preconditions
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; } Preconditions
Distance : 13

170
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Character = Character ; } toString
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Character = Character ; } toString
Distance : 13

171
Tree	{ return returnChar ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnChar ( Any.ANY ) . reportMatcher () ; }
Distance : 9

172
Tree	{ return ( Character ) returnChar () ; } f
Code	{ return ( Character ) returnChar () ; } f
Distance : 9

173
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; return }
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; return }
Distance : 13

174
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } source
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } source
Distance : 8

175
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; Character = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; Character = true ; }
Distance : 11

176
Tree	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; } Test
Code	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; } Test
Distance : 12

177
Tree	{ super ( Character ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Character ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

178
Tree	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 11

179
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Character ) ; returnChar ( Any.ANY ) . reportMatcher () ; }
Distance : 10

180
Tree	{ super ( Character ) ; }
Code	{ super ( Character ) ; }
Distance : 11

181
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Character = Character ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Character = Character ; }
Distance : 12

182
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } -
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } -
Distance : 12

183
Tree	{ return ( Character ) returnChar () ; } {}
Code	{ return ( Character ) returnChar () ; } {}
Distance : 9

184
Tree	{ reportMatcher ( Any.ANY ) ; Character = Any.ANY . returnChar () ; } options
Code	{ reportMatcher ( Any.ANY ) ; Character = Any.ANY . returnChar () ; } options
Distance : 9

185
Tree	{ returnChar ( Any.ANY ) ; return super(); ; }
Code	{ returnChar ( Any.ANY ) ; return super(); ; }
Distance : 12

186
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; } -
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; } -
Distance : 13

187
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } T
Code	{ reportMatcher ( Any.ANY ) ; return false ; } T
Distance : 12

188
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 14

189
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 14

190
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

191
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

192
Tree	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; } -
Code	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; } -
Distance : 12

193
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

194
Tree	{ returnChar ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnChar ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

195
Tree	{ reportMatcher ( Any.ANY ) ; Character = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Character = Any.ANY . reportMatcher () ; }
Distance : 9

196
Tree	{ return this . Character ; } class
Code	{ return this . Character ; } class
Distance : 13

197
Tree	{ super ( Character ) ; } class
Code	{ super ( Character ) ; } class
Distance : 12

198
Tree	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; } ParamChecks
Distance : 12

199
Tree	{ reportMatcher ( Any.ANY ) ; Character = Any.ANY . returnChar () ; } T
Code	{ reportMatcher ( Any.ANY ) ; Character = Any.ANY . returnChar () ; } T
Distance : 9

========================================================================


========================================================================
Example Number: 105
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Byte . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Byte})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return this . Byte ; } -
Code	{ return this . Byte ; } -
Distance : 13

1
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; } Test
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; } Test
Distance : 13

2
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } toString
Distance : 8

3
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 11

4
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) ; } -
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) ; } -
Distance : 11

5
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) ; } {}
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) ; } {}
Distance : 11

6
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } source
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } source
Distance : 8

7
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) . returnZero () ; } p
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) . returnZero () ; } p
Distance : 9

8
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 11

9
Tree	{ return this . Byte ; } Override
Code	{ return this . Byte ; } Override
Distance : 13

10
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } &&
Distance : 8

11
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) . returnZero () ; } T
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) . returnZero () ; } T
Distance : 9

12
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) ; } Class
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) ; } Class
Distance : 11

13
Tree	{ returnZero ( Any.ANY ) ; Byte = Any.ANY . reportMatcher () ; }
Code	{ returnZero ( Any.ANY ) ; Byte = Any.ANY . reportMatcher () ; }
Distance : 10

14
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Byte = true ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Byte = true ; }
Distance : 11

15
Tree	{ reportMatcher ( Any.ANY ) ; Byte = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Byte = Any.ANY . reportMatcher () ; }
Distance : 9

16
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; } Class
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; } Class
Distance : 13

17
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

18
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) . returnZero () ; } &&
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) . returnZero () ; } &&
Distance : 9

19
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) . returnZero () ; } options
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) . returnZero () ; } options
Distance : 9

20
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } T
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } T
Distance : 8

21
Tree	{ return this . Byte ; } f
Code	{ return this . Byte ; } f
Distance : 13

22
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 12

23
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 12

24
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Distance : 12

25
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; } toString
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; } toString
Distance : 10

26
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) . returnZero () ; } source
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) . returnZero () ; } source
Distance : 9

27
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; } source
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; } source
Distance : 10

28
Tree	{ return this . Byte ; } notifyListeners
Code	{ return this . Byte ; } notifyListeners
Distance : 13

29
Tree	{ return this . Byte ; } class
Code	{ return this . Byte ; } class
Distance : 13

30
Tree	{ return this . Byte ; } array
Code	{ return this . Byte ; } array
Distance : 13

31
Tree	{ return this . Byte ; } mock
Code	{ return this . Byte ; } mock
Distance : 13

32
Tree	{ return this . Byte ; } MathRuntimeException
Code	{ return this . Byte ; } MathRuntimeException
Distance : 13

33
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

34
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; } options
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; } options
Distance : 10

35
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Distance : 12

36
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) . returnZero () ; } toString
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) . returnZero () ; } toString
Distance : 9

37
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; disableTypeCheck }
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; disableTypeCheck }
Distance : 13

38
Tree	{ returnZero ( Any.ANY ) ; return return; ; }
Code	{ returnZero ( Any.ANY ) ; return return; ; }
Distance : 12

39
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

40
Tree	{ super ( Byte ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( Byte ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

41
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

42
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

43
Tree	{ returnZero ( Any.ANY ) ; return null ; }
Code	{ returnZero ( Any.ANY ) ; return null ; }
Distance : 12

44
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

45
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) ; }
Distance : 10

46
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

47
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

48
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

49
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

50
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

51
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

52
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

53
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

54
Tree	{ return ( Byte ) returnZero ( Any.ANY ) ; }
Code	{ return ( Byte ) returnZero ( Any.ANY ) ; }
Distance : 10

55
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; Matcher }
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; Matcher }
Distance : 13

56
Tree	{ return ( Byte ) reportMatcher () ; }
Code	{ return ( Byte ) reportMatcher () ; }
Distance : 9

57
Tree	{ return reportMatcher ( Any.ANY ) . < Byte > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Byte > returnZero () ; }
Distance : 8

58
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; return }
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; return }
Distance : 13

59
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

60
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; returnZero }
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; returnZero }
Distance : 12

61
Tree	{ super ( Byte ) ; returnZero ( Any.ANY ) ; reportMatcher }
Code	{ super ( Byte ) ; returnZero ( Any.ANY ) ; reportMatcher }
Distance : 13

62
Tree	{ return returnZero ( Any.ANY ) ; }
Code	{ return returnZero ( Any.ANY ) ; }
Distance : 11

63
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; reportMatcher }
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; reportMatcher }
Distance : 13

64
Tree	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; }
Distance : 11

65
Tree	{ reportMatcher ( Any.ANY ) ; Byte = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Byte = Any.ANY . returnZero () ; }
Distance : 8

66
Tree	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

67
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

68
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

69
Tree	{ return returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

70
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Byte = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Byte = false ; }
Distance : 11

71
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

72
Tree	{ super ( Byte ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( Byte ) ; returnZero ( Any.ANY ) ; }
Distance : 12

73
Tree	{ return this . Byte ; }
Code	{ return this . Byte ; }
Distance : 12

74
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 13

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

76
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; } f
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; } f
Distance : 13

77
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Byte = Byte ; } T
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Byte = Byte ; } T
Distance : 13

78
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

79
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 14

80
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 11

81
Tree	{ super ( Byte ) ; } -
Code	{ super ( Byte ) ; } -
Distance : 12

82
Tree	{ super ( Byte ) ; } [
Code	{ super ( Byte ) ; } [
Distance : 12

83
Tree	{ super ( Byte ) ; } f
Code	{ super ( Byte ) ; } f
Distance : 12

84
Tree	{ super ( Byte ) ; } Override
Code	{ super ( Byte ) ; } Override
Distance : 12

85
Tree	{ super ( Byte ) ; } MathRuntimeException
Code	{ super ( Byte ) ; } MathRuntimeException
Distance : 12

86
Tree	{ super ( Byte ) ; } mock
Code	{ super ( Byte ) ; } mock
Distance : 12

87
Tree	{ return reportMatcher ( Any.ANY ) . < Byte > returnZero () ; } options
Code	{ return reportMatcher ( Any.ANY ) . < Byte > returnZero () ; } options
Distance : 9

88
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 14

89
Tree	{ return reportMatcher ( Any.ANY ) . < Byte > returnZero () ; } p
Code	{ return reportMatcher ( Any.ANY ) . < Byte > returnZero () ; } p
Distance : 9

90
Tree	{ return reportMatcher ( Any.ANY ) . < Byte > returnZero () ; } T
Code	{ return reportMatcher ( Any.ANY ) . < Byte > returnZero () ; } T
Distance : 9

91
Tree	{ reportMatcher ( Any.ANY ) ; Byte = Any.ANY . returnZero () ; } toString
Code	{ reportMatcher ( Any.ANY ) ; Byte = Any.ANY . returnZero () ; } toString
Distance : 9

92
Tree	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 11

93
Tree	{ reportMatcher ( Any.ANY ) ; Byte = Any.ANY . returnZero () ; } source
Code	{ reportMatcher ( Any.ANY ) ; Byte = Any.ANY . returnZero () ; } source
Distance : 9

94
Tree	{ reportMatcher ( Any.ANY ) ; Byte = Any.ANY . returnZero () ; } p
Code	{ reportMatcher ( Any.ANY ) ; Byte = Any.ANY . returnZero () ; } p
Distance : 9

95
Tree	{ reportMatcher ( Any.ANY ) ; Byte = Any.ANY . returnZero () ; } &&
Code	{ reportMatcher ( Any.ANY ) ; Byte = Any.ANY . returnZero () ; } &&
Distance : 9

96
Tree	{ return reportMatcher ( Any.ANY ) ; } -
Code	{ return reportMatcher ( Any.ANY ) ; } -
Distance : 11

97
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

98
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

99
Tree	{ super ( Byte ) ; } notifyListeners
Code	{ super ( Byte ) ; } notifyListeners
Distance : 12

100
Tree	{ return ( Byte ) reportMatcher () ; } Test
Code	{ return ( Byte ) reportMatcher () ; } Test
Distance : 10

101
Tree	{ return reportMatcher ( Any.ANY ) . < Byte > returnZero () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . < Byte > returnZero () ; } &&
Distance : 9

102
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Byte = Byte ; } &&
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Byte = Byte ; } &&
Distance : 13

103
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 11

104
Tree	{ return ( Byte ) reportMatcher () ; } Class
Code	{ return ( Byte ) reportMatcher () ; } Class
Distance : 10

105
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Byte = Byte ; } p
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Byte = Byte ; } p
Distance : 13

106
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Byte = Byte ; } source
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Byte = Byte ; } source
Distance : 13

107
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Byte = false ; } wanted
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Byte = false ; } wanted
Distance : 12

108
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return false ; } &&
Distance : 12

109
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } p
Code	{ reportMatcher ( Any.ANY ) ; return false ; } p
Distance : 12

110
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } options
Code	{ reportMatcher ( Any.ANY ) ; return false ; } options
Distance : 12

111
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } source
Code	{ reportMatcher ( Any.ANY ) ; return false ; } source
Distance : 12

112
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } toString
Code	{ reportMatcher ( Any.ANY ) ; return false ; } toString
Distance : 12

113
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

114
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Byte = Byte ; } options
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Byte = Byte ; } options
Distance : 13

115
Tree	{ return ( Byte ) reportMatcher () ; } Preconditions
Code	{ return ( Byte ) reportMatcher () ; } Preconditions
Distance : 10

116
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 13

117
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

118
Tree	{ return ( Byte ) reportMatcher () ; } MathRuntimeException
Code	{ return ( Byte ) reportMatcher () ; } MathRuntimeException
Distance : 10

119
Tree	{ return ( Byte ) reportMatcher () ; } -
Code	{ return ( Byte ) reportMatcher () ; } -
Distance : 10

120
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

121
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

122
Tree	{ return ( Byte ) reportMatcher () ; } ParamChecks
Code	{ return ( Byte ) reportMatcher () ; } ParamChecks
Distance : 10

123
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Byte = Byte ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Byte = Byte ; }
Distance : 13

124
Tree	{ super ( Byte ) ; }
Code	{ super ( Byte ) ; }
Distance : 11

125
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; Byte = false ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; Byte = false ; }
Distance : 12

126
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Byte = true ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Byte = true ; }
Distance : 12

127
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

128
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; } T
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; } T
Distance : 10

129
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Byte = Byte ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Byte = Byte ; }
Distance : 13

130
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } {}
Distance : 12

131
Tree	{ return ( Byte ) returnZero () ; }
Code	{ return ( Byte ) returnZero () ; }
Distance : 8

132
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) ; } f
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) ; } f
Distance : 11

133
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } f
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } f
Distance : 12

134
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; } {}
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; } {}
Distance : 13

135
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

136
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; Byte = true ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; Byte = true ; }
Distance : 12

137
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) ; } Test
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) ; } Test
Distance : 11

138
Tree	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; } f
Code	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; } f
Distance : 12

139
Tree	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 11

140
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Byte = false ; } Math
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Byte = false ; } Math
Distance : 12

141
Tree	{ return reportMatcher ( Any.ANY ) . < Byte > returnZero () ; } source
Code	{ return reportMatcher ( Any.ANY ) . < Byte > returnZero () ; } source
Distance : 9

142
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } options
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } options
Distance : 8

143
Tree	{ super ( Byte ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( Byte ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

144
Tree	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; } {}
Code	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; } {}
Distance : 12

145
Tree	{ return reportMatcher ( Any.ANY ) ; } f
Code	{ return reportMatcher ( Any.ANY ) ; } f
Distance : 11

146
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; } &&
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; } &&
Distance : 10

147
Tree	{ return reportMatcher ( Any.ANY ) . < Byte > returnZero () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . < Byte > returnZero () ; } toString
Distance : 9

148
Tree	{ return ( Byte ) returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Byte ) returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

149
Tree	{ returnZero ( Any.ANY ) ; return break; ; }
Code	{ returnZero ( Any.ANY ) ; return break; ; }
Distance : 12

150
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Byte = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Byte = true ; }
Distance : 11

151
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Byte = false ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Byte = false ; }
Distance : 12

152
Tree	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; } MathRuntimeException
Distance : 12

153
Tree	{ returnZero ( Any.ANY ) ; return true ; }
Code	{ returnZero ( Any.ANY ) ; return true ; }
Distance : 12

154
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

155
Tree	{ returnZero ( Any.ANY ) ; Byte = Any.ANY . returnZero () ; }
Code	{ returnZero ( Any.ANY ) ; Byte = Any.ANY . returnZero () ; }
Distance : 9

156
Tree	{ return returnZero ( Any.ANY ) . < Byte > returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . < Byte > returnZero () ; }
Distance : 9

157
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

158
Tree	{ returnZero ( Any.ANY ) ; this . Byte = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) ; this . Byte = Any.ANY ; }
Distance : 12

159
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 11

160
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ParamChecks
Distance : 12

161
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 11

162
Tree	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; } Class
Code	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; } Class
Distance : 12

163
Tree	{ returnZero ( Any.ANY ) ; return super(); ; }
Code	{ returnZero ( Any.ANY ) ; return super(); ; }
Distance : 12

164
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; } p
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; } p
Distance : 10

165
Tree	{ super ( Byte ) ; } array
Code	{ super ( Byte ) ; } array
Distance : 12

166
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Byte = Byte ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Byte = Byte ; }
Distance : 12

167
Tree	{ returnZero ( Any.ANY ) ; return false ; }
Code	{ returnZero ( Any.ANY ) ; return false ; }
Distance : 12

168
Tree	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; } Preconditions
Distance : 12

169
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } p
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } p
Distance : 8

170
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Byte = Byte ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Byte = Byte ; }
Distance : 12

171
Tree	{ super ( Byte ) ; returnZero ( Any.ANY ) ; return }
Code	{ super ( Byte ) ; returnZero ( Any.ANY ) ; return }
Distance : 13

172
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Byte = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Byte = false ; }
Distance : 11

173
Tree	{ return ( Byte ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( Byte ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

174
Tree	{ return returnZero ( Any.ANY ) . < Byte > reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . < Byte > reportMatcher () ; }
Distance : 10

175
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Byte = Byte ; } toString
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Byte = Byte ; } toString
Distance : 13

176
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } -
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } -
Distance : 12

177
Tree	{ reportMatcher ( Any.ANY ) ; Byte = Any.ANY . returnZero () ; } options
Code	{ reportMatcher ( Any.ANY ) ; Byte = Any.ANY . returnZero () ; } options
Distance : 9

178
Tree	{ super ( Byte ) ; returnZero ( Any.ANY ) ; returnZero }
Code	{ super ( Byte ) ; returnZero ( Any.ANY ) ; returnZero }
Distance : 12

179
Tree	{ return ( Byte ) reportMatcher () ; } f
Code	{ return ( Byte ) reportMatcher () ; } f
Distance : 10

180
Tree	{ return reportMatcher ( Any.ANY ) ; } {}
Code	{ return reportMatcher ( Any.ANY ) ; } {}
Distance : 11

181
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } T
Code	{ reportMatcher ( Any.ANY ) ; return false ; } T
Distance : 12

182
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 13

183
Tree	{ super ( Byte ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Byte ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

184
Tree	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; } Test
Code	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; } Test
Distance : 12

185
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 14

186
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; } -
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; } -
Distance : 13

187
Tree	{ return ( Byte ) reportMatcher () ; } {}
Code	{ return ( Byte ) reportMatcher () ; } {}
Distance : 10

188
Tree	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 11

189
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 14

190
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

191
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

192
Tree	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; } -
Code	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; } -
Distance : 12

193
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

194
Tree	{ return reportMatcher ( Any.ANY ) . < Byte > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Byte > reportMatcher () ; }
Distance : 9

195
Tree	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

196
Tree	{ return this . Byte ; } [
Code	{ return this . Byte ; } [
Distance : 13

197
Tree	{ super ( Byte ) ; } class
Code	{ super ( Byte ) ; } class
Distance : 12

198
Tree	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; } ParamChecks
Distance : 12

199
Tree	{ reportMatcher ( Any.ANY ) ; Byte = Any.ANY . returnZero () ; } T
Code	{ reportMatcher ( Any.ANY ) ; Byte = Any.ANY . returnZero () ; } T
Distance : 9

========================================================================


========================================================================
Example Number: 106
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnFalse () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Boolean . class ) ) . returnFalse () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnFalse}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Boolean})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnFalse}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return this . Boolean ; } mock
Code	{ return this . Boolean ; } mock
Distance : 13

1
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 12

2
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) ; } Preconditions
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) ; } Preconditions
Distance : 11

3
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) . returnFalse () ; } toString
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) . returnFalse () ; } toString
Distance : 9

4
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) . returnFalse () ; } source
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) . returnFalse () ; } source
Distance : 9

5
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) . returnFalse () ; } p
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) . returnFalse () ; } p
Distance : 9

6
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) . returnFalse () ; } &&
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) . returnFalse () ; } &&
Distance : 9

7
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) ; } f
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) ; } f
Distance : 11

8
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) . returnFalse () ; } T
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) . returnFalse () ; } T
Distance : 9

9
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; } Class
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; } Class
Distance : 13

10
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) ; } {}
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) ; } {}
Distance : 11

11
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) ; } Test
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) ; } Test
Distance : 11

12
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) ; } Class
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) ; } Class
Distance : 11

13
Tree	{ returnFalse ( Any.ANY ) ; Boolean = Any.ANY . reportMatcher () ; }
Code	{ returnFalse ( Any.ANY ) ; Boolean = Any.ANY . reportMatcher () ; }
Distance : 10

14
Tree	{ return returnFalse ( Any.ANY ) . < Boolean > reportMatcher () ; }
Code	{ return returnFalse ( Any.ANY ) . < Boolean > reportMatcher () ; }
Distance : 10

15
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

16
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } toString
Distance : 8

17
Tree	{ super ( Boolean ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Boolean ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

18
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } source
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } source
Distance : 8

19
Tree	{ return this . Boolean ; } notifyListeners
Code	{ return this . Boolean ; } notifyListeners
Distance : 13

20
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Distance : 12

21
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } -
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } -
Distance : 12

22
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; } &&
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; } &&
Distance : 10

23
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Distance : 12

24
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } p
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } p
Distance : 8

25
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } &&
Distance : 8

26
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } T
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } T
Distance : 8

27
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; } {}
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; } {}
Distance : 13

28
Tree	{ return this . Boolean ; } [
Code	{ return this . Boolean ; } [
Distance : 13

29
Tree	{ return this . Boolean ; } f
Code	{ return this . Boolean ; } f
Distance : 13

30
Tree	{ return this . Boolean ; } Override
Code	{ return this . Boolean ; } Override
Distance : 13

31
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; } p
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; } p
Distance : 10

32
Tree	{ return this . Boolean ; } MathRuntimeException
Code	{ return this . Boolean ; } MathRuntimeException
Distance : 13

33
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; }
Distance : 7

34
Tree	{ return this . Boolean ; } class
Code	{ return this . Boolean ; } class
Distance : 13

35
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; } T
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; } T
Distance : 10

36
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } options
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } options
Distance : 8

37
Tree	{ returnFalse ( Any.ANY ) ; return false ; }
Code	{ returnFalse ( Any.ANY ) ; return false ; }
Distance : 12

38
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . reportMatcher () ; }
Distance : 10

39
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; returnFalse }
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; returnFalse }
Distance : 12

40
Tree	{ return ( Boolean ) returnFalse () ; }
Code	{ return ( Boolean ) returnFalse () ; }
Distance : 8

41
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

42
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; }
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; }
Distance : 12

43
Tree	{ return this . Boolean ; }
Code	{ return this . Boolean ; }
Distance : 12

44
Tree	{ return reportMatcher ( Any.ANY ) . < Boolean > returnFalse () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Boolean > returnFalse () ; }
Distance : 8

45
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) ; }
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) ; }
Distance : 10

46
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) . returnFalse () ; }
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) . returnFalse () ; }
Distance : 8

47
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; }
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; }
Distance : 9

48
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

49
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

50
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

51
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

52
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

53
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

54
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

55
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

56
Tree	{ super ( Boolean ) ; reportMatcher ( Any.ANY ) . returnFalse () ; }
Code	{ super ( Boolean ) ; reportMatcher ( Any.ANY ) . returnFalse () ; }
Distance : 9

57
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

58
Tree	{ return reportMatcher ( Any.ANY ) . < Boolean > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Boolean > reportMatcher () ; }
Distance : 9

59
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Boolean = Boolean ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Boolean = Boolean ; }
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) ; return default: ; }
Code	{ reportMatcher ( Any.ANY ) ; return default: ; }
Distance : 11

61
Tree	{ return returnFalse ( Any.ANY ) . returnFalse () ; }
Code	{ return returnFalse ( Any.ANY ) . returnFalse () ; }
Distance : 8

62
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

63
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

64
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; StringBuilder }
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; StringBuilder }
Distance : 13

65
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; nullNotPermitted }
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; nullNotPermitted }
Distance : 13

66
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; reportMatcher }
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; reportMatcher }
Distance : 13

67
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; Boolean = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; Boolean = false ; }
Distance : 11

68
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; returnFor }
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; returnFor }
Distance : 13

69
Tree	{ super ( Boolean ) ; reportMatcher ( Any.ANY ) ; returnFalse }
Code	{ super ( Boolean ) ; reportMatcher ( Any.ANY ) ; returnFalse }
Distance : 12

70
Tree	{ returnFalse ( Any.ANY ) ; return null ; }
Code	{ returnFalse ( Any.ANY ) ; return null ; }
Distance : 12

71
Tree	{ super ( Boolean ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Boolean ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

72
Tree	{ return ( Boolean ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Boolean ) reportMatcher ( Any.ANY ) ; }
Distance : 10

73
Tree	{ return ( Boolean ) reportMatcher ( Any.ANY ) . returnFalse () ; }
Code	{ return ( Boolean ) reportMatcher ( Any.ANY ) . returnFalse () ; }
Distance : 8

74
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; } MathRuntimeException
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; } MathRuntimeException
Distance : 13

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

76
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; } f
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; } f
Distance : 13

77
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

78
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 11

79
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 11

80
Tree	{ super ( Boolean ) ; } -
Code	{ super ( Boolean ) ; } -
Distance : 12

81
Tree	{ super ( Boolean ) ; } [
Code	{ super ( Boolean ) ; } [
Distance : 12

82
Tree	{ super ( Boolean ) ; } f
Code	{ super ( Boolean ) ; } f
Distance : 12

83
Tree	{ super ( Boolean ) ; } Override
Code	{ super ( Boolean ) ; } Override
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; Boolean = Any.ANY . returnFalse () ; } toString
Code	{ reportMatcher ( Any.ANY ) ; Boolean = Any.ANY . returnFalse () ; } toString
Distance : 9

85
Tree	{ super ( Boolean ) ; } mock
Code	{ super ( Boolean ) ; } mock
Distance : 12

86
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

87
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

88
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

89
Tree	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) ; } Preconditions
Distance : 11

90
Tree	{ return reportMatcher ( Any.ANY ) . < Boolean > returnFalse () ; } options
Code	{ return reportMatcher ( Any.ANY ) . < Boolean > returnFalse () ; } options
Distance : 9

91
Tree	{ return reportMatcher ( Any.ANY ) . < Boolean > returnFalse () ; } p
Code	{ return reportMatcher ( Any.ANY ) . < Boolean > returnFalse () ; } p
Distance : 9

92
Tree	{ return reportMatcher ( Any.ANY ) . < Boolean > returnFalse () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . < Boolean > returnFalse () ; } &&
Distance : 9

93
Tree	{ super ( Boolean ) ; } notifyListeners
Code	{ super ( Boolean ) ; } notifyListeners
Distance : 12

94
Tree	{ return ( Boolean ) returnFalse () ; } Test
Code	{ return ( Boolean ) returnFalse () ; } Test
Distance : 9

95
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 14

96
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; } ParamChecks
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; } ParamChecks
Distance : 13

97
Tree	{ return reportMatcher ( Any.ANY ) . < Boolean > returnFalse () ; } T
Code	{ return reportMatcher ( Any.ANY ) . < Boolean > returnFalse () ; } T
Distance : 9

98
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

99
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

100
Tree	{ return reportMatcher ( Any.ANY ) ; } -
Code	{ return reportMatcher ( Any.ANY ) ; } -
Distance : 11

101
Tree	{ reportMatcher ( Any.ANY ) ; Boolean = Any.ANY . returnFalse () ; } &&
Code	{ reportMatcher ( Any.ANY ) ; Boolean = Any.ANY . returnFalse () ; } &&
Distance : 9

102
Tree	{ reportMatcher ( Any.ANY ) ; Boolean = Any.ANY . returnFalse () ; } p
Code	{ reportMatcher ( Any.ANY ) ; Boolean = Any.ANY . returnFalse () ; } p
Distance : 9

103
Tree	{ reportMatcher ( Any.ANY ) ; Boolean = Any.ANY . returnFalse () ; } source
Code	{ reportMatcher ( Any.ANY ) ; Boolean = Any.ANY . returnFalse () ; } source
Distance : 9

104
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

105
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; Boolean = false ; } wanted
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; Boolean = false ; } wanted
Distance : 12

106
Tree	{ super ( Boolean ) ; } MathRuntimeException
Code	{ super ( Boolean ) ; } MathRuntimeException
Distance : 12

107
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return false ; } &&
Distance : 12

108
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Boolean = Boolean ; } T
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Boolean = Boolean ; } T
Distance : 13

109
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 14

110
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Boolean = Boolean ; } &&
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Boolean = Boolean ; } &&
Distance : 13

111
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } options
Code	{ reportMatcher ( Any.ANY ) ; return false ; } options
Distance : 12

112
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Boolean = Boolean ; } options
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Boolean = Boolean ; } options
Distance : 13

113
Tree	{ return ( Boolean ) returnFalse () ; } Class
Code	{ return ( Boolean ) returnFalse () ; } Class
Distance : 9

114
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } source
Code	{ reportMatcher ( Any.ANY ) ; return false ; } source
Distance : 12

115
Tree	{ return ( Boolean ) returnFalse () ; } MathRuntimeException
Code	{ return ( Boolean ) returnFalse () ; } MathRuntimeException
Distance : 9

116
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Boolean = Boolean ; } p
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Boolean = Boolean ; } p
Distance : 13

117
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } toString
Code	{ reportMatcher ( Any.ANY ) ; return false ; } toString
Distance : 12

118
Tree	{ return ( Boolean ) returnFalse () ; } ParamChecks
Code	{ return ( Boolean ) returnFalse () ; } ParamChecks
Distance : 9

119
Tree	{ return ( Boolean ) returnFalse () ; } -
Code	{ return ( Boolean ) returnFalse () ; } -
Distance : 9

120
Tree	{ return ( Boolean ) returnFalse () ; } Preconditions
Code	{ return ( Boolean ) returnFalse () ; } Preconditions
Distance : 9

121
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Boolean = Boolean ; } source
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Boolean = Boolean ; } source
Distance : 13

122
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } p
Code	{ reportMatcher ( Any.ANY ) ; return false ; } p
Distance : 12

123
Tree	{ returnFalse ( Any.ANY ) . reportMatcher () ; Boolean = false ; }
Code	{ returnFalse ( Any.ANY ) . reportMatcher () ; Boolean = false ; }
Distance : 12

124
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Boolean = true ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Boolean = true ; }
Distance : 11

125
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; return }
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; return }
Distance : 13

126
Tree	{ returnFalse ( Any.ANY ) . reportMatcher () ; this . Boolean = Boolean ; }
Code	{ returnFalse ( Any.ANY ) . reportMatcher () ; this . Boolean = Boolean ; }
Distance : 13

127
Tree	{ returnFalse ( Any.ANY ) . returnFalse () ; Boolean = true ; }
Code	{ returnFalse ( Any.ANY ) . returnFalse () ; Boolean = true ; }
Distance : 12

128
Tree	{ return this . Boolean ; } -
Code	{ return this . Boolean ; } -
Distance : 13

129
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 12

130
Tree	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; }
Distance : 11

131
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

132
Tree	{ returnFalse ( Any.ANY ) . reportMatcher () ; Boolean = true ; }
Code	{ returnFalse ( Any.ANY ) . reportMatcher () ; Boolean = true ; }
Distance : 12

133
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) ; } ParamChecks
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) ; } ParamChecks
Distance : 11

134
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) ; } -
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) ; } -
Distance : 11

135
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; } options
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; } options
Distance : 10

136
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } {}
Distance : 12

137
Tree	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; } f
Code	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; } f
Distance : 12

138
Tree	{ return ( Boolean ) reportMatcher () ; }
Code	{ return ( Boolean ) reportMatcher () ; }
Distance : 9

139
Tree	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; } {}
Code	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; } {}
Distance : 12

140
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; Boolean = false ; } Math
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; Boolean = false ; } Math
Distance : 12

141
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; } Test
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; } Test
Distance : 13

142
Tree	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; } MathRuntimeException
Distance : 12

143
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

144
Tree	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 11

145
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; } source
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; } source
Distance : 10

146
Tree	{ reportMatcher ( Any.ANY ) ; Boolean = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Boolean = Any.ANY . reportMatcher () ; }
Distance : 9

147
Tree	{ return reportMatcher ( Any.ANY ) . < Boolean > returnFalse () ; } source
Code	{ return reportMatcher ( Any.ANY ) . < Boolean > returnFalse () ; } source
Distance : 9

148
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; Args }
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; Args }
Distance : 13

149
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; StringBuffer }
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; StringBuffer }
Distance : 13

150
Tree	{ return reportMatcher ( Any.ANY ) ; } f
Code	{ return reportMatcher ( Any.ANY ) ; } f
Distance : 11

151
Tree	{ super ( Boolean ) ; } array
Code	{ super ( Boolean ) ; } array
Distance : 12

152
Tree	{ return reportMatcher ( Any.ANY ) . < Boolean > returnFalse () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . < Boolean > returnFalse () ; } toString
Distance : 9

153
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } f
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } f
Distance : 12

154
Tree	{ reportMatcher ( Any.ANY ) ; Boolean = Any.ANY . returnFalse () ; }
Code	{ reportMatcher ( Any.ANY ) ; Boolean = Any.ANY . returnFalse () ; }
Distance : 8

155
Tree	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; } Class
Code	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; } Class
Distance : 12

156
Tree	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; } Preconditions
Distance : 12

157
Tree	{ return ( Boolean ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Boolean ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

158
Tree	{ return returnFalse ( Any.ANY ) ; }
Code	{ return returnFalse ( Any.ANY ) ; }
Distance : 11

159
Tree	{ returnFalse ( Any.ANY ) ; return super(); ; }
Code	{ returnFalse ( Any.ANY ) ; return super(); ; }
Distance : 12

160
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Boolean = Boolean ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Boolean = Boolean ; }
Distance : 12

161
Tree	{ returnFalse ( Any.ANY ) ; return continue; ; }
Code	{ returnFalse ( Any.ANY ) ; return continue; ; }
Distance : 12

162
Tree	{ return returnFalse ( Any.ANY ) . < Boolean > returnFalse () ; }
Code	{ return returnFalse ( Any.ANY ) . < Boolean > returnFalse () ; }
Distance : 9

163
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) . returnFalse () ; } options
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) . returnFalse () ; } options
Distance : 9

164
Tree	{ returnFalse ( Any.ANY ) ; Boolean = Any.ANY . returnFalse () ; }
Code	{ returnFalse ( Any.ANY ) ; Boolean = Any.ANY . returnFalse () ; }
Distance : 9

165
Tree	{ returnFalse ( Any.ANY ) . returnFalse () ; Boolean = false ; }
Code	{ returnFalse ( Any.ANY ) . returnFalse () ; Boolean = false ; }
Distance : 12

166
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) ; } MathRuntimeException
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) ; } MathRuntimeException
Distance : 11

167
Tree	{ returnFalse ( Any.ANY ) ; this . Boolean = Any.ANY ; }
Code	{ returnFalse ( Any.ANY ) ; this . Boolean = Any.ANY ; }
Distance : 12

168
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; Boolean = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; Boolean = true ; }
Distance : 11

169
Tree	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; } Test
Code	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; } Test
Distance : 12

170
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; } toString
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; } toString
Distance : 10

171
Tree	{ returnFalse ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnFalse ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

172
Tree	{ returnFalse ( Any.ANY ) ; return return; ; }
Code	{ returnFalse ( Any.ANY ) ; return return; ; }
Distance : 12

173
Tree	{ returnFalse ( Any.ANY ) . returnFalse () ; this . Boolean = Boolean ; }
Code	{ returnFalse ( Any.ANY ) . returnFalse () ; this . Boolean = Boolean ; }
Distance : 13

174
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Boolean = Boolean ; } toString
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Boolean = Boolean ; } toString
Distance : 13

175
Tree	{ return ( Boolean ) returnFalse () ; } f
Code	{ return ( Boolean ) returnFalse () ; } f
Distance : 9

176
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 14

177
Tree	{ return reportMatcher ( Any.ANY ) ; } {}
Code	{ return reportMatcher ( Any.ANY ) ; } {}
Distance : 11

178
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; } Preconditions
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; } Preconditions
Distance : 13

179
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Boolean = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Boolean = false ; }
Distance : 11

180
Tree	{ super ( Boolean ) ; }
Code	{ super ( Boolean ) ; }
Distance : 11

181
Tree	{ returnFalse ( Any.ANY ) ; return true ; }
Code	{ returnFalse ( Any.ANY ) ; return true ; }
Distance : 12

182
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) . reportMatcher () ; }
Distance : 9

183
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 14

184
Tree	{ reportMatcher ( Any.ANY ) ; return false ; } T
Code	{ reportMatcher ( Any.ANY ) ; return false ; } T
Distance : 12

185
Tree	{ reportMatcher ( Any.ANY ) ; Boolean = Any.ANY . returnFalse () ; } options
Code	{ reportMatcher ( Any.ANY ) ; Boolean = Any.ANY . returnFalse () ; } options
Distance : 9

186
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ParamChecks
Distance : 12

187
Tree	{ return ( Boolean ) returnFalse () ; } {}
Code	{ return ( Boolean ) returnFalse () ; } {}
Distance : 9

188
Tree	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 11

189
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; } -
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; } -
Distance : 13

190
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

191
Tree	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; } -
Code	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; } -
Distance : 12

192
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

193
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

194
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; try }
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; try }
Distance : 13

195
Tree	{ return returnFalse ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnFalse ( Any.ANY ) . reportMatcher () ; }
Distance : 9

196
Tree	{ return this . Boolean ; } array
Code	{ return this . Boolean ; } array
Distance : 13

197
Tree	{ super ( Boolean ) ; } class
Code	{ super ( Boolean ) ; } class
Distance : 12

198
Tree	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; } ParamChecks
Distance : 12

199
Tree	{ reportMatcher ( Any.ANY ) ; Boolean = Any.ANY . returnFalse () ; } T
Code	{ reportMatcher ( Any.ANY ) ; Boolean = Any.ANY . returnFalse () ; } T
Distance : 9

========================================================================


========================================================================
Example Number: 107
Parent Code is: 
catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
-------------------------------------------------------------------------------
Child code is: 
catch ( AssertionError e ) { error = handleVerifyException ( e ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (12 (331{val=catch}) (214{val=(}) (44 (43 (40{val=org.mockito.exceptions.verification.junit.ArgumentsAreDifferent})) (800{val=e})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=error}) (204{val==}) (32 (802{val=handleVerifyException}) (214{val=(}) (800{val=e}) (215{val=)}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (12 (331{val=catch}) (214{val=(}) (44 (43 (801{val=AssertionError})) (800{val=e})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=error}) (204{val==}) (32 (802{val=handleVerifyException}) (214{val=(}) (800{val=e}) (215{val=)}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/5/parent/src_org_mockito_internal_verification_VerificationOverTimeImpl.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . handleVerifyException ( handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . handleVerifyException ( handleVerifyException ( error ) ) ; }
Distance : 9

1
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , e . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , e . handleVerifyException () ) ; }
Distance : 13

2
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( e ) ; }
Distance : 5

3
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( error ) . handleVerifyException ( handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( error ) . handleVerifyException ( handleVerifyException ( error ) ) ; }
Distance : 9

4
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e ( error ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e ( error ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Distance : 8

5
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , e . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , e . handleVerifyException () ) ; }
Distance : 12

6
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( error ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( error ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Distance : 8

7
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error ) . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error ) . handleVerifyException () ; }
Distance : 5

8
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Distance : 1

9
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , handleVerifyException ( error ) ) ; }
Distance : 6

10
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = error . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = error . handleVerifyException () ; }
Distance : 6

11
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT + error + STRING_CONSTANT , e . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT + error + STRING_CONSTANT , e . handleVerifyException () ) ; }
Distance : 12

12
Tree	catch ( abstract org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( abstract org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 6

13
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , error . handleVerifyException () ) ; }
Distance : 10

14
Tree	catch ( static org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( static org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 6

15
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e ) ; }
Distance : 2

16
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 6

17
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , true ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , true ) ; }
Distance : 3

18
Tree	catch ( static org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Code	catch ( static org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Distance : 2

19
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , e ) ; }
Distance : 3

20
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , false ) ; }
Distance : 3

21
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 6

22
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Distance : 2

23
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error ) ; }
Distance : 3

24
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( error ) ; }
Distance : 6

25
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 5

26
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) ; } toString
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) ; } toString
Distance : 6

27
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException () ; } T
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException () ; } T
Distance : 7

28
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Math
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Math
Distance : 2

29
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e ) . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e ) . handleVerifyException () ; }
Distance : 5

30
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = error . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = error . handleVerifyException () ; }
Distance : 6

31
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e , handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e , handleVerifyException ( error ) ) ; }
Distance : 7

32
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; }
Distance : 5

33
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = e . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = e . handleVerifyException () ; }
Distance : 6

34
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e ) . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e ) . handleVerifyException () ; }
Distance : 5

35
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } wanted
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } wanted
Distance : 2

36
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = error ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = error ( e ) ; }
Distance : 3

37
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + error , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + error , error . handleVerifyException () ) ; }
Distance : 10

38
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e , this . e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e , this . e ) ; }
Distance : 6

39
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) ; } T
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) ; } T
Distance : 6

40
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Math
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Math
Distance : 4

41
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , this . error ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , this . error ) ; }
Distance : 7

42
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; }
Distance : 7

43
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , CHAR_CONS ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , CHAR_CONS ) ; }
Distance : 8

44
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException () ; } &&
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException () ; } &&
Distance : 7

45
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , final ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , final ) ; }
Distance : 8

46
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , false ) ; }
Distance : 4

47
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , ! ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , ! ) ; }
Distance : 8

48
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( error ) ) ; }
Distance : 7

49
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e , false ) ; }
Distance : 4

50
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( e ) . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( e ) . handleVerifyException () ; }
Distance : 6

51
Tree	catch ( public org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Code	catch ( public org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Distance : 2

52
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + error + STRING_CONSTANT , e . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + error + STRING_CONSTANT , e . handleVerifyException () ) ; }
Distance : 11

53
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = e . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = e . handleVerifyException () ; }
Distance : 6

54
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , e ) ; }
Distance : 3

55
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT + error , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT + error , error . handleVerifyException () ) ; }
Distance : 11

56
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( error , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( error , e ) ; }
Distance : 5

57
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; }
Distance : 2

58
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , true ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , true ) ; }
Distance : 4

59
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Distance : 7

60
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( error , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( error , false ) ; }
Distance : 5

61
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( e , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( e , this . error ) ; }
Distance : 7

62
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error , handleVerifyException ( e ) ) ; }
Distance : 5

63
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = error . handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = error . handleVerifyException ( e , e ) ; }
Distance : 6

64
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . e ) ; }
Distance : 5

65
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e ) ; }
Distance : 4

66
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( error ) ; }
Distance : 4

67
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = e ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = e ( e ) ; }
Distance : 3

68
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT + error + STRING_CONSTANT , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT + error + STRING_CONSTANT , error . handleVerifyException () ) ; }
Distance : 13

69
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) . handleVerifyException () ; } wanted
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) . handleVerifyException () ; } wanted
Distance : 5

70
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) ; } p
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) ; } p
Distance : 6

71
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( error , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( error , e ) ; }
Distance : 4

72
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) . handleVerifyException () ; }
Distance : 4

73
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = error . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = error . handleVerifyException () ; }
Distance : 7

74
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; }
Distance : 6

75
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , this . error ) ; }
Distance : 6

76
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Distance : 7

77
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , true ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , true ) ; }
Distance : 8

78
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , true ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , true ) ; }
Distance : 4

79
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , {} ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , {} ) ; }
Distance : 8

80
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) ; } options
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) ; } options
Distance : 6

81
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Distance : 6

82
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException () ; } p
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException () ; } p
Distance : 7

83
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error ) ; }
Distance : 2

84
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException () ; }
Distance : 6

85
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , error ) ; }
Distance : 3

86
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( error ) ; }
Distance : 3

87
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e ) ; }
Distance : 3

88
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e . handleVerifyException ( error , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e . handleVerifyException ( error , e ) ; }
Distance : 5

89
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e , e ) ; }
Distance : 4

90
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , handleVerifyException ( error ) ) ; }
Distance : 7

91
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e . handleVerifyException () ; }
Distance : 5

92
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , handleVerifyException ( error ) ) ; }
Distance : 7

93
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException () ; } options
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException () ; } options
Distance : 7

94
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( error ) ) ; }
Distance : 7

95
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , error . handleVerifyException () ) ; } Math
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , error . handleVerifyException () ) ; } Math
Distance : 13

96
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e ) ; }
Distance : 3

97
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( error ) ; }
Distance : 4

98
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , this . e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , this . e ) ; }
Distance : 6

99
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( error ) ; }
Distance : 3

100
Tree	catch ( abstract org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Code	catch ( abstract org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Distance : 2

101
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e ( e ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e ( e ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Distance : 10

102
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e . handleVerifyException ( e , error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e . handleVerifyException ( e , error ) ; }
Distance : 5

103
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( e ) ; }
Distance : 3

104
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 7

105
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , this . error ) ; }
Distance : 6

106
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException () ; } source
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException () ; } source
Distance : 7

107
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = error . handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = error . handleVerifyException ( e , e ) ; }
Distance : 6

108
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) ; } &&
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) ; } &&
Distance : 6

109
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error ) . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error ) . handleVerifyException () ; }
Distance : 7

110
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error , handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error , handleVerifyException ( error ) ) ; }
Distance : 6

111
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( error ) ) ; }
Distance : 8

112
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , super ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , super ) ; }
Distance : 8

113
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e ) ; }
Distance : 5

114
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , error . handleVerifyException () ) ; }
Distance : 12

115
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; } Math
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; } Math
Distance : 7

116
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = error ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = error ( e ) ; }
Distance : 4

117
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = error ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = error ( e ) ; }
Distance : 3

118
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , return; ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , return; ) ; }
Distance : 8

119
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT + error , e . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT + error , e . handleVerifyException () ) ; }
Distance : 11

120
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e , e ) ; }
Distance : 5

121
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e ( e ) . handleVerifyException ( handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e ( e ) . handleVerifyException ( handleVerifyException ( error ) ) ; }
Distance : 10

122
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Distance : 3

123
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e , error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e , error ) ; }
Distance : 5

124
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error ( e ) . handleVerifyException ( handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error ( e ) . handleVerifyException ( handleVerifyException ( error ) ) ; }
Distance : 10

125
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error ) ; }
Distance : 6

126
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( error ) . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( error ) . handleVerifyException () ; }
Distance : 6

127
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = e . handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = e . handleVerifyException ( e , e ) ; }
Distance : 6

128
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( error ) ) ; }
Distance : 9

129
Tree	catch ( private org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Code	catch ( private org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Distance : 2

130
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , error . handleVerifyException () ) ; } wanted
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , error . handleVerifyException () ) ; } wanted
Distance : 11

131
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = e . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = e . handleVerifyException () ; }
Distance : 7

132
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , error . handleVerifyException () ) ; }
Distance : 13

133
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Distance : 6

134
Tree	catch ( protected org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( protected org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 6

135
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( error ) . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( error ) . handleVerifyException () ; }
Distance : 6

136
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , false ) ; }
Distance : 8

137
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = e ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = e ( e ) ; }
Distance : 3

138
Tree	catch ( private org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( private org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 6

139
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , error ) ; }
Distance : 4

140
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e , error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e , error ) ; }
Distance : 4

141
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + error + STRING_CONSTANT , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + error + STRING_CONSTANT , error . handleVerifyException () ) ; }
Distance : 12

142
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , handleVerifyException ( e ) ) ; }
Distance : 6

143
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( error , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( error , this . error ) ; }
Distance : 7

144
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + error , e . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + error , e . handleVerifyException () ) ; }
Distance : 10

145
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) ; } source
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) ; } source
Distance : 6

146
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e ( error ) ; }
Distance : 3

147
Tree	catch ( synchronized org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Code	catch ( synchronized org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Distance : 2

148
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Distance : 8

149
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , Printable ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , Printable ) ; }
Distance : 8

150
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error ( e ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error ( e ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Distance : 9

151
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( error , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( error , handleVerifyException ( e ) ) ; }
Distance : 7

152
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , error . handleVerifyException () ) ; } Math
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , error . handleVerifyException () ) ; } Math
Distance : 11

153
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( error ) ) ; }
Distance : 8

154
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e ) ; }
Distance : 2

155
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , this . error ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , this . error ) ; }
Distance : 7

156
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( error ) ; }
Distance : 3

157
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( error ) ; }
Distance : 6

158
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , error ) ; }
Distance : 4

159
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( e , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( e , false ) ; }
Distance : 5

160
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , long ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , long ) ; }
Distance : 8

161
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( error , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( error , handleVerifyException ( e ) ) ; }
Distance : 6

162
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( e , e ) ; }
Distance : 5

163
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = error ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = error ( error ) ; }
Distance : 4

164
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e ) ; }
Distance : 4

165
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; }
Distance : 7

166
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException () ; } toString
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException () ; } toString
Distance : 7

167
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( e ) ) ; } wanted
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( e ) ) ; } wanted
Distance : 7

168
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Distance : 8

169
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e , true ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e , true ) ; }
Distance : 4

170
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e ( e ) ; }
Distance : 2

171
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , false ) ; }
Distance : 4

172
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , this . e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , this . e ) ; }
Distance : 5

173
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e ( e ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e ( e ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Distance : 9

174
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , e . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , e . handleVerifyException () ) ; }
Distance : 10

175
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT + e , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT + e , error . handleVerifyException () ) ; }
Distance : 11

176
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e . handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e . handleVerifyException ( e , e ) ; }
Distance : 5

177
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) . handleVerifyException () ; } Math
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) . handleVerifyException () ; } Math
Distance : 5

178
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( e ) ) ; } Math
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( e ) ) ; } Math
Distance : 7

179
Tree	catch ( protected org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Code	catch ( protected org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Distance : 2

180
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Distance : 7

181
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( error ) . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( error ) . handleVerifyException () ; }
Distance : 8

182
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; }
Distance : 8

183
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } wanted
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } wanted
Distance : 4

184
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) ; }
Distance : 5

185
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; } wanted
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; } wanted
Distance : 6

186
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( error , handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( error , handleVerifyException ( error ) ) ; }
Distance : 7

187
Tree	catch ( public org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( public org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 6

188
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( error ) ; }
Distance : 5

189
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = e . handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = e . handleVerifyException ( e , e ) ; }
Distance : 6

190
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e , handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e , handleVerifyException ( error ) ) ; }
Distance : 8

191
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; } Math
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; } Math
Distance : 6

192
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT + e , e . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT + e , e . handleVerifyException () ) ; }
Distance : 11

193
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( error ) . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( error ) . handleVerifyException () ; }
Distance : 7

194
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . e ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . e ) ; }
Distance : 6

195
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , e ) ; }
Distance : 4

196
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e ) . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e ) . handleVerifyException () ; }
Distance : 7

197
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error ) ; }
Distance : 4

198
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , error . handleVerifyException () ) ; } wanted
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , error . handleVerifyException () ) ; } wanted
Distance : 13

199
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; } wanted
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; } wanted
Distance : 7

========================================================================


========================================================================
Example Number: 108
Parent Code is: 
new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
-------------------------------------------------------------------------------
Child code is: 
new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + safelyGetMockName ( undesired . getMock () ) + STRING_CONSTANT , undesired . getLocation () ) )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (14 (304{val=new}) (43 (801{val=VerificationInOrderFailure})) (214{val=(}) (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (215{val=)})) (215{val=)})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (14 (304{val=new}) (43 (801{val=VerificationInOrderFailure})) (214{val=(}) (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (802{val=safelyGetMockName}) (214{val=(}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (215{val=)})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (215{val=)})) (215{val=)})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/4/parent/src_org_mockito_exceptions_Reporter.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Distance : 14

1
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Distance : 16

2
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . safelyGetMockName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . safelyGetMockName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

3
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getLocation ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getLocation ( undesired ) , undesired ) )
Distance : 11

4
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . getMock ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . getMock ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

5
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 14

6
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . safelyGetMockName ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . safelyGetMockName ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

7
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Distance : 16

8
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

9
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName ( undesired ) , undesired ) )
Distance : 12

10
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 15

11
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 15

12
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 15

13
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , CHAR_CONS )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , CHAR_CONS )
Distance : 16

14
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . safelyGetMockName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . safelyGetMockName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

15
Tree	new VerificationInOrderFailure ( new LocationImpl [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , false )
Code	new VerificationInOrderFailure ( new LocationImpl [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , false )
Distance : 15

16
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , true , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , true , undesired ) )
Distance : 16

17
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 9

18
Tree	new LocationImpl ( new VerificationInOrderFailure [] { undesired . join () , STRING_CONSTANT } , undesired . getLocation () )
Code	new LocationImpl ( new VerificationInOrderFailure [] { undesired . join () , STRING_CONSTANT } , undesired . getLocation () )
Distance : 17

19
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure [] { undesired . join () , STRING_CONSTANT } , undesired . getLocation () )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure [] { undesired . join () , STRING_CONSTANT } , undesired . getLocation () )
Distance : 16

20
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join ( undesired , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join ( undesired , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 17

21
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . safelyGetMockName ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . safelyGetMockName ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

22
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 11

23
Tree	new VerificationInOrderFailure ( new LocationImpl [] { undesired . safelyGetMockName () , STRING_CONSTANT } , undesired . getLocation () )
Code	new VerificationInOrderFailure ( new LocationImpl [] { undesired . safelyGetMockName () , STRING_CONSTANT } , undesired . getLocation () )
Distance : 15

24
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false )
Distance : 16

25
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName ( undesired ) , undesired ) )
Distance : 13

26
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Distance : 13

27
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation ( undesired ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation ( undesired ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 12

28
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 12

29
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , false )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , false )
Distance : 16

30
Tree	new VerificationInOrderFailure ( new LocationImpl [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , class )
Code	new VerificationInOrderFailure ( new LocationImpl [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , class )
Distance : 15

31
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 10

32
Tree	new VerificationInOrderFailure ( new LocationImpl [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , else )
Code	new VerificationInOrderFailure ( new LocationImpl [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , else )
Distance : 15

33
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Distance : 13

34
Tree	new VerificationInOrderFailure ( new LocationImpl [] { undesired . join () , STRING_CONSTANT } , undesired . getLocation () )
Code	new VerificationInOrderFailure ( new LocationImpl [] { undesired . join () , STRING_CONSTANT } , undesired . getLocation () )
Distance : 15

35
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getLocation ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getLocation ( undesired ) , undesired ) )
Distance : 12

36
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

37
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired ) ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired ) ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 12

38
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , return; , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , return; , undesired ) )
Distance : 16

39
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 9

40
Tree	new VerificationInOrderFailure ( new LocationImpl [] { STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () } , false )
Code	new VerificationInOrderFailure ( new LocationImpl [] { STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () } , false )
Distance : 16

41
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName ( undesired ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName ( undesired ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

42
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

43
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName ( STRING_CONSTANT ) , undesired ) )
Distance : 12

44
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 10

45
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getMock ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getMock ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

46
Tree	new VerificationInOrderFailure ( new LocationImpl [] { STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () } , super )
Code	new VerificationInOrderFailure ( new LocationImpl [] { STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () } , super )
Distance : 16

47
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( new LocationImpl () . getLocation ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( new LocationImpl () . getLocation ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

48
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

49
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 14

50
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , ! , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , ! , undesired ) )
Distance : 16

51
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 8

52
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Distance : 14

53
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 16

54
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired , undesired . getLocation () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired , undesired . getLocation () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

55
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

56
Tree	new VerificationInOrderFailure ( new LocationImpl [] { undesired . join () , STRING_CONSTANT } , undesired . join () )
Code	new VerificationInOrderFailure ( new LocationImpl [] { undesired . join () , STRING_CONSTANT } , undesired . join () )
Distance : 16

57
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getLocation ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getLocation ( STRING_CONSTANT ) , undesired ) )
Distance : 11

58
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join ( undesired , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , super , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join ( undesired , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , super , undesired ) )
Distance : 17

59
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation ( undesired , undesired . getLocation () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation ( undesired , undesired . getLocation () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

60
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Distance : 13

61
Tree	new VerificationInOrderFailure ( new LocationImpl [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , CHAR_CONS )
Code	new VerificationInOrderFailure ( new LocationImpl [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , CHAR_CONS )
Distance : 15

62
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName ( undesired , undesired . getLocation () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName ( undesired , undesired . getLocation () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

63
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( super , this ) )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( super , this ) )
Distance : 20

64
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , ! )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , ! )
Distance : 16

65
Tree	new VerificationInOrderFailure ( undesired , new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , extends )
Code	new VerificationInOrderFailure ( undesired , new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , extends )
Distance : 19

66
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new VerificationInOrderFailure () . getLocation ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new VerificationInOrderFailure () . getLocation ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

67
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Distance : 13

68
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( long , this ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( long , this ) )
Distance : 20

69
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getLocation ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getLocation ( STRING_CONSTANT ) , undesired ) )
Distance : 12

70
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 16

71
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired ) ) , STRING_CONSTANT , undesired . join () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired ) ) , STRING_CONSTANT , undesired . join () , undesired ) )
Distance : 12

72
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName ( STRING_CONSTANT ) , undesired ) )
Distance : 13

73
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Distance : 13

74
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Distance : 13

75
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

76
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getMock ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getMock ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

77
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired , undesired . getLocation () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired , undesired . getLocation () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

78
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , ? )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , ? )
Distance : 16

79
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( byte , this ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( byte , this ) )
Distance : 20

80
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . safelyGetMockName ( ConvertToTypedInterface.CONSTANT_WITHOUT_EXPLICIT_TYPE ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . safelyGetMockName ( ConvertToTypedInterface.CONSTANT_WITHOUT_EXPLICIT_TYPE ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

81
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . join ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . join ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

82
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getLocation ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getLocation ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

83
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure [] { undesired . safelyGetMockName () , STRING_CONSTANT } , undesired . getLocation () )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure [] { undesired . safelyGetMockName () , STRING_CONSTANT } , undesired . getLocation () )
Distance : 16

84
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( long ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( long ) )
Distance : 19

85
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS , this ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS , this ) )
Distance : 20

86
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( float ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( float ) )
Distance : 19

87
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( ! ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( ! ) )
Distance : 19

88
Tree	new VerificationInOrderFailure ( undesired , new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , super , super )
Code	new VerificationInOrderFailure ( undesired , new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , super , super )
Distance : 19

89
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , return; )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , return; )
Distance : 16

90
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( float , this ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( float , this ) )
Distance : 20

91
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( ! , this ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( ! , this ) )
Distance : 20

92
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . getMock ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . getMock ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

93
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( byte ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( byte ) )
Distance : 19

94
Tree	new VerificationInOrderFailure ( undesired , new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , class )
Code	new VerificationInOrderFailure ( undesired , new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , class )
Distance : 19

95
Tree	new VerificationInOrderFailure ( undesired , new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , / )
Code	new VerificationInOrderFailure ( undesired , new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , / )
Distance : 19

96
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure [] { undesired . join () , STRING_CONSTANT } , undesired . join () )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure [] { undesired . join () , STRING_CONSTANT } , undesired . join () )
Distance : 17

97
Tree	new VerificationInOrderFailure ( undesired , new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , CHAR_CONS , super )
Code	new VerificationInOrderFailure ( undesired , new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , CHAR_CONS , super )
Distance : 19

98
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( super ) )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( super ) )
Distance : 19

99
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 10

100
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired . join () , undesired . getLocation () ) ) , STRING_CONSTANT , CHAR_CONS , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired . join () , undesired . getLocation () ) ) , STRING_CONSTANT , CHAR_CONS , undesired ) )
Distance : 17

101
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( false , this ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( false , this ) )
Distance : 20

102
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Distance : 11

103
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , CHAR_CONS , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , CHAR_CONS , undesired ) )
Distance : 16

104
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

105
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . getLocation ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . getLocation ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

106
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getMock ( ConvertToTypedInterface.CONSTANT_WITHOUT_EXPLICIT_TYPE ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getMock ( ConvertToTypedInterface.CONSTANT_WITHOUT_EXPLICIT_TYPE ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

107
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

108
Tree	new LocationImpl ( new LocationImpl [] { undesired . join () , STRING_CONSTANT } , undesired . getLocation () )
Code	new LocationImpl ( new LocationImpl [] { undesired . join () , STRING_CONSTANT } , undesired . getLocation () )
Distance : 16

109
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Distance : 19

110
Tree	new VerificationInOrderFailure ( undesired , new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , CHAR_CONS )
Code	new VerificationInOrderFailure ( undesired , new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , CHAR_CONS )
Distance : 19

111
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock ( undesired , undesired . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock ( undesired , undesired . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

112
Tree	new VerificationInOrderFailure ( new LocationImpl [] { undesired . join () , STRING_CONSTANT } , undesired . getMock () )
Code	new VerificationInOrderFailure ( new LocationImpl [] { undesired . join () , STRING_CONSTANT } , undesired . getMock () )
Distance : 16

113
Tree	new VerificationInOrderFailure ( undesired , new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , super )
Code	new VerificationInOrderFailure ( undesired , new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , super )
Distance : 19

114
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation ( undesired , undesired . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation ( undesired , undesired . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

115
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired , undesired . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired , undesired . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

116
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS ) )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS ) )
Distance : 19

117
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false )
Distance : 16

118
Tree	new VerificationInOrderFailure ( undesired , new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , false )
Code	new VerificationInOrderFailure ( undesired , new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , false )
Distance : 19

119
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( super , this ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( super , this ) )
Distance : 20

120
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS , this ) )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS , this ) )
Distance : 20

121
Tree	new VerificationInOrderFailure ( new LocationImpl [] { undesired . getLocation () , STRING_CONSTANT } , undesired . getLocation () )
Code	new VerificationInOrderFailure ( new LocationImpl [] { undesired . getLocation () , STRING_CONSTANT } , undesired . getLocation () )
Distance : 15

122
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired , undesired . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired , undesired . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

123
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( false ) )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( false ) )
Distance : 19

124
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS ) )
Distance : 19

125
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . getLocation ( undesired , undesired ) ) , STRING_CONSTANT , undesired . join () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . getLocation ( undesired , undesired ) ) , STRING_CONSTANT , undesired . join () , undesired ) )
Distance : 13

126
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , super )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , super )
Distance : 16

127
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName ( undesired , undesired . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName ( undesired , undesired . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

128
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Distance : 19

129
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( false ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( false ) )
Distance : 19

130
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 11

131
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 11

132
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join ( undesired , undesired . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join ( undesired , undesired . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

133
Tree	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

134
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , ! )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , ! )
Distance : 16

135
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , super )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , super )
Distance : 16

136
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 11

137
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 9

138
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired . join () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired . join () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 17

139
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join ( undesired ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join ( undesired ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 13

140
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . getLocation ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . getLocation ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

141
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getLocation ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getLocation ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

142
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 16

143
Tree	new VerificationInOrderFailure ( new LocationImpl [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , super )
Code	new VerificationInOrderFailure ( new LocationImpl [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , super )
Distance : 15

144
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 12

145
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , class , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , class , undesired ) )
Distance : 16

146
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Distance : 12

147
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 17

148
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired ) ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired ) ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 12

149
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Distance : 13

150
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . getLocation ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . getLocation ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

151
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 16

152
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , super )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , super )
Distance : 16

153
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . safelyGetMockName () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . safelyGetMockName () , undesired . getLocation () ) , undesired ) )
Distance : 11

154
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 10

155
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 10

156
Tree	new VerificationInOrderFailure ( undesired , new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , ? )
Code	new VerificationInOrderFailure ( undesired , new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , ? )
Distance : 19

157
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( safelyGetMockName ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( safelyGetMockName ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 10

158
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 15

159
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Distance : 12

160
Tree	new VerificationInOrderFailure ( undesired , new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , <> )
Code	new VerificationInOrderFailure ( undesired , new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , <> )
Distance : 19

161
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . join ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . join ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 10

162
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 10

163
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . getMock () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . getMock () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Distance : 18

164
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . getLocation () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . getLocation () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Distance : 19

165
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , CHAR_CONS , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , CHAR_CONS , undesired ) )
Distance : 16

166
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . safelyGetMockName () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . safelyGetMockName () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Distance : 19

167
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Distance : 12

168
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 10

169
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( false , this ) )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( false , this ) )
Distance : 20

170
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . getMock () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . getMock () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Distance : 19

171
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 11

172
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . getLocation () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . getLocation () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Distance : 19

173
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , CHAR_CONS )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , CHAR_CONS )
Distance : 16

174
Tree	new LocationImpl ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Code	new LocationImpl ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Distance : 20

175
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , else , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , else , undesired ) )
Distance : 16

176
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( super ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( super ) )
Distance : 19

177
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , CHAR_CONS )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , CHAR_CONS )
Distance : 16

178
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getMock ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getMock ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Distance : 11

179
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 10

180
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . safelyGetMockName ( join ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . safelyGetMockName ( join ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

181
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , super , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , super , undesired ) )
Distance : 16

182
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 11

183
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 16

184
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired . join () , undesired . getLocation () ) ) , STRING_CONSTANT , super , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired . join () , undesired . getLocation () ) ) , STRING_CONSTANT , super , undesired ) )
Distance : 17

185
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 12

186
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Distance : 13

187
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , super , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , super , undesired ) )
Distance : 16

188
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) , STRING_CONSTANT , super , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) , STRING_CONSTANT , super , undesired ) )
Distance : 17

189
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

190
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , super , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , super , undesired ) )
Distance : 16

191
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

192
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

193
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . safelyGetMockName () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . safelyGetMockName () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Distance : 19

194
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . getLocation ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . getLocation ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

195
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . getLocation ( undesired . join () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . getLocation ( undesired . join () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Distance : 19

196
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . safelyGetMockName ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . safelyGetMockName ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 11

197
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . join () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . join () , undesired . getLocation () ) , undesired ) )
Distance : 11

198
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . getMock ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . getMock ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

199
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( new VerificationInOrderFailure () . getLocation ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( new VerificationInOrderFailure () . getLocation ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

========================================================================


========================================================================
Example Number: 109
Parent Code is: 
join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () , scenario )
-------------------------------------------------------------------------------
Child code is: 
join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + safelyGetMockName ( undesired . getMock () ) + STRING_CONSTANT , undesired . getLocation () , scenario )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (234{val=,}) (800{val=scenario}) (215{val=)})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (802{val=safelyGetMockName}) (214{val=(}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (215{val=)})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (234{val=,}) (800{val=scenario}) (215{val=)})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/4/parent/src_org_mockito_exceptions_Reporter.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 20

1
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

2
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 20

3
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , super , STRING_CONSTANT )
Distance : 20

4
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 22

5
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 22

6
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Distance : 21

7
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

8
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

9
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( scenario ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( scenario ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 21

10
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 22

11
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , false , STRING_CONSTANT )
Distance : 20

12
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

13
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , super , STRING_CONSTANT )
Distance : 18

14
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 15

15
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Distance : 21

16
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

17
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

18
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( scenario ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( scenario ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 21

19
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , CHAR_CONS , STRING_CONSTANT )
Distance : 15

20
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 22

21
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( java.util.Locale.US ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( java.util.Locale.US ) , false , STRING_CONSTANT )
Distance : 20

22
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 14

23
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

24
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

25
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Distance : 20

26
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

27
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( LanguageMode.ECMASCRIPT8 ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( LanguageMode.ECMASCRIPT8 ) , false , STRING_CONSTANT )
Distance : 20

28
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

29
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( Node.FLAG_LOCAL_RESULTS ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( Node.FLAG_LOCAL_RESULTS ) , false , STRING_CONSTANT )
Distance : 20

30
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

31
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( LanguageMode.ECMASCRIPT8 ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( LanguageMode.ECMASCRIPT8 ) , false , STRING_CONSTANT )
Distance : 20

32
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

33
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

34
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , class , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , class , STRING_CONSTANT )
Distance : 15

35
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 18

36
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

37
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 18

38
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( Node.FLAG_LOCAL_RESULTS ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( Node.FLAG_LOCAL_RESULTS ) , false , STRING_CONSTANT )
Distance : 20

39
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 19

40
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 15

41
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , class , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , class , STRING_CONSTANT )
Distance : 15

42
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Distance : 15

43
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Distance : 15

44
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( FeatureSet.TYPESCRIPT ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( FeatureSet.TYPESCRIPT ) , false , STRING_CONSTANT )
Distance : 20

45
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( LanguageMode.ECMASCRIPT8 ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( LanguageMode.ECMASCRIPT8 ) , false , STRING_CONSTANT )
Distance : 20

46
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

47
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

48
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( FeatureSet.TYPESCRIPT ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( FeatureSet.TYPESCRIPT ) , false , STRING_CONSTANT )
Distance : 20

49
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 20

50
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , CHAR_CONS , STRING_CONSTANT )
Distance : 15

51
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 20

52
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( Boolean.FALSE ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( Boolean.FALSE ) , false , STRING_CONSTANT )
Distance : 20

53
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( Boolean.FALSE ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( Boolean.FALSE ) , false , STRING_CONSTANT )
Distance : 20

54
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 20

55
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

56
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( FeatureSet.TYPESCRIPT ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( FeatureSet.TYPESCRIPT ) , false , STRING_CONSTANT )
Distance : 20

57
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( java.util.Locale.US ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( java.util.Locale.US ) , false , STRING_CONSTANT )
Distance : 20

58
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

59
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( ConvertToTypedInterface.CONSTANT_WITHOUT_EXPLICIT_TYPE ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( ConvertToTypedInterface.CONSTANT_WITHOUT_EXPLICIT_TYPE ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

60
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( Nullability.EXPLICIT ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( Nullability.EXPLICIT ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

61
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 21

62
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 17

63
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( RandomSource.State ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( RandomSource.State ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

64
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( java.util.Locale.US ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( java.util.Locale.US ) , false , STRING_CONSTANT )
Distance : 20

65
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Distance : 20

66
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 17

67
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( Node.FLAG_LOCAL_RESULTS ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( Node.FLAG_LOCAL_RESULTS ) , false , STRING_CONSTANT )
Distance : 20

68
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( Es6TypedToEs6Converter.CANNOT_CONVERT_BOUNDED_GENERICS ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( Es6TypedToEs6Converter.CANNOT_CONVERT_BOUNDED_GENERICS ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

69
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( FeatureSet.TYPESCRIPT ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( FeatureSet.TYPESCRIPT ) , false , STRING_CONSTANT )
Distance : 20

70
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( ProcessDefines.UNKNOWN_DEFINE_WARNING ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( ProcessDefines.UNKNOWN_DEFINE_WARNING ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

71
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( FeatureSet.ES6 ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( FeatureSet.ES6 ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

72
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 16

73
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( LanguageMode.ECMASCRIPT8 ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( LanguageMode.ECMASCRIPT8 ) , false , STRING_CONSTANT )
Distance : 20

74
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( java.util.Locale.US ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( java.util.Locale.US ) , false , STRING_CONSTANT )
Distance : 20

75
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 21

76
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 16

77
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( FeatureSet.ES6 ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( FeatureSet.ES6 ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

78
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 17

79
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 18

80
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , false , STRING_CONSTANT )
Distance : 20

81
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

82
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( ProcessDefines.UNKNOWN_DEFINE_WARNING ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( ProcessDefines.UNKNOWN_DEFINE_WARNING ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

83
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Distance : 15

84
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 20

85
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( Node.FLAG_LOCAL_RESULTS ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( Node.FLAG_LOCAL_RESULTS ) , false , STRING_CONSTANT )
Distance : 20

86
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 20

87
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , && , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , && , STRING_CONSTANT )
Distance : 18

88
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

89
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 19

90
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

91
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , && , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , && , STRING_CONSTANT )
Distance : 18

92
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , super , STRING_CONSTANT )
Distance : 18

93
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

94
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Distance : 19

95
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 15

96
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 20

97
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( SerializableMode.ACROSS_CLASSLOADERS ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( SerializableMode.ACROSS_CLASSLOADERS ) , false , STRING_CONSTANT )
Distance : 20

98
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

99
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , join ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , join ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

100
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

101
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( Locale.US ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( Locale.US ) , false , STRING_CONSTANT )
Distance : 20

102
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , scenario . getLocation () , STRING_CONSTANT )
Distance : 21

103
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , super , STRING_CONSTANT )
Distance : 15

104
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 20

105
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

106
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 20

107
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , join ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , join ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 16

108
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 19

109
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 20

110
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Distance : 23

111
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , super , STRING_CONSTANT )
Distance : 15

112
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Distance : 14

113
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

114
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 13

115
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 17

116
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 17

117
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , safelyGetMockName ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , safelyGetMockName ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

118
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getMock ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getMock ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 18

119
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 18

120
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , join ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , join ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 18

121
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 18

122
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 18

123
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 18

124
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Distance : 18

125
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , false , STRING_CONSTANT )
Distance : 18

126
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getMock () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getMock () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

127
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , scenario . getLocation () , STRING_CONSTANT )
Distance : 21

128
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Distance : 17

129
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getLocation () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getLocation () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

130
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Distance : 17

131
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Distance : 18

132
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , false , STRING_CONSTANT )
Distance : 18

133
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 20

134
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , class , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , class , STRING_CONSTANT )
Distance : 18

135
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , class , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , class , STRING_CONSTANT )
Distance : 18

136
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

137
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

138
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( LanguageMode.ECMASCRIPT5 ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( LanguageMode.ECMASCRIPT5 ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

139
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 14

140
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( LanguageMode.ECMASCRIPT5 ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( LanguageMode.ECMASCRIPT5 ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

141
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 14

142
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 15

143
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 14

144
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Distance : 22

145
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , join ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , join ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

146
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 15

147
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Distance : 22

148
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , join ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , join ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 15

149
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Distance : 22

150
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

151
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 21

152
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Distance : 20

153
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , CHAR_CONS , STRING_CONSTANT )
Distance : 20

154
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , false , STRING_CONSTANT )
Distance : 20

155
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Distance : 21

156
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Distance : 22

157
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 21

158
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , CHAR_CONS , STRING_CONSTANT )
Distance : 22

159
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Distance : 20

160
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 15

161
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 22

162
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Distance : 21

163
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , CHAR_CONS , STRING_CONSTANT )
Distance : 22

164
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 21

165
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 19

166
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 22

167
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Distance : 20

168
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , join () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , join () , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 15

169
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Distance : 23

170
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Distance : 20

171
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 20

172
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 19

173
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 13

174
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 13

175
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Distance : 22

176
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , false , STRING_CONSTANT )
Distance : 22

177
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 21

178
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , false , STRING_CONSTANT )
Distance : 22

179
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Distance : 22

180
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 15

181
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 17

182
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 20

183
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

184
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , join ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , join ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 18

185
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Distance : 19

186
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , join ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , join ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 16

187
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 19

188
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , join ( undesired ) , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , join ( undesired ) , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

189
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , safelyGetMockName ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , safelyGetMockName ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

190
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , super , STRING_CONSTANT )
Distance : 22

191
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , false , STRING_CONSTANT )
Distance : 22

192
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , CHAR_CONS , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , CHAR_CONS , super , STRING_CONSTANT )
Distance : 22

193
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 22

194
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , false , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , false , false , STRING_CONSTANT )
Distance : 22

195
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , CHAR_CONS , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , CHAR_CONS , false , STRING_CONSTANT )
Distance : 22

196
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , CHAR_CONS , STRING_CONSTANT )
Distance : 22

197
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , CHAR_CONS , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , CHAR_CONS , CHAR_CONS , STRING_CONSTANT )
Distance : 22

198
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Distance : 22

199
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , class , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , class , super , STRING_CONSTANT )
Distance : 22

========================================================================


========================================================================
Example Number: 110
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

1
Tree	return convertLocalToUTC ( localInstant , instant , false ) ;
Code	return convertLocalToUTC ( localInstant , instant , false ) ;
Distance : 4

2
Tree	return ! iZone && ! instant . convertLocalToUTC () ;
Code	return ! iZone && ! instant . convertLocalToUTC () ;
Distance : 10

3
Tree	return iZone != printTimeZone ;
Code	return iZone != printTimeZone ;
Distance : 9

4
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

5
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

6
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

7
Tree	return convertLocalToUTC ( instant , localInstant ) ;
Code	return convertLocalToUTC ( instant , localInstant ) ;
Distance : 6

8
Tree	return iZone != null iZone extends ;
Code	return iZone != null iZone extends ;
Distance : 9

9
Tree	return localInstant . convertLocalToUTC ( this , instant ) ;
Code	return localInstant . convertLocalToUTC ( this , instant ) ;
Distance : 4

10
Tree	return ! instant && ! localInstant . convertLocalToUTC () ;
Code	return ! instant && ! localInstant . convertLocalToUTC () ;
Distance : 9

11
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

12
Tree	return iZone != TimeUnit.SECONDS ;
Code	return iZone != TimeUnit.SECONDS ;
Distance : 9

13
Tree	return instant . convertLocalToUTC ( iZone ) ;
Code	return instant . convertLocalToUTC ( iZone ) ;
Distance : 6

14
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 3

15
Tree	return convertLocalToUTC ( iZone , iZone ) ;
Code	return convertLocalToUTC ( iZone , iZone ) ;
Distance : 6

16
Tree	return iZone . instant ( localInstant ) ;
Code	return iZone . instant ( localInstant ) ;
Distance : 5

17
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Distance : 6

18
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 8

19
Tree	return iZone . convertLocalToUTC ( iZone , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , iZone , null ) ;
Distance : 3

20
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , iZone ) ;
Distance : 10

21
Tree	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

22
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( iZone , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( iZone , localInstant ) ;
Distance : 10

23
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && extends ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && extends ;
Distance : 6

24
Tree	return ( ( iZone ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( iZone ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

25
Tree	return convertLocalToUTC ( localInstant , localInstant ) ; wanted
Code	return convertLocalToUTC ( localInstant , localInstant ) ; wanted
Distance : 6

26
Tree	return iZone . convertLocalToUTC ( this , instant ) ;
Code	return iZone . convertLocalToUTC ( this , instant ) ;
Distance : 3

27
Tree	return NUMBER_CONSTANT / instant ;
Code	return NUMBER_CONSTANT / instant ;
Distance : 9

28
Tree	return ! iZone && ! iZone . convertLocalToUTC () ; wanted
Code	return ! iZone && ! iZone . convertLocalToUTC () ; wanted
Distance : 11

29
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

30
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Distance : 2

31
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

32
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 4

33
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

34
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ; wanted
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ; wanted
Distance : 5

35
Tree	return convertLocalToUTC ( localInstant , iZone , instant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , instant , iZone ) ;
Distance : 5

36
Tree	return iZone . convertLocalToUTC ( iZone ) ;
Code	return iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

37
Tree	return convertLocalToUTC ( instant , iZone , false ) ;
Code	return convertLocalToUTC ( instant , iZone , false ) ;
Distance : 5

38
Tree	return convertLocalToUTC ( localInstant , localInstant , instant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , instant , iZone ) ;
Distance : 5

39
Tree	return instant . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return instant . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 4

40
Tree	return iZone . localInstant ( localInstant ) ;
Code	return iZone . localInstant ( localInstant ) ;
Distance : 5

41
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Distance : 6

42
Tree	return convertLocalToUTC ( iZone , instant , false ) ;
Code	return convertLocalToUTC ( iZone , instant , false ) ;
Distance : 5

43
Tree	return localInstant . convertLocalToUTC ( instant , false ) ;
Code	return localInstant . convertLocalToUTC ( instant , false ) ;
Distance : 4

44
Tree	return ( ( instant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( instant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

45
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

46
Tree	return iZone . convertLocalToUTC ( localInstant , instant , return; ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant , return; ) ;
Distance : 2

47
Tree	return ! localInstant && ! localInstant . convertLocalToUTC () ;
Code	return ! localInstant && ! localInstant . convertLocalToUTC () ;
Distance : 9

48
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , MillisDurationField.INSTANCE ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , MillisDurationField.INSTANCE ) ;
Distance : 4

49
Tree	return iZone . convertLocalToUTC ( null , localInstant , localInstant , return; ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , localInstant , return; ) ;
Distance : 4

50
Tree	return localInstant . convertLocalToUTC ( instant ) ;
Code	return localInstant . convertLocalToUTC ( instant ) ;
Distance : 5

51
Tree	return ! iZone && ! localInstant . convertLocalToUTC () ;
Code	return ! iZone && ! localInstant . convertLocalToUTC () ;
Distance : 9

52
Tree	return iZone != null iZone += ;
Code	return iZone != null iZone += ;
Distance : 9

53
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , com.google.protobuf.GeneratedMessageV3 ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , com.google.protobuf.GeneratedMessageV3 ) ;
Distance : 4

54
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Distance : 6

55
Tree	return convertLocalToUTC ( iZone , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( iZone , localInstant , localInstant ) ;
Distance : 5

56
Tree	return convertLocalToUTC ( iZone , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( iZone , localInstant , iZone , iZone ) ;
Distance : 6

57
Tree	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

58
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

59
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Distance : 6

60
Tree	return iZone != null iZone * ;
Code	return iZone != null iZone * ;
Distance : 9

61
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , AllowedSolutions.ANY_SIDE ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , AllowedSolutions.ANY_SIDE ) ;
Distance : 4

62
Tree	return iZone != null iZone throws ;
Code	return iZone != null iZone throws ;
Distance : 9

63
Tree	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Distance : 5

64
Tree	return iZone . convertLocalToUTC ( instant ) ;
Code	return iZone . convertLocalToUTC ( instant ) ;
Distance : 4

65
Tree	return convertLocalToUTC ( localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone ) ;
Distance : 5

66
Tree	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Distance : 2

67
Tree	return instant . convertLocalToUTC ( this , iZone ) ;
Code	return instant . convertLocalToUTC ( this , iZone ) ;
Distance : 5

68
Tree	return iZone . convertLocalToUTC ( localInstant , iZone , return; ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone , return; ) ;
Distance : 2

69
Tree	return instant != localInstant ;
Code	return instant != localInstant ;
Distance : 9

70
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

71
Tree	return convertLocalToUTC ( localInstant , iZone , instant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , instant ) ;
Distance : 3

72
Tree	return NUMBER_CONSTANT / iZone ; p
Code	return NUMBER_CONSTANT / iZone ; p
Distance : 11

73
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && anyList ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && anyList ;
Distance : 6

74
Tree	return iZone . convertLocalToUTC ( null , localInstant , iZone , return; ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , iZone , return; ) ;
Distance : 4

75
Tree	return iZone . convertLocalToUTC ( iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , localInstant , null ) ;
Distance : 3

76
Tree	return convertLocalToUTC ( instant , iZone ) ;
Code	return convertLocalToUTC ( instant , iZone ) ;
Distance : 6

77
Tree	return iZone . convertLocalToUTC ( this , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 4

78
Tree	return iZone != localInstant ;
Code	return iZone != localInstant ;
Distance : 8

79
Tree	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Distance : 4

80
Tree	return NUMBER_CONSTANT / iZone ; toString
Code	return NUMBER_CONSTANT / iZone ; toString
Distance : 11

81
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && {} ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && {} ;
Distance : 6

82
Tree	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 8

83
Tree	return instant . convertLocalToUTC ( this , localInstant ) ;
Code	return instant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

84
Tree	return convertLocalToUTC ( iZone , localInstant , false ) ;
Code	return convertLocalToUTC ( iZone , localInstant , false ) ;
Distance : 5

85
Tree	return iZone . iZone ( iZone ) ;
Code	return iZone . iZone ( iZone ) ;
Distance : 6

86
Tree	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Distance : 4

87
Tree	return convertLocalToUTC ( iZone , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( iZone , localInstant , localInstant , iZone ) ;
Distance : 6

88
Tree	return ( ( iZone ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( iZone ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 8

89
Tree	return iZone . iZone ( instant ) ;
Code	return iZone . iZone ( instant ) ;
Distance : 5

90
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , CheckLevel.ERROR ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , CheckLevel.ERROR ) ;
Distance : 4

91
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && % ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && % ;
Distance : 6

92
Tree	return iZone != null iZone ? ;
Code	return iZone != null iZone ? ;
Distance : 9

93
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Distance : 4

94
Tree	return convertLocalToUTC ( iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( iZone , localInstant , iZone ) ;
Distance : 5

95
Tree	return convertLocalToUTC ( iZone , iZone , false ) ;
Code	return convertLocalToUTC ( iZone , iZone , false ) ;
Distance : 5

96
Tree	return convertLocalToUTC ( instant , instant , false ) ;
Code	return convertLocalToUTC ( instant , instant , false ) ;
Distance : 5

97
Tree	return convertLocalToUTC ( instant , instant ) ;
Code	return convertLocalToUTC ( instant , instant ) ;
Distance : 5

98
Tree	return localInstant != instant ;
Code	return localInstant != instant ;
Distance : 8

99
Tree	return ! localInstant && ! iZone . convertLocalToUTC () ;
Code	return ! localInstant && ! iZone . convertLocalToUTC () ;
Distance : 10

100
Tree	return ! instant && ! iZone . convertLocalToUTC () ;
Code	return ! instant && ! iZone . convertLocalToUTC () ;
Distance : 10

101
Tree	return iZone . convertLocalToUTC ( null , iZone , instant , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , instant , null ) ;
Distance : 4

102
Tree	return iZone . localInstant ( instant ) ;
Code	return iZone . localInstant ( instant ) ;
Distance : 5

103
Tree	return convertLocalToUTC ( localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , false ) ;
Distance : 4

104
Tree	return iZone . convertLocalToUTC ( instant , false ) ;
Code	return iZone . convertLocalToUTC ( instant , false ) ;
Distance : 3

105
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , DiagnosticGroups.MISSING_OVERRIDE ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , DiagnosticGroups.MISSING_OVERRIDE ) ;
Distance : 4

106
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

107
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

108
Tree	return convertLocalToUTC ( localInstant , localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , instant ) ;
Distance : 3

109
Tree	return instant . convertLocalToUTC ( instant , false ) ;
Code	return instant . convertLocalToUTC ( instant , false ) ;
Distance : 4

110
Tree	return convertLocalToUTC ( localInstant , instant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant , iZone , iZone ) ;
Distance : 6

111
Tree	return iZone != null iZone <> ;
Code	return iZone != null iZone <> ;
Distance : 9

112
Tree	return iZone . convertLocalToUTC ( null , instant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , instant , localInstant , null ) ;
Distance : 5

113
Tree	return instant . localInstant ( localInstant ) ;
Code	return instant . localInstant ( localInstant ) ;
Distance : 6

114
Tree	return ( ( localInstant ) instant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) instant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

115
Tree	return iZone . convertLocalToUTC ( iZone , instant , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , instant , null ) ;
Distance : 3

116
Tree	return instant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return instant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

117
Tree	return iZone . convertLocalToUTC ( localInstant , true ) ;
Code	return iZone . convertLocalToUTC ( localInstant , true ) ;
Distance : 3

118
Tree	return convertLocalToUTC ( localInstant , instant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant , localInstant , iZone ) ;
Distance : 6

119
Tree	return instant . convertLocalToUTC ( iZone , false ) ;
Code	return instant . convertLocalToUTC ( iZone , false ) ;
Distance : 4

120
Tree	return iZone . convertLocalToUTC ( instant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( instant , localInstant , null ) ;
Distance : 3

121
Tree	return convertLocalToUTC ( localInstant , instant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant , iZone ) ;
Distance : 4

122
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 5

123
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Distance : 4

124
Tree	return instant . convertLocalToUTC ( instant ) ;
Code	return instant . convertLocalToUTC ( instant ) ;
Distance : 5

125
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , printTimeZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , printTimeZone ) ;
Distance : 4

126
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( instant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( instant , localInstant ) ;
Distance : 10

127
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , options.prettyPrint ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , options.prettyPrint ) ;
Distance : 4

128
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 7

129
Tree	return convertLocalToUTC ( localInstant , localInstant , true ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , true ) ;
Distance : 4

130
Tree	return iZone . convertLocalToUTC ( null , instant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , instant , iZone , null ) ;
Distance : 5

131
Tree	return NUMBER_CONSTANT / iZone ; Class
Code	return NUMBER_CONSTANT / iZone ; Class
Distance : 11

132
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , localInstant ) ;
Distance : 10

133
Tree	return convertLocalToUTC ( localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , instant ) ;
Distance : 4

134
Tree	return localInstant . iZone ( localInstant ) ;
Code	return localInstant . iZone ( localInstant ) ;
Distance : 6

135
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Distance : 6

136
Tree	return NUMBER_CONSTANT / localInstant ;
Code	return NUMBER_CONSTANT / localInstant ;
Distance : 9

137
Tree	return localInstant . localInstant ( localInstant ) ;
Code	return localInstant . localInstant ( localInstant ) ;
Distance : 6

138
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

139
Tree	return NUMBER_CONSTANT / iZone ; Preconditions
Code	return NUMBER_CONSTANT / iZone ; Preconditions
Distance : 11

140
Tree	return iZone . iZone ( localInstant ) ;
Code	return iZone . iZone ( localInstant ) ;
Distance : 5

141
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && &= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && &= ;
Distance : 6

142
Tree	return iZone != AllowedSolutions.ANY_SIDE ;
Code	return iZone != AllowedSolutions.ANY_SIDE ;
Distance : 9

143
Tree	return iZone . convertLocalToUTC ( localInstant ) ; wanted
Code	return iZone . convertLocalToUTC ( localInstant ) ; wanted
Distance : 5

144
Tree	return instant != instant ;
Code	return instant != instant ;
Distance : 9

145
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

146
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && /= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && /= ;
Distance : 6

147
Tree	return iZone != DiagnosticGroups.MISSING_OVERRIDE ;
Code	return iZone != DiagnosticGroups.MISSING_OVERRIDE ;
Distance : 9

148
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

149
Tree	return iZone != null iZone / ;
Code	return iZone != null iZone / ;
Distance : 9

150
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( iZone , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( iZone , iZone ) ;
Distance : 10

151
Tree	return iZone != iOffsetParsed ;
Code	return iZone != iOffsetParsed ;
Distance : 9

152
Tree	return iZone != options.prettyPrint ;
Code	return iZone != options.prettyPrint ;
Distance : 9

153
Tree	return iZone != instant ;
Code	return iZone != instant ;
Distance : 8

154
Tree	return instant . convertLocalToUTC ( this , instant ) ;
Code	return instant . convertLocalToUTC ( this , instant ) ;
Distance : 4

155
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , FeatureSet.ES3 ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , FeatureSet.ES3 ) ;
Distance : 4

156
Tree	return iZone != coefficients.length ;
Code	return iZone != coefficients.length ;
Distance : 9

157
Tree	return NUMBER_CONSTANT / iZone ; ParamChecks
Code	return NUMBER_CONSTANT / iZone ; ParamChecks
Distance : 11

158
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

159
Tree	return ! instant && ! instant . convertLocalToUTC () ;
Code	return ! instant && ! instant . convertLocalToUTC () ;
Distance : 10

160
Tree	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

161
Tree	return localInstant . convertLocalToUTC ( this , iZone ) ;
Code	return localInstant . convertLocalToUTC ( this , iZone ) ;
Distance : 5

162
Tree	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Distance : 2

163
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 4

164
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

165
Tree	return NUMBER_CONSTANT / iZone ; {}
Code	return NUMBER_CONSTANT / iZone ; {}
Distance : 11

166
Tree	return localInstant . convertLocalToUTC ( iZone ) ;
Code	return localInstant . convertLocalToUTC ( iZone ) ;
Distance : 6

167
Tree	return iZone . localInstant ( iZone ) ;
Code	return iZone . localInstant ( iZone ) ;
Distance : 6

168
Tree	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Distance : 4

169
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

170
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

171
Tree	return convertLocalToUTC ( iZone , localInstant ) ;
Code	return convertLocalToUTC ( iZone , localInstant ) ;
Distance : 6

172
Tree	return instant != iZone ;
Code	return instant != iZone ;
Distance : 10

173
Tree	return instant . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return instant . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 5

174
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

175
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

176
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 4

177
Tree	return instant . convertLocalToUTC ( localInstant , false ) ;
Code	return instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

178
Tree	return iZone != iZone ; wanted
Code	return iZone != iZone ; wanted
Distance : 10

179
Tree	return localInstant != iZone ;
Code	return localInstant != iZone ;
Distance : 9

180
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Distance : 4

181
Tree	return localInstant != localInstant ;
Code	return localInstant != localInstant ;
Distance : 9

182
Tree	return ! localInstant && ! instant . convertLocalToUTC () ;
Code	return ! localInstant && ! instant . convertLocalToUTC () ;
Distance : 10

183
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Distance : 6

184
Tree	return iZone != null iZone & ;
Code	return iZone != null iZone & ;
Distance : 9

185
Tree	return localInstant . convertLocalToUTC ( iZone , false ) ;
Code	return localInstant . convertLocalToUTC ( iZone , false ) ;
Distance : 4

186
Tree	return localInstant . convertLocalToUTC ( localInstant ) ;
Code	return localInstant . convertLocalToUTC ( localInstant ) ;
Distance : 5

187
Tree	return convertLocalToUTC ( instant , localInstant , false ) ;
Code	return convertLocalToUTC ( instant , localInstant , false ) ;
Distance : 5

188
Tree	return convertLocalToUTC ( iZone , instant ) ;
Code	return convertLocalToUTC ( iZone , instant ) ;
Distance : 5

189
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; wanted
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; wanted
Distance : 5

190
Tree	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Distance : 4

191
Tree	return iZone != null iZone + ;
Code	return iZone != null iZone + ;
Distance : 9

192
Tree	return convertLocalToUTC ( localInstant , instant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , instant , localInstant ) ;
Distance : 4

193
Tree	return instant . convertLocalToUTC ( localInstant ) ;
Code	return instant . convertLocalToUTC ( localInstant ) ;
Distance : 5

194
Tree	return iZone != CheckLevel.ERROR ;
Code	return iZone != CheckLevel.ERROR ;
Distance : 9

195
Tree	return NUMBER_CONSTANT / iZone ; &&
Code	return NUMBER_CONSTANT / iZone ; &&
Distance : 11

196
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

197
Tree	return iZone != null iZone instanceof ;
Code	return iZone != null iZone instanceof ;
Distance : 9

198
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , return; ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , return; ) ;
Distance : 2

199
Tree	return iZone . convertLocalToUTC ( null , iZone , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , iZone , null ) ;
Distance : 5

========================================================================


========================================================================
Example Number: 111
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

1
Tree	return convertLocalToUTC ( localInstant , instant , false ) ;
Code	return convertLocalToUTC ( localInstant , instant , false ) ;
Distance : 4

2
Tree	return ! iZone && ! instant . convertLocalToUTC () ;
Code	return ! iZone && ! instant . convertLocalToUTC () ;
Distance : 10

3
Tree	return iZone != printTimeZone ;
Code	return iZone != printTimeZone ;
Distance : 9

4
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

5
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

6
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

7
Tree	return convertLocalToUTC ( instant , localInstant ) ;
Code	return convertLocalToUTC ( instant , localInstant ) ;
Distance : 6

8
Tree	return iZone != null iZone extends ;
Code	return iZone != null iZone extends ;
Distance : 9

9
Tree	return localInstant . convertLocalToUTC ( this , instant ) ;
Code	return localInstant . convertLocalToUTC ( this , instant ) ;
Distance : 4

10
Tree	return ! instant && ! localInstant . convertLocalToUTC () ;
Code	return ! instant && ! localInstant . convertLocalToUTC () ;
Distance : 9

11
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

12
Tree	return iZone != TimeUnit.SECONDS ;
Code	return iZone != TimeUnit.SECONDS ;
Distance : 9

13
Tree	return instant . convertLocalToUTC ( iZone ) ;
Code	return instant . convertLocalToUTC ( iZone ) ;
Distance : 6

14
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 3

15
Tree	return convertLocalToUTC ( iZone , iZone ) ;
Code	return convertLocalToUTC ( iZone , iZone ) ;
Distance : 6

16
Tree	return iZone . instant ( localInstant ) ;
Code	return iZone . instant ( localInstant ) ;
Distance : 5

17
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Distance : 6

18
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 8

19
Tree	return iZone . convertLocalToUTC ( iZone , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , iZone , null ) ;
Distance : 3

20
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , iZone ) ;
Distance : 10

21
Tree	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

22
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( iZone , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( iZone , localInstant ) ;
Distance : 10

23
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && extends ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && extends ;
Distance : 6

24
Tree	return ( ( iZone ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( iZone ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

25
Tree	return convertLocalToUTC ( localInstant , localInstant ) ; wanted
Code	return convertLocalToUTC ( localInstant , localInstant ) ; wanted
Distance : 6

26
Tree	return iZone . convertLocalToUTC ( this , instant ) ;
Code	return iZone . convertLocalToUTC ( this , instant ) ;
Distance : 3

27
Tree	return NUMBER_CONSTANT / instant ;
Code	return NUMBER_CONSTANT / instant ;
Distance : 9

28
Tree	return ! iZone && ! iZone . convertLocalToUTC () ; wanted
Code	return ! iZone && ! iZone . convertLocalToUTC () ; wanted
Distance : 11

29
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

30
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Distance : 2

31
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

32
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 4

33
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

34
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ; wanted
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ; wanted
Distance : 5

35
Tree	return convertLocalToUTC ( localInstant , iZone , instant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , instant , iZone ) ;
Distance : 5

36
Tree	return iZone . convertLocalToUTC ( iZone ) ;
Code	return iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

37
Tree	return convertLocalToUTC ( instant , iZone , false ) ;
Code	return convertLocalToUTC ( instant , iZone , false ) ;
Distance : 5

38
Tree	return convertLocalToUTC ( localInstant , localInstant , instant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , instant , iZone ) ;
Distance : 5

39
Tree	return instant . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return instant . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 4

40
Tree	return iZone . localInstant ( localInstant ) ;
Code	return iZone . localInstant ( localInstant ) ;
Distance : 5

41
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Distance : 6

42
Tree	return convertLocalToUTC ( iZone , instant , false ) ;
Code	return convertLocalToUTC ( iZone , instant , false ) ;
Distance : 5

43
Tree	return localInstant . convertLocalToUTC ( instant , false ) ;
Code	return localInstant . convertLocalToUTC ( instant , false ) ;
Distance : 4

44
Tree	return ( ( instant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( instant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

45
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

46
Tree	return iZone . convertLocalToUTC ( localInstant , instant , return; ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant , return; ) ;
Distance : 2

47
Tree	return ! localInstant && ! localInstant . convertLocalToUTC () ;
Code	return ! localInstant && ! localInstant . convertLocalToUTC () ;
Distance : 9

48
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , MillisDurationField.INSTANCE ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , MillisDurationField.INSTANCE ) ;
Distance : 4

49
Tree	return iZone . convertLocalToUTC ( null , localInstant , localInstant , return; ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , localInstant , return; ) ;
Distance : 4

50
Tree	return localInstant . convertLocalToUTC ( instant ) ;
Code	return localInstant . convertLocalToUTC ( instant ) ;
Distance : 5

51
Tree	return ! iZone && ! localInstant . convertLocalToUTC () ;
Code	return ! iZone && ! localInstant . convertLocalToUTC () ;
Distance : 9

52
Tree	return iZone != null iZone += ;
Code	return iZone != null iZone += ;
Distance : 9

53
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , com.google.protobuf.GeneratedMessageV3 ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , com.google.protobuf.GeneratedMessageV3 ) ;
Distance : 4

54
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Distance : 6

55
Tree	return convertLocalToUTC ( iZone , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( iZone , localInstant , localInstant ) ;
Distance : 5

56
Tree	return convertLocalToUTC ( iZone , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( iZone , localInstant , iZone , iZone ) ;
Distance : 6

57
Tree	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

58
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

59
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Distance : 6

60
Tree	return iZone != null iZone * ;
Code	return iZone != null iZone * ;
Distance : 9

61
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , AllowedSolutions.ANY_SIDE ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , AllowedSolutions.ANY_SIDE ) ;
Distance : 4

62
Tree	return iZone != null iZone throws ;
Code	return iZone != null iZone throws ;
Distance : 9

63
Tree	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Distance : 5

64
Tree	return iZone . convertLocalToUTC ( instant ) ;
Code	return iZone . convertLocalToUTC ( instant ) ;
Distance : 4

65
Tree	return convertLocalToUTC ( localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone ) ;
Distance : 5

66
Tree	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Distance : 2

67
Tree	return instant . convertLocalToUTC ( this , iZone ) ;
Code	return instant . convertLocalToUTC ( this , iZone ) ;
Distance : 5

68
Tree	return iZone . convertLocalToUTC ( localInstant , iZone , return; ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone , return; ) ;
Distance : 2

69
Tree	return instant != localInstant ;
Code	return instant != localInstant ;
Distance : 9

70
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

71
Tree	return convertLocalToUTC ( localInstant , iZone , instant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , instant ) ;
Distance : 3

72
Tree	return NUMBER_CONSTANT / iZone ; p
Code	return NUMBER_CONSTANT / iZone ; p
Distance : 11

73
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && anyList ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && anyList ;
Distance : 6

74
Tree	return iZone . convertLocalToUTC ( null , localInstant , iZone , return; ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , iZone , return; ) ;
Distance : 4

75
Tree	return iZone . convertLocalToUTC ( iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , localInstant , null ) ;
Distance : 3

76
Tree	return convertLocalToUTC ( instant , iZone ) ;
Code	return convertLocalToUTC ( instant , iZone ) ;
Distance : 6

77
Tree	return iZone . convertLocalToUTC ( this , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 4

78
Tree	return iZone != localInstant ;
Code	return iZone != localInstant ;
Distance : 8

79
Tree	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Distance : 4

80
Tree	return NUMBER_CONSTANT / iZone ; toString
Code	return NUMBER_CONSTANT / iZone ; toString
Distance : 11

81
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && {} ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && {} ;
Distance : 6

82
Tree	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 8

83
Tree	return instant . convertLocalToUTC ( this , localInstant ) ;
Code	return instant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

84
Tree	return convertLocalToUTC ( iZone , localInstant , false ) ;
Code	return convertLocalToUTC ( iZone , localInstant , false ) ;
Distance : 5

85
Tree	return iZone . iZone ( iZone ) ;
Code	return iZone . iZone ( iZone ) ;
Distance : 6

86
Tree	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Distance : 4

87
Tree	return convertLocalToUTC ( iZone , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( iZone , localInstant , localInstant , iZone ) ;
Distance : 6

88
Tree	return ( ( iZone ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( iZone ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 8

89
Tree	return iZone . iZone ( instant ) ;
Code	return iZone . iZone ( instant ) ;
Distance : 5

90
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , CheckLevel.ERROR ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , CheckLevel.ERROR ) ;
Distance : 4

91
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && % ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && % ;
Distance : 6

92
Tree	return iZone != null iZone ? ;
Code	return iZone != null iZone ? ;
Distance : 9

93
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Distance : 4

94
Tree	return convertLocalToUTC ( iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( iZone , localInstant , iZone ) ;
Distance : 5

95
Tree	return convertLocalToUTC ( iZone , iZone , false ) ;
Code	return convertLocalToUTC ( iZone , iZone , false ) ;
Distance : 5

96
Tree	return convertLocalToUTC ( instant , instant , false ) ;
Code	return convertLocalToUTC ( instant , instant , false ) ;
Distance : 5

97
Tree	return convertLocalToUTC ( instant , instant ) ;
Code	return convertLocalToUTC ( instant , instant ) ;
Distance : 5

98
Tree	return localInstant != instant ;
Code	return localInstant != instant ;
Distance : 8

99
Tree	return ! localInstant && ! iZone . convertLocalToUTC () ;
Code	return ! localInstant && ! iZone . convertLocalToUTC () ;
Distance : 10

100
Tree	return ! instant && ! iZone . convertLocalToUTC () ;
Code	return ! instant && ! iZone . convertLocalToUTC () ;
Distance : 10

101
Tree	return iZone . convertLocalToUTC ( null , iZone , instant , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , instant , null ) ;
Distance : 4

102
Tree	return iZone . localInstant ( instant ) ;
Code	return iZone . localInstant ( instant ) ;
Distance : 5

103
Tree	return convertLocalToUTC ( localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , false ) ;
Distance : 4

104
Tree	return iZone . convertLocalToUTC ( instant , false ) ;
Code	return iZone . convertLocalToUTC ( instant , false ) ;
Distance : 3

105
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , DiagnosticGroups.MISSING_OVERRIDE ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , DiagnosticGroups.MISSING_OVERRIDE ) ;
Distance : 4

106
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

107
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

108
Tree	return convertLocalToUTC ( localInstant , localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , instant ) ;
Distance : 3

109
Tree	return instant . convertLocalToUTC ( instant , false ) ;
Code	return instant . convertLocalToUTC ( instant , false ) ;
Distance : 4

110
Tree	return convertLocalToUTC ( localInstant , instant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant , iZone , iZone ) ;
Distance : 6

111
Tree	return iZone != null iZone <> ;
Code	return iZone != null iZone <> ;
Distance : 9

112
Tree	return iZone . convertLocalToUTC ( null , instant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , instant , localInstant , null ) ;
Distance : 5

113
Tree	return instant . localInstant ( localInstant ) ;
Code	return instant . localInstant ( localInstant ) ;
Distance : 6

114
Tree	return ( ( localInstant ) instant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) instant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

115
Tree	return iZone . convertLocalToUTC ( iZone , instant , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , instant , null ) ;
Distance : 3

116
Tree	return instant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return instant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

117
Tree	return iZone . convertLocalToUTC ( localInstant , true ) ;
Code	return iZone . convertLocalToUTC ( localInstant , true ) ;
Distance : 3

118
Tree	return convertLocalToUTC ( localInstant , instant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant , localInstant , iZone ) ;
Distance : 6

119
Tree	return instant . convertLocalToUTC ( iZone , false ) ;
Code	return instant . convertLocalToUTC ( iZone , false ) ;
Distance : 4

120
Tree	return iZone . convertLocalToUTC ( instant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( instant , localInstant , null ) ;
Distance : 3

121
Tree	return convertLocalToUTC ( localInstant , instant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant , iZone ) ;
Distance : 4

122
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 5

123
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Distance : 4

124
Tree	return instant . convertLocalToUTC ( instant ) ;
Code	return instant . convertLocalToUTC ( instant ) ;
Distance : 5

125
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , printTimeZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , printTimeZone ) ;
Distance : 4

126
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( instant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( instant , localInstant ) ;
Distance : 10

127
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , options.prettyPrint ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , options.prettyPrint ) ;
Distance : 4

128
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 7

129
Tree	return convertLocalToUTC ( localInstant , localInstant , true ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , true ) ;
Distance : 4

130
Tree	return iZone . convertLocalToUTC ( null , instant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , instant , iZone , null ) ;
Distance : 5

131
Tree	return NUMBER_CONSTANT / iZone ; Class
Code	return NUMBER_CONSTANT / iZone ; Class
Distance : 11

132
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , localInstant ) ;
Distance : 10

133
Tree	return convertLocalToUTC ( localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , instant ) ;
Distance : 4

134
Tree	return localInstant . iZone ( localInstant ) ;
Code	return localInstant . iZone ( localInstant ) ;
Distance : 6

135
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Distance : 6

136
Tree	return NUMBER_CONSTANT / localInstant ;
Code	return NUMBER_CONSTANT / localInstant ;
Distance : 9

137
Tree	return localInstant . localInstant ( localInstant ) ;
Code	return localInstant . localInstant ( localInstant ) ;
Distance : 6

138
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

139
Tree	return NUMBER_CONSTANT / iZone ; Preconditions
Code	return NUMBER_CONSTANT / iZone ; Preconditions
Distance : 11

140
Tree	return iZone . iZone ( localInstant ) ;
Code	return iZone . iZone ( localInstant ) ;
Distance : 5

141
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && &= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && &= ;
Distance : 6

142
Tree	return iZone != AllowedSolutions.ANY_SIDE ;
Code	return iZone != AllowedSolutions.ANY_SIDE ;
Distance : 9

143
Tree	return iZone . convertLocalToUTC ( localInstant ) ; wanted
Code	return iZone . convertLocalToUTC ( localInstant ) ; wanted
Distance : 5

144
Tree	return instant != instant ;
Code	return instant != instant ;
Distance : 9

145
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

146
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && /= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && /= ;
Distance : 6

147
Tree	return iZone != DiagnosticGroups.MISSING_OVERRIDE ;
Code	return iZone != DiagnosticGroups.MISSING_OVERRIDE ;
Distance : 9

148
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

149
Tree	return iZone != null iZone / ;
Code	return iZone != null iZone / ;
Distance : 9

150
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( iZone , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( iZone , iZone ) ;
Distance : 10

151
Tree	return iZone != iOffsetParsed ;
Code	return iZone != iOffsetParsed ;
Distance : 9

152
Tree	return iZone != options.prettyPrint ;
Code	return iZone != options.prettyPrint ;
Distance : 9

153
Tree	return iZone != instant ;
Code	return iZone != instant ;
Distance : 8

154
Tree	return instant . convertLocalToUTC ( this , instant ) ;
Code	return instant . convertLocalToUTC ( this , instant ) ;
Distance : 4

155
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , FeatureSet.ES3 ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , FeatureSet.ES3 ) ;
Distance : 4

156
Tree	return iZone != coefficients.length ;
Code	return iZone != coefficients.length ;
Distance : 9

157
Tree	return NUMBER_CONSTANT / iZone ; ParamChecks
Code	return NUMBER_CONSTANT / iZone ; ParamChecks
Distance : 11

158
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

159
Tree	return ! instant && ! instant . convertLocalToUTC () ;
Code	return ! instant && ! instant . convertLocalToUTC () ;
Distance : 10

160
Tree	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

161
Tree	return localInstant . convertLocalToUTC ( this , iZone ) ;
Code	return localInstant . convertLocalToUTC ( this , iZone ) ;
Distance : 5

162
Tree	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Distance : 2

163
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 4

164
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

165
Tree	return NUMBER_CONSTANT / iZone ; {}
Code	return NUMBER_CONSTANT / iZone ; {}
Distance : 11

166
Tree	return localInstant . convertLocalToUTC ( iZone ) ;
Code	return localInstant . convertLocalToUTC ( iZone ) ;
Distance : 6

167
Tree	return iZone . localInstant ( iZone ) ;
Code	return iZone . localInstant ( iZone ) ;
Distance : 6

168
Tree	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Distance : 4

169
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

170
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

171
Tree	return convertLocalToUTC ( iZone , localInstant ) ;
Code	return convertLocalToUTC ( iZone , localInstant ) ;
Distance : 6

172
Tree	return instant != iZone ;
Code	return instant != iZone ;
Distance : 10

173
Tree	return instant . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return instant . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 5

174
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

175
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

176
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 4

177
Tree	return instant . convertLocalToUTC ( localInstant , false ) ;
Code	return instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

178
Tree	return iZone != iZone ; wanted
Code	return iZone != iZone ; wanted
Distance : 10

179
Tree	return localInstant != iZone ;
Code	return localInstant != iZone ;
Distance : 9

180
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Distance : 4

181
Tree	return localInstant != localInstant ;
Code	return localInstant != localInstant ;
Distance : 9

182
Tree	return ! localInstant && ! instant . convertLocalToUTC () ;
Code	return ! localInstant && ! instant . convertLocalToUTC () ;
Distance : 10

183
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Distance : 6

184
Tree	return iZone != null iZone & ;
Code	return iZone != null iZone & ;
Distance : 9

185
Tree	return localInstant . convertLocalToUTC ( iZone , false ) ;
Code	return localInstant . convertLocalToUTC ( iZone , false ) ;
Distance : 4

186
Tree	return localInstant . convertLocalToUTC ( localInstant ) ;
Code	return localInstant . convertLocalToUTC ( localInstant ) ;
Distance : 5

187
Tree	return convertLocalToUTC ( instant , localInstant , false ) ;
Code	return convertLocalToUTC ( instant , localInstant , false ) ;
Distance : 5

188
Tree	return convertLocalToUTC ( iZone , instant ) ;
Code	return convertLocalToUTC ( iZone , instant ) ;
Distance : 5

189
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; wanted
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; wanted
Distance : 5

190
Tree	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Distance : 4

191
Tree	return iZone != null iZone + ;
Code	return iZone != null iZone + ;
Distance : 9

192
Tree	return convertLocalToUTC ( localInstant , instant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , instant , localInstant ) ;
Distance : 4

193
Tree	return instant . convertLocalToUTC ( localInstant ) ;
Code	return instant . convertLocalToUTC ( localInstant ) ;
Distance : 5

194
Tree	return iZone != CheckLevel.ERROR ;
Code	return iZone != CheckLevel.ERROR ;
Distance : 9

195
Tree	return NUMBER_CONSTANT / iZone ; &&
Code	return NUMBER_CONSTANT / iZone ; &&
Distance : 11

196
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

197
Tree	return iZone != null iZone instanceof ;
Code	return iZone != null iZone instanceof ;
Distance : 9

198
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , return; ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , return; ) ;
Distance : 2

199
Tree	return iZone . convertLocalToUTC ( null , iZone , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , iZone , null ) ;
Distance : 5

========================================================================


========================================================================
Example Number: 112
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

1
Tree	return convertLocalToUTC ( localInstant , instant , false ) ;
Code	return convertLocalToUTC ( localInstant , instant , false ) ;
Distance : 4

2
Tree	return ! iZone && ! instant . convertLocalToUTC () ;
Code	return ! iZone && ! instant . convertLocalToUTC () ;
Distance : 10

3
Tree	return iZone != printTimeZone ;
Code	return iZone != printTimeZone ;
Distance : 9

4
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

5
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

6
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

7
Tree	return convertLocalToUTC ( instant , localInstant ) ;
Code	return convertLocalToUTC ( instant , localInstant ) ;
Distance : 6

8
Tree	return iZone != null iZone extends ;
Code	return iZone != null iZone extends ;
Distance : 9

9
Tree	return localInstant . convertLocalToUTC ( this , instant ) ;
Code	return localInstant . convertLocalToUTC ( this , instant ) ;
Distance : 4

10
Tree	return ! instant && ! localInstant . convertLocalToUTC () ;
Code	return ! instant && ! localInstant . convertLocalToUTC () ;
Distance : 9

11
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

12
Tree	return iZone != TimeUnit.SECONDS ;
Code	return iZone != TimeUnit.SECONDS ;
Distance : 9

13
Tree	return instant . convertLocalToUTC ( iZone ) ;
Code	return instant . convertLocalToUTC ( iZone ) ;
Distance : 6

14
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 3

15
Tree	return convertLocalToUTC ( iZone , iZone ) ;
Code	return convertLocalToUTC ( iZone , iZone ) ;
Distance : 6

16
Tree	return iZone . instant ( localInstant ) ;
Code	return iZone . instant ( localInstant ) ;
Distance : 5

17
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Distance : 6

18
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 8

19
Tree	return iZone . convertLocalToUTC ( iZone , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , iZone , null ) ;
Distance : 3

20
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , iZone ) ;
Distance : 10

21
Tree	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

22
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( iZone , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( iZone , localInstant ) ;
Distance : 10

23
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && extends ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && extends ;
Distance : 6

24
Tree	return ( ( iZone ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( iZone ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

25
Tree	return convertLocalToUTC ( localInstant , localInstant ) ; wanted
Code	return convertLocalToUTC ( localInstant , localInstant ) ; wanted
Distance : 6

26
Tree	return iZone . convertLocalToUTC ( this , instant ) ;
Code	return iZone . convertLocalToUTC ( this , instant ) ;
Distance : 3

27
Tree	return NUMBER_CONSTANT / instant ;
Code	return NUMBER_CONSTANT / instant ;
Distance : 9

28
Tree	return ! iZone && ! iZone . convertLocalToUTC () ; wanted
Code	return ! iZone && ! iZone . convertLocalToUTC () ; wanted
Distance : 11

29
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

30
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Distance : 2

31
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

32
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 4

33
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

34
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ; wanted
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ; wanted
Distance : 5

35
Tree	return convertLocalToUTC ( localInstant , iZone , instant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , instant , iZone ) ;
Distance : 5

36
Tree	return iZone . convertLocalToUTC ( iZone ) ;
Code	return iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

37
Tree	return convertLocalToUTC ( instant , iZone , false ) ;
Code	return convertLocalToUTC ( instant , iZone , false ) ;
Distance : 5

38
Tree	return convertLocalToUTC ( localInstant , localInstant , instant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , instant , iZone ) ;
Distance : 5

39
Tree	return instant . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return instant . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 4

40
Tree	return iZone . localInstant ( localInstant ) ;
Code	return iZone . localInstant ( localInstant ) ;
Distance : 5

41
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Distance : 6

42
Tree	return convertLocalToUTC ( iZone , instant , false ) ;
Code	return convertLocalToUTC ( iZone , instant , false ) ;
Distance : 5

43
Tree	return localInstant . convertLocalToUTC ( instant , false ) ;
Code	return localInstant . convertLocalToUTC ( instant , false ) ;
Distance : 4

44
Tree	return ( ( instant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( instant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

45
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

46
Tree	return iZone . convertLocalToUTC ( localInstant , instant , return; ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant , return; ) ;
Distance : 2

47
Tree	return ! localInstant && ! localInstant . convertLocalToUTC () ;
Code	return ! localInstant && ! localInstant . convertLocalToUTC () ;
Distance : 9

48
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , MillisDurationField.INSTANCE ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , MillisDurationField.INSTANCE ) ;
Distance : 4

49
Tree	return iZone . convertLocalToUTC ( null , localInstant , localInstant , return; ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , localInstant , return; ) ;
Distance : 4

50
Tree	return localInstant . convertLocalToUTC ( instant ) ;
Code	return localInstant . convertLocalToUTC ( instant ) ;
Distance : 5

51
Tree	return ! iZone && ! localInstant . convertLocalToUTC () ;
Code	return ! iZone && ! localInstant . convertLocalToUTC () ;
Distance : 9

52
Tree	return iZone != null iZone += ;
Code	return iZone != null iZone += ;
Distance : 9

53
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , com.google.protobuf.GeneratedMessageV3 ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , com.google.protobuf.GeneratedMessageV3 ) ;
Distance : 4

54
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Distance : 6

55
Tree	return convertLocalToUTC ( iZone , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( iZone , localInstant , localInstant ) ;
Distance : 5

56
Tree	return convertLocalToUTC ( iZone , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( iZone , localInstant , iZone , iZone ) ;
Distance : 6

57
Tree	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

58
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

59
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Distance : 6

60
Tree	return iZone != null iZone * ;
Code	return iZone != null iZone * ;
Distance : 9

61
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , AllowedSolutions.ANY_SIDE ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , AllowedSolutions.ANY_SIDE ) ;
Distance : 4

62
Tree	return iZone != null iZone throws ;
Code	return iZone != null iZone throws ;
Distance : 9

63
Tree	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Distance : 5

64
Tree	return iZone . convertLocalToUTC ( instant ) ;
Code	return iZone . convertLocalToUTC ( instant ) ;
Distance : 4

65
Tree	return convertLocalToUTC ( localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone ) ;
Distance : 5

66
Tree	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Distance : 2

67
Tree	return instant . convertLocalToUTC ( this , iZone ) ;
Code	return instant . convertLocalToUTC ( this , iZone ) ;
Distance : 5

68
Tree	return iZone . convertLocalToUTC ( localInstant , iZone , return; ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone , return; ) ;
Distance : 2

69
Tree	return instant != localInstant ;
Code	return instant != localInstant ;
Distance : 9

70
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

71
Tree	return convertLocalToUTC ( localInstant , iZone , instant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , instant ) ;
Distance : 3

72
Tree	return NUMBER_CONSTANT / iZone ; p
Code	return NUMBER_CONSTANT / iZone ; p
Distance : 11

73
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && anyList ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && anyList ;
Distance : 6

74
Tree	return iZone . convertLocalToUTC ( null , localInstant , iZone , return; ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , iZone , return; ) ;
Distance : 4

75
Tree	return iZone . convertLocalToUTC ( iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , localInstant , null ) ;
Distance : 3

76
Tree	return convertLocalToUTC ( instant , iZone ) ;
Code	return convertLocalToUTC ( instant , iZone ) ;
Distance : 6

77
Tree	return iZone . convertLocalToUTC ( this , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 4

78
Tree	return iZone != localInstant ;
Code	return iZone != localInstant ;
Distance : 8

79
Tree	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Distance : 4

80
Tree	return NUMBER_CONSTANT / iZone ; toString
Code	return NUMBER_CONSTANT / iZone ; toString
Distance : 11

81
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && {} ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && {} ;
Distance : 6

82
Tree	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 8

83
Tree	return instant . convertLocalToUTC ( this , localInstant ) ;
Code	return instant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

84
Tree	return convertLocalToUTC ( iZone , localInstant , false ) ;
Code	return convertLocalToUTC ( iZone , localInstant , false ) ;
Distance : 5

85
Tree	return iZone . iZone ( iZone ) ;
Code	return iZone . iZone ( iZone ) ;
Distance : 6

86
Tree	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Distance : 4

87
Tree	return convertLocalToUTC ( iZone , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( iZone , localInstant , localInstant , iZone ) ;
Distance : 6

88
Tree	return ( ( iZone ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( iZone ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 8

89
Tree	return iZone . iZone ( instant ) ;
Code	return iZone . iZone ( instant ) ;
Distance : 5

90
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , CheckLevel.ERROR ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , CheckLevel.ERROR ) ;
Distance : 4

91
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && % ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && % ;
Distance : 6

92
Tree	return iZone != null iZone ? ;
Code	return iZone != null iZone ? ;
Distance : 9

93
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Distance : 4

94
Tree	return convertLocalToUTC ( iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( iZone , localInstant , iZone ) ;
Distance : 5

95
Tree	return convertLocalToUTC ( iZone , iZone , false ) ;
Code	return convertLocalToUTC ( iZone , iZone , false ) ;
Distance : 5

96
Tree	return convertLocalToUTC ( instant , instant , false ) ;
Code	return convertLocalToUTC ( instant , instant , false ) ;
Distance : 5

97
Tree	return convertLocalToUTC ( instant , instant ) ;
Code	return convertLocalToUTC ( instant , instant ) ;
Distance : 5

98
Tree	return localInstant != instant ;
Code	return localInstant != instant ;
Distance : 8

99
Tree	return ! localInstant && ! iZone . convertLocalToUTC () ;
Code	return ! localInstant && ! iZone . convertLocalToUTC () ;
Distance : 10

100
Tree	return ! instant && ! iZone . convertLocalToUTC () ;
Code	return ! instant && ! iZone . convertLocalToUTC () ;
Distance : 10

101
Tree	return iZone . convertLocalToUTC ( null , iZone , instant , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , instant , null ) ;
Distance : 4

102
Tree	return iZone . localInstant ( instant ) ;
Code	return iZone . localInstant ( instant ) ;
Distance : 5

103
Tree	return convertLocalToUTC ( localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , false ) ;
Distance : 4

104
Tree	return iZone . convertLocalToUTC ( instant , false ) ;
Code	return iZone . convertLocalToUTC ( instant , false ) ;
Distance : 3

105
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , DiagnosticGroups.MISSING_OVERRIDE ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , DiagnosticGroups.MISSING_OVERRIDE ) ;
Distance : 4

106
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

107
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

108
Tree	return convertLocalToUTC ( localInstant , localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , instant ) ;
Distance : 3

109
Tree	return instant . convertLocalToUTC ( instant , false ) ;
Code	return instant . convertLocalToUTC ( instant , false ) ;
Distance : 4

110
Tree	return convertLocalToUTC ( localInstant , instant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant , iZone , iZone ) ;
Distance : 6

111
Tree	return iZone != null iZone <> ;
Code	return iZone != null iZone <> ;
Distance : 9

112
Tree	return iZone . convertLocalToUTC ( null , instant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , instant , localInstant , null ) ;
Distance : 5

113
Tree	return instant . localInstant ( localInstant ) ;
Code	return instant . localInstant ( localInstant ) ;
Distance : 6

114
Tree	return ( ( localInstant ) instant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) instant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

115
Tree	return iZone . convertLocalToUTC ( iZone , instant , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , instant , null ) ;
Distance : 3

116
Tree	return instant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return instant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

117
Tree	return iZone . convertLocalToUTC ( localInstant , true ) ;
Code	return iZone . convertLocalToUTC ( localInstant , true ) ;
Distance : 3

118
Tree	return convertLocalToUTC ( localInstant , instant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant , localInstant , iZone ) ;
Distance : 6

119
Tree	return instant . convertLocalToUTC ( iZone , false ) ;
Code	return instant . convertLocalToUTC ( iZone , false ) ;
Distance : 4

120
Tree	return iZone . convertLocalToUTC ( instant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( instant , localInstant , null ) ;
Distance : 3

121
Tree	return convertLocalToUTC ( localInstant , instant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant , iZone ) ;
Distance : 4

122
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 5

123
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Distance : 4

124
Tree	return instant . convertLocalToUTC ( instant ) ;
Code	return instant . convertLocalToUTC ( instant ) ;
Distance : 5

125
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , printTimeZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , printTimeZone ) ;
Distance : 4

126
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( instant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( instant , localInstant ) ;
Distance : 10

127
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , options.prettyPrint ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , options.prettyPrint ) ;
Distance : 4

128
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 7

129
Tree	return convertLocalToUTC ( localInstant , localInstant , true ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , true ) ;
Distance : 4

130
Tree	return iZone . convertLocalToUTC ( null , instant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , instant , iZone , null ) ;
Distance : 5

131
Tree	return NUMBER_CONSTANT / iZone ; Class
Code	return NUMBER_CONSTANT / iZone ; Class
Distance : 11

132
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , localInstant ) ;
Distance : 10

133
Tree	return convertLocalToUTC ( localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , instant ) ;
Distance : 4

134
Tree	return localInstant . iZone ( localInstant ) ;
Code	return localInstant . iZone ( localInstant ) ;
Distance : 6

135
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Distance : 6

136
Tree	return NUMBER_CONSTANT / localInstant ;
Code	return NUMBER_CONSTANT / localInstant ;
Distance : 9

137
Tree	return localInstant . localInstant ( localInstant ) ;
Code	return localInstant . localInstant ( localInstant ) ;
Distance : 6

138
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

139
Tree	return NUMBER_CONSTANT / iZone ; Preconditions
Code	return NUMBER_CONSTANT / iZone ; Preconditions
Distance : 11

140
Tree	return iZone . iZone ( localInstant ) ;
Code	return iZone . iZone ( localInstant ) ;
Distance : 5

141
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && &= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && &= ;
Distance : 6

142
Tree	return iZone != AllowedSolutions.ANY_SIDE ;
Code	return iZone != AllowedSolutions.ANY_SIDE ;
Distance : 9

143
Tree	return iZone . convertLocalToUTC ( localInstant ) ; wanted
Code	return iZone . convertLocalToUTC ( localInstant ) ; wanted
Distance : 5

144
Tree	return instant != instant ;
Code	return instant != instant ;
Distance : 9

145
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

146
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && /= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && /= ;
Distance : 6

147
Tree	return iZone != DiagnosticGroups.MISSING_OVERRIDE ;
Code	return iZone != DiagnosticGroups.MISSING_OVERRIDE ;
Distance : 9

148
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

149
Tree	return iZone != null iZone / ;
Code	return iZone != null iZone / ;
Distance : 9

150
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( iZone , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( iZone , iZone ) ;
Distance : 10

151
Tree	return iZone != iOffsetParsed ;
Code	return iZone != iOffsetParsed ;
Distance : 9

152
Tree	return iZone != options.prettyPrint ;
Code	return iZone != options.prettyPrint ;
Distance : 9

153
Tree	return iZone != instant ;
Code	return iZone != instant ;
Distance : 8

154
Tree	return instant . convertLocalToUTC ( this , instant ) ;
Code	return instant . convertLocalToUTC ( this , instant ) ;
Distance : 4

155
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , FeatureSet.ES3 ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , FeatureSet.ES3 ) ;
Distance : 4

156
Tree	return iZone != coefficients.length ;
Code	return iZone != coefficients.length ;
Distance : 9

157
Tree	return NUMBER_CONSTANT / iZone ; ParamChecks
Code	return NUMBER_CONSTANT / iZone ; ParamChecks
Distance : 11

158
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

159
Tree	return ! instant && ! instant . convertLocalToUTC () ;
Code	return ! instant && ! instant . convertLocalToUTC () ;
Distance : 10

160
Tree	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

161
Tree	return localInstant . convertLocalToUTC ( this , iZone ) ;
Code	return localInstant . convertLocalToUTC ( this , iZone ) ;
Distance : 5

162
Tree	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Distance : 2

163
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 4

164
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

165
Tree	return NUMBER_CONSTANT / iZone ; {}
Code	return NUMBER_CONSTANT / iZone ; {}
Distance : 11

166
Tree	return localInstant . convertLocalToUTC ( iZone ) ;
Code	return localInstant . convertLocalToUTC ( iZone ) ;
Distance : 6

167
Tree	return iZone . localInstant ( iZone ) ;
Code	return iZone . localInstant ( iZone ) ;
Distance : 6

168
Tree	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Distance : 4

169
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

170
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

171
Tree	return convertLocalToUTC ( iZone , localInstant ) ;
Code	return convertLocalToUTC ( iZone , localInstant ) ;
Distance : 6

172
Tree	return instant != iZone ;
Code	return instant != iZone ;
Distance : 10

173
Tree	return instant . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return instant . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 5

174
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

175
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

176
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 4

177
Tree	return instant . convertLocalToUTC ( localInstant , false ) ;
Code	return instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

178
Tree	return iZone != iZone ; wanted
Code	return iZone != iZone ; wanted
Distance : 10

179
Tree	return localInstant != iZone ;
Code	return localInstant != iZone ;
Distance : 9

180
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Distance : 4

181
Tree	return localInstant != localInstant ;
Code	return localInstant != localInstant ;
Distance : 9

182
Tree	return ! localInstant && ! instant . convertLocalToUTC () ;
Code	return ! localInstant && ! instant . convertLocalToUTC () ;
Distance : 10

183
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Distance : 6

184
Tree	return iZone != null iZone & ;
Code	return iZone != null iZone & ;
Distance : 9

185
Tree	return localInstant . convertLocalToUTC ( iZone , false ) ;
Code	return localInstant . convertLocalToUTC ( iZone , false ) ;
Distance : 4

186
Tree	return localInstant . convertLocalToUTC ( localInstant ) ;
Code	return localInstant . convertLocalToUTC ( localInstant ) ;
Distance : 5

187
Tree	return convertLocalToUTC ( instant , localInstant , false ) ;
Code	return convertLocalToUTC ( instant , localInstant , false ) ;
Distance : 5

188
Tree	return convertLocalToUTC ( iZone , instant ) ;
Code	return convertLocalToUTC ( iZone , instant ) ;
Distance : 5

189
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; wanted
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; wanted
Distance : 5

190
Tree	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Distance : 4

191
Tree	return iZone != null iZone + ;
Code	return iZone != null iZone + ;
Distance : 9

192
Tree	return convertLocalToUTC ( localInstant , instant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , instant , localInstant ) ;
Distance : 4

193
Tree	return instant . convertLocalToUTC ( localInstant ) ;
Code	return instant . convertLocalToUTC ( localInstant ) ;
Distance : 5

194
Tree	return iZone != CheckLevel.ERROR ;
Code	return iZone != CheckLevel.ERROR ;
Distance : 9

195
Tree	return NUMBER_CONSTANT / iZone ; &&
Code	return NUMBER_CONSTANT / iZone ; &&
Distance : 11

196
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

197
Tree	return iZone != null iZone instanceof ;
Code	return iZone != null iZone instanceof ;
Distance : 9

198
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , return; ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , return; ) ;
Distance : 2

199
Tree	return iZone . convertLocalToUTC ( null , iZone , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , iZone , null ) ;
Distance : 5

========================================================================


========================================================================
Example Number: 113
Parent Code is: 
long result = iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
long result = iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=long}) (59 (800{val=result}) (204{val==}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=long}) (59 (800{val=result}) (204{val==}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	final long result = iZone . convertLocalToUTC ( localInstant , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ;
Code	final long result = iZone . convertLocalToUTC ( localInstant , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ;
Distance : 4

1
Tree	long result = iZone . localInstant ( localInstant , new OngoingStubbingImpl ( localInstant ) ) ;
Code	long result = iZone . localInstant ( localInstant , new OngoingStubbingImpl ( localInstant ) ) ;
Distance : 6

2
Tree	long result = iZone . localInstant ( localInstant , new SerializableBoundedType ( localInstant ) ) ;
Code	long result = iZone . localInstant ( localInstant , new SerializableBoundedType ( localInstant ) ) ;
Distance : 6

3
Tree	double result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Code	double result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Distance : 5

4
Tree	long result = iZone . convertLocalToUTC ( instant , localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( instant , localInstant ) ;
Distance : 4

5
Tree	long result = iZone . localInstant ( instant ) ;
Code	long result = iZone . localInstant ( instant ) ;
Distance : 5

6
Tree	long result = iZone . instant ( localInstant ) ;
Code	long result = iZone . instant ( localInstant ) ;
Distance : 5

7
Tree	long result = result . localInstant ( localInstant ) ;
Code	long result = result . localInstant ( localInstant ) ;
Distance : 6

8
Tree	long result = iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Code	long result = iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 5

9
Tree	long result = iZone . localInstant ( localInstant , new PropertyChangeEvent ( localInstant ) ) ;
Code	long result = iZone . localInstant ( localInstant , new PropertyChangeEvent ( localInstant ) ) ;
Distance : 6

10
Tree	long result = iZone . localInstant ( localInstant , new StringBuilder ( localInstant ) ) ;
Code	long result = iZone . localInstant ( localInstant , new StringBuilder ( localInstant ) ) ;
Distance : 6

11
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , convertLocalToUTC () ) ;
Distance : 5

12
Tree	long result = iZone . localInstant ( localInstant , new ExploitAssigns ( localInstant ) ) ;
Code	long result = iZone . localInstant ( localInstant , new ExploitAssigns ( localInstant ) ) ;
Distance : 6

13
Tree	long result = iZone . localInstant ( localInstant , new ExceptionThrowingBinder ( localInstant ) ) ;
Code	long result = iZone . localInstant ( localInstant , new ExceptionThrowingBinder ( localInstant ) ) ;
Distance : 6

14
Tree	int result = convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	int result = convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 5

15
Tree	long result = iZone . convertLocalToUTC ( this , iZone , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( this , iZone , NUMBER_CONSTANT ) ;
Distance : 3

16
Tree	long result = convertLocalToUTC ( localInstant , iZone , false ) ;
Code	long result = convertLocalToUTC ( localInstant , iZone , false ) ;
Distance : 4

17
Tree	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , result ) ;
Code	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , result ) ;
Distance : 4

18
Tree	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , instant ) ;
Code	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , instant ) ;
Distance : 3

19
Tree	long result = instant . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Code	long result = instant . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Distance : 4

20
Tree	long result = iZone . convertLocalToUTC ( localInstant , iZone ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 3

21
Tree	long result = iZone . convertLocalToUTC ( iZone ) ;
Code	long result = iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

22
Tree	long result = localInstant . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Code	long result = localInstant . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Distance : 5

23
Tree	int result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Code	int result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Distance : 5

24
Tree	long result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	long result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

25
Tree	void result = iZone ;
Code	void result = iZone ;
Distance : 10

26
Tree	double result = iZone . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Code	double result = iZone . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Distance : 4

27
Tree	final long result = iZone . convertLocalToUTC ( localInstant , StringUtils.EMPTY ) ;
Code	final long result = iZone . convertLocalToUTC ( localInstant , StringUtils.EMPTY ) ;
Distance : 4

28
Tree	long result = iZone . localInstant ( localInstant , new HashSet ( localInstant ) ) ;
Code	long result = iZone . localInstant ( localInstant , new HashSet ( localInstant ) ) ;
Distance : 6

29
Tree	final long result = iZone . convertLocalToUTC ( localInstant , configureWith ) ;
Code	final long result = iZone . convertLocalToUTC ( localInstant , configureWith ) ;
Distance : 4

30
Tree	int result = iZone ;
Code	int result = iZone ;
Distance : 10

31
Tree	long result = iZone . localInstant ( localInstant , new getPropertyReservedNamingNonFirstChars ( localInstant ) ) ;
Code	long result = iZone . localInstant ( localInstant , new getPropertyReservedNamingNonFirstChars ( localInstant ) ) ;
Distance : 6

32
Tree	float result = convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	float result = convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 5

33
Tree	boolean result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Code	boolean result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Distance : 5

34
Tree	long result = instant . convertLocalToUTC ( localInstant , false ) ;
Code	long result = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

35
Tree	long result = instant . convertLocalToUTC ( this , localInstant ) ;
Code	long result = instant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

36
Tree	double result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	double result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

37
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , iZone , convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , iZone , convertLocalToUTC () ) ;
Distance : 5

38
Tree	float result = iZone ;
Code	float result = iZone ;
Distance : 10

39
Tree	long result = convertLocalToUTC ( localInstant , localInstant , localInstant , iZone , null ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , localInstant , iZone , null ) ;
Distance : 8

40
Tree	long result = localInstant . convertLocalToUTC ( localInstant ) ;
Code	long result = localInstant . convertLocalToUTC ( localInstant ) ;
Distance : 5

41
Tree	final double result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	final double result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

42
Tree	boolean result = iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Code	boolean result = iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 6

43
Tree	long result = iZone ;
Code	long result = iZone ;
Distance : 9

44
Tree	long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

45
Tree	long result = instant . convertLocalToUTC ( convertLocalToUTC ) ;
Code	long result = instant . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 6

46
Tree	long result = instant ;
Code	long result = instant ;
Distance : 9

47
Tree	long result = iZone . convertLocalToUTC ( localInstant , flags.outputWrapper ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , flags.outputWrapper ) ;
Distance : 3

48
Tree	long result = iZone . convertLocalToUTC ( localInstant , Calendar.MINUTE ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , Calendar.MINUTE ) ;
Distance : 3

49
Tree	final long result = iZone . convertLocalToUTC ( localInstant , iValues.length ) ;
Code	final long result = iZone . convertLocalToUTC ( localInstant , iValues.length ) ;
Distance : 4

50
Tree	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Distance : 4

51
Tree	long result = localInstant . convertLocalToUTC ( localInstant , localInstant ) ;
Code	long result = localInstant . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 4

52
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , MillisDurationField.INSTANCE ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , MillisDurationField.INSTANCE ) ;
Distance : 5

53
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , options.assumeClosuresOnlyCaptureReferences ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , options.assumeClosuresOnlyCaptureReferences ) ;
Distance : 5

54
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , coefficients.length ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , coefficients.length ) ;
Distance : 5

55
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , values.length ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , values.length ) ;
Distance : 5

56
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , options.prettyPrint ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , options.prettyPrint ) ;
Distance : 5

57
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , Calendar.SECOND ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , Calendar.SECOND ) ;
Distance : 5

58
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , Locale.US ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , Locale.US ) ;
Distance : 5

59
Tree	final long result = iZone . convertLocalToUTC ( localInstant , flags.outputWrapper ) ;
Code	final long result = iZone . convertLocalToUTC ( localInstant , flags.outputWrapper ) ;
Distance : 4

60
Tree	long result = convertLocalToUTC ( localInstant , result , false ) ;
Code	long result = convertLocalToUTC ( localInstant , result , false ) ;
Distance : 4

61
Tree	long result = iZone . convertLocalToUTC ( localInstant , DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT ) ;
Distance : 3

62
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , eras ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , eras ) ;
Distance : 5

63
Tree	boolean result = iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Code	boolean result = iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 4

64
Tree	double result = iZone . convertLocalToUTC ( this , localInstant ) ;
Code	double result = iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

65
Tree	long result = iZone . convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Distance : 3

66
Tree	long result = iZone . convertLocalToUTC ( localInstant , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Distance : 3

67
Tree	final long result = iZone . convertLocalToUTC ( localInstant , Strictness.SILENT ) ;
Code	final long result = iZone . convertLocalToUTC ( localInstant , Strictness.SILENT ) ;
Distance : 4

68
Tree	long result = localInstant . convertLocalToUTC ( this , localInstant ) ;
Code	long result = localInstant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

69
Tree	private long iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	private long iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

70
Tree	boolean result = convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	boolean result = convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 5

71
Tree	public long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	public long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

72
Tree	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , iZone ) ;
Code	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , iZone ) ;
Distance : 10

73
Tree	long result = convertLocalToUTC ( localInstant , localInstant , iZone , iZone , null ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , iZone , iZone , null ) ;
Distance : 8

74
Tree	long result = iZone . convertLocalToUTC ( iZone . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( iZone . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Distance : 5

75
Tree	long result = iZone . convertLocalToUTC ( localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

76
Tree	byte result = iZone ;
Code	byte result = iZone ;
Distance : 10

77
Tree	abstract long iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	abstract long iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

78
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Distance : 3

79
Tree	long result = iZone . iZone ( localInstant ) ;
Code	long result = iZone . iZone ( localInstant ) ;
Distance : 5

80
Tree	double result = iZone ;
Code	double result = iZone ;
Distance : 10

81
Tree	long result = convertLocalToUTC ( result , localInstant , false ) ;
Code	long result = convertLocalToUTC ( result , localInstant , false ) ;
Distance : 5

82
Tree	long result = result . convertLocalToUTC ( localInstant ) ;
Code	long result = result . convertLocalToUTC ( localInstant ) ;
Distance : 5

83
Tree	long result = iZone . convertLocalToUTC ( this , localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

84
Tree	long result = convertLocalToUTC ( localInstant , result , result , iZone , null ) ;
Code	long result = convertLocalToUTC ( localInstant , result , result , iZone , null ) ;
Distance : 8

85
Tree	long result = iZone . convertLocalToUTC ( localInstant , instant ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , instant ) ;
Distance : 2

86
Tree	final long result = iZone . convertLocalToUTC ( localInstant , DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT ) ;
Code	final long result = iZone . convertLocalToUTC ( localInstant , DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT ) ;
Distance : 4

87
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , iZone , iZone . convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , iZone , iZone . convertLocalToUTC () ) ;
Distance : 7

88
Tree	long result = result . convertLocalToUTC ( convertLocalToUTC ) ;
Code	long result = result . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 6

89
Tree	long result = iZone . localInstant ( iZone ) ;
Code	long result = iZone . localInstant ( iZone ) ;
Distance : 6

90
Tree	long result = instant . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Code	long result = instant . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Distance : 5

91
Tree	boolean result = iZone . convertLocalToUTC ( localInstant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Code	boolean result = iZone . convertLocalToUTC ( localInstant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Distance : 5

92
Tree	long result = iZone . convertLocalToUTC ( this , instant , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( this , instant , NUMBER_CONSTANT ) ;
Distance : 3

93
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , instant , iZone . convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , instant , iZone . convertLocalToUTC () ) ;
Distance : 6

94
Tree	long result = convertLocalToUTC ( localInstant , localInstant , instant , iZone , null ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , instant , iZone , null ) ;
Distance : 7

95
Tree	final long result = iZone . convertLocalToUTC ( localInstant , Calendar.MINUTE ) ;
Code	final long result = iZone . convertLocalToUTC ( localInstant , Calendar.MINUTE ) ;
Distance : 4

96
Tree	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , com.google.protobuf.GeneratedMessageV3 ) ;
Code	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , com.google.protobuf.GeneratedMessageV3 ) ;
Distance : 10

97
Tree	long result = iZone . localInstant ( localInstant , new HandyReturnValues ( localInstant ) ) ;
Code	long result = iZone . localInstant ( localInstant , new HandyReturnValues ( localInstant ) ) ;
Distance : 6

98
Tree	long result = iZone . convertLocalToUTC ( iZone , localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( iZone , localInstant ) ;
Distance : 4

99
Tree	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , TimeUnit.SECONDS ) ;
Code	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , TimeUnit.SECONDS ) ;
Distance : 10

100
Tree	long result = iZone . convertLocalToUTC ( this , iZone ) ;
Code	long result = iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 4

101
Tree	int result = iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Code	int result = iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 6

102
Tree	long result = iZone . convertLocalToUTC ( instant ) ;
Code	long result = iZone . convertLocalToUTC ( instant ) ;
Distance : 4

103
Tree	final long result = iZone . convertLocalToUTC ( localInstant , p2.vector ) ;
Code	final long result = iZone . convertLocalToUTC ( localInstant , p2.vector ) ;
Distance : 4

104
Tree	long result = localInstant . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Code	long result = localInstant . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Distance : 4

105
Tree	long result = convertLocalToUTC ( localInstant , instant , false ) ;
Code	long result = convertLocalToUTC ( localInstant , instant , false ) ;
Distance : 4

106
Tree	byte result = iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Code	byte result = iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 6

107
Tree	long result = iZone . convertLocalToUTC ( instant , false ) ;
Code	long result = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 3

108
Tree	final long result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	final long result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

109
Tree	final long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	final long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

110
Tree	long result = instant . convertLocalToUTC ( localInstant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Code	long result = instant . convertLocalToUTC ( localInstant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Distance : 5

111
Tree	final long result = instant . convertLocalToUTC ( localInstant , false ) ;
Code	final long result = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

112
Tree	final boolean result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	final boolean result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

113
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , result , iZone . convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , result , iZone . convertLocalToUTC () ) ;
Distance : 7

114
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , iZone , result . convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , iZone , result . convertLocalToUTC () ) ;
Distance : 7

115
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , result . convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , result . convertLocalToUTC () ) ;
Distance : 7

116
Tree	long result = convertLocalToUTC ( iZone , localInstant , false ) ;
Code	long result = convertLocalToUTC ( iZone , localInstant , false ) ;
Distance : 5

117
Tree	long result = iZone . convertLocalToUTC ( this , result ) ;
Code	long result = iZone . convertLocalToUTC ( this , result ) ;
Distance : 4

118
Tree	long result = iZone . convertLocalToUTC ( iZone , localInstant , localInstant , convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( iZone , localInstant , localInstant , convertLocalToUTC () ) ;
Distance : 5

119
Tree	long result = iZone . convertLocalToUTC ( this , result , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( this , result , NUMBER_CONSTANT ) ;
Distance : 3

120
Tree	long result = iZone . convertLocalToUTC ( localInstant , result ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , result ) ;
Distance : 3

121
Tree	long result = iZone . convertLocalToUTC ( localInstant , result , localInstant , convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , result , localInstant , convertLocalToUTC () ) ;
Distance : 5

122
Tree	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , iOffsetParsed ) ;
Code	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , iOffsetParsed ) ;
Distance : 10

123
Tree	long result = instant . localInstant ( localInstant ) ;
Code	long result = instant . localInstant ( localInstant ) ;
Distance : 6

124
Tree	long result = localInstant ;
Code	long result = localInstant ;
Distance : 9

125
Tree	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , coefficients.length ) ;
Code	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , coefficients.length ) ;
Distance : 10

126
Tree	double result = iZone . convertLocalToUTC ( localInstant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Code	double result = iZone . convertLocalToUTC ( localInstant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Distance : 5

127
Tree	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , iChrono ) ;
Code	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , iChrono ) ;
Distance : 10

128
Tree	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , CheckLevel.ERROR ) ;
Code	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , CheckLevel.ERROR ) ;
Distance : 10

129
Tree	final long result = iZone . convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Code	final long result = iZone . convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Distance : 4

130
Tree	protected long iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	protected long iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

131
Tree	long result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	long result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

132
Tree	boolean result = iZone . convertLocalToUTC ( localInstant ) ;
Code	boolean result = iZone . convertLocalToUTC ( localInstant ) ;
Distance : 5

133
Tree	long result = localInstant . convertLocalToUTC ( localInstant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Code	long result = localInstant . convertLocalToUTC ( localInstant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Distance : 5

134
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , TimeUnit.SECONDS ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , TimeUnit.SECONDS ) ;
Distance : 5

135
Tree	void result = iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Code	void result = iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 6

136
Tree	long result = instant . convertLocalToUTC ( localInstant , localInstant ) ;
Code	long result = instant . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 4

137
Tree	long result = iZone . convertLocalToUTC ( localInstant , p2.vector ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , p2.vector ) ;
Distance : 3

138
Tree	long result = iZone . convertLocalToUTC ( localInstant , StringUtils.EMPTY ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , StringUtils.EMPTY ) ;
Distance : 3

139
Tree	long result = iZone . localInstant ( localInstant ) ;
Code	long result = iZone . localInstant ( localInstant ) ;
Distance : 5

140
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 3

141
Tree	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Code	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Distance : 4

142
Tree	long result = iZone . convertLocalToUTC ( iZone , localInstant , iZone , convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( iZone , localInstant , iZone , convertLocalToUTC () ) ;
Distance : 5

143
Tree	long result = iZone . convertLocalToUTC ( instant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( instant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Distance : 5

144
Tree	long result = convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

145
Tree	long result = iZone . convertLocalToUTC ( localInstant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Distance : 4

146
Tree	long result = iZone . convertLocalToUTC ( localInstant , iZone , localInstant , convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , iZone , localInstant , convertLocalToUTC () ) ;
Distance : 5

147
Tree	boolean result = iZone ;
Code	boolean result = iZone ;
Distance : 10

148
Tree	long result = iZone . convertLocalToUTC ( localInstant , configureWith ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , configureWith ) ;
Distance : 3

149
Tree	long result = iZone . localInstant ( localInstant , new false ( localInstant ) ) ;
Code	long result = iZone . localInstant ( localInstant , new false ( localInstant ) ) ;
Distance : 5

150
Tree	long result = result ;
Code	long result = result ;
Distance : 10

151
Tree	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , dateParser ) ;
Code	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , dateParser ) ;
Distance : 10

152
Tree	long result = result . convertLocalToUTC ( localInstant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Code	long result = result . convertLocalToUTC ( localInstant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Distance : 5

153
Tree	long result = result . convertLocalToUTC ( localInstant , false ) ;
Code	long result = result . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

154
Tree	boolean result = iZone . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Code	boolean result = iZone . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Distance : 4

155
Tree	long result = iZone . convertLocalToUTC ( localInstant , result , iZone , convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , result , iZone , convertLocalToUTC () ) ;
Distance : 5

156
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , instant . convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , instant . convertLocalToUTC () ) ;
Distance : 6

157
Tree	int result = iZone . convertLocalToUTC ( localInstant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Code	int result = iZone . convertLocalToUTC ( localInstant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Distance : 5

158
Tree	long result = instant . convertLocalToUTC ( localInstant ) ;
Code	long result = instant . convertLocalToUTC ( localInstant ) ;
Distance : 5

159
Tree	long result = iZone . convertLocalToUTC ( localInstant , iValues.length ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , iValues.length ) ;
Distance : 3

160
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , iZone , instant . convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , iZone , instant . convertLocalToUTC () ) ;
Distance : 6

161
Tree	int result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	int result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

162
Tree	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , values.length ) ;
Code	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , values.length ) ;
Distance : 10

163
Tree	long result = iZone . convertLocalToUTC ( localInstant , iZone , iZone , convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , iZone , iZone , convertLocalToUTC () ) ;
Distance : 5

164
Tree	long result = iZone . convertLocalToUTC ( localInstant , iZone , localInstant , iZone . convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , iZone , localInstant , iZone . convertLocalToUTC () ) ;
Distance : 7

165
Tree	boolean result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	boolean result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

166
Tree	double result = iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Code	double result = iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 6

167
Tree	long result = convertLocalToUTC ( localInstant , iZone , localInstant , iZone , null ) ;
Code	long result = convertLocalToUTC ( localInstant , iZone , localInstant , iZone , null ) ;
Distance : 8

168
Tree	long result = iZone . convertLocalToUTC ( result , false ) ;
Code	long result = iZone . convertLocalToUTC ( result , false ) ;
Distance : 3

169
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , instant , convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , instant , convertLocalToUTC () ) ;
Distance : 4

170
Tree	long result = convertLocalToUTC ( localInstant , iZone , iZone , iZone , null ) ;
Code	long result = convertLocalToUTC ( localInstant , iZone , iZone , iZone , null ) ;
Distance : 8

171
Tree	long result = localInstant . convertLocalToUTC ( convertLocalToUTC ) ;
Code	long result = localInstant . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 6

172
Tree	long result = convertLocalToUTC ( localInstant , result , localInstant , iZone , null ) ;
Code	long result = convertLocalToUTC ( localInstant , result , localInstant , iZone , null ) ;
Distance : 8

173
Tree	long result = result . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Code	long result = result . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Distance : 5

174
Tree	long result = convertLocalToUTC ( localInstant , iZone , result , iZone , null ) ;
Code	long result = convertLocalToUTC ( localInstant , iZone , result , iZone , null ) ;
Distance : 8

175
Tree	int result = iZone . convertLocalToUTC ( localInstant ) ;
Code	int result = iZone . convertLocalToUTC ( localInstant ) ;
Distance : 5

176
Tree	long result = iZone . convertLocalToUTC ( result ) ;
Code	long result = iZone . convertLocalToUTC ( result ) ;
Distance : 5

177
Tree	double result = iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Code	double result = iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 4

178
Tree	double result = iZone . localInstant ( localInstant ) ;
Code	double result = iZone . localInstant ( localInstant ) ;
Distance : 6

179
Tree	double result = iZone . convertLocalToUTC ( localInstant ) ;
Code	double result = iZone . convertLocalToUTC ( localInstant ) ;
Distance : 5

180
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , result , convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , result , convertLocalToUTC () ) ;
Distance : 5

181
Tree	double result = convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	double result = convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 5

182
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , iZone . convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , iZone . convertLocalToUTC () ) ;
Distance : 7

183
Tree	long result = result . convertLocalToUTC ( this , localInstant ) ;
Code	long result = result . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

184
Tree	boolean result = iZone . convertLocalToUTC ( this , localInstant ) ;
Code	boolean result = iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

185
Tree	long result = iZone . convertLocalToUTC ( localInstant , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ;
Distance : 3

186
Tree	long result = iZone . convertLocalToUTC ( this , instant ) ;
Code	long result = iZone . convertLocalToUTC ( this , instant ) ;
Distance : 3

187
Tree	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , Calendar.SECOND ) ;
Code	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , Calendar.SECOND ) ;
Distance : 10

188
Tree	int result = iZone . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Code	int result = iZone . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Distance : 4

189
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , com.google.protobuf.GeneratedMessageV3 ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , com.google.protobuf.GeneratedMessageV3 ) ;
Distance : 5

190
Tree	long result = localInstant . localInstant ( localInstant ) ;
Code	long result = localInstant . localInstant ( localInstant ) ;
Distance : 6

191
Tree	float result = iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Code	float result = iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 6

192
Tree	long result = convertLocalToUTC ( localInstant , result , iZone , iZone , null ) ;
Code	long result = convertLocalToUTC ( localInstant , result , iZone , iZone , null ) ;
Distance : 8

193
Tree	long result = convertLocalToUTC ( localInstant , localInstant , result , iZone , null ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , result , iZone , null ) ;
Distance : 8

194
Tree	long result = result . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Code	long result = result . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Distance : 4

195
Tree	boolean result = iZone . localInstant ( localInstant ) ;
Code	boolean result = iZone . localInstant ( localInstant ) ;
Distance : 6

196
Tree	int result = iZone . convertLocalToUTC ( this , localInstant ) ;
Code	int result = iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

197
Tree	long result = iZone . convertLocalToUTC ( result . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( result . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Distance : 5

198
Tree	long result = iZone . convertLocalToUTC ( localInstant , iZone , iZone , iZone . convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , iZone , iZone , iZone . convertLocalToUTC () ) ;
Distance : 7

199
Tree	final long result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	final long result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 4

========================================================================


========================================================================
Example Number: 114
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

1
Tree	return convertLocalToUTC ( localInstant , instant , false ) ;
Code	return convertLocalToUTC ( localInstant , instant , false ) ;
Distance : 4

2
Tree	return ! iZone && ! instant . convertLocalToUTC () ;
Code	return ! iZone && ! instant . convertLocalToUTC () ;
Distance : 10

3
Tree	return iZone != printTimeZone ;
Code	return iZone != printTimeZone ;
Distance : 9

4
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

5
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

6
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

7
Tree	return convertLocalToUTC ( instant , localInstant ) ;
Code	return convertLocalToUTC ( instant , localInstant ) ;
Distance : 6

8
Tree	return iZone != null iZone extends ;
Code	return iZone != null iZone extends ;
Distance : 9

9
Tree	return localInstant . convertLocalToUTC ( this , instant ) ;
Code	return localInstant . convertLocalToUTC ( this , instant ) ;
Distance : 4

10
Tree	return ! instant && ! localInstant . convertLocalToUTC () ;
Code	return ! instant && ! localInstant . convertLocalToUTC () ;
Distance : 9

11
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

12
Tree	return iZone != TimeUnit.SECONDS ;
Code	return iZone != TimeUnit.SECONDS ;
Distance : 9

13
Tree	return instant . convertLocalToUTC ( iZone ) ;
Code	return instant . convertLocalToUTC ( iZone ) ;
Distance : 6

14
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 3

15
Tree	return convertLocalToUTC ( iZone , iZone ) ;
Code	return convertLocalToUTC ( iZone , iZone ) ;
Distance : 6

16
Tree	return iZone . instant ( localInstant ) ;
Code	return iZone . instant ( localInstant ) ;
Distance : 5

17
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Distance : 6

18
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 8

19
Tree	return iZone . convertLocalToUTC ( iZone , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , iZone , null ) ;
Distance : 3

20
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , iZone ) ;
Distance : 10

21
Tree	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

22
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( iZone , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( iZone , localInstant ) ;
Distance : 10

23
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && extends ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && extends ;
Distance : 6

24
Tree	return ( ( iZone ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( iZone ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

25
Tree	return convertLocalToUTC ( localInstant , localInstant ) ; wanted
Code	return convertLocalToUTC ( localInstant , localInstant ) ; wanted
Distance : 6

26
Tree	return iZone . convertLocalToUTC ( this , instant ) ;
Code	return iZone . convertLocalToUTC ( this , instant ) ;
Distance : 3

27
Tree	return NUMBER_CONSTANT / instant ;
Code	return NUMBER_CONSTANT / instant ;
Distance : 9

28
Tree	return ! iZone && ! iZone . convertLocalToUTC () ; wanted
Code	return ! iZone && ! iZone . convertLocalToUTC () ; wanted
Distance : 11

29
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

30
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Distance : 2

31
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

32
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 4

33
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

34
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ; wanted
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ; wanted
Distance : 5

35
Tree	return convertLocalToUTC ( localInstant , iZone , instant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , instant , iZone ) ;
Distance : 5

36
Tree	return iZone . convertLocalToUTC ( iZone ) ;
Code	return iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

37
Tree	return convertLocalToUTC ( instant , iZone , false ) ;
Code	return convertLocalToUTC ( instant , iZone , false ) ;
Distance : 5

38
Tree	return convertLocalToUTC ( localInstant , localInstant , instant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , instant , iZone ) ;
Distance : 5

39
Tree	return instant . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return instant . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 4

40
Tree	return iZone . localInstant ( localInstant ) ;
Code	return iZone . localInstant ( localInstant ) ;
Distance : 5

41
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Distance : 6

42
Tree	return convertLocalToUTC ( iZone , instant , false ) ;
Code	return convertLocalToUTC ( iZone , instant , false ) ;
Distance : 5

43
Tree	return localInstant . convertLocalToUTC ( instant , false ) ;
Code	return localInstant . convertLocalToUTC ( instant , false ) ;
Distance : 4

44
Tree	return ( ( instant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( instant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

45
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

46
Tree	return iZone . convertLocalToUTC ( localInstant , instant , return; ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant , return; ) ;
Distance : 2

47
Tree	return ! localInstant && ! localInstant . convertLocalToUTC () ;
Code	return ! localInstant && ! localInstant . convertLocalToUTC () ;
Distance : 9

48
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , MillisDurationField.INSTANCE ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , MillisDurationField.INSTANCE ) ;
Distance : 4

49
Tree	return iZone . convertLocalToUTC ( null , localInstant , localInstant , return; ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , localInstant , return; ) ;
Distance : 4

50
Tree	return localInstant . convertLocalToUTC ( instant ) ;
Code	return localInstant . convertLocalToUTC ( instant ) ;
Distance : 5

51
Tree	return ! iZone && ! localInstant . convertLocalToUTC () ;
Code	return ! iZone && ! localInstant . convertLocalToUTC () ;
Distance : 9

52
Tree	return iZone != null iZone += ;
Code	return iZone != null iZone += ;
Distance : 9

53
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , com.google.protobuf.GeneratedMessageV3 ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , com.google.protobuf.GeneratedMessageV3 ) ;
Distance : 4

54
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Distance : 6

55
Tree	return convertLocalToUTC ( iZone , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( iZone , localInstant , localInstant ) ;
Distance : 5

56
Tree	return convertLocalToUTC ( iZone , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( iZone , localInstant , iZone , iZone ) ;
Distance : 6

57
Tree	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

58
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

59
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Distance : 6

60
Tree	return iZone != null iZone * ;
Code	return iZone != null iZone * ;
Distance : 9

61
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , AllowedSolutions.ANY_SIDE ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , AllowedSolutions.ANY_SIDE ) ;
Distance : 4

62
Tree	return iZone != null iZone throws ;
Code	return iZone != null iZone throws ;
Distance : 9

63
Tree	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Distance : 5

64
Tree	return iZone . convertLocalToUTC ( instant ) ;
Code	return iZone . convertLocalToUTC ( instant ) ;
Distance : 4

65
Tree	return convertLocalToUTC ( localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone ) ;
Distance : 5

66
Tree	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Distance : 2

67
Tree	return instant . convertLocalToUTC ( this , iZone ) ;
Code	return instant . convertLocalToUTC ( this , iZone ) ;
Distance : 5

68
Tree	return iZone . convertLocalToUTC ( localInstant , iZone , return; ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone , return; ) ;
Distance : 2

69
Tree	return instant != localInstant ;
Code	return instant != localInstant ;
Distance : 9

70
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

71
Tree	return convertLocalToUTC ( localInstant , iZone , instant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , instant ) ;
Distance : 3

72
Tree	return NUMBER_CONSTANT / iZone ; p
Code	return NUMBER_CONSTANT / iZone ; p
Distance : 11

73
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && anyList ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && anyList ;
Distance : 6

74
Tree	return iZone . convertLocalToUTC ( null , localInstant , iZone , return; ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , iZone , return; ) ;
Distance : 4

75
Tree	return iZone . convertLocalToUTC ( iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , localInstant , null ) ;
Distance : 3

76
Tree	return convertLocalToUTC ( instant , iZone ) ;
Code	return convertLocalToUTC ( instant , iZone ) ;
Distance : 6

77
Tree	return iZone . convertLocalToUTC ( this , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 4

78
Tree	return iZone != localInstant ;
Code	return iZone != localInstant ;
Distance : 8

79
Tree	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Distance : 4

80
Tree	return NUMBER_CONSTANT / iZone ; toString
Code	return NUMBER_CONSTANT / iZone ; toString
Distance : 11

81
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && {} ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && {} ;
Distance : 6

82
Tree	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 8

83
Tree	return instant . convertLocalToUTC ( this , localInstant ) ;
Code	return instant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

84
Tree	return convertLocalToUTC ( iZone , localInstant , false ) ;
Code	return convertLocalToUTC ( iZone , localInstant , false ) ;
Distance : 5

85
Tree	return iZone . iZone ( iZone ) ;
Code	return iZone . iZone ( iZone ) ;
Distance : 6

86
Tree	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Distance : 4

87
Tree	return convertLocalToUTC ( iZone , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( iZone , localInstant , localInstant , iZone ) ;
Distance : 6

88
Tree	return ( ( iZone ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( iZone ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 8

89
Tree	return iZone . iZone ( instant ) ;
Code	return iZone . iZone ( instant ) ;
Distance : 5

90
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , CheckLevel.ERROR ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , CheckLevel.ERROR ) ;
Distance : 4

91
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && % ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && % ;
Distance : 6

92
Tree	return iZone != null iZone ? ;
Code	return iZone != null iZone ? ;
Distance : 9

93
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Distance : 4

94
Tree	return convertLocalToUTC ( iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( iZone , localInstant , iZone ) ;
Distance : 5

95
Tree	return convertLocalToUTC ( iZone , iZone , false ) ;
Code	return convertLocalToUTC ( iZone , iZone , false ) ;
Distance : 5

96
Tree	return convertLocalToUTC ( instant , instant , false ) ;
Code	return convertLocalToUTC ( instant , instant , false ) ;
Distance : 5

97
Tree	return convertLocalToUTC ( instant , instant ) ;
Code	return convertLocalToUTC ( instant , instant ) ;
Distance : 5

98
Tree	return localInstant != instant ;
Code	return localInstant != instant ;
Distance : 8

99
Tree	return ! localInstant && ! iZone . convertLocalToUTC () ;
Code	return ! localInstant && ! iZone . convertLocalToUTC () ;
Distance : 10

100
Tree	return ! instant && ! iZone . convertLocalToUTC () ;
Code	return ! instant && ! iZone . convertLocalToUTC () ;
Distance : 10

101
Tree	return iZone . convertLocalToUTC ( null , iZone , instant , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , instant , null ) ;
Distance : 4

102
Tree	return iZone . localInstant ( instant ) ;
Code	return iZone . localInstant ( instant ) ;
Distance : 5

103
Tree	return convertLocalToUTC ( localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , false ) ;
Distance : 4

104
Tree	return iZone . convertLocalToUTC ( instant , false ) ;
Code	return iZone . convertLocalToUTC ( instant , false ) ;
Distance : 3

105
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , DiagnosticGroups.MISSING_OVERRIDE ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , DiagnosticGroups.MISSING_OVERRIDE ) ;
Distance : 4

106
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

107
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

108
Tree	return convertLocalToUTC ( localInstant , localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , instant ) ;
Distance : 3

109
Tree	return instant . convertLocalToUTC ( instant , false ) ;
Code	return instant . convertLocalToUTC ( instant , false ) ;
Distance : 4

110
Tree	return convertLocalToUTC ( localInstant , instant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant , iZone , iZone ) ;
Distance : 6

111
Tree	return iZone != null iZone <> ;
Code	return iZone != null iZone <> ;
Distance : 9

112
Tree	return iZone . convertLocalToUTC ( null , instant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , instant , localInstant , null ) ;
Distance : 5

113
Tree	return instant . localInstant ( localInstant ) ;
Code	return instant . localInstant ( localInstant ) ;
Distance : 6

114
Tree	return ( ( localInstant ) instant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) instant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

115
Tree	return iZone . convertLocalToUTC ( iZone , instant , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , instant , null ) ;
Distance : 3

116
Tree	return instant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return instant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

117
Tree	return iZone . convertLocalToUTC ( localInstant , true ) ;
Code	return iZone . convertLocalToUTC ( localInstant , true ) ;
Distance : 3

118
Tree	return convertLocalToUTC ( localInstant , instant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant , localInstant , iZone ) ;
Distance : 6

119
Tree	return instant . convertLocalToUTC ( iZone , false ) ;
Code	return instant . convertLocalToUTC ( iZone , false ) ;
Distance : 4

120
Tree	return iZone . convertLocalToUTC ( instant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( instant , localInstant , null ) ;
Distance : 3

121
Tree	return convertLocalToUTC ( localInstant , instant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant , iZone ) ;
Distance : 4

122
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 5

123
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Distance : 4

124
Tree	return instant . convertLocalToUTC ( instant ) ;
Code	return instant . convertLocalToUTC ( instant ) ;
Distance : 5

125
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , printTimeZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , printTimeZone ) ;
Distance : 4

126
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( instant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( instant , localInstant ) ;
Distance : 10

127
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , options.prettyPrint ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , options.prettyPrint ) ;
Distance : 4

128
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 7

129
Tree	return convertLocalToUTC ( localInstant , localInstant , true ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , true ) ;
Distance : 4

130
Tree	return iZone . convertLocalToUTC ( null , instant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , instant , iZone , null ) ;
Distance : 5

131
Tree	return NUMBER_CONSTANT / iZone ; Class
Code	return NUMBER_CONSTANT / iZone ; Class
Distance : 11

132
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , localInstant ) ;
Distance : 10

133
Tree	return convertLocalToUTC ( localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , instant ) ;
Distance : 4

134
Tree	return localInstant . iZone ( localInstant ) ;
Code	return localInstant . iZone ( localInstant ) ;
Distance : 6

135
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Distance : 6

136
Tree	return NUMBER_CONSTANT / localInstant ;
Code	return NUMBER_CONSTANT / localInstant ;
Distance : 9

137
Tree	return localInstant . localInstant ( localInstant ) ;
Code	return localInstant . localInstant ( localInstant ) ;
Distance : 6

138
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

139
Tree	return NUMBER_CONSTANT / iZone ; Preconditions
Code	return NUMBER_CONSTANT / iZone ; Preconditions
Distance : 11

140
Tree	return iZone . iZone ( localInstant ) ;
Code	return iZone . iZone ( localInstant ) ;
Distance : 5

141
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && &= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && &= ;
Distance : 6

142
Tree	return iZone != AllowedSolutions.ANY_SIDE ;
Code	return iZone != AllowedSolutions.ANY_SIDE ;
Distance : 9

143
Tree	return iZone . convertLocalToUTC ( localInstant ) ; wanted
Code	return iZone . convertLocalToUTC ( localInstant ) ; wanted
Distance : 5

144
Tree	return instant != instant ;
Code	return instant != instant ;
Distance : 9

145
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

146
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && /= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && /= ;
Distance : 6

147
Tree	return iZone != DiagnosticGroups.MISSING_OVERRIDE ;
Code	return iZone != DiagnosticGroups.MISSING_OVERRIDE ;
Distance : 9

148
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

149
Tree	return iZone != null iZone / ;
Code	return iZone != null iZone / ;
Distance : 9

150
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( iZone , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( iZone , iZone ) ;
Distance : 10

151
Tree	return iZone != iOffsetParsed ;
Code	return iZone != iOffsetParsed ;
Distance : 9

152
Tree	return iZone != options.prettyPrint ;
Code	return iZone != options.prettyPrint ;
Distance : 9

153
Tree	return iZone != instant ;
Code	return iZone != instant ;
Distance : 8

154
Tree	return instant . convertLocalToUTC ( this , instant ) ;
Code	return instant . convertLocalToUTC ( this , instant ) ;
Distance : 4

155
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , FeatureSet.ES3 ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , FeatureSet.ES3 ) ;
Distance : 4

156
Tree	return iZone != coefficients.length ;
Code	return iZone != coefficients.length ;
Distance : 9

157
Tree	return NUMBER_CONSTANT / iZone ; ParamChecks
Code	return NUMBER_CONSTANT / iZone ; ParamChecks
Distance : 11

158
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

159
Tree	return ! instant && ! instant . convertLocalToUTC () ;
Code	return ! instant && ! instant . convertLocalToUTC () ;
Distance : 10

160
Tree	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

161
Tree	return localInstant . convertLocalToUTC ( this , iZone ) ;
Code	return localInstant . convertLocalToUTC ( this , iZone ) ;
Distance : 5

162
Tree	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Distance : 2

163
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 4

164
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

165
Tree	return NUMBER_CONSTANT / iZone ; {}
Code	return NUMBER_CONSTANT / iZone ; {}
Distance : 11

166
Tree	return localInstant . convertLocalToUTC ( iZone ) ;
Code	return localInstant . convertLocalToUTC ( iZone ) ;
Distance : 6

167
Tree	return iZone . localInstant ( iZone ) ;
Code	return iZone . localInstant ( iZone ) ;
Distance : 6

168
Tree	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Distance : 4

169
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

170
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

171
Tree	return convertLocalToUTC ( iZone , localInstant ) ;
Code	return convertLocalToUTC ( iZone , localInstant ) ;
Distance : 6

172
Tree	return instant != iZone ;
Code	return instant != iZone ;
Distance : 10

173
Tree	return instant . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return instant . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 5

174
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

175
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

176
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 4

177
Tree	return instant . convertLocalToUTC ( localInstant , false ) ;
Code	return instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

178
Tree	return iZone != iZone ; wanted
Code	return iZone != iZone ; wanted
Distance : 10

179
Tree	return localInstant != iZone ;
Code	return localInstant != iZone ;
Distance : 9

180
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Distance : 4

181
Tree	return localInstant != localInstant ;
Code	return localInstant != localInstant ;
Distance : 9

182
Tree	return ! localInstant && ! instant . convertLocalToUTC () ;
Code	return ! localInstant && ! instant . convertLocalToUTC () ;
Distance : 10

183
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Distance : 6

184
Tree	return iZone != null iZone & ;
Code	return iZone != null iZone & ;
Distance : 9

185
Tree	return localInstant . convertLocalToUTC ( iZone , false ) ;
Code	return localInstant . convertLocalToUTC ( iZone , false ) ;
Distance : 4

186
Tree	return localInstant . convertLocalToUTC ( localInstant ) ;
Code	return localInstant . convertLocalToUTC ( localInstant ) ;
Distance : 5

187
Tree	return convertLocalToUTC ( instant , localInstant , false ) ;
Code	return convertLocalToUTC ( instant , localInstant , false ) ;
Distance : 5

188
Tree	return convertLocalToUTC ( iZone , instant ) ;
Code	return convertLocalToUTC ( iZone , instant ) ;
Distance : 5

189
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; wanted
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; wanted
Distance : 5

190
Tree	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Distance : 4

191
Tree	return iZone != null iZone + ;
Code	return iZone != null iZone + ;
Distance : 9

192
Tree	return convertLocalToUTC ( localInstant , instant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , instant , localInstant ) ;
Distance : 4

193
Tree	return instant . convertLocalToUTC ( localInstant ) ;
Code	return instant . convertLocalToUTC ( localInstant ) ;
Distance : 5

194
Tree	return iZone != CheckLevel.ERROR ;
Code	return iZone != CheckLevel.ERROR ;
Distance : 9

195
Tree	return NUMBER_CONSTANT / iZone ; &&
Code	return NUMBER_CONSTANT / iZone ; &&
Distance : 11

196
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

197
Tree	return iZone != null iZone instanceof ;
Code	return iZone != null iZone instanceof ;
Distance : 9

198
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , return; ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , return; ) ;
Distance : 2

199
Tree	return iZone . convertLocalToUTC ( null , iZone , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , iZone , null ) ;
Distance : 5

========================================================================


========================================================================
Example Number: 115
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

1
Tree	return convertLocalToUTC ( localInstant , instant , false ) ;
Code	return convertLocalToUTC ( localInstant , instant , false ) ;
Distance : 4

2
Tree	return ! iZone && ! instant . convertLocalToUTC () ;
Code	return ! iZone && ! instant . convertLocalToUTC () ;
Distance : 10

3
Tree	return iZone != printTimeZone ;
Code	return iZone != printTimeZone ;
Distance : 9

4
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

5
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

6
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

7
Tree	return convertLocalToUTC ( instant , localInstant ) ;
Code	return convertLocalToUTC ( instant , localInstant ) ;
Distance : 6

8
Tree	return iZone != null iZone extends ;
Code	return iZone != null iZone extends ;
Distance : 9

9
Tree	return localInstant . convertLocalToUTC ( this , instant ) ;
Code	return localInstant . convertLocalToUTC ( this , instant ) ;
Distance : 4

10
Tree	return ! instant && ! localInstant . convertLocalToUTC () ;
Code	return ! instant && ! localInstant . convertLocalToUTC () ;
Distance : 9

11
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

12
Tree	return iZone != TimeUnit.SECONDS ;
Code	return iZone != TimeUnit.SECONDS ;
Distance : 9

13
Tree	return instant . convertLocalToUTC ( iZone ) ;
Code	return instant . convertLocalToUTC ( iZone ) ;
Distance : 6

14
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 3

15
Tree	return convertLocalToUTC ( iZone , iZone ) ;
Code	return convertLocalToUTC ( iZone , iZone ) ;
Distance : 6

16
Tree	return iZone . instant ( localInstant ) ;
Code	return iZone . instant ( localInstant ) ;
Distance : 5

17
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Distance : 6

18
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 8

19
Tree	return iZone . convertLocalToUTC ( iZone , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , iZone , null ) ;
Distance : 3

20
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , iZone ) ;
Distance : 10

21
Tree	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

22
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( iZone , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( iZone , localInstant ) ;
Distance : 10

23
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && extends ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && extends ;
Distance : 6

24
Tree	return ( ( iZone ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( iZone ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

25
Tree	return convertLocalToUTC ( localInstant , localInstant ) ; wanted
Code	return convertLocalToUTC ( localInstant , localInstant ) ; wanted
Distance : 6

26
Tree	return iZone . convertLocalToUTC ( this , instant ) ;
Code	return iZone . convertLocalToUTC ( this , instant ) ;
Distance : 3

27
Tree	return NUMBER_CONSTANT / instant ;
Code	return NUMBER_CONSTANT / instant ;
Distance : 9

28
Tree	return ! iZone && ! iZone . convertLocalToUTC () ; wanted
Code	return ! iZone && ! iZone . convertLocalToUTC () ; wanted
Distance : 11

29
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

30
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Distance : 2

31
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

32
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 4

33
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

34
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ; wanted
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ; wanted
Distance : 5

35
Tree	return convertLocalToUTC ( localInstant , iZone , instant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , instant , iZone ) ;
Distance : 5

36
Tree	return iZone . convertLocalToUTC ( iZone ) ;
Code	return iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

37
Tree	return convertLocalToUTC ( instant , iZone , false ) ;
Code	return convertLocalToUTC ( instant , iZone , false ) ;
Distance : 5

38
Tree	return convertLocalToUTC ( localInstant , localInstant , instant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , instant , iZone ) ;
Distance : 5

39
Tree	return instant . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return instant . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 4

40
Tree	return iZone . localInstant ( localInstant ) ;
Code	return iZone . localInstant ( localInstant ) ;
Distance : 5

41
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Distance : 6

42
Tree	return convertLocalToUTC ( iZone , instant , false ) ;
Code	return convertLocalToUTC ( iZone , instant , false ) ;
Distance : 5

43
Tree	return localInstant . convertLocalToUTC ( instant , false ) ;
Code	return localInstant . convertLocalToUTC ( instant , false ) ;
Distance : 4

44
Tree	return ( ( instant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( instant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

45
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

46
Tree	return iZone . convertLocalToUTC ( localInstant , instant , return; ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant , return; ) ;
Distance : 2

47
Tree	return ! localInstant && ! localInstant . convertLocalToUTC () ;
Code	return ! localInstant && ! localInstant . convertLocalToUTC () ;
Distance : 9

48
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , MillisDurationField.INSTANCE ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , MillisDurationField.INSTANCE ) ;
Distance : 4

49
Tree	return iZone . convertLocalToUTC ( null , localInstant , localInstant , return; ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , localInstant , return; ) ;
Distance : 4

50
Tree	return localInstant . convertLocalToUTC ( instant ) ;
Code	return localInstant . convertLocalToUTC ( instant ) ;
Distance : 5

51
Tree	return ! iZone && ! localInstant . convertLocalToUTC () ;
Code	return ! iZone && ! localInstant . convertLocalToUTC () ;
Distance : 9

52
Tree	return iZone != null iZone += ;
Code	return iZone != null iZone += ;
Distance : 9

53
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , com.google.protobuf.GeneratedMessageV3 ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , com.google.protobuf.GeneratedMessageV3 ) ;
Distance : 4

54
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Distance : 6

55
Tree	return convertLocalToUTC ( iZone , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( iZone , localInstant , localInstant ) ;
Distance : 5

56
Tree	return convertLocalToUTC ( iZone , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( iZone , localInstant , iZone , iZone ) ;
Distance : 6

57
Tree	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

58
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

59
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Distance : 6

60
Tree	return iZone != null iZone * ;
Code	return iZone != null iZone * ;
Distance : 9

61
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , AllowedSolutions.ANY_SIDE ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , AllowedSolutions.ANY_SIDE ) ;
Distance : 4

62
Tree	return iZone != null iZone throws ;
Code	return iZone != null iZone throws ;
Distance : 9

63
Tree	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Distance : 5

64
Tree	return iZone . convertLocalToUTC ( instant ) ;
Code	return iZone . convertLocalToUTC ( instant ) ;
Distance : 4

65
Tree	return convertLocalToUTC ( localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone ) ;
Distance : 5

66
Tree	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Distance : 2

67
Tree	return instant . convertLocalToUTC ( this , iZone ) ;
Code	return instant . convertLocalToUTC ( this , iZone ) ;
Distance : 5

68
Tree	return iZone . convertLocalToUTC ( localInstant , iZone , return; ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone , return; ) ;
Distance : 2

69
Tree	return instant != localInstant ;
Code	return instant != localInstant ;
Distance : 9

70
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

71
Tree	return convertLocalToUTC ( localInstant , iZone , instant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , instant ) ;
Distance : 3

72
Tree	return NUMBER_CONSTANT / iZone ; p
Code	return NUMBER_CONSTANT / iZone ; p
Distance : 11

73
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && anyList ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && anyList ;
Distance : 6

74
Tree	return iZone . convertLocalToUTC ( null , localInstant , iZone , return; ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , iZone , return; ) ;
Distance : 4

75
Tree	return iZone . convertLocalToUTC ( iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , localInstant , null ) ;
Distance : 3

76
Tree	return convertLocalToUTC ( instant , iZone ) ;
Code	return convertLocalToUTC ( instant , iZone ) ;
Distance : 6

77
Tree	return iZone . convertLocalToUTC ( this , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 4

78
Tree	return iZone != localInstant ;
Code	return iZone != localInstant ;
Distance : 8

79
Tree	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Distance : 4

80
Tree	return NUMBER_CONSTANT / iZone ; toString
Code	return NUMBER_CONSTANT / iZone ; toString
Distance : 11

81
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && {} ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && {} ;
Distance : 6

82
Tree	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 8

83
Tree	return instant . convertLocalToUTC ( this , localInstant ) ;
Code	return instant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

84
Tree	return convertLocalToUTC ( iZone , localInstant , false ) ;
Code	return convertLocalToUTC ( iZone , localInstant , false ) ;
Distance : 5

85
Tree	return iZone . iZone ( iZone ) ;
Code	return iZone . iZone ( iZone ) ;
Distance : 6

86
Tree	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Distance : 4

87
Tree	return convertLocalToUTC ( iZone , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( iZone , localInstant , localInstant , iZone ) ;
Distance : 6

88
Tree	return ( ( iZone ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( iZone ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 8

89
Tree	return iZone . iZone ( instant ) ;
Code	return iZone . iZone ( instant ) ;
Distance : 5

90
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , CheckLevel.ERROR ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , CheckLevel.ERROR ) ;
Distance : 4

91
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && % ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && % ;
Distance : 6

92
Tree	return iZone != null iZone ? ;
Code	return iZone != null iZone ? ;
Distance : 9

93
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Distance : 4

94
Tree	return convertLocalToUTC ( iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( iZone , localInstant , iZone ) ;
Distance : 5

95
Tree	return convertLocalToUTC ( iZone , iZone , false ) ;
Code	return convertLocalToUTC ( iZone , iZone , false ) ;
Distance : 5

96
Tree	return convertLocalToUTC ( instant , instant , false ) ;
Code	return convertLocalToUTC ( instant , instant , false ) ;
Distance : 5

97
Tree	return convertLocalToUTC ( instant , instant ) ;
Code	return convertLocalToUTC ( instant , instant ) ;
Distance : 5

98
Tree	return localInstant != instant ;
Code	return localInstant != instant ;
Distance : 8

99
Tree	return ! localInstant && ! iZone . convertLocalToUTC () ;
Code	return ! localInstant && ! iZone . convertLocalToUTC () ;
Distance : 10

100
Tree	return ! instant && ! iZone . convertLocalToUTC () ;
Code	return ! instant && ! iZone . convertLocalToUTC () ;
Distance : 10

101
Tree	return iZone . convertLocalToUTC ( null , iZone , instant , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , instant , null ) ;
Distance : 4

102
Tree	return iZone . localInstant ( instant ) ;
Code	return iZone . localInstant ( instant ) ;
Distance : 5

103
Tree	return convertLocalToUTC ( localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , false ) ;
Distance : 4

104
Tree	return iZone . convertLocalToUTC ( instant , false ) ;
Code	return iZone . convertLocalToUTC ( instant , false ) ;
Distance : 3

105
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , DiagnosticGroups.MISSING_OVERRIDE ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , DiagnosticGroups.MISSING_OVERRIDE ) ;
Distance : 4

106
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

107
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

108
Tree	return convertLocalToUTC ( localInstant , localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , instant ) ;
Distance : 3

109
Tree	return instant . convertLocalToUTC ( instant , false ) ;
Code	return instant . convertLocalToUTC ( instant , false ) ;
Distance : 4

110
Tree	return convertLocalToUTC ( localInstant , instant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant , iZone , iZone ) ;
Distance : 6

111
Tree	return iZone != null iZone <> ;
Code	return iZone != null iZone <> ;
Distance : 9

112
Tree	return iZone . convertLocalToUTC ( null , instant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , instant , localInstant , null ) ;
Distance : 5

113
Tree	return instant . localInstant ( localInstant ) ;
Code	return instant . localInstant ( localInstant ) ;
Distance : 6

114
Tree	return ( ( localInstant ) instant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) instant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

115
Tree	return iZone . convertLocalToUTC ( iZone , instant , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , instant , null ) ;
Distance : 3

116
Tree	return instant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return instant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

117
Tree	return iZone . convertLocalToUTC ( localInstant , true ) ;
Code	return iZone . convertLocalToUTC ( localInstant , true ) ;
Distance : 3

118
Tree	return convertLocalToUTC ( localInstant , instant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant , localInstant , iZone ) ;
Distance : 6

119
Tree	return instant . convertLocalToUTC ( iZone , false ) ;
Code	return instant . convertLocalToUTC ( iZone , false ) ;
Distance : 4

120
Tree	return iZone . convertLocalToUTC ( instant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( instant , localInstant , null ) ;
Distance : 3

121
Tree	return convertLocalToUTC ( localInstant , instant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant , iZone ) ;
Distance : 4

122
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 5

123
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Distance : 4

124
Tree	return instant . convertLocalToUTC ( instant ) ;
Code	return instant . convertLocalToUTC ( instant ) ;
Distance : 5

125
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , printTimeZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , printTimeZone ) ;
Distance : 4

126
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( instant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( instant , localInstant ) ;
Distance : 10

127
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , options.prettyPrint ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , options.prettyPrint ) ;
Distance : 4

128
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 7

129
Tree	return convertLocalToUTC ( localInstant , localInstant , true ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , true ) ;
Distance : 4

130
Tree	return iZone . convertLocalToUTC ( null , instant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , instant , iZone , null ) ;
Distance : 5

131
Tree	return NUMBER_CONSTANT / iZone ; Class
Code	return NUMBER_CONSTANT / iZone ; Class
Distance : 11

132
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , localInstant ) ;
Distance : 10

133
Tree	return convertLocalToUTC ( localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , instant ) ;
Distance : 4

134
Tree	return localInstant . iZone ( localInstant ) ;
Code	return localInstant . iZone ( localInstant ) ;
Distance : 6

135
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Distance : 6

136
Tree	return NUMBER_CONSTANT / localInstant ;
Code	return NUMBER_CONSTANT / localInstant ;
Distance : 9

137
Tree	return localInstant . localInstant ( localInstant ) ;
Code	return localInstant . localInstant ( localInstant ) ;
Distance : 6

138
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

139
Tree	return NUMBER_CONSTANT / iZone ; Preconditions
Code	return NUMBER_CONSTANT / iZone ; Preconditions
Distance : 11

140
Tree	return iZone . iZone ( localInstant ) ;
Code	return iZone . iZone ( localInstant ) ;
Distance : 5

141
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && &= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && &= ;
Distance : 6

142
Tree	return iZone != AllowedSolutions.ANY_SIDE ;
Code	return iZone != AllowedSolutions.ANY_SIDE ;
Distance : 9

143
Tree	return iZone . convertLocalToUTC ( localInstant ) ; wanted
Code	return iZone . convertLocalToUTC ( localInstant ) ; wanted
Distance : 5

144
Tree	return instant != instant ;
Code	return instant != instant ;
Distance : 9

145
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

146
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && /= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && /= ;
Distance : 6

147
Tree	return iZone != DiagnosticGroups.MISSING_OVERRIDE ;
Code	return iZone != DiagnosticGroups.MISSING_OVERRIDE ;
Distance : 9

148
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

149
Tree	return iZone != null iZone / ;
Code	return iZone != null iZone / ;
Distance : 9

150
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( iZone , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( iZone , iZone ) ;
Distance : 10

151
Tree	return iZone != iOffsetParsed ;
Code	return iZone != iOffsetParsed ;
Distance : 9

152
Tree	return iZone != options.prettyPrint ;
Code	return iZone != options.prettyPrint ;
Distance : 9

153
Tree	return iZone != instant ;
Code	return iZone != instant ;
Distance : 8

154
Tree	return instant . convertLocalToUTC ( this , instant ) ;
Code	return instant . convertLocalToUTC ( this , instant ) ;
Distance : 4

155
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , FeatureSet.ES3 ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , FeatureSet.ES3 ) ;
Distance : 4

156
Tree	return iZone != coefficients.length ;
Code	return iZone != coefficients.length ;
Distance : 9

157
Tree	return NUMBER_CONSTANT / iZone ; ParamChecks
Code	return NUMBER_CONSTANT / iZone ; ParamChecks
Distance : 11

158
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

159
Tree	return ! instant && ! instant . convertLocalToUTC () ;
Code	return ! instant && ! instant . convertLocalToUTC () ;
Distance : 10

160
Tree	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

161
Tree	return localInstant . convertLocalToUTC ( this , iZone ) ;
Code	return localInstant . convertLocalToUTC ( this , iZone ) ;
Distance : 5

162
Tree	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Distance : 2

163
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 4

164
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

165
Tree	return NUMBER_CONSTANT / iZone ; {}
Code	return NUMBER_CONSTANT / iZone ; {}
Distance : 11

166
Tree	return localInstant . convertLocalToUTC ( iZone ) ;
Code	return localInstant . convertLocalToUTC ( iZone ) ;
Distance : 6

167
Tree	return iZone . localInstant ( iZone ) ;
Code	return iZone . localInstant ( iZone ) ;
Distance : 6

168
Tree	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Distance : 4

169
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

170
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

171
Tree	return convertLocalToUTC ( iZone , localInstant ) ;
Code	return convertLocalToUTC ( iZone , localInstant ) ;
Distance : 6

172
Tree	return instant != iZone ;
Code	return instant != iZone ;
Distance : 10

173
Tree	return instant . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return instant . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 5

174
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

175
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

176
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 4

177
Tree	return instant . convertLocalToUTC ( localInstant , false ) ;
Code	return instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

178
Tree	return iZone != iZone ; wanted
Code	return iZone != iZone ; wanted
Distance : 10

179
Tree	return localInstant != iZone ;
Code	return localInstant != iZone ;
Distance : 9

180
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Distance : 4

181
Tree	return localInstant != localInstant ;
Code	return localInstant != localInstant ;
Distance : 9

182
Tree	return ! localInstant && ! instant . convertLocalToUTC () ;
Code	return ! localInstant && ! instant . convertLocalToUTC () ;
Distance : 10

183
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Distance : 6

184
Tree	return iZone != null iZone & ;
Code	return iZone != null iZone & ;
Distance : 9

185
Tree	return localInstant . convertLocalToUTC ( iZone , false ) ;
Code	return localInstant . convertLocalToUTC ( iZone , false ) ;
Distance : 4

186
Tree	return localInstant . convertLocalToUTC ( localInstant ) ;
Code	return localInstant . convertLocalToUTC ( localInstant ) ;
Distance : 5

187
Tree	return convertLocalToUTC ( instant , localInstant , false ) ;
Code	return convertLocalToUTC ( instant , localInstant , false ) ;
Distance : 5

188
Tree	return convertLocalToUTC ( iZone , instant ) ;
Code	return convertLocalToUTC ( iZone , instant ) ;
Distance : 5

189
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; wanted
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; wanted
Distance : 5

190
Tree	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Distance : 4

191
Tree	return iZone != null iZone + ;
Code	return iZone != null iZone + ;
Distance : 9

192
Tree	return convertLocalToUTC ( localInstant , instant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , instant , localInstant ) ;
Distance : 4

193
Tree	return instant . convertLocalToUTC ( localInstant ) ;
Code	return instant . convertLocalToUTC ( localInstant ) ;
Distance : 5

194
Tree	return iZone != CheckLevel.ERROR ;
Code	return iZone != CheckLevel.ERROR ;
Distance : 9

195
Tree	return NUMBER_CONSTANT / iZone ; &&
Code	return NUMBER_CONSTANT / iZone ; &&
Distance : 11

196
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

197
Tree	return iZone != null iZone instanceof ;
Code	return iZone != null iZone instanceof ;
Distance : 9

198
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , return; ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , return; ) ;
Distance : 2

199
Tree	return iZone . convertLocalToUTC ( null , iZone , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , iZone , null ) ;
Distance : 5

========================================================================


========================================================================
Example Number: 116
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

1
Tree	return convertLocalToUTC ( localInstant , instant , false ) ;
Code	return convertLocalToUTC ( localInstant , instant , false ) ;
Distance : 4

2
Tree	return ! iZone && ! instant . convertLocalToUTC () ;
Code	return ! iZone && ! instant . convertLocalToUTC () ;
Distance : 10

3
Tree	return iZone != printTimeZone ;
Code	return iZone != printTimeZone ;
Distance : 9

4
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

5
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

6
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

7
Tree	return convertLocalToUTC ( instant , localInstant ) ;
Code	return convertLocalToUTC ( instant , localInstant ) ;
Distance : 6

8
Tree	return iZone != null iZone extends ;
Code	return iZone != null iZone extends ;
Distance : 9

9
Tree	return localInstant . convertLocalToUTC ( this , instant ) ;
Code	return localInstant . convertLocalToUTC ( this , instant ) ;
Distance : 4

10
Tree	return ! instant && ! localInstant . convertLocalToUTC () ;
Code	return ! instant && ! localInstant . convertLocalToUTC () ;
Distance : 9

11
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

12
Tree	return iZone != TimeUnit.SECONDS ;
Code	return iZone != TimeUnit.SECONDS ;
Distance : 9

13
Tree	return instant . convertLocalToUTC ( iZone ) ;
Code	return instant . convertLocalToUTC ( iZone ) ;
Distance : 6

14
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 3

15
Tree	return convertLocalToUTC ( iZone , iZone ) ;
Code	return convertLocalToUTC ( iZone , iZone ) ;
Distance : 6

16
Tree	return iZone . instant ( localInstant ) ;
Code	return iZone . instant ( localInstant ) ;
Distance : 5

17
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Distance : 6

18
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 8

19
Tree	return iZone . convertLocalToUTC ( iZone , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , iZone , null ) ;
Distance : 3

20
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , iZone ) ;
Distance : 10

21
Tree	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

22
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( iZone , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( iZone , localInstant ) ;
Distance : 10

23
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && extends ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && extends ;
Distance : 6

24
Tree	return ( ( iZone ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( iZone ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

25
Tree	return convertLocalToUTC ( localInstant , localInstant ) ; wanted
Code	return convertLocalToUTC ( localInstant , localInstant ) ; wanted
Distance : 6

26
Tree	return iZone . convertLocalToUTC ( this , instant ) ;
Code	return iZone . convertLocalToUTC ( this , instant ) ;
Distance : 3

27
Tree	return NUMBER_CONSTANT / instant ;
Code	return NUMBER_CONSTANT / instant ;
Distance : 9

28
Tree	return ! iZone && ! iZone . convertLocalToUTC () ; wanted
Code	return ! iZone && ! iZone . convertLocalToUTC () ; wanted
Distance : 11

29
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

30
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Distance : 2

31
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

32
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 4

33
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

34
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ; wanted
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ; wanted
Distance : 5

35
Tree	return convertLocalToUTC ( localInstant , iZone , instant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , instant , iZone ) ;
Distance : 5

36
Tree	return iZone . convertLocalToUTC ( iZone ) ;
Code	return iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

37
Tree	return convertLocalToUTC ( instant , iZone , false ) ;
Code	return convertLocalToUTC ( instant , iZone , false ) ;
Distance : 5

38
Tree	return convertLocalToUTC ( localInstant , localInstant , instant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , instant , iZone ) ;
Distance : 5

39
Tree	return instant . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return instant . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 4

40
Tree	return iZone . localInstant ( localInstant ) ;
Code	return iZone . localInstant ( localInstant ) ;
Distance : 5

41
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Distance : 6

42
Tree	return convertLocalToUTC ( iZone , instant , false ) ;
Code	return convertLocalToUTC ( iZone , instant , false ) ;
Distance : 5

43
Tree	return localInstant . convertLocalToUTC ( instant , false ) ;
Code	return localInstant . convertLocalToUTC ( instant , false ) ;
Distance : 4

44
Tree	return ( ( instant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( instant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

45
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

46
Tree	return iZone . convertLocalToUTC ( localInstant , instant , return; ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant , return; ) ;
Distance : 2

47
Tree	return ! localInstant && ! localInstant . convertLocalToUTC () ;
Code	return ! localInstant && ! localInstant . convertLocalToUTC () ;
Distance : 9

48
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , MillisDurationField.INSTANCE ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , MillisDurationField.INSTANCE ) ;
Distance : 4

49
Tree	return iZone . convertLocalToUTC ( null , localInstant , localInstant , return; ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , localInstant , return; ) ;
Distance : 4

50
Tree	return localInstant . convertLocalToUTC ( instant ) ;
Code	return localInstant . convertLocalToUTC ( instant ) ;
Distance : 5

51
Tree	return ! iZone && ! localInstant . convertLocalToUTC () ;
Code	return ! iZone && ! localInstant . convertLocalToUTC () ;
Distance : 9

52
Tree	return iZone != null iZone += ;
Code	return iZone != null iZone += ;
Distance : 9

53
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , com.google.protobuf.GeneratedMessageV3 ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , com.google.protobuf.GeneratedMessageV3 ) ;
Distance : 4

54
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Distance : 6

55
Tree	return convertLocalToUTC ( iZone , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( iZone , localInstant , localInstant ) ;
Distance : 5

56
Tree	return convertLocalToUTC ( iZone , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( iZone , localInstant , iZone , iZone ) ;
Distance : 6

57
Tree	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

58
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

59
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Distance : 6

60
Tree	return iZone != null iZone * ;
Code	return iZone != null iZone * ;
Distance : 9

61
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , AllowedSolutions.ANY_SIDE ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , AllowedSolutions.ANY_SIDE ) ;
Distance : 4

62
Tree	return iZone != null iZone throws ;
Code	return iZone != null iZone throws ;
Distance : 9

63
Tree	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Distance : 5

64
Tree	return iZone . convertLocalToUTC ( instant ) ;
Code	return iZone . convertLocalToUTC ( instant ) ;
Distance : 4

65
Tree	return convertLocalToUTC ( localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone ) ;
Distance : 5

66
Tree	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Distance : 2

67
Tree	return instant . convertLocalToUTC ( this , iZone ) ;
Code	return instant . convertLocalToUTC ( this , iZone ) ;
Distance : 5

68
Tree	return iZone . convertLocalToUTC ( localInstant , iZone , return; ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone , return; ) ;
Distance : 2

69
Tree	return instant != localInstant ;
Code	return instant != localInstant ;
Distance : 9

70
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

71
Tree	return convertLocalToUTC ( localInstant , iZone , instant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , instant ) ;
Distance : 3

72
Tree	return NUMBER_CONSTANT / iZone ; p
Code	return NUMBER_CONSTANT / iZone ; p
Distance : 11

73
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && anyList ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && anyList ;
Distance : 6

74
Tree	return iZone . convertLocalToUTC ( null , localInstant , iZone , return; ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , iZone , return; ) ;
Distance : 4

75
Tree	return iZone . convertLocalToUTC ( iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , localInstant , null ) ;
Distance : 3

76
Tree	return convertLocalToUTC ( instant , iZone ) ;
Code	return convertLocalToUTC ( instant , iZone ) ;
Distance : 6

77
Tree	return iZone . convertLocalToUTC ( this , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 4

78
Tree	return iZone != localInstant ;
Code	return iZone != localInstant ;
Distance : 8

79
Tree	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Distance : 4

80
Tree	return NUMBER_CONSTANT / iZone ; toString
Code	return NUMBER_CONSTANT / iZone ; toString
Distance : 11

81
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && {} ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && {} ;
Distance : 6

82
Tree	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 8

83
Tree	return instant . convertLocalToUTC ( this , localInstant ) ;
Code	return instant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

84
Tree	return convertLocalToUTC ( iZone , localInstant , false ) ;
Code	return convertLocalToUTC ( iZone , localInstant , false ) ;
Distance : 5

85
Tree	return iZone . iZone ( iZone ) ;
Code	return iZone . iZone ( iZone ) ;
Distance : 6

86
Tree	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Distance : 4

87
Tree	return convertLocalToUTC ( iZone , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( iZone , localInstant , localInstant , iZone ) ;
Distance : 6

88
Tree	return ( ( iZone ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( iZone ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 8

89
Tree	return iZone . iZone ( instant ) ;
Code	return iZone . iZone ( instant ) ;
Distance : 5

90
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , CheckLevel.ERROR ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , CheckLevel.ERROR ) ;
Distance : 4

91
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && % ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && % ;
Distance : 6

92
Tree	return iZone != null iZone ? ;
Code	return iZone != null iZone ? ;
Distance : 9

93
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Distance : 4

94
Tree	return convertLocalToUTC ( iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( iZone , localInstant , iZone ) ;
Distance : 5

95
Tree	return convertLocalToUTC ( iZone , iZone , false ) ;
Code	return convertLocalToUTC ( iZone , iZone , false ) ;
Distance : 5

96
Tree	return convertLocalToUTC ( instant , instant , false ) ;
Code	return convertLocalToUTC ( instant , instant , false ) ;
Distance : 5

97
Tree	return convertLocalToUTC ( instant , instant ) ;
Code	return convertLocalToUTC ( instant , instant ) ;
Distance : 5

98
Tree	return localInstant != instant ;
Code	return localInstant != instant ;
Distance : 8

99
Tree	return ! localInstant && ! iZone . convertLocalToUTC () ;
Code	return ! localInstant && ! iZone . convertLocalToUTC () ;
Distance : 10

100
Tree	return ! instant && ! iZone . convertLocalToUTC () ;
Code	return ! instant && ! iZone . convertLocalToUTC () ;
Distance : 10

101
Tree	return iZone . convertLocalToUTC ( null , iZone , instant , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , instant , null ) ;
Distance : 4

102
Tree	return iZone . localInstant ( instant ) ;
Code	return iZone . localInstant ( instant ) ;
Distance : 5

103
Tree	return convertLocalToUTC ( localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , false ) ;
Distance : 4

104
Tree	return iZone . convertLocalToUTC ( instant , false ) ;
Code	return iZone . convertLocalToUTC ( instant , false ) ;
Distance : 3

105
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , DiagnosticGroups.MISSING_OVERRIDE ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , DiagnosticGroups.MISSING_OVERRIDE ) ;
Distance : 4

106
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

107
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

108
Tree	return convertLocalToUTC ( localInstant , localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , instant ) ;
Distance : 3

109
Tree	return instant . convertLocalToUTC ( instant , false ) ;
Code	return instant . convertLocalToUTC ( instant , false ) ;
Distance : 4

110
Tree	return convertLocalToUTC ( localInstant , instant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant , iZone , iZone ) ;
Distance : 6

111
Tree	return iZone != null iZone <> ;
Code	return iZone != null iZone <> ;
Distance : 9

112
Tree	return iZone . convertLocalToUTC ( null , instant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , instant , localInstant , null ) ;
Distance : 5

113
Tree	return instant . localInstant ( localInstant ) ;
Code	return instant . localInstant ( localInstant ) ;
Distance : 6

114
Tree	return ( ( localInstant ) instant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) instant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

115
Tree	return iZone . convertLocalToUTC ( iZone , instant , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , instant , null ) ;
Distance : 3

116
Tree	return instant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return instant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

117
Tree	return iZone . convertLocalToUTC ( localInstant , true ) ;
Code	return iZone . convertLocalToUTC ( localInstant , true ) ;
Distance : 3

118
Tree	return convertLocalToUTC ( localInstant , instant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant , localInstant , iZone ) ;
Distance : 6

119
Tree	return instant . convertLocalToUTC ( iZone , false ) ;
Code	return instant . convertLocalToUTC ( iZone , false ) ;
Distance : 4

120
Tree	return iZone . convertLocalToUTC ( instant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( instant , localInstant , null ) ;
Distance : 3

121
Tree	return convertLocalToUTC ( localInstant , instant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant , iZone ) ;
Distance : 4

122
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 5

123
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Distance : 4

124
Tree	return instant . convertLocalToUTC ( instant ) ;
Code	return instant . convertLocalToUTC ( instant ) ;
Distance : 5

125
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , printTimeZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , printTimeZone ) ;
Distance : 4

126
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( instant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( instant , localInstant ) ;
Distance : 10

127
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , options.prettyPrint ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , options.prettyPrint ) ;
Distance : 4

128
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 7

129
Tree	return convertLocalToUTC ( localInstant , localInstant , true ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , true ) ;
Distance : 4

130
Tree	return iZone . convertLocalToUTC ( null , instant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , instant , iZone , null ) ;
Distance : 5

131
Tree	return NUMBER_CONSTANT / iZone ; Class
Code	return NUMBER_CONSTANT / iZone ; Class
Distance : 11

132
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , localInstant ) ;
Distance : 10

133
Tree	return convertLocalToUTC ( localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , instant ) ;
Distance : 4

134
Tree	return localInstant . iZone ( localInstant ) ;
Code	return localInstant . iZone ( localInstant ) ;
Distance : 6

135
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Distance : 6

136
Tree	return NUMBER_CONSTANT / localInstant ;
Code	return NUMBER_CONSTANT / localInstant ;
Distance : 9

137
Tree	return localInstant . localInstant ( localInstant ) ;
Code	return localInstant . localInstant ( localInstant ) ;
Distance : 6

138
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

139
Tree	return NUMBER_CONSTANT / iZone ; Preconditions
Code	return NUMBER_CONSTANT / iZone ; Preconditions
Distance : 11

140
Tree	return iZone . iZone ( localInstant ) ;
Code	return iZone . iZone ( localInstant ) ;
Distance : 5

141
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && &= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && &= ;
Distance : 6

142
Tree	return iZone != AllowedSolutions.ANY_SIDE ;
Code	return iZone != AllowedSolutions.ANY_SIDE ;
Distance : 9

143
Tree	return iZone . convertLocalToUTC ( localInstant ) ; wanted
Code	return iZone . convertLocalToUTC ( localInstant ) ; wanted
Distance : 5

144
Tree	return instant != instant ;
Code	return instant != instant ;
Distance : 9

145
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

146
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && /= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && /= ;
Distance : 6

147
Tree	return iZone != DiagnosticGroups.MISSING_OVERRIDE ;
Code	return iZone != DiagnosticGroups.MISSING_OVERRIDE ;
Distance : 9

148
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

149
Tree	return iZone != null iZone / ;
Code	return iZone != null iZone / ;
Distance : 9

150
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( iZone , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( iZone , iZone ) ;
Distance : 10

151
Tree	return iZone != iOffsetParsed ;
Code	return iZone != iOffsetParsed ;
Distance : 9

152
Tree	return iZone != options.prettyPrint ;
Code	return iZone != options.prettyPrint ;
Distance : 9

153
Tree	return iZone != instant ;
Code	return iZone != instant ;
Distance : 8

154
Tree	return instant . convertLocalToUTC ( this , instant ) ;
Code	return instant . convertLocalToUTC ( this , instant ) ;
Distance : 4

155
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , FeatureSet.ES3 ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , FeatureSet.ES3 ) ;
Distance : 4

156
Tree	return iZone != coefficients.length ;
Code	return iZone != coefficients.length ;
Distance : 9

157
Tree	return NUMBER_CONSTANT / iZone ; ParamChecks
Code	return NUMBER_CONSTANT / iZone ; ParamChecks
Distance : 11

158
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

159
Tree	return ! instant && ! instant . convertLocalToUTC () ;
Code	return ! instant && ! instant . convertLocalToUTC () ;
Distance : 10

160
Tree	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

161
Tree	return localInstant . convertLocalToUTC ( this , iZone ) ;
Code	return localInstant . convertLocalToUTC ( this , iZone ) ;
Distance : 5

162
Tree	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Distance : 2

163
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 4

164
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

165
Tree	return NUMBER_CONSTANT / iZone ; {}
Code	return NUMBER_CONSTANT / iZone ; {}
Distance : 11

166
Tree	return localInstant . convertLocalToUTC ( iZone ) ;
Code	return localInstant . convertLocalToUTC ( iZone ) ;
Distance : 6

167
Tree	return iZone . localInstant ( iZone ) ;
Code	return iZone . localInstant ( iZone ) ;
Distance : 6

168
Tree	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Distance : 4

169
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

170
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

171
Tree	return convertLocalToUTC ( iZone , localInstant ) ;
Code	return convertLocalToUTC ( iZone , localInstant ) ;
Distance : 6

172
Tree	return instant != iZone ;
Code	return instant != iZone ;
Distance : 10

173
Tree	return instant . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return instant . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 5

174
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

175
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

176
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 4

177
Tree	return instant . convertLocalToUTC ( localInstant , false ) ;
Code	return instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

178
Tree	return iZone != iZone ; wanted
Code	return iZone != iZone ; wanted
Distance : 10

179
Tree	return localInstant != iZone ;
Code	return localInstant != iZone ;
Distance : 9

180
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Distance : 4

181
Tree	return localInstant != localInstant ;
Code	return localInstant != localInstant ;
Distance : 9

182
Tree	return ! localInstant && ! instant . convertLocalToUTC () ;
Code	return ! localInstant && ! instant . convertLocalToUTC () ;
Distance : 10

183
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Distance : 6

184
Tree	return iZone != null iZone & ;
Code	return iZone != null iZone & ;
Distance : 9

185
Tree	return localInstant . convertLocalToUTC ( iZone , false ) ;
Code	return localInstant . convertLocalToUTC ( iZone , false ) ;
Distance : 4

186
Tree	return localInstant . convertLocalToUTC ( localInstant ) ;
Code	return localInstant . convertLocalToUTC ( localInstant ) ;
Distance : 5

187
Tree	return convertLocalToUTC ( instant , localInstant , false ) ;
Code	return convertLocalToUTC ( instant , localInstant , false ) ;
Distance : 5

188
Tree	return convertLocalToUTC ( iZone , instant ) ;
Code	return convertLocalToUTC ( iZone , instant ) ;
Distance : 5

189
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; wanted
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; wanted
Distance : 5

190
Tree	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Distance : 4

191
Tree	return iZone != null iZone + ;
Code	return iZone != null iZone + ;
Distance : 9

192
Tree	return convertLocalToUTC ( localInstant , instant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , instant , localInstant ) ;
Distance : 4

193
Tree	return instant . convertLocalToUTC ( localInstant ) ;
Code	return instant . convertLocalToUTC ( localInstant ) ;
Distance : 5

194
Tree	return iZone != CheckLevel.ERROR ;
Code	return iZone != CheckLevel.ERROR ;
Distance : 9

195
Tree	return NUMBER_CONSTANT / iZone ; &&
Code	return NUMBER_CONSTANT / iZone ; &&
Distance : 11

196
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

197
Tree	return iZone != null iZone instanceof ;
Code	return iZone != null iZone instanceof ;
Distance : 9

198
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , return; ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , return; ) ;
Distance : 2

199
Tree	return iZone . convertLocalToUTC ( null , iZone , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , iZone , null ) ;
Distance : 5

========================================================================


========================================================================
Example Number: 117
Parent Code is: 
Partial newPartial = new Partial ( iChronology , newTypes , newValues ) ;
-------------------------------------------------------------------------------
Child code is: 
Partial newPartial = new Partial ( newTypes , newValues , iChronology ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Partial})) (59 (800{val=newPartial}) (204{val==}) (14 (304{val=new}) (43 (801{val=Partial})) (214{val=(}) (800{val=iChronology}) (234{val=,}) (800{val=newTypes}) (234{val=,}) (800{val=newValues}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Partial})) (59 (800{val=newPartial}) (204{val==}) (14 (304{val=new}) (43 (801{val=Partial})) (214{val=(}) (800{val=newTypes}) (234{val=,}) (800{val=newValues}) (234{val=,}) (800{val=iChronology}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/4/parent/src_main_java_org_joda_time_Partial.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Partial newValues = new Partial ( iChronology . copySelf () , iChronology , newValues ) ;
Code	Partial newValues = new Partial ( iChronology . copySelf () , iChronology , newValues ) ;
Distance : 7

1
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , null ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , null ) ;
Distance : 5

2
Tree	Partial newValues = new Partial ( iChronology , new newTypes ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , new newTypes ( iChronology ) ) ;
Distance : 6

3
Tree	Partial newValues = new Partial ( this , iChronology , newValues , iChronology ) ;
Code	Partial newValues = new Partial ( this , iChronology , newValues , iChronology ) ;
Distance : 4

4
Tree	Partial newPartial = new Partial ( iChronology , NUMBER_CONSTANT , iChronology , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , NUMBER_CONSTANT , iChronology , newValues ) ;
Distance : 4

5
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , getChronology () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , getChronology () ) ;
Distance : 6

6
Tree	Partial newValues = new Partial ( iChronology . copySelf () , newValues , newValues ) ;
Code	Partial newValues = new Partial ( iChronology . copySelf () , newValues , newValues ) ;
Distance : 6

7
Tree	Partial newValues = new Partial ( iChronology , newTypes ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes ) ;
Distance : 5

8
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getRightElement () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getRightElement () ) ;
Distance : 8

9
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , in () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , in () ) ;
Distance : 6

10
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues ) ;
Distance : 2

11
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , values.length () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , values.length () ) ;
Distance : 6

12
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getInstance () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getInstance () ) ;
Distance : 8

13
Tree	Partial newPartial = new Partial ( iChronology , NUMBER_CONSTANT , newValues , iChronology ) ;
Code	Partial newPartial = new Partial ( iChronology , NUMBER_CONSTANT , newValues , iChronology ) ;
Distance : 3

14
Tree	Partial newValues = new Partial ( NUMBER_CONSTANT , iChronology . getFunctionNames () ) ;
Code	Partial newValues = new Partial ( NUMBER_CONSTANT , iChronology . getFunctionNames () ) ;
Distance : 6

15
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . of () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . of () ) ;
Distance : 7

16
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getScopeCreator () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getScopeCreator () ) ;
Distance : 8

17
Tree	Partial newValues = new Partial ( NUMBER_CONSTANT , iChronology . copySelf () ) ;
Code	Partial newValues = new Partial ( NUMBER_CONSTANT , iChronology . copySelf () ) ;
Distance : 6

18
Tree	Partial newValues = new Partial ( iChronology , iChronology ) ;
Code	Partial newValues = new Partial ( iChronology , iChronology ) ;
Distance : 4

19
Tree	Partial newPartial = new Partial ( iChronology . getInstance () , newValues , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology . getInstance () , newValues , newValues ) ;
Distance : 5

20
Tree	Partial newValues = new Partial ( iChronology . era () , newValues , newValues ) ;
Code	Partial newValues = new Partial ( iChronology . era () , newValues , newValues ) ;
Distance : 6

21
Tree	Partial newPartial = new Partial ( iChronology , newTypes , newValues , null ) ;
Code	Partial newPartial = new Partial ( iChronology , newTypes , newValues , null ) ;
Distance : 3

22
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , getLeft () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , getLeft () ) ;
Distance : 6

23
Tree	Partial newPartial = new Partial ( iChronology , this , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , this , newValues ) ;
Distance : 3

24
Tree	Partial iChronology = new Partial ( this , iChronology , newValues , newValues ) ;
Code	Partial iChronology = new Partial ( this , iChronology , newValues , newValues ) ;
Distance : 5

25
Tree	Partial newPartial = new Partial ( newValues , this , newValues ) ;
Code	Partial newPartial = new Partial ( newValues , this , newValues ) ;
Distance : 3

26
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues . valueOf () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues . valueOf () ) ;
Distance : 6

27
Tree	Partial newValues = new Partial ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Distance : 5

28
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , getMillis () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , getMillis () ) ;
Distance : 6

29
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues , null ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues , null ) ;
Distance : 6

30
Tree	Partial newPartial = new Partial ( this , iChronology , newValues , iChronology ) ;
Code	Partial newPartial = new Partial ( this , iChronology , newValues , iChronology ) ;
Distance : 3

31
Tree	Partial newValues = new Partial ( iChronology , NUMBER_CONSTANT , iChronology , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , NUMBER_CONSTANT , iChronology , newValues ) ;
Distance : 5

32
Tree	Partial newValues = new Partial ( iChronology , this , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , this , newValues ) ;
Distance : 4

33
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues . getRightElement () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues . getRightElement () ) ;
Distance : 6

34
Tree	Partial newPartial = new Partial ( iChronology , iChronology , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , iChronology , newValues ) ;
Distance : 3

35
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of ( iChronology ) ) ;
Distance : 9

36
Tree	Partial newValues = new Partial ( this , iChronology , newValues , newValues ) ;
Code	Partial newValues = new Partial ( this , iChronology , newValues , newValues ) ;
Distance : 5

37
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues , null ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues , null ) ;
Distance : 6

38
Tree	Partial newPartial = new Partial ( iChronology . copySelf () , newValues , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology . copySelf () , newValues , newValues ) ;
Distance : 5

39
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues ) ;
Distance : 4

40
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners ( iChronology ) ) ;
Distance : 9

41
Tree	Partial newPartial = new Partial ( newValues , new newTypes ( this ) ) ;
Code	Partial newPartial = new Partial ( newValues , new newTypes ( this ) ) ;
Distance : 6

42
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , iChronology ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , iChronology ) ;
Distance : 3

43
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues ) ;
Distance : 4

44
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . timeParser () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . timeParser () ) ;
Distance : 8

45
Tree	Partial newPartial = new Partial ( this , iChronology , newValues , newValues ) ;
Code	Partial newPartial = new Partial ( this , iChronology , newValues , newValues ) ;
Distance : 4

46
Tree	Partial newPartial = new Partial ( newValues , NUMBER_CONSTANT , newValues , newValues ) ;
Code	Partial newPartial = new Partial ( newValues , NUMBER_CONSTANT , newValues , newValues ) ;
Distance : 4

47
Tree	Partial iChronology = new Partial ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Code	Partial iChronology = new Partial ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Distance : 5

48
Tree	Partial newValues = new Partial ( newValues , newTypes , newValues , null ) ;
Code	Partial newValues = new Partial ( newValues , newTypes , newValues , null ) ;
Distance : 4

49
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . timeParser ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . timeParser ( iChronology ) ) ;
Distance : 9

50
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , getRight () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , getRight () ) ;
Distance : 6

51
Tree	Partial newValues = new Partial ( iChronology , new newTypes ( newValues ) ) ;
Code	Partial newValues = new Partial ( iChronology , new newTypes ( newValues ) ) ;
Distance : 7

52
Tree	Partial newPartial = new Partial ( iChronology , new newTypes ( this ) ) ;
Code	Partial newPartial = new Partial ( iChronology , new newTypes ( this ) ) ;
Distance : 6

53
Tree	Partial newPartial = new Partial ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Distance : 4

54
Tree	Partial newValues = new Partial ( this , iChronology , newValues , newValues ) ;
Code	Partial newValues = new Partial ( this , iChronology , newValues , newValues ) ;
Distance : 5

55
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getParser ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getParser ( iChronology ) ) ;
Distance : 9

56
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . createLong () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . createLong () ) ;
Distance : 9

57
Tree	Partial newValues = new Partial ( iChronology , this , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , this , newValues ) ;
Distance : 4

58
Tree	Partial newValues = new Partial ( iChronology , iChronology , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , iChronology , newValues ) ;
Distance : 4

59
Tree	Partial newPartial = new Partial ( iChronology , iChronology , newValues , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , iChronology , newValues , newValues ) ;
Distance : 4

60
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . nextInt () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . nextInt () ) ;
Distance : 9

61
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . getDefaultNumberFormat () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . getDefaultNumberFormat () ) ;
Distance : 9

62
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . getConfiguration () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . getConfiguration () ) ;
Distance : 9

63
Tree	Partial newValues = new Partial ( newValues , newValues ) ;
Code	Partial newValues = new Partial ( newValues , newValues ) ;
Distance : 4

64
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . verificationListeners () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . verificationListeners () ) ;
Distance : 9

65
Tree	Partial newValues = new Partial ( iChronology . getInstance () , newValues , newValues ) ;
Code	Partial newValues = new Partial ( iChronology . getInstance () , newValues , newValues ) ;
Distance : 6

66
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getParser () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getParser () ) ;
Distance : 8

67
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues ) ;
Distance : 3

68
Tree	Partial newValues = new Partial ( iChronology , NUMBER_CONSTANT , newValues , iChronology ) ;
Code	Partial newValues = new Partial ( iChronology , NUMBER_CONSTANT , newValues , iChronology ) ;
Distance : 4

69
Tree	Partial newValues = new Partial ( CompositeFormat , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE , false ) ;
Code	Partial newValues = new Partial ( CompositeFormat , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE , false ) ;
Distance : 4

70
Tree	Partial newValues = Partial . is ( getChronology , NUMBER_CONSTANT ) ;
Code	Partial newValues = Partial . is ( getChronology , NUMBER_CONSTANT ) ;
Distance : 7

71
Tree	Partial newValues = new Partial ( TestGJChronology , obj2.props , false ) ;
Code	Partial newValues = new Partial ( TestGJChronology , obj2.props , false ) ;
Distance : 4

72
Tree	Partial newValues = new Partial ( LanguageMode.ECMASCRIPT_NEXT , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE , false ) ;
Code	Partial newValues = new Partial ( LanguageMode.ECMASCRIPT_NEXT , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE , false ) ;
Distance : 4

73
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getRightElement ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getRightElement ( iChronology ) ) ;
Distance : 9

74
Tree	Partial newPartial = new Partial ( iChronology , iChronology , newValues , newValues , null ) ;
Code	Partial newPartial = new Partial ( iChronology , iChronology , newValues , newValues , null ) ;
Distance : 6

75
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getInstance ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getInstance ( iChronology ) ) ;
Distance : 9

76
Tree	Partial newValues = Partial . is ( LanguageMode.ECMASCRIPT_NEXT , NUMBER_CONSTANT ) ;
Code	Partial newValues = Partial . is ( LanguageMode.ECMASCRIPT_NEXT , NUMBER_CONSTANT ) ;
Distance : 7

77
Tree	Partial newValues = new Partial ( newValues , new newTypes ( this ) ) ;
Code	Partial newValues = new Partial ( newValues , new newTypes ( this ) ) ;
Distance : 7

78
Tree	Partial iChronology = new Partial ( iChronology , new newTypes ( iChronology ) ) ;
Code	Partial iChronology = new Partial ( iChronology , new newTypes ( iChronology ) ) ;
Distance : 6

79
Tree	Partial newValues = new Partial ( iChronology . IEEEremainder () , newValues , newValues ) ;
Code	Partial newValues = new Partial ( iChronology . IEEEremainder () , newValues , newValues ) ;
Distance : 6

80
Tree	Partial newValues = Partial . is ( LanguageMode.ECMASCRIPT_2016 , NUMBER_CONSTANT ) ;
Code	Partial newValues = Partial . is ( LanguageMode.ECMASCRIPT_2016 , NUMBER_CONSTANT ) ;
Distance : 7

81
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , null ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , null ) ;
Distance : 4

82
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues . of () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues . of () ) ;
Distance : 6

83
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues . of () ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues . of () ) ;
Distance : 5

84
Tree	Partial newValues = new Partial ( iChronology , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , newValues ) ;
Distance : 4

85
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of () ) ;
Distance : 8

86
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , nextInt () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , nextInt () ) ;
Distance : 6

87
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues . nextInt () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues . nextInt () ) ;
Distance : 6

88
Tree	Partial newPartial = new Partial ( iChronology , new newTypes ( iChronology ) ) ;
Code	Partial newPartial = new Partial ( iChronology , new newTypes ( iChronology ) ) ;
Distance : 5

89
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners () ) ;
Distance : 8

90
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , null ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , null ) ;
Distance : 4

91
Tree	Partial newPartial = new Partial ( CompositeFormat , obj2.props , false ) ;
Code	Partial newPartial = new Partial ( CompositeFormat , obj2.props , false ) ;
Distance : 3

92
Tree	Partial newValues = Partial . is ( hours , NUMBER_CONSTANT ) ;
Code	Partial newValues = Partial . is ( hours , NUMBER_CONSTANT ) ;
Distance : 7

93
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues , null ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues , null ) ;
Distance : 7

94
Tree	Partial newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , Verification.AT_LEAST , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Code	Partial newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , Verification.AT_LEAST , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Distance : 10

95
Tree	Partial newPartial = new Partial ( iChronology , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues ) ;
Distance : 3

96
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues . in () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues . in () ) ;
Distance : 6

97
Tree	Partial newPartial = new Partial ( iChronology , newTypes ) ;
Code	Partial newPartial = new Partial ( iChronology , newTypes ) ;
Distance : 4

98
Tree	Partial newValues = new Partial ( iChronology . getInstance () , newTypes , newValues ) ;
Code	Partial newValues = new Partial ( iChronology . getInstance () , newTypes , newValues ) ;
Distance : 7

99
Tree	Partial newValues = Partial . createLong ( getChronology , NUMBER_CONSTANT ) ;
Code	Partial newValues = Partial . createLong ( getChronology , NUMBER_CONSTANT ) ;
Distance : 7

100
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getScopeCreator ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getScopeCreator ( iChronology ) ) ;
Distance : 9

101
Tree	Partial newValues = new Partial ( hours , obj2.props , false ) ;
Code	Partial newValues = new Partial ( hours , obj2.props , false ) ;
Distance : 4

102
Tree	Partial newPartial = new Partial ( iChronology , this , iChronology ) ;
Code	Partial newPartial = new Partial ( iChronology , this , iChronology ) ;
Distance : 2

103
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues . getLeft () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues . getLeft () ) ;
Distance : 6

104
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . of ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . of ( iChronology ) ) ;
Distance : 8

105
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues ) ;
Distance : 5

106
Tree	Partial newPartial = new Partial ( iChronology , this , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , this , newValues ) ;
Distance : 3

107
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getBytes ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getBytes ( iChronology ) ) ;
Distance : 9

108
Tree	Partial iChronology = new Partial ( iChronology , newValues , newValues , null ) ;
Code	Partial iChronology = new Partial ( iChronology , newValues , newValues , null ) ;
Distance : 5

109
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . verificationListeners ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . verificationListeners ( iChronology ) ) ;
Distance : 8

110
Tree	Partial newValues = Partial . hasDuplicateDeclarationSuppression ( getChronology , NUMBER_CONSTANT ) ;
Code	Partial newValues = Partial . hasDuplicateDeclarationSuppression ( getChronology , NUMBER_CONSTANT ) ;
Distance : 7

111
Tree	Partial newValues = new Partial ( this , iChronology , iChronology , newValues ) ;
Code	Partial newValues = new Partial ( this , iChronology , iChronology , newValues ) ;
Distance : 5

112
Tree	Partial newValues = Partial . forName ( getChronology , NUMBER_CONSTANT ) ;
Code	Partial newValues = Partial . forName ( getChronology , NUMBER_CONSTANT ) ;
Distance : 7

113
Tree	Partial newPartial = new Partial ( iChronology , newTypes , newValues , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , newTypes , newValues , newValues ) ;
Distance : 3

114
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . of () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . of () ) ;
Distance : 9

115
Tree	Partial newValues = new Partial ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Distance : 5

116
Tree	Partial newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , TextAnchor.CENTER ) ;
Code	Partial newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , TextAnchor.CENTER ) ;
Distance : 10

117
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getBytes () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getBytes () ) ;
Distance : 8

118
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues ) ;
Distance : 4

119
Tree	Partial newValues = new Partial ( iChronology , iChronology , newValues , null ) ;
Code	Partial newValues = new Partial ( iChronology , iChronology , newValues , null ) ;
Distance : 5

120
Tree	Partial newPartial = new Partial ( this , newValues , newValues , newValues ) ;
Code	Partial newPartial = new Partial ( this , newValues , newValues , newValues ) ;
Distance : 4

121
Tree	Partial newPartial = new Partial ( iChronology , iChronology ) ;
Code	Partial newPartial = new Partial ( iChronology , iChronology ) ;
Distance : 3

122
Tree	Partial newValues = new Partial ( this , newValues , newValues , newValues ) ;
Code	Partial newValues = new Partial ( this , newValues , newValues , newValues ) ;
Distance : 5

123
Tree	Partial newValues = new Partial ( iChronology , newValues , iChronology , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , iChronology , newValues ) ;
Distance : 4

124
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues . createLong () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues . createLong () ) ;
Distance : 6

125
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , iChronology ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , iChronology ) ;
Distance : 4

126
Tree	Partial newValues = new Partial ( newValues , new newTypes ( iChronology ) ) ;
Code	Partial newValues = new Partial ( newValues , new newTypes ( iChronology ) ) ;
Distance : 6

127
Tree	Partial iChronology = new Partial ( iChronology , this , newValues ) ;
Code	Partial iChronology = new Partial ( iChronology , this , newValues ) ;
Distance : 4

128
Tree	Partial newValues = new Partial ( newValues , newValues , newValues , null ) ;
Code	Partial newValues = new Partial ( newValues , newValues , newValues , null ) ;
Distance : 5

129
Tree	Partial newValues = new Partial ( iChronology , newValues , iChronology , newValues , null ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , iChronology , newValues , null ) ;
Distance : 6

130
Tree	Partial newPartial = new Partial ( iChronology , new newTypes ( newValues ) ) ;
Code	Partial newPartial = new Partial ( iChronology , new newTypes ( newValues ) ) ;
Distance : 6

131
Tree	Partial newValues = new Partial ( newValues , newTypes ) ;
Code	Partial newValues = new Partial ( newValues , newTypes ) ;
Distance : 4

132
Tree	Partial iChronology = new Partial ( iChronology , newValues ) ;
Code	Partial iChronology = new Partial ( iChronology , newValues ) ;
Distance : 4

133
Tree	Partial newValues = new Partial ( iChronology , new newTypes ( this ) ) ;
Code	Partial newValues = new Partial ( iChronology , new newTypes ( this ) ) ;
Distance : 7

134
Tree	Partial newValues = new Partial ( iChronology , new newTypes ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , new newTypes ( iChronology ) ) ;
Distance : 6

135
Tree	Partial newValues = new Partial ( iChronology , new newTypes ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , new newTypes ( iChronology ) ) ;
Distance : 6

136
Tree	Partial newPartial = new Partial ( iChronology , new newTypes ( this ) ) ;
Code	Partial newPartial = new Partial ( iChronology , new newTypes ( this ) ) ;
Distance : 6

137
Tree	Partial newValues = new Partial ( newValues , newValues , newValues ) ;
Code	Partial newValues = new Partial ( newValues , newValues , newValues ) ;
Distance : 3

138
Tree	Partial newPartial = new Partial ( newValues , newValues ) ;
Code	Partial newPartial = new Partial ( newValues , newValues ) ;
Distance : 3

139
Tree	Partial newValues = Partial . createLong ( LanguageMode.ECMASCRIPT_NEXT , NUMBER_CONSTANT ) ;
Code	Partial newValues = Partial . createLong ( LanguageMode.ECMASCRIPT_NEXT , NUMBER_CONSTANT ) ;
Distance : 7

140
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues . verificationListeners () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues . verificationListeners () ) ;
Distance : 6

141
Tree	Partial newPartial = new Partial ( iChronology , new newTypes ( iChronology ) ) ;
Code	Partial newPartial = new Partial ( iChronology , new newTypes ( iChronology ) ) ;
Distance : 5

142
Tree	Partial newPartial = new Partial ( iChronology , newTypes , newValues , newValues , null ) ;
Code	Partial newPartial = new Partial ( iChronology , newTypes , newValues , newValues , null ) ;
Distance : 5

143
Tree	Partial newValues = new Partial ( iChronology , newValues , iChronology , null ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , iChronology , null ) ;
Distance : 4

144
Tree	Partial iChronology = new Partial ( newValues , new newTypes ( this ) ) ;
Code	Partial iChronology = new Partial ( newValues , new newTypes ( this ) ) ;
Distance : 7

145
Tree	Partial newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , newValues ) ;
Code	Partial newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , newValues ) ;
Distance : 10

146
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , iChronology , null ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , iChronology , null ) ;
Distance : 6

147
Tree	Partial newValues = new Partial ( newValues , newValues , newValues , newValues ) ;
Code	Partial newValues = new Partial ( newValues , newValues , newValues , newValues ) ;
Distance : 5

148
Tree	Partial newPartial = new Partial ( newValues , new newTypes ( iChronology ) ) ;
Code	Partial newPartial = new Partial ( newValues , new newTypes ( iChronology ) ) ;
Distance : 5

149
Tree	Partial iChronology = new Partial ( iChronology , new newTypes ( this ) ) ;
Code	Partial iChronology = new Partial ( iChronology , new newTypes ( this ) ) ;
Distance : 7

150
Tree	Partial newValues = new Partial ( newValues , newValues , newValues , newValues , null ) ;
Code	Partial newValues = new Partial ( newValues , newValues , newValues , newValues , null ) ;
Distance : 7

151
Tree	Partial iChronology = new Partial ( iChronology , new newTypes ( this ) ) ;
Code	Partial iChronology = new Partial ( iChronology , new newTypes ( this ) ) ;
Distance : 7

152
Tree	Partial newValues = new Partial ( iChronology , new newTypes ( this ) ) ; wanted
Code	Partial newValues = new Partial ( iChronology , new newTypes ( this ) ) ; wanted
Distance : 8

153
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , iChronology , null ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , iChronology , null ) ;
Distance : 5

154
Tree	Partial newPartial = new Partial ( NUMBER_CONSTANT , iChronology . of () ) ;
Code	Partial newPartial = new Partial ( NUMBER_CONSTANT , iChronology . of () ) ;
Distance : 5

155
Tree	Partial newValues = Partial . hasDuplicateDeclarationSuppression ( LanguageMode.ECMASCRIPT_NEXT , NUMBER_CONSTANT ) ;
Code	Partial newValues = Partial . hasDuplicateDeclarationSuppression ( LanguageMode.ECMASCRIPT_NEXT , NUMBER_CONSTANT ) ;
Distance : 7

156
Tree	Partial newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , textLength ) ;
Code	Partial newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , textLength ) ;
Distance : 10

157
Tree	Partial newValues = new Partial ( newValues , NUMBER_CONSTANT , newValues , newValues ) ;
Code	Partial newValues = new Partial ( newValues , NUMBER_CONSTANT , newValues , newValues ) ;
Distance : 5

158
Tree	Partial newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , TimeUnit.SECONDS ) ;
Code	Partial newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 10

159
Tree	Partial newValues = new Partial ( iChronology , this , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , this , newValues ) ;
Distance : 4

160
Tree	Partial newValues = new Partial ( this , iChronology , newValues , newValues ) ;
Code	Partial newValues = new Partial ( this , iChronology , newValues , newValues ) ;
Distance : 5

161
Tree	Partial newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Code	Partial newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Distance : 10

162
Tree	Partial newPartial = new Partial ( NUMBER_CONSTANT , iChronology . valueOf () ) ;
Code	Partial newPartial = new Partial ( NUMBER_CONSTANT , iChronology . valueOf () ) ;
Distance : 5

163
Tree	Partial newValues = new Partial ( CompositeFormat , obj2.props , false ) ;
Code	Partial newValues = new Partial ( CompositeFormat , obj2.props , false ) ;
Distance : 4

164
Tree	Partial newValues = new Partial ( NUMBER_CONSTANT , iChronology . createLong () ) ;
Code	Partial newValues = new Partial ( NUMBER_CONSTANT , iChronology . createLong () ) ;
Distance : 6

165
Tree	Partial newValues = new Partial ( NUMBER_CONSTANT , iChronology . getMillis () ) ;
Code	Partial newValues = new Partial ( NUMBER_CONSTANT , iChronology . getMillis () ) ;
Distance : 6

166
Tree	Partial newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , NewTypeInference.NULLABLE_DEREFERENCE ) ;
Code	Partial newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , NewTypeInference.NULLABLE_DEREFERENCE ) ;
Distance : 10

167
Tree	Partial newValues = Partial . forName ( LanguageMode.ECMASCRIPT_NEXT , NUMBER_CONSTANT ) ;
Code	Partial newValues = Partial . forName ( LanguageMode.ECMASCRIPT_NEXT , NUMBER_CONSTANT ) ;
Distance : 7

168
Tree	Partial newValues = new Partial ( iChronology . copySelf () , newTypes , newValues ) ;
Code	Partial newValues = new Partial ( iChronology . copySelf () , newTypes , newValues ) ;
Distance : 7

169
Tree	Partial newValues = new Partial ( LanguageMode.ECMASCRIPT_NEXT , obj2.props , false ) ;
Code	Partial newValues = new Partial ( LanguageMode.ECMASCRIPT_NEXT , obj2.props , false ) ;
Distance : 4

170
Tree	Partial newValues = new Partial ( NUMBER_CONSTANT , iChronology . of () ) ;
Code	Partial newValues = new Partial ( NUMBER_CONSTANT , iChronology . of () ) ;
Distance : 6

171
Tree	Partial newValues = new Partial ( NUMBER_CONSTANT , iChronology . nextInt () ) ;
Code	Partial newValues = new Partial ( NUMBER_CONSTANT , iChronology . nextInt () ) ;
Distance : 6

172
Tree	Partial newValues = new Partial ( NUMBER_CONSTANT , iChronology . valueOf () ) ;
Code	Partial newValues = new Partial ( NUMBER_CONSTANT , iChronology . valueOf () ) ;
Distance : 6

173
Tree	Partial newValues = new Partial ( getChronology , obj2.props , false ) ;
Code	Partial newValues = new Partial ( getChronology , obj2.props , false ) ;
Distance : 4

174
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . verificationListeners () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . verificationListeners () ) ;
Distance : 7

175
Tree	Partial newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , TimeUnit.SECONDS , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Code	Partial newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , TimeUnit.SECONDS , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Distance : 10

176
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , createLong () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , createLong () ) ;
Distance : 6

177
Tree	Partial newValues = new Partial ( iChronology , this , iChronology ) ;
Code	Partial newValues = new Partial ( iChronology , this , iChronology ) ;
Distance : 3

178
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , in () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , in () ) ;
Distance : 5

179
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , getRightElement () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , getRightElement () ) ;
Distance : 6

180
Tree	Partial newValues = new Partial ( newValues , this , newValues ) ;
Code	Partial newValues = new Partial ( newValues , this , newValues ) ;
Distance : 4

181
Tree	Partial newValues = new Partial ( LanguageMode.ECMASCRIPT_2016 , obj2.props , false ) ;
Code	Partial newValues = new Partial ( LanguageMode.ECMASCRIPT_2016 , obj2.props , false ) ;
Distance : 4

182
Tree	Partial newPartial = new Partial ( iChronology , newTypes , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , newTypes , newValues ) ;
Distance : 3

183
Tree	Partial newPartial = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Code	Partial newPartial = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Distance : 9

184
Tree	Partial newValues = new Partial ( iChronology , new newTypes ( this ) ) ;
Code	Partial newValues = new Partial ( iChronology , new newTypes ( this ) ) ;
Distance : 7

185
Tree	Partial newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , Verification.AT_LEAST ) ;
Code	Partial newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , Verification.AT_LEAST ) ;
Distance : 10

186
Tree	Partial newValues = new Partial ( NUMBER_CONSTANT , iChronology . getRightElement () ) ;
Code	Partial newValues = new Partial ( NUMBER_CONSTANT , iChronology . getRightElement () ) ;
Distance : 6

187
Tree	Partial newValues = new Partial ( iChronology . getInstance () , iChronology , newValues ) ;
Code	Partial newValues = new Partial ( iChronology . getInstance () , iChronology , newValues ) ;
Distance : 7

188
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues . of () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues . of () ) ;
Distance : 6

189
Tree	Partial newValues = new Partial ( selectChronology , obj2.props , false ) ;
Code	Partial newValues = new Partial ( selectChronology , obj2.props , false ) ;
Distance : 4

190
Tree	Partial newValues = new Partial ( iChronology , iChronology , newValues , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , iChronology , newValues , newValues ) ;
Distance : 5

191
Tree	Partial newValues = new Partial ( iChronology , newValues , iChronology ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , iChronology ) ;
Distance : 2

192
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , this . iChronology . of () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , this . iChronology . of () ) ;
Distance : 8

193
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , this . iChronology . of () ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , this . iChronology . of () ) ;
Distance : 8

194
Tree	Partial newPartial = new Partial ( iChronology , iChronology , newValues , null ) ;
Code	Partial newPartial = new Partial ( iChronology , iChronology , newValues , null ) ;
Distance : 4

195
Tree	Partial newValues = new Partial ( iChronology , iChronology , newValues , newValues , null ) ;
Code	Partial newValues = new Partial ( iChronology , iChronology , newValues , newValues , null ) ;
Distance : 7

196
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . valueOf () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . valueOf () ) ;
Distance : 9

197
Tree	Partial newValues = new Partial ( newValues , newTypes , newValues ) ;
Code	Partial newValues = new Partial ( newValues , newTypes , newValues ) ;
Distance : 4

198
Tree	Partial iChronology = new Partial ( iChronology , newValues , newValues ) ;
Code	Partial iChronology = new Partial ( iChronology , newValues , newValues ) ;
Distance : 3

199
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . getRightElement () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . getRightElement () ) ;
Distance : 9

========================================================================


