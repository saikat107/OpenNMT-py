========================================================================
Example Number: 1
Parent Code is: 
( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
-------------------------------------------------------------------------------
Child code is: 
( int ) ( ( v - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (11 (214{val=(}) (39{val=int}) (215{val=)}) (36 (214{val=(}) (27 (27 (36 (214{val=(}) (27 (800{val=value}) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)})) (203{val=/}) (36 (214{val=(}) (27 (22 (315{val=this}) (235{val=.}) (800{val=upperBound})) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)}))) (202{val=*}) (34{val=NUMBER_CONSTANT})) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (11 (214{val=(}) (39{val=int}) (215{val=)}) (36 (214{val=(}) (27 (27 (36 (214{val=(}) (27 (800{val=v}) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)})) (203{val=/}) (36 (214{val=(}) (27 (22 (315{val=this}) (235{val=.}) (800{val=upperBound})) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)}))) (202{val=*}) (34{val=NUMBER_CONSTANT})) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/24/parent/source_org_jfree_chart_renderer_GrayPaintScale.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 30
Wrong
========================================================================
False

0
Tree	(
Code	(
Distance : 23

1
Tree	compiler
Code	compiler
Distance : 24

2
Tree	null
Code	null
Distance : 24

3
Tree	( value / value - / )
Code	( value / value - / )
Distance : 20

4
Tree	( min / value - / )
Code	( min / value - / )
Distance : 20

5
Tree	( Math / value - / )
Code	( Math / value - / )
Distance : 20

6
Tree	NUMBER_CONSTANT
Code	NUMBER_CONSTANT
Distance : 23

7
Tree	( value / Math - / )
Code	( value / Math - / )
Distance : 20

8
Tree	( max / value - / )
Code	( max / value - / )
Distance : 20

9
Tree	( v / value - / )
Code	( v / value - / )
Distance : 19

10
Tree	new
Code	new
Distance : 24

11
Tree	STRING_CONSTANT
Code	STRING_CONSTANT
Distance : 24

12
Tree	( int ) ( ( value - this . lowerBound ) / ( this . g - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . g - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

13
Tree	Math
Code	Math
Distance : 24

14
Tree	SimpleDependencyInfo
Code	SimpleDependencyInfo
Distance : 24

15
Tree	( double ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( double ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

16
Tree	( int ) ( ( v - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( v - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 1

17
Tree	( int ) ( ( value - this . lowerBound ) / ( this . Color - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . Color - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

18
Tree	( int ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

19
Tree	( int ) ( ( value - this . lowerBound ) / ( this . v - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . v - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

20
Tree	( int ) ( ( value - this . lowerBound ) / ( this . max - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . max - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

21
Tree	( int ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

22
Tree	( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 1

23
Tree	==
Code	==
Distance : 24

24
Tree	( value / value - /= )
Code	( value / value - /= )
Distance : 20

25
Tree	( value / min - / )
Code	( value / min - / )
Distance : 20

26
Tree	preloadEs6RuntimeFunction
Code	preloadEs6RuntimeFunction
Distance : 24

27
Tree	( value / max - / )
Code	( value / max - / )
Distance : 20

28
Tree	( value / v - / )
Code	( value / v - / )
Distance : 19

29
Tree	( int ) ( ( value - this . lowerBound ) / ( this . Math - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . Math - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

========================================================================


========================================================================
Example Number: 2
Parent Code is: 
{ super ( paint , stroke , paint , stroke , alpha ) ; this . value = value ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( paint , stroke , outlinePaint , outlineStroke , alpha ) ; this . value = value ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=alpha}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=value})) (204{val==}) (800{val=value})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=outlinePaint}) (234{val=,}) (800{val=outlineStroke}) (234{val=,}) (800{val=alpha}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=value})) (204{val==}) (800{val=value})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/20/parent/source_org_jfree_chart_plot_ValueMarker.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super ( alpha , stroke ) ; this . value = value ; }
Code	{ super ( alpha , stroke ) ; this . value = value ; }
Distance : 7

1
Tree	{ super ( stroke , stroke , paint , alpha ) ; this . value = value ; }
Code	{ super ( stroke , stroke , paint , alpha ) ; this . value = value ; }
Distance : 4

2
Tree	{ super ( stroke , stroke ) ; }
Code	{ super ( stroke , stroke ) ; }
Distance : 13

3
Tree	{ super ( paint , stroke , paint ) ; this . value = new short [] { value } ; }
Code	{ super ( paint , stroke , paint ) ; this . value = new short [] { value } ; }
Distance : 10

4
Tree	{ super ( paint , stroke ) ; this . value = new short [] { value } ; }
Code	{ super ( paint , stroke ) ; this . value = new short [] { value } ; }
Distance : 11

5
Tree	{ super ( value ) ; this . value = value ; }
Code	{ super ( value ) ; this . value = value ; }
Distance : 9

6
Tree	{ super ( paint , stroke ) ; this . value = new byte [] { value } ; }
Code	{ super ( paint , stroke ) ; this . value = new byte [] { value } ; }
Distance : 11

7
Tree	{ super ( null , stroke , paint , alpha , stroke , alpha ) ; this . value = value ; }
Code	{ super ( null , stroke , paint , alpha , stroke , alpha ) ; this . value = value ; }
Distance : 5

8
Tree	{ super ( outlineStroke , stroke , paint , alpha ) ; this . value = new double [] { value } ; }
Code	{ super ( outlineStroke , stroke , paint , alpha ) ; this . value = new double [] { value } ; }
Distance : 9

9
Tree	{ super ( paint , stroke , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , stroke , stroke ) ; this . value = new double [] { value } ; }
Distance : 10

10
Tree	{ super ( null , stroke , paint , stroke , alpha , alpha ) ; this . value = value ; }
Code	{ super ( null , stroke , paint , stroke , alpha , alpha ) ; this . value = value ; }
Distance : 5

11
Tree	{ super ( outlineStroke ) ; this . value = value . value () ; }
Code	{ super ( outlineStroke ) ; this . value = value . value () ; }
Distance : 11

12
Tree	{ super ( paint , alpha ) ; this . value = value ; }
Code	{ super ( paint , alpha ) ; this . value = value ; }
Distance : 6

13
Tree	{ super ( alpha , stroke , paint ) ; this . value = value ; }
Code	{ super ( alpha , stroke , paint ) ; this . value = value ; }
Distance : 6

14
Tree	{ super ( paint ) ; this . value = value ; }
Code	{ super ( paint ) ; this . value = value ; }
Distance : 8

15
Tree	{ super ( stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( stroke ) ; this . value = new double [] { value } ; }
Distance : 13

16
Tree	{ super ( paint , stroke ) ; this . value = value ; }
Code	{ super ( paint , stroke ) ; this . value = value ; }
Distance : 6

17
Tree	{ super ( outlineStroke , stroke , paint ) ; this . value = value . value () ; }
Code	{ super ( outlineStroke , stroke , paint ) ; this . value = value . value () ; }
Distance : 9

18
Tree	{ super ( alpha , stroke , paint , alpha ) ; this . value = value ; }
Code	{ super ( alpha , stroke , paint , alpha ) ; this . value = value ; }
Distance : 4

19
Tree	{ super ( paint , stroke , paint ) ; this . value = value ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value ; }
Distance : 5

20
Tree	{ super ( paint ) ; this . value = paint ( value ) ; }
Code	{ super ( paint ) ; this . value = paint ( value ) ; }
Distance : 11

21
Tree	{ super ( paint ) ; this . value = value ; synchronized }
Code	{ super ( paint ) ; this . value = value ; synchronized }
Distance : 9

22
Tree	{ super ( paint ) ; this . value = new short [] { value } ; }
Code	{ super ( paint ) ; this . value = new short [] { value } ; }
Distance : 13

23
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = value ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = value ; }
Distance : 3

24
Tree	{ super ( paint ) ; this . value = new double [] { value } ; }
Code	{ super ( paint ) ; this . value = new double [] { value } ; }
Distance : 13

25
Tree	{ super ( Paint ) ; this . value = value . value () ; }
Code	{ super ( Paint ) ; this . value = value . value () ; }
Distance : 12

26
Tree	{ super ( paint , stroke ) ; this . value = new float [] { value } ; }
Code	{ super ( paint , stroke ) ; this . value = new float [] { value } ; }
Distance : 11

27
Tree	{ super ( paint , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , stroke ) ; this . value = new double [] { value } ; }
Distance : 11

28
Tree	{ super ( alpha ) ; this . value = new double [] { value } ; }
Code	{ super ( alpha ) ; this . value = new double [] { value } ; }
Distance : 13

29
Tree	{ super ( paint ? stroke : paint ) ; this . value = value ; }
Code	{ super ( paint ? stroke : paint ) ; this . value = value ; }
Distance : 7

30
Tree	{ super ( paint , stroke , paint ) ; this . value = value ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value ; }
Distance : 5

31
Tree	{ super ( Paint , stroke , paint , alpha ) ; this . value = value ; }
Code	{ super ( Paint , stroke , paint , alpha ) ; this . value = value ; }
Distance : 4

32
Tree	{ super ( paint ) ; this . value = value ; for }
Code	{ super ( paint ) ; this . value = value ; for }
Distance : 9

33
Tree	{ super ( stroke , stroke ) ; this . value = value . value () ; }
Code	{ super ( stroke , stroke ) ; this . value = value . value () ; }
Distance : 10

34
Tree	{ super ( outlineStroke , stroke , paint ) ; this . value = value ; }
Code	{ super ( outlineStroke , stroke , paint ) ; this . value = value ; }
Distance : 6

35
Tree	{ super ( paint ) ; this . value = value ; this }
Code	{ super ( paint ) ; this . value = value ; this }
Distance : 9

36
Tree	{ super ( alpha , stroke ) ; }
Code	{ super ( alpha , stroke ) ; }
Distance : 13

37
Tree	{ super ( value , stroke , paint ) ; this . value = value ; }
Code	{ super ( value , stroke , paint ) ; this . value = value ; }
Distance : 6

38
Tree	{ super ( value , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( value , stroke ) ; this . value = new double [] { value } ; }
Distance : 12

39
Tree	{ super ( stroke , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( stroke , stroke ) ; this . value = new double [] { value } ; }
Distance : 12

40
Tree	{ super ( Paint , stroke , paint ) ; this . value = new double [] { value } ; }
Code	{ super ( Paint , stroke , paint ) ; this . value = new double [] { value } ; }
Distance : 11

41
Tree	{ super ( paint ) ; this . value = value ; fireChangeEvent }
Code	{ super ( paint ) ; this . value = value ; fireChangeEvent }
Distance : 9

42
Tree	{ super ( alpha , stroke , paint , alpha ) ; this . value = new double [] { value } ; }
Code	{ super ( alpha , stroke , paint , alpha ) ; this . value = new double [] { value } ; }
Distance : 9

43
Tree	{ super ( outlineStroke , stroke ) ; }
Code	{ super ( outlineStroke , stroke ) ; }
Distance : 13

44
Tree	{ super ( alpha , stroke , paint ) ; this . value = value . value () ; }
Code	{ super ( alpha , stroke , paint ) ; this . value = value . value () ; }
Distance : 9

45
Tree	{ super ( paint , alpha , paint ) ; this . value = value ; }
Code	{ super ( paint , alpha , paint ) ; this . value = value ; }
Distance : 6

46
Tree	{ super ( alpha , stroke , paint , alpha ) ; this . value = value . value () ; }
Code	{ super ( alpha , stroke , paint , alpha ) ; this . value = value . value () ; }
Distance : 7

47
Tree	{ super ( paint , stroke , paint ) ; this . value = new int [] { value } ; }
Code	{ super ( paint , stroke , paint ) ; this . value = new int [] { value } ; }
Distance : 10

48
Tree	{ super ( paint , stroke , stroke , alpha ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , stroke , stroke , alpha ) ; this . value = new double [] { value } ; }
Distance : 8

49
Tree	{ super ( value ) ; this . value = value . value () ; }
Code	{ super ( value ) ; this . value = value . value () ; }
Distance : 12

50
Tree	{ super ( outlineStroke ) ; this . value = value ; }
Code	{ super ( outlineStroke ) ; this . value = value ; }
Distance : 8

51
Tree	{ super ( paint , stroke , paint ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , stroke , paint ) ; this . value = new double [] { value } ; }
Distance : 10

52
Tree	{ super ( paint ) ; this . value = value . value () ; }
Code	{ super ( paint ) ; this . value = value . value () ; }
Distance : 11

53
Tree	{ super ( stroke , stroke , paint , alpha ) ; this . value = new double [] { value } ; }
Code	{ super ( stroke , stroke , paint , alpha ) ; this . value = new double [] { value } ; }
Distance : 9

54
Tree	{ super ( paint , stroke ) ; }
Code	{ super ( paint , stroke ) ; }
Distance : 12

55
Tree	{ super ( paint , stroke ) ; this . value = value ; }
Code	{ super ( paint , stroke ) ; this . value = value ; }
Distance : 6

56
Tree	{ super ( outlineStroke , stroke , paint ) ; this . value = value ; }
Code	{ super ( outlineStroke , stroke , paint ) ; this . value = value ; }
Distance : 6

57
Tree	{ super ( Paint , stroke ) ; this . value = value ; }
Code	{ super ( Paint , stroke ) ; this . value = value ; }
Distance : 7

58
Tree	{ super ( alpha , stroke , paint ) ; this . value = new double [] { value } ; }
Code	{ super ( alpha , stroke , paint ) ; this . value = new double [] { value } ; }
Distance : 11

59
Tree	{ super ( paint , stroke , alpha ) ; this . value = value ; }
Code	{ super ( paint , stroke , alpha ) ; this . value = value ; }
Distance : 4

60
Tree	{ super ( paint , stroke , Paint ) ; this . value = value ; }
Code	{ super ( paint , stroke , Paint ) ; this . value = value ; }
Distance : 5

61
Tree	{ super ( paint ) ; this . value = value ; private }
Code	{ super ( paint ) ; this . value = value ; private }
Distance : 9

62
Tree	{ super ( paint , stroke , stroke ) ; this . value = value ; }
Code	{ super ( paint , stroke , stroke ) ; this . value = value ; }
Distance : 5

63
Tree	{ super ( paint , stroke ) ; this . value = new int [] { value } ; }
Code	{ super ( paint , stroke ) ; this . value = new int [] { value } ; }
Distance : 11

64
Tree	{ super ( Paint ) ; this . value = new double [] { value } ; }
Code	{ super ( Paint ) ; this . value = new double [] { value } ; }
Distance : 14

65
Tree	{ super ( outlineStroke , stroke , paint , alpha ) ; this . value = value ; }
Code	{ super ( outlineStroke , stroke , paint , alpha ) ; this . value = value ; }
Distance : 4

66
Tree	{ super ( paint ) ; this . value = alpha ; }
Code	{ super ( paint ) ; this . value = alpha ; }
Distance : 9

67
Tree	{ super ( paint , stroke , paint , stroke ) ; this . value = value . value () ; }
Code	{ super ( paint , stroke , paint , stroke ) ; this . value = value . value () ; }
Distance : 7

68
Tree	{ super ( outlineStroke , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( outlineStroke , stroke ) ; this . value = new double [] { value } ; }
Distance : 12

69
Tree	{ super ( paint , stroke , paint , paint ) ; this . value = value ; }
Code	{ super ( paint , stroke , paint , paint ) ; this . value = value ; }
Distance : 4

70
Tree	{ super ( paint , stroke , paint , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , stroke , paint , stroke ) ; this . value = new double [] { value } ; }
Distance : 9

71
Tree	{ super ( paint ) ; this . value = value ; ++ }
Code	{ super ( paint ) ; this . value = value ; ++ }
Distance : 9

72
Tree	{ super ( Stroke ) ; this . value = value ; }
Code	{ super ( Stroke ) ; this . value = value ; }
Distance : 9

73
Tree	{ super ( Paint , stroke , paint ) ; this . value = value ; }
Code	{ super ( Paint , stroke , paint ) ; this . value = value ; }
Distance : 6

74
Tree	{ super ( outlineStroke , stroke ) ; this . value = value ; }
Code	{ super ( outlineStroke , stroke ) ; this . value = value ; }
Distance : 7

75
Tree	{ super ( outlinePaint ) ; this . value = value ; }
Code	{ super ( outlinePaint ) ; this . value = value ; }
Distance : 8

76
Tree	{ super ( Paint ) ; this . value = value ; }
Code	{ super ( Paint ) ; this . value = value ; }
Distance : 9

77
Tree	{ super ( paint , stroke , paint ) ; this . value = new float [] { value } ; }
Code	{ super ( paint , stroke , paint ) ; this . value = new float [] { value } ; }
Distance : 10

78
Tree	{ super ( value , stroke , paint , alpha ) ; this . value = value ; }
Code	{ super ( value , stroke , paint , alpha ) ; this . value = value ; }
Distance : 4

79
Tree	{ super ( outlineStroke , stroke , paint ) ; this . value = new double [] { value } ; }
Code	{ super ( outlineStroke , stroke , paint ) ; this . value = new double [] { value } ; }
Distance : 11

80
Tree	{ super ( stroke , stroke , paint ) ; this . value = new double [] { value } ; }
Code	{ super ( stroke , stroke , paint ) ; this . value = new double [] { value } ; }
Distance : 11

81
Tree	{ super ( stroke , stroke ) ; this . value = value ; }
Code	{ super ( stroke , stroke ) ; this . value = value ; }
Distance : 7

82
Tree	{ super ( outlineStroke ) ; this . value = new double [] { value } ; }
Code	{ super ( outlineStroke ) ; this . value = new double [] { value } ; }
Distance : 13

83
Tree	{ super ( Paint , stroke ) ; this . value = value . value () ; }
Code	{ super ( Paint , stroke ) ; this . value = value . value () ; }
Distance : 10

84
Tree	{ super ( stroke , stroke , paint ) ; this . value = value . value () ; }
Code	{ super ( stroke , stroke , paint ) ; this . value = value . value () ; }
Distance : 9

85
Tree	{ super ( null , stroke , stroke , alpha , alpha , alpha ) ; this . value = value ; }
Code	{ super ( null , stroke , stroke , alpha , alpha , alpha ) ; this . value = value ; }
Distance : 5

86
Tree	{ super ( Stroke , stroke ) ; this . value = value ; }
Code	{ super ( Stroke , stroke ) ; this . value = value ; }
Distance : 7

87
Tree	{ super ( value ) ; this . value = new double [] { value } ; }
Code	{ super ( value ) ; this . value = new double [] { value } ; }
Distance : 14

88
Tree	{ super ( alpha , stroke ) ; this . value = value . value () ; }
Code	{ super ( alpha , stroke ) ; this . value = value . value () ; }
Distance : 10

89
Tree	{ super ( paint ) ; this . value = new byte [] { value } ; }
Code	{ super ( paint ) ; this . value = new byte [] { value } ; }
Distance : 13

90
Tree	{ super ( outlinePaint , stroke ) ; this . value = value . value () ; }
Code	{ super ( outlinePaint , stroke ) ; this . value = value . value () ; }
Distance : 10

91
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = stroke ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = stroke ; }
Distance : 9

92
Tree	{ super ( paint ? stroke : alpha ) ; this . value = value ; }
Code	{ super ( paint ? stroke : alpha ) ; this . value = value ; }
Distance : 6

93
Tree	{ super ( value , stroke ) ; this . value = value ; }
Code	{ super ( value , stroke ) ; this . value = value ; }
Distance : 7

94
Tree	{ super ( paint ) ; this . stroke = value ; }
Code	{ super ( paint ) ; this . stroke = value ; }
Distance : 9

95
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = new double [] { value } ; }
Distance : 8

96
Tree	{ super ( alpha ) ; this . value = value . value () ; }
Code	{ super ( alpha ) ; this . value = value . value () ; }
Distance : 11

97
Tree	{ super ( paint , stroke , paint ) ; this . value = new byte [] { value } ; }
Code	{ super ( paint , stroke , paint ) ; this . value = new byte [] { value } ; }
Distance : 10

98
Tree	{ super ( alpha , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( alpha , stroke ) ; this . value = new double [] { value } ; }
Distance : 12

99
Tree	{ super ( Paint , stroke ) ; }
Code	{ super ( Paint , stroke ) ; }
Distance : 13

100
Tree	{ super ( paint , stroke , alpha ) ; this . value = value . value () ; }
Code	{ super ( paint , stroke , alpha ) ; this . value = value . value () ; }
Distance : 7

101
Tree	{ super ( Paint , stroke , paint ) ; this . value = value . value () ; }
Code	{ super ( Paint , stroke , paint ) ; this . value = value . value () ; }
Distance : 9

102
Tree	{ super ( Stroke , stroke ) ; this . value = value ; }
Code	{ super ( Stroke , stroke ) ; this . value = value ; }
Distance : 7

103
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = new byte [] { value } ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = new byte [] { value } ; }
Distance : 8

104
Tree	{ super ( stroke , stroke ) ; this . value = value ; }
Code	{ super ( stroke , stroke ) ; this . value = value ; }
Distance : 7

105
Tree	{ super ( paint ) ; this . value = value ; super }
Code	{ super ( paint ) ; this . value = value ; super }
Distance : 9

106
Tree	{ super ( Paint , stroke , paint ) ; this . value = value ; }
Code	{ super ( Paint , stroke , paint ) ; this . value = value ; }
Distance : 6

107
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = new short [] { value } ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = new short [] { value } ; }
Distance : 8

108
Tree	{ super ( paint , stroke , Paint ) ; this . value = value . value () ; }
Code	{ super ( paint , stroke , Paint ) ; this . value = value . value () ; }
Distance : 8

109
Tree	{ super ( paint , stroke ) ; this . stroke = value ; }
Code	{ super ( paint , stroke ) ; this . stroke = value ; }
Distance : 7

110
Tree	{ super ( Paint , stroke , paint , alpha ) ; this . value = new double [] { value } ; }
Code	{ super ( Paint , stroke , paint , alpha ) ; this . value = new double [] { value } ; }
Distance : 9

111
Tree	{ super ( null , stroke , paint , alpha , alpha , outlineStroke ) ; this . value = value ; }
Code	{ super ( null , stroke , paint , alpha , alpha , outlineStroke ) ; this . value = value ; }
Distance : 5

112
Tree	{ super ( stroke , stroke , paint ) ; this . value = value ; }
Code	{ super ( stroke , stroke , paint ) ; this . value = value ; }
Distance : 6

113
Tree	{ super ( alpha ? stroke : paint ) ; this . value = value ; }
Code	{ super ( alpha ? stroke : paint ) ; this . value = value ; }
Distance : 8

114
Tree	{ super ( null , stroke , paint , alpha , alpha , paint ) ; this . value = value ; }
Code	{ super ( null , stroke , paint , alpha , alpha , paint ) ; this . value = value ; }
Distance : 5

115
Tree	{ super ( paint ) ; this . stroke = value . value () ; }
Code	{ super ( paint ) ; this . stroke = value . value () ; }
Distance : 12

116
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = value ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = value ; }
Distance : 8

117
Tree	{ super ( paint ) ; this . value = alpha ( value ) ; }
Code	{ super ( paint ) ; this . value = alpha ( value ) ; }
Distance : 11

118
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = new int [] { value } ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = new int [] { value } ; }
Distance : 8

119
Tree	{ super ( Paint , stroke , paint , alpha ) ; this . value = value . value () ; }
Code	{ super ( Paint , stroke , paint , alpha ) ; this . value = value . value () ; }
Distance : 7

120
Tree	{ super ( null , stroke , paint , alpha , alpha , value ) ; this . value = value ; }
Code	{ super ( null , stroke , paint , alpha , alpha , value ) ; this . value = value ; }
Distance : 5

121
Tree	{ super ( alpha , stroke ) ; this . value = value ; }
Code	{ super ( alpha , stroke ) ; this . value = value ; }
Distance : 7

122
Tree	{ super ( paint ) ; this . value = value ; disableTypeCheck }
Code	{ super ( paint ) ; this . value = value ; disableTypeCheck }
Distance : 9

123
Tree	{ super ( null , stroke , alpha , alpha , alpha , alpha ) ; this . value = value ; }
Code	{ super ( null , stroke , alpha , alpha , alpha , alpha ) ; this . value = value ; }
Distance : 5

124
Tree	{ super ( paint , stroke , paint , paint ) ; this . value = value . value () ; }
Code	{ super ( paint , stroke , paint , paint ) ; this . value = value . value () ; }
Distance : 7

125
Tree	{ super ( paint ? stroke : outlineStroke ) ; this . value = value ; }
Code	{ super ( paint ? stroke : outlineStroke ) ; this . value = value ; }
Distance : 6

126
Tree	{ super ( paint , stroke , Paint ) ; this . value = value ; }
Code	{ super ( paint , stroke , Paint ) ; this . value = value ; }
Distance : 5

127
Tree	{ super ( paint , stroke ) ; this . stroke = value ; }
Code	{ super ( paint , stroke ) ; this . stroke = value ; }
Distance : 7

128
Tree	{ super ( value , stroke ) ; this . value = value . value () ; }
Code	{ super ( value , stroke ) ; this . value = value . value () ; }
Distance : 10

129
Tree	{ super ( paint ) ; this . value = Paint ( value ) ; }
Code	{ super ( paint ) ; this . value = Paint ( value ) ; }
Distance : 11

130
Tree	{ super ( stroke , stroke , paint , alpha ) ; this . value = value . value () ; }
Code	{ super ( stroke , stroke , paint , alpha ) ; this . value = value . value () ; }
Distance : 7

131
Tree	{ super ( stroke ) ; this . value = paint ( value ) ; }
Code	{ super ( stroke ) ; this . value = paint ( value ) ; }
Distance : 11

132
Tree	{ super ( outlinePaint , stroke ) ; this . value = value ; }
Code	{ super ( outlinePaint , stroke ) ; this . value = value ; }
Distance : 7

133
Tree	{ super ( paint , alpha ) ; this . value = value . value () ; }
Code	{ super ( paint , alpha ) ; this . value = value . value () ; }
Distance : 9

134
Tree	{ super ( null , stroke , paint , alpha , alpha , stroke ) ; this . value = value ; }
Code	{ super ( null , stroke , paint , alpha , alpha , stroke ) ; this . value = value ; }
Distance : 5

135
Tree	{ super ( paint ) ; this . value = stroke ( value ) ; }
Code	{ super ( paint ) ; this . value = stroke ( value ) ; }
Distance : 11

136
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . alpha = value ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . alpha = value ; }
Distance : 9

137
Tree	{ super ( value , stroke ) ; this . value = value ; }
Code	{ super ( value , stroke ) ; this . value = value ; }
Distance : 7

138
Tree	{ super ( paint , alpha ) ; }
Code	{ super ( paint , alpha ) ; }
Distance : 12

139
Tree	{ super ( paint ? alpha : paint ) ; this . value = value ; }
Code	{ super ( paint ? alpha : paint ) ; this . value = value ; }
Distance : 8

140
Tree	{ super ( paint , alpha , paint ) ; this . value = value . value () ; }
Code	{ super ( paint , alpha , paint ) ; this . value = value . value () ; }
Distance : 9

141
Tree	{ super ( outlineStroke , stroke , paint , alpha ) ; this . value = value . value () ; }
Code	{ super ( outlineStroke , stroke , paint , alpha ) ; this . value = value . value () ; }
Distance : 7

142
Tree	{ super ( paint , Paint ) ; }
Code	{ super ( paint , Paint ) ; }
Distance : 13

143
Tree	{ super ( paint ? stroke : Paint ) ; this . value = value ; }
Code	{ super ( paint ? stroke : Paint ) ; this . value = value ; }
Distance : 7

144
Tree	{ super ( value , stroke ) ; }
Code	{ super ( value , stroke ) ; }
Distance : 13

145
Tree	{ super ( Stroke , stroke , paint ) ; this . value = value ; }
Code	{ super ( Stroke , stroke , paint ) ; this . value = value ; }
Distance : 6

146
Tree	{ super ( null , stroke , Paint , alpha , alpha , alpha ) ; this . value = value ; }
Code	{ super ( null , stroke , Paint , alpha , alpha , alpha ) ; this . value = value ; }
Distance : 5

147
Tree	{ super ( paint ) ; this . value = value ( value ) ; }
Code	{ super ( paint ) ; this . value = value ( value ) ; }
Distance : 11

148
Tree	{ super ( Paint , stroke ) ; this . value = value ; }
Code	{ super ( Paint , stroke ) ; this . value = value ; }
Distance : 7

149
Tree	{ super ( paint , stroke ) ; this . value = value . value () ; }
Code	{ super ( paint , stroke ) ; this . value = value . value () ; }
Distance : 9

150
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . stroke = value ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . stroke = value ; }
Distance : 9

151
Tree	{ super ( paint , stroke , paint ) ; this . value = value . value () ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value . value () ; }
Distance : 8

152
Tree	{ super ( paint ) ; this . value = new float [] { value } ; }
Code	{ super ( paint ) ; this . value = new float [] { value } ; }
Distance : 13

153
Tree	{ super ( null , stroke , paint , alpha , alpha , alpha ) ; this . value = value ; }
Code	{ super ( null , stroke , paint , alpha , alpha , alpha ) ; this . value = value ; }
Distance : 5

154
Tree	{ super ( paint ) ; this . value = alpha . value () ; }
Code	{ super ( paint ) ; this . value = alpha . value () ; }
Distance : 11

155
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = paint ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = paint ; }
Distance : 9

156
Tree	{ super ( Stroke , stroke ) ; }
Code	{ super ( Stroke , stroke ) ; }
Distance : 13

157
Tree	{ super ( outlineStroke ? stroke : paint ) ; this . value = value ; }
Code	{ super ( outlineStroke ? stroke : paint ) ; this . value = value ; }
Distance : 8

158
Tree	{ super ( stroke ? stroke : paint ) ; this . value = value ; }
Code	{ super ( stroke ? stroke : paint ) ; this . value = value ; }
Distance : 8

159
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . paint = value ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . paint = value ; }
Distance : 9

160
Tree	{ super ( paint ? Paint : paint ) ; this . value = value ; }
Code	{ super ( paint ? Paint : paint ) ; this . value = value ; }
Distance : 8

161
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = value . value () ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = value . value () ; }
Distance : 6

162
Tree	{ super ( paint ) ; this . value = value ; else }
Code	{ super ( paint ) ; this . value = value ; else }
Distance : 9

163
Tree	{ super ( Stroke ) ; this . value = value . value () ; }
Code	{ super ( Stroke ) ; this . value = value . value () ; }
Distance : 12

164
Tree	{ super ( outlinePaint , stroke ) ; }
Code	{ super ( outlinePaint , stroke ) ; }
Distance : 13

165
Tree	{ super ( outlinePaint ) ; this . value = value . value () ; }
Code	{ super ( outlinePaint ) ; this . value = value . value () ; }
Distance : 11

166
Tree	{ super ( paint , stroke , stroke ) ; this . value = value ; }
Code	{ super ( paint , stroke , stroke ) ; this . value = value ; }
Distance : 5

167
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . outlineStroke = value ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . outlineStroke = value ; }
Distance : 9

168
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = alpha ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = alpha ; }
Distance : 9

169
Tree	{ super ( alpha , stroke , paint ) ; this . value = value ; }
Code	{ super ( alpha , stroke , paint ) ; this . value = value ; }
Distance : 6

170
Tree	{ super ( stroke ) ; this . value = value ; }
Code	{ super ( stroke ) ; this . value = value ; }
Distance : 8

171
Tree	{ super ( paint ) ; this . value = outlineStroke ( value ) ; }
Code	{ super ( paint ) ; this . value = outlineStroke ( value ) ; }
Distance : 11

172
Tree	{ super ( outlinePaint , stroke , paint ) ; this . value = value ; }
Code	{ super ( outlinePaint , stroke , paint ) ; this . value = value ; }
Distance : 6

173
Tree	{ super ( alpha ) ; this . value = paint ( value ) ; }
Code	{ super ( alpha ) ; this . value = paint ( value ) ; }
Distance : 11

174
Tree	{ super ( paint , stroke , stroke , alpha ) ; this . value = value . value () ; }
Code	{ super ( paint , stroke , stroke , alpha ) ; this . value = value . value () ; }
Distance : 6

175
Tree	{ super ( paint , stroke , paint , stroke ) ; this . value = value ; }
Code	{ super ( paint , stroke , paint , stroke ) ; this . value = value ; }
Distance : 4

176
Tree	{ super ( paint , stroke , stroke ) ; this . value = value . value () ; }
Code	{ super ( paint , stroke , stroke ) ; this . value = value . value () ; }
Distance : 8

177
Tree	{ super ( outlineStroke ) ; this . value = paint ( value ) ; }
Code	{ super ( outlineStroke ) ; this . value = paint ( value ) ; }
Distance : 11

178
Tree	{ super ( paint ? stroke : stroke ) ; this . value = value ; }
Code	{ super ( paint ? stroke : stroke ) ; this . value = value ; }
Distance : 7

179
Tree	{ super ( alpha ) ; this . value = value ; }
Code	{ super ( alpha ) ; this . value = value ; }
Distance : 8

180
Tree	{ super ( value , stroke , paint , alpha ) ; this . value = value . value () ; }
Code	{ super ( value , stroke , paint , alpha ) ; this . value = value . value () ; }
Distance : 7

181
Tree	{ super ( Paint ) ; this . value = paint ( value ) ; }
Code	{ super ( Paint ) ; this . value = paint ( value ) ; }
Distance : 12

182
Tree	{ super ( Stroke , stroke ) ; this . value = value . value () ; }
Code	{ super ( Stroke , stroke ) ; this . value = value . value () ; }
Distance : 10

183
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . outlinePaint = value ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . outlinePaint = value ; }
Distance : 9

184
Tree	{ super ( paint ) ; this . value = new int [] { value } ; }
Code	{ super ( paint ) ; this . value = new int [] { value } ; }
Distance : 13

185
Tree	{ super ( paint ) ; this . value = value ; if }
Code	{ super ( paint ) ; this . value = value ; if }
Distance : 9

186
Tree	{ super ( paint , stroke , stroke , alpha ) ; this . value = value ; }
Code	{ super ( paint , stroke , stroke , alpha ) ; this . value = value ; }
Distance : 3

187
Tree	{ super ( stroke ) ; this . value = value . value () ; }
Code	{ super ( stroke ) ; this . value = value . value () ; }
Distance : 11

188
Tree	{ super ( outlineStroke , stroke ) ; this . value = value ; }
Code	{ super ( outlineStroke , stroke ) ; this . value = value ; }
Distance : 7

189
Tree	{ super ( Paint , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( Paint , stroke ) ; this . value = new double [] { value } ; }
Distance : 12

190
Tree	{ super ( paint , stroke , paint , outlineStroke ) ; this . value = value ; }
Code	{ super ( paint , stroke , paint , outlineStroke ) ; this . value = value ; }
Distance : 3

191
Tree	{ super ( outlinePaint , stroke ) ; this . value = value ; }
Code	{ super ( outlinePaint , stroke ) ; this . value = value ; }
Distance : 7

192
Tree	{ super ( outlineStroke , stroke ) ; this . value = value . value () ; }
Code	{ super ( outlineStroke , stroke ) ; this . value = value . value () ; }
Distance : 10

193
Tree	{ super ( paint , stroke , paint , outlineStroke ) ; this . value = value . value () ; }
Code	{ super ( paint , stroke , paint , outlineStroke ) ; this . value = value . value () ; }
Distance : 6

194
Tree	{ super ( value , stroke , paint ) ; this . value = value . value () ; }
Code	{ super ( value , stroke , paint ) ; this . value = value . value () ; }
Distance : 9

195
Tree	{ super ( stroke , stroke , paint ) ; this . value = value ; }
Code	{ super ( stroke , stroke , paint ) ; this . value = value ; }
Distance : 6

196
Tree	{ super ( paint , stroke ) ; this . stroke = value . value () ; }
Code	{ super ( paint , stroke ) ; this . stroke = value . value () ; }
Distance : 10

197
Tree	{ super ( paint , stroke , alpha ) ; this . value = value ; }
Code	{ super ( paint , stroke , alpha ) ; this . value = value ; }
Distance : 4

198
Tree	{ super ( paint , alpha ) ; this . value = value ; }
Code	{ super ( paint , alpha ) ; this . value = value ; }
Distance : 6

199
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . Paint = value ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . Paint = value ; }
Distance : 9

========================================================================


========================================================================
Example Number: 3
Parent Code is: 
if ( index < NUMBER_CONSTANT ) { return; }
-------------------------------------------------------------------------------
Child code is: 
if ( index < NUMBER_CONSTANT ) { throw new UnknownKeyException ( STRING_CONSTANT + key + STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=index}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (500{val=return;}) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=index}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=UnknownKeyException})) (214{val=(}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (800{val=key}) (200{val=+}) (45{val=STRING_CONSTANT})) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/18/parent/source_org_jfree_data_DefaultKeyedValues.java
-------------------------------------------------------------------------------
Edit Distance : 11
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( index != null ) { default: }
Code	if ( index != null ) { default: }
Distance : 13

1
Tree	if ( index . index ( index ) > getIndex ) { return; }
Code	if ( index . index ( index ) > getIndex ) { return; }
Distance : 14

2
Tree	if ( ! index . index () ) { null }
Code	if ( ! index . index () ) { null }
Distance : 15

3
Tree	if ( ! < ( index ) ) { return; }
Code	if ( ! < ( index ) ) { return; }
Distance : 14

4
Tree	if ( index . Comparable ( index , false ) ) { return; }
Code	if ( index . Comparable ( index , false ) ) { return; }
Distance : 14

5
Tree	if ( index . key ( index ) > index ) { return; }
Code	if ( index . key ( index ) > index ) { return; }
Distance : 14

6
Tree	if ( index . key ( index ) == return; ) { return; }
Code	if ( index . key ( index ) == return; ) { return; }
Distance : 14

7
Tree	if ( index . index ( index , false ) ) { continue; }
Code	if ( index . index ( index , false ) ) { continue; }
Distance : 14

8
Tree	if ( index != super(); ) { return; }
Code	if ( index != super(); ) { return; }
Distance : 13

9
Tree	if ( index . index ( index ) > key ) { return; }
Code	if ( index . index ( index ) > key ) { return; }
Distance : 14

10
Tree	if ( index < NUMBER_CONSTANT ) { return; }
Code	if ( index < NUMBER_CONSTANT ) { return; }
Distance : 11

11
Tree	if ( index != null ) { return; }
Code	if ( index != null ) { return; }
Distance : 13

12
Tree	if ( Comparable < NUMBER_CONSTANT ) { return; }
Code	if ( Comparable < NUMBER_CONSTANT ) { return; }
Distance : 12

13
Tree	if ( index > index ) { continue; }
Code	if ( index > index ) { continue; }
Distance : 13

14
Tree	if ( index != index ) { return; }
Code	if ( index != index ) { return; }
Distance : 13

15
Tree	if ( index . getIndex ( index ) > index ) { return; }
Code	if ( index . getIndex ( index ) > index ) { return; }
Distance : 14

16
Tree	if ( index . index ( index ) == null ) { continue; }
Code	if ( index . index ( index ) == null ) { continue; }
Distance : 14

17
Tree	if ( index > index ) { super(); }
Code	if ( index > index ) { super(); }
Distance : 13

18
Tree	if ( ! index . index () ) { super(); }
Code	if ( ! index . index () ) { super(); }
Distance : 15

19
Tree	if ( index <= NUMBER_CONSTANT ) { continue; }
Code	if ( index <= NUMBER_CONSTANT ) { continue; }
Distance : 12

20
Tree	if ( ! index . getIndex ( index ) ) { return; }
Code	if ( ! index . getIndex ( index ) ) { return; }
Distance : 15

21
Tree	if ( index () == null ) { continue; }
Code	if ( index () == null ) { continue; }
Distance : 14

22
Tree	if ( index . key () ) { return; }
Code	if ( index . key () ) { return; }
Distance : 14

23
Tree	if ( index . index ( index ) ) { return; }
Code	if ( index . index ( index ) ) { return; }
Distance : 14

24
Tree	if ( index . index () ) { break; }
Code	if ( index . index () ) { break; }
Distance : 14

25
Tree	if ( ! index . index () ) { return; }
Code	if ( ! index . index () ) { return; }
Distance : 15

26
Tree	if ( index < NUMBER_CONSTANT ) { null }
Code	if ( index < NUMBER_CONSTANT ) { null }
Distance : 11

27
Tree	if ( ! Comparable ( index ) ) { return; }
Code	if ( ! Comparable ( index ) ) { return; }
Distance : 15

28
Tree	if ( index () ) { continue; }
Code	if ( index () ) { continue; }
Distance : 13

29
Tree	if ( ! index . index ( index ) ) { return; }
Code	if ( ! index . index ( index ) ) { return; }
Distance : 15

30
Tree	if ( key > index ) { return; }
Code	if ( key > index ) { return; }
Distance : 14

31
Tree	if ( ! index . index ( index , false ) ) { return; }
Code	if ( ! index . index ( index , false ) ) { return; }
Distance : 15

32
Tree	if ( ! index . index ( index , false ) ) { null }
Code	if ( ! index . index ( index , false ) ) { null }
Distance : 15

33
Tree	if ( index > index ) { null }
Code	if ( index > index ) { null }
Distance : 13

34
Tree	if ( index . index () ) { super(); }
Code	if ( index . index () ) { super(); }
Distance : 14

35
Tree	if ( index . index () ) { return; }
Code	if ( index . index () ) { return; }
Distance : 14

36
Tree	if ( index <= NUMBER_CONSTANT ) { break; }
Code	if ( index <= NUMBER_CONSTANT ) { break; }
Distance : 12

37
Tree	if ( index . index ( index ) == null ) { super(); }
Code	if ( index . index ( index ) == null ) { super(); }
Distance : 14

38
Tree	if ( index . index ( index ) == null ) { return; }
Code	if ( index . index ( index ) == null ) { return; }
Distance : 14

39
Tree	if ( ! index ( index ) ) { continue; }
Code	if ( ! index ( index ) ) { continue; }
Distance : 15

40
Tree	if ( index . index ( index ) ) { super(); }
Code	if ( index . index ( index ) ) { super(); }
Distance : 14

41
Tree	if ( key < NUMBER_CONSTANT ) { return; }
Code	if ( key < NUMBER_CONSTANT ) { return; }
Distance : 12

42
Tree	if ( index != index ) { break; }
Code	if ( index != index ) { break; }
Distance : 13

43
Tree	if ( ! index ( index ) ) { return; }
Code	if ( ! index ( index ) ) { return; }
Distance : 15

44
Tree	if ( index != null index index . index ( index ) ) { return; }
Code	if ( index != null index index . index ( index ) ) { return; }
Distance : 14

45
Tree	if ( index != index ) { super(); }
Code	if ( index != index ) { super(); }
Distance : 13

46
Tree	if ( ! index ) { break; }
Code	if ( ! index ) { break; }
Distance : 14

47
Tree	if ( ! key ( index ) ) { return; }
Code	if ( ! key ( index ) ) { return; }
Distance : 15

48
Tree	if ( index > index ) { return; }
Code	if ( index > index ) { return; }
Distance : 13

49
Tree	if ( index . index () ) { continue; }
Code	if ( index . index () ) { continue; }
Distance : 14

50
Tree	if ( index != null ) { break; }
Code	if ( index != null ) { break; }
Distance : 13

51
Tree	if ( ! index . Comparable ( index ) ) { return; }
Code	if ( ! index . Comparable ( index ) ) { return; }
Distance : 15

52
Tree	if ( index () == null ) { super(); }
Code	if ( index () == null ) { super(); }
Distance : 14

53
Tree	if ( index != key ) { return; }
Code	if ( index != key ) { return; }
Distance : 13

54
Tree	if ( index . index ( index , false ) ) { return; }
Code	if ( index . index ( index , false ) ) { return; }
Distance : 14

55
Tree	if ( key ( index ) ) { return; }
Code	if ( key ( index ) ) { return; }
Distance : 15

56
Tree	if ( index ( index ) ) { null }
Code	if ( index ( index ) ) { null }
Distance : 14

57
Tree	if ( index != getIndex ) { return; }
Code	if ( index != getIndex ) { return; }
Distance : 13

58
Tree	if ( index != index ) { null }
Code	if ( index != index ) { null }
Distance : 13

59
Tree	if ( ! index . index () ) { break; }
Code	if ( ! index . index () ) { break; }
Distance : 15

60
Tree	if ( index < NUMBER_CONSTANT ) { break; }
Code	if ( index < NUMBER_CONSTANT ) { break; }
Distance : 11

61
Tree	if ( key <= NUMBER_CONSTANT ) { return; }
Code	if ( key <= NUMBER_CONSTANT ) { return; }
Distance : 13

62
Tree	if ( key () ) { return; }
Code	if ( key () ) { return; }
Distance : 14

63
Tree	if ( index . getIndex ( index ) == null ) { return; }
Code	if ( index . getIndex ( index ) == null ) { return; }
Distance : 14

64
Tree	if ( index != index ) { return; }
Code	if ( index != index ) { return; }
Distance : 13

65
Tree	if ( ! index . key ( index , false ) ) { return; }
Code	if ( ! index . key ( index , false ) ) { return; }
Distance : 15

66
Tree	if ( index . index ( index ) ) { null }
Code	if ( index . index ( index ) ) { null }
Distance : 14

67
Tree	if ( key != null ) { return; }
Code	if ( key != null ) { return; }
Distance : 14

68
Tree	if ( index != Comparable ) { return; }
Code	if ( index != Comparable ) { return; }
Distance : 13

69
Tree	if ( ! index . < () ) { return; }
Code	if ( ! index . < () ) { return; }
Distance : 14

70
Tree	if ( index != null < index . getIndex ( index ) ) { return; }
Code	if ( index != null < index . getIndex ( index ) ) { return; }
Distance : 14

71
Tree	if ( ! index ( index ) ) { break; }
Code	if ( ! index ( index ) ) { break; }
Distance : 15

72
Tree	if ( ! index . index ( index , false ) ) { break; }
Code	if ( ! index . index ( index , false ) ) { break; }
Distance : 15

73
Tree	if ( index != null ) { null }
Code	if ( index != null ) { null }
Distance : 13

74
Tree	if ( index != null < index . key ( index ) ) { return; }
Code	if ( index != null < index . key ( index ) ) { return; }
Distance : 14

75
Tree	if ( index > Comparable ) { return; }
Code	if ( index > Comparable ) { return; }
Distance : 13

76
Tree	if ( ! key . index ( index ) ) { return; }
Code	if ( ! key . index ( index ) ) { return; }
Distance : 15

77
Tree	if ( index < NUMBER_CONSTANT ) { default: }
Code	if ( index < NUMBER_CONSTANT ) { default: }
Distance : 11

78
Tree	if ( ! index . Comparable ( index , false ) ) { return; }
Code	if ( ! index . Comparable ( index , false ) ) { return; }
Distance : 15

79
Tree	if ( ! getIndex ( index ) ) { return; }
Code	if ( ! getIndex ( index ) ) { return; }
Distance : 15

80
Tree	if ( ! index ) { return; }
Code	if ( ! index ) { return; }
Distance : 14

81
Tree	if ( index != key ) { return; }
Code	if ( index != key ) { return; }
Distance : 13

82
Tree	if ( index != < ) { return; }
Code	if ( index != < ) { return; }
Distance : 13

83
Tree	if ( index () == return; ) { return; }
Code	if ( index () == return; ) { return; }
Distance : 14

84
Tree	if ( index . index ( index ) ) { continue; }
Code	if ( index . index ( index ) ) { continue; }
Distance : 14

85
Tree	if ( ! index . index () ) { continue; }
Code	if ( ! index . index () ) { continue; }
Distance : 15

86
Tree	if ( index . getIndex ( index , false ) ) { return; }
Code	if ( index . getIndex ( index , false ) ) { return; }
Distance : 14

87
Tree	if ( index ( key ) ) { return; }
Code	if ( index ( key ) ) { return; }
Distance : 13

88
Tree	if ( index > key ) { return; }
Code	if ( index > key ) { return; }
Distance : 13

89
Tree	if ( index . getIndex () ) { return; }
Code	if ( index . getIndex () ) { return; }
Distance : 14

90
Tree	if ( index <= NUMBER_CONSTANT ) { default: }
Code	if ( index <= NUMBER_CONSTANT ) { default: }
Distance : 12

91
Tree	if ( ! key ) { break; }
Code	if ( ! key ) { break; }
Distance : 14

92
Tree	if ( Comparable > index ) { return; }
Code	if ( Comparable > index ) { return; }
Distance : 14

93
Tree	if ( key () == null ) { return; }
Code	if ( key () == null ) { return; }
Distance : 15

94
Tree	if ( index . index ( index , true ) ) { return; }
Code	if ( index . index ( index , true ) ) { return; }
Distance : 14

95
Tree	if ( ! index ) { default: }
Code	if ( ! index ) { default: }
Distance : 14

96
Tree	if ( index . Comparable () ) { return; }
Code	if ( index . Comparable () ) { return; }
Distance : 14

97
Tree	if ( index != getIndex ) { return; }
Code	if ( index != getIndex ) { return; }
Distance : 13

98
Tree	if ( getIndex ( index ) ) { return; }
Code	if ( getIndex ( index ) ) { return; }
Distance : 15

99
Tree	if ( ! index ) { null }
Code	if ( ! index ) { null }
Distance : 14

100
Tree	if ( index != index ) { break; }
Code	if ( index != index ) { break; }
Distance : 13

101
Tree	if ( index . index ( index ) == null ) { break; }
Code	if ( index . index ( index ) == null ) { break; }
Distance : 14

102
Tree	if ( index . key ( index , false ) ) { return; }
Code	if ( index . key ( index , false ) ) { return; }
Distance : 14

103
Tree	if ( ! index . index ( index ) ) { break; }
Code	if ( ! index . index ( index ) ) { break; }
Distance : 15

104
Tree	if ( Comparable ( index ) ) { return; }
Code	if ( Comparable ( index ) ) { return; }
Distance : 15

105
Tree	if ( index () ) { break; }
Code	if ( index () ) { break; }
Distance : 13

106
Tree	if ( ! index . index ( index ) ) { super(); }
Code	if ( ! index . index ( index ) ) { super(); }
Distance : 15

107
Tree	if ( ! IllegalArgumentException ( index ) ) { return; }
Code	if ( ! IllegalArgumentException ( index ) ) { return; }
Distance : 15

108
Tree	if ( ! key ) { return; }
Code	if ( ! key ) { return; }
Distance : 14

109
Tree	if ( index . index ( index , false ) ) { super(); }
Code	if ( index . index ( index , false ) ) { super(); }
Distance : 14

110
Tree	if ( index != index ) { continue; }
Code	if ( index != index ) { continue; }
Distance : 13

111
Tree	if ( ! index . getIndex ( index , false ) ) { return; }
Code	if ( ! index . getIndex ( index , false ) ) { return; }
Distance : 15

112
Tree	if ( index . index ( index ) > index ) { break; }
Code	if ( index . index ( index ) > index ) { break; }
Distance : 14

113
Tree	if ( ! index . index ( index ) ) { null }
Code	if ( ! index . index ( index ) ) { null }
Distance : 15

114
Tree	if ( index < NUMBER_CONSTANT ) { continue; }
Code	if ( index < NUMBER_CONSTANT ) { continue; }
Distance : 11

115
Tree	if ( ! index ( index ) ) { null }
Code	if ( ! index ( index ) ) { null }
Distance : 15

116
Tree	if ( index . Comparable ( index ) > index ) { return; }
Code	if ( index . Comparable ( index ) > index ) { return; }
Distance : 14

117
Tree	if ( index != null < index . { ( index ) ) { return; }
Code	if ( index != null < index . { ( index ) ) { return; }
Distance : 14

118
Tree	if ( index . index () ) { null }
Code	if ( index . index () ) { null }
Distance : 14

119
Tree	if ( index . index ( index ) == break; ) { return; }
Code	if ( index . index ( index ) == break; ) { return; }
Distance : 14

120
Tree	if ( getIndex () ) { return; }
Code	if ( getIndex () ) { return; }
Distance : 14

121
Tree	if ( index ( index ) ) { return; }
Code	if ( index ( index ) ) { return; }
Distance : 14

122
Tree	if ( index . Comparable ( index ) == null ) { return; }
Code	if ( index . Comparable ( index ) == null ) { return; }
Distance : 14

123
Tree	if ( index () == null ) { break; }
Code	if ( index () == null ) { break; }
Distance : 14

124
Tree	if ( index != null < index . index ( index ) ) { break; }
Code	if ( index != null < index . index ( index ) ) { break; }
Distance : 14

125
Tree	if ( ! key . index ( index , false ) ) { return; }
Code	if ( ! key . index ( index , false ) ) { return; }
Distance : 15

126
Tree	if ( ! index . index ( index , false ) ) { super(); }
Code	if ( ! index . index ( index , false ) ) { super(); }
Distance : 15

127
Tree	if ( IllegalArgumentException ( index ) ) { return; }
Code	if ( IllegalArgumentException ( index ) ) { return; }
Distance : 15

128
Tree	if ( index () ) { return; }
Code	if ( index () ) { return; }
Distance : 13

129
Tree	if ( index ( index ) ) { super(); }
Code	if ( index ( index ) ) { super(); }
Distance : 14

130
Tree	if ( index ( index ) ) { continue; }
Code	if ( index ( index ) ) { continue; }
Distance : 14

131
Tree	if ( index . index ( index , false ) ) { break; }
Code	if ( index . index ( index , false ) ) { break; }
Distance : 14

132
Tree	if ( index != null < index . getIndex ( index ) ) { break; }
Code	if ( index != null < index . getIndex ( index ) ) { break; }
Distance : 14

133
Tree	if ( ! index ) { super(); }
Code	if ( ! index ) { super(); }
Distance : 14

134
Tree	if ( ! index . index ( index ) ) { continue; }
Code	if ( ! index . index ( index ) ) { continue; }
Distance : 15

135
Tree	if ( Comparable () ) { return; }
Code	if ( Comparable () ) { return; }
Distance : 14

136
Tree	if ( index . key ( index ) ) { return; }
Code	if ( index . key ( index ) ) { return; }
Distance : 14

137
Tree	if ( index . index ( index ) == return; ) { return; }
Code	if ( index . index ( index ) == return; ) { return; }
Distance : 14

138
Tree	if ( index != < ) { return; }
Code	if ( index != < ) { return; }
Distance : 13

139
Tree	if ( index . key ( index ) == null ) { return; }
Code	if ( index . key ( index ) == null ) { return; }
Distance : 14

140
Tree	if ( index != null < index . Comparable ( index ) ) { return; }
Code	if ( index != null < index . Comparable ( index ) ) { return; }
Distance : 14

141
Tree	if ( index . Comparable ( index ) ) { return; }
Code	if ( index . Comparable ( index ) ) { return; }
Distance : 14

142
Tree	if ( index != IllegalArgumentException ) { return; }
Code	if ( index != IllegalArgumentException ) { return; }
Distance : 13

143
Tree	if ( index . index ( index ) > index ) { return; }
Code	if ( index . index ( index ) > index ) { return; }
Distance : 14

144
Tree	if ( key . index ( index ) ) { return; }
Code	if ( key . index ( index ) ) { return; }
Distance : 15

145
Tree	if ( ! index . index ( index , false ) ) { continue; }
Code	if ( ! index . index ( index , false ) ) { continue; }
Distance : 15

146
Tree	if ( index != Comparable ) { return; }
Code	if ( index != Comparable ) { return; }
Distance : 13

147
Tree	if ( ! index . index ( index , true ) ) { return; }
Code	if ( ! index . index ( index , true ) ) { return; }
Distance : 15

148
Tree	if ( IllegalArgumentException () ) { return; }
Code	if ( IllegalArgumentException () ) { return; }
Distance : 14

149
Tree	if ( index () ) { default: }
Code	if ( index () ) { default: }
Distance : 13

150
Tree	if ( key != index ) { return; }
Code	if ( key != index ) { return; }
Distance : 14

151
Tree	if ( index != null < index . index ( index ) ) { continue; }
Code	if ( index != null < index . index ( index ) ) { continue; }
Distance : 14

152
Tree	if ( ! index . getIndex () ) { return; }
Code	if ( ! index . getIndex () ) { return; }
Distance : 15

153
Tree	if ( index . index ( index ) > return; ) { return; }
Code	if ( index . index ( index ) > return; ) { return; }
Distance : 14

154
Tree	if ( index != null ) { super(); }
Code	if ( index != null ) { super(); }
Distance : 13

155
Tree	if ( index > index ) { break; }
Code	if ( index > index ) { break; }
Distance : 13

156
Tree	if ( index != Comparable ) { break; }
Code	if ( index != Comparable ) { break; }
Distance : 13

157
Tree	if ( ! index . key ( index ) ) { return; }
Code	if ( ! index . key ( index ) ) { return; }
Distance : 15

158
Tree	if ( ! index . Comparable () ) { return; }
Code	if ( ! index . Comparable () ) { return; }
Distance : 15

159
Tree	if ( index () == null ) { return; }
Code	if ( index () == null ) { return; }
Distance : 14

160
Tree	if ( index ( index ) ) { break; }
Code	if ( index ( index ) ) { break; }
Distance : 14

161
Tree	if ( index . index ( index ) ) { break; }
Code	if ( index . index ( index ) ) { break; }
Distance : 14

162
Tree	if ( index <= NUMBER_CONSTANT ) { super(); }
Code	if ( index <= NUMBER_CONSTANT ) { super(); }
Distance : 12

163
Tree	if ( ! key . index () ) { return; }
Code	if ( ! key . index () ) { return; }
Distance : 16

164
Tree	if ( index != null < key . index ( index ) ) { return; }
Code	if ( index != null < key . index ( index ) ) { return; }
Distance : 14

165
Tree	if ( key < NUMBER_CONSTANT ) { break; }
Code	if ( key < NUMBER_CONSTANT ) { break; }
Distance : 12

166
Tree	if ( index . index ( index ) > index ) { super(); }
Code	if ( index . index ( index ) > index ) { super(); }
Distance : 14

167
Tree	if ( index . index ( index , false ) ) { null }
Code	if ( index . index ( index , false ) ) { null }
Distance : 14

168
Tree	if ( Comparable <= NUMBER_CONSTANT ) { return; }
Code	if ( Comparable <= NUMBER_CONSTANT ) { return; }
Distance : 13

169
Tree	if ( index > index ) { default: }
Code	if ( index > index ) { default: }
Distance : 13

170
Tree	if ( getIndex () == null ) { return; }
Code	if ( getIndex () == null ) { return; }
Distance : 15

171
Tree	if ( ! Comparable ) { return; }
Code	if ( ! Comparable ) { return; }
Distance : 14

172
Tree	if ( index . < () ) { return; }
Code	if ( index . < () ) { return; }
Distance : 13

173
Tree	if ( index < NUMBER_CONSTANT ) { super(); }
Code	if ( index < NUMBER_CONSTANT ) { super(); }
Distance : 11

174
Tree	if ( index () == null ) { null }
Code	if ( index () == null ) { null }
Distance : 14

175
Tree	if ( ! index ( index ) ) { super(); }
Code	if ( ! index ( index ) ) { super(); }
Distance : 15

176
Tree	if ( ! IllegalArgumentException ) { return; }
Code	if ( ! IllegalArgumentException ) { return; }
Distance : 14

177
Tree	if ( key < NUMBER_CONSTANT ) { super(); }
Code	if ( key < NUMBER_CONSTANT ) { super(); }
Distance : 12

178
Tree	if ( index != index ) { continue; }
Code	if ( index != index ) { continue; }
Distance : 13

179
Tree	if ( index . < ( index ) ) { return; }
Code	if ( index . < ( index ) ) { return; }
Distance : 14

180
Tree	if ( index != break; ) { return; }
Code	if ( index != break; ) { return; }
Distance : 13

181
Tree	if ( key <= NUMBER_CONSTANT ) { break; }
Code	if ( key <= NUMBER_CONSTANT ) { break; }
Distance : 13

182
Tree	if ( index () ) { null }
Code	if ( index () ) { null }
Distance : 13

183
Tree	if ( index . index ( index ) > index ) { continue; }
Code	if ( index . index ( index ) > index ) { continue; }
Distance : 14

184
Tree	if ( index . getIndex ( index ) ) { return; }
Code	if ( index . getIndex ( index ) ) { return; }
Distance : 14

185
Tree	if ( index <= NUMBER_CONSTANT ) { null }
Code	if ( index <= NUMBER_CONSTANT ) { null }
Distance : 12

186
Tree	if ( IllegalArgumentException () == null ) { return; }
Code	if ( IllegalArgumentException () == null ) { return; }
Distance : 15

187
Tree	if ( Comparable () == null ) { return; }
Code	if ( Comparable () == null ) { return; }
Distance : 15

188
Tree	if ( ! index . < ( index ) ) { return; }
Code	if ( ! index . < ( index ) ) { return; }
Distance : 15

189
Tree	if ( index != null < index . getIndex ( index ) ) { continue; }
Code	if ( index != null < index . getIndex ( index ) ) { continue; }
Distance : 14

190
Tree	if ( index <= NUMBER_CONSTANT ) { return; }
Code	if ( index <= NUMBER_CONSTANT ) { return; }
Distance : 12

191
Tree	if ( index != null ) { continue; }
Code	if ( index != null ) { continue; }
Distance : 13

192
Tree	if ( index () ) { super(); }
Code	if ( index () ) { super(); }
Distance : 13

193
Tree	if ( ! index . key () ) { return; }
Code	if ( ! index . key () ) { return; }
Distance : 15

194
Tree	if ( ! index ) { continue; }
Code	if ( ! index ) { continue; }
Distance : 14

195
Tree	if ( index != return; ) { return; }
Code	if ( index != return; ) { return; }
Distance : 13

196
Tree	if ( index . < ( index , false ) ) { return; }
Code	if ( index . < ( index , false ) ) { return; }
Distance : 14

197
Tree	if ( IllegalArgumentException <= NUMBER_CONSTANT ) { return; }
Code	if ( IllegalArgumentException <= NUMBER_CONSTANT ) { return; }
Distance : 13

198
Tree	if ( index != index ) { super(); }
Code	if ( index != index ) { super(); }
Distance : 13

199
Tree	if ( key . index () ) { return; }
Code	if ( key . index () ) { return; }
Distance : 15

========================================================================


========================================================================
Example Number: 4
Parent Code is: 
if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( categoryKeys.length != getCategoryCount () ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (40{val=categoryKeys.length}) (242{val=!=}) (22 (2 (22 (315{val=this}) (235{val=.}) (801{val=startData})) (221{val=[}) (34{val=NUMBER_CONSTANT}) (222{val=]})) (235{val=.}) (800{val=length}))) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (40{val=categoryKeys.length}) (242{val=!=}) (32 (802{val=getCategoryCount}) (216{val=()}))) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/16/parent/source_org_jfree_data_category_DefaultIntervalCategoryDataset.java
-------------------------------------------------------------------------------
Edit Distance : 8
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != fireDatasetChanged ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != fireDatasetChanged ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 18

1
Tree	if ( categoryKeys.length / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( categoryKeys.length / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 22

2
Tree	if ( i / ( i / length < NUMBER_CONSTANT ) != fireDatasetChanged ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( i / ( i / length < NUMBER_CONSTANT ) != fireDatasetChanged ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 18

3
Tree	if ( fireDatasetChanged / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( fireDatasetChanged / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

4
Tree	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != i ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != i ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 18

5
Tree	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys.length , length , length ) ; }
Code	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys.length , length , length ) ; }
Distance : 18

6
Tree	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != fireDatasetChanged ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != fireDatasetChanged ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

7
Tree	if ( i / ( i / length < NUMBER_CONSTANT ) != fireDatasetChanged ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( i / ( i / length < NUMBER_CONSTANT ) != fireDatasetChanged ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

8
Tree	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != i ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != i ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

9
Tree	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

10
Tree	if ( categoryKeys.length / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( categoryKeys.length / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 22

11
Tree	if ( categoryKeys * length . ] ( - NUMBER_CONSTANT ) != categoryKeys ) { throw new IllegalArgumentException ( categoryKeys ) ; }
Code	if ( categoryKeys * length . ] ( - NUMBER_CONSTANT ) != categoryKeys ) { throw new IllegalArgumentException ( categoryKeys ) ; }
Distance : 12

12
Tree	if ( i * length . categoryKeys ( - NUMBER_CONSTANT ) != categoryKeys ) { throw new IllegalArgumentException ( categoryKeys.length ) ; }
Code	if ( i * length . categoryKeys ( - NUMBER_CONSTANT ) != categoryKeys ) { throw new IllegalArgumentException ( categoryKeys.length ) ; }
Distance : 12

13
Tree	if ( fireDatasetChanged / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( fireDatasetChanged / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

14
Tree	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != fireDatasetChanged ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , null ) ; }
Code	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != fireDatasetChanged ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , null ) ; }
Distance : 15

15
Tree	if ( categoryKeys.length * length . categoryKeys ( - NUMBER_CONSTANT ) != categoryKeys ) { throw new IllegalArgumentException ( categoryKeys ) ; }
Code	if ( categoryKeys.length * length . categoryKeys ( - NUMBER_CONSTANT ) != categoryKeys ) { throw new IllegalArgumentException ( categoryKeys ) ; }
Distance : 11

16
Tree	if ( categoryKeys * length . categoryKeys ( - NUMBER_CONSTANT ) != categoryKeys ) { throw new IllegalArgumentException ( categoryKeys.length ) ; }
Code	if ( categoryKeys * length . categoryKeys ( - NUMBER_CONSTANT ) != categoryKeys ) { throw new IllegalArgumentException ( categoryKeys.length ) ; }
Distance : 12

17
Tree	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != i ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != i ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

18
Tree	if ( ( i / i < NUMBER_CONSTANT ) * length != ] ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * length != ] ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Distance : 17

19
Tree	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != fireDatasetChanged ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != fireDatasetChanged ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

20
Tree	if ( fireDatasetChanged * length . categoryKeys ( - NUMBER_CONSTANT ) != categoryKeys ) { throw new IllegalArgumentException ( categoryKeys ) ; }
Code	if ( fireDatasetChanged * length . categoryKeys ( - NUMBER_CONSTANT ) != categoryKeys ) { throw new IllegalArgumentException ( categoryKeys ) ; }
Distance : 12

21
Tree	if ( categoryKeys.length / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , null ) ; }
Code	if ( categoryKeys.length / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , null ) ; }
Distance : 14

22
Tree	if ( ( i / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Distance : 17

23
Tree	if ( ( categoryKeys / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 25

24
Tree	if ( i / ( i / length < NUMBER_CONSTANT ) != fireDatasetChanged ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , null ) ; }
Code	if ( i / ( i / length < NUMBER_CONSTANT ) != fireDatasetChanged ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , null ) ; }
Distance : 15

25
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 25

26
Tree	if ( i * length . ] ( - NUMBER_CONSTANT ) != categoryKeys ) { throw new IllegalArgumentException ( categoryKeys ) ; }
Code	if ( i * length . ] ( - NUMBER_CONSTANT ) != categoryKeys ) { throw new IllegalArgumentException ( categoryKeys ) ; }
Distance : 12

27
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 25

28
Tree	if ( categoryKeys * length . categoryKeys ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys ) ; }
Code	if ( categoryKeys * length . categoryKeys ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys ) ; }
Distance : 12

29
Tree	if ( i / ( i / length < NUMBER_CONSTANT ) != i ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( i / ( i / length < NUMBER_CONSTANT ) != i ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

30
Tree	if ( ( i / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( i / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 25

31
Tree	if ( i * length . categoryKeys ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys ) ; }
Code	if ( i * length . categoryKeys ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys ) ; }
Distance : 12

32
Tree	if ( ( i / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 25

33
Tree	if ( ( i / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 25

34
Tree	if ( ( i / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( ( i / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 13

35
Tree	if ( ( i / i < NUMBER_CONSTANT ) * length != ] ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * length != ] ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 13

36
Tree	if ( ( i / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

37
Tree	if ( fireDatasetChanged / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , null ) ; }
Code	if ( fireDatasetChanged / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , null ) ; }
Distance : 15

38
Tree	if ( ( i / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length . length () . length () ) ; }
Code	if ( ( i / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length . length () . length () ) ; }
Distance : 21

39
Tree	if ( ( categoryKeys.length / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys.length / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

40
Tree	if ( ( categoryKeys / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Code	if ( ( categoryKeys / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Distance : 17

41
Tree	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != i ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , null ) ; }
Code	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != i ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , null ) ; }
Distance : 15

42
Tree	if ( ( i / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 25

43
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != i ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length . length () . length () ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != i ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length . length () . length () ) ; }
Distance : 21

44
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Distance : 17

45
Tree	if ( ( i / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 13

46
Tree	if ( ( categoryKeys / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

47
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 20

48
Tree	if ( categoryKeys / ( i & ( i / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) <=
Code	if ( categoryKeys / ( i & ( i / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) <=
Distance : 16

49
Tree	if ( ( i / i < NUMBER_CONSTANT ) * length != this ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length . length () . length () ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * length != this ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length . length () . length () ) ; }
Distance : 21

50
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , length , length ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , length , length ) ; }
Distance : 22

51
Tree	if ( ( i / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( i / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 25

52
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != Comparable ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != Comparable ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Distance : 17

53
Tree	if ( i / ( i / length < NUMBER_CONSTANT ) != fireDatasetChanged ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( i / ( i / length < NUMBER_CONSTANT ) != fireDatasetChanged ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

54
Tree	if ( ( categoryKeys / Comparable < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / Comparable < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 25

55
Tree	if ( i / ( i & ( i / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) <=
Code	if ( i / ( i & ( i / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) <=
Distance : 16

56
Tree	if ( i / ( i / length < NUMBER_CONSTANT ) != i ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , null ) ; }
Code	if ( i / ( i / length < NUMBER_CONSTANT ) != i ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , null ) ; }
Distance : 15

57
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 25

58
Tree	if ( categoryKeys.length / ( i & ( i / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) <=
Code	if ( categoryKeys.length / ( i & ( i / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) <=
Distance : 15

59
Tree	if ( fireDatasetChanged / ( i & ( i / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) <=
Code	if ( fireDatasetChanged / ( i & ( i / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) <=
Distance : 16

60
Tree	if ( ( i / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , length , length ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , length , length ) ; }
Distance : 22

61
Tree	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys ) ; }
Code	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys ) ; }
Distance : 17

62
Tree	if ( categoryKeys / ( i & ( i / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) %
Code	if ( categoryKeys / ( i & ( i / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) %
Distance : 16

63
Tree	if ( ( i / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 20

64
Tree	if ( ( i / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 25

65
Tree	if ( categoryKeys / ( i & ( i / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) {}
Code	if ( categoryKeys / ( i & ( i / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) {}
Distance : 16

66
Tree	if ( ( i / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 20

67
Tree	if ( ( categoryKeys.length / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( ( categoryKeys.length / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 19

68
Tree	if ( ( i / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 18

69
Tree	if ( i / ( i & ( i / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) %
Code	if ( i / ( i & ( i / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) %
Distance : 16

70
Tree	if ( categoryKeys / ( i & ( i / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) &
Code	if ( categoryKeys / ( i & ( i / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) &
Distance : 16

71
Tree	if ( ( i / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 25

72
Tree	if ( ( categoryKeys / Comparable < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( ( categoryKeys / Comparable < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 20

73
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != i ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != i ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Distance : 17

74
Tree	if ( i / ( i & ( i / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) {}
Code	if ( i / ( i & ( i / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) {}
Distance : 16

75
Tree	if ( ( categoryKeys.length / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys.length / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

76
Tree	if ( ( i / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Code	if ( ( i / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Distance : 17

77
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

78
Tree	if ( ( i / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys ) ; }
Code	if ( ( i / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys ) ; }
Distance : 17

79
Tree	if ( ( i / i < NUMBER_CONSTANT ) * length != ] ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * length != ] ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys ) ; }
Distance : 17

80
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

81
Tree	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys ) ; }
Code	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys ) ; }
Distance : 17

82
Tree	if ( ( i / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 18

83
Tree	if ( ( i / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length . length () . length () ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length . length () . length () ) ; }
Distance : 21

84
Tree	if ( i / ( i & ( i / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) &
Code	if ( i / ( i & ( i / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) &
Distance : 16

85
Tree	if ( ( categoryKeys / Comparable < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / Comparable < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 25

86
Tree	if ( i / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys ) ; }
Code	if ( i / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys ) ; }
Distance : 17

87
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != ] ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != ] ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 18

88
Tree	if ( ( categoryKeys / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( ( categoryKeys / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 18

89
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != ] ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length . length () . length () ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != ] ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length . length () . length () ) ; }
Distance : 21

90
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != Comparable ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != Comparable ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

91
Tree	if ( ( i / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length . length () . length () ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length . length () . length () ) ; }
Distance : 21

92
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != i ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != i ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

93
Tree	if ( ( i / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( i / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

94
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys ) ; }
Distance : 17

95
Tree	if ( ( i / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys ) ; }
Distance : 17

96
Tree	if ( i / ( i / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys ) ; }
Code	if ( i / ( i / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys ) ; }
Distance : 17

97
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != ] ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != ] ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys ) ; }
Distance : 17

98
Tree	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , i , categoryKeys ) ; }
Code	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , i , categoryKeys ) ; }
Distance : 17

99
Tree	if ( ( categoryKeys / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys ) ; }
Code	if ( ( categoryKeys / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys ) ; }
Distance : 17

100
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys ) ; }
Distance : 17

101
Tree	if ( ( i / i < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

102
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != Comparable ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != Comparable ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys ) ; }
Distance : 17

103
Tree	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys.length ) ; }
Code	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys.length ) ; }
Distance : 17

104
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != i ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != i ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys ) ; }
Distance : 17

105
Tree	if ( ( i / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys ) ; }
Code	if ( ( i / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys ) ; }
Distance : 17

106
Tree	if ( ( i / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 20

107
Tree	if ( i / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , i , categoryKeys ) ; }
Code	if ( i / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , i , categoryKeys ) ; }
Distance : 17

108
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , i , categoryKeys ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , i , categoryKeys ) ; }
Distance : 17

109
Tree	if ( ( i / i < NUMBER_CONSTANT ) * length != ] ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * length != ] ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys ) ; }
Distance : 17

110
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) == null ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) == null ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 21

111
Tree	if ( ( i / i < NUMBER_CONSTANT ) == null ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) == null ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 21

112
Tree	if ( ( categoryKeys / length < NUMBER_CONSTANT ) == null ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / length < NUMBER_CONSTANT ) == null ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 21

113
Tree	if ( ( i / length < NUMBER_CONSTANT ) == null ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( i / length < NUMBER_CONSTANT ) == null ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 21

114
Tree	if ( ( categoryKeys / Comparable < NUMBER_CONSTANT ) == null ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / Comparable < NUMBER_CONSTANT ) == null ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 21

115
Tree	if ( ( categoryKeys.length / i < NUMBER_CONSTANT ) == null ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys.length / i < NUMBER_CONSTANT ) == null ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 20

116
Tree	if ( ( fireDatasetChanged / i < NUMBER_CONSTANT ) == null ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( fireDatasetChanged / i < NUMBER_CONSTANT ) == null ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 21

117
Tree	if ( ( i / Comparable < NUMBER_CONSTANT ) == null ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( i / Comparable < NUMBER_CONSTANT ) == null ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 21

118
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 25

119
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != Comparable ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != Comparable ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

120
Tree	if ( ( i / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Distance : 17

121
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != i ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != i ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

122
Tree	if ( ( i / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( i / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

123
Tree	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 18

124
Tree	if ( ( i / i < NUMBER_CONSTANT ) * length != ] ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * length != ] ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

125
Tree	if ( ( categoryKeys.length / length < NUMBER_CONSTANT ) == null ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys.length / length < NUMBER_CONSTANT ) == null ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 20

126
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 13

127
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 20

128
Tree	if ( i / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( i / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 18

129
Tree	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

130
Tree	if ( i / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( i / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

131
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != Comparable ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != Comparable ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 13

132
Tree	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 18

133
Tree	if ( i / ( i / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( i / ( i / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 18

134
Tree	if ( ( categoryKeys / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 25

135
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != Comparable ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , length , length ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != Comparable ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , length , length ) ; }
Distance : 22

136
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 25

137
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != ] ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != ] ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Distance : 17

138
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != i ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , length , length ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != i ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , length , length ) ; }
Distance : 22

139
Tree	if ( ( fireDatasetChanged / length < NUMBER_CONSTANT ) == null ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( fireDatasetChanged / length < NUMBER_CONSTANT ) == null ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 21

140
Tree	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

141
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 20

142
Tree	if ( categoryKeys.length / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( categoryKeys.length / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 17

143
Tree	if ( ( i / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , length , length ) ; }
Code	if ( ( i / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , length , length ) ; }
Distance : 22

144
Tree	if ( ( i / i < NUMBER_CONSTANT ) * length != ] ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , length , length ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * length != ] ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , length , length ) ; }
Distance : 22

145
Tree	if ( i / ( i / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( i / ( i / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

146
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != i ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != i ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 13

147
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 25

148
Tree	if ( fireDatasetChanged / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( fireDatasetChanged / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 18

149
Tree	if ( ( i / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( ( i / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 20

150
Tree	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

151
Tree	if ( i / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( i / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

152
Tree	if ( ( i / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , length , length ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , length , length ) ; }
Distance : 22

153
Tree	if ( ( categoryKeys / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length . length () . length () ) ; }
Code	if ( ( categoryKeys / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length . length () . length () ) ; }
Distance : 21

154
Tree	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , null ) ; }
Code	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , null ) ; }
Distance : 15

155
Tree	if ( ( i / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

156
Tree	if ( ( i / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

157
Tree	if ( ( i / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 25

158
Tree	if ( i / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , null ) ; }
Code	if ( i / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , null ) ; }
Distance : 15

159
Tree	if ( i / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys.length ) ; }
Code	if ( i / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys.length ) ; }
Distance : 17

160
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 18

161
Tree	if ( categoryKeys * length . categoryKeys ( - NUMBER_CONSTANT ) != categoryKeys ) { throw new IllegalArgumentException ( categoryKeys ) ; }
Code	if ( categoryKeys * length . categoryKeys ( - NUMBER_CONSTANT ) != categoryKeys ) { throw new IllegalArgumentException ( categoryKeys ) ; }
Distance : 12

162
Tree	if ( categoryKeys.length / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys ) ; }
Code	if ( categoryKeys.length / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys , categoryKeys ) ; }
Distance : 16

163
Tree	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys ) ; }
Code	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys ) ; }
Distance : 17

164
Tree	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

165
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != Comparable ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != Comparable ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 18

166
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != ] ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , length , length ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != ] ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , length , length ) ; }
Distance : 22

167
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length . length () . length () ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length . length () . length () ) ; }
Distance : 21

168
Tree	if ( ( categoryKeys / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , length , length ) ; }
Code	if ( ( categoryKeys / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , length , length ) ; }
Distance : 22

169
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != i ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != i ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 18

170
Tree	if ( i / ( i / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( i / ( i / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

171
Tree	if ( i * length . categoryKeys ( - NUMBER_CONSTANT ) != categoryKeys ) { throw new IllegalArgumentException ( categoryKeys ) ; }
Code	if ( i * length . categoryKeys ( - NUMBER_CONSTANT ) != categoryKeys ) { throw new IllegalArgumentException ( categoryKeys ) ; }
Distance : 12

172
Tree	if ( ( categoryKeys / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( ( categoryKeys / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 20

173
Tree	if ( ( i / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( ( i / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 18

174
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != Comparable ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length . length () . length () ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != Comparable ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length . length () . length () ) ; }
Distance : 21

175
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , length , length ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , length , length ) ; }
Distance : 22

176
Tree	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != != ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , null ) ; }
Code	if ( categoryKeys / ( i / length < NUMBER_CONSTANT ) != != ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , null ) ; }
Distance : 15

177
Tree	if ( i / ( i / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , null ) ; }
Code	if ( i / ( i / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , null ) ; }
Distance : 15

178
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != ] ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != ] ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

179
Tree	if ( ( i / i < NUMBER_CONSTANT ) * length != categoryKeys.length ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * length != categoryKeys.length ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 18

180
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys ) ; }
Distance : 17

181
Tree	if ( ( i / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys ) ; }
Distance : 17

182
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != this ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != this ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys ) ; }
Distance : 17

183
Tree	if ( ( categoryKeys / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys ) ; }
Code	if ( ( categoryKeys / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys ) ; }
Distance : 17

184
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( categoryKeys , length , length ) ; }
Distance : 18

185
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length . length () . length () ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length . length () . length () ) ; }
Distance : 21

186
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys ) ; }
Distance : 17

187
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != Comparable ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != Comparable ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys ) ; }
Distance : 17

188
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; }
Distance : 17

189
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != i ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != i ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys ) ; }
Distance : 17

190
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

191
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 13

192
Tree	if ( ( i / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

193
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Distance : 17

194
Tree	if ( ( i / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( ( i / i < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 13

195
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != ] ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != ] ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

196
Tree	if ( ( categoryKeys / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

197
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != this ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != this ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 13

198
Tree	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / i < NUMBER_CONSTANT ) * length != length ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

199
Tree	if ( ( categoryKeys / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( ( categoryKeys / length < NUMBER_CONSTANT ) * length != categoryKeys ) { throw IllegalArgumentException . IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 13

========================================================================


========================================================================
Example Number: 5
Parent Code is: 
this . dataset = dataset ;
-------------------------------------------------------------------------------
Child code is: 
setDataset ( dataset ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=dataset})) (204{val==}) (800{val=dataset})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (802{val=setDataset}) (214{val=(}) (800{val=dataset}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/12/parent/source_org_jfree_chart_plot_MultiplePiePlot.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	this . dataset = new aggregatedItemsKey ( dataset ) ;
Code	this . dataset = new aggregatedItemsKey ( dataset ) ;
Distance : 6

1
Tree	dataset = new dataset ( aggregatedItemsKey ) ;
Code	dataset = new dataset ( aggregatedItemsKey ) ;
Distance : 5

2
Tree	this . dataset = pieChart ;
Code	this . dataset = pieChart ;
Distance : 4

3
Tree	this . dataset = JFreeChart ( dataset ) ;
Code	this . dataset = JFreeChart ( dataset ) ;
Distance : 5

4
Tree	aggregatedItemsKey () ;
Code	aggregatedItemsKey () ;
Distance : 4

5
Tree	setBackgroundPaint . dataset ( dataset , STRING_CONSTANT ) ;
Code	setBackgroundPaint . dataset ( dataset , STRING_CONSTANT ) ;
Distance : 5

6
Tree	this . aggregatedItemsKey = dataset ;
Code	this . aggregatedItemsKey = dataset ;
Distance : 5

7
Tree	dataset = new MultiplePiePlot ( dataset ) ;
Code	dataset = new MultiplePiePlot ( dataset ) ;
Distance : 4

8
Tree	aggregatedItemsKey = new dataset ( dataset ) ;
Code	aggregatedItemsKey = new dataset ( dataset ) ;
Distance : 4

9
Tree	this . dataset = dataset . dataExtractOrder ( dataset ) ;
Code	this . dataset = dataset . dataExtractOrder ( dataset ) ;
Distance : 7

10
Tree	dataset = CategoryDataset ;
Code	dataset = CategoryDataset ;
Distance : 4

11
Tree	this . dataset = dataset . aggregatedItemsPaint () ;
Code	this . dataset = dataset . aggregatedItemsPaint () ;
Distance : 7

12
Tree	this . dataset = aggregatedItemsKey ( dataset ) ;
Code	this . dataset = aggregatedItemsKey ( dataset ) ;
Distance : 5

13
Tree	dataset = JFreeChart () ;
Code	dataset = JFreeChart () ;
Distance : 4

14
Tree	this . dataset = pieChart ( dataset ) ;
Code	this . dataset = pieChart ( dataset ) ;
Distance : 5

15
Tree	setBackgroundPaint . dataset ( dataset ) ;
Code	setBackgroundPaint . dataset ( dataset ) ;
Distance : 3

16
Tree	setBackgroundPaint = dataset () ;
Code	setBackgroundPaint = dataset () ;
Distance : 3

17
Tree	this . dataset = dataset ;
Code	this . dataset = dataset ;
Distance : 4

18
Tree	this . dataset = new MultiplePiePlot ( dataset ) ;
Code	this . dataset = new MultiplePiePlot ( dataset ) ;
Distance : 6

19
Tree	dataset = dataset . dataset ( dataset ) ;
Code	dataset = dataset . dataset ( dataset ) ;
Distance : 5

20
Tree	dataset = dataset ;
Code	dataset = dataset ;
Distance : 3

21
Tree	dataset = dataset . MultiplePiePlot ( dataset ) ;
Code	dataset = dataset . MultiplePiePlot ( dataset ) ;
Distance : 5

22
Tree	dataset = JFreeChart ;
Code	dataset = JFreeChart ;
Distance : 4

23
Tree	this . dataset = new dataset ( dataset ) ;
Code	this . dataset = new dataset ( dataset ) ;
Distance : 6

24
Tree	dataset = false ;
Code	dataset = false ;
Distance : 4

25
Tree	dataset . CategoryDataset ( dataset ) ;
Code	dataset . CategoryDataset ( dataset ) ;
Distance : 3

26
Tree	this . dataset = MultiplePiePlot ;
Code	this . dataset = MultiplePiePlot ;
Distance : 4

27
Tree	this . dataset = dataset . dataExtractOrder () ;
Code	this . dataset = dataset . dataExtractOrder () ;
Distance : 7

28
Tree	CategoryDataset = dataset ;
Code	CategoryDataset = dataset ;
Distance : 3

29
Tree	CategoryDataset = new dataset <> () ;
Code	CategoryDataset = new dataset <> () ;
Distance : 5

30
Tree	dataset = NUMBER_CONSTANT / aggregatedItemsKey ;
Code	dataset = NUMBER_CONSTANT / aggregatedItemsKey ;
Distance : 5

31
Tree	this . dataExtractOrder = new dataset ( dataset ) ;
Code	this . dataExtractOrder = new dataset ( dataset ) ;
Distance : 6

32
Tree	this . dataExtractOrder = dataset ;
Code	this . dataExtractOrder = dataset ;
Distance : 5

33
Tree	this . aggregatedItemsKey = dataset ;
Code	this . aggregatedItemsKey = dataset ;
Distance : 5

34
Tree	aggregatedItemsKey . dataset ( dataset , STRING_CONSTANT ) ;
Code	aggregatedItemsKey . dataset ( dataset , STRING_CONSTANT ) ;
Distance : 5

35
Tree	dataset . aggregatedItemsKey ( dataset , STRING_CONSTANT ) ;
Code	dataset . aggregatedItemsKey ( dataset , STRING_CONSTANT ) ;
Distance : 5

36
Tree	this . CategoryDataset = dataset ;
Code	this . CategoryDataset = dataset ;
Distance : 5

37
Tree	dataset = NUMBER_CONSTANT / dataset ;
Code	dataset = NUMBER_CONSTANT / dataset ;
Distance : 5

38
Tree	dataset = new dataset ( dataset ) ;
Code	dataset = new dataset ( dataset ) ;
Distance : 4

39
Tree	this . dataset = setBackgroundPaint ( dataset ) ;
Code	this . dataset = setBackgroundPaint ( dataset ) ;
Distance : 5

40
Tree	aggregatedItemsPaint () ;
Code	aggregatedItemsPaint () ;
Distance : 4

41
Tree	dataset . aggregatedItemsKey ( dataset ) ;
Code	dataset . aggregatedItemsKey ( dataset ) ;
Distance : 3

42
Tree	dataset = setBackgroundPaint ;
Code	dataset = setBackgroundPaint ;
Distance : 4

43
Tree	this . dataset = dataset ;
Code	this . dataset = dataset ;
Distance : 4

44
Tree	this . dataset = new CategoryDataset ( dataset ) ;
Code	this . dataset = new CategoryDataset ( dataset ) ;
Distance : 6

45
Tree	dataset . MultiplePiePlot ( dataset ) ;
Code	dataset . MultiplePiePlot ( dataset ) ;
Distance : 3

46
Tree	this . aggregatedItemsPaint = dataset ;
Code	this . aggregatedItemsPaint = dataset ;
Distance : 5

47
Tree	dataset = NUMBER_CONSTANT / dataExtractOrder ;
Code	dataset = NUMBER_CONSTANT / dataExtractOrder ;
Distance : 5

48
Tree	dataset = NUMBER_CONSTANT / setBackgroundPaint ;
Code	dataset = NUMBER_CONSTANT / setBackgroundPaint ;
Distance : 5

49
Tree	pieChart () ;
Code	pieChart () ;
Distance : 4

50
Tree	dataset = CategoryDataset ;
Code	dataset = CategoryDataset ;
Distance : 4

51
Tree	setBackgroundPaint = dataset ;
Code	setBackgroundPaint = dataset ;
Distance : 3

52
Tree	dataset . dataset ( dataset , STRING_CONSTANT ) ;
Code	dataset . dataset ( dataset , STRING_CONSTANT ) ;
Distance : 5

53
Tree	dataset . dataset ( dataset ) ;
Code	dataset . dataset ( dataset ) ;
Distance : 3

54
Tree	this . dataset = continue; ;
Code	this . dataset = continue; ;
Distance : 4

55
Tree	setBackgroundPaint = true ;
Code	setBackgroundPaint = true ;
Distance : 4

56
Tree	dataset = MultiplePiePlot ;
Code	dataset = MultiplePiePlot ;
Distance : 4

57
Tree	setBackgroundPaint = new dataset ( dataset ) ;
Code	setBackgroundPaint = new dataset ( dataset ) ;
Distance : 4

58
Tree	this . dataset = dataset . aggregatedItemsKey ( dataset ) ;
Code	this . dataset = dataset . aggregatedItemsKey ( dataset ) ;
Distance : 7

59
Tree	dataset = new CategoryDataset ( dataset ) ;
Code	dataset = new CategoryDataset ( dataset ) ;
Distance : 4

60
Tree	dataset = dataset . CategoryDataset ( dataset ) ;
Code	dataset = dataset . CategoryDataset ( dataset ) ;
Distance : 5

61
Tree	MultiplePiePlot = dataset ;
Code	MultiplePiePlot = dataset ;
Distance : 3

62
Tree	this . dataset = dataset . aggregatedItemsPaint ( dataset ) ;
Code	this . dataset = dataset . aggregatedItemsPaint ( dataset ) ;
Distance : 7

63
Tree	this . aggregatedItemsKey = null ;
Code	this . aggregatedItemsKey = null ;
Distance : 5

64
Tree	dataset = new setBackgroundPaint <> () ;
Code	dataset = new setBackgroundPaint <> () ;
Distance : 6

65
Tree	CategoryDataset = dataset ;
Code	CategoryDataset = dataset ;
Distance : 3

66
Tree	dataset . dataExtractOrder ( dataset , STRING_CONSTANT ) ;
Code	dataset . dataExtractOrder ( dataset , STRING_CONSTANT ) ;
Distance : 5

67
Tree	this . aggregatedItemsKey = true ;
Code	this . aggregatedItemsKey = true ;
Distance : 5

68
Tree	this . CategoryDataset = true ;
Code	this . CategoryDataset = true ;
Distance : 5

69
Tree	CategoryDataset = true ;
Code	CategoryDataset = true ;
Distance : 4

70
Tree	dataset = new aggregatedItemsKey ( dataset ) ;
Code	dataset = new aggregatedItemsKey ( dataset ) ;
Distance : 4

71
Tree	this . dataset = true ;
Code	this . dataset = true ;
Distance : 4

72
Tree	this . dataset = super(); ;
Code	this . dataset = super(); ;
Distance : 4

73
Tree	dataset = aggregatedItemsKey () ;
Code	dataset = aggregatedItemsKey () ;
Distance : 4

74
Tree	dataset () ;
Code	dataset () ;
Distance : 3

75
Tree	dataset = setBackgroundPaint ;
Code	dataset = setBackgroundPaint ;
Distance : 4

76
Tree	dataset . MultiplePiePlot ( dataset , STRING_CONSTANT ) ;
Code	dataset . MultiplePiePlot ( dataset , STRING_CONSTANT ) ;
Distance : 5

77
Tree	this . aggregatedItemsKey = dataset ( dataset ) ;
Code	this . aggregatedItemsKey = dataset ( dataset ) ;
Distance : 5

78
Tree	setBackgroundPaint () ;
Code	setBackgroundPaint () ;
Distance : 4

79
Tree	this . dataset = ( dataset ) dataset . setDataset () ;
Code	this . dataset = ( dataset ) dataset . setDataset () ;
Distance : 8

80
Tree	this . dataset = dataset . TextTitle ( dataset ) ;
Code	this . dataset = dataset . TextTitle ( dataset ) ;
Distance : 7

81
Tree	aggregatedItemsKey . dataset ( dataset ) ;
Code	aggregatedItemsKey . dataset ( dataset ) ;
Distance : 3

82
Tree	this . dataset = dataset . this () ;
Code	this . dataset = dataset . this () ;
Distance : 7

83
Tree	dataset = CategoryDataset () ;
Code	dataset = CategoryDataset () ;
Distance : 4

84
Tree	this . aggregatedItemsKey = new dataset ( dataset ) ;
Code	this . aggregatedItemsKey = new dataset ( dataset ) ;
Distance : 6

85
Tree	dataset . dataExtractOrder ( dataset ) ;
Code	dataset . dataExtractOrder ( dataset ) ;
Distance : 3

86
Tree	this . dataset = break; ;
Code	this . dataset = break; ;
Distance : 4

87
Tree	this . dataset = ( dataset ) dataset . aggregatedItemsKey () ;
Code	this . dataset = ( dataset ) dataset . aggregatedItemsKey () ;
Distance : 8

88
Tree	this . dataset = return; ;
Code	this . dataset = return; ;
Distance : 4

89
Tree	dataExtractOrder () ;
Code	dataExtractOrder () ;
Distance : 4

90
Tree	dataset = setBackgroundPaint () ;
Code	dataset = setBackgroundPaint () ;
Distance : 4

91
Tree	this . dataset = ( dataset ) dataset . dataExtractOrder () ;
Code	this . dataset = ( dataset ) dataset . dataExtractOrder () ;
Distance : 8

92
Tree	this . setBackgroundPaint = new dataset ( dataset ) ;
Code	this . setBackgroundPaint = new dataset ( dataset ) ;
Distance : 6

93
Tree	dataset = dataset () ;
Code	dataset = dataset () ;
Distance : 3

94
Tree	dataset = new dataset ( setBackgroundPaint ) ;
Code	dataset = new dataset ( setBackgroundPaint ) ;
Distance : 5

95
Tree	this . dataset = CategoryDataset ;
Code	this . dataset = CategoryDataset ;
Distance : 4

96
Tree	this . dataset = ( dataset ) dataset . HashMap () ;
Code	this . dataset = ( dataset ) dataset . HashMap () ;
Distance : 8

97
Tree	aggregatedItemsKey = NUMBER_CONSTANT / dataset ;
Code	aggregatedItemsKey = NUMBER_CONSTANT / dataset ;
Distance : 5

98
Tree	dataset = new aggregatedItemsKey <> () ;
Code	dataset = new aggregatedItemsKey <> () ;
Distance : 6

99
Tree	dataset . dataset ( setBackgroundPaint , STRING_CONSTANT ) ;
Code	dataset . dataset ( setBackgroundPaint , STRING_CONSTANT ) ;
Distance : 6

100
Tree	this . setBackgroundPaint = dataset ( dataset ) ;
Code	this . setBackgroundPaint = dataset ( dataset ) ;
Distance : 5

101
Tree	dataset = pieChart () ;
Code	dataset = pieChart () ;
Distance : 4

102
Tree	dataset = setBackgroundPaint . dataset ( dataset ) ;
Code	dataset = setBackgroundPaint . dataset ( dataset ) ;
Distance : 5

103
Tree	this . aggregatedItemsPaint = true ;
Code	this . aggregatedItemsPaint = true ;
Distance : 5

104
Tree	this . dataset = dataset . pieChart ( dataset ) ;
Code	this . dataset = dataset . pieChart ( dataset ) ;
Distance : 7

105
Tree	pieChart = true ;
Code	pieChart = true ;
Distance : 4

106
Tree	dataset = true ;
Code	dataset = true ;
Distance : 4

107
Tree	CategoryDataset . dataset ( dataset ) ;
Code	CategoryDataset . dataset ( dataset ) ;
Distance : 3

108
Tree	this . dataset = dataset ( dataset ) ;
Code	this . dataset = dataset ( dataset ) ;
Distance : 5

109
Tree	this . dataExtractOrder = dataset ;
Code	this . dataExtractOrder = dataset ;
Distance : 5

110
Tree	dataExtractOrder = dataset ;
Code	dataExtractOrder = dataset ;
Distance : 3

111
Tree	setBackgroundPaint = dataset ;
Code	setBackgroundPaint = dataset ;
Distance : 3

112
Tree	dataset = aggregatedItemsKey ;
Code	dataset = aggregatedItemsKey ;
Distance : 4

113
Tree	MultiplePiePlot = NUMBER_CONSTANT / dataset ;
Code	MultiplePiePlot = NUMBER_CONSTANT / dataset ;
Distance : 5

114
Tree	dataset = MultiplePiePlot () ;
Code	dataset = MultiplePiePlot () ;
Distance : 4

115
Tree	this . dataset = dataset . aggregatedItemsKey () ;
Code	this . dataset = dataset . aggregatedItemsKey () ;
Distance : 7

116
Tree	CategoryDataset = new dataset ( dataset ) ;
Code	CategoryDataset = new dataset ( dataset ) ;
Distance : 4

117
Tree	JFreeChart = true ;
Code	JFreeChart = true ;
Distance : 4

118
Tree	CategoryDataset () ;
Code	CategoryDataset () ;
Distance : 4

119
Tree	this . dataset = dataset . pieChart () ;
Code	this . dataset = dataset . pieChart () ;
Distance : 7

120
Tree	aggregatedItemsKey = dataset ;
Code	aggregatedItemsKey = dataset ;
Distance : 3

121
Tree	dataset = new CategoryDataset <> () ;
Code	dataset = new CategoryDataset <> () ;
Distance : 6

122
Tree	this . aggregatedItemsPaint = null ;
Code	this . aggregatedItemsPaint = null ;
Distance : 5

123
Tree	this . dataset = new dataset ( setBackgroundPaint ) ;
Code	this . dataset = new dataset ( setBackgroundPaint ) ;
Distance : 7

124
Tree	this . dataExtractOrder = false ;
Code	this . dataExtractOrder = false ;
Distance : 5

125
Tree	this . dataset = dataset . Font ( dataset ) ;
Code	this . dataset = dataset . Font ( dataset ) ;
Distance : 7

126
Tree	setBackgroundPaint = new dataset <> () ;
Code	setBackgroundPaint = new dataset <> () ;
Distance : 5

127
Tree	this . dataset = dataset . TextTitle () ;
Code	this . dataset = dataset . TextTitle () ;
Distance : 7

128
Tree	dataset . dataset ( setBackgroundPaint ) ;
Code	dataset . dataset ( setBackgroundPaint ) ;
Distance : 4

129
Tree	this . aggregatedItemsKey = false ;
Code	this . aggregatedItemsKey = false ;
Distance : 5

130
Tree	this . dataExtractOrder = null ;
Code	this . dataExtractOrder = null ;
Distance : 5

131
Tree	aggregatedItemsKey = dataset ;
Code	aggregatedItemsKey = dataset ;
Distance : 3

132
Tree	dataset = aggregatedItemsPaint () ;
Code	dataset = aggregatedItemsPaint () ;
Distance : 4

133
Tree	dataset = dataset . setBackgroundPaint ( dataset ) ;
Code	dataset = dataset . setBackgroundPaint ( dataset ) ;
Distance : 5

134
Tree	this . dataset = null ;
Code	this . dataset = null ;
Distance : 4

135
Tree	this . setBackgroundPaint = dataset ;
Code	this . setBackgroundPaint = dataset ;
Distance : 5

136
Tree	this . dataset = MultiplePiePlot ;
Code	this . dataset = MultiplePiePlot ;
Distance : 4

137
Tree	this . dataset = setBackgroundPaint ;
Code	this . dataset = setBackgroundPaint ;
Distance : 4

138
Tree	this . dataset = ( dataset ) dataset . aggregatedItemsPaint () ;
Code	this . dataset = ( dataset ) dataset . aggregatedItemsPaint () ;
Distance : 8

139
Tree	dataset = pieChart ;
Code	dataset = pieChart ;
Distance : 4

140
Tree	this . dataset = ( dataset ) dataset . TextTitle () ;
Code	this . dataset = ( dataset ) dataset . TextTitle () ;
Distance : 8

141
Tree	this . dataset = CategoryDataset ;
Code	this . dataset = CategoryDataset ;
Distance : 4

142
Tree	this . dataset = dataset . this ( dataset ) ;
Code	this . dataset = dataset . this ( dataset ) ;
Distance : 7

143
Tree	setBackgroundPaint = false ;
Code	setBackgroundPaint = false ;
Distance : 4

144
Tree	this . dataset = new dataset ( aggregatedItemsKey ) ;
Code	this . dataset = new dataset ( aggregatedItemsKey ) ;
Distance : 7

145
Tree	dataset . CategoryDataset ( dataset , STRING_CONSTANT ) ;
Code	dataset . CategoryDataset ( dataset , STRING_CONSTANT ) ;
Distance : 5

146
Tree	this . setBackgroundPaint = true ;
Code	this . setBackgroundPaint = true ;
Distance : 5

147
Tree	this . dataset = false ;
Code	this . dataset = false ;
Distance : 4

148
Tree	setBackgroundPaint = dataset . dataset ( dataset ) ;
Code	setBackgroundPaint = dataset . dataset ( dataset ) ;
Distance : 5

149
Tree	dataset = new MultiplePiePlot <> () ;
Code	dataset = new MultiplePiePlot <> () ;
Distance : 6

150
Tree	this . dataset = aggregatedItemsKey ;
Code	this . dataset = aggregatedItemsKey ;
Distance : 4

151
Tree	dataset = new setBackgroundPaint ( dataset ) ;
Code	dataset = new setBackgroundPaint ( dataset ) ;
Distance : 4

152
Tree	JFreeChart () ;
Code	JFreeChart () ;
Distance : 4

153
Tree	this . dataExtractOrder = true ;
Code	this . dataExtractOrder = true ;
Distance : 5

154
Tree	this . dataset = ( dataset ) dataset . pieChart () ;
Code	this . dataset = ( dataset ) dataset . pieChart () ;
Distance : 8

155
Tree	dataset = dataset . aggregatedItemsKey ( dataset ) ;
Code	dataset = dataset . aggregatedItemsKey ( dataset ) ;
Distance : 5

156
Tree	this . dataset = dataset . setDataset ( dataset ) ;
Code	this . dataset = dataset . setDataset ( dataset ) ;
Distance : 6

157
Tree	MultiplePiePlot = true ;
Code	MultiplePiePlot = true ;
Distance : 4

158
Tree	this . setBackgroundPaint = null ;
Code	this . setBackgroundPaint = null ;
Distance : 5

159
Tree	dataset = dataset . dataExtractOrder ( dataset ) ;
Code	dataset = dataset . dataExtractOrder ( dataset ) ;
Distance : 5

160
Tree	Font () ;
Code	Font () ;
Distance : 4

161
Tree	this . CategoryDataset = null ;
Code	this . CategoryDataset = null ;
Distance : 5

162
Tree	this . dataset = ( dataset ) dataset . setBackgroundPaint () ;
Code	this . dataset = ( dataset ) dataset . setBackgroundPaint () ;
Distance : 8

163
Tree	dataset = dataset ;
Code	dataset = dataset ;
Distance : 3

164
Tree	this . dataset = aggregatedItemsKey ;
Code	this . dataset = aggregatedItemsKey ;
Distance : 4

165
Tree	dataset = new JFreeChart <> () ;
Code	dataset = new JFreeChart <> () ;
Distance : 6

166
Tree	dataset = NUMBER_CONSTANT / CategoryDataset ;
Code	dataset = NUMBER_CONSTANT / CategoryDataset ;
Distance : 5

167
Tree	this . dataset = dataset . setBackgroundPaint () ;
Code	this . dataset = dataset . setBackgroundPaint () ;
Distance : 7

168
Tree	this . dataset = Font ( dataset ) ;
Code	this . dataset = Font ( dataset ) ;
Distance : 5

169
Tree	setBackgroundPaint = NUMBER_CONSTANT / dataset ;
Code	setBackgroundPaint = NUMBER_CONSTANT / dataset ;
Distance : 5

170
Tree	this . dataset = ( dataset ) dataset . this () ;
Code	this . dataset = ( dataset ) dataset . this () ;
Distance : 8

171
Tree	dataExtractOrder = true ;
Code	dataExtractOrder = true ;
Distance : 4

172
Tree	aggregatedItemsKey = dataset . dataset ( dataset ) ;
Code	aggregatedItemsKey = dataset . dataset ( dataset ) ;
Distance : 5

173
Tree	dataset = MultiplePiePlot ;
Code	dataset = MultiplePiePlot ;
Distance : 4

174
Tree	this . dataset = dataset . Font () ;
Code	this . dataset = dataset . Font () ;
Distance : 7

175
Tree	dataset . setBackgroundPaint ( dataset , STRING_CONSTANT ) ;
Code	dataset . setBackgroundPaint ( dataset , STRING_CONSTANT ) ;
Distance : 5

176
Tree	this . setBackgroundPaint = dataset ;
Code	this . setBackgroundPaint = dataset ;
Distance : 5

177
Tree	MultiplePiePlot = new dataset <> () ;
Code	MultiplePiePlot = new dataset <> () ;
Distance : 5

178
Tree	this . dataset = ( dataset ) dataset . Font () ;
Code	this . dataset = ( dataset ) dataset . Font () ;
Distance : 8

179
Tree	this . dataset = MultiplePiePlot ( dataset ) ;
Code	this . dataset = MultiplePiePlot ( dataset ) ;
Distance : 5

180
Tree	this . dataset = dataset . setBackgroundPaint ( dataset ) ;
Code	this . dataset = dataset . setBackgroundPaint ( dataset ) ;
Distance : 7

181
Tree	dataset = dataset . JFreeChart ( dataset ) ;
Code	dataset = dataset . JFreeChart ( dataset ) ;
Distance : 5

182
Tree	MultiplePiePlot () ;
Code	MultiplePiePlot () ;
Distance : 4

183
Tree	dataset = new dataset <> () ;
Code	dataset = new dataset <> () ;
Distance : 5

184
Tree	this . dataset = setBackgroundPaint ;
Code	this . dataset = setBackgroundPaint ;
Distance : 4

185
Tree	this . dataset = dataset . setDataset () ;
Code	this . dataset = dataset . setDataset () ;
Distance : 7

186
Tree	this . dataset = new setBackgroundPaint ( dataset ) ;
Code	this . dataset = new setBackgroundPaint ( dataset ) ;
Distance : 6

187
Tree	dataset = aggregatedItemsKey ;
Code	dataset = aggregatedItemsKey ;
Distance : 4

188
Tree	this . dataset = dataset . HashMap () ;
Code	this . dataset = dataset . HashMap () ;
Distance : 7

189
Tree	CategoryDataset . dataset ( dataset , STRING_CONSTANT ) ;
Code	CategoryDataset . dataset ( dataset , STRING_CONSTANT ) ;
Distance : 5

190
Tree	CategoryDataset = NUMBER_CONSTANT / dataset ;
Code	CategoryDataset = NUMBER_CONSTANT / dataset ;
Distance : 5

191
Tree	this . dataset = dataset . HashMap ( dataset ) ;
Code	this . dataset = dataset . HashMap ( dataset ) ;
Distance : 7

192
Tree	dataset . setBackgroundPaint ( dataset ) ;
Code	dataset . setBackgroundPaint ( dataset ) ;
Distance : 3

193
Tree	dataset = dataExtractOrder () ;
Code	dataset = dataExtractOrder () ;
Distance : 4

194
Tree	this . dataset = CategoryDataset ( dataset ) ;
Code	this . dataset = CategoryDataset ( dataset ) ;
Distance : 5

195
Tree	aggregatedItemsKey = true ;
Code	aggregatedItemsKey = true ;
Distance : 4

196
Tree	dataset = NUMBER_CONSTANT / MultiplePiePlot ;
Code	dataset = NUMBER_CONSTANT / MultiplePiePlot ;
Distance : 5

197
Tree	aggregatedItemsKey = new dataset <> () ;
Code	aggregatedItemsKey = new dataset <> () ;
Distance : 5

198
Tree	this . dataset = dataExtractOrder ;
Code	this . dataset = dataExtractOrder ;
Distance : 4

199
Tree	this . setBackgroundPaint = false ;
Code	this . setBackgroundPaint = false ;
Distance : 5

========================================================================


========================================================================
Example Number: 6
Parent Code is: 
PathIterator iterator2 = p1 . getPathIterator ( null ) ;
-------------------------------------------------------------------------------
Child code is: 
PathIterator iterator2 = p2 . getPathIterator ( null ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=PathIterator})) (59 (800{val=iterator2}) (204{val==}) (32 (800{val=p1}) (235{val=.}) (802{val=getPathIterator}) (214{val=(}) (500{val=null}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=PathIterator})) (59 (800{val=iterator2}) (204{val==}) (32 (800{val=p2}) (235{val=.}) (802{val=getPathIterator}) (214{val=(}) (500{val=null}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/11/parent/source_org_jfree_chart_util_ShapeUtilities.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	GeneralPath iterator2 = p1 . GeneralPath ( ( p2 ) null ) ;
Code	GeneralPath iterator2 = p1 . GeneralPath ( ( p2 ) null ) ;
Distance : 6

1
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( equals ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( equals ) ;
Distance : 5

2
Tree	GeneralPath next = p1 . GeneralPath ( p1 ) ;
Code	GeneralPath next = p1 . GeneralPath ( p1 ) ;
Distance : 5

3
Tree	GeneralPath GeneralPath = p1 . getPathIterator ( p1 ) ;
Code	GeneralPath GeneralPath = p1 . getPathIterator ( p1 ) ;
Distance : 4

4
Tree	GeneralPath GeneralPath = p1 . p1 ( ( p1 ) null ) ;
Code	GeneralPath GeneralPath = p1 . p1 ( ( p1 ) null ) ;
Distance : 7

5
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( ( GeneralPath ) null ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( ( GeneralPath ) null ) ;
Distance : 7

6
Tree	GeneralPath GeneralPath = p1 . p1 ( p1 . class ) ;
Code	GeneralPath GeneralPath = p1 . p1 ( p1 . class ) ;
Distance : 7

7
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( d1 ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( d1 ) ;
Distance : 5

8
Tree	GeneralPath GeneralPath = this . p1 . GeneralPath () ;
Code	GeneralPath GeneralPath = this . p1 . GeneralPath () ;
Distance : 7

9
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( p2 . class ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( p2 . class ) ;
Distance : 7

10
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( ( next ) null ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( ( next ) null ) ;
Distance : 7

11
Tree	GeneralPath GeneralPath = p2 . GeneralPath ( p1 . class ) ;
Code	GeneralPath GeneralPath = p2 . GeneralPath ( p1 . class ) ;
Distance : 6

12
Tree	GeneralPath iterator2 = p1 . p1 ( p1 . class ) ;
Code	GeneralPath iterator2 = p1 . p1 ( p1 . class ) ;
Distance : 6

13
Tree	GeneralPath iterator2 = p1 . GeneralPath () ;
Code	GeneralPath iterator2 = p1 . GeneralPath () ;
Distance : 6

14
Tree	GeneralPath iterator2 = this . p1 . GeneralPath () ;
Code	GeneralPath iterator2 = this . p1 . GeneralPath () ;
Distance : 6

15
Tree	GeneralPath iterator2 = p1 . p1 ( STRING_CONSTANT , true ) ;
Code	GeneralPath iterator2 = p1 . p1 ( STRING_CONSTANT , true ) ;
Distance : 6

16
Tree	GeneralPath iterator2 = p1 . GeneralPath ( null , null ) ;
Code	GeneralPath iterator2 = p1 . GeneralPath ( null , null ) ;
Distance : 5

17
Tree	GeneralPath GeneralPath = GeneralPath ( ( GeneralPath [] ) null ) ;
Code	GeneralPath GeneralPath = GeneralPath ( ( GeneralPath [] ) null ) ;
Distance : 8

18
Tree	GeneralPath d2 = p1 . GeneralPath ( NUMBER_CONSTANT ) ;
Code	GeneralPath d2 = p1 . GeneralPath ( NUMBER_CONSTANT ) ;
Distance : 5

19
Tree	GeneralPath GeneralPath = this . getPathIterator . GeneralPath () ;
Code	GeneralPath GeneralPath = this . getPathIterator . GeneralPath () ;
Distance : 6

20
Tree	GeneralPath GeneralPath = p1 . p1 ( NUMBER_CONSTANT ) ;
Code	GeneralPath GeneralPath = p1 . p1 ( NUMBER_CONSTANT ) ;
Distance : 5

21
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( STRING_CONSTANT , false ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( STRING_CONSTANT , false ) ;
Distance : 7

22
Tree	PathIterator GeneralPath = p1 . GeneralPath ( NUMBER_CONSTANT ) ;
Code	PathIterator GeneralPath = p1 . GeneralPath ( NUMBER_CONSTANT ) ;
Distance : 4

23
Tree	GeneralPath GeneralPath = this . GeneralPath . p1 () ;
Code	GeneralPath GeneralPath = this . GeneralPath . p1 () ;
Distance : 7

24
Tree	final GeneralPath GeneralPath = p1 . GeneralPath ( null ) ;
Code	final GeneralPath GeneralPath = p1 . GeneralPath ( null ) ;
Distance : 5

25
Tree	GeneralPath GeneralPath = p2 . GeneralPath ( NUMBER_CONSTANT ) ;
Code	GeneralPath GeneralPath = p2 . GeneralPath ( NUMBER_CONSTANT ) ;
Distance : 4

26
Tree	GeneralPath GeneralPath = p1 . p1 ( STRING_CONSTANT , true ) ;
Code	GeneralPath GeneralPath = p1 . p1 ( STRING_CONSTANT , true ) ;
Distance : 7

27
Tree	GeneralPath GeneralPath = p2 . GeneralPath ( STRING_CONSTANT ) ;
Code	GeneralPath GeneralPath = p2 . GeneralPath ( STRING_CONSTANT ) ;
Distance : 4

28
Tree	GeneralPath GeneralPath = p1 . p1 ( STRING_CONSTANT ) ;
Code	GeneralPath GeneralPath = p1 . p1 ( STRING_CONSTANT ) ;
Distance : 5

29
Tree	GeneralPath GeneralPath = GeneralPath ( ( p2 [] ) null ) ;
Code	GeneralPath GeneralPath = GeneralPath ( ( p2 [] ) null ) ;
Distance : 8

30
Tree	GeneralPath GeneralPath = p1 . p1 () ;
Code	GeneralPath GeneralPath = p1 . p1 () ;
Distance : 7

31
Tree	GeneralPath iterator2 = p1 . p1 ( STRING_CONSTANT ) ;
Code	GeneralPath iterator2 = p1 . p1 ( STRING_CONSTANT ) ;
Distance : 4

32
Tree	GeneralPath GeneralPath = p2 . GeneralPath () ;
Code	GeneralPath GeneralPath = p2 . GeneralPath () ;
Distance : 6

33
Tree	abstract GeneralPath GeneralPath = p1 . GeneralPath ( ( p2 [] ) null ) ;
Code	abstract GeneralPath GeneralPath = p1 . GeneralPath ( ( p2 [] ) null ) ;
Distance : 9

34
Tree	GeneralPath d2 = p1 . GeneralPath ( STRING_CONSTANT , true ) ;
Code	GeneralPath d2 = p1 . GeneralPath ( STRING_CONSTANT , true ) ;
Distance : 7

35
Tree	abstract GeneralPath GeneralPath = p1 . GeneralPath ( ( GeneralPath [] ) null ) ;
Code	abstract GeneralPath GeneralPath = p1 . GeneralPath ( ( GeneralPath [] ) null ) ;
Distance : 9

36
Tree	GeneralPath iterator2 = GeneralPath ( ( p1 [] ) null ) ;
Code	GeneralPath iterator2 = GeneralPath ( ( p1 [] ) null ) ;
Distance : 7

37
Tree	GeneralPath GeneralPath = this . GeneralPath . getPathIterator () ;
Code	GeneralPath GeneralPath = this . GeneralPath . getPathIterator () ;
Distance : 7

38
Tree	GeneralPath GeneralPath = GeneralPath ( ( next [] ) null ) ;
Code	GeneralPath GeneralPath = GeneralPath ( ( next [] ) null ) ;
Distance : 8

39
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( p1 , this . GeneralPath ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( p1 , this . GeneralPath ) ;
Distance : 9

40
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( ( p2 [] ) null ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( ( p2 [] ) null ) ;
Distance : 8

41
Tree	GeneralPath GeneralPath = getPathIterator ( ( GeneralPath [] ) null ) ;
Code	GeneralPath GeneralPath = getPathIterator ( ( GeneralPath [] ) null ) ;
Distance : 8

42
Tree	GeneralPath iterator2 = p1 . p1 () ;
Code	GeneralPath iterator2 = p1 . p1 () ;
Distance : 6

43
Tree	GeneralPath GeneralPath = p2 . GeneralPath ( null , null ) ;
Code	GeneralPath GeneralPath = p2 . GeneralPath ( null , null ) ;
Distance : 5

44
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( p1 , PathIterator ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( p1 , PathIterator ) ;
Distance : 7

45
Tree	GeneralPath iterator2 = p1 . GeneralPath ( p1 . p1 ( null ) ) ;
Code	GeneralPath iterator2 = p1 . GeneralPath ( p1 . p1 ( null ) ) ;
Distance : 8

46
Tree	GeneralPath GeneralPath = p1 . p1 ( p1 , this . GeneralPath ) ;
Code	GeneralPath GeneralPath = p1 . p1 ( p1 , this . GeneralPath ) ;
Distance : 9

47
Tree	GeneralPath next = this . GeneralPath . GeneralPath () ;
Code	GeneralPath next = this . GeneralPath . GeneralPath () ;
Distance : 7

48
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( null ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( null ) ;
Distance : 4

49
Tree	GeneralPath GeneralPath = GeneralPath ( p2 . p1 ( null ) ) ;
Code	GeneralPath GeneralPath = GeneralPath ( p2 . p1 ( null ) ) ;
Distance : 6

50
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( p2 , this . GeneralPath ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( p2 , this . GeneralPath ) ;
Distance : 9

51
Tree	GeneralPath iterator2 = p1 . GeneralPath ( null ) ;
Code	GeneralPath iterator2 = p1 . GeneralPath ( null ) ;
Distance : 3

52
Tree	GeneralPath GeneralPath = GeneralPath ( p1 . getPathIterator ( null ) ) ;
Code	GeneralPath GeneralPath = GeneralPath ( p1 . getPathIterator ( null ) ) ;
Distance : 6

53
Tree	abstract GeneralPath GeneralPath = p1 . GeneralPath ( ( p1 [] ) null ) ;
Code	abstract GeneralPath GeneralPath = p1 . GeneralPath ( ( p1 [] ) null ) ;
Distance : 9

54
Tree	GeneralPath GeneralPath = p1 . p1 ( null ) ;
Code	GeneralPath GeneralPath = p1 . p1 ( null ) ;
Distance : 4

55
Tree	GeneralPath GeneralPath = p1 . p1 ( null , null ) ;
Code	GeneralPath GeneralPath = p1 . p1 ( null , null ) ;
Distance : 6

56
Tree	GeneralPath next = p1 . GeneralPath ( null ) ;
Code	GeneralPath next = p1 . GeneralPath ( null ) ;
Distance : 4

57
Tree	GeneralPath GeneralPath = p1 . getPathIterator ( null ) ;
Code	GeneralPath GeneralPath = p1 . getPathIterator ( null ) ;
Distance : 3

58
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( equals , this . GeneralPath ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( equals , this . GeneralPath ) ;
Distance : 9

59
Tree	GeneralPath GeneralPath = p1 . p1 ( p1 , GeneralPath ) ;
Code	GeneralPath GeneralPath = p1 . p1 ( p1 , GeneralPath ) ;
Distance : 7

60
Tree	GeneralPath next = GeneralPath ( ( GeneralPath [] ) null ) ;
Code	GeneralPath next = GeneralPath ( ( GeneralPath [] ) null ) ;
Distance : 8

61
Tree	GeneralPath GeneralPath = GeneralPath ( equals . GeneralPath ( null ) ) ;
Code	GeneralPath GeneralPath = GeneralPath ( equals . GeneralPath ( null ) ) ;
Distance : 7

62
Tree	final GeneralPath iterator2 = p1 . GeneralPath ( ( p2 [] ) null ) ;
Code	final GeneralPath iterator2 = p1 . GeneralPath ( ( p2 [] ) null ) ;
Distance : 8

63
Tree	GeneralPath GeneralPath = p2 . GeneralPath ( null ) ;
Code	GeneralPath GeneralPath = p2 . GeneralPath ( null ) ;
Distance : 3

64
Tree	GeneralPath next = p1 . GeneralPath ( p1 , this . GeneralPath ) ;
Code	GeneralPath next = p1 . GeneralPath ( p1 , this . GeneralPath ) ;
Distance : 9

65
Tree	GeneralPath iterator2 = p1 . p1 ( null ) ;
Code	GeneralPath iterator2 = p1 . p1 ( null ) ;
Distance : 3

66
Tree	GeneralPath d2 = p1 . GeneralPath () ;
Code	GeneralPath d2 = p1 . GeneralPath () ;
Distance : 7

67
Tree	GeneralPath GeneralPath = p1 . getPathIterator ( p1 , this . GeneralPath ) ;
Code	GeneralPath GeneralPath = p1 . getPathIterator ( p1 , this . GeneralPath ) ;
Distance : 8

68
Tree	GeneralPath d2 = p1 . GeneralPath ( null ) ;
Code	GeneralPath d2 = p1 . GeneralPath ( null ) ;
Distance : 4

69
Tree	PathIterator GeneralPath = p1 . GeneralPath () ;
Code	PathIterator GeneralPath = p1 . GeneralPath () ;
Distance : 6

70
Tree	GeneralPath d2 = p1 . GeneralPath ( null , null ) ;
Code	GeneralPath d2 = p1 . GeneralPath ( null , null ) ;
Distance : 6

71
Tree	PathIterator GeneralPath = p1 . GeneralPath ( null , null ) ;
Code	PathIterator GeneralPath = p1 . GeneralPath ( null , null ) ;
Distance : 5

72
Tree	PathIterator GeneralPath = p1 . GeneralPath ( null ) ;
Code	PathIterator GeneralPath = p1 . GeneralPath ( null ) ;
Distance : 3

73
Tree	GeneralPath GeneralPath = p2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	GeneralPath GeneralPath = p2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

74
Tree	GeneralPath iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	GeneralPath iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

75
Tree	GeneralPath iterator2 = p1 . getPathIterator ( null ) ;
Code	GeneralPath iterator2 = p1 . getPathIterator ( null ) ;
Distance : 2

76
Tree	GeneralPath GeneralPath = next ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	GeneralPath GeneralPath = next ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

77
Tree	GeneralPath iterator2 = p1 . GeneralPath ( ( p1 [] ) null ) ;
Code	GeneralPath iterator2 = p1 . GeneralPath ( ( p1 [] ) null ) ;
Distance : 7

78
Tree	GeneralPath iterator2 = p1 . getPathIterator () ;
Code	GeneralPath iterator2 = p1 . getPathIterator () ;
Distance : 5

79
Tree	final GeneralPath GeneralPath = p1 . p1 ( ( p2 [] ) null ) ;
Code	final GeneralPath GeneralPath = p1 . p1 ( ( p2 [] ) null ) ;
Distance : 9

80
Tree	GeneralPath iterator2 = p1 . getPathIterator ( null , null ) ;
Code	GeneralPath iterator2 = p1 . getPathIterator ( null , null ) ;
Distance : 4

81
Tree	GeneralPath iterator2 = p1 . GeneralPath ( p1 ) ;
Code	GeneralPath iterator2 = p1 . GeneralPath ( p1 ) ;
Distance : 4

82
Tree	GeneralPath GeneralPath = getPathIterator ( ( p2 [] ) null ) ;
Code	GeneralPath GeneralPath = getPathIterator ( ( p2 [] ) null ) ;
Distance : 8

83
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( p1 , GeneralPath ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( p1 , GeneralPath ) ;
Distance : 7

84
Tree	synchronized GeneralPath GeneralPath = p1 . GeneralPath ( null ) ;
Code	synchronized GeneralPath GeneralPath = p1 . GeneralPath ( null ) ;
Distance : 5

85
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( ( p1 ) null ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( ( p1 ) null ) ;
Distance : 7

86
Tree	final GeneralPath iterator2 = p1 . GeneralPath ( ( GeneralPath [] ) null ) ;
Code	final GeneralPath iterator2 = p1 . GeneralPath ( ( GeneralPath [] ) null ) ;
Distance : 8

87
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( ( p2 ) null ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( ( p2 ) null ) ;
Distance : 7

88
Tree	GeneralPath GeneralPath = this . p1 . p1 () ;
Code	GeneralPath GeneralPath = this . p1 . p1 () ;
Distance : 7

89
Tree	GeneralPath iterator2 = GeneralPath ( ( GeneralPath [] ) null ) ;
Code	GeneralPath iterator2 = GeneralPath ( ( GeneralPath [] ) null ) ;
Distance : 7

90
Tree	GeneralPath GeneralPath = p1 . p1 ( ( p2 [] ) null ) ;
Code	GeneralPath GeneralPath = p1 . p1 ( ( p2 [] ) null ) ;
Distance : 8

91
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( p1 . class ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( p1 . class ) ;
Distance : 7

92
Tree	final GeneralPath GeneralPath = p1 . GeneralPath ( ( p2 [] ) null ) ;
Code	final GeneralPath GeneralPath = p1 . GeneralPath ( ( p2 [] ) null ) ;
Distance : 9

93
Tree	final GeneralPath GeneralPath = p1 . getPathIterator ( null ) ;
Code	final GeneralPath GeneralPath = p1 . getPathIterator ( null ) ;
Distance : 4

94
Tree	GeneralPath iterator2 = p1 . GeneralPath ( p1 . GeneralPath ( null ) ) ;
Code	GeneralPath iterator2 = p1 . GeneralPath ( p1 . GeneralPath ( null ) ) ;
Distance : 8

95
Tree	final GeneralPath GeneralPath = p1 . p1 ( ( GeneralPath [] ) null ) ;
Code	final GeneralPath GeneralPath = p1 . p1 ( ( GeneralPath [] ) null ) ;
Distance : 9

96
Tree	GeneralPath GeneralPath = this . p2 . GeneralPath () ;
Code	GeneralPath GeneralPath = this . p2 . GeneralPath () ;
Distance : 7

97
Tree	GeneralPath GeneralPath = GeneralPath ( ( p1 [] ) null ) ;
Code	GeneralPath GeneralPath = GeneralPath ( ( p1 [] ) null ) ;
Distance : 8

98
Tree	final GeneralPath GeneralPath = p1 . GeneralPath ( ( GeneralPath [] ) null ) ;
Code	final GeneralPath GeneralPath = p1 . GeneralPath ( ( GeneralPath [] ) null ) ;
Distance : 9

99
Tree	GeneralPath GeneralPath = GeneralPath ( p1 . GeneralPath ( null ) ) ;
Code	GeneralPath GeneralPath = GeneralPath ( p1 . GeneralPath ( null ) ) ;
Distance : 7

100
Tree	GeneralPath iterator2 = GeneralPath ( ( p2 [] ) null ) ;
Code	GeneralPath iterator2 = GeneralPath ( ( p2 [] ) null ) ;
Distance : 7

101
Tree	GeneralPath iterator2 = p1 . getPathIterator ( STRING_CONSTANT ) ;
Code	GeneralPath iterator2 = p1 . getPathIterator ( STRING_CONSTANT ) ;
Distance : 3

102
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( p1 . p1 ( null ) ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( p1 . p1 ( null ) ) ;
Distance : 9

103
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( p1 . getPathIterator ( null ) ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( p1 . getPathIterator ( null ) ) ;
Distance : 8

104
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( p2 , GeneralPath ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( p2 , GeneralPath ) ;
Distance : 7

105
Tree	GeneralPath GeneralPath = GeneralPath ( p1 . p2 ( null ) ) ;
Code	GeneralPath GeneralPath = GeneralPath ( p1 . p2 ( null ) ) ;
Distance : 7

106
Tree	GeneralPath GeneralPath = p1 . p1 ( p1 . p1 ( null ) ) ;
Code	GeneralPath GeneralPath = p1 . p1 ( p1 . p1 ( null ) ) ;
Distance : 9

107
Tree	abstract GeneralPath GeneralPath = p1 . p1 ( null ) ;
Code	abstract GeneralPath GeneralPath = p1 . p1 ( null ) ;
Distance : 5

108
Tree	GeneralPath GeneralPath = GeneralPath ( p1 . p1 ( null ) ) ;
Code	GeneralPath GeneralPath = GeneralPath ( p1 . p1 ( null ) ) ;
Distance : 7

109
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( equals , GeneralPath ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( equals , GeneralPath ) ;
Distance : 7

110
Tree	GeneralPath iterator2 = p1 . GeneralPath ( p1 , GeneralPath ) ;
Code	GeneralPath iterator2 = p1 . GeneralPath ( p1 , GeneralPath ) ;
Distance : 6

111
Tree	GeneralPath GeneralPath = p1 . p1 ( p1 . GeneralPath ( null ) ) ;
Code	GeneralPath GeneralPath = p1 . p1 ( p1 . GeneralPath ( null ) ) ;
Distance : 9

112
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( p2 . p1 ( null ) ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( p2 . p1 ( null ) ) ;
Distance : 8

113
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( d1 , this . GeneralPath ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( d1 , this . GeneralPath ) ;
Distance : 9

114
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( p1 . p2 ( null ) ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( p1 . p2 ( null ) ) ;
Distance : 9

115
Tree	GeneralPath iterator2 = GeneralPath ( p1 . GeneralPath ( null ) ) ;
Code	GeneralPath iterator2 = GeneralPath ( p1 . GeneralPath ( null ) ) ;
Distance : 6

116
Tree	final GeneralPath GeneralPath = p1 . GeneralPath ( ( p1 [] ) null ) ;
Code	final GeneralPath GeneralPath = p1 . GeneralPath ( ( p1 [] ) null ) ;
Distance : 9

117
Tree	GeneralPath GeneralPath = p1 . getPathIterator ( NUMBER_CONSTANT ) ;
Code	GeneralPath GeneralPath = p1 . getPathIterator ( NUMBER_CONSTANT ) ;
Distance : 4

118
Tree	GeneralPath next = p1 . GeneralPath () ;
Code	GeneralPath next = p1 . GeneralPath () ;
Distance : 7

119
Tree	GeneralPath iterator2 = GeneralPath ( p2 . GeneralPath ( null ) ) ;
Code	GeneralPath iterator2 = GeneralPath ( p2 . GeneralPath ( null ) ) ;
Distance : 5

120
Tree	GeneralPath iterator2 = p1 . GeneralPath ( ( p2 [] ) null ) ;
Code	GeneralPath iterator2 = p1 . GeneralPath ( ( p2 [] ) null ) ;
Distance : 7

121
Tree	abstract GeneralPath iterator2 = p1 . GeneralPath ( null ) ;
Code	abstract GeneralPath iterator2 = p1 . GeneralPath ( null ) ;
Distance : 4

122
Tree	GeneralPath iterator2 = p1 . GeneralPath ( p1 , this . GeneralPath ) ;
Code	GeneralPath iterator2 = p1 . GeneralPath ( p1 , this . GeneralPath ) ;
Distance : 8

123
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( NUMBER_CONSTANT ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( NUMBER_CONSTANT ) ;
Distance : 5

124
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( STRING_CONSTANT , true ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( STRING_CONSTANT , true ) ;
Distance : 7

125
Tree	GeneralPath GeneralPath = GeneralPath ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	GeneralPath GeneralPath = GeneralPath ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

126
Tree	GeneralPath next = p1 . GeneralPath ( NUMBER_CONSTANT ) ;
Code	GeneralPath next = p1 . GeneralPath ( NUMBER_CONSTANT ) ;
Distance : 5

127
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( ( GeneralPath [] ) null ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( ( GeneralPath [] ) null ) ;
Distance : 8

128
Tree	GeneralPath GeneralPath = p1 . getPathIterator ( STRING_CONSTANT ) ;
Code	GeneralPath GeneralPath = p1 . getPathIterator ( STRING_CONSTANT ) ;
Distance : 4

129
Tree	GeneralPath next = p1 . GeneralPath ( null , null ) ;
Code	GeneralPath next = p1 . GeneralPath ( null , null ) ;
Distance : 6

130
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( equals . p1 ( null ) ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( equals . p1 ( null ) ) ;
Distance : 9

131
Tree	GeneralPath next = p1 . GeneralPath ( p1 , GeneralPath ) ;
Code	GeneralPath next = p1 . GeneralPath ( p1 , GeneralPath ) ;
Distance : 7

132
Tree	GeneralPath iterator2 = GeneralPath ( p1 . p1 ( null ) ) ;
Code	GeneralPath iterator2 = GeneralPath ( p1 . p1 ( null ) ) ;
Distance : 6

133
Tree	GeneralPath iterator2 = p1 . p1 ( null , null ) ;
Code	GeneralPath iterator2 = p1 . p1 ( null , null ) ;
Distance : 5

134
Tree	GeneralPath d2 = GeneralPath ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	GeneralPath d2 = GeneralPath ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

135
Tree	GeneralPath GeneralPath = p2 . GeneralPath ( p1 ) ;
Code	GeneralPath GeneralPath = p2 . GeneralPath ( p1 ) ;
Distance : 4

136
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( STRING_CONSTANT ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( STRING_CONSTANT ) ;
Distance : 5

137
Tree	GeneralPath GeneralPath = p1 . GeneralPath () ;
Code	GeneralPath GeneralPath = p1 . GeneralPath () ;
Distance : 7

138
Tree	GeneralPath iterator2 = p1 . p1 ( NUMBER_CONSTANT ) ;
Code	GeneralPath iterator2 = p1 . p1 ( NUMBER_CONSTANT ) ;
Distance : 4

139
Tree	GeneralPath iterator2 = p1 . GeneralPath ( p1 , this . iterator2 ) ;
Code	GeneralPath iterator2 = p1 . GeneralPath ( p1 , this . iterator2 ) ;
Distance : 8

140
Tree	GeneralPath GeneralPath = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	GeneralPath GeneralPath = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

141
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( ( p1 [] ) null ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( ( p1 [] ) null ) ;
Distance : 8

142
Tree	GeneralPath GeneralPath = p1 . p1 ( ( GeneralPath [] ) null ) ;
Code	GeneralPath GeneralPath = p1 . p1 ( ( GeneralPath [] ) null ) ;
Distance : 8

143
Tree	GeneralPath GeneralPath = p1 . getPathIterator () ;
Code	GeneralPath GeneralPath = p1 . getPathIterator () ;
Distance : 6

144
Tree	PathIterator GeneralPath = GeneralPath ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	PathIterator GeneralPath = GeneralPath ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

145
Tree	GeneralPath iterator2 = p1 . getPathIterator ( NUMBER_CONSTANT ) ;
Code	GeneralPath iterator2 = p1 . getPathIterator ( NUMBER_CONSTANT ) ;
Distance : 3

146
Tree	GeneralPath iterator2 = p1 . p1 ( p1 ) ;
Code	GeneralPath iterator2 = p1 . p1 ( p1 ) ;
Distance : 4

147
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( equals . class ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( equals . class ) ;
Distance : 7

148
Tree	GeneralPath next = p1 . GeneralPath ( ( p1 ) null ) ;
Code	GeneralPath next = p1 . GeneralPath ( ( p1 ) null ) ;
Distance : 7

149
Tree	GeneralPath iterator2 = p1 . GeneralPath ( ( p1 ) null ) ;
Code	GeneralPath iterator2 = p1 . GeneralPath ( ( p1 ) null ) ;
Distance : 6

150
Tree	GeneralPath iterator2 = p1 . GeneralPath ( p1 . class ) ;
Code	GeneralPath iterator2 = p1 . GeneralPath ( p1 . class ) ;
Distance : 6

151
Tree	GeneralPath GeneralPath = GeneralPath ( p2 . GeneralPath ( null ) ) ;
Code	GeneralPath GeneralPath = GeneralPath ( p2 . GeneralPath ( null ) ) ;
Distance : 6

152
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( p1 . GeneralPath ( null ) ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( p1 . GeneralPath ( null ) ) ;
Distance : 9

153
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( null , null ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( null , null ) ;
Distance : 6

154
Tree	GeneralPath next = p1 . GeneralPath ( STRING_CONSTANT , true ) ;
Code	GeneralPath next = p1 . GeneralPath ( STRING_CONSTANT , true ) ;
Distance : 7

155
Tree	GeneralPath GeneralPath = p1 . getPathIterator ( null , null ) ;
Code	GeneralPath GeneralPath = p1 . getPathIterator ( null , null ) ;
Distance : 5

156
Tree	GeneralPath GeneralPath = p1 . getPathIterator ( p1 , GeneralPath ) ;
Code	GeneralPath GeneralPath = p1 . getPathIterator ( p1 , GeneralPath ) ;
Distance : 6

157
Tree	GeneralPath GeneralPath = p1 . getPathIterator ( STRING_CONSTANT , true ) ;
Code	GeneralPath GeneralPath = p1 . getPathIterator ( STRING_CONSTANT , true ) ;
Distance : 6

158
Tree	GeneralPath d2 = p1 . GeneralPath ( STRING_CONSTANT ) ;
Code	GeneralPath d2 = p1 . GeneralPath ( STRING_CONSTANT ) ;
Distance : 5

159
Tree	GeneralPath GeneralPath = p1 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	GeneralPath GeneralPath = p1 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

160
Tree	PathIterator GeneralPath = p1 . GeneralPath ( STRING_CONSTANT ) ;
Code	PathIterator GeneralPath = p1 . GeneralPath ( STRING_CONSTANT ) ;
Distance : 4

161
Tree	private GeneralPath GeneralPath = p1 . GeneralPath ( null ) ;
Code	private GeneralPath GeneralPath = p1 . GeneralPath ( null ) ;
Distance : 5

162
Tree	GeneralPath iterator2 = p1 . GeneralPath ( NUMBER_CONSTANT ) ;
Code	GeneralPath iterator2 = p1 . GeneralPath ( NUMBER_CONSTANT ) ;
Distance : 4

163
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( ( next [] ) null ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( ( next [] ) null ) ;
Distance : 8

164
Tree	GeneralPath next = p1 . GeneralPath ( ( p2 [] ) null ) ;
Code	GeneralPath next = p1 . GeneralPath ( ( p2 [] ) null ) ;
Distance : 8

165
Tree	GeneralPath iterator2 = p1 . GeneralPath ( STRING_CONSTANT , true ) ;
Code	GeneralPath iterator2 = p1 . GeneralPath ( STRING_CONSTANT , true ) ;
Distance : 6

166
Tree	GeneralPath iterator2 = this . GeneralPath . GeneralPath () ;
Code	GeneralPath iterator2 = this . GeneralPath . GeneralPath () ;
Distance : 6

167
Tree	GeneralPath iterator2 = p1 . GeneralPath ( p1 , PathIterator ) ;
Code	GeneralPath iterator2 = p1 . GeneralPath ( p1 , PathIterator ) ;
Distance : 6

168
Tree	GeneralPath next = p1 . GeneralPath ( p1 . class ) ;
Code	GeneralPath next = p1 . GeneralPath ( p1 . class ) ;
Distance : 7

169
Tree	GeneralPath GeneralPath = p1 . getPathIterator ( ( p1 ) null ) ;
Code	GeneralPath GeneralPath = p1 . getPathIterator ( ( p1 ) null ) ;
Distance : 6

170
Tree	GeneralPath next = GeneralPath ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	GeneralPath next = GeneralPath ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

171
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( d1 , GeneralPath ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( d1 , GeneralPath ) ;
Distance : 7

172
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( p1 ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( p1 ) ;
Distance : 5

173
Tree	final GeneralPath iterator2 = p1 . GeneralPath ( null ) ;
Code	final GeneralPath iterator2 = p1 . GeneralPath ( null ) ;
Distance : 4

174
Tree	final GeneralPath iterator2 = p1 . p1 ( null ) ;
Code	final GeneralPath iterator2 = p1 . p1 ( null ) ;
Distance : 4

175
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( p1 , this . iterator2 ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( p1 , this . iterator2 ) ;
Distance : 9

176
Tree	GeneralPath GeneralPath = p1 . p1 ( p1 ) ;
Code	GeneralPath GeneralPath = p1 . p1 ( p1 ) ;
Distance : 5

177
Tree	GeneralPath GeneralPath = p1 . p1 ( ( p2 ) null ) ;
Code	GeneralPath GeneralPath = p1 . p1 ( ( p2 ) null ) ;
Distance : 7

178
Tree	GeneralPath iterator2 = p1 . GeneralPath ( STRING_CONSTANT , false ) ;
Code	GeneralPath iterator2 = p1 . GeneralPath ( STRING_CONSTANT , false ) ;
Distance : 6

179
Tree	abstract GeneralPath GeneralPath = p1 . GeneralPath ( null ) ;
Code	abstract GeneralPath GeneralPath = p1 . GeneralPath ( null ) ;
Distance : 5

180
Tree	GeneralPath iterator2 = p1 . GeneralPath ( ( GeneralPath [] ) null ) ;
Code	GeneralPath iterator2 = p1 . GeneralPath ( ( GeneralPath [] ) null ) ;
Distance : 7

181
Tree	GeneralPath iterator2 = GeneralPath ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	GeneralPath iterator2 = GeneralPath ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

182
Tree	GeneralPath GeneralPath = this . GeneralPath . GeneralPath () ;
Code	GeneralPath GeneralPath = this . GeneralPath . GeneralPath () ;
Distance : 7

183
Tree	GeneralPath GeneralPath = p1 . getPathIterator ( p1 . class ) ;
Code	GeneralPath GeneralPath = p1 . getPathIterator ( p1 . class ) ;
Distance : 6

184
Tree	GeneralPath next = p1 . GeneralPath ( STRING_CONSTANT ) ;
Code	GeneralPath next = p1 . GeneralPath ( STRING_CONSTANT ) ;
Distance : 5

185
Tree	GeneralPath GeneralPath = p2 . GeneralPath ( STRING_CONSTANT , true ) ;
Code	GeneralPath GeneralPath = p2 . GeneralPath ( STRING_CONSTANT , true ) ;
Distance : 6

186
Tree	final GeneralPath GeneralPath = p1 . p1 ( null ) ;
Code	final GeneralPath GeneralPath = p1 . p1 ( null ) ;
Distance : 5

187
Tree	GeneralPath iterator2 = p1 . GeneralPath ( STRING_CONSTANT ) ;
Code	GeneralPath iterator2 = p1 . GeneralPath ( STRING_CONSTANT ) ;
Distance : 4

188
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( p2 ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( p2 ) ;
Distance : 5

189
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( d1 . class ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( d1 . class ) ;
Distance : 7

190
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( p1 , GeneralPath . GeneralPath ( null ) ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( p1 , GeneralPath . GeneralPath ( null ) ) ;
Distance : 11

191
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( p1 , GeneralPath . p1 ( null ) ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( p1 , GeneralPath . p1 ( null ) ) ;
Distance : 11

192
Tree	GeneralPath iterator2 = p1 . GeneralPath ( p1 , GeneralPath . GeneralPath ( null ) ) ;
Code	GeneralPath iterator2 = p1 . GeneralPath ( p1 , GeneralPath . GeneralPath ( null ) ) ;
Distance : 10

193
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( p1 , p1 . GeneralPath ( null ) ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( p1 , p1 . GeneralPath ( null ) ) ;
Distance : 11

194
Tree	GeneralPath iterator2 = p1 . GeneralPath ( p1 , GeneralPath . p1 ( null ) ) ;
Code	GeneralPath iterator2 = p1 . GeneralPath ( p1 , GeneralPath . p1 ( null ) ) ;
Distance : 10

195
Tree	GeneralPath GeneralPath = p1 . p1 ( p1 , GeneralPath . GeneralPath ( null ) ) ;
Code	GeneralPath GeneralPath = p1 . p1 ( p1 , GeneralPath . GeneralPath ( null ) ) ;
Distance : 11

196
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( p1 , iterator2 . p1 ( null ) ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( p1 , iterator2 . p1 ( null ) ) ;
Distance : 11

197
Tree	GeneralPath iterator2 = p1 . GeneralPath ( p1 , iterator2 . GeneralPath ( null ) ) ;
Code	GeneralPath iterator2 = p1 . GeneralPath ( p1 , iterator2 . GeneralPath ( null ) ) ;
Distance : 10

198
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( p1 , GeneralPath . getPathIterator ( null ) ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( p1 , GeneralPath . getPathIterator ( null ) ) ;
Distance : 10

199
Tree	GeneralPath GeneralPath = p1 . GeneralPath ( p2 , GeneralPath . GeneralPath ( null ) ) ;
Code	GeneralPath GeneralPath = p1 . GeneralPath ( p2 , GeneralPath . GeneralPath ( null ) ) ;
Distance : 10

========================================================================


========================================================================
Example Number: 7
Parent Code is: 
{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; }
-------------------------------------------------------------------------------
Child code is: 
{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (800{val=toolTipText}) (200{val=+}) (45{val=STRING_CONSTANT})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=ImageMapUtilities}) (235{val=.}) (802{val=htmlEscape}) (214{val=(}) (800{val=toolTipText}) (215{val=)})) (200{val=+}) (45{val=STRING_CONSTANT})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/10/parent/source_org_jfree_chart_imagemap_StandardToolTipTagFragmentGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	{ return false ; } Test
Code	{ return false ; } Test
Distance : 11

1
Tree	{ return ( long ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( long ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

2
Tree	{ return toolTipText . htmlEscape ( toolTipText , htmlEscape ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , htmlEscape ) ; }
Distance : 6

3
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText , String ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText , String ) ; }
Distance : 7

4
Tree	{ return toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 6

5
Tree	{ return toolTipText . htmlEscape ( htmlEscape , String ) ; }
Code	{ return toolTipText . htmlEscape ( htmlEscape , String ) ; }
Distance : 7

6
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , htmlEscape ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , htmlEscape ) ; }
Distance : 7

7
Tree	{ return STRING_CONSTANT + htmlEscape . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + htmlEscape . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Distance : 3

8
Tree	{ return STRING_CONSTANT + toolTipText . ImageMapUtilities () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . ImageMapUtilities () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Distance : 3

9
Tree	{ return STRING_CONSTANT + toolTipText . toolTipText () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . toolTipText () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Distance : 4

10
Tree	{ return false ; } Class
Code	{ return false ; } Class
Distance : 11

11
Tree	{ return toolTipText ; } value
Code	{ return toolTipText ; } value
Distance : 10

12
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

13
Tree	{ return toolTipText ; } Math
Code	{ return toolTipText ; } Math
Distance : 10

14
Tree	{ return ( char ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( char ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

15
Tree	{ return toolTipText ; } p
Code	{ return toolTipText ; } p
Distance : 10

16
Tree	{ return toolTipText . htmlEscape ( toolTipText , htmlEscape ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , htmlEscape ) ; }
Distance : 6

17
Tree	{ return false ; } MathRuntimeException
Code	{ return false ; } MathRuntimeException
Distance : 11

18
Tree	{ return ImageMapUtilities ; }
Code	{ return ImageMapUtilities ; }
Distance : 9

19
Tree	{ return ( byte ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( byte ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

20
Tree	{ return htmlEscape ; }
Code	{ return htmlEscape ; }
Distance : 9

21
Tree	{ return ! toolTipText . htmlEscape ( htmlEscape ) ; }
Code	{ return ! toolTipText . htmlEscape ( htmlEscape ) ; }
Distance : 6

22
Tree	{ return ! ImageMapUtilities . toolTipText ( toolTipText ) ; }
Code	{ return ! ImageMapUtilities . toolTipText ( toolTipText ) ; }
Distance : 5

23
Tree	{ return ! toolTipText . ImageMapUtilities ( toolTipText ) ; }
Code	{ return ! toolTipText . ImageMapUtilities ( toolTipText ) ; }
Distance : 6

24
Tree	{ return toolTipText . STRING_CONSTANT ( toolTipText ) ; }
Code	{ return toolTipText . STRING_CONSTANT ( toolTipText ) ; }
Distance : 6

25
Tree	{ return toolTipText . STRING_CONSTANT ( toolTipText , toolTipText ) ; }
Code	{ return toolTipText . STRING_CONSTANT ( toolTipText , toolTipText ) ; }
Distance : 7

26
Tree	{ return htmlEscape . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return htmlEscape . htmlEscape ( ImageMapUtilities ) ; }
Distance : 6

27
Tree	{ return new htmlEscape ( htmlEscape ) ; }
Code	{ return new htmlEscape ( htmlEscape ) ; }
Distance : 7

28
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Distance : 1

29
Tree	{ return htmlEscape . ImageMapUtilities ( toolTipText , toolTipText ) ; }
Code	{ return htmlEscape . ImageMapUtilities ( toolTipText , toolTipText ) ; }
Distance : 7

30
Tree	{ return htmlEscape . ImageMapUtilities ( toolTipText ) ; }
Code	{ return htmlEscape . ImageMapUtilities ( toolTipText ) ; }
Distance : 6

31
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities ) ; }
Distance : 6

32
Tree	{ return new String ( String ) ; }
Code	{ return new String ( String ) ; }
Distance : 8

33
Tree	{ return htmlEscape . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return htmlEscape . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

34
Tree	{ return toolTipText . htmlEscape ( htmlEscape , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( htmlEscape , toolTipText ) ; }
Distance : 7

35
Tree	{ return STRING_CONSTANT + htmlEscape . ImageMapUtilities ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + htmlEscape . ImageMapUtilities ( toolTipText ) + STRING_CONSTANT ; }
Distance : 2

36
Tree	{ return STRING_CONSTANT ( htmlEscape , toolTipText ) ; }
Code	{ return STRING_CONSTANT ( htmlEscape , toolTipText ) ; }
Distance : 6

37
Tree	{ return htmlEscape () . ImageMapUtilities ( toolTipText , toolTipText ) ; }
Code	{ return htmlEscape () . ImageMapUtilities ( toolTipText , toolTipText ) ; }
Distance : 7

38
Tree	{ return htmlEscape . htmlEscape ( toolTipText ) ; }
Code	{ return htmlEscape . htmlEscape ( toolTipText ) ; }
Distance : 5

39
Tree	{ return toolTipText . ImageMapUtilities ( htmlEscape , toolTipText ) ; }
Code	{ return toolTipText . ImageMapUtilities ( htmlEscape , toolTipText ) ; }
Distance : 6

40
Tree	{ return toolTipText . htmlEscape ( htmlEscape ) ; }
Code	{ return toolTipText . htmlEscape ( htmlEscape ) ; }
Distance : 6

41
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 2

42
Tree	{ return toolTipText . ImageMapUtilities ( toolTipText ) ; }
Code	{ return toolTipText . ImageMapUtilities ( toolTipText ) ; }
Distance : 6

43
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Distance : 1

44
Tree	{ return ImageMapUtilities ( htmlEscape , toolTipText ) ; }
Code	{ return ImageMapUtilities ( htmlEscape , toolTipText ) ; }
Distance : 6

45
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText ) ; }
Distance : 4

46
Tree	{ return toolTipText ( toolTipText , toolTipText ) ; }
Code	{ return toolTipText ( toolTipText , toolTipText ) ; }
Distance : 8

47
Tree	{ return toolTipText . htmlEscape ( htmlEscape ) ; }
Code	{ return toolTipText . htmlEscape ( htmlEscape ) ; }
Distance : 6

48
Tree	{ return ImageMapUtilities . htmlEscape ( htmlEscape , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( htmlEscape , toolTipText ) ; }
Distance : 6

49
Tree	{ return toolTipText . STRING_CONSTANT ( toolTipText , null , toolTipText ) ; }
Code	{ return toolTipText . STRING_CONSTANT ( toolTipText , null , toolTipText ) ; }
Distance : 9

50
Tree	{ return toolTipText . ImageMapUtilities ( htmlEscape ) ; }
Code	{ return toolTipText . ImageMapUtilities ( htmlEscape ) ; }
Distance : 7

51
Tree	{ return ! toolTipText . toolTipText ( htmlEscape ) ; }
Code	{ return ! toolTipText . toolTipText ( htmlEscape ) ; }
Distance : 7

52
Tree	{ return STRING_CONSTANT ( ImageMapUtilities , toolTipText ) ; }
Code	{ return STRING_CONSTANT ( ImageMapUtilities , toolTipText ) ; }
Distance : 6

53
Tree	{ return STRING_CONSTANT + htmlEscape . htmlEscape ( htmlEscape , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + htmlEscape . htmlEscape ( htmlEscape , toolTipText ) + STRING_CONSTANT ; }
Distance : 3

54
Tree	{ return htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

55
Tree	{ return toolTipText . toolTipText ( toolTipText ) ; }
Code	{ return toolTipText . toolTipText ( toolTipText ) ; }
Distance : 6

56
Tree	{ return ( float ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( float ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

57
Tree	{ return ( int ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( int ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

58
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Distance : 3

59
Tree	{ return ImageMapUtilities ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ImageMapUtilities ( ImageMapUtilities , toolTipText ) ; }
Distance : 7

60
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 9

61
Tree	{ return STRING_CONSTANT + htmlEscape . ImageMapUtilities ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + htmlEscape . ImageMapUtilities ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Distance : 4

62
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Distance : 3

63
Tree	{ return toolTipText . ImageMapUtilities ( toolTipText , toolTipText ) ; }
Code	{ return toolTipText . ImageMapUtilities ( toolTipText , toolTipText ) ; }
Distance : 7

64
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 5

65
Tree	{ return toolTipText . htmlEscape ( htmlEscape , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( htmlEscape , toolTipText ) ; }
Distance : 7

66
Tree	{ return toolTipText . toolTipText ( toolTipText , toolTipText ) ; }
Code	{ return toolTipText . toolTipText ( toolTipText , toolTipText ) ; }
Distance : 7

67
Tree	{ return STRING_CONSTANT () . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return STRING_CONSTANT () . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 5

68
Tree	{ return new String ( toolTipText ) ; }
Code	{ return new String ( toolTipText ) ; }
Distance : 7

69
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 7

70
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape ( toolTipText ) ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape ( toolTipText ) ) ; }
Distance : 9

71
Tree	{ return STRING_CONSTANT + toolTipText . ImageMapUtilities ( new String () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . ImageMapUtilities ( new String () ) + STRING_CONSTANT ; }
Distance : 5

72
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , htmlEscape ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , htmlEscape ) + STRING_CONSTANT ; }
Distance : 3

73
Tree	{ return toolTipText . htmlEscape ( htmlEscape , htmlEscape ) ; }
Code	{ return toolTipText . htmlEscape ( htmlEscape , htmlEscape ) ; }
Distance : 7

74
Tree	{ return ImageMapUtilities () . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ImageMapUtilities () . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

75
Tree	{ return ! htmlEscape . htmlEscape ( toolTipText ) ; }
Code	{ return ! htmlEscape . htmlEscape ( toolTipText ) ; }
Distance : 5

76
Tree	{ return htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 7

77
Tree	{ return htmlEscape . htmlEscape ( toolTipText , toolTipText . htmlEscape ( htmlEscape ) ) ; }
Code	{ return htmlEscape . htmlEscape ( toolTipText , toolTipText . htmlEscape ( htmlEscape ) ) ; }
Distance : 10

78
Tree	{ return STRING_CONSTANT + htmlEscape . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + htmlEscape . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Distance : 1

79
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape ( String ) ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape ( String ) ) ; }
Distance : 10

80
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities ) ; }
Distance : 6

81
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new ImageMapUtilities () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new ImageMapUtilities () ) + STRING_CONSTANT ; }
Distance : 4

82
Tree	{ return STRING_CONSTANT + toolTipText . toolTipText ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . toolTipText ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Distance : 4

83
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText , htmlEscape ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText , htmlEscape ) ; }
Distance : 7

84
Tree	{ return toolTipText . ImageMapUtilities ( toolTipText , toolTipText . htmlEscape ( toolTipText ) ) ; }
Code	{ return toolTipText . ImageMapUtilities ( toolTipText , toolTipText . htmlEscape ( toolTipText ) ) ; }
Distance : 8

85
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Distance : 0

86
Tree	{ return toolTipText . ImageMapUtilities ( toolTipText , null , toolTipText ) ; }
Code	{ return toolTipText . ImageMapUtilities ( toolTipText , null , toolTipText ) ; }
Distance : 9

87
Tree	{ return ImageMapUtilities ; }
Code	{ return ImageMapUtilities ; }
Distance : 9

88
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Distance : 2

89
Tree	{ return ! htmlEscape . toolTipText ( toolTipText ) ; }
Code	{ return ! htmlEscape . toolTipText ( toolTipText ) ; }
Distance : 6

90
Tree	{ return toolTipText . htmlEscape ( String , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( String , toolTipText ) ; }
Distance : 7

91
Tree	{ return htmlEscape . htmlEscape ( toolTipText , toolTipText , htmlEscape ) ; }
Code	{ return htmlEscape . htmlEscape ( toolTipText , toolTipText , htmlEscape ) ; }
Distance : 8

92
Tree	{ return new htmlEscape ( ImageMapUtilities ) ; }
Code	{ return new htmlEscape ( ImageMapUtilities ) ; }
Distance : 7

93
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

94
Tree	{ return htmlEscape . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return htmlEscape . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 7

95
Tree	{ return toolTipText . ImageMapUtilities ( toolTipText , toolTipText . htmlEscape ( String ) ) ; }
Code	{ return toolTipText . ImageMapUtilities ( toolTipText , toolTipText . htmlEscape ( String ) ) ; }
Distance : 9

96
Tree	{ return htmlEscape . htmlEscape ( toolTipText ) ; }
Code	{ return htmlEscape . htmlEscape ( toolTipText ) ; }
Distance : 5

97
Tree	{ return toolTipText . htmlEscape ( toolTipText , null , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , null , toolTipText ) ; }
Distance : 8

98
Tree	{ return new ImageMapUtilities ( htmlEscape ) ; }
Code	{ return new ImageMapUtilities ( htmlEscape ) ; }
Distance : 7

99
Tree	{ return STRING_CONSTANT + htmlEscape . htmlEscape ( htmlEscape ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + htmlEscape . htmlEscape ( htmlEscape ) + STRING_CONSTANT ; }
Distance : 2

100
Tree	{ return STRING_CONSTANT + htmlEscape . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + htmlEscape . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Distance : 4

101
Tree	{ return String ; }
Code	{ return String ; }
Distance : 10

102
Tree	{ return toolTipText . htmlEscape ( String ) ; }
Code	{ return toolTipText . htmlEscape ( String ) ; }
Distance : 6

103
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Distance : 7

104
Tree	{ return STRING_CONSTANT + htmlEscape . htmlEscape ( new ImageMapUtilities () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + htmlEscape . htmlEscape ( new ImageMapUtilities () ) + STRING_CONSTANT ; }
Distance : 4

105
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape () . toolTipText ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape () . toolTipText ( toolTipText ) + STRING_CONSTANT ; }
Distance : 4

106
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new toolTipText () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new toolTipText () ) + STRING_CONSTANT ; }
Distance : 3

107
Tree	{ return htmlEscape () . String ( toolTipText , toolTipText ) ; }
Code	{ return htmlEscape () . String ( toolTipText , toolTipText ) ; }
Distance : 7

108
Tree	{ return toolTipText . htmlEscape ( + , ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( + , ImageMapUtilities ) ; }
Distance : 7

109
Tree	{ return toolTipText . htmlEscape ( toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText ) ; }
Distance : 5

110
Tree	{ return STRING_CONSTANT . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return STRING_CONSTANT . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 7

111
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , String ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , String ) ; }
Distance : 7

112
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new htmlEscape () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new htmlEscape () ) + STRING_CONSTANT ; }
Distance : 4

113
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape () . STRING_CONSTANT ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape () . STRING_CONSTANT ( toolTipText ) + STRING_CONSTANT ; }
Distance : 4

114
Tree	{ return STRING_CONSTANT . htmlEscape ( toolTipText , toolTipText , htmlEscape ) ; }
Code	{ return STRING_CONSTANT . htmlEscape ( toolTipText , toolTipText , htmlEscape ) ; }
Distance : 7

115
Tree	{ return new String ( ImageMapUtilities ) ; }
Code	{ return new String ( ImageMapUtilities ) ; }
Distance : 8

116
Tree	{ return STRING_CONSTANT + htmlEscape . htmlEscape ( new String () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + htmlEscape . htmlEscape ( new String () ) + STRING_CONSTANT ; }
Distance : 4

117
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape ( htmlEscape ) ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape ( htmlEscape ) ) ; }
Distance : 10

118
Tree	{ return toolTipText . htmlEscape ( toolTipText , null , htmlEscape ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , null , htmlEscape ) ; }
Distance : 8

119
Tree	{ return ImageMapUtilities . htmlEscape ( htmlEscape ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( htmlEscape ) ; }
Distance : 5

120
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( htmlEscape ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( htmlEscape ) + STRING_CONSTANT ; }
Distance : 2

121
Tree	{ return htmlEscape . htmlEscape ( toolTipText , null , toolTipText ) ; }
Code	{ return htmlEscape . htmlEscape ( toolTipText , null , toolTipText ) ; }
Distance : 8

122
Tree	{ return htmlEscape . htmlEscape ( toolTipText , toolTipText , String ) ; }
Code	{ return htmlEscape . htmlEscape ( toolTipText , toolTipText , String ) ; }
Distance : 8

123
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , null , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , null , toolTipText ) ; }
Distance : 7

124
Tree	{ return STRING_CONSTANT + toolTipText . ImageMapUtilities ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . ImageMapUtilities ( toolTipText ) + STRING_CONSTANT ; }
Distance : 2

125
Tree	{ return toolTipText . htmlEscape ( htmlEscape , null , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( htmlEscape , null , toolTipText ) ; }
Distance : 9

126
Tree	{ return htmlEscape . htmlEscape ( toolTipText , toolTipText . htmlEscape ( toolTipText ) ) ; }
Code	{ return htmlEscape . htmlEscape ( toolTipText , toolTipText . htmlEscape ( toolTipText ) ) ; }
Distance : 9

127
Tree	{ return String ; }
Code	{ return String ; }
Distance : 10

128
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText , htmlEscape ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText , htmlEscape ) ; }
Distance : 8

129
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape ( ImageMapUtilities ) ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape ( ImageMapUtilities ) ) ; }
Distance : 10

130
Tree	{ return new String ( htmlEscape ) ; }
Code	{ return new String ( htmlEscape ) ; }
Distance : 8

131
Tree	{ return ( short ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( short ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

132
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape () . ImageMapUtilities ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape () . ImageMapUtilities ( toolTipText ) + STRING_CONSTANT ; }
Distance : 4

133
Tree	{ return toolTipText . toolTipText ( toolTipText , null , toolTipText ) ; }
Code	{ return toolTipText . toolTipText ( toolTipText , null , toolTipText ) ; }
Distance : 9

134
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Distance : 3

135
Tree	{ return toolTipText () . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return toolTipText () . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

136
Tree	{ return htmlEscape . htmlEscape ( toolTipText , toolTipText . htmlEscape ( String ) ) ; }
Code	{ return htmlEscape . htmlEscape ( toolTipText , toolTipText . htmlEscape ( String ) ) ; }
Distance : 10

137
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( htmlEscape ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( htmlEscape ) + STRING_CONSTANT ; }
Distance : 5

138
Tree	{ return toolTipText . htmlEscape ( htmlEscape , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( htmlEscape , toolTipText ) ; }
Distance : 7

139
Tree	{ return false ; }
Code	{ return false ; }
Distance : 10

140
Tree	{ return ( int ) toolTipText . toolTipText ( toolTipText , toolTipText ) ; }
Code	{ return ( int ) toolTipText . toolTipText ( toolTipText , toolTipText ) ; }
Distance : 8

141
Tree	{ return STRING_CONSTANT + htmlEscape . htmlEscape ( new htmlEscape () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + htmlEscape . htmlEscape ( new htmlEscape () ) + STRING_CONSTANT ; }
Distance : 4

142
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

143
Tree	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

144
Tree	{ return toolTipText ; }
Code	{ return toolTipText ; }
Distance : 9

145
Tree	{ return ( int ) toolTipText . ImageMapUtilities ( toolTipText , toolTipText ) ; }
Code	{ return ( int ) toolTipText . ImageMapUtilities ( toolTipText , toolTipText ) ; }
Distance : 8

146
Tree	{ return toolTipText . htmlEscape ( + , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( + , toolTipText ) ; }
Distance : 7

147
Tree	{ return toolTipText . htmlEscape ( + ) ; }
Code	{ return toolTipText . htmlEscape ( + ) ; }
Distance : 6

148
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new String () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new String () ) + STRING_CONSTANT ; }
Distance : 4

149
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( htmlEscape , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( htmlEscape , toolTipText ) + STRING_CONSTANT ; }
Distance : 3

150
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new String () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new String () ) + STRING_CONSTANT ; }
Distance : 3

151
Tree	{ return STRING_CONSTANT + toolTipText . toolTipText ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . toolTipText ( toolTipText ) + STRING_CONSTANT ; }
Distance : 2

152
Tree	{ return ! toolTipText . htmlEscape ( toolTipText ) ; }
Code	{ return ! toolTipText . htmlEscape ( toolTipText ) ; }
Distance : 5

153
Tree	{ return ! toolTipText . htmlEscape ( toolTipText ) ; }
Code	{ return ! toolTipText . htmlEscape ( toolTipText ) ; }
Distance : 5

154
Tree	{ return htmlEscape () . toolTipText ( toolTipText , toolTipText ) ; }
Code	{ return htmlEscape () . toolTipText ( toolTipText , toolTipText ) ; }
Distance : 7

155
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape () . String ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape () . String ( toolTipText ) + STRING_CONSTANT ; }
Distance : 4

156
Tree	{ return toolTipText ; }
Code	{ return toolTipText ; }
Distance : 9

157
Tree	{ return htmlEscape () . return ( toolTipText , toolTipText ) ; }
Code	{ return htmlEscape () . return ( toolTipText , toolTipText ) ; }
Distance : 7

158
Tree	{ return STRING_CONSTANT () . ImageMapUtilities ( toolTipText , toolTipText ) ; }
Code	{ return STRING_CONSTANT () . ImageMapUtilities ( toolTipText , toolTipText ) ; }
Distance : 6

159
Tree	{ return toolTipText . htmlEscape ( toolTipText , null , ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , null , ImageMapUtilities ) ; }
Distance : 8

160
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 7

161
Tree	{ return ImageMapUtilities () . ImageMapUtilities ( toolTipText , toolTipText ) ; }
Code	{ return ImageMapUtilities () . ImageMapUtilities ( toolTipText , toolTipText ) ; }
Distance : 7

162
Tree	{ return false ; } -
Code	{ return false ; } -
Distance : 11

163
Tree	{ return false ; } Preconditions
Code	{ return false ; } Preconditions
Distance : 11

164
Tree	{ return STRING_CONSTANT ( toolTipText , toolTipText ) ; }
Code	{ return STRING_CONSTANT ( toolTipText , toolTipText ) ; }
Distance : 7

165
Tree	{ return STRING_CONSTANT + toolTipText . ImageMapUtilities ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . ImageMapUtilities ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Distance : 4

166
Tree	{ return STRING_CONSTANT . htmlEscape ( toolTipText ) ; }
Code	{ return STRING_CONSTANT . htmlEscape ( toolTipText ) ; }
Distance : 4

167
Tree	{ return htmlEscape . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return htmlEscape . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

168
Tree	{ return ! toolTipText . toolTipText ( toolTipText ) ; }
Code	{ return ! toolTipText . toolTipText ( toolTipText ) ; }
Distance : 6

169
Tree	{ return STRING_CONSTANT . htmlEscape ( toolTipText , toolTipText , String ) ; }
Code	{ return STRING_CONSTANT . htmlEscape ( toolTipText , toolTipText , String ) ; }
Distance : 7

170
Tree	{ return ImageMapUtilities ( toolTipText , toolTipText ) ; }
Code	{ return ImageMapUtilities ( toolTipText , toolTipText ) ; }
Distance : 7

171
Tree	{ return ( double ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( double ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

172
Tree	{ return htmlEscape . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return htmlEscape . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

173
Tree	{ return toolTipText . htmlEscape ( toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText ) ; }
Distance : 5

174
Tree	{ return htmlEscape . htmlEscape ( htmlEscape , toolTipText ) ; }
Code	{ return htmlEscape . htmlEscape ( htmlEscape , toolTipText ) ; }
Distance : 7

175
Tree	{ return htmlEscape ; }
Code	{ return htmlEscape ; }
Distance : 9

176
Tree	{ return true ; }
Code	{ return true ; }
Distance : 10

177
Tree	{ return toolTipText ; } T
Code	{ return toolTipText ; } T
Distance : 10

178
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape ( } ) ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape ( } ) ) ; }
Distance : 10

179
Tree	{ return ImageMapUtilities ; } value
Code	{ return ImageMapUtilities ; } value
Distance : 10

180
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new + () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new + () ) + STRING_CONSTANT ; }
Distance : 4

181
Tree	{ return new ImageMapUtilities ( toolTipText ) ; }
Code	{ return new ImageMapUtilities ( toolTipText ) ; }
Distance : 6

182
Tree	{ return ( int ) htmlEscape . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( int ) htmlEscape . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

183
Tree	{ return htmlEscape ( htmlEscape , toolTipText ) ; }
Code	{ return htmlEscape ( htmlEscape , toolTipText ) ; }
Distance : 7

184
Tree	{ return ImageMapUtilities ; } T
Code	{ return ImageMapUtilities ; } T
Distance : 10

185
Tree	{ return ImageMapUtilities ; } p
Code	{ return ImageMapUtilities ; } p
Distance : 10

186
Tree	{ return ImageMapUtilities ; } Math
Code	{ return ImageMapUtilities ; } Math
Distance : 10

187
Tree	{ return ImageMapUtilities ; } source
Code	{ return ImageMapUtilities ; } source
Distance : 10

188
Tree	{ return toolTipText . htmlEscape ( htmlEscape , ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( htmlEscape , ImageMapUtilities ) ; }
Distance : 7

189
Tree	{ return toolTipText . htmlEscape ( toolTipText , null , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , null , toolTipText ) ; }
Distance : 8

190
Tree	{ return htmlEscape . htmlEscape ( htmlEscape ) ; }
Code	{ return htmlEscape . htmlEscape ( htmlEscape ) ; }
Distance : 6

191
Tree	{ return false ; } f
Code	{ return false ; } f
Distance : 11

192
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 9

193
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Distance : 4

194
Tree	{ return toolTipText ; } source
Code	{ return toolTipText ; } source
Distance : 10

195
Tree	{ return new htmlEscape ( toolTipText ) ; }
Code	{ return new htmlEscape ( toolTipText ) ; }
Distance : 6

196
Tree	{ return new ImageMapUtilities ( ImageMapUtilities ) ; }
Code	{ return new ImageMapUtilities ( ImageMapUtilities ) ; }
Distance : 7

197
Tree	{ return ! ImageMapUtilities . htmlEscape ( toolTipText ) ; }
Code	{ return ! ImageMapUtilities . htmlEscape ( toolTipText ) ; }
Distance : 4

198
Tree	{ return false ; } {}
Code	{ return false ; } {}
Distance : 11

199
Tree	{ return false ; } ParamChecks
Code	{ return false ; } ParamChecks
Distance : 11

========================================================================


========================================================================
Example Number: 8
Parent Code is: 
{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ this ( time , zone , Locale . getDefault () ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (17 (315{val=this}) (214{val=(}) (800{val=time}) (234{val=,}) (40{val=RegularTimePeriod.DEFAULT_TIME_ZONE}) (234{val=,}) (32 (800{val=Locale}) (235{val=.}) (802{val=getDefault}) (216{val=()})) (215{val=)}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (17 (315{val=this}) (214{val=(}) (800{val=time}) (234{val=,}) (800{val=zone}) (234{val=,}) (32 (800{val=Locale}) (235{val=.}) (802{val=getDefault}) (216{val=()})) (215{val=)}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/8/parent/source_org_jfree_data_time_Week.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; }
Distance : 8

1
Tree	{ super ( time , null , null , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , null , null , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 10

2
Tree	{ ; }
Code	{ ; }
Distance : 11

3
Tree	{ this ( time , TimeZone , Locale , getDefault . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , TimeZone , Locale , getDefault . getDefault () , Locale . getDefault () ) ; }
Distance : 8

4
Tree	{ this ( time , TimeZone , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , TimeZone , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

5
Tree	{ this ( time , TimeZone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , TimeZone . getDefault () , Locale . getDefault () ) ; }
Distance : 4

6
Tree	{ this ( time , true ) ; }
Code	{ this ( time , true ) ; }
Distance : 6

7
Tree	{ super ( time , null , null , Locale , Locale . getDefault () ) ; getDefault = Locale ; }
Code	{ super ( time , null , null , Locale , Locale . getDefault () ) ; getDefault = Locale ; }
Distance : 10

8
Tree	{ this ( time , false ) ; }
Code	{ this ( time , false ) ; }
Distance : 6

9
Tree	{ super ( time , TimeZone , Locale , TimeZone . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , TimeZone , Locale , TimeZone . getDefault () ) ; Locale . getDefault () ; }
Distance : 9

10
Tree	{ super ( time , RegularTimePeriod.DEFAULT_TIME_ZONE . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , RegularTimePeriod.DEFAULT_TIME_ZONE . getDefault () ) ; Locale = Locale ; }
Distance : 8

11
Tree	{ super ( time . time () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Code	{ super ( time . time () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Distance : 6

12
Tree	{ super ( time , null , null , Locale , Locale . getDefault () ) ; Locale = TimeZone ; }
Code	{ super ( time , null , null , Locale , Locale . getDefault () ) ; Locale = TimeZone ; }
Distance : 10

13
Tree	{ super ( time , TimeZone , TimeZone , TimeZone . getDefault () ) ; }
Code	{ super ( time , TimeZone , TimeZone , TimeZone . getDefault () ) ; }
Distance : 5

14
Tree	{ super ( STRING_CONSTANT ) ; zone = Locale ; }
Code	{ super ( STRING_CONSTANT ) ; zone = Locale ; }
Distance : 9

15
Tree	{ this ( getDefault , time , Locale ) ; }
Code	{ this ( getDefault , time , Locale ) ; }
Distance : 5

16
Tree	{ super ( time . getDefault () ) ; zone = Locale ; }
Code	{ super ( time . getDefault () ) ; zone = Locale ; }
Distance : 9

17
Tree	{ this ( time , TimeZone , TimeZone , TimeZone . getDefault () ) ; }
Code	{ this ( time , TimeZone , TimeZone , TimeZone . getDefault () ) ; }
Distance : 4

18
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE . getDefault () , Locale . getDefault () ) ; }
Distance : 4

19
Tree	{ super ( time . Week () ) ; Locale = Locale ; }
Code	{ super ( time . Week () ) ; Locale = Locale ; }
Distance : 9

20
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 7

21
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; checkNotNull }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; checkNotNull }
Distance : 6

22
Tree	{ super ( time , TimeZone , Locale , getDefault . getDefault () ) ; getDefault . getDefault () ; }
Code	{ super ( time , TimeZone , Locale , getDefault . getDefault () ) ; getDefault . getDefault () ; }
Distance : 9

23
Tree	{ super ( time , zone . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , zone . getDefault () ) ; Locale = Locale ; }
Distance : 7

24
Tree	{ super ( time , TimeZone , Locale , getDefault . getDefault () ) ; }
Code	{ super ( time , TimeZone , Locale , getDefault . getDefault () ) ; }
Distance : 4

25
Tree	{ super ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale , getDefault . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale , getDefault . getDefault () ) ; Locale = Locale ; }
Distance : 8

26
Tree	{ this ( time , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time . getDefault () , Locale . getDefault () ) ; }
Distance : 4

27
Tree	{ this ( time , TimeZone , TimeZone , getDefault . getDefault () ) ; }
Code	{ this ( time , TimeZone , TimeZone , getDefault . getDefault () ) ; }
Distance : 4

28
Tree	{ super ( time , TimeZone . getDefault () ) ; TimeZone = Locale ; }
Code	{ super ( time , TimeZone . getDefault () ) ; TimeZone = Locale ; }
Distance : 8

29
Tree	{ this ( time . TimeZone () , Locale . getDefault () ) ; }
Code	{ this ( time . TimeZone () , Locale . getDefault () ) ; }
Distance : 3

30
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = zone ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = zone ; }
Distance : 8

31
Tree	{ this ( time , TimeZone , Locale , getDefault . getDefault () ) ; }
Code	{ this ( time , TimeZone , Locale , getDefault . getDefault () ) ; }
Distance : 3

32
Tree	{ super ( time . TimeZone () ) ; Locale = Locale ; }
Code	{ super ( time . TimeZone () ) ; Locale = Locale ; }
Distance : 9

33
Tree	{ this ( time , TimeZone , TimeZone , getDefault . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , TimeZone , TimeZone , getDefault . getDefault () , Locale . getDefault () ) ; }
Distance : 8

34
Tree	{ this ( time , TimeZone , Locale , getDefault , Locale , TimeZone , Locale . getDefault () ) ; }
Code	{ this ( time , TimeZone , Locale , getDefault , Locale , TimeZone , Locale . getDefault () ) ; }
Distance : 9

35
Tree	{ this ( time , TimeZone , TimeZone , Locale . getDefault () ) ; }
Code	{ this ( time , TimeZone , TimeZone , Locale . getDefault () ) ; }
Distance : 3

36
Tree	{ super ( time , TimeZone , time , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , TimeZone , time , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 8

37
Tree	{ this ( time , TimeZone , TimeZone , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , TimeZone , TimeZone , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

38
Tree	{ super ( time . zone () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Code	{ super ( time . zone () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Distance : 6

39
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , getDefault . getDefault () ) ; Locale = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , getDefault . getDefault () ) ; Locale = Locale ; }
Distance : 8

40
Tree	{ super ( time , TimeZone . getDefault () ) ; getDefault = Locale ; }
Code	{ super ( time , TimeZone . getDefault () ) ; getDefault = Locale ; }
Distance : 8

41
Tree	{ super ( time , TimeZone . getDefault () ) ; zone = Locale ; }
Code	{ super ( time , TimeZone . getDefault () ) ; zone = Locale ; }
Distance : 8

42
Tree	{ super ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale , getDefault . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale , getDefault . getDefault () ) ; Locale . getDefault () ; }
Distance : 9

43
Tree	{ time = time ; }
Code	{ time = time ; }
Distance : 10

44
Tree	{ super ( time . Week () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Code	{ super ( time . Week () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Distance : 6

45
Tree	{ this ( time , TimeZone , getDefault , getDefault . getDefault () ) ; }
Code	{ this ( time , TimeZone , getDefault , getDefault . getDefault () ) ; }
Distance : 4

46
Tree	{ this ( time . time () , Locale . getDefault () ) ; }
Code	{ this ( time . time () , Locale . getDefault () ) ; }
Distance : 3

47
Tree	{ this ( time , TimeZone , TimeZone , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , TimeZone , TimeZone , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

48
Tree	{ super ( time , TimeZone , time , Locale . getDefault () ) ; }
Code	{ super ( time , TimeZone , time , Locale . getDefault () ) ; }
Distance : 4

49
Tree	{ this ( time , TimeZone , Locale , getDefault , Locale , getDefault , Locale . getDefault () ) ; }
Code	{ this ( time , TimeZone , Locale , getDefault , Locale , getDefault , Locale . getDefault () ) ; }
Distance : 9

50
Tree	{ this ( time , Date . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , Date . getDefault () , Locale . getDefault () ) ; }
Distance : 4

51
Tree	{ super ( time , TimeZone , Locale , Locale . getDefault () ) ; }
Code	{ super ( time , TimeZone , Locale , Locale . getDefault () ) ; }
Distance : 4

52
Tree	{ this ( time , TimeZone , Locale , Locale , Locale , TimeZone , Locale . getDefault () ) ; }
Code	{ this ( time , TimeZone , Locale , Locale , Locale , TimeZone , Locale . getDefault () ) ; }
Distance : 9

53
Tree	{ this ( time , TimeZone , Locale , TimeZone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , TimeZone , Locale , TimeZone . getDefault () , Locale . getDefault () ) ; }
Distance : 8

54
Tree	{ super ( time , TimeZone , Locale , getDefault . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , TimeZone , Locale , getDefault . getDefault () ) ; Locale . getDefault () ; }
Distance : 9

55
Tree	{ super ( time , TimeZone , Locale , getDefault . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , TimeZone , Locale , getDefault . getDefault () ) ; Locale = Locale ; }
Distance : 8

56
Tree	{ this ( time , TimeZone , time , getDefault . getDefault () ) ; }
Code	{ this ( time , TimeZone , time , getDefault . getDefault () ) ; }
Distance : 4

57
Tree	{ this ( time , TimeZone . getDefault () , Locale . Locale () ) ; }
Code	{ this ( time , TimeZone . getDefault () , Locale . Locale () ) ; }
Distance : 5

58
Tree	{ super ( time , null , null , Locale , time . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , null , null , Locale , time . getDefault () ) ; Locale = Locale ; }
Distance : 10

59
Tree	{ super ( time , TimeZone , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , TimeZone , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 8

60
Tree	{ this ( time , TimeZone , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , TimeZone , Locale , Locale . getDefault () ) ; }
Distance : 3

61
Tree	{ super ( time . TimeZone () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Code	{ super ( time . TimeZone () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Distance : 6

62
Tree	{ return; time = RegularTimePeriod.DEFAULT_TIME_ZONE ; }
Code	{ return; time = RegularTimePeriod.DEFAULT_TIME_ZONE ; }
Distance : 10

63
Tree	{ this ( time , TimeZone , time , Locale . getDefault () ) ; }
Code	{ this ( time , TimeZone , time , Locale . getDefault () ) ; }
Distance : 3

64
Tree	{ this ( time , TimeZone , Locale , getDefault , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , TimeZone , Locale , getDefault , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

65
Tree	{ super ( time , null , null , time , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , null , null , time , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 10

66
Tree	{ super ( time . time () ) ; Locale = Locale ; }
Code	{ super ( time . time () ) ; Locale = Locale ; }
Distance : 9

67
Tree	{ super ( STRING_CONSTANT ) ; zone = TimeZone ; }
Code	{ super ( STRING_CONSTANT ) ; zone = TimeZone ; }
Distance : 10

68
Tree	{ this ( time , getDefault . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , getDefault . getDefault () , Locale . getDefault () ) ; }
Distance : 4

69
Tree	{ super(); time = TimeZone ; }
Code	{ super(); time = TimeZone ; }
Distance : 10

70
Tree	{ this ( ( , time , Locale ) ; }
Code	{ this ( ( , time , Locale ) ; }
Distance : 5

71
Tree	{ super ( STRING_CONSTANT ) ; zone = time ; }
Code	{ super ( STRING_CONSTANT ) ; zone = time ; }
Distance : 10

72
Tree	{ this ( time , TimeZone , Locale , Locale , Locale , getDefault , Locale . getDefault () ) ; }
Code	{ this ( time , TimeZone , Locale , Locale , Locale , getDefault , Locale . getDefault () ) ; }
Distance : 9

73
Tree	{ this ( time . TimeZone () , Locale ) ; }
Code	{ this ( time . TimeZone () , Locale ) ; }
Distance : 6

74
Tree	{ super ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale , getDefault . getDefault () ) ; }
Code	{ super ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale , getDefault . getDefault () ) ; }
Distance : 4

75
Tree	{ super ( time , TimeZone , TimeZone , getDefault . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , TimeZone , TimeZone , getDefault . getDefault () ) ; Locale . getDefault () ; }
Distance : 10

76
Tree	{ super ( time , TimeZone , getDefault , getDefault . getDefault () ) ; }
Code	{ super ( time , TimeZone , getDefault , getDefault . getDefault () ) ; }
Distance : 5

77
Tree	{ super ( time , TimeZone , TimeZone , TimeZone . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , TimeZone , TimeZone , TimeZone . getDefault () ) ; Locale . getDefault () ; }
Distance : 10

78
Tree	{ this ( time , TimeZone , Locale , TimeZone , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , TimeZone , Locale , TimeZone , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

79
Tree	{ super ( time , null , null , Locale , TimeZone . getDefault () ) ; getDefault = Locale ; }
Code	{ super ( time , null , null , Locale , TimeZone . getDefault () ) ; getDefault = Locale ; }
Distance : 10

80
Tree	{ this ( time , zone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , zone . getDefault () , Locale . getDefault () ) ; }
Distance : 3

81
Tree	{ this ( time . Date () , Locale ) ; }
Code	{ this ( time . Date () , Locale ) ; }
Distance : 6

82
Tree	{ super ( time , TimeZone , Locale , Locale . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , TimeZone , Locale , Locale . getDefault () ) ; Locale . getDefault () ; }
Distance : 9

83
Tree	{ this ( time , TimeZone , time , getDefault . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , TimeZone , time , getDefault . getDefault () , Locale . getDefault () ) ; }
Distance : 8

84
Tree	{ super ( time , TimeZone , time , Locale . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , TimeZone , time , Locale . getDefault () ) ; Locale . getDefault () ; }
Distance : 9

85
Tree	{ this ( time , time , Locale ) ; }
Code	{ this ( time , time , Locale ) ; }
Distance : 4

86
Tree	{ super(); time = Date ; }
Code	{ super(); time = Date ; }
Distance : 10

87
Tree	{ this ( TimeZone , false ) ; }
Code	{ this ( TimeZone , false ) ; }
Distance : 7

88
Tree	{ super ( time , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 7

89
Tree	{ super(); time = RegularTimePeriod.DEFAULT_TIME_ZONE ; }
Code	{ super(); time = RegularTimePeriod.DEFAULT_TIME_ZONE ; }
Distance : 10

90
Tree	{ this ( time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time . getDefault () , Locale . getDefault () ) ; }
Distance : 3

91
Tree	{ this ( time , TimeZone , Locale , TimeZone . getDefault () ) ; }
Code	{ this ( time , TimeZone , Locale , TimeZone . getDefault () ) ; }
Distance : 3

92
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; TimeZone = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; TimeZone = Locale ; }
Distance : 8

93
Tree	{ super ( time . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time . getDefault () ) ; Locale = Locale ; }
Distance : 9

94
Tree	{ super ( time , TimeZone , TimeZone , getDefault . getDefault () ) ; }
Code	{ super ( time , TimeZone , TimeZone , getDefault . getDefault () ) ; }
Distance : 5

95
Tree	{ this ( time , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 4

96
Tree	{ this ( time , TimeZone , getDefault , Locale . getDefault () ) ; }
Code	{ this ( time , TimeZone , getDefault , Locale . getDefault () ) ; }
Distance : 3

97
Tree	{ super ( STRING_CONSTANT ) ; time = TimeZone ; }
Code	{ super ( STRING_CONSTANT ) ; time = TimeZone ; }
Distance : 10

98
Tree	{ super ( time , TimeZone , TimeZone , Locale . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , TimeZone , TimeZone , Locale . getDefault () ) ; Locale . getDefault () ; }
Distance : 9

99
Tree	{ this ( time , TimeZone , time , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , TimeZone , time , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

100
Tree	{ super ( time . RegularTimePeriod.DEFAULT_TIME_ZONE () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Code	{ super ( time . RegularTimePeriod.DEFAULT_TIME_ZONE () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Distance : 6

101
Tree	{ this ( time , TimeZone , Locale , getDefault , Locale , Locale , TimeZone . getDefault () ) ; }
Code	{ this ( time , TimeZone , Locale , getDefault , Locale , Locale , TimeZone . getDefault () ) ; }
Distance : 9

102
Tree	{ this ( time , TimeZone , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , TimeZone , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

103
Tree	{ this ( time , Week . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , Week . getDefault () , Locale . getDefault () ) ; }
Distance : 4

104
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; fireChangeEvent }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; fireChangeEvent }
Distance : 6

105
Tree	{ super ( time , TimeZone , time , getDefault . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , TimeZone , time , getDefault . getDefault () ) ; Locale = Locale ; }
Distance : 9

106
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; zone = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; zone = Locale ; }
Distance : 8

107
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = TimeZone ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = TimeZone ; }
Distance : 8

108
Tree	{ this ( time . time () , Locale ) ; }
Code	{ this ( time . time () , Locale ) ; }
Distance : 6

109
Tree	{ this ( time . RegularTimePeriod.DEFAULT_TIME_ZONE () , Locale ) ; }
Code	{ this ( time . RegularTimePeriod.DEFAULT_TIME_ZONE () , Locale ) ; }
Distance : 6

110
Tree	{ super ( time , TimeZone , time , getDefault . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , TimeZone , time , getDefault . getDefault () ) ; Locale . getDefault () ; }
Distance : 10

111
Tree	{ this ( time , TimeZone . time () , Locale . getDefault () ) ; }
Code	{ this ( time , TimeZone . time () , Locale . getDefault () ) ; }
Distance : 4

112
Tree	{ this ( time . zone () , Locale . getDefault () ) ; }
Code	{ this ( time . zone () , Locale . getDefault () ) ; }
Distance : 2

113
Tree	{ super ( time , null , null , TimeZone , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , null , null , TimeZone , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 10

114
Tree	{ this ( Locale , false ) ; }
Code	{ this ( Locale , false ) ; }
Distance : 7

115
Tree	{ time = zone ; }
Code	{ time = zone ; }
Distance : 9

116
Tree	{ continue; time = RegularTimePeriod.DEFAULT_TIME_ZONE ; }
Code	{ continue; time = RegularTimePeriod.DEFAULT_TIME_ZONE ; }
Distance : 10

117
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; time = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; time = Locale ; }
Distance : 8

118
Tree	{ this ( time . Date () , Locale . getDefault () ) ; }
Code	{ this ( time . Date () , Locale . getDefault () ) ; }
Distance : 3

119
Tree	{ this ( time , TimeZone , TimeZone , TimeZone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , TimeZone , TimeZone , TimeZone . getDefault () , Locale . getDefault () ) ; }
Distance : 8

120
Tree	{ super ( time . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time . getDefault () ) ; Locale = Locale ; }
Distance : 9

121
Tree	{ super ( time , TimeZone , TimeZone , Locale . getDefault () ) ; }
Code	{ super ( time , TimeZone , TimeZone , Locale . getDefault () ) ; }
Distance : 4

122
Tree	{ super ( time , time . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , time . getDefault () ) ; Locale = Locale ; }
Distance : 8

123
Tree	{ this ( time , TimeZone , getDefault , getDefault . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , TimeZone , getDefault , getDefault . getDefault () , Locale . getDefault () ) ; }
Distance : 8

124
Tree	{ super ( time , TimeZone , TimeZone , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , TimeZone , TimeZone , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 8

125
Tree	{ super ( time , null , null , Locale , TimeZone . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , null , null , Locale , TimeZone . getDefault () ) ; Locale = Locale ; }
Distance : 10

126
Tree	{ this ( time , time , TimeZone ) ; }
Code	{ this ( time , time , TimeZone ) ; }
Distance : 5

127
Tree	{ super ( time , TimeZone . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , TimeZone . getDefault () ) ; Locale = Locale ; }
Distance : 8

128
Tree	{ super ( time . zone () ) ; Locale = Locale ; }
Code	{ super ( time . zone () ) ; Locale = Locale ; }
Distance : 8

129
Tree	{ super ( STRING_CONSTANT ) ; Locale = TimeZone ; }
Code	{ super ( STRING_CONSTANT ) ; Locale = TimeZone ; }
Distance : 9

130
Tree	{ time = TimeZone ; }
Code	{ time = TimeZone ; }
Distance : 10

131
Tree	{ super ( STRING_CONSTANT ) ; zone = getDefault ; }
Code	{ super ( STRING_CONSTANT ) ; zone = getDefault ; }
Distance : 9

132
Tree	{ time = getDefault ; }
Code	{ time = getDefault ; }
Distance : 9

133
Tree	{ this ( time , TimeZone , getDefault , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , TimeZone , getDefault , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

134
Tree	{ this ( time . Locale () , Locale ) ; }
Code	{ this ( time . Locale () , Locale ) ; }
Distance : 6

135
Tree	{ super(); time = getDefault ; }
Code	{ super(); time = getDefault ; }
Distance : 9

136
Tree	{ super ( time , RegularTimePeriod.DEFAULT_TIME_ZONE . getDefault () ) ; getDefault = Locale ; }
Code	{ super ( time , RegularTimePeriod.DEFAULT_TIME_ZONE . getDefault () ) ; getDefault = Locale ; }
Distance : 8

137
Tree	{ super ( time , TimeZone , Locale , getDefault . getDefault () ) ; getDefault = Locale ; }
Code	{ super ( time , TimeZone , Locale , getDefault . getDefault () ) ; getDefault = Locale ; }
Distance : 8

138
Tree	{ this ( time . getDefault () , TimeZone ) ; }
Code	{ this ( time . getDefault () , TimeZone ) ; }
Distance : 6

139
Tree	{ this ( zone , true ) ; }
Code	{ this ( zone , true ) ; }
Distance : 6

140
Tree	{ super ( STRING_CONSTANT ) ; TimeZone = TimeZone ; }
Code	{ super ( STRING_CONSTANT ) ; TimeZone = TimeZone ; }
Distance : 10

141
Tree	{ this ( getDefault , true ) ; }
Code	{ this ( getDefault , true ) ; }
Distance : 7

142
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Distance : 6

143
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; this }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; this }
Distance : 6

144
Tree	{ this ( time , time , time ) ; }
Code	{ this ( time , time , time ) ; }
Distance : 5

145
Tree	{ this ( time , time , TimeZone ) ; }
Code	{ this ( time , time , TimeZone ) ; }
Distance : 5

146
Tree	{ time = Locale ; }
Code	{ time = Locale ; }
Distance : 9

147
Tree	{ super ( STRING_CONSTANT ) ; zone = Date ; }
Code	{ super ( STRING_CONSTANT ) ; zone = Date ; }
Distance : 10

148
Tree	{ super ( time . Date () ) ; Locale = Locale ; }
Code	{ super ( time . Date () ) ; Locale = Locale ; }
Distance : 9

149
Tree	{ super ( time , TimeZone , Locale , TimeZone . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , TimeZone , Locale , TimeZone . getDefault () ) ; Locale = Locale ; }
Distance : 8

150
Tree	{ super ( time . getDefault () ) ; TimeZone = Locale ; }
Code	{ super ( time . getDefault () ) ; TimeZone = Locale ; }
Distance : 9

151
Tree	{ time = Date ; }
Code	{ time = Date ; }
Distance : 10

152
Tree	{ super(); time = Week ; }
Code	{ super(); time = Week ; }
Distance : 10

153
Tree	{ super ( time , TimeZone , TimeZone , getDefault . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , TimeZone , TimeZone , getDefault . getDefault () ) ; Locale = Locale ; }
Distance : 9

154
Tree	{ this ( getDefault , false ) ; }
Code	{ this ( getDefault , false ) ; }
Distance : 7

155
Tree	{ this ( time . RegularTimePeriod.DEFAULT_TIME_ZONE () , TimeZone ) ; }
Code	{ this ( time . RegularTimePeriod.DEFAULT_TIME_ZONE () , TimeZone ) ; }
Distance : 7

156
Tree	{ super(); time = zone ; }
Code	{ super(); time = zone ; }
Distance : 9

157
Tree	{ this ( time . RegularTimePeriod.DEFAULT_TIME_ZONE () , Locale . getDefault () ) ; }
Code	{ this ( time . RegularTimePeriod.DEFAULT_TIME_ZONE () , Locale . getDefault () ) ; }
Distance : 3

158
Tree	{ this ( TimeZone , time , Locale ) ; }
Code	{ this ( TimeZone , time , Locale ) ; }
Distance : 5

159
Tree	{ super ( time , TimeZone , Locale , TimeZone . getDefault () ) ; }
Code	{ super ( time , TimeZone , Locale , TimeZone . getDefault () ) ; }
Distance : 4

160
Tree	{ this ( zone , false ) ; }
Code	{ this ( zone , false ) ; }
Distance : 6

161
Tree	{ this ( time . getDefault () , Locale . Locale () ) ; }
Code	{ this ( time . getDefault () , Locale . Locale () ) ; }
Distance : 4

162
Tree	{ super ( time , TimeZone . getDefault () ) ; Locale = TimeZone ; }
Code	{ super ( time , TimeZone . getDefault () ) ; Locale = TimeZone ; }
Distance : 8

163
Tree	{ super ( time , null , null , Locale , Locale . getDefault () ) ; TimeZone = Locale ; }
Code	{ super ( time , null , null , Locale , Locale . getDefault () ) ; TimeZone = Locale ; }
Distance : 10

164
Tree	{ super ( time , null , null , Locale , Locale . getDefault () ) ; zone = Locale ; }
Code	{ super ( time , null , null , Locale , Locale . getDefault () ) ; zone = Locale ; }
Distance : 10

165
Tree	{ this ( time . zone () , Locale ) ; }
Code	{ this ( time . zone () , Locale ) ; }
Distance : 5

166
Tree	{ getDefault = RegularTimePeriod.DEFAULT_TIME_ZONE ; }
Code	{ getDefault = RegularTimePeriod.DEFAULT_TIME_ZONE ; }
Distance : 10

167
Tree	{ this ( getDefault , time , TimeZone ) ; }
Code	{ this ( getDefault , time , TimeZone ) ; }
Distance : 6

168
Tree	{ ; } [
Code	{ ; } [
Distance : 12

169
Tree	{ ; } notifyListeners
Code	{ ; } notifyListeners
Distance : 12

170
Tree	{ this ( time . RegularTimePeriod.DEFAULT_TIME_ZONE () , Locale . Locale () ) ; }
Code	{ this ( time . RegularTimePeriod.DEFAULT_TIME_ZONE () , Locale . Locale () ) ; }
Distance : 4

171
Tree	{ this ( time . Week () , Locale . getDefault () ) ; }
Code	{ this ( time . Week () , Locale . getDefault () ) ; }
Distance : 3

172
Tree	{ time = RegularTimePeriod.DEFAULT_TIME_ZONE ; }
Code	{ time = RegularTimePeriod.DEFAULT_TIME_ZONE ; }
Distance : 10

173
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , zone . getDefault () ) ; Locale = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , zone . getDefault () ) ; Locale = Locale ; }
Distance : 8

174
Tree	{ this ( TimeZone , true ) ; }
Code	{ this ( TimeZone , true ) ; }
Distance : 7

175
Tree	{ super(); time = time ; }
Code	{ super(); time = time ; }
Distance : 10

176
Tree	{ time = Week ; }
Code	{ time = Week ; }
Distance : 10

177
Tree	{ ; } class
Code	{ ; } class
Distance : 12

178
Tree	{ this ( Locale , true ) ; }
Code	{ this ( Locale , true ) ; }
Distance : 7

179
Tree	{ this ( time . Week () , Locale ) ; }
Code	{ this ( time . Week () , Locale ) ; }
Distance : 6

180
Tree	{ super(); time = Locale ; }
Code	{ super(); time = Locale ; }
Distance : 9

181
Tree	{ ; } array
Code	{ ; } array
Distance : 12

182
Tree	{ this ( Date , time , Locale ) ; }
Code	{ this ( Date , time , Locale ) ; }
Distance : 5

183
Tree	{ super ( time . getDefault () ) ; Locale = TimeZone ; }
Code	{ super ( time . getDefault () ) ; Locale = TimeZone ; }
Distance : 9

184
Tree	{ super ( STRING_CONSTANT ) ; zone = zone ; }
Code	{ super ( STRING_CONSTANT ) ; zone = zone ; }
Distance : 10

185
Tree	{ ; } mock
Code	{ ; } mock
Distance : 12

186
Tree	{ this ( time . Locale () , Locale . getDefault () ) ; }
Code	{ this ( time . Locale () , Locale . getDefault () ) ; }
Distance : 3

187
Tree	{ ; } MathRuntimeException
Code	{ ; } MathRuntimeException
Distance : 12

188
Tree	{ ; } Override
Code	{ ; } Override
Distance : 12

189
Tree	{ getDefault = TimeZone ; }
Code	{ getDefault = TimeZone ; }
Distance : 10

190
Tree	{ this ( Week , time , Locale ) ; }
Code	{ this ( Week , time , Locale ) ; }
Distance : 5

191
Tree	{ super ( time , TimeZone , time , getDefault . getDefault () ) ; }
Code	{ super ( time , TimeZone , time , getDefault . getDefault () ) ; }
Distance : 5

192
Tree	{ this ( time . getDefault () , Locale ) ; }
Code	{ this ( time . getDefault () , Locale ) ; }
Distance : 6

193
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; disableTypeCheck }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; disableTypeCheck }
Distance : 6

194
Tree	{ ; } f
Code	{ ; } f
Distance : 12

195
Tree	{ ; } -
Code	{ ; } -
Distance : 12

196
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; getDefault = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; getDefault = Locale ; }
Distance : 8

197
Tree	{ this ( time , TimeZone , TimeZone , getDefault , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , TimeZone , TimeZone , getDefault , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

198
Tree	{ super ( time , TimeZone , TimeZone , TimeZone . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , TimeZone , TimeZone , TimeZone . getDefault () ) ; Locale = Locale ; }
Distance : 9

199
Tree	{ super ( STRING_CONSTANT ) ; time = Locale ; }
Code	{ super ( STRING_CONSTANT ) ; time = Locale ; }
Distance : 10

========================================================================


========================================================================
Example Number: 9
Parent Code is: 
if ( dataset != null ) { return result ; }
-------------------------------------------------------------------------------
Child code is: 
if ( dataset == null ) { return result ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=dataset}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=result}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=dataset}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=result}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/1/parent/source_org_jfree_chart_renderer_category_AbstractCategoryItemRenderer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( dataset . dataset () ) { return result ; }
Code	if ( dataset . dataset () ) { return result ; }
Distance : 3

1
Tree	if ( dataset != null ) { return result . result ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . result ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

2
Tree	if ( dataset . getDataset () ) { return result ; }
Code	if ( dataset . getDataset () ) { return result ; }
Distance : 3

3
Tree	if ( index != null ) { return result ; }
Code	if ( index != null ) { return result ; }
Distance : 2

4
Tree	if ( getDataset ( dataset ) ) { return result ; }
Code	if ( getDataset ( dataset ) ) { return result ; }
Distance : 4

5
Tree	if ( dataset != null ) { return this . result . dataset () ; }
Code	if ( dataset != null ) { return this . result . dataset () ; }
Distance : 6

6
Tree	if ( index != null ) { return result . result ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( index != null ) { return result . result ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

7
Tree	if ( getDataset ( dataset , dataset ) ) { return result ; }
Code	if ( getDataset ( dataset , dataset ) ) { return result ; }
Distance : 5

8
Tree	if ( getDataset ( index ) ) { return result ; }
Code	if ( getDataset ( index ) ) { return result ; }
Distance : 4

9
Tree	if ( dataset . item ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . item ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

10
Tree	if ( dataset != null ) { return result ; } else &
Code	if ( dataset != null ) { return result ; } else &
Distance : 3

11
Tree	if ( dataset != null ) { return result . add ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . add ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

12
Tree	if ( dataset != null ) { return result ; } else %
Code	if ( dataset != null ) { return result ; } else %
Distance : 3

13
Tree	if ( index . getDataset () ) { return result ; }
Code	if ( index . getDataset () ) { return result ; }
Distance : 4

14
Tree	if ( result ( dataset ) ) { return result ; }
Code	if ( result ( dataset ) ) { return result ; }
Distance : 4

15
Tree	if ( dataset . dataset ( dataset ) ) { return this . result . dataset ; }
Code	if ( dataset . dataset ( dataset ) ) { return this . result . dataset ; }
Distance : 9

16
Tree	if ( dataset . item ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . item ( dataset ) ) { return this . result . result ; }
Distance : 9

17
Tree	if ( dataset != null ) { return result ; }
Code	if ( dataset != null ) { return result ; }
Distance : 1

18
Tree	if ( dataset ( dataset ) ) { return result ; }
Code	if ( dataset ( dataset ) ) { return result ; }
Distance : 3

19
Tree	if ( item != null ) { return result . result ( dataset ) ; }
Code	if ( item != null ) { return result . result ( dataset ) ; }
Distance : 7

20
Tree	if ( dataset . equals () ) { return result ; }
Code	if ( dataset . equals () ) { return result ; }
Distance : 3

21
Tree	if ( dataset != null ) { return result ; } else :
Code	if ( dataset != null ) { return result ; } else :
Distance : 3

22
Tree	if ( ! dataset . dataset ( index ) ) { return result ; }
Code	if ( ! dataset . dataset ( index ) ) { return result ; }
Distance : 6

23
Tree	if ( dataset != null ) { return this . item ; }
Code	if ( dataset != null ) { return this . item ; }
Distance : 4

24
Tree	if ( dataset != null ) { return result . index ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . index ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

25
Tree	if ( dataset != null ) { return this . result ; }
Code	if ( dataset != null ) { return this . result ; }
Distance : 3

26
Tree	if ( dataset . dataset ( dataset ) ) { return result ; }
Code	if ( dataset . dataset ( dataset ) ) { return result ; }
Distance : 5

27
Tree	if ( new dataset ( dataset ) . item ( result ) ) { return result ; }
Code	if ( new dataset ( dataset ) . item ( result ) ) { return result ; }
Distance : 9

28
Tree	if ( dataset . dataset ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . dataset ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

29
Tree	if ( new dataset () . add ( dataset ) ) { return result ; }
Code	if ( new dataset () . add ( dataset ) ) { return result ; }
Distance : 7

30
Tree	if ( dataset . dataset ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . dataset ( dataset ) ) { return this . result . result ; }
Distance : 9

31
Tree	if ( dataset ( dataset ) ) { return result ; }
Code	if ( dataset ( dataset ) ) { return result ; }
Distance : 3

32
Tree	if ( ! getDataset ( dataset ) ) { return result ; }
Code	if ( ! getDataset ( dataset ) ) { return result ; }
Distance : 5

33
Tree	if ( dataset . add ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . add ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

34
Tree	if ( dataset ( index ) ) { return result ; }
Code	if ( dataset ( index ) ) { return result ; }
Distance : 3

35
Tree	if ( dataset () ) { return result ; }
Code	if ( dataset () ) { return result ; }
Distance : 2

36
Tree	if ( item . dataset ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( item . dataset ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

37
Tree	if ( dataset != null ) { return result ; } else else
Code	if ( dataset != null ) { return result ; } else else
Distance : 3

38
Tree	if ( dataset != null ) { return this . plot ; }
Code	if ( dataset != null ) { return this . plot ; }
Distance : 4

39
Tree	if ( dataset ( plot ) ) { return result ; }
Code	if ( dataset ( plot ) ) { return result ; }
Distance : 3

40
Tree	if ( plot ( dataset ) ) { return result ; }
Code	if ( plot ( dataset ) ) { return result ; }
Distance : 4

41
Tree	if ( dataset ( result ) ) { return result ; }
Code	if ( dataset ( result ) ) { return result ; }
Distance : 3

42
Tree	if ( dataset != null ) { return result ; } else extends
Code	if ( dataset != null ) { return result ; } else extends
Distance : 3

43
Tree	if ( dataset . equals ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . equals ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

44
Tree	if ( ! dataset . dataset ( item ) ) { return result ; }
Code	if ( ! dataset . dataset ( item ) ) { return result ; }
Distance : 6

45
Tree	if ( dataset != null ) { return result ; } else short
Code	if ( dataset != null ) { return result ; } else short
Distance : 3

46
Tree	if ( dataset . getDataset ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . getDataset ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

47
Tree	if ( result != null ) { return result ; }
Code	if ( result != null ) { return result ; }
Distance : 2

48
Tree	if ( ! dataset . getDataset ( index ) ) { return result ; }
Code	if ( ! dataset . getDataset ( index ) ) { return result ; }
Distance : 6

49
Tree	if ( ! item ( dataset ) ) { return result ; }
Code	if ( ! item ( dataset ) ) { return result ; }
Distance : 5

50
Tree	if ( dataset . add () ) { return result ; }
Code	if ( dataset . add () ) { return result ; }
Distance : 3

51
Tree	if ( dataset . add ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . add ( dataset ) ) { return this . result . result ; }
Distance : 9

52
Tree	if ( dataset . getDataset ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . getDataset ( dataset ) ) { return this . result . result ; }
Distance : 9

53
Tree	if ( dataset . plot ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . plot ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

54
Tree	if ( dataset . dataset ( item ) ) { return result ; }
Code	if ( dataset . dataset ( item ) ) { return result ; }
Distance : 5

55
Tree	if ( getDataset != null ) { return this . result ; }
Code	if ( getDataset != null ) { return this . result ; }
Distance : 4

56
Tree	if ( dataset . equals ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . equals ( dataset ) ) { return this . result . result ; }
Distance : 9

57
Tree	if ( getDataset ( dataset ) ) { return result ; }
Code	if ( getDataset ( dataset ) ) { return result ; }
Distance : 4

58
Tree	if ( dataset ( dataset , index ) ) { return result ; }
Code	if ( dataset ( dataset , index ) ) { return result ; }
Distance : 5

59
Tree	if ( index != null ) { return this . result ; }
Code	if ( index != null ) { return this . result ; }
Distance : 4

60
Tree	if ( dataset != continue; ) { return result ; }
Code	if ( dataset != continue; ) { return result ; }
Distance : 2

61
Tree	if ( dataset != null ) { return result ; } else ++
Code	if ( dataset != null ) { return result ; } else ++
Distance : 3

62
Tree	if ( new dataset ( dataset ) . add ( result ) ) { return result ; }
Code	if ( new dataset ( dataset ) . add ( result ) ) { return result ; }
Distance : 9

63
Tree	if ( plot != null ) { return result ; }
Code	if ( plot != null ) { return result ; }
Distance : 2

64
Tree	if ( dataset != null ) { return this . result . getDataset () ; }
Code	if ( dataset != null ) { return this . result . getDataset () ; }
Distance : 6

65
Tree	if ( dataset != null ) { return result . dataset ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . dataset ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

66
Tree	if ( dataset != null ) { return result ; } else instanceof
Code	if ( dataset != null ) { return result ; } else instanceof
Distance : 3

67
Tree	if ( dataset . dataset ( index ) ) { return this . result . result ; }
Code	if ( dataset . dataset ( index ) ) { return this . result . result ; }
Distance : 9

68
Tree	if ( item != null ) { return this . result ; }
Code	if ( item != null ) { return this . result ; }
Distance : 4

69
Tree	if ( dataset . getDataset ( item ) ) { return result ; }
Code	if ( dataset . getDataset ( item ) ) { return result ; }
Distance : 5

70
Tree	if ( new dataset ( dataset ) . getDataset ( result ) ) { return result ; }
Code	if ( new dataset ( dataset ) . getDataset ( result ) ) { return result ; }
Distance : 9

71
Tree	if ( dataset . equals ( dataset ) ) { return result ; }
Code	if ( dataset . equals ( dataset ) ) { return result ; }
Distance : 5

72
Tree	if ( new getDataset ( dataset ) . dataset ( result ) ) { return result ; }
Code	if ( new getDataset ( dataset ) . dataset ( result ) ) { return result ; }
Distance : 9

73
Tree	if ( dataset . plot ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . plot ( dataset ) ) { return this . result . result ; }
Distance : 9

74
Tree	if ( dataset ( dataset , dataset ) ) { return result ; }
Code	if ( dataset ( dataset , dataset ) ) { return result ; }
Distance : 5

75
Tree	if ( item ( dataset ) ) { return result ; }
Code	if ( item ( dataset ) ) { return result ; }
Distance : 4

76
Tree	if ( result () ) { return result ; }
Code	if ( result () ) { return result ; }
Distance : 3

77
Tree	if ( getDataset () ) { return result ; }
Code	if ( getDataset () ) { return result ; }
Distance : 3

78
Tree	if ( getDataset ( dataset , item ) ) { return result ; }
Code	if ( getDataset ( dataset , item ) ) { return result ; }
Distance : 5

79
Tree	if ( add ( dataset ) ) { return result ; }
Code	if ( add ( dataset ) ) { return result ; }
Distance : 4

80
Tree	if ( new item ( dataset ) . getDataset ( result ) ) { return result ; }
Code	if ( new item ( dataset ) . getDataset ( result ) ) { return result ; }
Distance : 9

81
Tree	if ( index ( dataset ) ) { return result ; }
Code	if ( index ( dataset ) ) { return result ; }
Distance : 4

82
Tree	if ( ! dataset . getDataset ( item ) ) { return result ; }
Code	if ( ! dataset . getDataset ( item ) ) { return result ; }
Distance : 6

83
Tree	if ( dataset != null ) { return this . result . add () ; }
Code	if ( dataset != null ) { return this . result . add () ; }
Distance : 6

84
Tree	if ( dataset . getDataset ( dataset ) ) { return result ; }
Code	if ( dataset . getDataset ( dataset ) ) { return result ; }
Distance : 5

85
Tree	if ( ! dataset . item ( dataset ) ) { return result ; }
Code	if ( ! dataset . item ( dataset ) ) { return result ; }
Distance : 6

86
Tree	if ( getDataset ( dataset , index ) ) { return result ; }
Code	if ( getDataset ( dataset , index ) ) { return result ; }
Distance : 5

87
Tree	if ( item . getDataset ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( item . getDataset ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 6

88
Tree	if ( dataset != null ) { return result . result ( result ) ; }
Code	if ( dataset != null ) { return result . result ( result ) ; }
Distance : 6

89
Tree	if ( dataset . getDataset ( dataset ) ) { return this . result . dataset ; }
Code	if ( dataset . getDataset ( dataset ) ) { return this . result . dataset ; }
Distance : 9

90
Tree	if ( item () ) { return result ; }
Code	if ( item () ) { return result ; }
Distance : 3

91
Tree	if ( new dataset ( dataset ) . dataset ( result ) ) { return result ; }
Code	if ( new dataset ( dataset ) . dataset ( result ) ) { return result ; }
Distance : 9

92
Tree	if ( dataset ( index ) ) { return result ; }
Code	if ( dataset ( index ) ) { return result ; }
Distance : 3

93
Tree	if ( dataset ( item ) ) { return result ; }
Code	if ( dataset ( item ) ) { return result ; }
Distance : 3

94
Tree	if ( new item ( dataset ) . dataset ( result ) ) { return result ; }
Code	if ( new item ( dataset ) . dataset ( result ) ) { return result ; }
Distance : 9

95
Tree	if ( ! index ( dataset ) ) { return result ; }
Code	if ( ! index ( dataset ) ) { return result ; }
Distance : 5

96
Tree	if ( dataset ( dataset , dataset , result ) ) { return result ; }
Code	if ( dataset ( dataset , dataset , result ) ) { return result ; }
Distance : 7

97
Tree	if ( new plot ( dataset ) . getDataset ( result ) ) { return result ; }
Code	if ( new plot ( dataset ) . getDataset ( result ) ) { return result ; }
Distance : 9

98
Tree	if ( dataset != null ) { return result . result ( index ) ; }
Code	if ( dataset != null ) { return result . result ( index ) ; }
Distance : 6

99
Tree	if ( new getDataset () . equals ( dataset ) ) { return result ; }
Code	if ( new getDataset () . equals ( dataset ) ) { return result ; }
Distance : 8

100
Tree	if ( dataset != null ) { return result . equals ( dataset ) ; }
Code	if ( dataset != null ) { return result . equals ( dataset ) ; }
Distance : 6

101
Tree	if ( dataset != null ) { return result . result ( item ) ; }
Code	if ( dataset != null ) { return result . result ( item ) ; }
Distance : 6

102
Tree	if ( index . dataset () ) { return result ; }
Code	if ( index . dataset () ) { return result ; }
Distance : 4

103
Tree	if ( ! dataset . dataset ( dataset ) ) { return result ; }
Code	if ( ! dataset . dataset ( dataset ) ) { return result ; }
Distance : 6

104
Tree	if ( dataset != null ) { return this . result . item () ; }
Code	if ( dataset != null ) { return this . result . item () ; }
Distance : 6

105
Tree	if ( dataset != return; ) { return result ; }
Code	if ( dataset != return; ) { return result ; }
Distance : 2

106
Tree	if ( index () ) { return result ; }
Code	if ( index () ) { return result ; }
Distance : 3

107
Tree	if ( ! dataset . getDataset ( dataset ) ) { return result ; }
Code	if ( ! dataset . getDataset ( dataset ) ) { return result ; }
Distance : 6

108
Tree	if ( dataset . dataset ( index ) ) { return result ; }
Code	if ( dataset . dataset ( index ) ) { return result ; }
Distance : 5

109
Tree	if ( dataset != null ) { return result ; } else +=
Code	if ( dataset != null ) { return result ; } else +=
Distance : 3

110
Tree	if ( plot () ) { return result ; }
Code	if ( plot () ) { return result ; }
Distance : 3

111
Tree	if ( dataset ( dataset , dataset , dataset ) ) { return result ; }
Code	if ( dataset ( dataset , dataset , dataset ) ) { return result ; }
Distance : 7

112
Tree	if ( dataset != null ) { return result . result ( dataset ) ; }
Code	if ( dataset != null ) { return result . result ( dataset ) ; }
Distance : 6

113
Tree	if ( item ( dataset , dataset ) ) { return result ; }
Code	if ( item ( dataset , dataset ) ) { return result ; }
Distance : 5

114
Tree	if ( ! item . getDataset ( dataset ) ) { return result ; }
Code	if ( ! item . getDataset ( dataset ) ) { return result ; }
Distance : 7

115
Tree	if ( dataset != null ) { return this . result . CategoryDataset () ; }
Code	if ( dataset != null ) { return this . result . CategoryDataset () ; }
Distance : 6

116
Tree	if ( dataset ( dataset , result ) ) { return result ; }
Code	if ( dataset ( dataset , result ) ) { return result ; }
Distance : 5

117
Tree	if ( new getDataset ( dataset ) . getDataset ( result ) ) { return result ; }
Code	if ( new getDataset ( dataset ) . getDataset ( result ) ) { return result ; }
Distance : 9

118
Tree	if ( plot ( dataset ) ) { return result ; }
Code	if ( plot ( dataset ) ) { return result ; }
Distance : 4

119
Tree	if ( result != null ) { return result . result ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( result != null ) { return result . result ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

120
Tree	if ( item ( dataset ) ) { return result ; }
Code	if ( item ( dataset ) ) { return result ; }
Distance : 4

121
Tree	if ( index . dataset ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( index . dataset ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

122
Tree	if ( getDataset != null ) { return result ; }
Code	if ( getDataset != null ) { return result ; }
Distance : 2

123
Tree	if ( new getDataset ( dataset ) . add ( result ) ) { return result ; }
Code	if ( new getDataset ( dataset ) . add ( result ) ) { return result ; }
Distance : 9

124
Tree	if ( getDataset ( dataset , result ) ) { return result ; }
Code	if ( getDataset ( dataset , result ) ) { return result ; }
Distance : 5

125
Tree	if ( dataset . plot ( dataset ) ) { return result ; }
Code	if ( dataset . plot ( dataset ) ) { return result ; }
Distance : 5

126
Tree	if ( getDataset ( dataset , item , dataset ) ) { return result ; }
Code	if ( getDataset ( dataset , item , dataset ) ) { return result ; }
Distance : 7

127
Tree	if ( item != null ) { return this . result . add () ; }
Code	if ( item != null ) { return this . result . add () ; }
Distance : 7

128
Tree	if ( new dataset () . getDataset ( dataset ) ) { return result ; }
Code	if ( new dataset () . getDataset ( dataset ) ) { return result ; }
Distance : 7

129
Tree	if ( CategoryDataset ( dataset ) ) { return result ; }
Code	if ( CategoryDataset ( dataset ) ) { return result ; }
Distance : 4

130
Tree	if ( getDataset ( dataset , item , result ) ) { return result ; }
Code	if ( getDataset ( dataset , item , result ) ) { return result ; }
Distance : 7

131
Tree	if ( add () ) { return result ; }
Code	if ( add () ) { return result ; }
Distance : 3

132
Tree	if ( != () ) { return result ; }
Code	if ( != () ) { return result ; }
Distance : 3

133
Tree	if ( dataset ( item ) ) { return result ; }
Code	if ( dataset ( item ) ) { return result ; }
Distance : 3

134
Tree	if ( ! plot ( dataset ) ) { return result ; }
Code	if ( ! plot ( dataset ) ) { return result ; }
Distance : 5

135
Tree	if ( dataset != null ) { return this . result . plot () ; }
Code	if ( dataset != null ) { return this . result . plot () ; }
Distance : 6

136
Tree	if ( CategoryDataset () ) { return result ; }
Code	if ( CategoryDataset () ) { return result ; }
Distance : 3

137
Tree	if ( dataset != null ) { return result . add ( dataset ) ; }
Code	if ( dataset != null ) { return result . add ( dataset ) ; }
Distance : 6

138
Tree	if ( getDataset ( dataset , dataset , dataset ) ) { return result ; }
Code	if ( getDataset ( dataset , dataset , dataset ) ) { return result ; }
Distance : 7

139
Tree	if ( getDataset ( dataset , dataset , result ) ) { return result ; }
Code	if ( getDataset ( dataset , dataset , result ) ) { return result ; }
Distance : 7

140
Tree	if ( ! getDataset ( item ) ) { return result ; }
Code	if ( ! getDataset ( item ) ) { return result ; }
Distance : 5

141
Tree	if ( ! add ( dataset ) ) { return result ; }
Code	if ( ! add ( dataset ) ) { return result ; }
Distance : 5

142
Tree	if ( new plot () . getDataset ( dataset ) ) { return result ; }
Code	if ( new plot () . getDataset ( dataset ) ) { return result ; }
Distance : 8

143
Tree	if ( dataset != null ) { return result . equals ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . equals ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

144
Tree	if ( new item () . getDataset ( dataset ) ) { return result ; }
Code	if ( new item () . getDataset ( dataset ) ) { return result ; }
Distance : 8

145
Tree	if ( dataset ( dataset , item , result ) ) { return result ; }
Code	if ( dataset ( dataset , item , result ) ) { return result ; }
Distance : 7

146
Tree	if ( dataset != null ) { return result ; } else super
Code	if ( dataset != null ) { return result ; } else super
Distance : 3

147
Tree	if ( new dataset () . item ( dataset ) ) { return result ; }
Code	if ( new dataset () . item ( dataset ) ) { return result ; }
Distance : 7

148
Tree	if ( ! item . dataset ( dataset ) ) { return result ; }
Code	if ( ! item . dataset ( dataset ) ) { return result ; }
Distance : 6

149
Tree	if ( index != null ) { return this . result . add () ; }
Code	if ( index != null ) { return this . result . add () ; }
Distance : 7

150
Tree	if ( item != null ) { return this . result . getDataset () ; }
Code	if ( item != null ) { return this . result . getDataset () ; }
Distance : 7

151
Tree	if ( dataset ( dataset , item ) ) { return result ; }
Code	if ( dataset ( dataset , item ) ) { return result ; }
Distance : 5

152
Tree	if ( dataset ( item ) ) { return result ; }
Code	if ( dataset ( item ) ) { return result ; }
Distance : 3

153
Tree	if ( new getDataset () . add ( dataset ) ) { return result ; }
Code	if ( new getDataset () . add ( dataset ) ) { return result ; }
Distance : 8

154
Tree	if ( dataset != null ) { return result . item ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . item ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

155
Tree	if ( item != null ) { return result ; }
Code	if ( item != null ) { return result ; }
Distance : 2

156
Tree	if ( dataset . getDataset ( index ) ) { return this . result . result ; }
Code	if ( dataset . getDataset ( index ) ) { return this . result . result ; }
Distance : 9

157
Tree	if ( LegendItemCollection () ) { return result ; }
Code	if ( LegendItemCollection () ) { return result ; }
Distance : 3

158
Tree	if ( dataset != null ) { return this . i ; }
Code	if ( dataset != null ) { return this . i ; }
Distance : 4

159
Tree	if ( new dataset () . equals ( dataset ) ) { return result ; }
Code	if ( new dataset () . equals ( dataset ) ) { return result ; }
Distance : 7

160
Tree	if ( getDataset ( getDataset ) ) { return result ; }
Code	if ( getDataset ( getDataset ) ) { return result ; }
Distance : 4

161
Tree	if ( getDataset ( dataset , dataset , item ) ) { return result ; }
Code	if ( getDataset ( dataset , dataset , item ) ) { return result ; }
Distance : 7

162
Tree	if ( getDataset ( dataset , getDataset ) ) { return result ; }
Code	if ( getDataset ( dataset , getDataset ) ) { return result ; }
Distance : 5

163
Tree	if ( ! getDataset ( result ) ) { return result ; }
Code	if ( ! getDataset ( result ) ) { return result ; }
Distance : 5

164
Tree	if ( dataset . plot () ) { return result ; }
Code	if ( dataset . plot () ) { return result ; }
Distance : 3

165
Tree	if ( dataset . item ( dataset ) ) { return result ; }
Code	if ( dataset . item ( dataset ) ) { return result ; }
Distance : 5

166
Tree	if ( dataset != null ) { return this . result . equals () ; }
Code	if ( dataset != null ) { return this . result . equals () ; }
Distance : 6

167
Tree	if ( new getDataset () . getDataset ( dataset ) ) { return result ; }
Code	if ( new getDataset () . getDataset ( dataset ) ) { return result ; }
Distance : 8

168
Tree	if ( dataset != null ) { return this . dataset ; }
Code	if ( dataset != null ) { return this . dataset ; }
Distance : 4

169
Tree	if ( dataset . add ( dataset ) ) { return result ; }
Code	if ( dataset . add ( dataset ) ) { return result ; }
Distance : 5

170
Tree	if ( new dataset () . dataset ( dataset ) ) { return result ; }
Code	if ( new dataset () . dataset ( dataset ) ) { return result ; }
Distance : 7

171
Tree	if ( dataset ( getDataset ) ) { return result ; }
Code	if ( dataset ( getDataset ) ) { return result ; }
Distance : 3

172
Tree	if ( dataset != super(); ) { return result ; }
Code	if ( dataset != super(); ) { return result ; }
Distance : 2

173
Tree	if ( dataset != null ) { return result . item ( dataset ) ; }
Code	if ( dataset != null ) { return result . item ( dataset ) ; }
Distance : 6

174
Tree	if ( plot != null ) { return this . result ; }
Code	if ( plot != null ) { return this . result ; }
Distance : 4

175
Tree	if ( result != null ) { return this . result ; }
Code	if ( result != null ) { return this . result ; }
Distance : 4

176
Tree	if ( getDataset ( result ) ) { return result ; }
Code	if ( getDataset ( result ) ) { return result ; }
Distance : 4

177
Tree	if ( index != null ) { return result . result ( dataset ) ; }
Code	if ( index != null ) { return result . result ( dataset ) ; }
Distance : 7

178
Tree	if ( getDataset ( item ) ) { return result ; }
Code	if ( getDataset ( item ) ) { return result ; }
Distance : 4

179
Tree	if ( dataset ( dataset ) ) { return result ; }
Code	if ( dataset ( dataset ) ) { return result ; }
Distance : 3

180
Tree	if ( CategoryDataset != null ) { return result ; }
Code	if ( CategoryDataset != null ) { return result ; }
Distance : 2

181
Tree	if ( dataset . item () ) { return result ; }
Code	if ( dataset . item () ) { return result ; }
Distance : 3

182
Tree	if ( ! getDataset ( index ) ) { return result ; }
Code	if ( ! getDataset ( index ) ) { return result ; }
Distance : 5

183
Tree	if ( dataset != null ) { return result . dataset ( dataset ) ; }
Code	if ( dataset != null ) { return result . dataset ( dataset ) ; }
Distance : 6

184
Tree	if ( item . dataset () ) { return result ; }
Code	if ( item . dataset () ) { return result ; }
Distance : 4

185
Tree	if ( getDataset ( dataset , result , result ) ) { return result ; }
Code	if ( getDataset ( dataset , result , result ) ) { return result ; }
Distance : 7

186
Tree	if ( getDataset ( plot ) ) { return result ; }
Code	if ( getDataset ( plot ) ) { return result ; }
Distance : 4

187
Tree	if ( index . getDataset ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( index . getDataset ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 6

188
Tree	if ( dataset . getDataset ( index ) ) { return result ; }
Code	if ( dataset . getDataset ( index ) ) { return result ; }
Distance : 5

189
Tree	if ( ! equals ( dataset ) ) { return result ; }
Code	if ( ! equals ( dataset ) ) { return result ; }
Distance : 5

190
Tree	if ( getDataset ( index ) ) { return result ; }
Code	if ( getDataset ( index ) ) { return result ; }
Distance : 4

191
Tree	if ( item != null ) { return result . result ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( item != null ) { return result . result ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

192
Tree	if ( getDataset ( dataset ) ) { return result ; }
Code	if ( getDataset ( dataset ) ) { return result ; }
Distance : 4

193
Tree	if ( item . getDataset () ) { return result ; }
Code	if ( item . getDataset () ) { return result ; }
Distance : 4

194
Tree	if ( getDataset ( dataset , index , result ) ) { return result ; }
Code	if ( getDataset ( dataset , index , result ) ) { return result ; }
Distance : 7

195
Tree	if ( ! dataset ( dataset ) ) { return result ; }
Code	if ( ! dataset ( dataset ) ) { return result ; }
Distance : 4

196
Tree	if ( getDataset ( item ) ) { return result ; }
Code	if ( getDataset ( item ) ) { return result ; }
Distance : 4

197
Tree	if ( ! dataset . add ( dataset ) ) { return result ; }
Code	if ( ! dataset . add ( dataset ) ) { return result ; }
Distance : 6

198
Tree	if ( dataset != null ) { return result . getDataset ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . getDataset ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

199
Tree	if ( getDataset ( CategoryDataset ) ) { return result ; }
Code	if ( getDataset ( CategoryDataset ) ) { return result ; }
Distance : 4

========================================================================


========================================================================
Example Number: 10
Parent Code is: 
name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
-------------------------------------------------------------------------------
Child code is: 
! name.inExterns && name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (27 (27 (40{val=name.globalSets}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (40{val=name.localSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.aliasingGets}) (231{val=>}) (34{val=NUMBER_CONSTANT}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (27 (27 (38 (207{val=!}) (40{val=name.inExterns})) (249{val=&&}) (27 (40{val=name.globalSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.localSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.aliasingGets}) (231{val=>}) (34{val=NUMBER_CONSTANT}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/130/parent/src_com_google_javascript_jscomp_CollapseProperties.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 180
Wrong
========================================================================
False

0
Tree	- NUMBER_CONSTANT && getRefs == null && super
Code	- NUMBER_CONSTANT && getRefs == null && super
Distance : 10

1
Tree	- NUMBER_CONSTANT && getRefs == null && else
Code	- NUMBER_CONSTANT && getRefs == null && else
Distance : 10

2
Tree	- NUMBER_CONSTANT && Ref == null && CHAR_CONS
Code	- NUMBER_CONSTANT && Ref == null && CHAR_CONS
Distance : 10

3
Tree	- NUMBER_CONSTANT && getRefs == null && else
Code	- NUMBER_CONSTANT && getRefs == null && else
Distance : 10

4
Tree	- NUMBER_CONSTANT && Ref == null && CHAR_CONS
Code	- NUMBER_CONSTANT && Ref == null && CHAR_CONS
Distance : 10

5
Tree	- NUMBER_CONSTANT && getRefs == null && super
Code	- NUMBER_CONSTANT && getRefs == null && super
Distance : 10

6
Tree	- NUMBER_CONSTANT && getRefs == null && CHAR_CONS
Code	- NUMBER_CONSTANT && getRefs == null && CHAR_CONS
Distance : 10

7
Tree	- NUMBER_CONSTANT && Ref == null && super
Code	- NUMBER_CONSTANT && Ref == null && super
Distance : 10

8
Tree	- NUMBER_CONSTANT && Ref == null && super
Code	- NUMBER_CONSTANT && Ref == null && super
Distance : 10

9
Tree	- NUMBER_CONSTANT && getRefs == null && CHAR_CONS
Code	- NUMBER_CONSTANT && getRefs == null && CHAR_CONS
Distance : 10

10
Tree	! getRefs && getRefs == null && super
Code	! getRefs && getRefs == null && super
Distance : 10

11
Tree	! Ref && Ref == null && super
Code	! Ref && Ref == null && super
Distance : 10

12
Tree	! pop && Ref == null && super
Code	! pop && Ref == null && super
Distance : 10

13
Tree	NUMBER_CONSTANT * ( Ref * refs )
Code	NUMBER_CONSTANT * ( Ref * refs )
Distance : 13

14
Tree	! Deque && Ref == null && super
Code	! Deque && Ref == null && super
Distance : 10

15
Tree	! getRefs && Ref == null && super
Code	! getRefs && Ref == null && super
Distance : 10

16
Tree	! Ref && getRefs == null == NUMBER_CONSTANT
Code	! Ref && getRefs == null == NUMBER_CONSTANT
Distance : 9

17
Tree	! pop && getRefs == null == NUMBER_CONSTANT
Code	! pop && getRefs == null == NUMBER_CONSTANT
Distance : 9

18
Tree	! Ref && getRefs == null && CHAR_CONS
Code	! Ref && getRefs == null && CHAR_CONS
Distance : 10

19
Tree	! pop && getRefs == null && CHAR_CONS
Code	! pop && getRefs == null && CHAR_CONS
Distance : 10

20
Tree	! Ref && getRefs == null && super
Code	! Ref && getRefs == null && super
Distance : 10

21
Tree	! pop && getRefs == null && super
Code	! pop && getRefs == null && super
Distance : 10

22
Tree	! Deque && getRefs == null && super
Code	! Deque && getRefs == null && super
Distance : 10

23
Tree	! Ref && Ref == null && super
Code	! Ref && Ref == null && super
Distance : 10

24
Tree	! pop && Ref == null && super
Code	! pop && Ref == null && super
Distance : 10

25
Tree	! Deque && Ref == null && super
Code	! Deque && Ref == null && super
Distance : 10

26
Tree	! Ref && getRefs == null && super
Code	! Ref && getRefs == null && super
Distance : 10

27
Tree	! pop && getRefs == null && super
Code	! pop && getRefs == null && super
Distance : 10

28
Tree	NUMBER_CONSTANT * ( Ref * Ref )
Code	NUMBER_CONSTANT * ( Ref * Ref )
Distance : 13

29
Tree	! Deque && getRefs == null && super
Code	! Deque && getRefs == null && super
Distance : 10

30
Tree	- Ref && getRefs == null && isLocal . name ( NUMBER_CONSTANT - pop )
Code	- Ref && getRefs == null && isLocal . name ( NUMBER_CONSTANT - pop )
Distance : 12

31
Tree	- pop && getRefs == null && isLocal . name ( NUMBER_CONSTANT - pop )
Code	- pop && getRefs == null && isLocal . name ( NUMBER_CONSTANT - pop )
Distance : 12

32
Tree	- Ref && getRefs == null && refs . name ( NUMBER_CONSTANT - pop )
Code	- Ref && getRefs == null && refs . name ( NUMBER_CONSTANT - pop )
Distance : 12

33
Tree	- Ref && getRefs == null && isLocal . name ( NUMBER_CONSTANT - refs )
Code	- Ref && getRefs == null && isLocal . name ( NUMBER_CONSTANT - refs )
Distance : 12

34
Tree	- pop && getRefs == null && refs . name ( NUMBER_CONSTANT - pop )
Code	- pop && getRefs == null && refs . name ( NUMBER_CONSTANT - pop )
Distance : 12

35
Tree	- Ref && Ref == null && isLocal . name ( NUMBER_CONSTANT - pop )
Code	- Ref && Ref == null && isLocal . name ( NUMBER_CONSTANT - pop )
Distance : 12

36
Tree	- pop && getRefs == null && isLocal . name ( NUMBER_CONSTANT - refs )
Code	- pop && getRefs == null && isLocal . name ( NUMBER_CONSTANT - refs )
Distance : 12

37
Tree	- pop && Ref == null && isLocal . name ( NUMBER_CONSTANT - pop )
Code	- pop && Ref == null && isLocal . name ( NUMBER_CONSTANT - pop )
Distance : 12

38
Tree	- Deque && getRefs == null && isLocal . name ( NUMBER_CONSTANT - pop )
Code	- Deque && getRefs == null && isLocal . name ( NUMBER_CONSTANT - pop )
Distance : 12

39
Tree	- Ref && getRefs == null && refs . name ( NUMBER_CONSTANT - refs )
Code	- Ref && getRefs == null && refs . name ( NUMBER_CONSTANT - refs )
Distance : 12

40
Tree	Deque == NUMBER_CONSTANT && refs > refs
Code	Deque == NUMBER_CONSTANT && refs > refs
Distance : 10

41
Tree	- Deque && Deque == null && super
Code	- Deque && Deque == null && super
Distance : 11

42
Tree	- getRefs && getRefs == null && super
Code	- getRefs && getRefs == null && super
Distance : 11

43
Tree	- ref.scope && Ref == null && super
Code	- ref.scope && Ref == null && super
Distance : 11

44
Tree	- Deque && Deque == null && super
Code	- Deque && Deque == null && super
Distance : 11

45
Tree	- Deque && Ref == null && CHAR_CONS
Code	- Deque && Ref == null && CHAR_CONS
Distance : 11

46
Tree	- ref.scope && Ref == null && super
Code	- ref.scope && Ref == null && super
Distance : 11

47
Tree	- Deque && Ref == null && CHAR_CONS
Code	- Deque && Ref == null && CHAR_CONS
Distance : 11

48
Tree	- Ref && getRefs == null && super
Code	- Ref && getRefs == null && super
Distance : 11

49
Tree	Deque == NUMBER_CONSTANT && getRefs > refs
Code	Deque == NUMBER_CONSTANT && getRefs > refs
Distance : 10

50
Tree	! Deque && getRefs == null == NUMBER_CONSTANT
Code	! Deque && getRefs == null == NUMBER_CONSTANT
Distance : 9

51
Tree	NUMBER_CONSTANT * ( refs * Ref )
Code	NUMBER_CONSTANT * ( refs * Ref )
Distance : 13

52
Tree	! getRefs && getRefs == null && super
Code	! getRefs && getRefs == null && super
Distance : 10

53
Tree	NUMBER_CONSTANT * ( Ref * getRefs )
Code	NUMBER_CONSTANT * ( Ref * getRefs )
Distance : 13

54
Tree	! Ref && Ref == null == NUMBER_CONSTANT
Code	! Ref && Ref == null == NUMBER_CONSTANT
Distance : 9

55
Tree	! pop && Ref == null == NUMBER_CONSTANT
Code	! pop && Ref == null == NUMBER_CONSTANT
Distance : 9

56
Tree	! Deque && Ref == null == NUMBER_CONSTANT
Code	! Deque && Ref == null == NUMBER_CONSTANT
Distance : 9

57
Tree	NUMBER_CONSTANT * ( getRefs * Ref )
Code	NUMBER_CONSTANT * ( getRefs * Ref )
Distance : 13

58
Tree	NUMBER_CONSTANT * ( refs * refs )
Code	NUMBER_CONSTANT * ( refs * refs )
Distance : 13

59
Tree	NUMBER_CONSTANT * ( Ref * pop )
Code	NUMBER_CONSTANT * ( Ref * pop )
Distance : 13

60
Tree	NUMBER_CONSTANT * ( pop * Ref )
Code	NUMBER_CONSTANT * ( pop * Ref )
Distance : 13

61
Tree	! getRefs && Ref == null && super
Code	! getRefs && Ref == null && super
Distance : 10

62
Tree	! Ref && getRefs == null && CHAR_CONS
Code	! Ref && getRefs == null && CHAR_CONS
Distance : 10

63
Tree	! pop && getRefs == null && CHAR_CONS
Code	! pop && getRefs == null && CHAR_CONS
Distance : 10

64
Tree	! pop && getRefs + NUMBER_CONSTANT && super
Code	! pop && getRefs + NUMBER_CONSTANT && super
Distance : 10

65
Tree	- NUMBER_CONSTANT && getRefs == null && extends
Code	- NUMBER_CONSTANT && getRefs == null && extends
Distance : 10

66
Tree	- Deque && refs == null && super
Code	- Deque && refs == null && super
Distance : 11

67
Tree	! Ref && getRefs + NUMBER_CONSTANT && super
Code	! Ref && getRefs + NUMBER_CONSTANT && super
Distance : 10

68
Tree	NUMBER_CONSTANT * ( Deque * Ref )
Code	NUMBER_CONSTANT * ( Deque * Ref )
Distance : 13

69
Tree	! getRefs && getRefs == null == NUMBER_CONSTANT
Code	! getRefs && getRefs == null == NUMBER_CONSTANT
Distance : 9

70
Tree	- Ref && getRefs == null && super
Code	- Ref && getRefs == null && super
Distance : 11

71
Tree	- NUMBER_CONSTANT && refs == null && super
Code	- NUMBER_CONSTANT && refs == null && super
Distance : 10

72
Tree	NUMBER_CONSTANT * ( getRefs * refs )
Code	NUMBER_CONSTANT * ( getRefs * refs )
Distance : 13

73
Tree	! Deque && getRefs + NUMBER_CONSTANT && super
Code	! Deque && getRefs + NUMBER_CONSTANT && super
Distance : 10

74
Tree	- Deque && refs == null && super
Code	- Deque && refs == null && super
Distance : 11

75
Tree	- NUMBER_CONSTANT && pop == null && super
Code	- NUMBER_CONSTANT && pop == null && super
Distance : 10

76
Tree	- NUMBER_CONSTANT && getRefs == null && extends
Code	- NUMBER_CONSTANT && getRefs == null && extends
Distance : 10

77
Tree	- NUMBER_CONSTANT && refs == null && super
Code	- NUMBER_CONSTANT && refs == null && super
Distance : 10

78
Tree	- NUMBER_CONSTANT && getRefs == null && ^
Code	- NUMBER_CONSTANT && getRefs == null && ^
Distance : 10

79
Tree	- NUMBER_CONSTANT && getRefs == null && &&
Code	- NUMBER_CONSTANT && getRefs == null && &&
Distance : 10

80
Tree	- NUMBER_CONSTANT && pop == null && super
Code	- NUMBER_CONSTANT && pop == null && super
Distance : 10

81
Tree	- Deque && getRefs == null && super
Code	- Deque && getRefs == null && super
Distance : 11

82
Tree	- getRefs && Ref == null && super
Code	- getRefs && Ref == null && super
Distance : 11

83
Tree	- Deque && getRefs == null && super
Code	- Deque && getRefs == null && super
Distance : 11

84
Tree	- NUMBER_CONSTANT && getRefs == null && ^
Code	- NUMBER_CONSTANT && getRefs == null && ^
Distance : 10

85
Tree	- NUMBER_CONSTANT && getRefs == null && &&
Code	- NUMBER_CONSTANT && getRefs == null && &&
Distance : 10

86
Tree	! Ref && getRefs == null && NUMBER_CONSTANT * refs
Code	! Ref && getRefs == null && NUMBER_CONSTANT * refs
Distance : 9

87
Tree	! pop && getRefs == null && NUMBER_CONSTANT * refs
Code	! pop && getRefs == null && NUMBER_CONSTANT * refs
Distance : 9

88
Tree	! Deque && getRefs == null && NUMBER_CONSTANT * refs
Code	! Deque && getRefs == null && NUMBER_CONSTANT * refs
Distance : 9

89
Tree	- Deque && Ref == null && super
Code	- Deque && Ref == null && super
Distance : 11

90
Tree	- Ref && getRefs == null && super
Code	- Ref && getRefs == null && super
Distance : 11

91
Tree	- Deque && Ref == null && super
Code	- Deque && Ref == null && super
Distance : 11

92
Tree	Deque == NUMBER_CONSTANT && Ref > getRefs
Code	Deque == NUMBER_CONSTANT && Ref > getRefs
Distance : 10

93
Tree	Deque == NUMBER_CONSTANT && Ref > pop
Code	Deque == NUMBER_CONSTANT && Ref > pop
Distance : 10

94
Tree	- Ref && getRefs == null && CHAR_CONS
Code	- Ref && getRefs == null && CHAR_CONS
Distance : 11

95
Tree	- refs && getRefs == null && super
Code	- refs && getRefs == null && super
Distance : 11

96
Tree	- pop && getRefs == null && super
Code	- pop && getRefs == null && super
Distance : 11

97
Tree	! Ref && getRefs == null && NUMBER_CONSTANT * Ref
Code	! Ref && getRefs == null && NUMBER_CONSTANT * Ref
Distance : 9

98
Tree	Deque == NUMBER_CONSTANT && refs > getRefs
Code	Deque == NUMBER_CONSTANT && refs > getRefs
Distance : 10

99
Tree	Deque == NUMBER_CONSTANT && refs > pop
Code	Deque == NUMBER_CONSTANT && refs > pop
Distance : 10

100
Tree	Deque == NUMBER_CONSTANT && getRefs == NUMBER_CONSTANT && pop > NUMBER_CONSTANT
Code	Deque == NUMBER_CONSTANT && getRefs == NUMBER_CONSTANT && pop > NUMBER_CONSTANT
Distance : 6

101
Tree	Deque == NUMBER_CONSTANT && getRefs == NUMBER_CONSTANT && Name > NUMBER_CONSTANT
Code	Deque == NUMBER_CONSTANT && getRefs == NUMBER_CONSTANT && Name > NUMBER_CONSTANT
Distance : 6

102
Tree	Deque == NUMBER_CONSTANT && Ref > Ref
Code	Deque == NUMBER_CONSTANT && Ref > Ref
Distance : 10

103
Tree	Deque == NUMBER_CONSTANT && refs > Ref
Code	Deque == NUMBER_CONSTANT && refs > Ref
Distance : 10

104
Tree	Deque == NUMBER_CONSTANT && getRefs == NUMBER_CONSTANT && isLocal > NUMBER_CONSTANT
Code	Deque == NUMBER_CONSTANT && getRefs == NUMBER_CONSTANT && isLocal > NUMBER_CONSTANT
Distance : 6

105
Tree	! pop && getRefs == null && NUMBER_CONSTANT * Ref
Code	! pop && getRefs == null && NUMBER_CONSTANT * Ref
Distance : 9

106
Tree	- Deque && pop == null && super
Code	- Deque && pop == null && super
Distance : 11

107
Tree	! Ref && Ref == null && NUMBER_CONSTANT * refs
Code	! Ref && Ref == null && NUMBER_CONSTANT * refs
Distance : 9

108
Tree	! pop && Ref == null && NUMBER_CONSTANT * refs
Code	! pop && Ref == null && NUMBER_CONSTANT * refs
Distance : 9

109
Tree	Deque == NUMBER_CONSTANT && Ref == NUMBER_CONSTANT && Ref > NUMBER_CONSTANT
Code	Deque == NUMBER_CONSTANT && Ref == NUMBER_CONSTANT && Ref > NUMBER_CONSTANT
Distance : 6

110
Tree	! Deque && getRefs == null && NUMBER_CONSTANT * Ref
Code	! Deque && getRefs == null && NUMBER_CONSTANT * Ref
Distance : 9

111
Tree	- Deque && getRefs == null && CHAR_CONS
Code	- Deque && getRefs == null && CHAR_CONS
Distance : 11

112
Tree	! Deque && Ref == null && NUMBER_CONSTANT * refs
Code	! Deque && Ref == null && NUMBER_CONSTANT * refs
Distance : 9

113
Tree	! Ref && getRefs == null && NUMBER_CONSTANT * isLocal
Code	! Ref && getRefs == null && NUMBER_CONSTANT * isLocal
Distance : 9

114
Tree	Deque == NUMBER_CONSTANT && getRefs == NUMBER_CONSTANT && Deque > NUMBER_CONSTANT
Code	Deque == NUMBER_CONSTANT && getRefs == NUMBER_CONSTANT && Deque > NUMBER_CONSTANT
Distance : 6

115
Tree	Deque == NUMBER_CONSTANT && Ref == NUMBER_CONSTANT && getRefs > NUMBER_CONSTANT
Code	Deque == NUMBER_CONSTANT && Ref == NUMBER_CONSTANT && getRefs > NUMBER_CONSTANT
Distance : 6

116
Tree	Deque == NUMBER_CONSTANT && getRefs == NUMBER_CONSTANT && refs > NUMBER_CONSTANT
Code	Deque == NUMBER_CONSTANT && getRefs == NUMBER_CONSTANT && refs > NUMBER_CONSTANT
Distance : 6

117
Tree	Deque == NUMBER_CONSTANT && getRefs == NUMBER_CONSTANT && Ref > NUMBER_CONSTANT
Code	Deque == NUMBER_CONSTANT && getRefs == NUMBER_CONSTANT && Ref > NUMBER_CONSTANT
Distance : 6

118
Tree	Deque == NUMBER_CONSTANT && getRefs == NUMBER_CONSTANT && getRefs > NUMBER_CONSTANT
Code	Deque == NUMBER_CONSTANT && getRefs == NUMBER_CONSTANT && getRefs > NUMBER_CONSTANT
Distance : 6

119
Tree	Ref == NUMBER_CONSTANT && getRefs == NUMBER_CONSTANT && getRefs > NUMBER_CONSTANT
Code	Ref == NUMBER_CONSTANT && getRefs == NUMBER_CONSTANT && getRefs > NUMBER_CONSTANT
Distance : 6

120
Tree	! Ref && Ref + NUMBER_CONSTANT && super
Code	! Ref && Ref + NUMBER_CONSTANT && super
Distance : 10

121
Tree	! pop && Ref + NUMBER_CONSTANT && super
Code	! pop && Ref + NUMBER_CONSTANT && super
Distance : 10

122
Tree	! Deque && Ref + NUMBER_CONSTANT && super
Code	! Deque && Ref + NUMBER_CONSTANT && super
Distance : 10

123
Tree	- ref.scope && getRefs == null && super
Code	- ref.scope && getRefs == null && super
Distance : 11

124
Tree	- Deque && pop == null && super
Code	- Deque && pop == null && super
Distance : 11

125
Tree	! pop && refs + NUMBER_CONSTANT && super
Code	! pop && refs + NUMBER_CONSTANT && super
Distance : 10

126
Tree	- Ref && Ref == null && super
Code	- Ref && Ref == null && super
Distance : 11

127
Tree	! Ref && NUMBER_CONSTANT - refs && >=
Code	! Ref && NUMBER_CONSTANT - refs && >=
Distance : 10

128
Tree	! pop && NUMBER_CONSTANT - refs && >=
Code	! pop && NUMBER_CONSTANT - refs && >=
Distance : 10

129
Tree	- Ref && getRefs == null && NUMBER_CONSTANT * refs
Code	- Ref && getRefs == null && NUMBER_CONSTANT * refs
Distance : 10

130
Tree	! Ref && refs + NUMBER_CONSTANT && super
Code	! Ref && refs + NUMBER_CONSTANT && super
Distance : 10

131
Tree	- pop && getRefs == null && NUMBER_CONSTANT * refs
Code	- pop && getRefs == null && NUMBER_CONSTANT * refs
Distance : 10

132
Tree	! Deque && NUMBER_CONSTANT - refs && ^
Code	! Deque && NUMBER_CONSTANT - refs && ^
Distance : 10

133
Tree	! Ref && Deque == null == NUMBER_CONSTANT
Code	! Ref && Deque == null == NUMBER_CONSTANT
Distance : 9

134
Tree	- Ref && getRefs == null && NUMBER_CONSTANT * Ref
Code	- Ref && getRefs == null && NUMBER_CONSTANT * Ref
Distance : 10

135
Tree	! Ref && pop + NUMBER_CONSTANT && super
Code	! Ref && pop + NUMBER_CONSTANT && super
Distance : 10

136
Tree	- Ref && Ref == null && NUMBER_CONSTANT * refs
Code	- Ref && Ref == null && NUMBER_CONSTANT * refs
Distance : 10

137
Tree	- Deque && getRefs == null && CHAR_CONS
Code	- Deque && getRefs == null && CHAR_CONS
Distance : 11

138
Tree	- pop && getRefs == null && NUMBER_CONSTANT * Ref
Code	- pop && getRefs == null && NUMBER_CONSTANT * Ref
Distance : 10

139
Tree	! getRefs && Ref == null == NUMBER_CONSTANT
Code	! getRefs && Ref == null == NUMBER_CONSTANT
Distance : 9

140
Tree	- ref.scope && getRefs == null && super
Code	- ref.scope && getRefs == null && super
Distance : 11

141
Tree	! Ref && NUMBER_CONSTANT - refs && ^
Code	! Ref && NUMBER_CONSTANT - refs && ^
Distance : 10

142
Tree	! pop && NUMBER_CONSTANT - refs && ^
Code	! pop && NUMBER_CONSTANT - refs && ^
Distance : 10

143
Tree	- Deque && getRefs == null && super
Code	- Deque && getRefs == null && super
Distance : 11

144
Tree	- pop && Ref == null && super
Code	- pop && Ref == null && super
Distance : 11

145
Tree	! Ref && NUMBER_CONSTANT - Ref && ^
Code	! Ref && NUMBER_CONSTANT - Ref && ^
Distance : 10

146
Tree	! pop && NUMBER_CONSTANT - Ref && ^
Code	! pop && NUMBER_CONSTANT - Ref && ^
Distance : 10

147
Tree	Deque == NUMBER_CONSTANT && getRefs > getRefs
Code	Deque == NUMBER_CONSTANT && getRefs > getRefs
Distance : 10

148
Tree	! Ref && NUMBER_CONSTANT - refs && /
Code	! Ref && NUMBER_CONSTANT - refs && /
Distance : 10

149
Tree	- Deque && getRefs == null && NUMBER_CONSTANT * refs
Code	- Deque && getRefs == null && NUMBER_CONSTANT * refs
Distance : 10

150
Tree	- pop && Ref == null && NUMBER_CONSTANT * refs
Code	- pop && Ref == null && NUMBER_CONSTANT * refs
Distance : 10

151
Tree	- Ref && Ref == null && NUMBER_CONSTANT * Ref
Code	- Ref && Ref == null && NUMBER_CONSTANT * Ref
Distance : 10

152
Tree	! Deque && refs + NUMBER_CONSTANT && super
Code	! Deque && refs + NUMBER_CONSTANT && super
Distance : 10

153
Tree	Deque == NUMBER_CONSTANT && Ref > refs
Code	Deque == NUMBER_CONSTANT && Ref > refs
Distance : 10

154
Tree	! refs && getRefs == null == NUMBER_CONSTANT
Code	! refs && getRefs == null == NUMBER_CONSTANT
Distance : 9

155
Tree	! pop && NUMBER_CONSTANT - refs && /
Code	! pop && NUMBER_CONSTANT - refs && /
Distance : 10

156
Tree	- Deque && Ref == null && super
Code	- Deque && Ref == null && super
Distance : 11

157
Tree	- Ref && getRefs == null && NUMBER_CONSTANT * isLocal
Code	- Ref && getRefs == null && NUMBER_CONSTANT * isLocal
Distance : 10

158
Tree	! Deque && NUMBER_CONSTANT - refs && >=
Code	! Deque && NUMBER_CONSTANT - refs && >=
Distance : 10

159
Tree	- Deque && getRefs == null && NUMBER_CONSTANT * Ref
Code	- Deque && getRefs == null && NUMBER_CONSTANT * Ref
Distance : 10

160
Tree	Deque . isEmpty () && pop . name ( NUMBER_CONSTANT - pop ) <= pop
Code	Deque . isEmpty () && pop . name ( NUMBER_CONSTANT - pop ) <= pop
Distance : 14

161
Tree	Deque . isEmpty () && refs . name ( NUMBER_CONSTANT - pop ) <= pop
Code	Deque . isEmpty () && refs . name ( NUMBER_CONSTANT - pop ) <= pop
Distance : 14

162
Tree	Deque . isEmpty () && pop . name ( NUMBER_CONSTANT - refs ) <= pop
Code	Deque . isEmpty () && pop . name ( NUMBER_CONSTANT - refs ) <= pop
Distance : 14

163
Tree	! pop && getRefs == null && isLocal . name ( NUMBER_CONSTANT - pop )
Code	! pop && getRefs == null && isLocal . name ( NUMBER_CONSTANT - pop )
Distance : 11

164
Tree	! Ref && getRefs == null && isLocal . name ( NUMBER_CONSTANT - pop )
Code	! Ref && getRefs == null && isLocal . name ( NUMBER_CONSTANT - pop )
Distance : 11

165
Tree	Deque . isEmpty () && pop . name ( NUMBER_CONSTANT - pop ) <= refs
Code	Deque . isEmpty () && pop . name ( NUMBER_CONSTANT - pop ) <= refs
Distance : 14

166
Tree	Deque . isEmpty () && refs . name ( NUMBER_CONSTANT - refs ) <= pop
Code	Deque . isEmpty () && refs . name ( NUMBER_CONSTANT - refs ) <= pop
Distance : 14

167
Tree	! Deque && getRefs == null && isLocal . name ( NUMBER_CONSTANT - pop )
Code	! Deque && getRefs == null && isLocal . name ( NUMBER_CONSTANT - pop )
Distance : 11

168
Tree	! pop && getRefs == null && isLocal . name ( NUMBER_CONSTANT - refs )
Code	! pop && getRefs == null && isLocal . name ( NUMBER_CONSTANT - refs )
Distance : 11

169
Tree	! Ref && getRefs == null && isLocal . name ( NUMBER_CONSTANT - refs )
Code	! Ref && getRefs == null && isLocal . name ( NUMBER_CONSTANT - refs )
Distance : 11

170
Tree	Deque . isEmpty () && refs . name ( NUMBER_CONSTANT - pop ) <= refs
Code	Deque . isEmpty () && refs . name ( NUMBER_CONSTANT - pop ) <= refs
Distance : 14

171
Tree	Deque . isEmpty () && pop . pop ( NUMBER_CONSTANT - pop ) <= pop
Code	Deque . isEmpty () && pop . pop ( NUMBER_CONSTANT - pop ) <= pop
Distance : 14

172
Tree	! pop && Ref == null && isLocal . name ( NUMBER_CONSTANT - pop )
Code	! pop && Ref == null && isLocal . name ( NUMBER_CONSTANT - pop )
Distance : 11

173
Tree	! Ref && Ref == null && isLocal . name ( NUMBER_CONSTANT - pop )
Code	! Ref && Ref == null && isLocal . name ( NUMBER_CONSTANT - pop )
Distance : 11

174
Tree	Deque . isEmpty () && pop . name ( NUMBER_CONSTANT - refs ) <= refs
Code	Deque . isEmpty () && pop . name ( NUMBER_CONSTANT - refs ) <= refs
Distance : 14

175
Tree	! Deque && getRefs == null && isLocal . name ( NUMBER_CONSTANT - refs )
Code	! Deque && getRefs == null && isLocal . name ( NUMBER_CONSTANT - refs )
Distance : 11

176
Tree	Deque . isEmpty () && refs . name ( NUMBER_CONSTANT - refs ) <= refs
Code	Deque . isEmpty () && refs . name ( NUMBER_CONSTANT - refs ) <= refs
Distance : 14

177
Tree	! pop && getRefs == null && refs . name ( NUMBER_CONSTANT - pop )
Code	! pop && getRefs == null && refs . name ( NUMBER_CONSTANT - pop )
Distance : 11

178
Tree	Deque . isEmpty () && refs . pop ( NUMBER_CONSTANT - pop ) <= pop
Code	Deque . isEmpty () && refs . pop ( NUMBER_CONSTANT - pop ) <= pop
Distance : 14

179
Tree	! Ref && getRefs == null && refs . name ( NUMBER_CONSTANT - pop )
Code	! Ref && getRefs == null && refs . name ( NUMBER_CONSTANT - pop )
Distance : 11

========================================================================


========================================================================
Example Number: 11
Parent Code is: 
Context rhsContext = Context.OTHER ;
-------------------------------------------------------------------------------
Child code is: 
Context rhsContext = getContextForNoInOperator ( context ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Context})) (59 (800{val=rhsContext}) (204{val==}) (40{val=Context.OTHER})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Context})) (59 (800{val=rhsContext}) (204{val==}) (32 (802{val=getContextForNoInOperator}) (214{val=(}) (800{val=context}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/123/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Token.NULL isNumber = source.contractionCriterion ;
Code	Token.NULL isNumber = source.contractionCriterion ;
Distance : 6

1
Tree	Token.NULL isNumber = STRING_CONSTANT ;
Code	Token.NULL isNumber = STRING_CONSTANT ;
Distance : 6

2
Tree	Token.BREAK Token.LABEL_NAME = STRING_CONSTANT ;
Code	Token.BREAK Token.LABEL_NAME = STRING_CONSTANT ;
Distance : 6

3
Tree	Token.LABEL_NAME isNumber = STRING_CONSTANT ;
Code	Token.LABEL_NAME isNumber = STRING_CONSTANT ;
Distance : 6

4
Tree	Token.LABEL_NAME isNumber = source.contractionCriterion ;
Code	Token.LABEL_NAME isNumber = source.contractionCriterion ;
Distance : 6

5
Tree	Token.BREAK Token.LABEL_NAME = source.contractionCriterion ;
Code	Token.BREAK Token.LABEL_NAME = source.contractionCriterion ;
Distance : 6

6
Tree	Token.NULL isGet = STRING_CONSTANT ;
Code	Token.NULL isGet = STRING_CONSTANT ;
Distance : 6

7
Tree	Token.NULL isGet = source.contractionCriterion ;
Code	Token.NULL isGet = source.contractionCriterion ;
Distance : 6

8
Tree	Token.NULL isJSIdentifier = getOrCreateName ;
Code	Token.NULL isJSIdentifier = getOrCreateName ;
Distance : 6

9
Tree	addNumber isJSIdentifier = STRING_CONSTANT ;
Code	addNumber isJSIdentifier = STRING_CONSTANT ;
Distance : 6

10
Tree	Token.NULL isJSIdentifier ;
Code	Token.NULL isJSIdentifier ;
Distance : 7

11
Tree	Token.LABEL_NAME isJSIdentifier ;
Code	Token.LABEL_NAME isJSIdentifier ;
Distance : 7

12
Tree	Token.BREAK isJSIdentifier ;
Code	Token.BREAK isJSIdentifier ;
Distance : 7

13
Tree	Token.NULL Token.LABEL_NAME ;
Code	Token.NULL Token.LABEL_NAME ;
Distance : 7

14
Tree	Token.LABEL_NAME Token.LABEL_NAME ;
Code	Token.LABEL_NAME Token.LABEL_NAME ;
Distance : 7

15
Tree	Token.NULL isNumber ;
Code	Token.NULL isNumber ;
Distance : 7

16
Tree	Token.LABEL_NAME isNumber ;
Code	Token.LABEL_NAME isNumber ;
Distance : 7

17
Tree	Token.BREAK Token.LABEL_NAME ;
Code	Token.BREAK Token.LABEL_NAME ;
Distance : 7

18
Tree	Token.NULL isGet ;
Code	Token.NULL isGet ;
Distance : 7

19
Tree	Token.LABEL_NAME isGet ;
Code	Token.LABEL_NAME isGet ;
Distance : 7

20
Tree	Token.LABEL_NAME isJSIdentifier = this . toStringTree ;
Code	Token.LABEL_NAME isJSIdentifier = this . toStringTree ;
Distance : 6

21
Tree	Token.LABEL_NAME isGet = toStringTree ;
Code	Token.LABEL_NAME isGet = toStringTree ;
Distance : 6

22
Tree	Token.BREAK isJSIdentifier = this . toStringTree ;
Code	Token.BREAK isJSIdentifier = this . toStringTree ;
Distance : 6

23
Tree	Token.NULL Token.LABEL_NAME = this . toStringTree ;
Code	Token.NULL Token.LABEL_NAME = this . toStringTree ;
Distance : 6

24
Tree	Token.LABEL_NAME Token.LABEL_NAME = this . toStringTree ;
Code	Token.LABEL_NAME Token.LABEL_NAME = this . toStringTree ;
Distance : 6

25
Tree	Token.NULL [] TokenStream = Token.NEW ;
Code	Token.NULL [] TokenStream = Token.NEW ;
Distance : 7

26
Tree	Token.NULL isNumber = this . toStringTree ;
Code	Token.NULL isNumber = this . toStringTree ;
Distance : 6

27
Tree	Token.BREAK Token.LABEL_NAME = this . toStringTree ;
Code	Token.BREAK Token.LABEL_NAME = this . toStringTree ;
Distance : 6

28
Tree	Token.LABEL_NAME isNumber = this . toStringTree ;
Code	Token.LABEL_NAME isNumber = this . toStringTree ;
Distance : 6

29
Tree	Token.LABEL_NAME [] TokenStream = Token.NEW ;
Code	Token.LABEL_NAME [] TokenStream = Token.NEW ;
Distance : 7

30
Tree	Token.LABEL_NAME isNumber = new Token.NEW () ;
Code	Token.LABEL_NAME isNumber = new Token.NEW () ;
Distance : 6

31
Tree	Token.BREAK Token.LABEL_NAME = new Token.NEW () ;
Code	Token.BREAK Token.LABEL_NAME = new Token.NEW () ;
Distance : 6

32
Tree	Token.BREAK isJSIdentifier = toStringTree . toStringTree () ;
Code	Token.BREAK isJSIdentifier = toStringTree . toStringTree () ;
Distance : 6

33
Tree	Token.NULL Token.LABEL_NAME = toStringTree . toStringTree () ;
Code	Token.NULL Token.LABEL_NAME = toStringTree . toStringTree () ;
Distance : 6

34
Tree	Token.NULL isJSIdentifier = toStringTree . getChildAtIndex () ;
Code	Token.NULL isJSIdentifier = toStringTree . getChildAtIndex () ;
Distance : 6

35
Tree	Token.LABEL_NAME Token.LABEL_NAME = toStringTree . toStringTree () ;
Code	Token.LABEL_NAME Token.LABEL_NAME = toStringTree . toStringTree () ;
Distance : 6

36
Tree	Token.LABEL_NAME isJSIdentifier = toStringTree . getChildAtIndex () ;
Code	Token.LABEL_NAME isJSIdentifier = toStringTree . getChildAtIndex () ;
Distance : 6

37
Tree	Token.NULL isNumber = toStringTree . toStringTree () ;
Code	Token.NULL isNumber = toStringTree . toStringTree () ;
Distance : 6

38
Tree	Token.LABEL_NAME isNumber = toStringTree . toStringTree () ;
Code	Token.LABEL_NAME isNumber = toStringTree . toStringTree () ;
Distance : 6

39
Tree	Token.BREAK Token.LABEL_NAME = toStringTree . toStringTree () ;
Code	Token.BREAK Token.LABEL_NAME = toStringTree . toStringTree () ;
Distance : 6

40
Tree	final Token.BREAK isJSIdentifier = Token.NEW ;
Code	final Token.BREAK isJSIdentifier = Token.NEW ;
Distance : 7

41
Tree	Token.NULL isJSIdentifier = new Token.NEW () ;
Code	Token.NULL isJSIdentifier = new Token.NEW () ;
Distance : 6

42
Tree	final Token.BREAK TokenStream = Token.NEW ;
Code	final Token.BREAK TokenStream = Token.NEW ;
Distance : 7

43
Tree	final Token.BREAK Token.LABEL_NAME = Token.NEW ;
Code	final Token.BREAK Token.LABEL_NAME = Token.NEW ;
Distance : 7

44
Tree	final Token.BREAK isNumber = Token.NEW ;
Code	final Token.BREAK isNumber = Token.NEW ;
Distance : 7

45
Tree	final Token.NULL isJSIdentifier = Token.NEW ;
Code	final Token.NULL isJSIdentifier = Token.NEW ;
Distance : 7

46
Tree	Token.LABEL_NAME isJSIdentifier = new Token.NEW () ;
Code	Token.LABEL_NAME isJSIdentifier = new Token.NEW () ;
Distance : 6

47
Tree	final TokenStream isJSIdentifier = Token.NEW ;
Code	final TokenStream isJSIdentifier = Token.NEW ;
Distance : 7

48
Tree	final Token.BREAK isGet = Token.NEW ;
Code	final Token.BREAK isGet = Token.NEW ;
Distance : 7

49
Tree	Token.BREAK isJSIdentifier = new Token.NEW () ;
Code	Token.BREAK isJSIdentifier = new Token.NEW () ;
Distance : 6

50
Tree	Token.NULL isGet [] = toStringTree ;
Code	Token.NULL isGet [] = toStringTree ;
Distance : 7

51
Tree	Token.NULL Token.LABEL_NAME [] = toStringTree ;
Code	Token.NULL Token.LABEL_NAME [] = toStringTree ;
Distance : 7

52
Tree	Token.NULL Token.BREAK [] = toStringTree ;
Code	Token.NULL Token.BREAK [] = toStringTree ;
Distance : 7

53
Tree	Token.NULL isNumber [] = toStringTree ;
Code	Token.NULL isNumber [] = toStringTree ;
Distance : 7

54
Tree	Token.NULL TokenStream [] = toStringTree ;
Code	Token.NULL TokenStream [] = toStringTree ;
Distance : 7

55
Tree	Token.LABEL_NAME isGet [] = toStringTree ;
Code	Token.LABEL_NAME isGet [] = toStringTree ;
Distance : 7

56
Tree	Token.LABEL_NAME Token.LABEL_NAME [] = toStringTree ;
Code	Token.LABEL_NAME Token.LABEL_NAME [] = toStringTree ;
Distance : 7

57
Tree	Token.LABEL_NAME isNumber [] = toStringTree ;
Code	Token.LABEL_NAME isNumber [] = toStringTree ;
Distance : 7

58
Tree	Token.LABEL_NAME Token.BREAK [] = toStringTree ;
Code	Token.LABEL_NAME Token.BREAK [] = toStringTree ;
Distance : 7

59
Tree	Token.BREAK isGet [] = toStringTree ;
Code	Token.BREAK isGet [] = toStringTree ;
Distance : 7

60
Tree	Token.NULL isJSIdentifier = toStringTree ;
Code	Token.NULL isJSIdentifier = toStringTree ;
Distance : 6

61
Tree	Token.LABEL_NAME isJSIdentifier = toStringTree ;
Code	Token.LABEL_NAME isJSIdentifier = toStringTree ;
Distance : 6

62
Tree	Token.BREAK isJSIdentifier = toStringTree ;
Code	Token.BREAK isJSIdentifier = toStringTree ;
Distance : 6

63
Tree	Token.NULL Token.LABEL_NAME = toStringTree ;
Code	Token.NULL Token.LABEL_NAME = toStringTree ;
Distance : 6

64
Tree	Token.LABEL_NAME Token.LABEL_NAME = toStringTree ;
Code	Token.LABEL_NAME Token.LABEL_NAME = toStringTree ;
Distance : 6

65
Tree	Token.NULL isNumber = toStringTree ;
Code	Token.NULL isNumber = toStringTree ;
Distance : 6

66
Tree	Token.NULL isJSIdentifier = this . toStringTree ;
Code	Token.NULL isJSIdentifier = this . toStringTree ;
Distance : 6

67
Tree	Token.LABEL_NAME isNumber = toStringTree ;
Code	Token.LABEL_NAME isNumber = toStringTree ;
Distance : 6

68
Tree	Token.BREAK Token.LABEL_NAME = toStringTree ;
Code	Token.BREAK Token.LABEL_NAME = toStringTree ;
Distance : 6

69
Tree	Token.NULL isGet = toStringTree ;
Code	Token.NULL isGet = toStringTree ;
Distance : 6

70
Tree	Token.NULL isJSIdentifier = true ;
Code	Token.NULL isJSIdentifier = true ;
Distance : 6

71
Tree	Token.LABEL_NAME isJSIdentifier = true ;
Code	Token.LABEL_NAME isJSIdentifier = true ;
Distance : 6

72
Tree	Token.NULL Token.LABEL_NAME = true ;
Code	Token.NULL Token.LABEL_NAME = true ;
Distance : 6

73
Tree	Token.BREAK isJSIdentifier = true ;
Code	Token.BREAK isJSIdentifier = true ;
Distance : 6

74
Tree	Token.LABEL_NAME Token.LABEL_NAME = true ;
Code	Token.LABEL_NAME Token.LABEL_NAME = true ;
Distance : 6

75
Tree	Token.NULL isNumber = true ;
Code	Token.NULL isNumber = true ;
Distance : 6

76
Tree	Token.LABEL_NAME isNumber = true ;
Code	Token.LABEL_NAME isNumber = true ;
Distance : 6

77
Tree	Token.BREAK Token.LABEL_NAME = true ;
Code	Token.BREAK Token.LABEL_NAME = true ;
Distance : 6

78
Tree	Token.NULL isJSIdentifier = false ;
Code	Token.NULL isJSIdentifier = false ;
Distance : 6

79
Tree	Token.LABEL_NAME isJSIdentifier = false ;
Code	Token.LABEL_NAME isJSIdentifier = false ;
Distance : 6

80
Tree	Token.NULL isJSIdentifier = toStringTree . toStringTree ( preserveBlock ) ;
Code	Token.NULL isJSIdentifier = toStringTree . toStringTree ( preserveBlock ) ;
Distance : 6

81
Tree	Token.LABEL_NAME isJSIdentifier = toStringTree . toStringTree ( preserveBlock ) ;
Code	Token.LABEL_NAME isJSIdentifier = toStringTree . toStringTree ( preserveBlock ) ;
Distance : 6

82
Tree	Token.BREAK isJSIdentifier = toStringTree . toStringTree ( preserveBlock ) ;
Code	Token.BREAK isJSIdentifier = toStringTree . toStringTree ( preserveBlock ) ;
Distance : 6

83
Tree	Token.NULL Token.LABEL_NAME = toStringTree . toStringTree ( preserveBlock ) ;
Code	Token.NULL Token.LABEL_NAME = toStringTree . toStringTree ( preserveBlock ) ;
Distance : 6

84
Tree	Token.NULL isJSIdentifier = toStringTree . getChildAtIndex ( preserveBlock ) ;
Code	Token.NULL isJSIdentifier = toStringTree . getChildAtIndex ( preserveBlock ) ;
Distance : 6

85
Tree	Token.LABEL_NAME Token.LABEL_NAME = toStringTree . toStringTree ( preserveBlock ) ;
Code	Token.LABEL_NAME Token.LABEL_NAME = toStringTree . toStringTree ( preserveBlock ) ;
Distance : 6

86
Tree	Token.NULL isJSIdentifier = toStringTree . toStringTree ( toStringTree ) ;
Code	Token.NULL isJSIdentifier = toStringTree . toStringTree ( toStringTree ) ;
Distance : 6

87
Tree	Token.LABEL_NAME isJSIdentifier = toStringTree . getChildAtIndex ( preserveBlock ) ;
Code	Token.LABEL_NAME isJSIdentifier = toStringTree . getChildAtIndex ( preserveBlock ) ;
Distance : 6

88
Tree	Token.NULL isJSIdentifier = STRING_CONSTANT ;
Code	Token.NULL isJSIdentifier = STRING_CONSTANT ;
Distance : 6

89
Tree	Token.NULL isJSIdentifier = source.contractionCriterion ;
Code	Token.NULL isJSIdentifier = source.contractionCriterion ;
Distance : 6

90
Tree	Token.NULL isNumber = toStringTree . toStringTree ( preserveBlock ) ;
Code	Token.NULL isNumber = toStringTree . toStringTree ( preserveBlock ) ;
Distance : 6

91
Tree	Token.LABEL_NAME isJSIdentifier = STRING_CONSTANT ;
Code	Token.LABEL_NAME isJSIdentifier = STRING_CONSTANT ;
Distance : 6

92
Tree	Token.LABEL_NAME isJSIdentifier = source.contractionCriterion ;
Code	Token.LABEL_NAME isJSIdentifier = source.contractionCriterion ;
Distance : 6

93
Tree	Token.BREAK isJSIdentifier = STRING_CONSTANT ;
Code	Token.BREAK isJSIdentifier = STRING_CONSTANT ;
Distance : 6

94
Tree	Token.LABEL_NAME isJSIdentifier = toStringTree . toStringTree ( toStringTree ) ;
Code	Token.LABEL_NAME isJSIdentifier = toStringTree . toStringTree ( toStringTree ) ;
Distance : 6

95
Tree	Token.BREAK isJSIdentifier = source.contractionCriterion ;
Code	Token.BREAK isJSIdentifier = source.contractionCriterion ;
Distance : 6

96
Tree	Token.NULL Token.LABEL_NAME = STRING_CONSTANT ;
Code	Token.NULL Token.LABEL_NAME = STRING_CONSTANT ;
Distance : 6

97
Tree	Token.NULL isJSIdentifier = toStringTree ? Token.NEW : Token.NEW ;
Code	Token.NULL isJSIdentifier = toStringTree ? Token.NEW : Token.NEW ;
Distance : 7

98
Tree	Token.LABEL_NAME isJSIdentifier = toStringTree ? Token.NEW : Token.NEW ;
Code	Token.LABEL_NAME isJSIdentifier = toStringTree ? Token.NEW : Token.NEW ;
Distance : 7

99
Tree	Token.BREAK isJSIdentifier = toStringTree ? Token.NEW : Token.NEW ;
Code	Token.BREAK isJSIdentifier = toStringTree ? Token.NEW : Token.NEW ;
Distance : 7

100
Tree	Token.NULL Token.LABEL_NAME = source.contractionCriterion ;
Code	Token.NULL Token.LABEL_NAME = source.contractionCriterion ;
Distance : 6

101
Tree	Token.NULL Token.LABEL_NAME = toStringTree ? Token.NEW : Token.NEW ;
Code	Token.NULL Token.LABEL_NAME = toStringTree ? Token.NEW : Token.NEW ;
Distance : 7

102
Tree	Token.LABEL_NAME Token.LABEL_NAME = toStringTree ? Token.NEW : Token.NEW ;
Code	Token.LABEL_NAME Token.LABEL_NAME = toStringTree ? Token.NEW : Token.NEW ;
Distance : 7

103
Tree	Token.LABEL_NAME Token.LABEL_NAME = STRING_CONSTANT ;
Code	Token.LABEL_NAME Token.LABEL_NAME = STRING_CONSTANT ;
Distance : 6

104
Tree	Token.NULL isNumber = toStringTree ? Token.NEW : Token.NEW ;
Code	Token.NULL isNumber = toStringTree ? Token.NEW : Token.NEW ;
Distance : 7

105
Tree	Token.LABEL_NAME isNumber = toStringTree ? Token.NEW : Token.NEW ;
Code	Token.LABEL_NAME isNumber = toStringTree ? Token.NEW : Token.NEW ;
Distance : 7

106
Tree	Token.BREAK Token.LABEL_NAME = toStringTree ? Token.NEW : Token.NEW ;
Code	Token.BREAK Token.LABEL_NAME = toStringTree ? Token.NEW : Token.NEW ;
Distance : 7

107
Tree	Token.NULL isGet = toStringTree ? Token.NEW : Token.NEW ;
Code	Token.NULL isGet = toStringTree ? Token.NEW : Token.NEW ;
Distance : 7

108
Tree	Token.LABEL_NAME Token.LABEL_NAME = source.contractionCriterion ;
Code	Token.LABEL_NAME Token.LABEL_NAME = source.contractionCriterion ;
Distance : 6

109
Tree	Token.BREAK isNumber = toStringTree ? Token.NEW : Token.NEW ;
Code	Token.BREAK isNumber = toStringTree ? Token.NEW : Token.NEW ;
Distance : 7

110
Tree	Token.NULL isJSIdentifier = NUMBER_CONSTANT ;
Code	Token.NULL isJSIdentifier = NUMBER_CONSTANT ;
Distance : 6

111
Tree	Token.LABEL_NAME isJSIdentifier = NUMBER_CONSTANT ;
Code	Token.LABEL_NAME isJSIdentifier = NUMBER_CONSTANT ;
Distance : 6

112
Tree	Token.BREAK isJSIdentifier = NUMBER_CONSTANT ;
Code	Token.BREAK isJSIdentifier = NUMBER_CONSTANT ;
Distance : 6

113
Tree	Token.NULL Token.LABEL_NAME = NUMBER_CONSTANT ;
Code	Token.NULL Token.LABEL_NAME = NUMBER_CONSTANT ;
Distance : 6

114
Tree	Token.NULL isJSIdentifier = Token.NEW ;
Code	Token.NULL isJSIdentifier = Token.NEW ;
Distance : 6

115
Tree	Token.LABEL_NAME Token.LABEL_NAME = NUMBER_CONSTANT ;
Code	Token.LABEL_NAME Token.LABEL_NAME = NUMBER_CONSTANT ;
Distance : 6

116
Tree	Token.NULL isNumber = NUMBER_CONSTANT ;
Code	Token.NULL isNumber = NUMBER_CONSTANT ;
Distance : 6

117
Tree	final Token.LABEL_NAME isJSIdentifier = Token.NEW ;
Code	final Token.LABEL_NAME isJSIdentifier = Token.NEW ;
Distance : 7

118
Tree	Token.LABEL_NAME isJSIdentifier = Token.NEW ;
Code	Token.LABEL_NAME isJSIdentifier = Token.NEW ;
Distance : 6

119
Tree	final Token.NULL TokenStream = Token.NEW ;
Code	final Token.NULL TokenStream = Token.NEW ;
Distance : 7

120
Tree	Token.LABEL_NAME isNumber = NUMBER_CONSTANT ;
Code	Token.LABEL_NAME isNumber = NUMBER_CONSTANT ;
Distance : 6

121
Tree	final Token.NULL isNumber = Token.NEW ;
Code	final Token.NULL isNumber = Token.NEW ;
Distance : 7

122
Tree	Token.NULL isJSIdentifier = new addNumber () ;
Code	Token.NULL isJSIdentifier = new addNumber () ;
Distance : 6

123
Tree	Token.NULL Token.LABEL_NAME = new Token.NEW () ;
Code	Token.NULL Token.LABEL_NAME = new Token.NEW () ;
Distance : 6

124
Tree	Token.BREAK Token.LABEL_NAME = NUMBER_CONSTANT ;
Code	Token.BREAK Token.LABEL_NAME = NUMBER_CONSTANT ;
Distance : 6

125
Tree	Token.NULL isJSIdentifier = toStringTree . toStringTree () ;
Code	Token.NULL isJSIdentifier = toStringTree . toStringTree () ;
Distance : 6

126
Tree	Token.LABEL_NAME isJSIdentifier = new addNumber () ;
Code	Token.LABEL_NAME isJSIdentifier = new addNumber () ;
Distance : 6

127
Tree	Token.LABEL_NAME Token.LABEL_NAME = new Token.NEW () ;
Code	Token.LABEL_NAME Token.LABEL_NAME = new Token.NEW () ;
Distance : 6

128
Tree	Token.NULL isGet [] = toStringTree . toStringTree () ;
Code	Token.NULL isGet [] = toStringTree . toStringTree () ;
Distance : 7

129
Tree	Token.NULL isNumber = new Token.NEW () ;
Code	Token.NULL isNumber = new Token.NEW () ;
Distance : 6

130
Tree	Token.NULL Token.BREAK [] = toStringTree . toStringTree () ;
Code	Token.NULL Token.BREAK [] = toStringTree . toStringTree () ;
Distance : 7

131
Tree	Token.NULL Token.LABEL_NAME [] = toStringTree . toStringTree () ;
Code	Token.NULL Token.LABEL_NAME [] = toStringTree . toStringTree () ;
Distance : 7

132
Tree	Token.NULL isGet [] = toStringTree . getChildAtIndex () ;
Code	Token.NULL isGet [] = toStringTree . getChildAtIndex () ;
Distance : 7

133
Tree	Token.LABEL_NAME isJSIdentifier = toStringTree . toStringTree () ;
Code	Token.LABEL_NAME isJSIdentifier = toStringTree . toStringTree () ;
Distance : 6

134
Tree	Token.NULL isNumber [] = toStringTree . toStringTree () ;
Code	Token.NULL isNumber [] = toStringTree . toStringTree () ;
Distance : 7

135
Tree	Token.NULL TokenStream [] = toStringTree . toStringTree () ;
Code	Token.NULL TokenStream [] = toStringTree . toStringTree () ;
Distance : 7

136
Tree	Token.LABEL_NAME isGet [] = toStringTree . toStringTree () ;
Code	Token.LABEL_NAME isGet [] = toStringTree . toStringTree () ;
Distance : 7

137
Tree	Token.NULL Token.LABEL_NAME [] = toStringTree . getChildAtIndex () ;
Code	Token.NULL Token.LABEL_NAME [] = toStringTree . getChildAtIndex () ;
Distance : 7

138
Tree	Token.NULL Token.BREAK [] = toStringTree . getChildAtIndex () ;
Code	Token.NULL Token.BREAK [] = toStringTree . getChildAtIndex () ;
Distance : 7

139
Tree	Token.NULL isNumber [] = toStringTree . getChildAtIndex () ;
Code	Token.NULL isNumber [] = toStringTree . getChildAtIndex () ;
Distance : 7

140
Tree	Token.NULL isGet = NUMBER_CONSTANT ;
Code	Token.NULL isGet = NUMBER_CONSTANT ;
Distance : 6

141
Tree	Token.BREAK isJSIdentifier = Token.NEW ;
Code	Token.BREAK isJSIdentifier = Token.NEW ;
Distance : 6

142
Tree	Token.LABEL_NAME isGet = NUMBER_CONSTANT ;
Code	Token.LABEL_NAME isGet = NUMBER_CONSTANT ;
Distance : 6

143
Tree	Token.NULL Token.LABEL_NAME = Token.NEW ;
Code	Token.NULL Token.LABEL_NAME = Token.NEW ;
Distance : 6

144
Tree	Token.LABEL_NAME Token.LABEL_NAME = Token.NEW ;
Code	Token.LABEL_NAME Token.LABEL_NAME = Token.NEW ;
Distance : 6

145
Tree	Token.NULL isNumber = Token.NEW ;
Code	Token.NULL isNumber = Token.NEW ;
Distance : 6

146
Tree	Token.NULL isJSIdentifier = Context.OTHER ;
Code	Token.NULL isJSIdentifier = Context.OTHER ;
Distance : 6

147
Tree	Token.LABEL_NAME isNumber = Token.NEW ;
Code	Token.LABEL_NAME isNumber = Token.NEW ;
Distance : 6

148
Tree	Token.BREAK Token.LABEL_NAME = Token.NEW ;
Code	Token.BREAK Token.LABEL_NAME = Token.NEW ;
Distance : 6

149
Tree	Token.NULL isGet = Token.NEW ;
Code	Token.NULL isGet = Token.NEW ;
Distance : 6

150
Tree	Token.NULL isJSIdentifier = getIntProp ( preserveBlock ) ;
Code	Token.NULL isJSIdentifier = getIntProp ( preserveBlock ) ;
Distance : 4

151
Tree	Token.NULL isGet = this . toStringTree ;
Code	Token.NULL isGet = this . toStringTree ;
Distance : 6

152
Tree	Token.BREAK [] TokenStream = Token.NEW ;
Code	Token.BREAK [] TokenStream = Token.NEW ;
Distance : 7

153
Tree	Token.LABEL_NAME isJSIdentifier = getIntProp ( preserveBlock ) ;
Code	Token.LABEL_NAME isJSIdentifier = getIntProp ( preserveBlock ) ;
Distance : 4

154
Tree	Token.BREAK isNumber = this . toStringTree ;
Code	Token.BREAK isNumber = this . toStringTree ;
Distance : 6

155
Tree	Token.NULL [] Token.NEW = Token.NEW ;
Code	Token.NULL [] Token.NEW = Token.NEW ;
Distance : 7

156
Tree	Token.BREAK isJSIdentifier = getIntProp ( preserveBlock ) ;
Code	Token.BREAK isJSIdentifier = getIntProp ( preserveBlock ) ;
Distance : 4

157
Tree	Token.NULL Token.LABEL_NAME = getIntProp ( preserveBlock ) ;
Code	Token.NULL Token.LABEL_NAME = getIntProp ( preserveBlock ) ;
Distance : 4

158
Tree	Token.LABEL_NAME Token.LABEL_NAME = getIntProp ( preserveBlock ) ;
Code	Token.LABEL_NAME Token.LABEL_NAME = getIntProp ( preserveBlock ) ;
Distance : 4

159
Tree	addNumber [] TokenStream = Token.NEW ;
Code	addNumber [] TokenStream = Token.NEW ;
Distance : 7

160
Tree	Token.LABEL_NAME [] Token.NEW = Token.NEW ;
Code	Token.LABEL_NAME [] Token.NEW = Token.NEW ;
Distance : 7

161
Tree	Token.NULL isNumber = getIntProp ( preserveBlock ) ;
Code	Token.NULL isNumber = getIntProp ( preserveBlock ) ;
Distance : 4

162
Tree	TokenStream [] TokenStream = Token.NEW ;
Code	TokenStream [] TokenStream = Token.NEW ;
Distance : 7

163
Tree	Token.BREAK Token.LABEL_NAME = getIntProp ( preserveBlock ) ;
Code	Token.BREAK Token.LABEL_NAME = getIntProp ( preserveBlock ) ;
Distance : 4

164
Tree	isGet [] TokenStream = Token.NEW ;
Code	isGet [] TokenStream = Token.NEW ;
Distance : 7

165
Tree	Token.LABEL_NAME isNumber = getIntProp ( preserveBlock ) ;
Code	Token.LABEL_NAME isNumber = getIntProp ( preserveBlock ) ;
Distance : 4

166
Tree	Token.NULL [] TokenStream = Context.OTHER ;
Code	Token.NULL [] TokenStream = Context.OTHER ;
Distance : 7

167
Tree	Token.NULL isGet = getIntProp ( preserveBlock ) ;
Code	Token.NULL isGet = getIntProp ( preserveBlock ) ;
Distance : 4

168
Tree	Token.BREAK [] Token.NEW = Token.NEW ;
Code	Token.BREAK [] Token.NEW = Token.NEW ;
Distance : 7

169
Tree	Token.NULL isJSIdentifier = getIntProp ( addNumber ) ;
Code	Token.NULL isJSIdentifier = getIntProp ( addNumber ) ;
Distance : 4

170
Tree	Token.NULL isJSIdentifier = toStringTree . toStringTree ( preserveBlock , NodeUtil.MATCH_NOT_FUNCTION ) ;
Code	Token.NULL isJSIdentifier = toStringTree . toStringTree ( preserveBlock , NodeUtil.MATCH_NOT_FUNCTION ) ;
Distance : 8

171
Tree	Token.LABEL_NAME isJSIdentifier = toStringTree . toStringTree ( preserveBlock , NodeUtil.MATCH_NOT_FUNCTION ) ;
Code	Token.LABEL_NAME isJSIdentifier = toStringTree . toStringTree ( preserveBlock , NodeUtil.MATCH_NOT_FUNCTION ) ;
Distance : 8

172
Tree	Token.BREAK isJSIdentifier = toStringTree . toStringTree ( preserveBlock , NodeUtil.MATCH_NOT_FUNCTION ) ;
Code	Token.BREAK isJSIdentifier = toStringTree . toStringTree ( preserveBlock , NodeUtil.MATCH_NOT_FUNCTION ) ;
Distance : 8

173
Tree	Token.NULL Token.LABEL_NAME = toStringTree . toStringTree ( preserveBlock , NodeUtil.MATCH_NOT_FUNCTION ) ;
Code	Token.NULL Token.LABEL_NAME = toStringTree . toStringTree ( preserveBlock , NodeUtil.MATCH_NOT_FUNCTION ) ;
Distance : 8

174
Tree	Token.NULL isJSIdentifier = toStringTree . getChildAtIndex ( preserveBlock , NodeUtil.MATCH_NOT_FUNCTION ) ;
Code	Token.NULL isJSIdentifier = toStringTree . getChildAtIndex ( preserveBlock , NodeUtil.MATCH_NOT_FUNCTION ) ;
Distance : 8

175
Tree	Token.LABEL_NAME Token.LABEL_NAME = toStringTree . toStringTree ( preserveBlock , NodeUtil.MATCH_NOT_FUNCTION ) ;
Code	Token.LABEL_NAME Token.LABEL_NAME = toStringTree . toStringTree ( preserveBlock , NodeUtil.MATCH_NOT_FUNCTION ) ;
Distance : 8

176
Tree	Token.NULL isJSIdentifier = toStringTree . toStringTree ( toStringTree , NodeUtil.MATCH_NOT_FUNCTION ) ;
Code	Token.NULL isJSIdentifier = toStringTree . toStringTree ( toStringTree , NodeUtil.MATCH_NOT_FUNCTION ) ;
Distance : 8

177
Tree	Token.NULL isJSIdentifier = super . toStringTree () ;
Code	Token.NULL isJSIdentifier = super . toStringTree () ;
Distance : 6

178
Tree	Token.LABEL_NAME isJSIdentifier = toStringTree . getChildAtIndex ( preserveBlock , NodeUtil.MATCH_NOT_FUNCTION ) ;
Code	Token.LABEL_NAME isJSIdentifier = toStringTree . getChildAtIndex ( preserveBlock , NodeUtil.MATCH_NOT_FUNCTION ) ;
Distance : 8

179
Tree	Token.LABEL_NAME isJSIdentifier = super . toStringTree () ;
Code	Token.LABEL_NAME isJSIdentifier = super . toStringTree () ;
Distance : 6

180
Tree	Token.NULL Token.LABEL_NAME = super . toStringTree () ;
Code	Token.NULL Token.LABEL_NAME = super . toStringTree () ;
Distance : 6

181
Tree	Token.BREAK isJSIdentifier = super . toStringTree () ;
Code	Token.BREAK isJSIdentifier = super . toStringTree () ;
Distance : 6

182
Tree	Token.NULL isNumber = toStringTree . toStringTree ( preserveBlock , NodeUtil.MATCH_NOT_FUNCTION ) ;
Code	Token.NULL isNumber = toStringTree . toStringTree ( preserveBlock , NodeUtil.MATCH_NOT_FUNCTION ) ;
Distance : 8

183
Tree	Token.LABEL_NAME Token.LABEL_NAME = super . toStringTree () ;
Code	Token.LABEL_NAME Token.LABEL_NAME = super . toStringTree () ;
Distance : 6

184
Tree	Token.NULL isNumber = super . toStringTree () ;
Code	Token.NULL isNumber = super . toStringTree () ;
Distance : 6

185
Tree	Token.LABEL_NAME isJSIdentifier = toStringTree . toStringTree ( toStringTree , NodeUtil.MATCH_NOT_FUNCTION ) ;
Code	Token.LABEL_NAME isJSIdentifier = toStringTree . toStringTree ( toStringTree , NodeUtil.MATCH_NOT_FUNCTION ) ;
Distance : 8

186
Tree	Token.LABEL_NAME isNumber = super . toStringTree () ;
Code	Token.LABEL_NAME isNumber = super . toStringTree () ;
Distance : 6

187
Tree	Token.BREAK Token.LABEL_NAME = super . toStringTree () ;
Code	Token.BREAK Token.LABEL_NAME = super . toStringTree () ;
Distance : 6

188
Tree	Token.NULL isJSIdentifier = super . getChildAtIndex () ;
Code	Token.NULL isJSIdentifier = super . getChildAtIndex () ;
Distance : 6

189
Tree	Token.NULL isGet = super . toStringTree () ;
Code	Token.NULL isGet = super . toStringTree () ;
Distance : 6

190
Tree	Token.NULL isJSIdentifier = new Token.NEW ( Token.NULL , isGet ) ;
Code	Token.NULL isJSIdentifier = new Token.NEW ( Token.NULL , isGet ) ;
Distance : 7

191
Tree	Token.LABEL_NAME isJSIdentifier = new Token.NEW ( Token.NULL , isGet ) ;
Code	Token.LABEL_NAME isJSIdentifier = new Token.NEW ( Token.NULL , isGet ) ;
Distance : 7

192
Tree	Token.NULL isJSIdentifier = new Token.NEW ( Token.NULL , TokenStream ) ;
Code	Token.NULL isJSIdentifier = new Token.NEW ( Token.NULL , TokenStream ) ;
Distance : 7

193
Tree	Token.NULL isJSIdentifier = new Token.NEW ( Token.NULL , toStringTree ) ;
Code	Token.NULL isJSIdentifier = new Token.NEW ( Token.NULL , toStringTree ) ;
Distance : 7

194
Tree	Token.BREAK isJSIdentifier = new Token.NEW ( Token.NULL , isGet ) ;
Code	Token.BREAK isJSIdentifier = new Token.NEW ( Token.NULL , isGet ) ;
Distance : 7

195
Tree	Token.LABEL_NAME isJSIdentifier = new Token.NEW ( Token.NULL , TokenStream ) ;
Code	Token.LABEL_NAME isJSIdentifier = new Token.NEW ( Token.NULL , TokenStream ) ;
Distance : 7

196
Tree	Token.LABEL_NAME isJSIdentifier = new Token.NEW ( Token.NULL , toStringTree ) ;
Code	Token.LABEL_NAME isJSIdentifier = new Token.NEW ( Token.NULL , toStringTree ) ;
Distance : 7

197
Tree	Token.NULL isJSIdentifier = new Token.NEW ( Token.NULL , preserveBlock ) ;
Code	Token.NULL isJSIdentifier = new Token.NEW ( Token.NULL , preserveBlock ) ;
Distance : 7

198
Tree	Token.NULL isJSIdentifier = new Token.NEW ( Token.NULL , isAssociative ) ;
Code	Token.NULL isJSIdentifier = new Token.NEW ( Token.NULL , isAssociative ) ;
Distance : 7

199
Tree	Token.LABEL_NAME isJSIdentifier = new Token.NEW ( Token.NULL , preserveBlock ) ;
Code	Token.LABEL_NAME isJSIdentifier = new Token.NEW ( Token.NULL , preserveBlock ) ;
Distance : 7

========================================================================


========================================================================
Example Number: 12
Parent Code is: 
{ return topType ; }
-------------------------------------------------------------------------------
Child code is: 
{ return topType . isAllType () ? getNativeType ( ARRAY_TYPE ) : topType ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (800{val=topType}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (32 (800{val=topType}) (235{val=.}) (802{val=isAllType}) (216{val=()})) (233{val=?}) (32 (802{val=getNativeType}) (214{val=(}) (800{val=ARRAY_TYPE}) (215{val=)})) (226{val=:}) (800{val=topType})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/111/parent/src_com_google_javascript_jscomp_type_ClosureReverseAbstractInterpreter.java
-------------------------------------------------------------------------------
Edit Distance : 10
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return false ; }
Code	{ return false ; }
Distance : 11

1
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 12

2
Tree	{ return new topType ( ARRAY_TYPE ) ; }
Code	{ return new topType ( ARRAY_TYPE ) ; }
Distance : 8

3
Tree	{ return topType () ? null : ARRAY_TYPE ; }
Code	{ return topType () ? null : ARRAY_TYPE ; }
Distance : 7

4
Tree	{ return new ARRAY_TYPE ( ARRAY_TYPE ) ; }
Code	{ return new ARRAY_TYPE ( ARRAY_TYPE ) ; }
Distance : 8

5
Tree	{ return this . topType . isAllType () ; }
Code	{ return this . topType . isAllType () ; }
Distance : 9

6
Tree	{ return new ARRAY_TYPE ( topType ) ; }
Code	{ return new ARRAY_TYPE ( topType ) ; }
Distance : 9

7
Tree	{ return JSType ; }
Code	{ return JSType ; }
Distance : 11

8
Tree	{ return this . ARRAY_TYPE . } () ; }
Code	{ return this . ARRAY_TYPE . } () ; }
Distance : 9

9
Tree	{ return JSType () ; }
Code	{ return JSType () ; }
Distance : 10

10
Tree	{ return ! JSType () ; }
Code	{ return ! JSType () ; }
Distance : 10

11
Tree	{ return topType () ? null : isAllType ; }
Code	{ return topType () ? null : isAllType ; }
Distance : 7

12
Tree	{ return new Override ( topType ) ; }
Code	{ return new Override ( topType ) ; }
Distance : 9

13
Tree	private boolean topType () { return topType ; }
Code	private boolean topType () { return topType ; }
Distance : 10

14
Tree	private int topType () { return topType ; }
Code	private int topType () { return topType ; }
Distance : 10

15
Tree	{ return isAllType () ? null : ARRAY_TYPE ; }
Code	{ return isAllType () ? null : ARRAY_TYPE ; }
Distance : 7

16
Tree	{ return getNativeType () ? null : ARRAY_TYPE ; }
Code	{ return getNativeType () ? null : ARRAY_TYPE ; }
Distance : 8

17
Tree	private boolean topType () { return ARRAY_TYPE ; }
Code	private boolean topType () { return ARRAY_TYPE ; }
Distance : 10

18
Tree	private int topType () { return ARRAY_TYPE ; }
Code	private int topType () { return ARRAY_TYPE ; }
Distance : 10

19
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 11

20
Tree	{ return ARRAY_TYPE . getNativeType ( topType ) ; }
Code	{ return ARRAY_TYPE . getNativeType ( topType ) ; }
Distance : 7

21
Tree	{ return topType . getNativeType ( topType ) ; }
Code	{ return topType . getNativeType ( topType ) ; }
Distance : 6

22
Tree	{ return ( topType . isAllType () ? null : ARRAY_TYPE ) ; }
Code	{ return ( topType . isAllType () ? null : ARRAY_TYPE ) ; }
Distance : 5

23
Tree	{ return ( topType ) getNativeType ( JSType ) ; }
Code	{ return ( topType ) getNativeType ( JSType ) ; }
Distance : 8

24
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 12

25
Tree	{ return topType () ; } i
Code	{ return topType () ; } i
Distance : 10

26
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 12

27
Tree	{ return topType () ? null : topType ; }
Code	{ return topType () ? null : topType ; }
Distance : 6

28
Tree	{ return null ; }
Code	{ return null ; }
Distance : 11

29
Tree	{ return ARRAY_TYPE ; }
Code	{ return ARRAY_TYPE ; }
Distance : 10

30
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 11

31
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 11

32
Tree	{ return topType ; }
Code	{ return topType ; }
Distance : 10

33
Tree	{ return ! topType () ; } p
Code	{ return ! topType () ; } p
Distance : 11

34
Tree	{ return new topType ( this ) ; } i
Code	{ return new topType ( this ) ; } i
Distance : 10

35
Tree	{ return new topType ( this ) ; } value
Code	{ return new topType ( this ) ; } value
Distance : 10

36
Tree	{ return new topType ( this ) ; } options
Code	{ return new topType ( this ) ; } options
Distance : 10

37
Tree	{ return this . JSType ; }
Code	{ return this . JSType ; }
Distance : 10

38
Tree	{ return ! topType () ; }
Code	{ return ! topType () ; }
Distance : 10

39
Tree	{ return getNativeType ; }
Code	{ return getNativeType ; }
Distance : 10

40
Tree	{ return false ; } MathRuntimeException
Code	{ return false ; } MathRuntimeException
Distance : 12

41
Tree	{ return false ; } Class
Code	{ return false ; } Class
Distance : 12

42
Tree	{ return false ; } Test
Code	{ return false ; } Test
Distance : 12

43
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 12

44
Tree	{ return new getNativeType ( this ) ; }
Code	{ return new getNativeType ( this ) ; }
Distance : 8

45
Tree	{ return Override () ; }
Code	{ return Override () ; }
Distance : 10

46
Tree	{ return JSType ; }
Code	{ return JSType ; }
Distance : 11

47
Tree	ARRAY_TYPE () ;
Code	ARRAY_TYPE () ;
Distance : 13

48
Tree	Override () ;
Code	Override () ;
Distance : 13

49
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 11

50
Tree	{ return ARRAY_TYPE ; }
Code	{ return ARRAY_TYPE ; }
Distance : 10

51
Tree	{ return ( topType ) ARRAY_TYPE . } () ; }
Code	{ return ( topType ) ARRAY_TYPE . } () ; }
Distance : 10

52
Tree	{ return ( ARRAY_TYPE ) { . } () ; }
Code	{ return ( ARRAY_TYPE ) { . } () ; }
Distance : 10

53
Tree	{ return ( ARRAY_TYPE ) isAllType ( { ) ; }
Code	{ return ( ARRAY_TYPE ) isAllType ( { ) ; }
Distance : 9

54
Tree	{ return ( ARRAY_TYPE . isAllType () ? null : topType ) ; }
Code	{ return ( ARRAY_TYPE . isAllType () ? null : topType ) ; }
Distance : 7

55
Tree	{ return ( topType . getNativeType () ? null : ARRAY_TYPE ) ; }
Code	{ return ( topType . getNativeType () ? null : ARRAY_TYPE ) ; }
Distance : 6

56
Tree	{ return ( topType ) ARRAY_TYPE . isAllType () ; }
Code	{ return ( topType ) ARRAY_TYPE . isAllType () ; }
Distance : 10

57
Tree	{ return ! isAllType () ; }
Code	{ return ! isAllType () ; }
Distance : 9

58
Tree	{ return ( ARRAY_TYPE . ; () ? null : topType ) ; }
Code	{ return ( ARRAY_TYPE . ; () ? null : topType ) ; }
Distance : 8

59
Tree	private int ARRAY_TYPE () { return this . ARRAY_TYPE ; }
Code	private int ARRAY_TYPE () { return this . ARRAY_TYPE ; }
Distance : 12

60
Tree	{ return this . isAllType ; }
Code	{ return this . isAllType ; }
Distance : 9

61
Tree	{ return ( topType ) getNativeType ( { ) ; }
Code	{ return ( topType ) getNativeType ( { ) ; }
Distance : 8

62
Tree	{ return ( ARRAY_TYPE ) getNativeType ( { ) ; }
Code	{ return ( ARRAY_TYPE ) getNativeType ( { ) ; }
Distance : 8

63
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 12

64
Tree	{ return ( ARRAY_TYPE . isAllType () ? null : ARRAY_TYPE ) ; }
Code	{ return ( ARRAY_TYPE . isAllType () ? null : ARRAY_TYPE ) ; }
Distance : 6

65
Tree	{ return ARRAY_TYPE . } () ? null : topType ; }
Code	{ return ARRAY_TYPE . } () ? null : topType ; }
Distance : 6

66
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 12

67
Tree	{ return this . getNativeType ; }
Code	{ return this . getNativeType ; }
Distance : 9

68
Tree	{ return topType . ; () ? null : topType ; }
Code	{ return topType . ; () ? null : topType ; }
Distance : 5

69
Tree	{ return ARRAY_TYPE . getNativeType () ? null : ARRAY_TYPE ; }
Code	{ return ARRAY_TYPE . getNativeType () ? null : ARRAY_TYPE ; }
Distance : 7

70
Tree	{ return ( topType ) isAllType ( { ) ; }
Code	{ return ( topType ) isAllType ( { ) ; }
Distance : 8

71
Tree	{ return ARRAY_TYPE . getNativeType () ? null : topType ; }
Code	{ return ARRAY_TYPE . getNativeType () ? null : topType ; }
Distance : 6

72
Tree	{ return ( topType ) { . isAllType () ; }
Code	{ return ( topType ) { . isAllType () ; }
Distance : 10

73
Tree	{ return topType . getNativeType () ? null : topType ; }
Code	{ return topType . getNativeType () ? null : topType ; }
Distance : 5

74
Tree	{ return ( ARRAY_TYPE ) { . getNativeType () ; }
Code	{ return ( ARRAY_TYPE ) { . getNativeType () ; }
Distance : 10

75
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 12

76
Tree	{ return ( topType ) getNativeType ( isAllType ) ; }
Code	{ return ( topType ) getNativeType ( isAllType ) ; }
Distance : 8

77
Tree	{ return isAllType () ; }
Code	{ return isAllType () ; }
Distance : 9

78
Tree	{ return getNativeType () ; }
Code	{ return getNativeType () ; }
Distance : 10

79
Tree	{ return ( topType . getNativeType () ? null : topType ) ; }
Code	{ return ( topType . getNativeType () ? null : topType ) ; }
Distance : 7

80
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 12

81
Tree	{ return ARRAY_TYPE . isAllType () ? null : topType ; }
Code	{ return ARRAY_TYPE . isAllType () ? null : topType ; }
Distance : 5

82
Tree	{ return this . Override ; }
Code	{ return this . Override ; }
Distance : 10

83
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 12

84
Tree	{ return ARRAY_TYPE . } ( topType ) ; }
Code	{ return ARRAY_TYPE . } ( topType ) ; }
Distance : 8

85
Tree	{ return topType . getNativeType () ? null : ARRAY_TYPE ; }
Code	{ return topType . getNativeType () ? null : ARRAY_TYPE ; }
Distance : 6

86
Tree	{ return topType . } ( topType ) ; }
Code	{ return topType . } ( topType ) ; }
Distance : 7

87
Tree	{ return ( topType . ; () ? null : { ) ; }
Code	{ return ( topType . ; () ? null : { ) ; }
Distance : 7

88
Tree	{ return this . topType ; } i
Code	{ return this . topType ; } i
Distance : 10

89
Tree	{ return ! getNativeType () ; }
Code	{ return ! getNativeType () ; }
Distance : 10

90
Tree	{ return ( ARRAY_TYPE ) { . isAllType () ; }
Code	{ return ( ARRAY_TYPE ) { . isAllType () ; }
Distance : 10

91
Tree	{ return ARRAY_TYPE . isAllType () ? null : ARRAY_TYPE ; }
Code	{ return ARRAY_TYPE . isAllType () ? null : ARRAY_TYPE ; }
Distance : 6

92
Tree	{ return topType . isAllType () ? null : topType ; }
Code	{ return topType . isAllType () ? null : topType ; }
Distance : 4

93
Tree	{ return topType . isAllType () ? null : ARRAY_TYPE ; }
Code	{ return topType . isAllType () ? null : ARRAY_TYPE ; }
Distance : 5

94
Tree	{ return getNativeType ; }
Code	{ return getNativeType ; }
Distance : 10

95
Tree	{ return this . topType ; } value
Code	{ return this . topType ; } value
Distance : 10

96
Tree	{ return ( topType ) { . } () ; }
Code	{ return ( topType ) { . } () ; }
Distance : 11

97
Tree	{ return this . topType ; } options
Code	{ return this . topType ; } options
Distance : 10

98
Tree	{ return this . topType ; } p
Code	{ return this . topType ; } p
Distance : 10

99
Tree	{ return isAllType ; }
Code	{ return isAllType ; }
Distance : 10

100
Tree	{ return new Override ( this ) ; }
Code	{ return new Override ( this ) ; }
Distance : 9

101
Tree	{ return new isAllType ( this ) ; }
Code	{ return new isAllType ( this ) ; }
Distance : 8

102
Tree	return () ;
Code	return () ;
Distance : 12

103
Tree	isAllType () ;
Code	isAllType () ;
Distance : 12

104
Tree	private int topType () { return this . ARRAY_TYPE ; }
Code	private int topType () { return this . ARRAY_TYPE ; }
Distance : 11

105
Tree	getNativeType () ;
Code	getNativeType () ;
Distance : 13

106
Tree	{ return this . getNativeType . isAllType () ; }
Code	{ return this . getNativeType . isAllType () ; }
Distance : 9

107
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 12

108
Tree	{ () ; p
Code	{ () ; p
Distance : 12

109
Tree	{ return ! Override () ; }
Code	{ return ! Override () ; }
Distance : 10

110
Tree	{ return Override ; }
Code	{ return Override ; }
Distance : 11

111
Tree	{ return ( topType . isAllType () ? null : topType ) ; }
Code	{ return ( topType . isAllType () ? null : topType ) ; }
Distance : 6

112
Tree	private double topType () { return topType ; }
Code	private double topType () { return topType ; }
Distance : 10

113
Tree	{ return ( topType ) getNativeType ( ARRAY_TYPE ) ; }
Code	{ return ( topType ) getNativeType ( ARRAY_TYPE ) ; }
Distance : 7

114
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 11

115
Tree	JSType () ;
Code	JSType () ;
Distance : 13

116
Tree	{ return ARRAY_TYPE . isAllType ( topType ) ; }
Code	{ return ARRAY_TYPE . isAllType ( topType ) ; }
Distance : 7

117
Tree	{ return topType . isAllType ( topType ) ; }
Code	{ return topType . isAllType ( topType ) ; }
Distance : 6

118
Tree	{ return ARRAY_TYPE . isAllType ( ARRAY_TYPE ) ; }
Code	{ return ARRAY_TYPE . isAllType ( ARRAY_TYPE ) ; }
Distance : 6

119
Tree	{ return topType . isAllType ( ARRAY_TYPE ) ; }
Code	{ return topType . isAllType ( ARRAY_TYPE ) ; }
Distance : 5

120
Tree	{ return this . isAllType . isAllType () ; }
Code	{ return this . isAllType . isAllType () ; }
Distance : 9

121
Tree	{ return new topType ( isAllType ) ; }
Code	{ return new topType ( isAllType ) ; }
Distance : 9

122
Tree	{ return ( ARRAY_TYPE ) getNativeType ( isAllType ) ; }
Code	{ return ( ARRAY_TYPE ) getNativeType ( isAllType ) ; }
Distance : 8

123
Tree	{ return ( ARRAY_TYPE . getNativeType () ? null : topType ) ; }
Code	{ return ( ARRAY_TYPE . getNativeType () ? null : topType ) ; }
Distance : 8

124
Tree	private double topType () { return ARRAY_TYPE ; }
Code	private double topType () { return ARRAY_TYPE ; }
Distance : 10

125
Tree	private boolean ARRAY_TYPE () { return topType ; }
Code	private boolean ARRAY_TYPE () { return topType ; }
Distance : 11

126
Tree	{ return ( topType ) { . getNativeType () ; }
Code	{ return ( topType ) { . getNativeType () ; }
Distance : 10

127
Tree	{ return ( ARRAY_TYPE ) getNativeType ( ARRAY_TYPE ) ; }
Code	{ return ( ARRAY_TYPE ) getNativeType ( ARRAY_TYPE ) ; }
Distance : 7

128
Tree	private double topType () { return this . topType ; }
Code	private double topType () { return this . topType ; }
Distance : 10

129
Tree	private int ARRAY_TYPE () { return topType ; }
Code	private int ARRAY_TYPE () { return topType ; }
Distance : 11

130
Tree	{ return new topType ( Override ) ; }
Code	{ return new topType ( Override ) ; }
Distance : 9

131
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 12

132
Tree	private boolean topType () { return this . topType ; }
Code	private boolean topType () { return this . topType ; }
Distance : 10

133
Tree	private int topType () { return this . topType ; }
Code	private int topType () { return this . topType ; }
Distance : 10

134
Tree	{ return ARRAY_TYPE ; } i
Code	{ return ARRAY_TYPE ; } i
Distance : 11

135
Tree	private boolean ARRAY_TYPE () { return ARRAY_TYPE ; }
Code	private boolean ARRAY_TYPE () { return ARRAY_TYPE ; }
Distance : 11

136
Tree	{ return this . ARRAY_TYPE . isAllType () ; }
Code	{ return this . ARRAY_TYPE . isAllType () ; }
Distance : 9

137
Tree	{ return topType () ; } p
Code	{ return topType () ; } p
Distance : 10

138
Tree	{ return ARRAY_TYPE ; } value
Code	{ return ARRAY_TYPE ; } value
Distance : 11

139
Tree	{ return ARRAY_TYPE . getNativeType ( ARRAY_TYPE ) ; }
Code	{ return ARRAY_TYPE . getNativeType ( ARRAY_TYPE ) ; }
Distance : 6

140
Tree	{ return ARRAY_TYPE ; } options
Code	{ return ARRAY_TYPE ; } options
Distance : 11

141
Tree	{ return topType () ? null : getNativeType ; }
Code	{ return topType () ? null : getNativeType ; }
Distance : 7

142
Tree	{ return ARRAY_TYPE ; } p
Code	{ return ARRAY_TYPE ; } p
Distance : 11

143
Tree	{ () ; options
Code	{ () ; options
Distance : 12

144
Tree	{ return ARRAY_TYPE () ? null : ARRAY_TYPE ; }
Code	{ return ARRAY_TYPE () ? null : ARRAY_TYPE ; }
Distance : 8

145
Tree	{ () ; value
Code	{ () ; value
Distance : 12

146
Tree	private double topType () { return this . ARRAY_TYPE ; }
Code	private double topType () { return this . ARRAY_TYPE ; }
Distance : 11

147
Tree	{ () ; i
Code	{ () ; i
Distance : 12

148
Tree	private boolean ARRAY_TYPE () { return this . topType ; }
Code	private boolean ARRAY_TYPE () { return this . topType ; }
Distance : 11

149
Tree	private int ARRAY_TYPE () { return ARRAY_TYPE ; }
Code	private int ARRAY_TYPE () { return ARRAY_TYPE ; }
Distance : 11

150
Tree	private int ARRAY_TYPE () { return this . topType ; }
Code	private int ARRAY_TYPE () { return this . topType ; }
Distance : 11

151
Tree	private boolean ARRAY_TYPE () { return this . ARRAY_TYPE ; }
Code	private boolean ARRAY_TYPE () { return this . ARRAY_TYPE ; }
Distance : 12

152
Tree	{ return false ; } {}
Code	{ return false ; } {}
Distance : 12

153
Tree	private boolean topType () { return this . ARRAY_TYPE ; }
Code	private boolean topType () { return this . ARRAY_TYPE ; }
Distance : 11

154
Tree	{ return ! topType () ; } options
Code	{ return ! topType () ; } options
Distance : 11

155
Tree	{ return new topType ( this ) ; }
Code	{ return new topType ( this ) ; }
Distance : 9

156
Tree	{ return ARRAY_TYPE () ; }
Code	{ return ARRAY_TYPE () ; }
Distance : 10

157
Tree	{ return this . topType . ARRAY_TYPE () ; }
Code	{ return this . topType . ARRAY_TYPE () ; }
Distance : 9

158
Tree	{ return topType . getNativeType ( ARRAY_TYPE ) ; }
Code	{ return topType . getNativeType ( ARRAY_TYPE ) ; }
Distance : 5

159
Tree	{ return topType () ; } options
Code	{ return topType () ; } options
Distance : 10

160
Tree	{ return new ARRAY_TYPE ( this ) ; }
Code	{ return new ARRAY_TYPE ( this ) ; }
Distance : 9

161
Tree	{ return topType ; }
Code	{ return topType ; }
Distance : 10

162
Tree	{ return ( topType ) { ( { ) ; }
Code	{ return ( topType ) { ( { ) ; }
Distance : 9

163
Tree	{ return new JSType ( this ) ; }
Code	{ return new JSType ( this ) ; }
Distance : 9

164
Tree	{ return ! ARRAY_TYPE () ; }
Code	{ return ! ARRAY_TYPE () ; }
Distance : 10

165
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 11

166
Tree	{ return isAllType ; }
Code	{ return isAllType ; }
Distance : 10

167
Tree	{ return isAllType () ? null : topType ; }
Code	{ return isAllType () ? null : topType ; }
Distance : 6

168
Tree	{ return getNativeType () ? null : topType ; }
Code	{ return getNativeType () ? null : topType ; }
Distance : 7

169
Tree	{ return ( topType ) getNativeType . isAllType () ; }
Code	{ return ( topType ) getNativeType . isAllType () ; }
Distance : 10

170
Tree	{ return ! topType () ; } value
Code	{ return ! topType () ; } value
Distance : 11

171
Tree	{ return this . topType . getNativeType () ; }
Code	{ return this . topType . getNativeType () ; }
Distance : 9

172
Tree	{ return false ; } f
Code	{ return false ; } f
Distance : 12

173
Tree	{ return topType ; } p
Code	{ return topType ; } p
Distance : 11

174
Tree	{ return topType ; } options
Code	{ return topType ; } options
Distance : 11

175
Tree	{ return false ; } ParamChecks
Code	{ return false ; } ParamChecks
Distance : 12

176
Tree	{ return false ; } -
Code	{ return false ; } -
Distance : 12

177
Tree	{ return this . ARRAY_TYPE . getNativeType () ; }
Code	{ return this . ARRAY_TYPE . getNativeType () ; }
Distance : 9

178
Tree	{ return ( ARRAY_TYPE ) ARRAY_TYPE . isAllType () ; }
Code	{ return ( ARRAY_TYPE ) ARRAY_TYPE . isAllType () ; }
Distance : 10

179
Tree	{ return true ; }
Code	{ return true ; }
Distance : 11

180
Tree	{ return ! ; () ; } i
Code	{ return ! ; () ; } i
Distance : 11

181
Tree	{ return this . topType ; }
Code	{ return this . topType ; }
Distance : 9

182
Tree	{ return ARRAY_TYPE () ? null : topType ; }
Code	{ return ARRAY_TYPE () ? null : topType ; }
Distance : 7

183
Tree	{ return this . ARRAY_TYPE . ARRAY_TYPE () ; }
Code	{ return this . ARRAY_TYPE . ARRAY_TYPE () ; }
Distance : 9

184
Tree	{ return topType ; } value
Code	{ return topType ; } value
Distance : 11

185
Tree	{ return new Override ( ARRAY_TYPE ) ; }
Code	{ return new Override ( ARRAY_TYPE ) ; }
Distance : 8

186
Tree	{ return this . topType . ; () ; }
Code	{ return this . topType . ; () ; }
Distance : 10

187
Tree	{ return ( ARRAY_TYPE . getNativeType () ? null : ARRAY_TYPE ) ; }
Code	{ return ( ARRAY_TYPE . getNativeType () ? null : ARRAY_TYPE ) ; }
Distance : 7

188
Tree	{ return this . ARRAY_TYPE ; }
Code	{ return this . ARRAY_TYPE ; }
Distance : 9

189
Tree	{ return topType () ; }
Code	{ return topType () ; }
Distance : 9

190
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 12

191
Tree	{ return topType ; } i
Code	{ return topType ; } i
Distance : 11

192
Tree	{ return false ; } Preconditions
Code	{ return false ; } Preconditions
Distance : 12

193
Tree	{ return new topType ( this ) ; } p
Code	{ return new topType ( this ) ; } p
Distance : 10

194
Tree	{ return new isAllType ( ARRAY_TYPE ) ; }
Code	{ return new isAllType ( ARRAY_TYPE ) ; }
Distance : 7

195
Tree	{ return topType () ; } value
Code	{ return topType () ; } value
Distance : 10

196
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 12

197
Tree	{ return Override ; }
Code	{ return Override ; }
Distance : 11

198
Tree	{ return new topType ( topType ) ; }
Code	{ return new topType ( topType ) ; }
Distance : 9

199
Tree	{ return new isAllType ( topType ) ; }
Code	{ return new isAllType ( topType ) ; }
Distance : 8

========================================================================


========================================================================
Example Number: 13
Parent Code is: 
{ if ( assignLhsChild != null ) { return true ; } return false ; }
-------------------------------------------------------------------------------
Child code is: 
{ if ( assignLhsChild != null ) { return true ; } return parent != null && NodeUtil . isGet ( parent ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=assignLhsChild}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (9{val=true}) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (9{val=false}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=assignLhsChild}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (9{val=true}) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (27 (27 (800{val=parent}) (242{val=!=}) (500{val=null})) (249{val=&&}) (32 (800{val=NodeUtil}) (235{val=.}) (802{val=isGet}) (214{val=(}) (800{val=parent}) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/100/parent/src_com_google_javascript_jscomp_CheckGlobalThis.java
-------------------------------------------------------------------------------
Edit Distance : 10
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ if ( NodeUtil != null ) { return false ; } return false ; }
Code	{ if ( NodeUtil != null ) { return false ; } return false ; }
Distance : 12

1
Tree	{ if ( parent != null ) { return false ; } return false ; }
Code	{ if ( parent != null ) { return false ; } return false ; }
Distance : 12

2
Tree	{ if ( ! assignLhsChild ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild ) { return false ; } return false ; }
Distance : 14

3
Tree	{ if ( n != null ) { return true ; } return false ; }
Code	{ if ( n != null ) { return true ; } return false ; }
Distance : 11

4
Tree	{ if ( ! parent ) { return true ; } return false ; }
Code	{ if ( ! parent ) { return true ; } return false ; }
Distance : 13

5
Tree	{ if ( n != null ) { return false ; } return false ; }
Code	{ if ( n != null ) { return false ; } return false ; }
Distance : 12

6
Tree	{ if ( ! n ) { return true ; } return false ; }
Code	{ if ( ! n ) { return true ; } return false ; }
Distance : 13

7
Tree	{ if ( ! NodeUtil ) { return false ; } return false ; }
Code	{ if ( ! NodeUtil ) { return false ; } return false ; }
Distance : 14

8
Tree	{ if ( ! parent ) { return false ; } return false ; }
Code	{ if ( ! parent ) { return false ; } return false ; }
Distance : 14

9
Tree	{ if ( ! isGet ( isGet ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( isGet ) ) { return true ; } return false ; }
Distance : 15

10
Tree	{ if ( ! this . isGet ( isGet ) ) { return true ; } return false ; }
Code	{ if ( ! this . isGet ( isGet ) ) { return true ; } return false ; }
Distance : 17

11
Tree	{ if ( ! this . false ( isGet ) ) { return true ; } return false ; }
Code	{ if ( ! this . false ( isGet ) ) { return true ; } return false ; }
Distance : 17

12
Tree	{ if ( ! NodeUtil ( this , isGet ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil ( this , isGet ) ) { return true ; } return false ; }
Distance : 17

13
Tree	{ if ( ! this . isGet ( isGet ) ) { return false ; } return false ; }
Code	{ if ( ! this . isGet ( isGet ) ) { return false ; } return false ; }
Distance : 18

14
Tree	{ if ( ! assignLhsChild . isGet ( isGet ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( isGet ) ) { return true ; } return false ; }
Distance : 16

15
Tree	{ if ( ! isGet . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! isGet . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 17

16
Tree	{ if ( ! this . false ( isGet ) ) { return false ; } return false ; }
Code	{ if ( ! this . false ( isGet ) ) { return false ; } return false ; }
Distance : 18

17
Tree	{ if ( ! NodeUtil ( this , isGet ) ) { return false ; } return false ; }
Code	{ if ( ! NodeUtil ( this , isGet ) ) { return false ; } return false ; }
Distance : 18

18
Tree	{ if ( ! isGet ( isGet , parent , false ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( isGet , parent , false ) ) { return false ; } return false ; }
Distance : 20

19
Tree	{ if ( ! isGet ( isGet , n , false ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( isGet , n , false ) ) { return false ; } return false ; }
Distance : 20

20
Tree	{ if ( isGet != null ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( isGet != null ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 6

21
Tree	{ if ( isGet != null ) { return true ; } return n . false ( assignLhsChild ) ; }
Code	{ if ( isGet != null ) { return true ; } return n . false ( assignLhsChild ) ; }
Distance : 8

22
Tree	{ if ( isGet != null ) { return false ; } return NodeUtil . isGet ( isGet ) ; }
Code	{ if ( isGet != null ) { return false ; } return NodeUtil . isGet ( isGet ) ; }
Distance : 7

23
Tree	{ if ( ! isGet ) { return true ; } return NodeUtil . false ( assignLhsChild ) ; }
Code	{ if ( ! isGet ) { return true ; } return NodeUtil . false ( assignLhsChild ) ; }
Distance : 9

24
Tree	{ if ( ! assignLhsChild ) { return true ; } return NodeUtil . false ( isGet ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return NodeUtil . false ( isGet ) ; }
Distance : 9

25
Tree	{ if ( ! isGet ) { return true ; } return n . isGet ( isGet ) ; }
Code	{ if ( ! isGet ) { return true ; } return n . isGet ( isGet ) ; }
Distance : 9

26
Tree	{ if ( ! isGet ) { return true ; } return n . false ( assignLhsChild ) ; }
Code	{ if ( ! isGet ) { return true ; } return n . false ( assignLhsChild ) ; }
Distance : 10

27
Tree	{ if ( ! assignLhsChild ) { return true ; } return n . false ( isGet ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return n . false ( isGet ) ; }
Distance : 10

28
Tree	{ if ( ! isGet ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( ! isGet ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 8

29
Tree	{ if ( ! assignLhsChild ) { return true ; } return NodeUtil . isGet ( isGet ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return NodeUtil . isGet ( isGet ) ; }
Distance : 8

30
Tree	{ if ( ! isGet ( assignLhsChild , n ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , n ) ) { return false ; } return false ; }
Distance : 17

31
Tree	{ if ( ! isGet ( this , assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( this , assignLhsChild ) ) { return true ; } return false ; }
Distance : 17

32
Tree	{ if ( ! isGet ( assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild ) ) { return false ; } return false ; }
Distance : 16

33
Tree	{ if ( ! isGet ( this , assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( this , assignLhsChild ) ) { return false ; } return false ; }
Distance : 18

34
Tree	{ if ( ! isGet . isGet ( isGet ) ) { return true ; } return false ; }
Code	{ if ( ! isGet . isGet ( isGet ) ) { return true ; } return false ; }
Distance : 17

35
Tree	{ if ( ! parent ( isGet ) ) { return true ; } return false ; }
Code	{ if ( ! parent ( isGet ) ) { return true ; } return false ; }
Distance : 15

36
Tree	{ if ( isGet != null ) { return true ; } return NodeUtil . false ( isGet ) ; }
Code	{ if ( isGet != null ) { return true ; } return NodeUtil . false ( isGet ) ; }
Distance : 7

37
Tree	{ if ( isGet != null ) { return true ; } return NodeUtil . isGet ( isGet ) ; }
Code	{ if ( isGet != null ) { return true ; } return NodeUtil . isGet ( isGet ) ; }
Distance : 6

38
Tree	{ if ( isGet != null ) { return true ; } return n . false ( isGet ) ; }
Code	{ if ( isGet != null ) { return true ; } return n . false ( isGet ) ; }
Distance : 8

39
Tree	{ if ( ! isGet ) { return true ; } return NodeUtil . false ( isGet ) ; }
Code	{ if ( ! isGet ) { return true ; } return NodeUtil . false ( isGet ) ; }
Distance : 9

40
Tree	{ if ( isGet != null ) { return true ; } return NodeUtil . false ( assignLhsChild ) ; }
Code	{ if ( isGet != null ) { return true ; } return NodeUtil . false ( assignLhsChild ) ; }
Distance : 7

41
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return false ; }
Distance : 16

42
Tree	{ if ( ! isGet ( assignLhsChild , n ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , n ) ) { return true ; } return false ; }
Distance : 16

43
Tree	{ if ( isGet != null ) { return false ; } return NodeUtil . false ( isGet ) ; }
Code	{ if ( isGet != null ) { return false ; } return NodeUtil . false ( isGet ) ; }
Distance : 8

44
Tree	{ if ( ! != ( isGet ) ) { return true ; } return false ; }
Code	{ if ( ! != ( isGet ) ) { return true ; } return false ; }
Distance : 14

45
Tree	{ if ( ! parent ( this , isGet ) ) { return true ; } return false ; }
Code	{ if ( ! parent ( this , isGet ) ) { return true ; } return false ; }
Distance : 17

46
Tree	{ if ( assignLhsChild != null ) { return true ; } return NodeUtil . false ( isGet ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return NodeUtil . false ( isGet ) ; }
Distance : 6

47
Tree	{ if ( ! isGet ) { return true ; } return n . false ( isGet ) ; }
Code	{ if ( ! isGet ) { return true ; } return n . false ( isGet ) ; }
Distance : 10

48
Tree	{ if ( isGet != null ) { return true ; } return n . isGet ( isGet ) ; }
Code	{ if ( isGet != null ) { return true ; } return n . isGet ( isGet ) ; }
Distance : 7

49
Tree	{ if ( ! isGet ) { return true ; } return NodeUtil . isGet ( isGet ) ; }
Code	{ if ( ! isGet ) { return true ; } return NodeUtil . isGet ( isGet ) ; }
Distance : 8

50
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 16

51
Tree	{ if ( ! this . false ( assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! this . false ( assignLhsChild ) ) { return false ; } return false ; }
Distance : 18

52
Tree	{ if ( ! this . n ( isGet ) ) { return false ; } return false ; }
Code	{ if ( ! this . n ( isGet ) ) { return false ; } return false ; }
Distance : 18

53
Tree	{ if ( ! isGet . isGet ( isGet , false ) ) { return false ; } return false ; }
Code	{ if ( ! isGet . isGet ( isGet , false ) ) { return false ; } return false ; }
Distance : 20

54
Tree	{ if ( ! isGet ( assignLhsChild , parent , false ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , false ) ) { return true ; } return false ; }
Distance : 18

55
Tree	{ if ( ! isGet ( assignLhsChild , n , false ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , n , false ) ) { return true ; } return false ; }
Distance : 18

56
Tree	{ if ( isGet . isGet ( isGet ) ) { return true ; } return false ; }
Code	{ if ( isGet . isGet ( isGet ) ) { return true ; } return false ; }
Distance : 16

57
Tree	{ if ( ! isGet ) { return true ; } return false ( n , n . ; ( parent ) ) ; }
Code	{ if ( ! isGet ) { return true ; } return false ( n , n . ; ( parent ) ) ; }
Distance : 10

58
Tree	{ if ( ! isGet ) { return true ; } return false ( n , n . isGet ( parent ) ) ; }
Code	{ if ( ! isGet ) { return true ; } return false ( n , n . isGet ( parent ) ) ; }
Distance : 9

59
Tree	{ if ( ! isGet ) { return true ; } return false ( n , n . parent ( parent ) ) ; }
Code	{ if ( ! isGet ) { return true ; } return false ( n , n . parent ( parent ) ) ; }
Distance : 10

60
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Distance : 17

61
Tree	{ if ( ! isGet ) { return true ; } return false ( n , n . ; ( n ) ) ; }
Code	{ if ( ! isGet ) { return true ; } return false ( n , n . ; ( n ) ) ; }
Distance : 11

62
Tree	{ if ( ! isGet . isGet ( isGet ) ) { return true ; } false }
Code	{ if ( ! isGet . isGet ( isGet ) ) { return true ; } false }
Distance : 19

63
Tree	{ if ( ! isGet ( isGet , parent ) ) { return false ; } return n . false ( isGet ) ; }
Code	{ if ( ! isGet ( isGet , parent ) ) { return false ; } return n . false ( isGet ) ; }
Distance : 15

64
Tree	{ if ( ! isGet ( isGet , parent ) ) { return false ; } return NodeUtil . false ( isGet ) ; }
Code	{ if ( ! isGet ( isGet , parent ) ) { return false ; } return NodeUtil . false ( isGet ) ; }
Distance : 14

65
Tree	{ if ( ! isGet ) { return true ; } return false ( parent , n . ; ( parent ) ) ; }
Code	{ if ( ! isGet ) { return true ; } return false ( parent , n . ; ( parent ) ) ; }
Distance : 10

66
Tree	{ if ( ! NodeUtil . isGet ( isGet ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( isGet ) ) { return true ; } return false ; }
Distance : 17

67
Tree	{ if ( ! isGet ( isGet , n ) ) { return false ; } return n . false ( isGet ) ; }
Code	{ if ( ! isGet ( isGet , n ) ) { return false ; } return n . false ( isGet ) ; }
Distance : 15

68
Tree	{ if ( ! isGet ( isGet , n ) ) { return false ; } return NodeUtil . false ( isGet ) ; }
Code	{ if ( ! isGet ( isGet , n ) ) { return false ; } return NodeUtil . false ( isGet ) ; }
Distance : 14

69
Tree	{ if ( ! isGet ) { return true ; } return false ( n , n . isGet ( n ) ) ; }
Code	{ if ( ! isGet ) { return true ; } return false ( n , n . isGet ( n ) ) ; }
Distance : 10

70
Tree	{ if ( ! isGet . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! isGet . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Distance : 18

71
Tree	{ if ( ! assignLhsChild . isGet ( isGet ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( isGet ) ) { return false ; } return false ; }
Distance : 17

72
Tree	{ if ( ! isGet ( isGet , parent , false ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( isGet , parent , false ) ) { return true ; } return false ; }
Distance : 19

73
Tree	{ if ( ! isGet ( isGet , n , false ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( isGet , n , false ) ) { return true ; } return false ; }
Distance : 19

74
Tree	{ if ( ! this . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! this . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 17

75
Tree	{ if ( ! isGet . isGet ( isGet , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet . isGet ( isGet , parent ) ) { return true ; } return false ; }
Distance : 19

76
Tree	{ if ( ! this . false ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! this . false ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 17

77
Tree	{ if ( ! isGet ( assignLhsChild , parent , false ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , false ) ) { return false ; } return false ; }
Distance : 19

78
Tree	{ if ( ! parent ( isGet , parent , parent ) ) { return false ; } return false ; }
Code	{ if ( ! parent ( isGet , parent , parent ) ) { return false ; } return false ; }
Distance : 19

79
Tree	{ if ( ! this . n ( isGet ) ) { return true ; } return false ; }
Code	{ if ( ! this . n ( isGet ) ) { return true ; } return false ; }
Distance : 17

80
Tree	{ if ( ! assignLhsChild . isGet ( isGet , parent ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( isGet , parent ) ) { return false ; } return false ; }
Distance : 19

81
Tree	{ if ( ! isGet . isGet ( assignLhsChild , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet . isGet ( assignLhsChild , parent ) ) { return false ; } return false ; }
Distance : 19

82
Tree	{ if ( ! isGet ( assignLhsChild , n , false ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , n , false ) ) { return false ; } return false ; }
Distance : 19

83
Tree	{ if ( ! parent ( isGet , n , parent ) ) { return false ; } return false ; }
Code	{ if ( ! parent ( isGet , n , parent ) ) { return false ; } return false ; }
Distance : 19

84
Tree	{ if ( ! this . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! this . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Distance : 18

85
Tree	{ if ( ! isGet . isGet ( isGet , n ) ) { return true ; } return false ; }
Code	{ if ( ! isGet . isGet ( isGet , n ) ) { return true ; } return false ; }
Distance : 19

86
Tree	{ if ( ! isGet . isGet ( assignLhsChild , n ) ) { return false ; } return false ; }
Code	{ if ( ! isGet . isGet ( assignLhsChild , n ) ) { return false ; } return false ; }
Distance : 19

87
Tree	{ if ( ! assignLhsChild . isGet ( isGet , n ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( isGet , n ) ) { return false ; } return false ; }
Distance : 19

88
Tree	{ if ( isGet . isGet ( isGet ) ) { return false ; } return false ; }
Code	{ if ( isGet . isGet ( isGet ) ) { return false ; } return false ; }
Distance : 17

89
Tree	{ if ( ! isGet . null ( isGet ) ) { return true ; } return false ; }
Code	{ if ( ! isGet . null ( isGet ) ) { return true ; } return false ; }
Distance : 16

90
Tree	{ if ( ! assignLhsChild . isGet ( isGet , parent ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( isGet , parent ) ) { return true ; } return false ; }
Distance : 18

91
Tree	{ if ( isGet . null ( isGet ) ) { return true ; } return false ; }
Code	{ if ( isGet . null ( isGet ) ) { return true ; } return false ; }
Distance : 15

92
Tree	{ if ( ! isGet . isGet ( assignLhsChild , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet . isGet ( assignLhsChild , parent ) ) { return true ; } return false ; }
Distance : 18

93
Tree	{ if ( isGet . parent ( isGet ) ) { return true ; } return false ; }
Code	{ if ( isGet . parent ( isGet ) ) { return true ; } return false ; }
Distance : 16

94
Tree	{ if ( ! isGet . isGet ( isGet ) ) { return false ; } false }
Code	{ if ( ! isGet . isGet ( isGet ) ) { return false ; } false }
Distance : 20

95
Tree	{ if ( ! isGet ( isGet , parent , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( isGet , parent , parent ) ) { return true ; } return false ; }
Distance : 19

96
Tree	{ if ( ! isGet . isGet ( assignLhsChild ) ) { return true ; } false }
Code	{ if ( ! isGet . isGet ( assignLhsChild ) ) { return true ; } false }
Distance : 19

97
Tree	{ if ( assignLhsChild . isGet ( isGet ) ) { return true ; } return false ; }
Code	{ if ( assignLhsChild . isGet ( isGet ) ) { return true ; } return false ; }
Distance : 15

98
Tree	{ if ( ! parent ( isGet , parent , false ) ) { return false ; } return false ; }
Code	{ if ( ! parent ( isGet , parent , false ) ) { return false ; } return false ; }
Distance : 20

99
Tree	{ if ( isGet . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( isGet . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Distance : 17

100
Tree	{ if ( ! isGet ( isGet , n , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( isGet , n , parent ) ) { return true ; } return false ; }
Distance : 19

101
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent ) ) { return false ; } return false ; }
Distance : 19

102
Tree	{ if ( ! isGet . isGet ( isGet , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet . isGet ( isGet , parent ) ) { return false ; } return false ; }
Distance : 19

103
Tree	{ if ( assignLhsChild . isGet ( isGet ) ) { return false ; } return false ; }
Code	{ if ( assignLhsChild . isGet ( isGet ) ) { return false ; } return false ; }
Distance : 16

104
Tree	{ if ( ! isGet . isGet ( assignLhsChild ) ) { return false ; } false }
Code	{ if ( ! isGet . isGet ( assignLhsChild ) ) { return false ; } false }
Distance : 20

105
Tree	{ if ( ! assignLhsChild . isGet ( isGet ) ) { return false ; } false }
Code	{ if ( ! assignLhsChild . isGet ( isGet ) ) { return false ; } false }
Distance : 19

106
Tree	{ if ( ! parent ( isGet , n , false ) ) { return false ; } return false ; }
Code	{ if ( ! parent ( isGet , n , false ) ) { return false ; } return false ; }
Distance : 20

107
Tree	{ if ( ! isGet . isGet ( isGet , false ) ) { return true ; } return false ; }
Code	{ if ( ! isGet . isGet ( isGet , false ) ) { return true ; } return false ; }
Distance : 19

108
Tree	{ if ( ! assignLhsChild . isGet ( isGet , false ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( isGet , false ) ) { return false ; } return false ; }
Distance : 19

109
Tree	{ if ( ! isGet . isGet ( isGet ) ) { return true ; } assertFalse }
Code	{ if ( ! isGet . isGet ( isGet ) ) { return true ; } assertFalse }
Distance : 19

110
Tree	{ if ( ! isGet . isGet ( assignLhsChild , false ) ) { return true ; } return false ; }
Code	{ if ( ! isGet . isGet ( assignLhsChild , false ) ) { return true ; } return false ; }
Distance : 18

111
Tree	{ if ( ! isGet . isGet ( assignLhsChild , false ) ) { return false ; } return false ; }
Code	{ if ( ! isGet . isGet ( assignLhsChild , false ) ) { return false ; } return false ; }
Distance : 19

112
Tree	{ if ( ! isGet ( assignLhsChild , n , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , n , parent ) ) { return false ; } return false ; }
Distance : 19

113
Tree	{ if ( ! isGet . isGet ( isGet , n ) ) { return false ; } return false ; }
Code	{ if ( ! isGet . isGet ( isGet , n ) ) { return false ; } return false ; }
Distance : 20

114
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent ) ) { return true ; } return false ; }
Distance : 18

115
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } false }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } false }
Distance : 18

116
Tree	{ if ( assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 15

117
Tree	{ if ( ! assignLhsChild . isGet ( isGet , false ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( isGet , false ) ) { return true ; } return false ; }
Distance : 18

118
Tree	{ if ( isGet != null ) { return true ; } return false ( isGet , n . ; ( parent ) ) ; }
Code	{ if ( isGet != null ) { return true ; } return false ( isGet , n . ; ( parent ) ) ; }
Distance : 8

119
Tree	{ if ( isGet . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( isGet . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 16

120
Tree	{ if ( isGet != null ) { return true ; } return false ( isGet , n . parent ( parent ) ) ; }
Code	{ if ( isGet != null ) { return true ; } return false ( isGet , n . parent ( parent ) ) ; }
Distance : 8

121
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild , false ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild , false ) ) { return false ; } return false ; }
Distance : 19

122
Tree	{ if ( isGet != null ) { return true ; } return false ( isGet , n . isGet ( parent ) ) ; }
Code	{ if ( isGet != null ) { return true ; } return false ( isGet , n . isGet ( parent ) ) ; }
Distance : 7

123
Tree	{ if ( ! assignLhsChild . isGet ( isGet ) ) { return true ; } false }
Code	{ if ( ! assignLhsChild . isGet ( isGet ) ) { return true ; } false }
Distance : 18

124
Tree	{ if ( ! isGet . isGet ( isGet ) ) { return false ; } assertFalse }
Code	{ if ( ! isGet . isGet ( isGet ) ) { return false ; } assertFalse }
Distance : 20

125
Tree	{ if ( ! isGet . isGet ( isGet ) ) { return true ; } super }
Code	{ if ( ! isGet . isGet ( isGet ) ) { return true ; } super }
Distance : 19

126
Tree	{ if ( ! isGet ( assignLhsChild , n , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , n , parent ) ) { return true ; } return false ; }
Distance : 18

127
Tree	{ if ( ! != ( this , isGet ) ) { return true ; } return false ; }
Code	{ if ( ! != ( this , isGet ) ) { return true ; } return false ; }
Distance : 16

128
Tree	{ if ( ! isGet . isGet ( isGet ) ) { return false ; } return false ; }
Code	{ if ( ! isGet . isGet ( isGet ) ) { return false ; } return false ; }
Distance : 18

129
Tree	{ if ( isGet != null ) { return true ; } return false ( isGet , n . ; ( n ) ) ; }
Code	{ if ( isGet != null ) { return true ; } return false ( isGet , n . ; ( n ) ) ; }
Distance : 9

130
Tree	{ if ( ! parent ( isGet , parent ) ) { return false ; } return false ; }
Code	{ if ( ! parent ( isGet , parent ) ) { return false ; } return false ; }
Distance : 18

131
Tree	{ if ( ! NodeUtil . isGet ( isGet , false ) ) { return false ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( isGet , false ) ) { return false ; } return false ; }
Distance : 20

132
Tree	{ if ( ! parent ( this , isGet ) ) { return false ; } return false ; }
Code	{ if ( ! parent ( this , isGet ) ) { return false ; } return false ; }
Distance : 18

133
Tree	{ if ( assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Distance : 16

134
Tree	{ if ( ! parent ( isGet , n ) ) { return false ; } return false ; }
Code	{ if ( ! parent ( isGet , n ) ) { return false ; } return false ; }
Distance : 18

135
Tree	{ if ( ! parent ( isGet ) ) { return false ; } return false ; }
Code	{ if ( ! parent ( isGet ) ) { return false ; } return false ; }
Distance : 16

136
Tree	{ if ( ! isGet . null ( isGet , false ) ) { return false ; } return false ; }
Code	{ if ( ! isGet . null ( isGet , false ) ) { return false ; } return false ; }
Distance : 19

137
Tree	{ if ( ! isGet ( isGet , parent , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( isGet , parent , parent ) ) { return false ; } return false ; }
Distance : 19

138
Tree	{ if ( isGet != null ) { return true ; } return false ( assignLhsChild , n . ; ( parent ) ) ; }
Code	{ if ( isGet != null ) { return true ; } return false ( assignLhsChild , n . ; ( parent ) ) ; }
Distance : 8

139
Tree	{ if ( isGet != null ) { return true ; } return NodeUtil ( isGet , n . ; ( parent ) ) ; }
Code	{ if ( isGet != null ) { return true ; } return NodeUtil ( isGet , n . ; ( parent ) ) ; }
Distance : 8

140
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild , false ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild , false ) ) { return true ; } return false ; }
Distance : 18

141
Tree	{ if ( ! isGet ( isGet , n , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( isGet , n , parent ) ) { return false ; } return false ; }
Distance : 19

142
Tree	{ if ( isGet != null ) { return true ; } return false ; }
Code	{ if ( isGet != null ) { return true ; } return false ; }
Distance : 11

143
Tree	{ if ( ! != ( this , isGet ) ) { return false ; } return false ; }
Code	{ if ( ! != ( this , isGet ) ) { return false ; } return false ; }
Distance : 17

144
Tree	{ if ( isGet != null ) { return false ; } return false ( isGet , n . ; ( parent ) ) ; }
Code	{ if ( isGet != null ) { return false ; } return false ( isGet , n . ; ( parent ) ) ; }
Distance : 9

145
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ( isGet , n . ; ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return false ( isGet , n . ; ( parent ) ) ; }
Distance : 7

146
Tree	{ if ( ! != ( isGet ) ) { return false ; } return false ; }
Code	{ if ( ! != ( isGet ) ) { return false ; } return false ; }
Distance : 15

147
Tree	{ if ( isGet != null ) { return false ; } return false ; }
Code	{ if ( isGet != null ) { return false ; } return false ; }
Distance : 12

148
Tree	{ if ( ! parent ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! parent ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 15

149
Tree	{ if ( ! NodeUtil ( isGet ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil ( isGet ) ) { return true ; } return false ; }
Distance : 15

150
Tree	{ if ( ! isGet ( this , isGet ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( this , isGet ) ) { return true ; } return false ; }
Distance : 17

151
Tree	{ if ( ! isGet ( isGet , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( isGet , parent ) ) { return false ; } return false ; }
Distance : 18

152
Tree	{ if ( ! isGet ( this , isGet ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( this , isGet ) ) { return false ; } return false ; }
Distance : 18

153
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; }
Distance : 10

154
Tree	{ if ( ! isGet ( isGet , n ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( isGet , n ) ) { return false ; } return false ; }
Distance : 18

155
Tree	{ if ( ! isGet ( isGet , parent , parent , parent . ; ( isGet ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( isGet , parent , parent , parent . ; ( isGet ) ) ) { return true ; } return false ; }
Distance : 23

156
Tree	{ if ( ! isGet ) { return true ; } return false ; }
Code	{ if ( ! isGet ) { return true ; } return false ; }
Distance : 13

157
Tree	{ if ( ! isGet ( isGet , parent , parent , parent . false ( isGet ) ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( isGet , parent , parent , parent . false ( isGet ) ) ) { return false ; } return false ; }
Distance : 24

158
Tree	{ if ( isGet != null ) { return true ; } return false ( isGet , n . parent ( n ) ) ; }
Code	{ if ( isGet != null ) { return true ; } return false ( isGet , n . parent ( n ) ) ; }
Distance : 9

159
Tree	{ if ( assignLhsChild != null ) { return false ; } return false ; }
Code	{ if ( assignLhsChild != null ) { return false ; } return false ; }
Distance : 11

160
Tree	{ if ( ! assignLhsChild ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return false ; }
Distance : 13

161
Tree	{ if ( ! isGet ( isGet ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( isGet ) ) { return false ; } return false ; }
Distance : 16

162
Tree	{ if ( ! isGet ( isGet , parent , parent , n . false ( isGet ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( isGet , parent , parent , n . false ( isGet ) ) ) { return true ; } return false ; }
Distance : 24

163
Tree	{ if ( ! isGet ( isGet , n , parent , parent . ; ( isGet ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( isGet , n , parent , parent . ; ( isGet ) ) ) { return true ; } return false ; }
Distance : 23

164
Tree	{ if ( ! n ) { return false ; } return false ; }
Code	{ if ( ! n ) { return false ; } return false ; }
Distance : 14

165
Tree	{ if ( isGet != null ) { return true ; } return false ( assignLhsChild , n . parent ( parent ) ) ; }
Code	{ if ( isGet != null ) { return true ; } return false ( assignLhsChild , n . parent ( parent ) ) ; }
Distance : 8

166
Tree	{ if ( NodeUtil != null ) { return true ; } return false ; }
Code	{ if ( NodeUtil != null ) { return true ; } return false ; }
Distance : 11

167
Tree	{ if ( ! isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 15

168
Tree	{ if ( parent != null ) { return true ; } return false ; }
Code	{ if ( parent != null ) { return true ; } return false ; }
Distance : 11

169
Tree	{ if ( ! isGet ( isGet , parent , parent , parent . isGet ( isGet ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( isGet , parent , parent , parent . isGet ( isGet ) ) ) { return true ; } return false ; }
Distance : 24

170
Tree	{ if ( ! isGet ( isGet , parent , parent , n . ; ( isGet ) ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( isGet , parent , parent , n . ; ( isGet ) ) ) { return false ; } return false ; }
Distance : 23

171
Tree	{ if ( ! isGet ( isGet , n , parent , parent . ; ( isGet ) ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( isGet , n , parent , parent . ; ( isGet ) ) ) { return false ; } return false ; }
Distance : 23

172
Tree	{ if ( ! isGet ( isGet , parent , parent , parent . false ( false ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( isGet , parent , parent , parent . false ( false ) ) ) { return true ; } return false ; }
Distance : 24

173
Tree	{ if ( ! isGet ( isGet , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( isGet , parent ) ) { return true ; } return false ; }
Distance : 17

174
Tree	{ if ( ! assignLhsChild ) { return true ; } return false ( n , n . ; ( parent ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return false ( n , n . ; ( parent ) ) ; }
Distance : 10

175
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; }
Distance : 17

176
Tree	{ if ( ! isGet ( isGet , parent , parent , parent . isGet ( isGet ) ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( isGet , parent , parent , parent . isGet ( isGet ) ) ) { return false ; } return false ; }
Distance : 24

177
Tree	{ if ( ! isGet ) { return false ; } return false ; }
Code	{ if ( ! isGet ) { return false ; } return false ; }
Distance : 14

178
Tree	{ if ( ! isGet ( isGet , parent , parent , n . isGet ( isGet ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( isGet , parent , parent , n . isGet ( isGet ) ) ) { return true ; } return false ; }
Distance : 24

179
Tree	{ if ( ! NodeUtil ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil ) { return true ; } return false ; }
Distance : 13

180
Tree	{ if ( ! isGet ( isGet , n ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( isGet , n ) ) { return true ; } return false ; }
Distance : 17

181
Tree	{ if ( ! isGet ) { return true ; } return false ( n , n . parent ( n ) ) ; }
Code	{ if ( ! isGet ) { return true ; } return false ( n , n . parent ( n ) ) ; }
Distance : 11

182
Tree	{ if ( ! isGet ) { return true ; } return NodeUtil ( n , n . ; ( parent ) ) ; }
Code	{ if ( ! isGet ) { return true ; } return NodeUtil ( n , n . ; ( parent ) ) ; }
Distance : 10

183
Tree	{ if ( ! isGet ) { return true ; } return n ( n , n . ; ( parent ) ) ; }
Code	{ if ( ! isGet ) { return true ; } return n ( n , n . ; ( parent ) ) ; }
Distance : 10

184
Tree	{ if ( ! isGet ) { return true ; } return false ( parent () , n . false ( parent ) ) ; }
Code	{ if ( ! isGet ) { return true ; } return false ( parent () , n . false ( parent ) ) ; }
Distance : 11

185
Tree	{ if ( ! isGet ( isGet , parent ) ) { return true ; } return n . false ( isGet ) ; }
Code	{ if ( ! isGet ( isGet , parent ) ) { return true ; } return n . false ( isGet ) ; }
Distance : 14

186
Tree	{ if ( ! isGet ) { return true ; } return false ( parent () , n . false ( n ) ) ; }
Code	{ if ( ! isGet ) { return true ; } return false ( parent () , n . false ( n ) ) ; }
Distance : 12

187
Tree	{ if ( ! isGet ( isGet , parent ) ) { return false ; } return n . isGet ( isGet ) ; }
Code	{ if ( ! isGet ( isGet , parent ) ) { return false ; } return n . isGet ( isGet ) ; }
Distance : 14

188
Tree	{ if ( ! isGet ) { return true ; } return false ( parent () , n . isGet ( parent ) ) ; }
Code	{ if ( ! isGet ) { return true ; } return false ( parent () , n . isGet ( parent ) ) ; }
Distance : 10

189
Tree	{ if ( ! isGet ) { return true ; } return false ( parent () , n . isGet ( n ) ) ; }
Code	{ if ( ! isGet ) { return true ; } return false ( parent () , n . isGet ( n ) ) ; }
Distance : 11

190
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return n . false ( isGet ) ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return n . false ( isGet ) ; }
Distance : 14

191
Tree	{ if ( ! isGet ( isGet , n ) ) { return true ; } return n . false ( isGet ) ; }
Code	{ if ( ! isGet ( isGet , n ) ) { return true ; } return n . false ( isGet ) ; }
Distance : 14

192
Tree	{ if ( ! isGet ) { return true ; } return false ( parent () , NodeUtil . false ( parent ) ) ; }
Code	{ if ( ! isGet ) { return true ; } return false ( parent () , NodeUtil . false ( parent ) ) ; }
Distance : 10

193
Tree	{ if ( ! isGet ) { return true ; } return false ( false () , n . ; ( parent ) ) ; }
Code	{ if ( ! isGet ) { return true ; } return false ( false () , n . ; ( parent ) ) ; }
Distance : 11

194
Tree	{ if ( ! isGet ( isGet , parent ) ) { return true ; } return NodeUtil . false ( isGet ) ; }
Code	{ if ( ! isGet ( isGet , parent ) ) { return true ; } return NodeUtil . false ( isGet ) ; }
Distance : 13

195
Tree	{ if ( ! isGet ) { return true ; } return false ( false () , n . ; ( n ) ) ; }
Code	{ if ( ! isGet ) { return true ; } return false ( false () , n . ; ( n ) ) ; }
Distance : 12

196
Tree	{ if ( ! isGet ( isGet , n ) ) { return false ; } return n . isGet ( isGet ) ; }
Code	{ if ( ! isGet ( isGet , n ) ) { return false ; } return n . isGet ( isGet ) ; }
Distance : 14

197
Tree	{ if ( ! isGet ) { return true ; } return false ( parent () , NodeUtil . false ( n ) ) ; }
Code	{ if ( ! isGet ) { return true ; } return false ( parent () , NodeUtil . false ( n ) ) ; }
Distance : 11

198
Tree	{ if ( ! isGet ) { return true ; } return false ( parent () , parent . ; ( parent ) ) ; }
Code	{ if ( ! isGet ) { return true ; } return false ( parent () , parent . ; ( parent ) ) ; }
Distance : 11

199
Tree	{ if ( ! assignLhsChild ) { return true ; } return false ( parent () , n . false ( parent ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return false ( parent () , n . false ( parent ) ) ; }
Distance : 11

========================================================================


========================================================================
Example Number: 14
Parent Code is: 
int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Child code is: 
int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=indexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=lastIndexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/93/parent/src_com_google_javascript_jscomp_ProcessClosurePrimitives.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	int Node.IS_NAMESPACE = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int Node.IS_NAMESPACE = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

1
Tree	int minimumModule = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int minimumModule = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

2
Tree	char namespace [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	char namespace [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

3
Tree	int explicitNode = null ;
Code	int explicitNode = null ;
Distance : 7

4
Tree	final int explicitNode = namespace . indexOf ( CHAR_CONS ) ;
Code	final int explicitNode = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

5
Tree	int Node.IS_NAMESPACE = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int Node.IS_NAMESPACE = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

6
Tree	int minimumModule = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int minimumModule = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

7
Tree	final int Node.IS_NAMESPACE = namespace . indexOf ( CHAR_CONS ) ;
Code	final int Node.IS_NAMESPACE = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

8
Tree	int Node.IS_NAMESPACE = null ;
Code	int Node.IS_NAMESPACE = null ;
Distance : 7

9
Tree	int addChildToFront [] = indexOf () ;
Code	int addChildToFront [] = indexOf () ;
Distance : 8

10
Tree	int candidateDefinition = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int candidateDefinition = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

11
Tree	int Token.VAR = NUMBER_CONSTANT ;
Code	int Token.VAR = NUMBER_CONSTANT ;
Distance : 7

12
Tree	int getJSDocInfo = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int getJSDocInfo = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

13
Tree	final int candidateDefinition = namespace . indexOf ( CHAR_CONS ) ;
Code	final int candidateDefinition = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

14
Tree	int explicitNode = this . namespace ;
Code	int explicitNode = this . namespace ;
Distance : 6

15
Tree	int detachFromParent = NUMBER_CONSTANT ;
Code	int detachFromParent = NUMBER_CONSTANT ;
Distance : 7

16
Tree	int getJSDocInfo = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int getJSDocInfo = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

17
Tree	final int minimumModule = namespace . indexOf ( CHAR_CONS ) ;
Code	final int minimumModule = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

18
Tree	int copyInformationFrom = NUMBER_CONSTANT ;
Code	int copyInformationFrom = NUMBER_CONSTANT ;
Distance : 7

19
Tree	int addChildToFront = null ;
Code	int addChildToFront = null ;
Distance : 7

20
Tree	int explicitNode = namespace . indexOf ( this , assignNode , indexOf () , Node.IS_NAMESPACE ) ;
Code	int explicitNode = namespace . indexOf ( this , assignNode , indexOf () , Node.IS_NAMESPACE ) ;
Distance : 10

21
Tree	int explicitNode = namespace . indexOf ( this , replace , indexOf () , Node.IS_NAMESPACE ) ;
Code	int explicitNode = namespace . indexOf ( this , replace , indexOf () , Node.IS_NAMESPACE ) ;
Distance : 10

22
Tree	int explicitNode = namespace . indexOf ( this , compiler , indexOf () , Node.IS_NAMESPACE ) ;
Code	int explicitNode = namespace . indexOf ( this , compiler , indexOf () , Node.IS_NAMESPACE ) ;
Distance : 10

23
Tree	int minimumModule = namespace . indexOf ( this , assignNode , indexOf () , Node.IS_NAMESPACE ) ;
Code	int minimumModule = namespace . indexOf ( this , assignNode , indexOf () , Node.IS_NAMESPACE ) ;
Distance : 10

24
Tree	int Node.IS_NAMESPACE = namespace . indexOf ( this , assignNode , indexOf () , Node.IS_NAMESPACE ) ;
Code	int Node.IS_NAMESPACE = namespace . indexOf ( this , assignNode , indexOf () , Node.IS_NAMESPACE ) ;
Distance : 10

25
Tree	int Node.IS_NAMESPACE = namespace . indexOf ( this , replace , indexOf () , Node.IS_NAMESPACE ) ;
Code	int Node.IS_NAMESPACE = namespace . indexOf ( this , replace , indexOf () , Node.IS_NAMESPACE ) ;
Distance : 10

26
Tree	int minimumModule = namespace . indexOf ( this , replace , indexOf () , Node.IS_NAMESPACE ) ;
Code	int minimumModule = namespace . indexOf ( this , replace , indexOf () , Node.IS_NAMESPACE ) ;
Distance : 10

27
Tree	int Node.IS_NAMESPACE = namespace . indexOf ( this , compiler , indexOf () , Node.IS_NAMESPACE ) ;
Code	int Node.IS_NAMESPACE = namespace . indexOf ( this , compiler , indexOf () , Node.IS_NAMESPACE ) ;
Distance : 10

28
Tree	int minimumModule = namespace . indexOf ( this , compiler , indexOf () , Node.IS_NAMESPACE ) ;
Code	int minimumModule = namespace . indexOf ( this , compiler , indexOf () , Node.IS_NAMESPACE ) ;
Distance : 10

29
Tree	int explicitNode = namespace . indexOf ( this , substring , indexOf () , Node.IS_NAMESPACE ) ;
Code	int explicitNode = namespace . indexOf ( this , substring , indexOf () , Node.IS_NAMESPACE ) ;
Distance : 10

30
Tree	int copyInformationFrom = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int copyInformationFrom = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

31
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 6

32
Tree	public int explicitNode = namespace . indexOf ( CHAR_CONS ) ;
Code	public int explicitNode = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

33
Tree	int detachFromParent = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int detachFromParent = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

34
Tree	final int getJSDocInfo = namespace . indexOf ( CHAR_CONS ) ;
Code	final int getJSDocInfo = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

35
Tree	int copyInformationFrom = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int copyInformationFrom = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

36
Tree	int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

37
Tree	int Token.VAR = null ;
Code	int Token.VAR = null ;
Distance : 7

38
Tree	int addChildToFront = namespace ;
Code	int addChildToFront = namespace ;
Distance : 6

39
Tree	int getJSDocInfo = false ;
Code	int getJSDocInfo = false ;
Distance : 7

40
Tree	final int Node.IS_NAMESPACE = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int Node.IS_NAMESPACE = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

41
Tree	long namespace [] = namespace . indexOf ( CHAR_CONS ) ;
Code	long namespace [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 4

42
Tree	int getJSDocInfo = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int getJSDocInfo = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

43
Tree	int Token.VAR = namespace ;
Code	int Token.VAR = namespace ;
Distance : 6

44
Tree	int candidateDefinition = namespace ;
Code	int candidateDefinition = namespace ;
Distance : 6

45
Tree	int explicitNode = namespace . indexOf ( CHAR_CONS ) ;
Code	int explicitNode = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

46
Tree	long namespace [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	long namespace [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

47
Tree	int Token.VAR = false ;
Code	int Token.VAR = false ;
Distance : 7

48
Tree	int Token.VAR = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int Token.VAR = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

49
Tree	int Node.IS_NAMESPACE = namespace . indexOf ( CHAR_CONS ) ;
Code	int Node.IS_NAMESPACE = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

50
Tree	int minimumModule = namespace . indexOf ( CHAR_CONS ) ;
Code	int minimumModule = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

51
Tree	boolean namespace [] = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean namespace [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 4

52
Tree	int minimumModule = null ;
Code	int minimumModule = null ;
Distance : 7

53
Tree	int addChildToFront = this . namespace ;
Code	int addChildToFront = this . namespace ;
Distance : 6

54
Tree	int minimumModule [] = indexOf () ;
Code	int minimumModule [] = indexOf () ;
Distance : 8

55
Tree	double namespace [] = namespace . indexOf ( CHAR_CONS ) ;
Code	double namespace [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 4

56
Tree	int explicitNode = namespace ;
Code	int explicitNode = namespace ;
Distance : 6

57
Tree	int detachFromParent = namespace ;
Code	int detachFromParent = namespace ;
Distance : 6

58
Tree	int detachFromParent = false ;
Code	int detachFromParent = false ;
Distance : 7

59
Tree	int explicitNode = false ;
Code	int explicitNode = false ;
Distance : 7

60
Tree	boolean namespace [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	boolean namespace [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

61
Tree	int explicitNode = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int explicitNode = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

62
Tree	int copyInformationFrom = namespace ;
Code	int copyInformationFrom = namespace ;
Distance : 6

63
Tree	int addChildToFront = NUMBER_CONSTANT ;
Code	int addChildToFront = NUMBER_CONSTANT ;
Distance : 7

64
Tree	int detachFromParent = namespace . indexOf ( CHAR_CONS ) ;
Code	int detachFromParent = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

65
Tree	byte namespace [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	byte namespace [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

66
Tree	int Node.IS_NAMESPACE [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int Node.IS_NAMESPACE [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

67
Tree	int detachFromParent ;
Code	int detachFromParent ;
Distance : 8

68
Tree	int copyInformationFrom = namespace . indexOf ( CHAR_CONS ) ;
Code	int copyInformationFrom = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

69
Tree	int explicitNode = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int explicitNode = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

70
Tree	int explicitNode [] = indexOf () ;
Code	int explicitNode [] = indexOf () ;
Distance : 8

71
Tree	int Node.IS_NAMESPACE [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int Node.IS_NAMESPACE [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

72
Tree	int Node.IS_NAMESPACE = NUMBER_CONSTANT ;
Code	int Node.IS_NAMESPACE = NUMBER_CONSTANT ;
Distance : 7

73
Tree	int candidateDefinition = NUMBER_CONSTANT ;
Code	int candidateDefinition = NUMBER_CONSTANT ;
Distance : 7

74
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

75
Tree	int copyInformationFrom ;
Code	int copyInformationFrom ;
Distance : 8

76
Tree	int minimumModule = NUMBER_CONSTANT ;
Code	int minimumModule = NUMBER_CONSTANT ;
Distance : 7

77
Tree	int addChildToFront ;
Code	int addChildToFront ;
Distance : 8

78
Tree	double namespace [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	double namespace [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

79
Tree	int indexOfDot ;
Code	int indexOfDot ;
Distance : 7

80
Tree	int getJSDocInfo = NUMBER_CONSTANT ;
Code	int getJSDocInfo = NUMBER_CONSTANT ;
Distance : 7

81
Tree	int Node.IS_NAMESPACE = namespace ;
Code	int Node.IS_NAMESPACE = namespace ;
Distance : 6

82
Tree	int minimumModule [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int minimumModule [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

83
Tree	int explicitNode ;
Code	int explicitNode ;
Distance : 8

84
Tree	int candidateDefinition = namespace . indexOf ( compiler , null ) ;
Code	int candidateDefinition = namespace . indexOf ( compiler , null ) ;
Distance : 5

85
Tree	int minimumModule = namespace ;
Code	int minimumModule = namespace ;
Distance : 6

86
Tree	int candidateDefinition ;
Code	int candidateDefinition ;
Distance : 8

87
Tree	byte namespace [] = indexOf () ;
Code	byte namespace [] = indexOf () ;
Distance : 8

88
Tree	int explicitNode [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int explicitNode [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

89
Tree	int explicitNode = NUMBER_CONSTANT ;
Code	int explicitNode = NUMBER_CONSTANT ;
Distance : 7

90
Tree	int Token.VAR [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int Token.VAR [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

91
Tree	int explicitNode = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int explicitNode = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

92
Tree	int addChildToFront = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int addChildToFront = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

93
Tree	int addChildToFront = false ;
Code	int addChildToFront = false ;
Distance : 7

94
Tree	int addChildToFront = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int addChildToFront = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

95
Tree	int explicitNode = namespace . indexOf ( this , replace , NUMBER_CONSTANT ) ;
Code	int explicitNode = namespace . indexOf ( this , replace , NUMBER_CONSTANT ) ;
Distance : 7

96
Tree	int candidateDefinition = false ;
Code	int candidateDefinition = false ;
Distance : 7

97
Tree	int explicitNode = namespace . indexOf ( this , compiler , NUMBER_CONSTANT ) ;
Code	int explicitNode = namespace . indexOf ( this , compiler , NUMBER_CONSTANT ) ;
Distance : 7

98
Tree	int Token.VAR = this . namespace ;
Code	int Token.VAR = this . namespace ;
Distance : 6

99
Tree	int Node.IS_NAMESPACE = namespace . indexOf ( compiler , null ) ;
Code	int Node.IS_NAMESPACE = namespace . indexOf ( compiler , null ) ;
Distance : 5

100
Tree	int minimumModule = namespace . indexOf ( this , assignNode , NUMBER_CONSTANT ) ;
Code	int minimumModule = namespace . indexOf ( this , assignNode , NUMBER_CONSTANT ) ;
Distance : 7

101
Tree	int candidateDefinition = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int candidateDefinition = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

102
Tree	int Node.IS_NAMESPACE = namespace . indexOf ( this , assignNode , NUMBER_CONSTANT ) ;
Code	int Node.IS_NAMESPACE = namespace . indexOf ( this , assignNode , NUMBER_CONSTANT ) ;
Distance : 7

103
Tree	int Token.VAR [] = indexOf () ;
Code	int Token.VAR [] = indexOf () ;
Distance : 8

104
Tree	int minimumModule = namespace . indexOf ( compiler , null ) ;
Code	int minimumModule = namespace . indexOf ( compiler , null ) ;
Distance : 5

105
Tree	int candidateDefinition = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int candidateDefinition = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

106
Tree	final int addChildToFront = namespace . indexOf ( CHAR_CONS ) ;
Code	final int addChildToFront = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

107
Tree	int Node.IS_NAMESPACE = false ;
Code	int Node.IS_NAMESPACE = false ;
Distance : 7

108
Tree	int detachFromParent = this . namespace ;
Code	int detachFromParent = this . namespace ;
Distance : 6

109
Tree	public int Node.IS_NAMESPACE = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	public int Node.IS_NAMESPACE = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

110
Tree	int minimumModule = false ;
Code	int minimumModule = false ;
Distance : 7

111
Tree	int Node.IS_NAMESPACE = namespace . indexOf ( replace , null ) ;
Code	int Node.IS_NAMESPACE = namespace . indexOf ( replace , null ) ;
Distance : 5

112
Tree	int Node.IS_NAMESPACE = namespace . indexOf ( this , replace , NUMBER_CONSTANT ) ;
Code	int Node.IS_NAMESPACE = namespace . indexOf ( this , replace , NUMBER_CONSTANT ) ;
Distance : 7

113
Tree	int detachFromParent = null ;
Code	int detachFromParent = null ;
Distance : 7

114
Tree	int minimumModule = namespace . indexOf ( replace , null ) ;
Code	int minimumModule = namespace . indexOf ( replace , null ) ;
Distance : 5

115
Tree	char namespace [] = indexOf () ;
Code	char namespace [] = indexOf () ;
Distance : 8

116
Tree	int minimumModule = namespace . indexOf ( this , replace , NUMBER_CONSTANT ) ;
Code	int minimumModule = namespace . indexOf ( this , replace , NUMBER_CONSTANT ) ;
Distance : 7

117
Tree	final int candidateDefinition = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int candidateDefinition = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

118
Tree	public int explicitNode = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	public int explicitNode = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

119
Tree	public int minimumModule = namespace . indexOf ( CHAR_CONS ) ;
Code	public int minimumModule = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

120
Tree	final int explicitNode = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int explicitNode = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

121
Tree	int getJSDocInfo ;
Code	int getJSDocInfo ;
Distance : 8

122
Tree	int explicitNode [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int explicitNode [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

123
Tree	int addChildToFront [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int addChildToFront [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

124
Tree	int minimumModule [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int minimumModule [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

125
Tree	int copyInformationFrom = this . namespace ;
Code	int copyInformationFrom = this . namespace ;
Distance : 6

126
Tree	int explicitNode = namespace . indexOf ( replace , null ) ;
Code	int explicitNode = namespace . indexOf ( replace , null ) ;
Distance : 5

127
Tree	char namespace [] = namespace . indexOf ( CHAR_CONS ) ;
Code	char namespace [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 4

128
Tree	int Node.IS_NAMESPACE [] = indexOf () ;
Code	int Node.IS_NAMESPACE [] = indexOf () ;
Distance : 8

129
Tree	final int getJSDocInfo = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int getJSDocInfo = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

130
Tree	long namespace [] = indexOf () ;
Code	long namespace [] = indexOf () ;
Distance : 8

131
Tree	int Node.IS_NAMESPACE = namespace . indexOf ( this , compiler , NUMBER_CONSTANT ) ;
Code	int Node.IS_NAMESPACE = namespace . indexOf ( this , compiler , NUMBER_CONSTANT ) ;
Distance : 7

132
Tree	int Node.IS_NAMESPACE ;
Code	int Node.IS_NAMESPACE ;
Distance : 8

133
Tree	int explicitNode = namespace . indexOf ( this , assignNode , NUMBER_CONSTANT ) ;
Code	int explicitNode = namespace . indexOf ( this , assignNode , NUMBER_CONSTANT ) ;
Distance : 7

134
Tree	int explicitNode = namespace . indexOf ( lastIndexOf , null ) ;
Code	int explicitNode = namespace . indexOf ( lastIndexOf , null ) ;
Distance : 5

135
Tree	int Token.VAR ;
Code	int Token.VAR ;
Distance : 8

136
Tree	int addChildToFront [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int addChildToFront [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

137
Tree	int Token.VAR [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int Token.VAR [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

138
Tree	int minimumModule ;
Code	int minimumModule ;
Distance : 8

139
Tree	int Node.IS_NAMESPACE = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int Node.IS_NAMESPACE = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

140
Tree	int addChildToFront = namespace . indexOf ( CHAR_CONS ) ;
Code	int addChildToFront = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

141
Tree	int minimumModule = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int minimumModule = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

142
Tree	int minimumModule = namespace . indexOf ( this , compiler , NUMBER_CONSTANT ) ;
Code	int minimumModule = namespace . indexOf ( this , compiler , NUMBER_CONSTANT ) ;
Distance : 7

143
Tree	int getJSDocInfo = namespace ;
Code	int getJSDocInfo = namespace ;
Distance : 6

144
Tree	int copyInformationFrom = null ;
Code	int copyInformationFrom = null ;
Distance : 7

145
Tree	int explicitNode = namespace . indexOf ( this , substring , NUMBER_CONSTANT ) ;
Code	int explicitNode = namespace . indexOf ( this , substring , NUMBER_CONSTANT ) ;
Distance : 7

146
Tree	int addChildToFront = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int addChildToFront = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

147
Tree	int indexOfDot = NUMBER_CONSTANT ;
Code	int indexOfDot = NUMBER_CONSTANT ;
Distance : 6

148
Tree	int indexOfDot = this . namespace ;
Code	int indexOfDot = this . namespace ;
Distance : 5

149
Tree	final int minimumModule = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int minimumModule = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

150
Tree	int Token.VAR = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int Token.VAR = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

151
Tree	int candidateDefinition = namespace . indexOf ( CHAR_CONS ) ;
Code	int candidateDefinition = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

152
Tree	int indexOfDot = namespace ;
Code	int indexOfDot = namespace ;
Distance : 5

153
Tree	int indexOfDot = null ;
Code	int indexOfDot = null ;
Distance : 6

154
Tree	int detachFromParent = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int detachFromParent = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

155
Tree	int candidateDefinition = null ;
Code	int candidateDefinition = null ;
Distance : 7

156
Tree	int explicitNode = namespace . indexOf ( assignNode , null ) ;
Code	int explicitNode = namespace . indexOf ( assignNode , null ) ;
Distance : 5

157
Tree	public int minimumModule = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	public int minimumModule = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

158
Tree	int getJSDocInfo = namespace . indexOf ( CHAR_CONS ) ;
Code	int getJSDocInfo = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

159
Tree	final int Token.VAR = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int Token.VAR = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

160
Tree	int Node.IS_NAMESPACE = this . namespace ;
Code	int Node.IS_NAMESPACE = this . namespace ;
Distance : 6

161
Tree	int copyInformationFrom = false ;
Code	int copyInformationFrom = false ;
Distance : 7

162
Tree	int indexOfDot = false ;
Code	int indexOfDot = false ;
Distance : 6

163
Tree	int addChildToFront = namespace . indexOf ( compiler , null ) ;
Code	int addChildToFront = namespace . indexOf ( compiler , null ) ;
Distance : 5

164
Tree	boolean namespace [] = indexOf () ;
Code	boolean namespace [] = indexOf () ;
Distance : 8

165
Tree	int explicitNode = namespace . indexOf ( this , assignNode , namespace . indexOf ( STRING_CONSTANT ) , Token.VAR ) ;
Code	int explicitNode = namespace . indexOf ( this , assignNode , namespace . indexOf ( STRING_CONSTANT ) , Token.VAR ) ;
Distance : 14

166
Tree	int explicitNode = namespace . indexOf ( this , assignNode , namespace . indexOf ( STRING_CONSTANT ) , Node.IS_NAMESPACE ) ;
Code	int explicitNode = namespace . indexOf ( this , assignNode , namespace . indexOf ( STRING_CONSTANT ) , Node.IS_NAMESPACE ) ;
Distance : 14

167
Tree	int Token.VAR = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int Token.VAR = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

168
Tree	int explicitNode = namespace . indexOf ( this , replace , namespace . indexOf ( STRING_CONSTANT ) , Token.VAR ) ;
Code	int explicitNode = namespace . indexOf ( this , replace , namespace . indexOf ( STRING_CONSTANT ) , Token.VAR ) ;
Distance : 14

169
Tree	int copyInformationFrom = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int copyInformationFrom = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

170
Tree	int explicitNode = namespace . indexOf ( this , replace , namespace . indexOf ( STRING_CONSTANT ) , Node.IS_NAMESPACE ) ;
Code	int explicitNode = namespace . indexOf ( this , replace , namespace . indexOf ( STRING_CONSTANT ) , Node.IS_NAMESPACE ) ;
Distance : 14

171
Tree	int detachFromParent = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int detachFromParent = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

172
Tree	int explicitNode = namespace . indexOf ( this , compiler , namespace . indexOf ( STRING_CONSTANT ) , Token.VAR ) ;
Code	int explicitNode = namespace . indexOf ( this , compiler , namespace . indexOf ( STRING_CONSTANT ) , Token.VAR ) ;
Distance : 14

173
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 4

174
Tree	int explicitNode = namespace . indexOf ( this , compiler , namespace . indexOf ( STRING_CONSTANT ) , Node.IS_NAMESPACE ) ;
Code	int explicitNode = namespace . indexOf ( this , compiler , namespace . indexOf ( STRING_CONSTANT ) , Node.IS_NAMESPACE ) ;
Distance : 14

175
Tree	int minimumModule = namespace . indexOf ( this , assignNode , namespace . indexOf ( STRING_CONSTANT ) , Token.VAR ) ;
Code	int minimumModule = namespace . indexOf ( this , assignNode , namespace . indexOf ( STRING_CONSTANT ) , Token.VAR ) ;
Distance : 14

176
Tree	int explicitNode = indexOf ( assignNode , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Code	int explicitNode = indexOf ( assignNode , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Distance : 13

177
Tree	int minimumModule = indexOf ( assignNode , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Code	int minimumModule = indexOf ( assignNode , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Distance : 13

178
Tree	int minimumModule = this . namespace ;
Code	int minimumModule = this . namespace ;
Distance : 6

179
Tree	int Node.IS_NAMESPACE = indexOf ( assignNode , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Code	int Node.IS_NAMESPACE = indexOf ( assignNode , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Distance : 13

180
Tree	int candidateDefinition = this . namespace ;
Code	int candidateDefinition = this . namespace ;
Distance : 6

181
Tree	int explicitNode = indexOf ( compiler , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Code	int explicitNode = indexOf ( compiler , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Distance : 13

182
Tree	double namespace [] = indexOf () ;
Code	double namespace [] = indexOf () ;
Distance : 8

183
Tree	int Token.VAR = namespace . indexOf ( CHAR_CONS ) ;
Code	int Token.VAR = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

184
Tree	int minimumModule = indexOf ( compiler , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Code	int minimumModule = indexOf ( compiler , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Distance : 13

185
Tree	int Node.IS_NAMESPACE = indexOf ( compiler , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Code	int Node.IS_NAMESPACE = indexOf ( compiler , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Distance : 13

186
Tree	int candidateDefinition = indexOf ( assignNode , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Code	int candidateDefinition = indexOf ( assignNode , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Distance : 13

187
Tree	int Node.IS_NAMESPACE = namespace . indexOf ( this , assignNode , namespace . indexOf ( STRING_CONSTANT ) , Token.VAR ) ;
Code	int Node.IS_NAMESPACE = namespace . indexOf ( this , assignNode , namespace . indexOf ( STRING_CONSTANT ) , Token.VAR ) ;
Distance : 14

188
Tree	int minimumModule = namespace . indexOf ( this , assignNode , namespace . indexOf ( STRING_CONSTANT ) , Node.IS_NAMESPACE ) ;
Code	int minimumModule = namespace . indexOf ( this , assignNode , namespace . indexOf ( STRING_CONSTANT ) , Node.IS_NAMESPACE ) ;
Distance : 14

189
Tree	byte namespace [] = namespace . indexOf ( CHAR_CONS ) ;
Code	byte namespace [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 4

190
Tree	int Node.IS_NAMESPACE = namespace . indexOf ( this , assignNode , namespace . indexOf ( STRING_CONSTANT ) , Node.IS_NAMESPACE ) ;
Code	int Node.IS_NAMESPACE = namespace . indexOf ( this , assignNode , namespace . indexOf ( STRING_CONSTANT ) , Node.IS_NAMESPACE ) ;
Distance : 14

191
Tree	final int Token.VAR = namespace . indexOf ( CHAR_CONS ) ;
Code	final int Token.VAR = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

192
Tree	int getJSDocInfo = null ;
Code	int getJSDocInfo = null ;
Distance : 7

193
Tree	int explicitNode = namespace . indexOf ( compiler , null ) ;
Code	int explicitNode = namespace . indexOf ( compiler , null ) ;
Distance : 5

194
Tree	int getJSDocInfo = this . namespace ;
Code	int getJSDocInfo = this . namespace ;
Distance : 6

195
Tree	int addChildToFront = indexOf ( assignNode , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Code	int addChildToFront = indexOf ( assignNode , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Distance : 13

196
Tree	int explicitNode = indexOf ( replace , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Code	int explicitNode = indexOf ( replace , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Distance : 13

197
Tree	public int Node.IS_NAMESPACE = namespace . indexOf ( CHAR_CONS ) ;
Code	public int Node.IS_NAMESPACE = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

198
Tree	int getJSDocInfo = indexOf ( assignNode , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Code	int getJSDocInfo = indexOf ( assignNode , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Distance : 13

199
Tree	final int addChildToFront = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int addChildToFront = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

========================================================================


========================================================================
Example Number: 15
Parent Code is: 
int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Child code is: 
int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=indexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=lastIndexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/92/parent/src_com_google_javascript_jscomp_ProcessClosurePrimitives.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	int Node.IS_NAMESPACE = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int Node.IS_NAMESPACE = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

1
Tree	int minimumModule = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int minimumModule = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

2
Tree	char namespace [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	char namespace [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

3
Tree	int explicitNode = null ;
Code	int explicitNode = null ;
Distance : 7

4
Tree	final int explicitNode = namespace . indexOf ( CHAR_CONS ) ;
Code	final int explicitNode = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

5
Tree	int Node.IS_NAMESPACE = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int Node.IS_NAMESPACE = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

6
Tree	int minimumModule = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int minimumModule = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

7
Tree	final int Node.IS_NAMESPACE = namespace . indexOf ( CHAR_CONS ) ;
Code	final int Node.IS_NAMESPACE = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

8
Tree	int Node.IS_NAMESPACE = null ;
Code	int Node.IS_NAMESPACE = null ;
Distance : 7

9
Tree	int addChildToFront [] = indexOf () ;
Code	int addChildToFront [] = indexOf () ;
Distance : 8

10
Tree	int candidateDefinition = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int candidateDefinition = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

11
Tree	int Token.VAR = NUMBER_CONSTANT ;
Code	int Token.VAR = NUMBER_CONSTANT ;
Distance : 7

12
Tree	int getJSDocInfo = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int getJSDocInfo = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

13
Tree	final int candidateDefinition = namespace . indexOf ( CHAR_CONS ) ;
Code	final int candidateDefinition = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

14
Tree	int explicitNode = this . namespace ;
Code	int explicitNode = this . namespace ;
Distance : 6

15
Tree	int detachFromParent = NUMBER_CONSTANT ;
Code	int detachFromParent = NUMBER_CONSTANT ;
Distance : 7

16
Tree	int getJSDocInfo = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int getJSDocInfo = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

17
Tree	final int minimumModule = namespace . indexOf ( CHAR_CONS ) ;
Code	final int minimumModule = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

18
Tree	int copyInformationFrom = NUMBER_CONSTANT ;
Code	int copyInformationFrom = NUMBER_CONSTANT ;
Distance : 7

19
Tree	int addChildToFront = null ;
Code	int addChildToFront = null ;
Distance : 7

20
Tree	int explicitNode = namespace . indexOf ( this , assignNode , indexOf () , Node.IS_NAMESPACE ) ;
Code	int explicitNode = namespace . indexOf ( this , assignNode , indexOf () , Node.IS_NAMESPACE ) ;
Distance : 10

21
Tree	int explicitNode = namespace . indexOf ( this , replace , indexOf () , Node.IS_NAMESPACE ) ;
Code	int explicitNode = namespace . indexOf ( this , replace , indexOf () , Node.IS_NAMESPACE ) ;
Distance : 10

22
Tree	int explicitNode = namespace . indexOf ( this , compiler , indexOf () , Node.IS_NAMESPACE ) ;
Code	int explicitNode = namespace . indexOf ( this , compiler , indexOf () , Node.IS_NAMESPACE ) ;
Distance : 10

23
Tree	int minimumModule = namespace . indexOf ( this , assignNode , indexOf () , Node.IS_NAMESPACE ) ;
Code	int minimumModule = namespace . indexOf ( this , assignNode , indexOf () , Node.IS_NAMESPACE ) ;
Distance : 10

24
Tree	int Node.IS_NAMESPACE = namespace . indexOf ( this , assignNode , indexOf () , Node.IS_NAMESPACE ) ;
Code	int Node.IS_NAMESPACE = namespace . indexOf ( this , assignNode , indexOf () , Node.IS_NAMESPACE ) ;
Distance : 10

25
Tree	int Node.IS_NAMESPACE = namespace . indexOf ( this , replace , indexOf () , Node.IS_NAMESPACE ) ;
Code	int Node.IS_NAMESPACE = namespace . indexOf ( this , replace , indexOf () , Node.IS_NAMESPACE ) ;
Distance : 10

26
Tree	int minimumModule = namespace . indexOf ( this , replace , indexOf () , Node.IS_NAMESPACE ) ;
Code	int minimumModule = namespace . indexOf ( this , replace , indexOf () , Node.IS_NAMESPACE ) ;
Distance : 10

27
Tree	int Node.IS_NAMESPACE = namespace . indexOf ( this , compiler , indexOf () , Node.IS_NAMESPACE ) ;
Code	int Node.IS_NAMESPACE = namespace . indexOf ( this , compiler , indexOf () , Node.IS_NAMESPACE ) ;
Distance : 10

28
Tree	int minimumModule = namespace . indexOf ( this , compiler , indexOf () , Node.IS_NAMESPACE ) ;
Code	int minimumModule = namespace . indexOf ( this , compiler , indexOf () , Node.IS_NAMESPACE ) ;
Distance : 10

29
Tree	int explicitNode = namespace . indexOf ( this , substring , indexOf () , Node.IS_NAMESPACE ) ;
Code	int explicitNode = namespace . indexOf ( this , substring , indexOf () , Node.IS_NAMESPACE ) ;
Distance : 10

30
Tree	int copyInformationFrom = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int copyInformationFrom = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

31
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 6

32
Tree	public int explicitNode = namespace . indexOf ( CHAR_CONS ) ;
Code	public int explicitNode = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

33
Tree	int detachFromParent = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int detachFromParent = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

34
Tree	final int getJSDocInfo = namespace . indexOf ( CHAR_CONS ) ;
Code	final int getJSDocInfo = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

35
Tree	int copyInformationFrom = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int copyInformationFrom = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

36
Tree	int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

37
Tree	int Token.VAR = null ;
Code	int Token.VAR = null ;
Distance : 7

38
Tree	int addChildToFront = namespace ;
Code	int addChildToFront = namespace ;
Distance : 6

39
Tree	int getJSDocInfo = false ;
Code	int getJSDocInfo = false ;
Distance : 7

40
Tree	final int Node.IS_NAMESPACE = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int Node.IS_NAMESPACE = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

41
Tree	long namespace [] = namespace . indexOf ( CHAR_CONS ) ;
Code	long namespace [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 4

42
Tree	int getJSDocInfo = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int getJSDocInfo = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

43
Tree	int Token.VAR = namespace ;
Code	int Token.VAR = namespace ;
Distance : 6

44
Tree	int candidateDefinition = namespace ;
Code	int candidateDefinition = namespace ;
Distance : 6

45
Tree	int explicitNode = namespace . indexOf ( CHAR_CONS ) ;
Code	int explicitNode = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

46
Tree	long namespace [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	long namespace [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

47
Tree	int Token.VAR = false ;
Code	int Token.VAR = false ;
Distance : 7

48
Tree	int Token.VAR = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int Token.VAR = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

49
Tree	int Node.IS_NAMESPACE = namespace . indexOf ( CHAR_CONS ) ;
Code	int Node.IS_NAMESPACE = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

50
Tree	int minimumModule = namespace . indexOf ( CHAR_CONS ) ;
Code	int minimumModule = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

51
Tree	boolean namespace [] = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean namespace [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 4

52
Tree	int minimumModule = null ;
Code	int minimumModule = null ;
Distance : 7

53
Tree	int addChildToFront = this . namespace ;
Code	int addChildToFront = this . namespace ;
Distance : 6

54
Tree	int minimumModule [] = indexOf () ;
Code	int minimumModule [] = indexOf () ;
Distance : 8

55
Tree	double namespace [] = namespace . indexOf ( CHAR_CONS ) ;
Code	double namespace [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 4

56
Tree	int explicitNode = namespace ;
Code	int explicitNode = namespace ;
Distance : 6

57
Tree	int detachFromParent = namespace ;
Code	int detachFromParent = namespace ;
Distance : 6

58
Tree	int detachFromParent = false ;
Code	int detachFromParent = false ;
Distance : 7

59
Tree	int explicitNode = false ;
Code	int explicitNode = false ;
Distance : 7

60
Tree	boolean namespace [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	boolean namespace [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

61
Tree	int explicitNode = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int explicitNode = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

62
Tree	int copyInformationFrom = namespace ;
Code	int copyInformationFrom = namespace ;
Distance : 6

63
Tree	int addChildToFront = NUMBER_CONSTANT ;
Code	int addChildToFront = NUMBER_CONSTANT ;
Distance : 7

64
Tree	int detachFromParent = namespace . indexOf ( CHAR_CONS ) ;
Code	int detachFromParent = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

65
Tree	byte namespace [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	byte namespace [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

66
Tree	int Node.IS_NAMESPACE [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int Node.IS_NAMESPACE [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

67
Tree	int detachFromParent ;
Code	int detachFromParent ;
Distance : 8

68
Tree	int copyInformationFrom = namespace . indexOf ( CHAR_CONS ) ;
Code	int copyInformationFrom = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

69
Tree	int explicitNode = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int explicitNode = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

70
Tree	int explicitNode [] = indexOf () ;
Code	int explicitNode [] = indexOf () ;
Distance : 8

71
Tree	int Node.IS_NAMESPACE [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int Node.IS_NAMESPACE [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

72
Tree	int Node.IS_NAMESPACE = NUMBER_CONSTANT ;
Code	int Node.IS_NAMESPACE = NUMBER_CONSTANT ;
Distance : 7

73
Tree	int candidateDefinition = NUMBER_CONSTANT ;
Code	int candidateDefinition = NUMBER_CONSTANT ;
Distance : 7

74
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

75
Tree	int copyInformationFrom ;
Code	int copyInformationFrom ;
Distance : 8

76
Tree	int minimumModule = NUMBER_CONSTANT ;
Code	int minimumModule = NUMBER_CONSTANT ;
Distance : 7

77
Tree	int addChildToFront ;
Code	int addChildToFront ;
Distance : 8

78
Tree	double namespace [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	double namespace [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

79
Tree	int indexOfDot ;
Code	int indexOfDot ;
Distance : 7

80
Tree	int getJSDocInfo = NUMBER_CONSTANT ;
Code	int getJSDocInfo = NUMBER_CONSTANT ;
Distance : 7

81
Tree	int Node.IS_NAMESPACE = namespace ;
Code	int Node.IS_NAMESPACE = namespace ;
Distance : 6

82
Tree	int minimumModule [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int minimumModule [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

83
Tree	int explicitNode ;
Code	int explicitNode ;
Distance : 8

84
Tree	int candidateDefinition = namespace . indexOf ( compiler , null ) ;
Code	int candidateDefinition = namespace . indexOf ( compiler , null ) ;
Distance : 5

85
Tree	int minimumModule = namespace ;
Code	int minimumModule = namespace ;
Distance : 6

86
Tree	int candidateDefinition ;
Code	int candidateDefinition ;
Distance : 8

87
Tree	byte namespace [] = indexOf () ;
Code	byte namespace [] = indexOf () ;
Distance : 8

88
Tree	int explicitNode [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int explicitNode [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

89
Tree	int explicitNode = NUMBER_CONSTANT ;
Code	int explicitNode = NUMBER_CONSTANT ;
Distance : 7

90
Tree	int Token.VAR [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int Token.VAR [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

91
Tree	int explicitNode = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int explicitNode = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

92
Tree	int addChildToFront = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int addChildToFront = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

93
Tree	int addChildToFront = false ;
Code	int addChildToFront = false ;
Distance : 7

94
Tree	int addChildToFront = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int addChildToFront = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

95
Tree	int explicitNode = namespace . indexOf ( this , replace , NUMBER_CONSTANT ) ;
Code	int explicitNode = namespace . indexOf ( this , replace , NUMBER_CONSTANT ) ;
Distance : 7

96
Tree	int candidateDefinition = false ;
Code	int candidateDefinition = false ;
Distance : 7

97
Tree	int explicitNode = namespace . indexOf ( this , compiler , NUMBER_CONSTANT ) ;
Code	int explicitNode = namespace . indexOf ( this , compiler , NUMBER_CONSTANT ) ;
Distance : 7

98
Tree	int Token.VAR = this . namespace ;
Code	int Token.VAR = this . namespace ;
Distance : 6

99
Tree	int Node.IS_NAMESPACE = namespace . indexOf ( compiler , null ) ;
Code	int Node.IS_NAMESPACE = namespace . indexOf ( compiler , null ) ;
Distance : 5

100
Tree	int minimumModule = namespace . indexOf ( this , assignNode , NUMBER_CONSTANT ) ;
Code	int minimumModule = namespace . indexOf ( this , assignNode , NUMBER_CONSTANT ) ;
Distance : 7

101
Tree	int candidateDefinition = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int candidateDefinition = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

102
Tree	int Node.IS_NAMESPACE = namespace . indexOf ( this , assignNode , NUMBER_CONSTANT ) ;
Code	int Node.IS_NAMESPACE = namespace . indexOf ( this , assignNode , NUMBER_CONSTANT ) ;
Distance : 7

103
Tree	int Token.VAR [] = indexOf () ;
Code	int Token.VAR [] = indexOf () ;
Distance : 8

104
Tree	int minimumModule = namespace . indexOf ( compiler , null ) ;
Code	int minimumModule = namespace . indexOf ( compiler , null ) ;
Distance : 5

105
Tree	int candidateDefinition = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int candidateDefinition = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

106
Tree	final int addChildToFront = namespace . indexOf ( CHAR_CONS ) ;
Code	final int addChildToFront = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

107
Tree	int Node.IS_NAMESPACE = false ;
Code	int Node.IS_NAMESPACE = false ;
Distance : 7

108
Tree	int detachFromParent = this . namespace ;
Code	int detachFromParent = this . namespace ;
Distance : 6

109
Tree	public int Node.IS_NAMESPACE = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	public int Node.IS_NAMESPACE = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

110
Tree	int minimumModule = false ;
Code	int minimumModule = false ;
Distance : 7

111
Tree	int Node.IS_NAMESPACE = namespace . indexOf ( replace , null ) ;
Code	int Node.IS_NAMESPACE = namespace . indexOf ( replace , null ) ;
Distance : 5

112
Tree	int Node.IS_NAMESPACE = namespace . indexOf ( this , replace , NUMBER_CONSTANT ) ;
Code	int Node.IS_NAMESPACE = namespace . indexOf ( this , replace , NUMBER_CONSTANT ) ;
Distance : 7

113
Tree	int detachFromParent = null ;
Code	int detachFromParent = null ;
Distance : 7

114
Tree	int minimumModule = namespace . indexOf ( replace , null ) ;
Code	int minimumModule = namespace . indexOf ( replace , null ) ;
Distance : 5

115
Tree	char namespace [] = indexOf () ;
Code	char namespace [] = indexOf () ;
Distance : 8

116
Tree	int minimumModule = namespace . indexOf ( this , replace , NUMBER_CONSTANT ) ;
Code	int minimumModule = namespace . indexOf ( this , replace , NUMBER_CONSTANT ) ;
Distance : 7

117
Tree	final int candidateDefinition = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int candidateDefinition = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

118
Tree	public int explicitNode = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	public int explicitNode = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

119
Tree	public int minimumModule = namespace . indexOf ( CHAR_CONS ) ;
Code	public int minimumModule = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

120
Tree	final int explicitNode = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int explicitNode = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

121
Tree	int getJSDocInfo ;
Code	int getJSDocInfo ;
Distance : 8

122
Tree	int explicitNode [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int explicitNode [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

123
Tree	int addChildToFront [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int addChildToFront [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

124
Tree	int minimumModule [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int minimumModule [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

125
Tree	int copyInformationFrom = this . namespace ;
Code	int copyInformationFrom = this . namespace ;
Distance : 6

126
Tree	int explicitNode = namespace . indexOf ( replace , null ) ;
Code	int explicitNode = namespace . indexOf ( replace , null ) ;
Distance : 5

127
Tree	char namespace [] = namespace . indexOf ( CHAR_CONS ) ;
Code	char namespace [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 4

128
Tree	int Node.IS_NAMESPACE [] = indexOf () ;
Code	int Node.IS_NAMESPACE [] = indexOf () ;
Distance : 8

129
Tree	final int getJSDocInfo = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int getJSDocInfo = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

130
Tree	long namespace [] = indexOf () ;
Code	long namespace [] = indexOf () ;
Distance : 8

131
Tree	int Node.IS_NAMESPACE = namespace . indexOf ( this , compiler , NUMBER_CONSTANT ) ;
Code	int Node.IS_NAMESPACE = namespace . indexOf ( this , compiler , NUMBER_CONSTANT ) ;
Distance : 7

132
Tree	int Node.IS_NAMESPACE ;
Code	int Node.IS_NAMESPACE ;
Distance : 8

133
Tree	int explicitNode = namespace . indexOf ( this , assignNode , NUMBER_CONSTANT ) ;
Code	int explicitNode = namespace . indexOf ( this , assignNode , NUMBER_CONSTANT ) ;
Distance : 7

134
Tree	int explicitNode = namespace . indexOf ( lastIndexOf , null ) ;
Code	int explicitNode = namespace . indexOf ( lastIndexOf , null ) ;
Distance : 5

135
Tree	int Token.VAR ;
Code	int Token.VAR ;
Distance : 8

136
Tree	int addChildToFront [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int addChildToFront [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

137
Tree	int Token.VAR [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int Token.VAR [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

138
Tree	int minimumModule ;
Code	int minimumModule ;
Distance : 8

139
Tree	int Node.IS_NAMESPACE = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int Node.IS_NAMESPACE = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

140
Tree	int addChildToFront = namespace . indexOf ( CHAR_CONS ) ;
Code	int addChildToFront = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

141
Tree	int minimumModule = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int minimumModule = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

142
Tree	int minimumModule = namespace . indexOf ( this , compiler , NUMBER_CONSTANT ) ;
Code	int minimumModule = namespace . indexOf ( this , compiler , NUMBER_CONSTANT ) ;
Distance : 7

143
Tree	int getJSDocInfo = namespace ;
Code	int getJSDocInfo = namespace ;
Distance : 6

144
Tree	int copyInformationFrom = null ;
Code	int copyInformationFrom = null ;
Distance : 7

145
Tree	int explicitNode = namespace . indexOf ( this , substring , NUMBER_CONSTANT ) ;
Code	int explicitNode = namespace . indexOf ( this , substring , NUMBER_CONSTANT ) ;
Distance : 7

146
Tree	int addChildToFront = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int addChildToFront = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

147
Tree	int indexOfDot = NUMBER_CONSTANT ;
Code	int indexOfDot = NUMBER_CONSTANT ;
Distance : 6

148
Tree	int indexOfDot = this . namespace ;
Code	int indexOfDot = this . namespace ;
Distance : 5

149
Tree	final int minimumModule = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int minimumModule = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

150
Tree	int Token.VAR = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int Token.VAR = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

151
Tree	int candidateDefinition = namespace . indexOf ( CHAR_CONS ) ;
Code	int candidateDefinition = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

152
Tree	int indexOfDot = namespace ;
Code	int indexOfDot = namespace ;
Distance : 5

153
Tree	int indexOfDot = null ;
Code	int indexOfDot = null ;
Distance : 6

154
Tree	int detachFromParent = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int detachFromParent = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

155
Tree	int candidateDefinition = null ;
Code	int candidateDefinition = null ;
Distance : 7

156
Tree	int explicitNode = namespace . indexOf ( assignNode , null ) ;
Code	int explicitNode = namespace . indexOf ( assignNode , null ) ;
Distance : 5

157
Tree	public int minimumModule = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	public int minimumModule = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

158
Tree	int getJSDocInfo = namespace . indexOf ( CHAR_CONS ) ;
Code	int getJSDocInfo = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

159
Tree	final int Token.VAR = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int Token.VAR = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

160
Tree	int Node.IS_NAMESPACE = this . namespace ;
Code	int Node.IS_NAMESPACE = this . namespace ;
Distance : 6

161
Tree	int copyInformationFrom = false ;
Code	int copyInformationFrom = false ;
Distance : 7

162
Tree	int indexOfDot = false ;
Code	int indexOfDot = false ;
Distance : 6

163
Tree	int addChildToFront = namespace . indexOf ( compiler , null ) ;
Code	int addChildToFront = namespace . indexOf ( compiler , null ) ;
Distance : 5

164
Tree	boolean namespace [] = indexOf () ;
Code	boolean namespace [] = indexOf () ;
Distance : 8

165
Tree	int explicitNode = namespace . indexOf ( this , assignNode , namespace . indexOf ( STRING_CONSTANT ) , Token.VAR ) ;
Code	int explicitNode = namespace . indexOf ( this , assignNode , namespace . indexOf ( STRING_CONSTANT ) , Token.VAR ) ;
Distance : 14

166
Tree	int explicitNode = namespace . indexOf ( this , assignNode , namespace . indexOf ( STRING_CONSTANT ) , Node.IS_NAMESPACE ) ;
Code	int explicitNode = namespace . indexOf ( this , assignNode , namespace . indexOf ( STRING_CONSTANT ) , Node.IS_NAMESPACE ) ;
Distance : 14

167
Tree	int Token.VAR = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int Token.VAR = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

168
Tree	int explicitNode = namespace . indexOf ( this , replace , namespace . indexOf ( STRING_CONSTANT ) , Token.VAR ) ;
Code	int explicitNode = namespace . indexOf ( this , replace , namespace . indexOf ( STRING_CONSTANT ) , Token.VAR ) ;
Distance : 14

169
Tree	int copyInformationFrom = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int copyInformationFrom = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

170
Tree	int explicitNode = namespace . indexOf ( this , replace , namespace . indexOf ( STRING_CONSTANT ) , Node.IS_NAMESPACE ) ;
Code	int explicitNode = namespace . indexOf ( this , replace , namespace . indexOf ( STRING_CONSTANT ) , Node.IS_NAMESPACE ) ;
Distance : 14

171
Tree	int detachFromParent = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int detachFromParent = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

172
Tree	int explicitNode = namespace . indexOf ( this , compiler , namespace . indexOf ( STRING_CONSTANT ) , Token.VAR ) ;
Code	int explicitNode = namespace . indexOf ( this , compiler , namespace . indexOf ( STRING_CONSTANT ) , Token.VAR ) ;
Distance : 14

173
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 4

174
Tree	int explicitNode = namespace . indexOf ( this , compiler , namespace . indexOf ( STRING_CONSTANT ) , Node.IS_NAMESPACE ) ;
Code	int explicitNode = namespace . indexOf ( this , compiler , namespace . indexOf ( STRING_CONSTANT ) , Node.IS_NAMESPACE ) ;
Distance : 14

175
Tree	int minimumModule = namespace . indexOf ( this , assignNode , namespace . indexOf ( STRING_CONSTANT ) , Token.VAR ) ;
Code	int minimumModule = namespace . indexOf ( this , assignNode , namespace . indexOf ( STRING_CONSTANT ) , Token.VAR ) ;
Distance : 14

176
Tree	int explicitNode = indexOf ( assignNode , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Code	int explicitNode = indexOf ( assignNode , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Distance : 13

177
Tree	int minimumModule = indexOf ( assignNode , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Code	int minimumModule = indexOf ( assignNode , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Distance : 13

178
Tree	int minimumModule = this . namespace ;
Code	int minimumModule = this . namespace ;
Distance : 6

179
Tree	int Node.IS_NAMESPACE = indexOf ( assignNode , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Code	int Node.IS_NAMESPACE = indexOf ( assignNode , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Distance : 13

180
Tree	int candidateDefinition = this . namespace ;
Code	int candidateDefinition = this . namespace ;
Distance : 6

181
Tree	int explicitNode = indexOf ( compiler , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Code	int explicitNode = indexOf ( compiler , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Distance : 13

182
Tree	double namespace [] = indexOf () ;
Code	double namespace [] = indexOf () ;
Distance : 8

183
Tree	int Token.VAR = namespace . indexOf ( CHAR_CONS ) ;
Code	int Token.VAR = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

184
Tree	int minimumModule = indexOf ( compiler , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Code	int minimumModule = indexOf ( compiler , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Distance : 13

185
Tree	int Node.IS_NAMESPACE = indexOf ( compiler , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Code	int Node.IS_NAMESPACE = indexOf ( compiler , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Distance : 13

186
Tree	int candidateDefinition = indexOf ( assignNode , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Code	int candidateDefinition = indexOf ( assignNode , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Distance : 13

187
Tree	int Node.IS_NAMESPACE = namespace . indexOf ( this , assignNode , namespace . indexOf ( STRING_CONSTANT ) , Token.VAR ) ;
Code	int Node.IS_NAMESPACE = namespace . indexOf ( this , assignNode , namespace . indexOf ( STRING_CONSTANT ) , Token.VAR ) ;
Distance : 14

188
Tree	int minimumModule = namespace . indexOf ( this , assignNode , namespace . indexOf ( STRING_CONSTANT ) , Node.IS_NAMESPACE ) ;
Code	int minimumModule = namespace . indexOf ( this , assignNode , namespace . indexOf ( STRING_CONSTANT ) , Node.IS_NAMESPACE ) ;
Distance : 14

189
Tree	byte namespace [] = namespace . indexOf ( CHAR_CONS ) ;
Code	byte namespace [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 4

190
Tree	int Node.IS_NAMESPACE = namespace . indexOf ( this , assignNode , namespace . indexOf ( STRING_CONSTANT ) , Node.IS_NAMESPACE ) ;
Code	int Node.IS_NAMESPACE = namespace . indexOf ( this , assignNode , namespace . indexOf ( STRING_CONSTANT ) , Node.IS_NAMESPACE ) ;
Distance : 14

191
Tree	final int Token.VAR = namespace . indexOf ( CHAR_CONS ) ;
Code	final int Token.VAR = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

192
Tree	int getJSDocInfo = null ;
Code	int getJSDocInfo = null ;
Distance : 7

193
Tree	int explicitNode = namespace . indexOf ( compiler , null ) ;
Code	int explicitNode = namespace . indexOf ( compiler , null ) ;
Distance : 5

194
Tree	int getJSDocInfo = this . namespace ;
Code	int getJSDocInfo = this . namespace ;
Distance : 6

195
Tree	int addChildToFront = indexOf ( assignNode , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Code	int addChildToFront = indexOf ( assignNode , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Distance : 13

196
Tree	int explicitNode = indexOf ( replace , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Code	int explicitNode = indexOf ( replace , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Distance : 13

197
Tree	public int Node.IS_NAMESPACE = namespace . indexOf ( CHAR_CONS ) ;
Code	public int Node.IS_NAMESPACE = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

198
Tree	int getJSDocInfo = indexOf ( assignNode , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Code	int getJSDocInfo = indexOf ( assignNode , NUMBER_CONSTANT , namespace , namespace , namespace , Node.IS_NAMESPACE ) ;
Distance : 13

199
Tree	final int addChildToFront = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int addChildToFront = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

========================================================================


========================================================================
Example Number: 16
Parent Code is: 
! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
-------------------------------------------------------------------------------
Child code is: 
! type . restrictByNotNullOrUndefined () . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (38 (207{val=!}) (32 (800{val=type}) (235{val=.}) (802{val=isSubtype}) (214{val=(}) (32 (800{val=typeRegistry}) (235{val=.}) (802{val=getNativeType}) (214{val=(}) (800{val=OBJECT_TYPE}) (215{val=)})) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (38 (207{val=!}) (32 (32 (800{val=type}) (235{val=.}) (802{val=restrictByNotNullOrUndefined}) (216{val=()})) (235{val=.}) (802{val=isSubtype}) (214{val=(}) (32 (800{val=typeRegistry}) (235{val=.}) (802{val=getNativeType}) (214{val=(}) (800{val=OBJECT_TYPE}) (215{val=)})) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/90/parent/src_com_google_javascript_jscomp_FunctionTypeBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry )
Distance : 8

1
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == restrictByNotNullOrUndefined )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == restrictByNotNullOrUndefined )
Distance : 10

2
Tree	! type . toString ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . toString ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 4

3
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Distance : 4

4
Tree	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE ) )
Distance : 9

5
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . typeRegistry ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . typeRegistry ( OBJECT_TYPE ) )
Distance : 4

6
Tree	! type . restrictByNotNullOrUndefined ( getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( getNativeType ( OBJECT_TYPE ) )
Distance : 5

7
Tree	! type . typeRegistry ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . typeRegistry ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 4

8
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == OBJECT_TYPE )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == OBJECT_TYPE )
Distance : 10

9
Tree	! type . isSubtype ( typeRegistry . getNativeType ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Code	! type . isSubtype ( typeRegistry . getNativeType ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Distance : 5

10
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ()
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ()
Distance : 8

11
Tree	! type . isSubtype ()
Code	! type . isSubtype ()
Distance : 11

12
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == ! )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == ! )
Distance : 9

13
Tree	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 7

14
Tree	! type . isSubtype ( getNativeType . getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtype ( getNativeType . getNativeType ( OBJECT_TYPE ) )
Distance : 4

15
Tree	! type . getNativeType ( typeRegistry ) . typeRegistry ()
Code	! type . getNativeType ( typeRegistry ) . typeRegistry ()
Distance : 10

16
Tree	! type . type ( typeRegistry . getNativeType ( OBJECT_TYPE ) , OBJECT_TYPE )
Code	! type . type ( typeRegistry . getNativeType ( OBJECT_TYPE ) , OBJECT_TYPE )
Distance : 6

17
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == ! )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == ! )
Distance : 10

18
Tree	! type . type ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! type . type ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 5

19
Tree	( typeRegistry * type . type ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( typeRegistry * type . type ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 8

20
Tree	! type . getNativeType ( typeRegistry . getNativeType ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Code	! type . getNativeType ( typeRegistry . getNativeType ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Distance : 6

21
Tree	( typeRegistry * type . getNativeType ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) ) )
Code	( typeRegistry * type . getNativeType ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) ) )
Distance : 9

22
Tree	! type . getNativeType ()
Code	! type . getNativeType ()
Distance : 11

23
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == getNativeType )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == getNativeType )
Distance : 10

24
Tree	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) , OBJECT_TYPE )
Code	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) , OBJECT_TYPE )
Distance : 6

25
Tree	! type . getNativeType ( getNativeType . getNativeType ( OBJECT_TYPE ) )
Code	! type . getNativeType ( getNativeType . getNativeType ( OBJECT_TYPE ) )
Distance : 5

26
Tree	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 8

27
Tree	! isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 5

28
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . restrictByNotNullOrUndefined ()
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . restrictByNotNullOrUndefined ()
Distance : 9

29
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 3

30
Tree	( typeRegistry * type . getNativeType ( OBJECT_TYPE . getNativeType ( typeRegistry ) ) )
Code	( typeRegistry * type . getNativeType ( OBJECT_TYPE . getNativeType ( typeRegistry ) ) )
Distance : 9

31
Tree	( NUMBER_CONSTANT * type . isSubtype ( getNativeType ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( getNativeType ) )
Distance : 9

32
Tree	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 10

33
Tree	! type . getNativeType ( typeRegistry . getNativeType ( NUMBER_CONSTANT , typeRegistry ) )
Code	! type . getNativeType ( typeRegistry . getNativeType ( NUMBER_CONSTANT , typeRegistry ) )
Distance : 7

34
Tree	JSType = ( JSType ) JSType . isSubtype ( typeRegistry )
Code	JSType = ( JSType ) JSType . isSubtype ( typeRegistry )
Distance : 11

35
Tree	! restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 6

36
Tree	! type . type ( typeRegistry )
Code	! type . type ( typeRegistry )
Distance : 9

37
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == getNativeType )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == getNativeType )
Distance : 9

38
Tree	! type . OBJECT_TYPE ( typeRegistry )
Code	! type . OBJECT_TYPE ( typeRegistry )
Distance : 9

39
Tree	! type . restrictByNotNullOrUndefined ( getNativeType . isSubtype ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( getNativeType . isSubtype ( OBJECT_TYPE ) )
Distance : 5

40
Tree	! type . restrictByNotNullOrUndefined ( getNativeType . getNativeType ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( getNativeType . getNativeType ( typeRegistry ) )
Distance : 5

41
Tree	! type . isSubtype ( typeRegistry ) . typeRegistry ( OBJECT_TYPE )
Code	! type . isSubtype ( typeRegistry ) . typeRegistry ( OBJECT_TYPE )
Distance : 6

42
Tree	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Distance : 6

43
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . typeRegistry ( OBJECT_TYPE )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . typeRegistry ( OBJECT_TYPE )
Distance : 6

44
Tree	( NUMBER_CONSTANT * type . OBJECT_TYPE ( OBJECT_TYPE ) )
Code	( NUMBER_CONSTANT * type . OBJECT_TYPE ( OBJECT_TYPE ) )
Distance : 10

45
Tree	JSType . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	JSType . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 8

46
Tree	( NUMBER_CONSTANT * type . type ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . type ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 8

47
Tree	! getNativeType ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! getNativeType ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 7

48
Tree	( NUMBER_CONSTANT * type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Distance : 7

49
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == reportWarning )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == reportWarning )
Distance : 9

50
Tree	JSType . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	JSType . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 7

51
Tree	! type . isSubtype ( typeRegistry ) . typeRegistry ()
Code	! type . isSubtype ( typeRegistry ) . typeRegistry ()
Distance : 9

52
Tree	! type ( typeRegistry . typeRegistry ( OBJECT_TYPE ) )
Code	! type ( typeRegistry . typeRegistry ( OBJECT_TYPE ) )
Distance : 6

53
Tree	( typeRegistry * type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Code	( typeRegistry * type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Distance : 7

54
Tree	! type . type ( typeRegistry . getNativeType ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Code	! type . type ( typeRegistry . getNativeType ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Distance : 6

55
Tree	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) ) )
Distance : 8

56
Tree	! type . toString ( getNativeType ( OBJECT_TYPE ) )
Code	! type . toString ( getNativeType ( OBJECT_TYPE ) )
Distance : 6

57
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == JSType )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == JSType )
Distance : 10

58
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == apply )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == apply )
Distance : 10

59
Tree	! type . isSubtype ( getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtype ( getNativeType ( OBJECT_TYPE ) )
Distance : 5

60
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == type )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == type )
Distance : 9

61
Tree	( typeRegistry * type . getNativeType ( OBJECT_TYPE . typeRegistry ( OBJECT_TYPE ) ) )
Code	( typeRegistry * type . getNativeType ( OBJECT_TYPE . typeRegistry ( OBJECT_TYPE ) ) )
Distance : 9

62
Tree	! type . JSType ( typeRegistry )
Code	! type . JSType ( typeRegistry )
Distance : 9

63
Tree	! type . type ()
Code	! type . type ()
Distance : 11

64
Tree	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE . getNativeType ( typeRegistry ) ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE . getNativeType ( typeRegistry ) ) )
Distance : 8

65
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == reportWarning )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == reportWarning )
Distance : 10

66
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( NUMBER_CONSTANT , typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( NUMBER_CONSTANT , typeRegistry ) )
Distance : 6

67
Tree	( NUMBER_CONSTANT * type . type ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . type ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Distance : 7

68
Tree	! type ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! type ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 6

69
Tree	! type . type ( getNativeType ( typeRegistry ) )
Code	! type . type ( getNativeType ( typeRegistry ) )
Distance : 7

70
Tree	! type . typeRegistry ( typeRegistry )
Code	! type . typeRegistry ( typeRegistry )
Distance : 9

71
Tree	( NUMBER_CONSTANT * type . type ( typeRegistry ) )
Code	( NUMBER_CONSTANT * type . type ( typeRegistry ) )
Distance : 10

72
Tree	! type . restrictByNotNullOrUndefined ( getNativeType . typeRegistry ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( getNativeType . typeRegistry ( OBJECT_TYPE ) )
Distance : 5

73
Tree	! type . getNativeType ( getNativeType ( OBJECT_TYPE ) )
Code	! type . getNativeType ( getNativeType ( OBJECT_TYPE ) )
Distance : 6

74
Tree	! type . type ( typeRegistry ) . getNativeType ( OBJECT_TYPE )
Code	! type . type ( typeRegistry ) . getNativeType ( OBJECT_TYPE )
Distance : 6

75
Tree	! type . getNativeType ( getNativeType ( typeRegistry ) )
Code	! type . getNativeType ( getNativeType ( typeRegistry ) )
Distance : 7

76
Tree	( typeRegistry * type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( typeRegistry * type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 8

77
Tree	! type . isSubtype ( typeRegistry . getNativeType ( NUMBER_CONSTANT , typeRegistry ) )
Code	! type . isSubtype ( typeRegistry . getNativeType ( NUMBER_CONSTANT , typeRegistry ) )
Distance : 6

78
Tree	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry ) )
Distance : 9

79
Tree	! type . getNativeType ( typeRegistry ) . getNativeType ()
Code	! type . getNativeType ( typeRegistry ) . getNativeType ()
Distance : 9

80
Tree	JSType = ( JSType ) JSType . isSubtype ( OBJECT_TYPE )
Code	JSType = ( JSType ) JSType . isSubtype ( OBJECT_TYPE )
Distance : 11

81
Tree	JSType = ( JSType ) restrictByNotNullOrUndefined . isSubtype ( typeRegistry )
Code	JSType = ( JSType ) restrictByNotNullOrUndefined . isSubtype ( typeRegistry )
Distance : 11

82
Tree	! type . restrictByNotNullOrUndefined ( getNativeType )
Code	! type . restrictByNotNullOrUndefined ( getNativeType )
Distance : 8

83
Tree	! type . type ( typeRegistry ) . typeRegistry ()
Code	! type . type ( typeRegistry ) . typeRegistry ()
Distance : 10

84
Tree	! type . toString ( typeRegistry . getNativeType ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Code	! type . toString ( typeRegistry . getNativeType ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Distance : 6

85
Tree	JSType = ( JSType ) getNativeType . isSubtype ( OBJECT_TYPE )
Code	JSType = ( JSType ) getNativeType . isSubtype ( OBJECT_TYPE )
Distance : 11

86
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == type )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == type )
Distance : 10

87
Tree	! type . toString ()
Code	! type . toString ()
Distance : 11

88
Tree	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Distance : 7

89
Tree	JSType . restrictByNotNullOrUndefined ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE )
Code	JSType . restrictByNotNullOrUndefined ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE )
Distance : 9

90
Tree	JSType . restrictByNotNullOrUndefined ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	JSType . restrictByNotNullOrUndefined ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 9

91
Tree	! type . typeRegistry ( getNativeType ( OBJECT_TYPE ) )
Code	! type . typeRegistry ( getNativeType ( OBJECT_TYPE ) )
Distance : 6

92
Tree	JSType . type ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE )
Code	JSType . type ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE )
Distance : 9

93
Tree	! type . isSubtype ( getNativeType ( typeRegistry ) )
Code	! type . isSubtype ( getNativeType ( typeRegistry ) )
Distance : 6

94
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( NUMBER_CONSTANT , isSubtype ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( NUMBER_CONSTANT , isSubtype ) )
Distance : 6

95
Tree	JSType = ( JSType ) typeRegistry . isSubtype ( OBJECT_TYPE )
Code	JSType = ( JSType ) typeRegistry . isSubtype ( OBJECT_TYPE )
Distance : 10

96
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == isSubtype )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == isSubtype )
Distance : 9

97
Tree	JSType . restrictByNotNullOrUndefined ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	JSType . restrictByNotNullOrUndefined ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 8

98
Tree	! type . Override ( typeRegistry )
Code	! type . Override ( typeRegistry )
Distance : 9

99
Tree	JSType . type ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE )
Code	JSType . type ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE )
Distance : 10

100
Tree	double
Code	double
Distance : 15

101
Tree	JSType
Code	JSType
Distance : 15

102
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == isSubtype )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == isSubtype )
Distance : 10

103
Tree	getNativeType . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	getNativeType . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 7

104
Tree	( typeRegistry * type . typeRegistry ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( typeRegistry * type . typeRegistry ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 8

105
Tree	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) , OBJECT_TYPE )
Code	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) , OBJECT_TYPE )
Distance : 5

106
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Distance : 5

107
Tree	( NUMBER_CONSTANT * type . type ( OBJECT_TYPE ) )
Code	( NUMBER_CONSTANT * type . type ( OBJECT_TYPE ) )
Distance : 10

108
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == restrictByNotNullOrUndefined )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == restrictByNotNullOrUndefined )
Distance : 9

109
Tree	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 10

110
Tree	! type . OBJECT_TYPE ()
Code	! type . OBJECT_TYPE ()
Distance : 11

111
Tree	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) , typeRegistry )
Code	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) , typeRegistry )
Distance : 6

112
Tree	JSType . getNativeType ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE )
Code	JSType . getNativeType ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE )
Distance : 9

113
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Distance : 6

114
Tree	return
Code	return
Distance : 15

115
Tree	! type . JSType ()
Code	! type . JSType ()
Distance : 11

116
Tree	! type . type ( getNativeType . getNativeType ( OBJECT_TYPE ) )
Code	! type . type ( getNativeType . getNativeType ( OBJECT_TYPE ) )
Distance : 5

117
Tree	( typeRegistry * type . getNativeType ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) ) )
Code	( typeRegistry * type . getNativeType ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) ) )
Distance : 9

118
Tree	! type . getNativeType ( typeRegistry )
Code	! type . getNativeType ( typeRegistry )
Distance : 9

119
Tree	! type . type ( getNativeType ( OBJECT_TYPE ) )
Code	! type . type ( getNativeType ( OBJECT_TYPE ) )
Distance : 6

120
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == typeRegistry )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == typeRegistry )
Distance : 9

121
Tree	JSType . type ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < typeRegistry
Code	JSType . type ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < typeRegistry
Distance : 8

122
Tree	! type . isSubtype ( typeRegistry ) . getNativeType ()
Code	! type . isSubtype ( typeRegistry ) . getNativeType ()
Distance : 8

123
Tree	<
Code	<
Distance : 15

124
Tree	! type . restrictByNotNullOrUndefined ()
Code	! type . restrictByNotNullOrUndefined ()
Distance : 10

125
Tree	! restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 5

126
Tree	! type . type ( typeRegistry . getNativeType ( OBJECT_TYPE ) , typeRegistry )
Code	! type . type ( typeRegistry . getNativeType ( OBJECT_TYPE ) , typeRegistry )
Distance : 6

127
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == OBJECT_TYPE )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == OBJECT_TYPE )
Distance : 9

128
Tree	! getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 6

129
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == apply )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == apply )
Distance : 9

130
Tree	JSType = ( JSType ) typeRegistry . isSubtype ( typeRegistry )
Code	JSType = ( JSType ) typeRegistry . isSubtype ( typeRegistry )
Distance : 11

131
Tree	! type . Override ()
Code	! type . Override ()
Distance : 11

132
Tree	JSType = ( JSType ) getNativeType . restrictByNotNullOrUndefined ( typeRegistry )
Code	JSType = ( JSType ) getNativeType . restrictByNotNullOrUndefined ( typeRegistry )
Distance : 12

133
Tree	rightType
Code	rightType
Distance : 15

134
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . isSubtype ( OBJECT_TYPE )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . isSubtype ( OBJECT_TYPE )
Distance : 6

135
Tree	( typeRegistry * type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( typeRegistry * type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 7

136
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( OBJECT_TYPE )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( OBJECT_TYPE )
Distance : 5

137
Tree	! type . type ( typeRegistry ) . typeRegistry ( OBJECT_TYPE )
Code	! type . type ( typeRegistry ) . typeRegistry ( OBJECT_TYPE )
Distance : 7

138
Tree	getNativeType . type ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	getNativeType . type ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 8

139
Tree	! typeRegistry ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! typeRegistry ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 6

140
Tree	type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 6

141
Tree	( NUMBER_CONSTANT * type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 8

142
Tree	! type . getNativeType ( typeRegistry ) . getNativeType ( OBJECT_TYPE )
Code	! type . getNativeType ( typeRegistry ) . getNativeType ( OBJECT_TYPE )
Distance : 6

143
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) , OBJECT_TYPE )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) , OBJECT_TYPE )
Distance : 6

144
Tree	JSType . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	JSType . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 7

145
Tree	( NUMBER_CONSTANT * type . getNativeType ( OBJECT_TYPE ) )
Code	( NUMBER_CONSTANT * type . getNativeType ( OBJECT_TYPE ) )
Distance : 9

146
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . isSubtype ()
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . isSubtype ()
Distance : 9

147
Tree	! type . restrictByNotNullOrUndefined ( getNativeType ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( getNativeType ( typeRegistry ) )
Distance : 6

148
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == typeRegistry )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == typeRegistry )
Distance : 10

149
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == JSType )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == JSType )
Distance : 9

150
Tree	JSType . restrictByNotNullOrUndefined ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE )
Code	JSType . restrictByNotNullOrUndefined ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE )
Distance : 8

151
Tree	! type . restrictByNotNullOrUndefined ( JSType . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( JSType . getNativeType ( OBJECT_TYPE ) )
Distance : 4

152
Tree	! type . isSubtype ( typeRegistry )
Code	! type . isSubtype ( typeRegistry )
Distance : 8

153
Tree	! type . isSubtype ( typeRegistry ) . getNativeType ( OBJECT_TYPE )
Code	! type . isSubtype ( typeRegistry ) . getNativeType ( OBJECT_TYPE )
Distance : 5

154
Tree	! type . getNativeType ( typeRegistry ) . typeRegistry ( OBJECT_TYPE )
Code	! type . getNativeType ( typeRegistry ) . typeRegistry ( OBJECT_TYPE )
Distance : 7

155
Tree	checkState
Code	checkState
Distance : 15

156
Tree	JSType = ( JSType ) JSType . restrictByNotNullOrUndefined ( typeRegistry )
Code	JSType = ( JSType ) JSType . restrictByNotNullOrUndefined ( typeRegistry )
Distance : 12

157
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . typeRegistry ()
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . typeRegistry ()
Distance : 9

158
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , typeRegistry )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , typeRegistry )
Distance : 5

159
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , OBJECT_TYPE )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , OBJECT_TYPE )
Distance : 5

160
Tree	( NUMBER_CONSTANT * type . getNativeType ( typeRegistry ) )
Code	( NUMBER_CONSTANT * type . getNativeType ( typeRegistry ) )
Distance : 10

161
Tree	! type . restrictByNotNullOrUndefined ( getNativeType . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( getNativeType . getNativeType ( OBJECT_TYPE ) )
Distance : 4

162
Tree	JSType = ( JSType ) getNativeType . isSubtype ( typeRegistry )
Code	JSType = ( JSType ) getNativeType . isSubtype ( typeRegistry )
Distance : 11

163
Tree	! type . type ( typeRegistry ) . getNativeType ()
Code	! type . type ( typeRegistry ) . getNativeType ()
Distance : 9

164
Tree	! type . restrictByNotNullOrUndefined ( restrictByNotNullOrUndefined . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( restrictByNotNullOrUndefined . getNativeType ( OBJECT_TYPE ) )
Distance : 4

165
Tree	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) , typeRegistry )
Code	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) , typeRegistry )
Distance : 5

166
Tree	JSType . type ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	JSType . type ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 9

167
Tree	JSType . type ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	JSType . type ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 8

168
Tree	! type . typeRegistry ()
Code	! type . typeRegistry ()
Distance : 11

169
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , isSubtype )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , isSubtype )
Distance : 5

170
Tree	JSType . isSubtype ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE )
Code	JSType . isSubtype ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE )
Distance : 10

171
Tree	JSType = ( JSType ) restrictByNotNullOrUndefined . isSubtype ( OBJECT_TYPE )
Code	JSType = ( JSType ) restrictByNotNullOrUndefined . isSubtype ( OBJECT_TYPE )
Distance : 11

172
Tree	! type . toString ( typeRegistry )
Code	! type . toString ( typeRegistry )
Distance : 9

173
Tree	JSType . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < typeRegistry
Code	JSType . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < typeRegistry
Distance : 8

174
Tree	JSType . restrictByNotNullOrUndefined ( typeRegistry ) && type . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Code	JSType . restrictByNotNullOrUndefined ( typeRegistry ) && type . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Distance : 9

175
Tree	! JSType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! JSType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 6

176
Tree	JSType . getNativeType ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	JSType . getNativeType ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 10

177
Tree	JSType . isSubtype ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	JSType . isSubtype ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 10

178
Tree	JSType . getNativeType ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	JSType . getNativeType ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 9

179
Tree	! type . type ( typeRegistry . getNativeType ( NUMBER_CONSTANT , typeRegistry ) )
Code	! type . type ( typeRegistry . getNativeType ( NUMBER_CONSTANT , typeRegistry ) )
Distance : 7

180
Tree	! type . apply ()
Code	! type . apply ()
Distance : 11

181
Tree	JSType . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < typeRegistry
Code	JSType . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < typeRegistry
Distance : 7

182
Tree	!
Code	!
Distance : 14

183
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 3

184
Tree	JSType . isSubtype ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE )
Code	JSType . isSubtype ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE )
Distance : 9

185
Tree	JSType . getNativeType ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE )
Code	JSType . getNativeType ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE )
Distance : 10

186
Tree	! type . type ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . type ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 4

187
Tree	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 4

188
Tree	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 3

189
Tree	(
Code	(
Distance : 14

190
Tree	JSType . type ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	JSType . type ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 8

191
Tree	node
Code	node
Distance : 15

192
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 4

193
Tree	( typeRegistry * type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( typeRegistry * type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 8

194
Tree	throw
Code	throw
Distance : 15

195
Tree	JSType . isSubtype ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	JSType . isSubtype ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 9

196
Tree	JSType . restrictByNotNullOrUndefined ( typeRegistry ) && type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	JSType . restrictByNotNullOrUndefined ( typeRegistry ) && type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 9

197
Tree	JSType . type ( typeRegistry ) && type . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Code	JSType . type ( typeRegistry ) && type . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Distance : 10

198
Tree	JSType . type ( typeRegistry ) && type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	JSType . type ( typeRegistry ) && type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 9

199
Tree	! type ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 5

========================================================================


========================================================================
Example Number: 17
Parent Code is: 
return true ;
-------------------------------------------------------------------------------
Child code is: 
return false ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (9{val=true}) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (9{val=false}) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/86/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	super ( value , value , getType , NodeUtil , NodeUtil ) ;
Code	super ( value , value , getType , NodeUtil , NodeUtil ) ;
Distance : 12

1
Tree	super ( NodeUtil , NodeUtil , value , NodeUtil , NodeUtil ) ;
Code	super ( NodeUtil , NodeUtil , value , NodeUtil , NodeUtil ) ;
Distance : 12

2
Tree	super ( NodeUtil , value , Token.NEW , NodeUtil , NodeUtil ) ;
Code	super ( NodeUtil , value , Token.NEW , NodeUtil , NodeUtil ) ;
Distance : 12

3
Tree	super ( value , value , value , NodeUtil , NodeUtil ) ;
Code	super ( value , value , value , NodeUtil , NodeUtil ) ;
Distance : 12

4
Tree	super ( NodeUtil , value , getType , NodeUtil , NodeUtil ) ;
Code	super ( NodeUtil , value , getType , NodeUtil , NodeUtil ) ;
Distance : 12

5
Tree	return STRING_CONSTANT + NodeUtil . getParent ( NodeUtil ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + NodeUtil . getParent ( NodeUtil ) + STRING_CONSTANT ;
Distance : 10

6
Tree	super ( NodeUtil , value , value , NodeUtil , NodeUtil ) ;
Code	super ( NodeUtil , value , value , NodeUtil , NodeUtil ) ;
Distance : 12

7
Tree	return STRING_CONSTANT + NodeUtil . getParent ( getLastChild ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + NodeUtil . getParent ( getLastChild ) + STRING_CONSTANT ;
Distance : 10

8
Tree	return getParent + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return getParent + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

9
Tree	return Token.ASSIGN < < NUMBER_CONSTANT ;
Code	return Token.ASSIGN < < NUMBER_CONSTANT ;
Distance : 4

10
Tree	return locals + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return locals + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

11
Tree	return STRING_CONSTANT + NodeUtil + STRING_CONSTANT + value ;
Code	return STRING_CONSTANT + NodeUtil + STRING_CONSTANT + value ;
Distance : 7

12
Tree	return ! Token.NAME ;
Code	return ! Token.NAME ;
Distance : 2

13
Tree	return NodeUtil . getParent ( getParent ) ;
Code	return NodeUtil . getParent ( getParent ) ;
Distance : 6

14
Tree	return ! IllegalStateException ;
Code	return ! IllegalStateException ;
Distance : 2

15
Tree	return ! getParent ( NodeUtil ) ;
Code	return ! getParent ( NodeUtil ) ;
Distance : 5

16
Tree	return NodeUtil . getParent ( NodeUtil ) ;
Code	return NodeUtil . getParent ( NodeUtil ) ;
Distance : 6

17
Tree	return Token.ASSIGN + NUMBER_CONSTANT ;
Code	return Token.ASSIGN + NUMBER_CONSTANT ;
Distance : 3

18
Tree	return true ;
Code	return true ;
Distance : 1

19
Tree	return NodeUtil ;
Code	return NodeUtil ;
Distance : 1

20
Tree	return ! NodeUtil ;
Code	return ! NodeUtil ;
Distance : 2

21
Tree	return false ;
Code	return false ;
Distance : 0

22
Tree	return NodeUtil < < NUMBER_CONSTANT ;
Code	return NodeUtil < < NUMBER_CONSTANT ;
Distance : 4

23
Tree	return NodeUtil + NUMBER_CONSTANT ;
Code	return NodeUtil + NUMBER_CONSTANT ;
Distance : 3

24
Tree	return NodeUtil + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return NodeUtil + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

25
Tree	return this == NodeUtil ;
Code	return this == NodeUtil ;
Distance : 3

26
Tree	return ! value ;
Code	return ! value ;
Distance : 2

27
Tree	return Token.ASSIGN + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return Token.ASSIGN + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

28
Tree	return ! getLastChild ( NodeUtil ) ;
Code	return ! getLastChild ( NodeUtil ) ;
Distance : 5

29
Tree	return Token.NEW ;
Code	return Token.NEW ;
Distance : 1

30
Tree	return NodeUtil ? Token.CALL : Token.NEW ;
Code	return NodeUtil ? Token.CALL : Token.NEW ;
Distance : 5

31
Tree	return new getBooleanProp ( NodeUtil ) ;
Code	return new getBooleanProp ( NodeUtil ) ;
Distance : 5

32
Tree	return NodeUtil . getLastChild ( value ) ;
Code	return NodeUtil . getLastChild ( value ) ;
Distance : 6

33
Tree	return NodeUtil . getParent ( Token.GETELEM ) ;
Code	return NodeUtil . getParent ( Token.GETELEM ) ;
Distance : 6

34
Tree	return NodeUtil ? Token.REGEXP : getBooleanProp ;
Code	return NodeUtil ? Token.REGEXP : getBooleanProp ;
Distance : 5

35
Tree	return NodeUtil . getParent () . getLastChild == NUMBER_CONSTANT ;
Code	return NodeUtil . getParent () . getLastChild == NUMBER_CONSTANT ;
Distance : 8

36
Tree	return ! getBooleanProp ( getBooleanProp ) ;
Code	return ! getBooleanProp ( getBooleanProp ) ;
Distance : 5

37
Tree	return NodeUtil . getFirstChild () . value == NUMBER_CONSTANT ;
Code	return NodeUtil . getFirstChild () . value == NUMBER_CONSTANT ;
Distance : 8

38
Tree	return NodeUtil . getLastChild () . getParent == NUMBER_CONSTANT ;
Code	return NodeUtil . getLastChild () . getParent == NUMBER_CONSTANT ;
Distance : 8

39
Tree	return getBooleanProp % NUMBER_CONSTANT ;
Code	return getBooleanProp % NUMBER_CONSTANT ;
Distance : 3

40
Tree	return Token.CALL ;
Code	return Token.CALL ;
Distance : 1

41
Tree	return NodeUtil ? Token.NEW : Token.AND ;
Code	return NodeUtil ? Token.NEW : Token.AND ;
Distance : 5

42
Tree	return NodeUtil . getLastChild ( getBooleanProp ) ;
Code	return NodeUtil . getLastChild ( getBooleanProp ) ;
Distance : 6

43
Tree	return NodeUtil . getParent ( Token.REGEXP ) ;
Code	return NodeUtil . getParent ( Token.REGEXP ) ;
Distance : 6

44
Tree	return NodeUtil . getParent ( evaluatesToLocalValue ) ;
Code	return NodeUtil . getParent ( evaluatesToLocalValue ) ;
Distance : 6

45
Tree	return Token.NEW % NUMBER_CONSTANT ;
Code	return Token.NEW % NUMBER_CONSTANT ;
Distance : 3

46
Tree	return NodeUtil . getParent () . getBooleanProp == NUMBER_CONSTANT ;
Code	return NodeUtil . getParent () . getBooleanProp == NUMBER_CONSTANT ;
Distance : 8

47
Tree	return NodeUtil . getParent ( Token.CALL ) ;
Code	return NodeUtil . getParent ( Token.CALL ) ;
Distance : 6

48
Tree	return NodeUtil . getBooleanProp () . value == NUMBER_CONSTANT ;
Code	return NodeUtil . getBooleanProp () . value == NUMBER_CONSTANT ;
Distance : 8

49
Tree	return NodeUtil . getParent () . getParent == NUMBER_CONSTANT ;
Code	return NodeUtil . getParent () . getParent == NUMBER_CONSTANT ;
Distance : 8

50
Tree	return Token.REGEXP < < NUMBER_CONSTANT ;
Code	return Token.REGEXP < < NUMBER_CONSTANT ;
Distance : 4

51
Tree	return NodeUtil ? getBooleanProp : getBooleanProp ;
Code	return NodeUtil ? getBooleanProp : getBooleanProp ;
Distance : 5

52
Tree	return NodeUtil ? Token.AND : getBooleanProp ;
Code	return NodeUtil ? Token.AND : getBooleanProp ;
Distance : 5

53
Tree	return STRING_CONSTANT + NodeUtil . getLastChild ( getBooleanProp ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + NodeUtil . getLastChild ( getBooleanProp ) + STRING_CONSTANT ;
Distance : 10

54
Tree	return Token.NEW + NUMBER_CONSTANT ;
Code	return Token.NEW + NUMBER_CONSTANT ;
Distance : 3

55
Tree	return Token.NEW + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return Token.NEW + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

56
Tree	return NodeUtil + Token.NEW . getLastChild ( value ) ;
Code	return NodeUtil + Token.NEW . getLastChild ( value ) ;
Distance : 8

57
Tree	return ! getBooleanProp ( NodeUtil ) ;
Code	return ! getBooleanProp ( NodeUtil ) ;
Distance : 5

58
Tree	return NodeUtil . getParent ( getBooleanProp ) ;
Code	return NodeUtil . getParent ( getBooleanProp ) ;
Distance : 6

59
Tree	return value ;
Code	return value ;
Distance : 1

60
Tree	return Token.REGEXP + NUMBER_CONSTANT ;
Code	return Token.REGEXP + NUMBER_CONSTANT ;
Distance : 3

61
Tree	return Token.REGEXP ;
Code	return Token.REGEXP ;
Distance : 1

62
Tree	return ! Token.REGEXP ;
Code	return ! Token.REGEXP ;
Distance : 2

63
Tree	return NodeUtil + value . getParent ( getParent ) ;
Code	return NodeUtil + value . getParent ( getParent ) ;
Distance : 8

64
Tree	return value + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return value + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

65
Tree	return NodeUtil + Token.CALL . getParent ( getBooleanProp ) ;
Code	return NodeUtil + Token.CALL . getParent ( getBooleanProp ) ;
Distance : 8

66
Tree	return STRING_CONSTANT + NodeUtil . getParent ( getParent ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + NodeUtil . getParent ( getParent ) + STRING_CONSTANT ;
Distance : 10

67
Tree	return ! Token.AND ;
Code	return ! Token.AND ;
Distance : 2

68
Tree	return Token.AND < < NUMBER_CONSTANT ;
Code	return Token.AND < < NUMBER_CONSTANT ;
Distance : 4

69
Tree	return STRING_CONSTANT + NodeUtil . getParent ( Token.REGEXP ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + NodeUtil . getParent ( Token.REGEXP ) + STRING_CONSTANT ;
Distance : 10

70
Tree	return Token.AND ;
Code	return Token.AND ;
Distance : 1

71
Tree	return NodeUtil ? getBooleanProp : Token.NEW ;
Code	return NodeUtil ? getBooleanProp : Token.NEW ;
Distance : 5

72
Tree	return getParent < < NUMBER_CONSTANT ;
Code	return getParent < < NUMBER_CONSTANT ;
Distance : 4

73
Tree	return locals < < NUMBER_CONSTANT ;
Code	return locals < < NUMBER_CONSTANT ;
Distance : 4

74
Tree	return STRING_CONSTANT + NodeUtil . getParent ( value ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + NodeUtil . getParent ( value ) + STRING_CONSTANT ;
Distance : 10

75
Tree	return STRING_CONSTANT + NodeUtil . getParent ( Token.GETELEM ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + NodeUtil . getParent ( Token.GETELEM ) + STRING_CONSTANT ;
Distance : 10

76
Tree	return this == Token.NAME ;
Code	return this == Token.NAME ;
Distance : 3

77
Tree	return getParent ;
Code	return getParent ;
Distance : 1

78
Tree	return locals ;
Code	return locals ;
Distance : 1

79
Tree	return NodeUtil . getParent () ? null : NodeUtil ;
Code	return NodeUtil . getParent () ? null : NodeUtil ;
Distance : 8

80
Tree	return ! Token.REGEXP ( NodeUtil ) ;
Code	return ! Token.REGEXP ( NodeUtil ) ;
Distance : 5

81
Tree	return Token.AND + NUMBER_CONSTANT ;
Code	return Token.AND + NUMBER_CONSTANT ;
Distance : 3

82
Tree	return Token.CALL < < NUMBER_CONSTANT ;
Code	return Token.CALL < < NUMBER_CONSTANT ;
Distance : 4

83
Tree	return ! Token.NEW ( NodeUtil ) ;
Code	return ! Token.NEW ( NodeUtil ) ;
Distance : 5

84
Tree	return ! getFirstChild ( NodeUtil ) ;
Code	return ! getFirstChild ( NodeUtil ) ;
Distance : 5

85
Tree	return Token.CALL % NUMBER_CONSTANT ;
Code	return Token.CALL % NUMBER_CONSTANT ;
Distance : 3

86
Tree	return getParent + NUMBER_CONSTANT ;
Code	return getParent + NUMBER_CONSTANT ;
Distance : 3

87
Tree	return ! getBooleanProp ;
Code	return ! getBooleanProp ;
Distance : 2

88
Tree	return NodeUtil + value . getParent ( getBooleanProp ) ;
Code	return NodeUtil + value . getParent ( getBooleanProp ) ;
Distance : 8

89
Tree	return STRING_CONSTANT + NodeUtil + STRING_CONSTANT + getBooleanProp ;
Code	return STRING_CONSTANT + NodeUtil + STRING_CONSTANT + getBooleanProp ;
Distance : 7

90
Tree	return NodeUtil . getLastChild ( value ) ? null : NodeUtil ;
Code	return NodeUtil . getLastChild ( value ) ? null : NodeUtil ;
Distance : 10

91
Tree	return ! Token.CALL ;
Code	return ! Token.CALL ;
Distance : 2

92
Tree	return Token.REGEXP + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return Token.REGEXP + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

93
Tree	return NodeUtil ? Token.AND : Token.NEW ;
Code	return NodeUtil ? Token.AND : Token.NEW ;
Distance : 5

94
Tree	return STRING_CONSTANT + NodeUtil + STRING_CONSTANT + Token.CALL ;
Code	return STRING_CONSTANT + NodeUtil + STRING_CONSTANT + Token.CALL ;
Distance : 7

95
Tree	return NodeUtil . getBooleanProp () ? null : getBooleanProp ;
Code	return NodeUtil . getBooleanProp () ? null : getBooleanProp ;
Distance : 8

96
Tree	return NodeUtil + Token.NEW . getParent ( value ) ;
Code	return NodeUtil + Token.NEW . getParent ( value ) ;
Distance : 8

97
Tree	return getParent ;
Code	return getParent ;
Distance : 1

98
Tree	return getBooleanProp ;
Code	return getBooleanProp ;
Distance : 1

99
Tree	return ! Token.NEW ;
Code	return ! Token.NEW ;
Distance : 2

100
Tree	return NodeUtil . getParent () . value == NUMBER_CONSTANT ;
Code	return NodeUtil . getParent () . value == NUMBER_CONSTANT ;
Distance : 8

101
Tree	return new Token.CALL ( NodeUtil ) ;
Code	return new Token.CALL ( NodeUtil ) ;
Distance : 5

102
Tree	return Token.ASSIGN ;
Code	return Token.ASSIGN ;
Distance : 1

103
Tree	return Token.NAME ;
Code	return Token.NAME ;
Distance : 1

104
Tree	return new IllegalStateException ( NodeUtil ) ;
Code	return new IllegalStateException ( NodeUtil ) ;
Distance : 5

105
Tree	return NodeUtil . getLastChild () . value == NUMBER_CONSTANT ;
Code	return NodeUtil . getLastChild () . value == NUMBER_CONSTANT ;
Distance : 8

106
Tree	return STRING_CONSTANT + getBooleanProp . getParent ( getBooleanProp ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + getBooleanProp . getParent ( getBooleanProp ) + STRING_CONSTANT ;
Distance : 10

107
Tree	return getBooleanProp ;
Code	return getBooleanProp ;
Distance : 1

108
Tree	return NodeUtil ? Token.CALL : getBooleanProp ;
Code	return NodeUtil ? Token.CALL : getBooleanProp ;
Distance : 5

109
Tree	return this == getBooleanProp ;
Code	return this == getBooleanProp ;
Distance : 3

110
Tree	return Token.NEW ;
Code	return Token.NEW ;
Distance : 1

111
Tree	return STRING_CONSTANT + NodeUtil . getParent ( Token.NEW ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + NodeUtil . getParent ( Token.NEW ) + STRING_CONSTANT ;
Distance : 10

112
Tree	return new Node ( NodeUtil ) ;
Code	return new Node ( NodeUtil ) ;
Distance : 5

113
Tree	return NodeUtil . getParent () ? null : getBooleanProp ;
Code	return NodeUtil . getParent () ? null : getBooleanProp ;
Distance : 8

114
Tree	return NodeUtil . getParent ( getParent ) ? null : getBooleanProp ;
Code	return NodeUtil . getParent ( getParent ) ? null : getBooleanProp ;
Distance : 10

115
Tree	return NodeUtil % NUMBER_CONSTANT ;
Code	return NodeUtil % NUMBER_CONSTANT ;
Distance : 3

116
Tree	return this == getParent ;
Code	return this == getParent ;
Distance : 3

117
Tree	return this == Token.AND ;
Code	return this == Token.AND ;
Distance : 3

118
Tree	return NodeUtil + value . getParent ( value ) ;
Code	return NodeUtil + value . getParent ( value ) ;
Distance : 8

119
Tree	return NodeUtil . getParent () ? null : value ;
Code	return NodeUtil . getParent () ? null : value ;
Distance : 8

120
Tree	return new Token.CALL ( Token.REGEXP ) ;
Code	return new Token.CALL ( Token.REGEXP ) ;
Distance : 5

121
Tree	return NodeUtil . getBooleanProp () ? null : NodeUtil ;
Code	return NodeUtil . getBooleanProp () ? null : NodeUtil ;
Distance : 8

122
Tree	return Token.CALL + NUMBER_CONSTANT ;
Code	return Token.CALL + NUMBER_CONSTANT ;
Distance : 3

123
Tree	return NodeUtil . getParent () ? null : Token.NEW ;
Code	return NodeUtil . getParent () ? null : Token.NEW ;
Distance : 8

124
Tree	return getBooleanProp + NUMBER_CONSTANT ;
Code	return getBooleanProp + NUMBER_CONSTANT ;
Distance : 3

125
Tree	return Token.AND ;
Code	return Token.AND ;
Distance : 1

126
Tree	return NodeUtil . getLastChild () . getLastChild == NUMBER_CONSTANT ;
Code	return NodeUtil . getLastChild () . getLastChild == NUMBER_CONSTANT ;
Distance : 8

127
Tree	return NodeUtil . getParent ( value ) ;
Code	return NodeUtil . getParent ( value ) ;
Distance : 6

128
Tree	return locals + NUMBER_CONSTANT ;
Code	return locals + NUMBER_CONSTANT ;
Distance : 3

129
Tree	return NodeUtil . getParent () ? null : getParent ;
Code	return NodeUtil . getParent () ? null : getParent ;
Distance : 8

130
Tree	return NodeUtil . getLastChild () ? null : NodeUtil ;
Code	return NodeUtil . getLastChild () ? null : NodeUtil ;
Distance : 8

131
Tree	return Token.CALL + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return Token.CALL + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

132
Tree	return NodeUtil . getParent ( NodeUtil ) ? null : getBooleanProp ;
Code	return NodeUtil . getParent ( NodeUtil ) ? null : getBooleanProp ;
Distance : 10

133
Tree	return evaluatesToLocalValue ;
Code	return evaluatesToLocalValue ;
Distance : 1

134
Tree	return Token.REGEXP ;
Code	return Token.REGEXP ;
Distance : 1

135
Tree	return ! getNext ( NodeUtil ) ;
Code	return ! getNext ( NodeUtil ) ;
Distance : 5

136
Tree	return NodeUtil . getParent ( value ) ? null : NodeUtil ;
Code	return NodeUtil . getParent ( value ) ? null : NodeUtil ;
Distance : 10

137
Tree	return this == value ;
Code	return this == value ;
Distance : 3

138
Tree	return NodeUtil . getParent ( getBooleanProp ) ? null : NodeUtil ;
Code	return NodeUtil . getParent ( getBooleanProp ) ? null : NodeUtil ;
Distance : 10

139
Tree	return NodeUtil . getParent ( Token.GETELEM ) ? null : NodeUtil ;
Code	return NodeUtil . getParent ( Token.GETELEM ) ? null : NodeUtil ;
Distance : 10

140
Tree	return NodeUtil . getParent ( value ) ? null : getBooleanProp ;
Code	return NodeUtil . getParent ( value ) ? null : getBooleanProp ;
Distance : 10

141
Tree	return getBooleanProp + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return getBooleanProp + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

142
Tree	return ! getParent ;
Code	return ! getParent ;
Distance : 2

143
Tree	return ! getParent ( getBooleanProp ) ;
Code	return ! getParent ( getBooleanProp ) ;
Distance : 5

144
Tree	return this == IllegalStateException ;
Code	return this == IllegalStateException ;
Distance : 3

145
Tree	return this == Token.CALL ;
Code	return this == Token.CALL ;
Distance : 3

146
Tree	return Token.CALL ;
Code	return Token.CALL ;
Distance : 1

147
Tree	return this == Token.REGEXP ;
Code	return this == Token.REGEXP ;
Distance : 3

148
Tree	return NodeUtil + Token.NEW . getLastChild ( getBooleanProp ) ;
Code	return NodeUtil + Token.NEW . getLastChild ( getBooleanProp ) ;
Distance : 8

149
Tree	return NodeUtil + value . getLastChild ( getBooleanProp ) ;
Code	return NodeUtil + value . getLastChild ( getBooleanProp ) ;
Distance : 8

150
Tree	return NodeUtil ? Token.NEW : Token.NEW ;
Code	return NodeUtil ? Token.NEW : Token.NEW ;
Distance : 5

151
Tree	return STRING_CONSTANT + getBooleanProp + STRING_CONSTANT + NodeUtil ;
Code	return STRING_CONSTANT + getBooleanProp + STRING_CONSTANT + NodeUtil ;
Distance : 7

152
Tree	return NodeUtil . getParent ( getParent ) ? null : NodeUtil ;
Code	return NodeUtil . getParent ( getParent ) ? null : NodeUtil ;
Distance : 10

153
Tree	return new getParent ( NodeUtil ) ;
Code	return new getParent ( NodeUtil ) ;
Distance : 5

154
Tree	return Token.GETELEM ;
Code	return Token.GETELEM ;
Distance : 1

155
Tree	return new getBooleanProp ( Token.REGEXP ) ;
Code	return new getBooleanProp ( Token.REGEXP ) ;
Distance : 5

156
Tree	return getBooleanProp < < NUMBER_CONSTANT ;
Code	return getBooleanProp < < NUMBER_CONSTANT ;
Distance : 4

157
Tree	return STRING_CONSTANT + NodeUtil + STRING_CONSTANT + NodeUtil ;
Code	return STRING_CONSTANT + NodeUtil + STRING_CONSTANT + NodeUtil ;
Distance : 7

158
Tree	return new Token.NEW ( NodeUtil ) ;
Code	return new Token.NEW ( NodeUtil ) ;
Distance : 5

159
Tree	return NodeUtil . getLastChild () ? null : getBooleanProp ;
Code	return NodeUtil . getLastChild () ? null : getBooleanProp ;
Distance : 8

160
Tree	return NodeUtil + Token.NEW . getParent ( getParent ) ;
Code	return NodeUtil + Token.NEW . getParent ( getParent ) ;
Distance : 8

161
Tree	return value < < NUMBER_CONSTANT ;
Code	return value < < NUMBER_CONSTANT ;
Distance : 4

162
Tree	return Token.REGEXP % NUMBER_CONSTANT ;
Code	return Token.REGEXP % NUMBER_CONSTANT ;
Distance : 3

163
Tree	return STRING_CONSTANT + NodeUtil + STRING_CONSTANT + getFirstChild ;
Code	return STRING_CONSTANT + NodeUtil + STRING_CONSTANT + getFirstChild ;
Distance : 7

164
Tree	return NodeUtil . getParent ( NodeUtil ) ? null : NodeUtil ;
Code	return NodeUtil . getParent ( NodeUtil ) ? null : NodeUtil ;
Distance : 10

165
Tree	return NodeUtil . getParent ( getBooleanProp ) ? null : getBooleanProp ;
Code	return NodeUtil . getParent ( getBooleanProp ) ? null : getBooleanProp ;
Distance : 10

166
Tree	return getParent % NUMBER_CONSTANT ;
Code	return getParent % NUMBER_CONSTANT ;
Distance : 3

167
Tree	return Token.AND % NUMBER_CONSTANT ;
Code	return Token.AND % NUMBER_CONSTANT ;
Distance : 3

168
Tree	return NodeUtil + Token.NEW . getParent ( getBooleanProp ) ;
Code	return NodeUtil + Token.NEW . getParent ( getBooleanProp ) ;
Distance : 8

169
Tree	return Token.AND + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return Token.AND + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

170
Tree	return STRING_CONSTANT + value + STRING_CONSTANT + NodeUtil ;
Code	return STRING_CONSTANT + value + STRING_CONSTANT + NodeUtil ;
Distance : 7

171
Tree	super ( value , NodeUtil , value , NodeUtil , NodeUtil ) ;
Code	super ( value , NodeUtil , value , NodeUtil , NodeUtil ) ;
Distance : 12

172
Tree	return STRING_CONSTANT + getBooleanProp + STRING_CONSTANT + value ;
Code	return STRING_CONSTANT + getBooleanProp + STRING_CONSTANT + value ;
Distance : 7

173
Tree	return NodeUtil ;
Code	return NodeUtil ;
Distance : 1

174
Tree	return STRING_CONSTANT + NodeUtil . getParent ( getBooleanProp ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + NodeUtil . getParent ( getBooleanProp ) + STRING_CONSTANT ;
Distance : 10

175
Tree	super ( value , value , Token.NEW , NodeUtil , NodeUtil ) ;
Code	super ( value , value , Token.NEW , NodeUtil , NodeUtil ) ;
Distance : 12

176
Tree	return true ; Preconditions
Code	return true ; Preconditions
Distance : 2

177
Tree	return true ; ParamChecks
Code	return true ; ParamChecks
Distance : 2

178
Tree	return true ; -
Code	return true ; -
Distance : 2

179
Tree	return true ; f
Code	return true ; f
Distance : 2

180
Tree	return locals % NUMBER_CONSTANT ;
Code	return locals % NUMBER_CONSTANT ;
Distance : 3

181
Tree	return STRING_CONSTANT + NodeUtil + STRING_CONSTANT + Token.NEW ;
Code	return STRING_CONSTANT + NodeUtil + STRING_CONSTANT + Token.NEW ;
Distance : 7

182
Tree	return true ; Class
Code	return true ; Class
Distance : 2

183
Tree	return new NodeUtil ( NodeUtil ) ;
Code	return new NodeUtil ( NodeUtil ) ;
Distance : 5

184
Tree	return STRING_CONSTANT + NodeUtil + STRING_CONSTANT + getParent ;
Code	return STRING_CONSTANT + NodeUtil + STRING_CONSTANT + getParent ;
Distance : 7

185
Tree	return NodeUtil . getLastChild () ? null : value ;
Code	return NodeUtil . getLastChild () ? null : value ;
Distance : 8

186
Tree	return true ; MathRuntimeException
Code	return true ; MathRuntimeException
Distance : 2

187
Tree	return Token.ASSIGN % NUMBER_CONSTANT ;
Code	return Token.ASSIGN % NUMBER_CONSTANT ;
Distance : 3

188
Tree	return true ; {}
Code	return true ; {}
Distance : 2

189
Tree	return value % NUMBER_CONSTANT ;
Code	return value % NUMBER_CONSTANT ;
Distance : 3

190
Tree	return ! getType ( NodeUtil ) ;
Code	return ! getType ( NodeUtil ) ;
Distance : 5

191
Tree	return NodeUtil . getType () . value == NUMBER_CONSTANT ;
Code	return NodeUtil . getType () . value == NUMBER_CONSTANT ;
Distance : 8

192
Tree	return new Token.REGEXP ( NodeUtil ) ;
Code	return new Token.REGEXP ( NodeUtil ) ;
Distance : 5

193
Tree	return this == Token.NEW ;
Code	return this == Token.NEW ;
Distance : 3

194
Tree	return NodeUtil ? Token.NEW : getBooleanProp ;
Code	return NodeUtil ? Token.NEW : getBooleanProp ;
Distance : 5

195
Tree	return value + NUMBER_CONSTANT ;
Code	return value + NUMBER_CONSTANT ;
Distance : 3

196
Tree	super ( NodeUtil , NodeUtil , getType , NodeUtil , NodeUtil ) ;
Code	super ( NodeUtil , NodeUtil , getType , NodeUtil , NodeUtil ) ;
Distance : 12

197
Tree	return Token.NEW < < NUMBER_CONSTANT ;
Code	return Token.NEW < < NUMBER_CONSTANT ;
Distance : 4

198
Tree	return true ; Test
Code	return true ; Test
Distance : 2

199
Tree	super ( NodeUtil , NodeUtil , Token.NEW , NodeUtil , NodeUtil ) ;
Code	super ( NodeUtil , NodeUtil , Token.NEW , NodeUtil , NodeUtil ) ;
Distance : 12

========================================================================


========================================================================
Example Number: 18
Parent Code is: 
return TernaryValue.TRUE ;
-------------------------------------------------------------------------------
Child code is: 
return TernaryValue.UNKNOWN ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (40{val=TernaryValue.TRUE}) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (40{val=TernaryValue.UNKNOWN}) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/75/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	return TernaryValue.UNKNOWN ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Code	return TernaryValue.UNKNOWN ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Distance : 4

1
Tree	return Character . Character () . TernaryValue.UNKNOWN ;
Code	return Character . Character () . TernaryValue.UNKNOWN ;
Distance : 5

2
Tree	return Character . ; () . TernaryValue.UNKNOWN () ;
Code	return Character . ; () . TernaryValue.UNKNOWN () ;
Distance : 6

3
Tree	return TernaryValue.TRUE . TernaryValue.UNKNOWN () . TernaryValue.UNKNOWN ;
Code	return TernaryValue.TRUE . TernaryValue.UNKNOWN () . TernaryValue.UNKNOWN ;
Distance : 5

4
Tree	return Character . TernaryValue.TRUE () ? null : TernaryValue.UNKNOWN ;
Code	return Character . TernaryValue.TRUE () ? null : TernaryValue.UNKNOWN ;
Distance : 7

5
Tree	return Character . TernaryValue.TRUE () ? null : Character ;
Code	return Character . TernaryValue.TRUE () ? null : Character ;
Distance : 8

6
Tree	return Character . TernaryValue () >= NUMBER_CONSTANT ;
Code	return Character . TernaryValue () >= NUMBER_CONSTANT ;
Distance : 6

7
Tree	return TernaryValue.UNKNOWN . TernaryValue.UNKNOWN () ? null : Character ;
Code	return TernaryValue.UNKNOWN . TernaryValue.UNKNOWN () ? null : Character ;
Distance : 7

8
Tree	return TernaryValue.TRUE . TernaryValue.UNKNOWN () . Character ;
Code	return TernaryValue.TRUE . TernaryValue.UNKNOWN () . Character ;
Distance : 5

9
Tree	return default: ;
Code	return default: ;
Distance : 1

10
Tree	return Character . TernaryValue.UNKNOWN ( TernaryValue.TRUE ) ;
Code	return Character . TernaryValue.UNKNOWN ( TernaryValue.TRUE ) ;
Distance : 5

11
Tree	return Character . TernaryValue.TRUE ( TernaryValue.UNKNOWN ) ;
Code	return Character . TernaryValue.TRUE ( TernaryValue.UNKNOWN ) ;
Distance : 5

12
Tree	return c ;
Code	return c ;
Distance : 1

13
Tree	return TernaryValue.TRUE . TernaryValue () . TernaryValue.UNKNOWN ;
Code	return TernaryValue.TRUE . TernaryValue () . TernaryValue.UNKNOWN ;
Distance : 5

14
Tree	return Character . TernaryValue () . TernaryValue.UNKNOWN () ;
Code	return Character . TernaryValue () . TernaryValue.UNKNOWN () ;
Distance : 6

15
Tree	return TernaryValue.UNKNOWN . TernaryValue.UNKNOWN () ;
Code	return TernaryValue.UNKNOWN . TernaryValue.UNKNOWN () ;
Distance : 3

16
Tree	return Character . TernaryValue.TRUE () . TernaryValue.UNKNOWN ;
Code	return Character . TernaryValue.TRUE () . TernaryValue.UNKNOWN ;
Distance : 5

17
Tree	return ( Character ) TernaryValue.UNKNOWN . getType () ;
Code	return ( Character ) TernaryValue.UNKNOWN . getType () ;
Distance : 6

18
Tree	return TernaryValue.UNKNOWN . TernaryValue.UNKNOWN () ? null : TernaryValue.UNKNOWN ;
Code	return TernaryValue.UNKNOWN . TernaryValue.UNKNOWN () ? null : TernaryValue.UNKNOWN ;
Distance : 7

19
Tree	return ( TernaryValue.TRUE ) Character . getType () ;
Code	return ( TernaryValue.TRUE ) Character . getType () ;
Distance : 7

20
Tree	return this . TernaryValue.UNKNOWN . Character ;
Code	return this . TernaryValue.UNKNOWN . Character ;
Distance : 4

21
Tree	return this . Character . c ;
Code	return this . Character . c ;
Distance : 5

22
Tree	return new c ( STRING_CONSTANT ) ;
Code	return new c ( STRING_CONSTANT ) ;
Distance : 5

23
Tree	return Character . TernaryValue () . TernaryValue.UNKNOWN ;
Code	return Character . TernaryValue () . TernaryValue.UNKNOWN ;
Distance : 5

24
Tree	return Character ? TernaryValue.UNKNOWN : TernaryValue.TRUE ;
Code	return Character ? TernaryValue.UNKNOWN : TernaryValue.TRUE ;
Distance : 4

25
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; [
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; [
Distance : 14

26
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; notifyListeners
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; notifyListeners
Distance : 14

27
Tree	return Character . TernaryValue.UNKNOWN () . TernaryValue.TRUE () ;
Code	return Character . TernaryValue.UNKNOWN () . TernaryValue.TRUE () ;
Distance : 6

28
Tree	return this . Character . Character ;
Code	return this . Character . Character ;
Distance : 5

29
Tree	return TernaryValue.UNKNOWN . TernaryValue.UNKNOWN () . Character ;
Code	return TernaryValue.UNKNOWN . TernaryValue.UNKNOWN () . Character ;
Distance : 5

30
Tree	return TernaryValue.TRUE . TernaryValue.UNKNOWN () ? null : TernaryValue.UNKNOWN ;
Code	return TernaryValue.TRUE . TernaryValue.UNKNOWN () ? null : TernaryValue.UNKNOWN ;
Distance : 7

31
Tree	return Character ; options
Code	return Character ; options
Distance : 2

32
Tree	return new getType ( STRING_CONSTANT ) ;
Code	return new getType ( STRING_CONSTANT ) ;
Distance : 5

33
Tree	return TernaryValue . TernaryValue.UNKNOWN ( STRING_CONSTANT ) ;
Code	return TernaryValue . TernaryValue.UNKNOWN ( STRING_CONSTANT ) ;
Distance : 5

34
Tree	return TernaryValue.TRUE ;
Code	return TernaryValue.TRUE ;
Distance : 1

35
Tree	return TernaryValue.UNKNOWN ( STRING_CONSTANT ) ;
Code	return TernaryValue.UNKNOWN ( STRING_CONSTANT ) ;
Distance : 3

36
Tree	return new TernaryValue.UNKNOWN ( STRING_CONSTANT ) ;
Code	return new TernaryValue.UNKNOWN ( STRING_CONSTANT ) ;
Distance : 4

37
Tree	return Character . Character () . TernaryValue.UNKNOWN () ;
Code	return Character . Character () . TernaryValue.UNKNOWN () ;
Distance : 6

38
Tree	return TernaryValue.TRUE ;
Code	return TernaryValue.TRUE ;
Distance : 1

39
Tree	return TernaryValue.TRUE ( STRING_CONSTANT ) ;
Code	return TernaryValue.TRUE ( STRING_CONSTANT ) ;
Distance : 4

40
Tree	return TernaryValue ;
Code	return TernaryValue ;
Distance : 1

41
Tree	return new TernaryValue.TRUE ( STRING_CONSTANT ) ;
Code	return new TernaryValue.TRUE ( STRING_CONSTANT ) ;
Distance : 5

42
Tree	return Character . TernaryValue.UNKNOWN () ? null : TernaryValue.TRUE ;
Code	return Character . TernaryValue.UNKNOWN () ? null : TernaryValue.TRUE ;
Distance : 7

43
Tree	return new Character ( STRING_CONSTANT ) ;
Code	return new Character ( STRING_CONSTANT ) ;
Distance : 5

44
Tree	return Character . TernaryValue.TRUE () . TernaryValue.UNKNOWN ;
Code	return Character . TernaryValue.TRUE () . TernaryValue.UNKNOWN ;
Distance : 5

45
Tree	return continue; ;
Code	return continue; ;
Distance : 1

46
Tree	return TernaryValue . TernaryValue.UNKNOWN ( null ) ;
Code	return TernaryValue . TernaryValue.UNKNOWN ( null ) ;
Distance : 5

47
Tree	return TernaryValue.TRUE . TernaryValue.TRUE () ;
Code	return TernaryValue.TRUE . TernaryValue.TRUE () ;
Distance : 4

48
Tree	return TernaryValue.TRUE . TernaryValue.UNKNOWN () >= NUMBER_CONSTANT ;
Code	return TernaryValue.TRUE . TernaryValue.UNKNOWN () >= NUMBER_CONSTANT ;
Distance : 5

49
Tree	return getType ;
Code	return getType ;
Distance : 1

50
Tree	return Character . TernaryValue.TRUE ( null ) ;
Code	return Character . TernaryValue.TRUE ( null ) ;
Distance : 6

51
Tree	return new TernaryValue ( STRING_CONSTANT ) ;
Code	return new TernaryValue ( STRING_CONSTANT ) ;
Distance : 5

52
Tree	return null ;
Code	return null ;
Distance : 1

53
Tree	return Character ? TernaryValue.TRUE : TernaryValue.TRUE ;
Code	return Character ? TernaryValue.TRUE : TernaryValue.TRUE ;
Distance : 5

54
Tree	return Character . TernaryValue.TRUE ( STRING_CONSTANT ) ;
Code	return Character . TernaryValue.TRUE ( STRING_CONSTANT ) ;
Distance : 6

55
Tree	return Character . Character ( STRING_CONSTANT ) ;
Code	return Character . Character ( STRING_CONSTANT ) ;
Distance : 6

56
Tree	return c ( STRING_CONSTANT ) ;
Code	return c ( STRING_CONSTANT ) ;
Distance : 4

57
Tree	return TernaryValue.TRUE . TernaryValue.UNKNOWN ( STRING_CONSTANT ) ;
Code	return TernaryValue.TRUE . TernaryValue.UNKNOWN ( STRING_CONSTANT ) ;
Distance : 5

58
Tree	return TernaryValue.TRUE ( STRING_CONSTANT ) ;
Code	return TernaryValue.TRUE ( STRING_CONSTANT ) ;
Distance : 4

59
Tree	return TernaryValue.UNKNOWN . TernaryValue.UNKNOWN () >= NUMBER_CONSTANT ;
Code	return TernaryValue.UNKNOWN . TernaryValue.UNKNOWN () >= NUMBER_CONSTANT ;
Distance : 5

60
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

61
Tree	return this . TernaryValue.UNKNOWN . TernaryValue () ;
Code	return this . TernaryValue.UNKNOWN . TernaryValue () ;
Distance : 5

62
Tree	return TernaryValue.TRUE . TernaryValue.UNKNOWN () . TernaryValue.UNKNOWN ;
Code	return TernaryValue.TRUE . TernaryValue.UNKNOWN () . TernaryValue.UNKNOWN ;
Distance : 5

63
Tree	return STRING_CONSTANT + STRING_CONSTANT ;
Code	return STRING_CONSTANT + STRING_CONSTANT ;
Distance : 3

64
Tree	return Character . TernaryValue.UNKNOWN () . TernaryValue.UNKNOWN () ;
Code	return Character . TernaryValue.UNKNOWN () . TernaryValue.UNKNOWN () ;
Distance : 6

65
Tree	return TernaryValue.UNKNOWN ;
Code	return TernaryValue.UNKNOWN ;
Distance : 0

66
Tree	return Character . TernaryValue.UNKNOWN () ? null : TernaryValue.TRUE ;
Code	return Character . TernaryValue.UNKNOWN () ? null : TernaryValue.TRUE ;
Distance : 7

67
Tree	return Character . TernaryValue.TRUE () >= NUMBER_CONSTANT ;
Code	return Character . TernaryValue.TRUE () >= NUMBER_CONSTANT ;
Distance : 6

68
Tree	return TernaryValue.TRUE ;
Code	return TernaryValue.TRUE ;
Distance : 1

69
Tree	return STRING_CONSTANT + STRING_CONSTANT ; class
Code	return STRING_CONSTANT + STRING_CONSTANT ; class
Distance : 4

70
Tree	return this . TernaryValue.TRUE . c ;
Code	return this . TernaryValue.TRUE . c ;
Distance : 5

71
Tree	return Character . TernaryValue.UNKNOWN () ? null : TernaryValue.UNKNOWN ;
Code	return Character . TernaryValue.UNKNOWN () ? null : TernaryValue.UNKNOWN ;
Distance : 7

72
Tree	return Character ;
Code	return Character ;
Distance : 1

73
Tree	return STRING_CONSTANT + STRING_CONSTANT ; mock
Code	return STRING_CONSTANT + STRING_CONSTANT ; mock
Distance : 4

74
Tree	return null ; options
Code	return null ; options
Distance : 2

75
Tree	return STRING_CONSTANT + STRING_CONSTANT ; -
Code	return STRING_CONSTANT + STRING_CONSTANT ; -
Distance : 4

76
Tree	return this . Character . TernaryValue.TRUE () ;
Code	return this . Character . TernaryValue.TRUE () ;
Distance : 6

77
Tree	return STRING_CONSTANT + STRING_CONSTANT ; notifyListeners
Code	return STRING_CONSTANT + STRING_CONSTANT ; notifyListeners
Distance : 4

78
Tree	return TernaryValue.UNKNOWN ; i
Code	return TernaryValue.UNKNOWN ; i
Distance : 1

79
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; Override
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; Override
Distance : 14

80
Tree	return TernaryValue.UNKNOWN ; options
Code	return TernaryValue.UNKNOWN ; options
Distance : 1

81
Tree	return TernaryValue.UNKNOWN ( STRING_CONSTANT ) ; options
Code	return TernaryValue.UNKNOWN ( STRING_CONSTANT ) ; options
Distance : 4

82
Tree	return TernaryValue.TRUE ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Code	return TernaryValue.TRUE ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Distance : 4

83
Tree	return STRING_CONSTANT + STRING_CONSTANT ; MathRuntimeException
Code	return STRING_CONSTANT + STRING_CONSTANT ; MathRuntimeException
Distance : 4

84
Tree	return this . Character . ; ;
Code	return this . Character . ; ;
Distance : 5

85
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; -
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; -
Distance : 14

86
Tree	return Character . TernaryValue.TRUE () ;
Code	return Character . TernaryValue.TRUE () ;
Distance : 4

87
Tree	return Character . Character () >= NUMBER_CONSTANT ;
Code	return Character . Character () >= NUMBER_CONSTANT ;
Distance : 6

88
Tree	return ( TernaryValue ) Character . getType () ;
Code	return ( TernaryValue ) Character . getType () ;
Distance : 7

89
Tree	return this . Character . TernaryValue.UNKNOWN ;
Code	return this . Character . TernaryValue.UNKNOWN ;
Distance : 4

90
Tree	return TernaryValue.TRUE . TernaryValue.UNKNOWN () >= NUMBER_CONSTANT ;
Code	return TernaryValue.TRUE . TernaryValue.UNKNOWN () >= NUMBER_CONSTANT ;
Distance : 5

91
Tree	return TernaryValue.UNKNOWN . TernaryValue.UNKNOWN () . TernaryValue.UNKNOWN ;
Code	return TernaryValue.UNKNOWN . TernaryValue.UNKNOWN () . TernaryValue.UNKNOWN ;
Distance : 5

92
Tree	return TernaryValue.TRUE ? TernaryValue.TRUE : TernaryValue.UNKNOWN ;
Code	return TernaryValue.TRUE ? TernaryValue.TRUE : TernaryValue.UNKNOWN ;
Distance : 4

93
Tree	return TernaryValue.UNKNOWN . TernaryValue.UNKNOWN ( STRING_CONSTANT ) ;
Code	return TernaryValue.UNKNOWN . TernaryValue.UNKNOWN ( STRING_CONSTANT ) ;
Distance : 5

94
Tree	return TernaryValue.TRUE . TernaryValue.UNKNOWN ( null ) ;
Code	return TernaryValue.TRUE . TernaryValue.UNKNOWN ( null ) ;
Distance : 5

95
Tree	return ( Character ) c . TernaryValue.UNKNOWN () ;
Code	return ( Character ) c . TernaryValue.UNKNOWN () ;
Distance : 6

96
Tree	return TernaryValue.UNKNOWN ( STRING_CONSTANT ) ; i
Code	return TernaryValue.UNKNOWN ( STRING_CONSTANT ) ; i
Distance : 4

97
Tree	return TernaryValue ;
Code	return TernaryValue ;
Distance : 1

98
Tree	return TernaryValue.UNKNOWN . TernaryValue.UNKNOWN () . TernaryValue.UNKNOWN () ;
Code	return TernaryValue.UNKNOWN . TernaryValue.UNKNOWN () . TernaryValue.UNKNOWN () ;
Distance : 6

99
Tree	return Character . TernaryValue.UNKNOWN ( TernaryValue.UNKNOWN ) ;
Code	return Character . TernaryValue.UNKNOWN ( TernaryValue.UNKNOWN ) ;
Distance : 5

100
Tree	return TernaryValue.TRUE . TernaryValue.UNKNOWN () . TernaryValue.UNKNOWN () ;
Code	return TernaryValue.TRUE . TernaryValue.UNKNOWN () . TernaryValue.UNKNOWN () ;
Distance : 6

101
Tree	return TernaryValue.UNKNOWN . TernaryValue.TRUE () . TernaryValue.UNKNOWN ;
Code	return TernaryValue.UNKNOWN . TernaryValue.TRUE () . TernaryValue.UNKNOWN ;
Distance : 5

102
Tree	return Character ;
Code	return Character ;
Distance : 1

103
Tree	return Character . TernaryValue.TRUE () ;
Code	return Character . TernaryValue.TRUE () ;
Distance : 4

104
Tree	return TernaryValue.TRUE ;
Code	return TernaryValue.TRUE ;
Distance : 1

105
Tree	return this . TernaryValue.TRUE . TernaryValue.UNKNOWN () ;
Code	return this . TernaryValue.TRUE . TernaryValue.UNKNOWN () ;
Distance : 5

106
Tree	return return; ;
Code	return return; ;
Distance : 1

107
Tree	return Character . TernaryValue.UNKNOWN ( TernaryValue.TRUE ) ;
Code	return Character . TernaryValue.UNKNOWN ( TernaryValue.TRUE ) ;
Distance : 5

108
Tree	return null ; value
Code	return null ; value
Distance : 2

109
Tree	return STRING_CONSTANT + STRING_CONSTANT ; Override
Code	return STRING_CONSTANT + STRING_CONSTANT ; Override
Distance : 4

110
Tree	return new TernaryValue.TRUE ( STRING_CONSTANT ) ;
Code	return new TernaryValue.TRUE ( STRING_CONSTANT ) ;
Distance : 5

111
Tree	return TernaryValue ( STRING_CONSTANT ) ;
Code	return TernaryValue ( STRING_CONSTANT ) ;
Distance : 4

112
Tree	return Character ( STRING_CONSTANT ) ;
Code	return Character ( STRING_CONSTANT ) ;
Distance : 4

113
Tree	return this . TernaryValue.UNKNOWN . TernaryValue.UNKNOWN () ;
Code	return this . TernaryValue.UNKNOWN . TernaryValue.UNKNOWN () ;
Distance : 5

114
Tree	return Character . TernaryValue.UNKNOWN ( STRING_CONSTANT ) ;
Code	return Character . TernaryValue.UNKNOWN ( STRING_CONSTANT ) ;
Distance : 5

115
Tree	return null ; i
Code	return null ; i
Distance : 2

116
Tree	return TernaryValue.TRUE . TernaryValue.UNKNOWN () . TernaryValue.UNKNOWN () ;
Code	return TernaryValue.TRUE . TernaryValue.UNKNOWN () . TernaryValue.UNKNOWN () ;
Distance : 6

117
Tree	return Character . TernaryValue.TRUE () . TernaryValue.UNKNOWN () ;
Code	return Character . TernaryValue.TRUE () . TernaryValue.UNKNOWN () ;
Distance : 6

118
Tree	return break; ;
Code	return break; ;
Distance : 1

119
Tree	return TernaryValue.UNKNOWN ( STRING_CONSTANT ) ; Math
Code	return TernaryValue.UNKNOWN ( STRING_CONSTANT ) ; Math
Distance : 4

120
Tree	return this . Character . TernaryValue.UNKNOWN () ;
Code	return this . Character . TernaryValue.UNKNOWN () ;
Distance : 5

121
Tree	return TernaryValue.UNKNOWN ? TernaryValue.TRUE : TernaryValue.UNKNOWN ;
Code	return TernaryValue.UNKNOWN ? TernaryValue.TRUE : TernaryValue.UNKNOWN ;
Distance : 4

122
Tree	return Character . TernaryValue.UNKNOWN () ? null : Character ;
Code	return Character . TernaryValue.UNKNOWN () ? null : Character ;
Distance : 7

123
Tree	return TernaryValue . TernaryValue.UNKNOWN () >= NUMBER_CONSTANT ;
Code	return TernaryValue . TernaryValue.UNKNOWN () >= NUMBER_CONSTANT ;
Distance : 5

124
Tree	return this . Character . TernaryValue () ;
Code	return this . Character . TernaryValue () ;
Distance : 6

125
Tree	return Character . TernaryValue.TRUE ( STRING_CONSTANT ) ;
Code	return Character . TernaryValue.TRUE ( STRING_CONSTANT ) ;
Distance : 6

126
Tree	return TernaryValue.TRUE . TernaryValue.TRUE () . TernaryValue.UNKNOWN ;
Code	return TernaryValue.TRUE . TernaryValue.TRUE () . TernaryValue.UNKNOWN ;
Distance : 5

127
Tree	return getType ;
Code	return getType ;
Distance : 1

128
Tree	return TernaryValue.TRUE ? TernaryValue.UNKNOWN : TernaryValue.TRUE ;
Code	return TernaryValue.TRUE ? TernaryValue.UNKNOWN : TernaryValue.TRUE ;
Distance : 4

129
Tree	return TernaryValue.UNKNOWN . TernaryValue.UNKNOWN () . TernaryValue.TRUE ;
Code	return TernaryValue.UNKNOWN . TernaryValue.UNKNOWN () . TernaryValue.TRUE ;
Distance : 5

130
Tree	return ( Character ) c . getType () ;
Code	return ( Character ) c . getType () ;
Distance : 7

131
Tree	return TernaryValue.UNKNOWN . TernaryValue () . TernaryValue.UNKNOWN ;
Code	return TernaryValue.UNKNOWN . TernaryValue () . TernaryValue.UNKNOWN ;
Distance : 5

132
Tree	return Character . TernaryValue () ;
Code	return Character . TernaryValue () ;
Distance : 4

133
Tree	return Character . TernaryValue ( null ) ;
Code	return Character . TernaryValue ( null ) ;
Distance : 6

134
Tree	return Character ; Math
Code	return Character ; Math
Distance : 2

135
Tree	return this . TernaryValue.UNKNOWN . TernaryValue.TRUE () ;
Code	return this . TernaryValue.UNKNOWN . TernaryValue.TRUE () ;
Distance : 5

136
Tree	return Character . TernaryValue.TRUE ( null ) ;
Code	return Character . TernaryValue.TRUE ( null ) ;
Distance : 6

137
Tree	return this . TernaryValue.TRUE . TernaryValue.TRUE () ;
Code	return this . TernaryValue.TRUE . TernaryValue.TRUE () ;
Distance : 6

138
Tree	return Character . Character () ;
Code	return Character . Character () ;
Distance : 4

139
Tree	return c ;
Code	return c ;
Distance : 1

140
Tree	return TernaryValue.TRUE . TernaryValue.TRUE ( STRING_CONSTANT ) ;
Code	return TernaryValue.TRUE . TernaryValue.TRUE ( STRING_CONSTANT ) ;
Distance : 6

141
Tree	return STRING_CONSTANT + STRING_CONSTANT ; f
Code	return STRING_CONSTANT + STRING_CONSTANT ; f
Distance : 4

142
Tree	return Character . TernaryValue.UNKNOWN () ;
Code	return Character . TernaryValue.UNKNOWN () ;
Distance : 3

143
Tree	return STRING_CONSTANT + STRING_CONSTANT ; [
Code	return STRING_CONSTANT + STRING_CONSTANT ; [
Distance : 4

144
Tree	return Character . TernaryValue.TRUE () >= NUMBER_CONSTANT ;
Code	return Character . TernaryValue.TRUE () >= NUMBER_CONSTANT ;
Distance : 6

145
Tree	return Character . TernaryValue.UNKNOWN () . TernaryValue.TRUE ;
Code	return Character . TernaryValue.UNKNOWN () . TernaryValue.TRUE ;
Distance : 5

146
Tree	return this . TernaryValue.TRUE . TernaryValue.UNKNOWN ;
Code	return this . TernaryValue.TRUE . TernaryValue.UNKNOWN ;
Distance : 4

147
Tree	return Character . TernaryValue.UNKNOWN ( null ) ;
Code	return Character . TernaryValue.UNKNOWN ( null ) ;
Distance : 5

148
Tree	return getType ( STRING_CONSTANT ) ;
Code	return getType ( STRING_CONSTANT ) ;
Distance : 4

149
Tree	return TernaryValue.TRUE . TernaryValue.UNKNOWN ( Character ) ;
Code	return TernaryValue.TRUE . TernaryValue.UNKNOWN ( Character ) ;
Distance : 5

150
Tree	return TernaryValue.UNKNOWN ? TernaryValue.UNKNOWN : TernaryValue.TRUE ;
Code	return TernaryValue.UNKNOWN ? TernaryValue.UNKNOWN : TernaryValue.TRUE ;
Distance : 4

151
Tree	return ( Character ) getType . getType () ;
Code	return ( Character ) getType . getType () ;
Distance : 7

152
Tree	return Character . TernaryValue.UNKNOWN () . TernaryValue.UNKNOWN ;
Code	return Character . TernaryValue.UNKNOWN () . TernaryValue.UNKNOWN ;
Distance : 5

153
Tree	return Character ? TernaryValue.TRUE : TernaryValue.UNKNOWN ;
Code	return Character ? TernaryValue.TRUE : TernaryValue.UNKNOWN ;
Distance : 4

154
Tree	return TernaryValue.TRUE . TernaryValue.TRUE () >= NUMBER_CONSTANT ;
Code	return TernaryValue.TRUE . TernaryValue.TRUE () >= NUMBER_CONSTANT ;
Distance : 6

155
Tree	return TernaryValue.UNKNOWN ;
Code	return TernaryValue.UNKNOWN ;
Distance : 0

156
Tree	return this . TernaryValue.UNKNOWN . TernaryValue.UNKNOWN ;
Code	return this . TernaryValue.UNKNOWN . TernaryValue.UNKNOWN ;
Distance : 4

157
Tree	return Character ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Code	return Character ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Distance : 4

158
Tree	return TernaryValue.TRUE . TernaryValue.UNKNOWN () . TernaryValue.UNKNOWN ;
Code	return TernaryValue.TRUE . TernaryValue.UNKNOWN () . TernaryValue.UNKNOWN ;
Distance : 5

159
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; class
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; class
Distance : 14

160
Tree	return ( TernaryValue.UNKNOWN ) Character . getType () ;
Code	return ( TernaryValue.UNKNOWN ) Character . getType () ;
Distance : 6

161
Tree	return super(); ;
Code	return super(); ;
Distance : 1

162
Tree	return Character ; i
Code	return Character ; i
Distance : 2

163
Tree	return Character . TernaryValue.UNKNOWN () >= NUMBER_CONSTANT ;
Code	return Character . TernaryValue.UNKNOWN () >= NUMBER_CONSTANT ;
Distance : 5

164
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; array
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; array
Distance : 14

165
Tree	return TernaryValue.TRUE . TernaryValue.TRUE ( null ) ;
Code	return TernaryValue.TRUE . TernaryValue.TRUE ( null ) ;
Distance : 6

166
Tree	return Character . TernaryValue.UNKNOWN ( Character ) ;
Code	return Character . TernaryValue.UNKNOWN ( Character ) ;
Distance : 5

167
Tree	return TernaryValue.TRUE . TernaryValue.UNKNOWN () . TernaryValue.TRUE ;
Code	return TernaryValue.TRUE . TernaryValue.UNKNOWN () . TernaryValue.TRUE ;
Distance : 5

168
Tree	return TernaryValue . TernaryValue.UNKNOWN () . TernaryValue.UNKNOWN () ;
Code	return TernaryValue . TernaryValue.UNKNOWN () . TernaryValue.UNKNOWN () ;
Distance : 6

169
Tree	return ( Character ) Character . TernaryValue.UNKNOWN () ;
Code	return ( Character ) Character . TernaryValue.UNKNOWN () ;
Distance : 6

170
Tree	return ( TernaryValue.UNKNOWN ) c . getType () ;
Code	return ( TernaryValue.UNKNOWN ) c . getType () ;
Distance : 6

171
Tree	return TernaryValue.TRUE . TernaryValue.UNKNOWN ( TernaryValue.UNKNOWN ) ;
Code	return TernaryValue.TRUE . TernaryValue.UNKNOWN ( TernaryValue.UNKNOWN ) ;
Distance : 5

172
Tree	return TernaryValue.TRUE . TernaryValue.UNKNOWN ( STRING_CONSTANT ) ;
Code	return TernaryValue.TRUE . TernaryValue.UNKNOWN ( STRING_CONSTANT ) ;
Distance : 5

173
Tree	return TernaryValue.TRUE . TernaryValue.UNKNOWN () ;
Code	return TernaryValue.TRUE . TernaryValue.UNKNOWN () ;
Distance : 3

174
Tree	return Character . Character ( null ) ;
Code	return Character . Character ( null ) ;
Distance : 6

175
Tree	return TernaryValue.UNKNOWN . TernaryValue.UNKNOWN ( Character ) ;
Code	return TernaryValue.UNKNOWN . TernaryValue.UNKNOWN ( Character ) ;
Distance : 5

176
Tree	return this . TernaryValue.UNKNOWN . c ;
Code	return this . TernaryValue.UNKNOWN . c ;
Distance : 4

177
Tree	return this . TernaryValue.TRUE . TernaryValue.UNKNOWN () ;
Code	return this . TernaryValue.TRUE . TernaryValue.UNKNOWN () ;
Distance : 5

178
Tree	return TernaryValue.TRUE . TernaryValue.UNKNOWN ( null ) ;
Code	return TernaryValue.TRUE . TernaryValue.UNKNOWN ( null ) ;
Distance : 5

179
Tree	return Character . TernaryValue.UNKNOWN () . Character ;
Code	return Character . TernaryValue.UNKNOWN () . Character ;
Distance : 5

180
Tree	return TernaryValue.UNKNOWN . TernaryValue.UNKNOWN ( null ) ;
Code	return TernaryValue.UNKNOWN . TernaryValue.UNKNOWN ( null ) ;
Distance : 5

181
Tree	return TernaryValue.TRUE . TernaryValue.UNKNOWN () ;
Code	return TernaryValue.TRUE . TernaryValue.UNKNOWN () ;
Distance : 3

182
Tree	return TernaryValue.UNKNOWN . TernaryValue.UNKNOWN () . TernaryValue.UNKNOWN ;
Code	return TernaryValue.UNKNOWN . TernaryValue.UNKNOWN () . TernaryValue.UNKNOWN ;
Distance : 5

183
Tree	return this . TernaryValue . TernaryValue.UNKNOWN () ;
Code	return this . TernaryValue . TernaryValue.UNKNOWN () ;
Distance : 5

184
Tree	return Character . TernaryValue.UNKNOWN ( TernaryValue ) ;
Code	return Character . TernaryValue.UNKNOWN ( TernaryValue ) ;
Distance : 5

185
Tree	return Character . TernaryValue ( STRING_CONSTANT ) ;
Code	return Character . TernaryValue ( STRING_CONSTANT ) ;
Distance : 6

186
Tree	return new TernaryValue.UNKNOWN ( STRING_CONSTANT ) ; options
Code	return new TernaryValue.UNKNOWN ( STRING_CONSTANT ) ; options
Distance : 5

187
Tree	return TernaryValue . TernaryValue.UNKNOWN () ;
Code	return TernaryValue . TernaryValue.UNKNOWN () ;
Distance : 3

188
Tree	return ( Character ) Character . getType () ;
Code	return ( Character ) Character . getType () ;
Distance : 7

189
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; mock
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; mock
Distance : 14

190
Tree	return new TernaryValue.UNKNOWN ( STRING_CONSTANT ) ; i
Code	return new TernaryValue.UNKNOWN ( STRING_CONSTANT ) ; i
Distance : 5

191
Tree	return TernaryValue.UNKNOWN ; Math
Code	return TernaryValue.UNKNOWN ; Math
Distance : 1

192
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; MathRuntimeException
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; MathRuntimeException
Distance : 14

193
Tree	return null ; p
Code	return null ; p
Distance : 2

194
Tree	return STRING_CONSTANT + STRING_CONSTANT ; array
Code	return STRING_CONSTANT + STRING_CONSTANT ; array
Distance : 4

195
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; f
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; f
Distance : 14

196
Tree	return new TernaryValue.UNKNOWN ( STRING_CONSTANT ) ; Math
Code	return new TernaryValue.UNKNOWN ( STRING_CONSTANT ) ; Math
Distance : 5

197
Tree	return TernaryValue.TRUE . TernaryValue.UNKNOWN () ? null : Character ;
Code	return TernaryValue.TRUE . TernaryValue.UNKNOWN () ? null : Character ;
Distance : 7

198
Tree	return this . TernaryValue.UNKNOWN . ; ;
Code	return this . TernaryValue.UNKNOWN . ; ;
Distance : 4

199
Tree	return TernaryValue.UNKNOWN . TernaryValue.UNKNOWN ( TernaryValue.UNKNOWN ) ;
Code	return TernaryValue.UNKNOWN . TernaryValue.UNKNOWN ( TernaryValue.UNKNOWN ) ;
Distance : 5

========================================================================


========================================================================
Example Number: 19
Parent Code is: 
if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( c > NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=c}) (231{val=>}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=c}) (252{val=<=}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=sb}) (235{val=.}) (802{val=append}) (214{val=(}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (32 (802{val=appendHexJavaScriptRepresentation}) (214{val=(}) (800{val=sb}) (234{val=,}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=c}) (231{val=>}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=c}) (230{val=<}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=sb}) (235{val=.}) (802{val=append}) (214{val=(}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (32 (802{val=appendHexJavaScriptRepresentation}) (214{val=(}) (800{val=sb}) (234{val=,}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/73/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( c >= NUMBER_CONSTANT && s < NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && s < NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 10

1
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - s ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - s ; } else { sb . append ( c ) ; }
Distance : 14

2
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 3

3
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { charAt . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { charAt . append ( c ) ; }
Distance : 9

4
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { quote ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { quote ( c , c ) ; }
Distance : 6

5
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { charAt ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { charAt ( c , c ) ; }
Distance : 6

6
Tree	if ( c == && ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c == && ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 13

7
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { regionMatches ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { regionMatches ( c , c ) ; }
Distance : 4

8
Tree	if ( c == s ) { sb = c - i ; } else { sb . append ( c ) ; }
Code	if ( c == s ) { sb = c - i ; } else { sb . append ( c ) ; }
Distance : 15

9
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

10
Tree	if ( c >= NUMBER_CONSTANT ) { sb = s - i ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = s - i ; } else { sb . append ( c ) ; }
Distance : 14

11
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { i . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { i . append ( c ) ; }
Distance : 10

12
Tree	if ( c == String ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c == String ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 14

13
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { regionMatches ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { regionMatches ( c , c ) ; }
Distance : 7

14
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 11

15
Tree	if ( c && c == s ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == s ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

16
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

17
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 9

18
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Distance : 4

19
Tree	if ( c >= NUMBER_CONSTANT ) { sb = s - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = s - c ; } else { sb . append ( c ) ; }
Distance : 13

20
Tree	if ( c == s ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c == s ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 14

21
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - quote ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - quote ; } else { sb . append ( c ) ; }
Distance : 14

22
Tree	if ( c >= NUMBER_CONSTANT ) { toString = sb - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { toString = sb - c ; } else { sb . append ( c ) ; }
Distance : 14

23
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { s . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { s . append ( c ) ; }
Distance : 10

24
Tree	if ( c && c == String ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == String ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

25
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { regionMatches . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { regionMatches . append ( c ) ; }
Distance : 11

26
Tree	if ( c >= NUMBER_CONSTANT ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 13

27
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { s ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { s ( c , c ) ; }
Distance : 6

28
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = regionMatches ; } else { charAt ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = regionMatches ; } else { charAt ( c , c ) ; }
Distance : 8

29
Tree	if ( c == quote ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c == quote ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 14

30
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = && ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = && ; } else { append ( c , c ) ; }
Distance : 8

31
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 7

32
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = s ; } else { regionMatches ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = s ; } else { regionMatches ( c , c ) ; }
Distance : 8

33
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 11

34
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = sb ; } else { i ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = sb ; } else { i ( c , c ) ; }
Distance : 9

35
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( c , c ) ; } else { quote ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( c , c ) ; } else { quote ( c , c ) ; }
Distance : 7

36
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { toString . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { toString . append ( c ) ; }
Distance : 11

37
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 9

38
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = s ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = s ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

39
Tree	if ( c && c == regionMatches ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == regionMatches ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

40
Tree	if ( c == regionMatches ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c == regionMatches ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 14

41
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . append ( c ) ; }
Distance : 13

42
Tree	if ( c && c == regionMatches ) { sb = regionMatches ; } else { quote . append ( c ) ; }
Code	if ( c && c == regionMatches ) { sb = regionMatches ; } else { quote . append ( c ) ; }
Distance : 13

43
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( c , c ) ; } else { i ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( c , c ) ; } else { i ( c , c ) ; }
Distance : 7

44
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { i ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { i ( c , c ) ; }
Distance : 5

45
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { toString = - c ; } else { regionMatches . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { toString = - c ; } else { regionMatches . append ( c ) ; }
Distance : 11

46
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { i ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { i ( c , c ) ; }
Distance : 8

47
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { i ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { i ( c , c ) ; }
Distance : 4

48
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = append ; } else { regionMatches ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = append ; } else { regionMatches ( c , c ) ; }
Distance : 8

49
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { append . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { append . append ( c ) ; }
Distance : 11

50
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { append . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { append . append ( c ) ; }
Distance : 9

51
Tree	if ( c && c == <= ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == <= ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

52
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = append ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = append ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

53
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { quote . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { quote . append ( c ) ; }
Distance : 11

54
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = append ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = append ; } else { append ( c , c ) ; }
Distance : 8

55
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { quote . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { quote . append ( c ) ; }
Distance : 10

56
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - i ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - i ; } else { sb . append ( c ) ; }
Distance : 14

57
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { regionMatches . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { regionMatches . append ( c ) ; }
Distance : 10

58
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { i ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { i ( c , c ) ; }
Distance : 7

59
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { toString . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { toString . append ( c ) ; }
Distance : 9

60
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { toString . append ( c , c ) ; } else { regionMatches ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { toString . append ( c , c ) ; } else { regionMatches ( c , c ) ; }
Distance : 7

61
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { toString . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { toString . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

62
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { s ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { s ( c , c ) ; }
Distance : 6

63
Tree	if ( c >= NUMBER_CONSTANT && s != null ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && s != null ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

64
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { regionMatches ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { regionMatches ( c , c ) ; }
Distance : 5

65
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 4

66
Tree	if ( c == charAt ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c == charAt ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 14

67
Tree	if ( c == regionMatches ) { sb = c - s ; } else { sb . append ( c ) ; }
Code	if ( c == regionMatches ) { sb = c - s ; } else { sb . append ( c ) ; }
Distance : 15

68
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { quote . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { quote . append ( c ) ; }
Distance : 9

69
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { toString . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { toString . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 7

70
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( c , c ) ; } else { append ( c , c ) ; }
Distance : 7

71
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { regionMatches . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { regionMatches . append ( c ) ; }
Distance : 9

72
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { s . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { s . append ( c ) ; }
Distance : 11

73
Tree	if ( c && c == regionMatches ) { toString = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == regionMatches ) { toString = - c ; } else { sb . append ( c ) ; }
Distance : 13

74
Tree	if ( c == regionMatches ) { sb = s - c ; } else { sb . append ( c ) ; }
Code	if ( c == regionMatches ) { sb = s - c ; } else { sb . append ( c ) ; }
Distance : 14

75
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { charAt . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { charAt . append ( c ) ; }
Distance : 11

76
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { regionMatches ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { regionMatches ( c , c ) ; }
Distance : 8

77
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { toString = - c ; } else { regionMatches ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { toString = - c ; } else { regionMatches ( c , c ) ; }
Distance : 9

78
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( c , c ) ; } else { String ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( c , c ) ; } else { String ( c , c ) ; }
Distance : 7

79
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

80
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 5

81
Tree	if ( c && c == quote ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == quote ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

82
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = regionMatches ; } else { quote . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = regionMatches ; } else { quote . append ( c , c ) ; }
Distance : 11

83
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = regionMatches ; } else { quote . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = regionMatches ; } else { quote . append ( c ) ; }
Distance : 11

84
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { s ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { s ( c , c ) ; }
Distance : 5

85
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { charAt ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { charAt ( c , c ) ; }
Distance : 11

86
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = regionMatches ; } else { appendHexJavaScriptRepresentation . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = regionMatches ; } else { appendHexJavaScriptRepresentation . append ( c ) ; }
Distance : 10

87
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - i ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - i ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 11

88
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = && ; } else { regionMatches ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = && ; } else { regionMatches ( c , c ) ; }
Distance : 9

89
Tree	if ( c == regionMatches ) { sb = c - i ; } else { sb . append ( c ) ; }
Code	if ( c == regionMatches ) { sb = c - i ; } else { sb . append ( c ) ; }
Distance : 15

90
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { toString . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { toString . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 4

91
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { s . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { s . append ( c ) ; }
Distance : 9

92
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 5

93
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = sb ; } else { charAt ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = sb ; } else { charAt ( c , c ) ; }
Distance : 9

94
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = s ; } else { regionMatches . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = s ; } else { regionMatches . append ( c ) ; }
Distance : 11

95
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = sb ; } else { quote ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = sb ; } else { quote ( c , c ) ; }
Distance : 9

96
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = regionMatches ; } else { charAt ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = regionMatches ; } else { charAt ( c , c ) ; }
Distance : 9

97
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = && ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = && ; } else { append ( c , c ) ; }
Distance : 9

98
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { String ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { String ( c , c ) ; }
Distance : 5

99
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = regionMatches ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = regionMatches ; } else { append ( c , c ) ; }
Distance : 8

100
Tree	if ( c && c == regionMatches ) { sb = regionMatches ; } else { regionMatches . append ( c ) ; }
Code	if ( c && c == regionMatches ) { sb = regionMatches ; } else { regionMatches . append ( c ) ; }
Distance : 13

101
Tree	if ( c && c == regionMatches ) { sb = regionMatches ; } else { i . append ( c ) ; }
Code	if ( c && c == regionMatches ) { sb = regionMatches ; } else { i . append ( c ) ; }
Distance : 13

102
Tree	if ( c && c == regionMatches ) { sb = && ; } else { quote . append ( c ) ; }
Code	if ( c && c == regionMatches ) { sb = && ; } else { quote . append ( c ) ; }
Distance : 13

103
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { toString = sb ; } else { regionMatches ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { toString = sb ; } else { regionMatches ( c , c ) ; }
Distance : 10

104
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { toString . append ( c , c ) ; } else { regionMatches ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { toString . append ( c , c ) ; } else { regionMatches ( c , c ) ; }
Distance : 6

105
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - i ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - i ; } else { append ( c , c ) ; }
Distance : 12

106
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { toString . append ( c ) ; } else { regionMatches ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { toString . append ( c ) ; } else { regionMatches ( c , c ) ; }
Distance : 5

107
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = sb ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = sb ; } else { append ( c , c ) ; }
Distance : 9

108
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = regionMatches ; } else { regionMatches ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = regionMatches ; } else { regionMatches ( c , c ) ; }
Distance : 8

109
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { toString . append ( c , c ) ; } else { regionMatches ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { toString . append ( c , c ) ; } else { regionMatches ( c , c ) ; }
Distance : 7

110
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = regionMatches ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = regionMatches ; } else { append ( c , c ) ; }
Distance : 9

111
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb ; } else { quote . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb ; } else { quote . append ( c , c ) ; }
Distance : 11

112
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = && ; } else { regionMatches . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = && ; } else { regionMatches . append ( c , c ) ; }
Distance : 11

113
Tree	if ( c && c == regionMatches ) { sb = s ; } else { quote . append ( c ) ; }
Code	if ( c && c == regionMatches ) { sb = s ; } else { quote . append ( c ) ; }
Distance : 13

114
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { toString = - c ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { toString = - c ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

115
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { toString . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { toString . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 5

116
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { String ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { String ( c , c ) ; }
Distance : 4

117
Tree	if ( c >= NUMBER_CONSTANT ) { sb = s - i ; } else { regionMatches ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = s - i ; } else { regionMatches ( c , c ) ; }
Distance : 12

118
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { toString ( c , c ) ; } else { regionMatches ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { toString ( c , c ) ; } else { regionMatches ( c , c ) ; }
Distance : 8

119
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { quote ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { quote ( c , c ) ; }
Distance : 11

120
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = regionMatches ; } else { appendHexJavaScriptRepresentation . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = regionMatches ; } else { appendHexJavaScriptRepresentation . append ( c , c ) ; }
Distance : 10

121
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = if ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = if ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

122
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { regionMatches ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { regionMatches ( c , c ) ; }
Distance : 6

123
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { toString . append ( c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { toString . append ( c ) ; } else { append ( c , c ) ; }
Distance : 5

124
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 5

125
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = && ; } else { i . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = && ; } else { i . append ( c ) ; }
Distance : 11

126
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = sb ; } else { regionMatches ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = sb ; } else { regionMatches ( c , c ) ; }
Distance : 9

127
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { toString . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { toString . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

128
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { toString = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { toString = - c ; } else { sb . append ( c ) ; }
Distance : 10

129
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = regionMatches ; } else { i . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = regionMatches ; } else { i . append ( c , c ) ; }
Distance : 11

130
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = && ; } else { regionMatches ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = && ; } else { regionMatches ( c , c ) ; }
Distance : 8

131
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { regionMatches ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { regionMatches ( c , c ) ; }
Distance : 11

132
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { i ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { i ( c , c ) ; }
Distance : 6

133
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = s ; } else { regionMatches . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = s ; } else { regionMatches . append ( c , c ) ; }
Distance : 11

134
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = regionMatches ; } else { regionMatches . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = regionMatches ; } else { regionMatches . append ( c ) ; }
Distance : 11

135
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = && ; } else { quote . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = && ; } else { quote . append ( c ) ; }
Distance : 11

136
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = regionMatches ; } else { regionMatches . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = regionMatches ; } else { regionMatches . append ( c , c ) ; }
Distance : 11

137
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - String ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - String ; } else { sb . append ( c ) ; }
Distance : 14

138
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { regionMatches ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { regionMatches ( c , c ) ; }
Distance : 6

139
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { quote ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { quote ( c , c ) ; }
Distance : 4

140
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { String ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { String ( c , c ) ; }
Distance : 8

141
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 6

142
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { s ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { s ( c , c ) ; }
Distance : 7

143
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb ; } else { quote . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb ; } else { quote . append ( c , c ) ; }
Distance : 11

144
Tree	if ( c && c == && ) { sb = regionMatches ; } else { quote . append ( c ) ; }
Code	if ( c && c == && ) { sb = regionMatches ; } else { quote . append ( c ) ; }
Distance : 13

145
Tree	if ( c && c == regionMatches ) { sb = regionMatches ; } else { appendHexJavaScriptRepresentation . append ( c ) ; }
Code	if ( c && c == regionMatches ) { sb = regionMatches ; } else { appendHexJavaScriptRepresentation . append ( c ) ; }
Distance : 12

146
Tree	if ( c && c == append ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == append ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

147
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = s ; } else { quote . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = s ; } else { quote . append ( c , c ) ; }
Distance : 11

148
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = regionMatches ; } else { regionMatches ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = regionMatches ; } else { regionMatches ( c , c ) ; }
Distance : 9

149
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( c , c ) ; } else { charAt ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( c , c ) ; } else { charAt ( c , c ) ; }
Distance : 7

150
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = s ; } else { regionMatches ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = s ; } else { regionMatches ( c , c ) ; }
Distance : 9

151
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { quote ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { quote ( c , c ) ; }
Distance : 7

152
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { toString . append ( c , c ) ; } else { regionMatches ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { toString . append ( c , c ) ; } else { regionMatches ( c , c ) ; }
Distance : 8

153
Tree	if ( c && c == charAt ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == charAt ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

154
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = regionMatches ; } else { quote ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = regionMatches ; } else { quote ( c , c ) ; }
Distance : 8

155
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { String ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { String ( c , c ) ; }
Distance : 7

156
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { toString . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { toString . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

157
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = regionMatches ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = regionMatches ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

158
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = s ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = s ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

159
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { charAt ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { charAt ( c , c ) ; }
Distance : 4

160
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { s ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { s ( c , c ) ; }
Distance : 8

161
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = && ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = && ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

162
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { charAt ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { charAt ( c , c ) ; }
Distance : 8

163
Tree	if ( c && c == regionMatches ) { sb = && ; } else { regionMatches . append ( c ) ; }
Code	if ( c && c == regionMatches ) { sb = && ; } else { regionMatches . append ( c ) ; }
Distance : 13

164
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = && ; } else { i . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = && ; } else { i . append ( c , c ) ; }
Distance : 11

165
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { toString . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { toString . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 7

166
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( c , c ) ; } else { regionMatches ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( c , c ) ; } else { regionMatches ( c , c ) ; }
Distance : 7

167
Tree	if ( c >= NUMBER_CONSTANT ) { sb = toString - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = toString - c ; } else { sb . append ( c ) ; }
Distance : 13

168
Tree	if ( c && c == regionMatches ) { sb = s ; } else { regionMatches . append ( c ) ; }
Code	if ( c && c == regionMatches ) { sb = s ; } else { regionMatches . append ( c ) ; }
Distance : 13

169
Tree	if ( c && c == String ) { sb = regionMatches ; } else { quote . append ( c ) ; }
Code	if ( c && c == String ) { sb = regionMatches ; } else { quote . append ( c ) ; }
Distance : 13

170
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { quote ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { quote ( c , c ) ; }
Distance : 5

171
Tree	if ( c && c == i ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == i ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

172
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { charAt ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { charAt ( c , c ) ; }
Distance : 7

173
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { quote ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { quote ( c , c ) ; }
Distance : 8

174
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - i ; } else { regionMatches ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - i ; } else { regionMatches ( c , c ) ; }
Distance : 12

175
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 10

176
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 10

177
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = regionMatches ; } else { quote ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = regionMatches ; } else { quote ( c , c ) ; }
Distance : 9

178
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = s ; } else { quote . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = s ; } else { quote . append ( c ) ; }
Distance : 11

179
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { append ( c , c ) ; }
Distance : 11

180
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { append ( c , c ) ; }
Distance : 8

181
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { charAt ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { charAt ( c , c ) ; }
Distance : 6

182
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 6

183
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { i ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { i ( c , c ) ; }
Distance : 6

184
Tree	if ( c && c == sb ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == sb ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

185
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb ; } else { quote . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb ; } else { quote . append ( c ) ; }
Distance : 11

186
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { toString = - c ; } else { quote . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { toString = - c ; } else { quote . append ( c ) ; }
Distance : 11

187
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { toString = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { toString = - c ; } else { sb . append ( c ) ; }
Distance : 12

188
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { quote ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { quote ( c , c ) ; }
Distance : 6

189
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = regionMatches ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = regionMatches ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

190
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { charAt ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { charAt ( c , c ) ; }
Distance : 5

191
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = regionMatches ; } else { i . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = regionMatches ; } else { i . append ( c ) ; }
Distance : 11

192
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb ; } else { regionMatches . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb ; } else { regionMatches . append ( c ) ; }
Distance : 11

193
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { append . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { append . append ( c ) ; }
Distance : 10

194
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

195
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = sb ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = sb ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

196
Tree	if ( c >= NUMBER_CONSTANT ) { sb = s - c ; } else { regionMatches ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = s - c ; } else { regionMatches ( c , c ) ; }
Distance : 11

197
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { regionMatches ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { regionMatches ( c , c ) ; }
Distance : 8

198
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { charAt . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { charAt . append ( c ) ; }
Distance : 10

199
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 10

========================================================================


========================================================================
Example Number: 20
Parent Code is: 
{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
-------------------------------------------------------------------------------
Child code is: 
{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , false ) ; jsDocParameter = jsDocParameter . getNext () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=defineSlot}) (214{val=(}) (800{val=astParameter}) (234{val=,}) (800{val=functionNode}) (234{val=,}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getJSType}) (216{val=()})) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (21 (7 (800{val=jsDocParameter}) (204{val==}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getNext}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=defineSlot}) (214{val=(}) (800{val=astParameter}) (234{val=,}) (800{val=functionNode}) (234{val=,}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getJSType}) (216{val=()})) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (21 (7 (800{val=jsDocParameter}) (204{val==}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getNext}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/70/parent/src_com_google_javascript_jscomp_TypedScopeCreator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ defineSlot . defineSlot ( astParameter , null , functionType . getJSType () ) ; defineSlot = functionType . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , null , functionType . getJSType () ) ; defineSlot = functionType . getNext () ; }
Distance : 8

1
Tree	{ this . defineSlot . defineSlot ( astParameter . getFirstChild () ) ; defineSlot = astParameter . getNext () ; }
Code	{ this . defineSlot . defineSlot ( astParameter . getFirstChild () ) ; defineSlot = astParameter . getNext () ; }
Distance : 12

2
Tree	{ defineSlot . defineSlot ( STRING_CONSTANT , functionType . getJSType () , functionType . getNext () ) ; children = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( STRING_CONSTANT , functionType . getJSType () , functionType . getNext () ) ; children = astParameter . getNext () ; }
Distance : 11

3
Tree	{ defineSlot . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , children . getNext () ) ; children = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , children . getNext () ) ; children = astParameter . getNext () ; }
Distance : 11

4
Tree	{ this . defineSlot . defineSlot ( astParameter . getJSType () ) ; children = astParameter . getNext () ; }
Code	{ this . defineSlot . defineSlot ( astParameter . getJSType () ) ; children = astParameter . getNext () ; }
Distance : 11

5
Tree	{ this . defineSlot . defineSlot ( astParameter . getFirstChild () ) ; children = children . getNext () ; }
Code	{ this . defineSlot . defineSlot ( astParameter . getFirstChild () ) ; children = children . getNext () ; }
Distance : 12

6
Tree	{ defineSlot . defineSlot ( STRING_CONSTANT , functionType . getJSType () , functionType . getFirstChild () ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( STRING_CONSTANT , functionType . getJSType () , functionType . getFirstChild () ) ; defineSlot = astParameter . getNext () ; }
Distance : 11

7
Tree	{ this . defineSlot . defineSlot ( astParameter . getNext () ) ; children = functionType . getNext () ; }
Code	{ this . defineSlot . defineSlot ( astParameter . getNext () ) ; children = functionType . getNext () ; }
Distance : 12

8
Tree	{ defineSlot ( astParameter , functionType . getJSType () , functionType . getNext () ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionType . getJSType () , functionType . getNext () ) ; defineSlot = astParameter . getNext () ; }
Distance : 9

9
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , functionType . getNext () ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , functionType . getNext () ) ; defineSlot = astParameter . getNext () ; }
Distance : 8

10
Tree	{ this . defineSlot . defineSlot ( astParameter . getNext () ) ; defineSlot = children . getNext () ; }
Code	{ this . defineSlot . defineSlot ( astParameter . getNext () ) ; defineSlot = children . getNext () ; }
Distance : 12

11
Tree	{ defineSlot ( astParameter , functionType . getJSType () , functionType . getNext () ) ; children = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionType . getJSType () , functionType . getNext () ) ; children = astParameter . getNext () ; }
Distance : 9

12
Tree	{ this . defineSlot . defineSlot ( astParameter . getFirstChild () ) ; children = functionType . getNext () ; }
Code	{ this . defineSlot . defineSlot ( astParameter . getFirstChild () ) ; children = functionType . getNext () ; }
Distance : 12

13
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , functionType . getNext () ) ; children = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , functionType . getNext () ) ; children = astParameter . getNext () ; }
Distance : 8

14
Tree	{ defineSlot ( astParameter , functionType . getJSType () , functionType . getFirstChild () ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionType . getJSType () , functionType . getFirstChild () ) ; defineSlot = astParameter . getNext () ; }
Distance : 9

15
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , functionType . getFirstChild () ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , functionType . getFirstChild () ) ; defineSlot = astParameter . getNext () ; }
Distance : 8

16
Tree	{ defineSlot ( astParameter , functionType . getJSType () , children . getNext () ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionType . getJSType () , children . getNext () ) ; defineSlot = astParameter . getNext () ; }
Distance : 9

17
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , children . getNext () ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , children . getNext () ) ; defineSlot = astParameter . getNext () ; }
Distance : 8

18
Tree	{ defineSlot ( astParameter , functionType . getJSType () , functionType . getFirstChild () ) ; children = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionType . getJSType () , functionType . getFirstChild () ) ; children = astParameter . getNext () ; }
Distance : 9

19
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , functionType . getFirstChild () ) ; children = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , functionType . getFirstChild () ) ; children = astParameter . getNext () ; }
Distance : 8

20
Tree	{ defineSlot . defineSlot ( STRING_CONSTANT , defineSlot , functionType . getJSType () ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( STRING_CONSTANT , defineSlot , functionType . getJSType () ) ; defineSlot = astParameter . getNext () ; }
Distance : 9

21
Tree	{ defineSlot . defineSlot () . getJSType ( astParameter , functionNode . getJSType () ) ; defineSlot = children . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( astParameter , functionNode . getJSType () ) ; defineSlot = children . getNext () ; }
Distance : 11

22
Tree	{ defineSlot . defineSlot ( STRING_CONSTANT , defineSlot , astParameter . getJSType () ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( STRING_CONSTANT , defineSlot , astParameter . getJSType () ) ; defineSlot = astParameter . getNext () ; }
Distance : 9

23
Tree	{ defineSlot . defineSlot ( STRING_CONSTANT , defineSlot , children . getJSType () ) ; children = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( STRING_CONSTANT , defineSlot , children . getJSType () ) ; children = astParameter . getNext () ; }
Distance : 9

24
Tree	{ defineSlot . defineSlot ( astParameter , null , functionType . getJSType () ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , null , functionType . getJSType () ) ; defineSlot = astParameter . getNext () ; }
Distance : 8

25
Tree	{ defineSlot . defineSlot () . getJSType ( astParameter , functionNode . getJSType () ) ; children = children . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( astParameter , functionNode . getJSType () ) ; children = children . getNext () ; }
Distance : 11

26
Tree	{ defineSlot . defineSlot ( STRING_CONSTANT , defineSlot , functionType . getJSType () ) ; children = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( STRING_CONSTANT , defineSlot , functionType . getJSType () ) ; children = astParameter . getNext () ; }
Distance : 9

27
Tree	{ defineSlot . defineSlot ( STRING_CONSTANT , defineSlot , astParameter . getJSType () ) ; children = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( STRING_CONSTANT , defineSlot , astParameter . getJSType () ) ; children = astParameter . getNext () ; }
Distance : 9

28
Tree	{ defineSlot . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , functionType . getNext () ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , functionType . getNext () ) ; defineSlot = astParameter . getNext () ; }
Distance : 11

29
Tree	{ this . defineSlot . defineSlot ( astParameter . getNext () ) ; children = astParameter . getNext () ; }
Code	{ this . defineSlot . defineSlot ( astParameter . getNext () ) ; children = astParameter . getNext () ; }
Distance : 12

30
Tree	{ defineSlot . defineSlot () . getJSType ( STRING_CONSTANT , defineSlot ) ; children = astParameter . getFirstChild () ; }
Code	{ defineSlot . defineSlot () . getJSType ( STRING_CONSTANT , defineSlot ) ; children = astParameter . getFirstChild () ; }
Distance : 12

31
Tree	{ defineSlot . defineSlot () . getJSType ( STRING_CONSTANT , defineSlot ) ; children = getNext . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( STRING_CONSTANT , defineSlot ) ; children = getNext . getNext () ; }
Distance : 11

32
Tree	{ defineSlot . defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT ) ; defineSlot = astParameter . getNext () ; }
Distance : 10

33
Tree	{ defineSlot ( astParameter , functionType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; defineSlot = astParameter . getNext () ; }
Distance : 10

34
Tree	{ defineSlot . defineSlot () . getJSType ( STRING_CONSTANT , defineSlot ) ; astParameter = children . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( STRING_CONSTANT , defineSlot ) ; astParameter = children . getNext () ; }
Distance : 11

35
Tree	{ defineSlot ( astParameter , functionType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; children = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; children = astParameter . getNext () ; }
Distance : 10

36
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; defineSlot = astParameter . getNext () ; }
Distance : 9

37
Tree	{ defineSlot . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; defineSlot = functionType . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; defineSlot = functionType . getNext () ; }
Distance : 11

38
Tree	{ defineSlot . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; defineSlot = children . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; defineSlot = children . getNext () ; }
Distance : 11

39
Tree	{ defineSlot . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; children = functionType . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; children = functionType . getNext () ; }
Distance : 11

40
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; children = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; children = astParameter . getNext () ; }
Distance : 9

41
Tree	{ defineSlot ( astParameter , functionType . getJSType () , true ) ; children = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionType . getJSType () , true ) ; children = astParameter . getNext () ; }
Distance : 6

42
Tree	{ defineSlot . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 11

43
Tree	{ defineSlot . defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT ) ; children = children . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT ) ; children = children . getNext () ; }
Distance : 10

44
Tree	{ defineSlot ( astParameter , functionType . getJSType () , true ) ; children = children . getNext () ; }
Code	{ defineSlot ( astParameter , functionType . getJSType () , true ) ; children = children . getNext () ; }
Distance : 6

45
Tree	{ defineSlot . defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT ) ; children = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT ) ; children = astParameter . getNext () ; }
Distance : 10

46
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; children = children . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; children = children . getNext () ; }
Distance : 5

47
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; children = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; children = astParameter . getNext () ; }
Distance : 5

48
Tree	{ defineSlot ( astParameter , functionType . getJSType () , true ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionType . getJSType () , true ) ; defineSlot = astParameter . getNext () ; }
Distance : 6

49
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; defineSlot = astParameter . getNext () ; }
Distance : 5

50
Tree	{ defineSlot ( astParameter , functionNode , children , astParameter , functionType . getJSType () , null , null ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , children , astParameter , functionType . getJSType () , null , null ) ; defineSlot = astParameter . getNext () ; }
Distance : 10

51
Tree	{ defineSlot ( astParameter , functionType , children , astParameter , functionType . getJSType () , null , null ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionType , children , astParameter , functionType . getJSType () , null , null ) ; defineSlot = astParameter . getNext () ; }
Distance : 11

52
Tree	{ defineSlot ( astParameter , functionNode , children , astParameter , functionType . getJSType () , null , null ) ; children = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , children , astParameter , functionType . getJSType () , null , null ) ; children = astParameter . getNext () ; }
Distance : 10

53
Tree	{ defineSlot ( astParameter , functionType , children , astParameter , functionType . getJSType () , null , null ) ; children = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionType , children , astParameter , functionType . getJSType () , null , null ) ; children = astParameter . getNext () ; }
Distance : 11

54
Tree	{ defineSlot ( astParameter , functionType , children , astParameter , astParameter . getJSType () , null , null ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionType , children , astParameter , astParameter . getJSType () , null , null ) ; defineSlot = astParameter . getNext () ; }
Distance : 11

55
Tree	{ defineSlot ( astParameter , functionNode , children , astParameter , astParameter . getJSType () , null , null ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , children , astParameter , astParameter . getJSType () , null , null ) ; defineSlot = astParameter . getNext () ; }
Distance : 10

56
Tree	{ defineSlot ( astParameter , functionType , children , astParameter , astParameter . getJSType () , null , null ) ; children = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionType , children , astParameter , astParameter . getJSType () , null , null ) ; children = astParameter . getNext () ; }
Distance : 11

57
Tree	{ defineSlot ( astParameter , functionType . getJSType () , true ) ; defineSlot = children . getNext () ; }
Code	{ defineSlot ( astParameter , functionType . getJSType () , true ) ; defineSlot = children . getNext () ; }
Distance : 6

58
Tree	{ defineSlot ( astParameter , functionType , astParameter , astParameter , functionType . getJSType () , null , null ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionType , astParameter , astParameter , functionType . getJSType () , null , null ) ; defineSlot = astParameter . getNext () ; }
Distance : 11

59
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; defineSlot = children . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; defineSlot = children . getNext () ; }
Distance : 5

60
Tree	{ defineSlot ( astParameter , functionNode , children , astParameter , astParameter . getJSType () , null , null ) ; children = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , children , astParameter , astParameter . getJSType () , null , null ) ; children = astParameter . getNext () ; }
Distance : 10

61
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , functionType . getJSType () , null , null ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , functionType . getJSType () , null , null ) ; defineSlot = astParameter . getNext () ; }
Distance : 10

62
Tree	{ defineSlot ( astParameter , functionType . getJSType () , false ) ; children = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionType . getJSType () , false ) ; children = astParameter . getNext () ; }
Distance : 5

63
Tree	{ defineSlot . defineSlot () . getJSType ( astParameter , functionNode . getJSType () ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( astParameter , functionNode . getJSType () ) ; defineSlot = astParameter . getNext () ; }
Distance : 11

64
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , false ) ; children = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , false ) ; children = astParameter . getNext () ; }
Distance : 4

65
Tree	{ defineSlot . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; children = astParameter . getFirstChild () ; }
Code	{ defineSlot . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; children = astParameter . getFirstChild () ; }
Distance : 12

66
Tree	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; defineSlot = functionType . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; defineSlot = functionType . getNext () ; }
Distance : 10

67
Tree	{ defineSlot . defineSlot () . getJSType ( astParameter , functionType . getJSType () ) ; children = children . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( astParameter , functionType . getJSType () ) ; children = children . getNext () ; }
Distance : 12

68
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , children . getNext () ) ; children = astParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , children . getNext () ) ; children = astParameter . getNext () ; }
Distance : 8

69
Tree	{ defineSlot . defineSlot () . getJSType ( STRING_CONSTANT , defineSlot ) ; children = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( STRING_CONSTANT , defineSlot ) ; children = astParameter . getNext () ; }
Distance : 11

70
Tree	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; children = children . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; children = children . getNext () ; }
Distance : 9

71
Tree	{ defineSlot . defineSlot () . getJSType ( astParameter , functionNode . getJSType () ) ; children = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( astParameter , functionNode . getJSType () ) ; children = astParameter . getNext () ; }
Distance : 11

72
Tree	{ defineSlot . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; children = getNext . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; children = getNext . getNext () ; }
Distance : 11

73
Tree	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; children = functionType . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; children = functionType . getNext () ; }
Distance : 10

74
Tree	{ defineSlot . defineSlot () . getJSType ( STRING_CONSTANT , defineSlot ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( STRING_CONSTANT , defineSlot ) ; defineSlot = astParameter . getNext () ; }
Distance : 11

75
Tree	{ defineSlot . defineSlot () . getJSType ( astParameter , functionType . getJSType () ) ; defineSlot = functionType . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( astParameter , functionType . getJSType () ) ; defineSlot = functionType . getNext () ; }
Distance : 12

76
Tree	{ defineSlot . defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT ) ; defineSlot = children . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT ) ; defineSlot = children . getNext () ; }
Distance : 10

77
Tree	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; defineSlot = astParameter . getNext () ; }
Distance : 9

78
Tree	{ defineSlot . defineSlot () . getJSType ( astParameter , functionType . getJSType () ) ; children = functionType . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( astParameter , functionType . getJSType () ) ; children = functionType . getNext () ; }
Distance : 12

79
Tree	{ defineSlot . defineSlot () . getJSType ( astParameter , functionType . getJSType () ) ; children = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( astParameter , functionType . getJSType () ) ; children = astParameter . getNext () ; }
Distance : 12

80
Tree	{ defineSlot . defineSlot () . getJSType ( STRING_CONSTANT , defineSlot ) ; children = children . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( STRING_CONSTANT , defineSlot ) ; children = children . getNext () ; }
Distance : 11

81
Tree	{ defineSlot . defineSlot () . getJSType ( STRING_CONSTANT , defineSlot ) ; defineSlot = children . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( STRING_CONSTANT , defineSlot ) ; defineSlot = children . getNext () ; }
Distance : 11

82
Tree	{ defineSlot . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; children = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; children = astParameter . getNext () ; }
Distance : 11

83
Tree	{ defineSlot ( astParameter , functionType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; defineSlot = children . getNext () ; }
Code	{ defineSlot ( astParameter , functionType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; defineSlot = children . getNext () ; }
Distance : 10

84
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , children . getFirstChild () ) ; children = astParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , children . getFirstChild () ) ; children = astParameter . getNext () ; }
Distance : 8

85
Tree	{ defineSlot . defineSlot ( STRING_CONSTANT , defineSlot , children . getJSType () ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( STRING_CONSTANT , defineSlot , children . getJSType () ) ; defineSlot = astParameter . getNext () ; }
Distance : 9

86
Tree	{ defineSlot . defineSlot () . getJSType ( STRING_CONSTANT , defineSlot ) ; children = functionType . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( STRING_CONSTANT , defineSlot ) ; children = functionType . getNext () ; }
Distance : 11

87
Tree	{ defineSlot . defineSlot () . getJSType ( STRING_CONSTANT , defineSlot ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( STRING_CONSTANT , defineSlot ) ; astParameter = astParameter . getNext () ; }
Distance : 11

88
Tree	{ defineSlot . defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT ) ; children = astParameter . getFirstChild () ; }
Code	{ defineSlot . defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT ) ; children = astParameter . getFirstChild () ; }
Distance : 11

89
Tree	{ defineSlot . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; defineSlot = astParameter . getNext () ; }
Distance : 11

90
Tree	{ defineSlot ( astParameter , functionType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; children = children . getNext () ; }
Code	{ defineSlot ( astParameter , functionType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; children = children . getNext () ; }
Distance : 10

91
Tree	{ defineSlot . defineSlot ( astParameter , null , functionType . getJSType () ) ; children = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , null , functionType . getJSType () ) ; children = astParameter . getNext () ; }
Distance : 8

92
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getNext () ) ; children = astParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getNext () ) ; children = astParameter . getNext () ; }
Distance : 8

93
Tree	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , this ) ; defineSlot = children . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , this ) ; defineSlot = children . getNext () ; }
Distance : 8

94
Tree	{ defineSlot . defineSlot () ; children = children . getNext () ; }
Code	{ defineSlot . defineSlot () ; children = children . getNext () ; }
Distance : 12

95
Tree	{ defineSlot . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; children = children . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; children = children . getNext () ; }
Distance : 11

96
Tree	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; children = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; children = astParameter . getNext () ; }
Distance : 9

97
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , children . getNext () ) ; defineSlot = functionType . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , children . getNext () ) ; defineSlot = functionType . getNext () ; }
Distance : 8

98
Tree	{ defineSlot . defineSlot () ; children = children . getJSType () ; }
Code	{ defineSlot . defineSlot () ; children = children . getJSType () ; }
Distance : 13

99
Tree	{ defineSlot . defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT ) ; children = getNext . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT ) ; children = getNext . getNext () ; }
Distance : 10

100
Tree	{ defineSlot . defineSlot () . getJSType ( STRING_CONSTANT , defineSlot ) ; defineSlot = functionType . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( STRING_CONSTANT , defineSlot ) ; defineSlot = functionType . getNext () ; }
Distance : 11

101
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , functionType . getNext () ) ; children = astParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , functionType . getNext () ) ; children = astParameter . getNext () ; }
Distance : 8

102
Tree	{ defineSlot . defineSlot () ; children = astParameter . getJSType () ; }
Code	{ defineSlot . defineSlot () ; children = astParameter . getJSType () ; }
Distance : 13

103
Tree	{ defineSlot . defineSlot () ; children = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot () ; children = astParameter . getNext () ; }
Distance : 12

104
Tree	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , this ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , this ) ; defineSlot = astParameter . getNext () ; }
Distance : 7

105
Tree	{ defineSlot . defineSlot () ; defineSlot = children . getNext () ; }
Code	{ defineSlot . defineSlot () ; defineSlot = children . getNext () ; }
Distance : 12

106
Tree	{ defineSlot . defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

107
Tree	{ defineSlot . defineSlot () ; defineSlot = children . getJSType () ; }
Code	{ defineSlot . defineSlot () ; defineSlot = children . getJSType () ; }
Distance : 13

108
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , children . getNext () ) ; defineSlot = children . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , children . getNext () ) ; defineSlot = children . getNext () ; }
Distance : 8

109
Tree	{ defineSlot . defineSlot () ; defineSlot = astParameter . getJSType () ; }
Code	{ defineSlot . defineSlot () ; defineSlot = astParameter . getJSType () ; }
Distance : 13

110
Tree	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , this ) ; children = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , this ) ; children = astParameter . getNext () ; }
Distance : 8

111
Tree	{ defineSlot . defineSlot () ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot () ; defineSlot = astParameter . getNext () ; }
Distance : 12

112
Tree	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; children = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; children = astParameter . getNext () ; }
Distance : 10

113
Tree	{ defineSlot . defineSlot ( astParameter , null , children . getJSType () ) ; children = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , null , children . getJSType () ) ; children = astParameter . getNext () ; }
Distance : 8

114
Tree	{ defineSlot . defineSlot ( STRING_CONSTANT , defineSlot , children . getJSType () ) ; defineSlot = children . getNext () ; }
Code	{ defineSlot . defineSlot ( STRING_CONSTANT , defineSlot , children . getJSType () ) ; defineSlot = children . getNext () ; }
Distance : 9

115
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , children . getNext () ) ; children = functionType . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , children . getNext () ) ; children = functionType . getNext () ; }
Distance : 8

116
Tree	{ defineSlot . defineSlot ( astParameter , null , functionType . getJSType () ) ; children = children . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , null , functionType . getJSType () ) ; children = children . getNext () ; }
Distance : 8

117
Tree	{ defineSlot . defineSlot ( astParameter , null , astParameter . getJSType () ) ; children = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , null , astParameter . getJSType () ) ; children = astParameter . getNext () ; }
Distance : 8

118
Tree	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , this ) ; defineSlot = children . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , this ) ; defineSlot = children . getNext () ; }
Distance : 7

119
Tree	{ defineSlot . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , functionType . getNext () ) ; children = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , functionType . getNext () ) ; children = astParameter . getNext () ; }
Distance : 11

120
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , getNext . getNext () ) ; children = astParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , getNext . getNext () ) ; children = astParameter . getNext () ; }
Distance : 8

121
Tree	{ defineSlot ( astParameter , functionNode , children , astParameter , functionType . getJSType () , functionType . getNext () , functionType ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , children , astParameter , functionType . getJSType () , functionType . getNext () , functionType ) ; defineSlot = astParameter . getNext () ; }
Distance : 13

122
Tree	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , this ) ; defineSlot = functionType . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , this ) ; defineSlot = functionType . getNext () ; }
Distance : 8

123
Tree	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; defineSlot = astParameter . getNext () ; }
Distance : 10

124
Tree	{ defineSlot . defineSlot ( STRING_CONSTANT , defineSlot , functionType . getJSType () ) ; defineSlot = children . getNext () ; }
Code	{ defineSlot . defineSlot ( STRING_CONSTANT , defineSlot , functionType . getJSType () ) ; defineSlot = children . getNext () ; }
Distance : 9

125
Tree	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , this ) ; children = children . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , this ) ; children = children . getNext () ; }
Distance : 8

126
Tree	{ defineSlot ( astParameter , functionType , children , astParameter , functionType . getJSType () , functionType . getNext () , functionType ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionType , children , astParameter , functionType . getJSType () , functionType . getNext () , functionType ) ; defineSlot = astParameter . getNext () ; }
Distance : 14

127
Tree	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; defineSlot = children . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; defineSlot = children . getNext () ; }
Distance : 10

128
Tree	{ defineSlot . defineSlot () ; astParameter = children . getNext () ; }
Code	{ defineSlot . defineSlot () ; astParameter = children . getNext () ; }
Distance : 12

129
Tree	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , this ) ; children = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , this ) ; children = astParameter . getNext () ; }
Distance : 7

130
Tree	{ defineSlot . defineSlot () . getJSType ( astParameter , functionType . getJSType () ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( astParameter , functionType . getJSType () ) ; defineSlot = astParameter . getNext () ; }
Distance : 12

131
Tree	{ defineSlot . defineSlot () ; children = getNext . getJSType () ; }
Code	{ defineSlot . defineSlot () ; children = getNext . getJSType () ; }
Distance : 13

132
Tree	{ this . defineSlot . defineSlot ( astParameter . getFirstChild () ) ; children = astParameter . getNext () ; }
Code	{ this . defineSlot . defineSlot ( astParameter . getFirstChild () ) ; children = astParameter . getNext () ; }
Distance : 12

133
Tree	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; children = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; children = astParameter . getNext () ; }
Distance : 10

134
Tree	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , this ) ; defineSlot = functionType . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , this ) ; defineSlot = functionType . getNext () ; }
Distance : 7

135
Tree	{ defineSlot ( astParameter , functionType , children , astParameter , astParameter . getJSType () , functionType . getNext () , functionType ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionType , children , astParameter , astParameter . getJSType () , functionType . getNext () , functionType ) ; defineSlot = astParameter . getNext () ; }
Distance : 14

136
Tree	{ defineSlot . defineSlot ( astParameter , null , children . getJSType () ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , null , children . getJSType () ) ; defineSlot = astParameter . getNext () ; }
Distance : 8

137
Tree	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , this ) ; children = children . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , this ) ; children = children . getNext () ; }
Distance : 7

138
Tree	{ defineSlot ( astParameter , functionNode , children , astParameter , astParameter . getJSType () , functionType . getNext () , functionType ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , children , astParameter , astParameter . getJSType () , functionType . getNext () , functionType ) ; defineSlot = astParameter . getNext () ; }
Distance : 13

139
Tree	{ defineSlot . defineSlot ( astParameter , null , functionType . getJSType () ) ; defineSlot = children . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , null , functionType . getJSType () ) ; defineSlot = children . getNext () ; }
Distance : 8

140
Tree	{ defineSlot ( astParameter , functionNode , children , astParameter , functionType . getJSType () , functionType . getNext () , functionType ) ; children = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , children , astParameter , functionType . getJSType () , functionType . getNext () , functionType ) ; children = astParameter . getNext () ; }
Distance : 13

141
Tree	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; children = children . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; children = children . getNext () ; }
Distance : 10

142
Tree	{ defineSlot . defineSlot ( astParameter , null , astParameter . getJSType () ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , null , astParameter . getJSType () ) ; defineSlot = astParameter . getNext () ; }
Distance : 8

143
Tree	{ defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT , children . getNext () ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT , children . getNext () ) ; defineSlot = astParameter . getNext () ; }
Distance : 10

144
Tree	{ defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT , functionType . getNext () ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT , functionType . getNext () ) ; defineSlot = astParameter . getNext () ; }
Distance : 10

145
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; defineSlot = children . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; defineSlot = children . getNext () ; }
Distance : 9

146
Tree	{ defineSlot . defineSlot () . getJSType ( astParameter , functionType . getJSType () ) ; defineSlot = children . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( astParameter , functionType . getJSType () ) ; defineSlot = children . getNext () ; }
Distance : 12

147
Tree	{ defineSlot ( astParameter , functionType , children , astParameter , functionType . getJSType () , functionType . getNext () , functionType ) ; children = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionType , children , astParameter , functionType . getJSType () , functionType . getNext () , functionType ) ; children = astParameter . getNext () ; }
Distance : 14

148
Tree	{ defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT , children . getNext () ) ; children = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT , children . getNext () ) ; children = astParameter . getNext () ; }
Distance : 10

149
Tree	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , functionType ) ; children = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , functionType ) ; children = astParameter . getNext () ; }
Distance : 8

150
Tree	{ defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT , functionType . getNext () ) ; children = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT , functionType . getNext () ) ; children = astParameter . getNext () ; }
Distance : 10

151
Tree	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , functionType ) ; children = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , functionType ) ; children = astParameter . getNext () ; }
Distance : 7

152
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , functionType . getJSType () , functionType . getNext () , functionType ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , functionType . getJSType () , functionType . getNext () , functionType ) ; defineSlot = astParameter . getNext () ; }
Distance : 13

153
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; children = children . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; children = children . getNext () ; }
Distance : 9

154
Tree	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; defineSlot = children . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; defineSlot = children . getNext () ; }
Distance : 9

155
Tree	{ defineSlot . defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT ) ; children = functionType . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT ) ; children = functionType . getNext () ; }
Distance : 10

156
Tree	{ defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT , functionType . getNext () ) ; defineSlot = children . getNext () ; }
Code	{ defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT , functionType . getNext () ) ; defineSlot = children . getNext () ; }
Distance : 10

157
Tree	{ defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT , children . getNext () ) ; children = children . getNext () ; }
Code	{ defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT , children . getNext () ) ; children = children . getNext () ; }
Distance : 10

158
Tree	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , functionType ) ; children = children . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , functionType ) ; children = children . getNext () ; }
Distance : 8

159
Tree	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , children ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , children ) ; defineSlot = astParameter . getNext () ; }
Distance : 8

160
Tree	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , children ) ; children = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , children ) ; children = astParameter . getNext () ; }
Distance : 7

161
Tree	{ defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT , functionType . getNext () ) ; children = children . getNext () ; }
Code	{ defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT , functionType . getNext () ) ; children = children . getNext () ; }
Distance : 10

162
Tree	{ defineSlot ( astParameter , functionType , astParameter , astParameter , functionType . getJSType () , functionType . getNext () , functionType ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionType , astParameter , astParameter , functionType . getJSType () , functionType . getNext () , functionType ) ; defineSlot = astParameter . getNext () ; }
Distance : 14

163
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , children . getNext () ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , children . getNext () ) ; defineSlot = astParameter . getNext () ; }
Distance : 8

164
Tree	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , functionType ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , functionType ) ; defineSlot = astParameter . getNext () ; }
Distance : 8

165
Tree	{ defineSlot . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; astParameter = children . getNext () ; }
Code	{ defineSlot . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; astParameter = children . getNext () ; }
Distance : 11

166
Tree	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , functionType ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , functionType ) ; defineSlot = astParameter . getNext () ; }
Distance : 7

167
Tree	{ defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT , children . getNext () ) ; defineSlot = children . getNext () ; }
Code	{ defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT , children . getNext () ) ; defineSlot = children . getNext () ; }
Distance : 10

168
Tree	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , children ) ; children = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , children ) ; children = astParameter . getNext () ; }
Distance : 8

169
Tree	{ defineSlot ( astParameter , functionType , children , astParameter , astParameter . getJSType () , functionType . getNext () , functionType ) ; children = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionType , children , astParameter , astParameter . getJSType () , functionType . getNext () , functionType ) ; children = astParameter . getNext () ; }
Distance : 14

170
Tree	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , functionType ) ; children = children . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , functionType ) ; children = children . getNext () ; }
Distance : 7

171
Tree	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , functionType ) ; defineSlot = children . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , functionType ) ; defineSlot = children . getNext () ; }
Distance : 8

172
Tree	{ defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT , children . getNext () ) ; defineSlot = functionType . getNext () ; }
Code	{ defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT , children . getNext () ) ; defineSlot = functionType . getNext () ; }
Distance : 10

173
Tree	{ defineSlot ( astParameter , functionNode , children , astParameter , astParameter . getJSType () , functionType . getNext () , functionType ) ; children = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , children , astParameter , astParameter . getJSType () , functionType . getNext () , functionType ) ; children = astParameter . getNext () ; }
Distance : 13

174
Tree	{ defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT , astParameter . getNext () ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT , astParameter . getNext () ) ; defineSlot = astParameter . getNext () ; }
Distance : 10

175
Tree	{ defineSlot ( astParameter , functionType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; defineSlot = functionType . getNext () ; }
Code	{ defineSlot ( astParameter , functionType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; defineSlot = functionType . getNext () ; }
Distance : 10

176
Tree	{ defineSlot ( astParameter , functionType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; children = functionType . getNext () ; }
Code	{ defineSlot ( astParameter , functionType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; children = functionType . getNext () ; }
Distance : 10

177
Tree	{ defineSlot . defineSlot ( STRING_CONSTANT , defineSlot , astParameter . getJSType () ) ; defineSlot = children . getNext () ; }
Code	{ defineSlot . defineSlot ( STRING_CONSTANT , defineSlot , astParameter . getJSType () ) ; defineSlot = children . getNext () ; }
Distance : 9

178
Tree	{ defineSlot . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , functionType . getFirstChild () ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , functionType . getFirstChild () ) ; defineSlot = astParameter . getNext () ; }
Distance : 11

179
Tree	{ defineSlot . defineSlot ( STRING_CONSTANT , defineSlot , children . getJSType () ) ; children = children . getNext () ; }
Code	{ defineSlot . defineSlot ( STRING_CONSTANT , defineSlot , children . getJSType () ) ; children = children . getNext () ; }
Distance : 9

180
Tree	{ this . defineSlot . defineSlot ( astParameter . getNext () ) ; defineSlot = astParameter . getNext () ; }
Code	{ this . defineSlot . defineSlot ( astParameter . getNext () ) ; defineSlot = astParameter . getNext () ; }
Distance : 12

181
Tree	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , this ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionType . getJSType () , this ) ; defineSlot = astParameter . getNext () ; }
Distance : 8

182
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , children . getNext () ) ; children = children . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , children . getNext () ) ; children = children . getNext () ; }
Distance : 8

183
Tree	{ defineSlot . defineSlot ( STRING_CONSTANT , functionType . getJSType () , functionType . getNext () ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( STRING_CONSTANT , functionType . getJSType () , functionType . getNext () ) ; defineSlot = astParameter . getNext () ; }
Distance : 11

184
Tree	{ defineSlot . defineSlot ( astParameter , null , functionType . getJSType () ) ; children = functionType . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , null , functionType . getJSType () ) ; children = functionType . getNext () ; }
Distance : 8

185
Tree	{ defineSlot . defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT ) ; defineSlot = functionType . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getFirstChild () , STRING_CONSTANT ) ; defineSlot = functionType . getNext () ; }
Distance : 10

186
Tree	{ defineSlot . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , children . getNext () ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , children . getNext () ) ; defineSlot = astParameter . getNext () ; }
Distance : 11

187
Tree	{ this . defineSlot . defineSlot ( astParameter . getNext () ) ; children = children . getNext () ; }
Code	{ this . defineSlot . defineSlot ( astParameter . getNext () ) ; children = children . getNext () ; }
Distance : 12

188
Tree	{ defineSlot . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , functionType . getNext () ) ; defineSlot = children . getNext () ; }
Code	{ defineSlot . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , functionType . getNext () ) ; defineSlot = children . getNext () ; }
Distance : 11

189
Tree	{ defineSlot . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , functionType . getFirstChild () ) ; children = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , functionType . getFirstChild () ) ; children = astParameter . getNext () ; }
Distance : 11

190
Tree	{ defineSlot . defineSlot ( astParameter . getFirstChild () , functionType . getJSType () , functionType ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getFirstChild () , functionType . getJSType () , functionType ) ; defineSlot = astParameter . getNext () ; }
Distance : 9

191
Tree	{ defineSlot . defineSlot ( astParameter . getFirstChild () , functionType . getJSType () , functionType ) ; children = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getFirstChild () , functionType . getJSType () , functionType ) ; children = astParameter . getNext () ; }
Distance : 9

192
Tree	{ defineSlot . defineSlot ( astParameter . getFirstChild () , functionType . getJSType () , children ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getFirstChild () , functionType . getJSType () , children ) ; defineSlot = astParameter . getNext () ; }
Distance : 9

193
Tree	{ defineSlot . defineSlot ( astParameter . getFirstChild () , functionType . getJSType () , functionType ) ; defineSlot = children . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getFirstChild () , functionType . getJSType () , functionType ) ; defineSlot = children . getNext () ; }
Distance : 9

194
Tree	{ defineSlot . defineSlot ( astParameter . getFirstChild () , functionType . getJSType () , children ) ; children = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getFirstChild () , functionType . getJSType () , children ) ; children = astParameter . getNext () ; }
Distance : 9

195
Tree	{ defineSlot . defineSlot ( astParameter . getFirstChild () , functionType . getJSType () , functionType ) ; defineSlot = functionType . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getFirstChild () , functionType . getJSType () , functionType ) ; defineSlot = functionType . getNext () ; }
Distance : 9

196
Tree	{ defineSlot . defineSlot ( astParameter . getFirstChild () , functionType . getJSType () , functionType ) ; children = children . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getFirstChild () , functionType . getJSType () , functionType ) ; children = children . getNext () ; }
Distance : 9

197
Tree	{ defineSlot . defineSlot ( astParameter . getFirstChild () , children . getJSType () , functionType ) ; defineSlot = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getFirstChild () , children . getJSType () , functionType ) ; defineSlot = astParameter . getNext () ; }
Distance : 9

198
Tree	{ defineSlot . defineSlot ( astParameter . getFirstChild () , functionType . getJSType () , functionType ) ; children = functionType . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getFirstChild () , functionType . getJSType () , functionType ) ; children = functionType . getNext () ; }
Distance : 9

199
Tree	{ defineSlot . defineSlot ( astParameter . getFirstChild () , children . getJSType () , functionType ) ; children = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getFirstChild () , children . getJSType () , functionType ) ; children = astParameter . getNext () ; }
Distance : 9

========================================================================


========================================================================
Example Number: 21
Parent Code is: 
if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( token != JsDocToken.LP ) { restoreLookAhead ( token ) ; return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=token}) (242{val=!=}) (40{val=JsDocToken.LP})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=reportTypeSyntaxWarning}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=token}) (242{val=!=}) (40{val=JsDocToken.LP})) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=restoreLookAhead}) (214{val=(}) (800{val=token}) (215{val=)})) (227{val=;})) (41 (329{val=return}) (32 (802{val=reportTypeSyntaxWarning}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/68/parent/src_com_google_javascript_jscomp_parsing_JsDocInfoParser.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

1
Tree	if ( token != null ) { return getString ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return getString ( token , STRING_CONSTANT ) ; }
Distance : 8

2
Tree	if ( token != null ) { return getString ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return getString ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

3
Tree	if ( token != null ) { return getString ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return getString ( NUMBER_CONSTANT ) ; }
Distance : 8

4
Tree	if ( token != null ) { return Token.NEW ( STRING_CONSTANT , token ) ; }
Code	if ( token != null ) { return Token.NEW ( STRING_CONSTANT , token ) ; }
Distance : 9

5
Tree	if ( token != null ) { return addChildToBack ( STRING_CONSTANT , token ) ; }
Code	if ( token != null ) { return addChildToBack ( STRING_CONSTANT , token ) ; }
Distance : 9

6
Tree	if ( token != null ) { return addChildToFront ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return addChildToFront ( NUMBER_CONSTANT ) ; }
Distance : 8

7
Tree	if ( token != null ) { return getString ( STRING_CONSTANT , token ) ; }
Code	if ( token != null ) { return getString ( STRING_CONSTANT , token ) ; }
Distance : 9

8
Tree	if ( token != null ) { return addChildToFront ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return addChildToFront ( token , STRING_CONSTANT ) ; }
Distance : 8

9
Tree	if ( token != null ) { return addChildToFront ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return addChildToFront ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

10
Tree	if ( token != null ) { return token . getString ( token ) ; }
Code	if ( token != null ) { return token . getString ( token ) ; }
Distance : 8

11
Tree	if ( token != null ) { return contextType ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return contextType ( NUMBER_CONSTANT ) ; }
Distance : 8

12
Tree	if ( token != null ) { return functionType ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return functionType ( token , STRING_CONSTANT ) ; }
Distance : 8

13
Tree	if ( token != null ) { return functionType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return functionType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

14
Tree	if ( token != null ) { return contextType ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return contextType ( token , STRING_CONSTANT ) ; }
Distance : 8

15
Tree	if ( token != null ) { return contextType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return contextType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

16
Tree	if ( token != null ) { return functionType ( STRING_CONSTANT , token ) ; }
Code	if ( token != null ) { return functionType ( STRING_CONSTANT , token ) ; }
Distance : 9

17
Tree	if ( token != null ) { return Token.NEW ( token , Token.NEW ) ; }
Code	if ( token != null ) { return Token.NEW ( token , Token.NEW ) ; }
Distance : 9

18
Tree	if ( token != null ) { return contextType ( STRING_CONSTANT , token ) ; }
Code	if ( token != null ) { return contextType ( STRING_CONSTANT , token ) ; }
Distance : 9

19
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

20
Tree	if ( token != null ) { return addChildToBack ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return addChildToBack ( STRING_CONSTANT ) ; }
Distance : 7

21
Tree	if ( token != null ) { return resultType . token ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return resultType . token ( NUMBER_CONSTANT ) ; }
Distance : 9

22
Tree	if ( token != null ) { return getString ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return getString ( STRING_CONSTANT ) ; }
Distance : 7

23
Tree	if ( token != null ) { return addChildToFront ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return addChildToFront ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

24
Tree	if ( token != null ) { return token ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return token ( NUMBER_CONSTANT ) ; }
Distance : 8

25
Tree	if ( token != null ) { return token ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return token ( token , STRING_CONSTANT ) ; }
Distance : 8

26
Tree	if ( token != null ) { return token . Token.NEW ( token , Token.NEW ) ; }
Code	if ( token != null ) { return token . Token.NEW ( token , Token.NEW ) ; }
Distance : 9

27
Tree	if ( token != null ) { return token ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return token ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

28
Tree	if ( token != null ) { return resultType ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return resultType ( NUMBER_CONSTANT ) ; }
Distance : 8

29
Tree	if ( token != null ) { return resultType ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return resultType ( token , STRING_CONSTANT ) ; }
Distance : 8

30
Tree	if ( token != null ) { return token . token ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != null ) { return token . token ( token , NUMBER_CONSTANT , token ) ; }
Distance : 10

31
Tree	if ( token != null ) { return token . resultType ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != null ) { return token . resultType ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

32
Tree	if ( token != null ) { return token . token ( token , NUMBER_CONSTANT , resultType ) ; }
Code	if ( token != null ) { return token . token ( token , NUMBER_CONSTANT , resultType ) ; }
Distance : 10

33
Tree	if ( token != null ) { return token . resultType ( token , NUMBER_CONSTANT , resultType ) ; }
Code	if ( token != null ) { return token . resultType ( token , NUMBER_CONSTANT , resultType ) ; }
Distance : 11

34
Tree	if ( token != null ) { return resultType . resultType ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != null ) { return resultType . resultType ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

35
Tree	if ( token != null ) { return token ( token , token ) ; }
Code	if ( token != null ) { return token ( token , token ) ; }
Distance : 9

36
Tree	if ( token != null ) { return resultType . resultType ( token , NUMBER_CONSTANT , resultType ) ; }
Code	if ( token != null ) { return resultType . resultType ( token , NUMBER_CONSTANT , resultType ) ; }
Distance : 11

37
Tree	if ( token != null ) { return resultType . token ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != null ) { return resultType . token ( token , NUMBER_CONSTANT , token ) ; }
Distance : 10

38
Tree	if ( token != null ) { return resultType . getString ( token , Token.NEW ) ; }
Code	if ( token != null ) { return resultType . getString ( token , Token.NEW ) ; }
Distance : 10

39
Tree	if ( token != null ) { return resultType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return resultType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

40
Tree	if ( token != null ) { return token . addChildToBack ( token , Token.NEW ) ; }
Code	if ( token != null ) { return token . addChildToBack ( token , Token.NEW ) ; }
Distance : 9

41
Tree	if ( token != null ) { return token . getString ( token , Token.NEW ) ; }
Code	if ( token != null ) { return token . getString ( token , Token.NEW ) ; }
Distance : 9

42
Tree	if ( token != null ) { return token . resultType ( token , functionType , Token.NEW , Token.NEW ) ; }
Code	if ( token != null ) { return token . resultType ( token , functionType , Token.NEW , Token.NEW ) ; }
Distance : 11

43
Tree	if ( token != null ) { return resultType . token ( token ) ; }
Code	if ( token != null ) { return resultType . token ( token ) ; }
Distance : 9

44
Tree	if ( token != null ) { return token ( token , isThis ) ; }
Code	if ( token != null ) { return token ( token , isThis ) ; }
Distance : 9

45
Tree	if ( token != null ) { return token . token ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return token . token ( NUMBER_CONSTANT ) ; }
Distance : 8

46
Tree	if ( token != null ) { return token . addChildToFront ( token , Token.NEW ) ; }
Code	if ( token != null ) { return token . addChildToFront ( token , Token.NEW ) ; }
Distance : 9

47
Tree	if ( token != null ) { return token . getString ( token , NUMBER_CONSTANT , resultType ) ; }
Code	if ( token != null ) { return token . getString ( token , NUMBER_CONSTANT , resultType ) ; }
Distance : 11

48
Tree	if ( token != null ) { return resultType . getString ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != null ) { return resultType . getString ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

49
Tree	if ( token != null ) { return token . token ( token , functionType , Token.NEW , Token.NEW ) ; }
Code	if ( token != null ) { return token . token ( token , functionType , Token.NEW , Token.NEW ) ; }
Distance : 11

50
Tree	if ( token != null ) { return token ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return token ( STRING_CONSTANT ) ; }
Distance : 7

51
Tree	if ( token != null ) { return token ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return token ( STRING_CONSTANT ) ; }
Distance : 7

52
Tree	if ( token != null ) { return resultType . addChildToFront ( token , Token.NEW ) ; }
Code	if ( token != null ) { return resultType . addChildToFront ( token , Token.NEW ) ; }
Distance : 10

53
Tree	if ( token != null ) { return resultType . token ( token , Token.NEW ) ; }
Code	if ( token != null ) { return resultType . token ( token , Token.NEW ) ; }
Distance : 10

54
Tree	if ( token != null ) { return resultType . resultType ( token , functionType , Token.NEW , Token.NEW ) ; }
Code	if ( token != null ) { return resultType . resultType ( token , functionType , Token.NEW , Token.NEW ) ; }
Distance : 11

55
Tree	if ( token != null ) { return token . resultType ( token , functionType , token , Token.NEW ) ; }
Code	if ( token != null ) { return token . resultType ( token , functionType , token , Token.NEW ) ; }
Distance : 11

56
Tree	if ( token != null ) { return resultType ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return resultType ( STRING_CONSTANT ) ; }
Distance : 7

57
Tree	if ( token != null ) { return token . getString ( token , functionType , Token.NEW , Token.NEW ) ; }
Code	if ( token != null ) { return token . getString ( token , functionType , Token.NEW , Token.NEW ) ; }
Distance : 11

58
Tree	if ( token != null ) { return resultType ( token , Token.NEW ) ; }
Code	if ( token != null ) { return resultType ( token , Token.NEW ) ; }
Distance : 9

59
Tree	if ( token != null ) { return resultType ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return resultType ( STRING_CONSTANT ) ; }
Distance : 7

60
Tree	if ( token != null ) { return token . Token.NEW ( token , Token.NEW ) ; }
Code	if ( token != null ) { return token . Token.NEW ( token , Token.NEW ) ; }
Distance : 9

61
Tree	if ( token != null ) { return Token.NEW ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return Token.NEW ( STRING_CONSTANT ) ; }
Distance : 7

62
Tree	if ( token != null ) { return addChildToBack ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return addChildToBack ( STRING_CONSTANT ) ; }
Distance : 7

63
Tree	if ( token != null ) { return resultType . resultType ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return resultType . resultType ( NUMBER_CONSTANT ) ; }
Distance : 9

64
Tree	if ( token != null ) { return Token.NEW ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return Token.NEW ( token , STRING_CONSTANT ) ; }
Distance : 8

65
Tree	if ( token != null ) { return resultType . token ( token , functionType , Token.NEW , Token.NEW ) ; }
Code	if ( token != null ) { return resultType . token ( token , functionType , Token.NEW , Token.NEW ) ; }
Distance : 11

66
Tree	if ( token != null ) { return addChildToBack ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return addChildToBack ( token , STRING_CONSTANT ) ; }
Distance : 8

67
Tree	if ( token != null ) { return getString ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return getString ( STRING_CONSTANT ) ; }
Distance : 7

68
Tree	if ( token != null ) { return token . getString ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != null ) { return token . getString ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

69
Tree	if ( token != null ) { return getString ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return getString ( token , STRING_CONSTANT ) ; }
Distance : 8

70
Tree	if ( token != null ) { return resultType . getString ( token ) ; }
Code	if ( token != null ) { return resultType . getString ( token ) ; }
Distance : 9

71
Tree	if ( token != null ) { return token . resultType ( token , functionType , functionType , Token.NEW ) ; }
Code	if ( token != null ) { return token . resultType ( token , functionType , functionType , Token.NEW ) ; }
Distance : 11

72
Tree	if ( token != null ) { return token ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return token ( token , STRING_CONSTANT ) ; }
Distance : 8

73
Tree	if ( token != null ) { return addChildToBack ( token , Token.NEW ) ; }
Code	if ( token != null ) { return addChildToBack ( token , Token.NEW ) ; }
Distance : 9

74
Tree	if ( token != null ) { return Token.NEW ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return Token.NEW ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

75
Tree	if ( token != null ) { return token . Token.NEW ( token ) ; }
Code	if ( token != null ) { return token . Token.NEW ( token ) ; }
Distance : 8

76
Tree	if ( token != null ) { return token . token ( token , Token.NEW ) ; }
Code	if ( token != null ) { return token . token ( token , Token.NEW ) ; }
Distance : 9

77
Tree	if ( token != null ) { return token . token ( token , functionType , token , Token.NEW ) ; }
Code	if ( token != null ) { return token . token ( token , functionType , token , Token.NEW ) ; }
Distance : 11

78
Tree	if ( token != null ) { return addChildToFront ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return addChildToFront ( STRING_CONSTANT ) ; }
Distance : 7

79
Tree	if ( token != null ) { return resultType . resultType ( token , functionType , token , Token.NEW ) ; }
Code	if ( token != null ) { return resultType . resultType ( token , functionType , token , Token.NEW ) ; }
Distance : 11

80
Tree	if ( token != null ) { return token . getString ( CHAR_CONS ) ; }
Code	if ( token != null ) { return token . getString ( CHAR_CONS ) ; }
Distance : 8

81
Tree	if ( token != null ) { return resultType . resultType ( token , Token.NEW ) ; }
Code	if ( token != null ) { return resultType . resultType ( token , Token.NEW ) ; }
Distance : 10

82
Tree	if ( token != null ) { return addChildToBack ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return addChildToBack ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

83
Tree	if ( token != null ) { return token . resultType ( token , Token.NEW ) ; }
Code	if ( token != null ) { return token . resultType ( token , Token.NEW ) ; }
Distance : 9

84
Tree	if ( token != null ) { return token . Token.NEW ( token ) ; }
Code	if ( token != null ) { return token . Token.NEW ( token ) ; }
Distance : 8

85
Tree	if ( token != null ) { return isThis ( token , Token.NEW ) ; }
Code	if ( token != null ) { return isThis ( token , Token.NEW ) ; }
Distance : 9

86
Tree	if ( token != null ) { return resultType . Token.NEW ( token ) ; }
Code	if ( token != null ) { return resultType . Token.NEW ( token ) ; }
Distance : 9

87
Tree	if ( token != null ) { return getString ( token , Token.NEW ) ; }
Code	if ( token != null ) { return getString ( token , Token.NEW ) ; }
Distance : 9

88
Tree	if ( token != null ) { return token . getString ( token ) ; }
Code	if ( token != null ) { return token . getString ( token ) ; }
Distance : 8

89
Tree	if ( token != null ) { return resultType ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return resultType ( token , STRING_CONSTANT ) ; }
Distance : 8

90
Tree	if ( token != null ) { return token ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return token ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

91
Tree	if ( token != null ) { return addChildToFront ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return addChildToFront ( token , STRING_CONSTANT ) ; }
Distance : 8

92
Tree	if ( token != null ) { return resultType . getString ( token , Token.NEW ) ; }
Code	if ( token != null ) { return resultType . getString ( token , Token.NEW ) ; }
Distance : 10

93
Tree	if ( token != null ) { return Token.NEW ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return Token.NEW ( STRING_CONSTANT ) ; }
Distance : 7

94
Tree	if ( token != null ) { return token . Token.NEW ( CHAR_CONS ) ; }
Code	if ( token != null ) { return token . Token.NEW ( CHAR_CONS ) ; }
Distance : 8

95
Tree	if ( token != null ) { return token . resultType ( token ) ; }
Code	if ( token != null ) { return token . resultType ( token ) ; }
Distance : 8

96
Tree	if ( token != null ) { return resultType . addChildToFront ( token ) ; }
Code	if ( token != null ) { return resultType . addChildToFront ( token ) ; }
Distance : 9

97
Tree	if ( token != null ) { return token . resultType ( token , functionType , resultType , Token.NEW ) ; }
Code	if ( token != null ) { return token . resultType ( token , functionType , resultType , Token.NEW ) ; }
Distance : 11

98
Tree	if ( token != null ) { return resultType . token ( token ) ; }
Code	if ( token != null ) { return resultType . token ( token ) ; }
Distance : 9

99
Tree	if ( token != null ) { return token . addChildToFront ( token , Token.NEW ) ; }
Code	if ( token != null ) { return token . addChildToFront ( token , Token.NEW ) ; }
Distance : 9

100
Tree	if ( token != null ) { return token . addChildToFront ( token ) ; }
Code	if ( token != null ) { return token . addChildToFront ( token ) ; }
Distance : 8

101
Tree	if ( token != null ) { return isThis ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return isThis ( STRING_CONSTANT ) ; }
Distance : 7

102
Tree	if ( token != null ) { return token . resultType ( CHAR_CONS ) ; }
Code	if ( token != null ) { return token . resultType ( CHAR_CONS ) ; }
Distance : 8

103
Tree	if ( token != null ) { return addChildToFront ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return addChildToFront ( STRING_CONSTANT ) ; }
Distance : 7

104
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

105
Tree	if ( token != null ) { return resultType . resultType ( token ) ; }
Code	if ( token != null ) { return resultType . resultType ( token ) ; }
Distance : 9

106
Tree	if ( token != null ) { return isThis ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return isThis ( token , STRING_CONSTANT ) ; }
Distance : 8

107
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

108
Tree	if ( token != null ) { return isThis ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return isThis ( NUMBER_CONSTANT ) ; }
Distance : 8

109
Tree	if ( token != null ) { return resultType . token ( token ) ; }
Code	if ( token != null ) { return resultType . token ( token ) ; }
Distance : 9

110
Tree	if ( token != null ) { return token . token ( token ) ; }
Code	if ( token != null ) { return token . token ( token ) ; }
Distance : 8

111
Tree	if ( token != null ) { return contextType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return contextType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

112
Tree	if ( token != null ) { return resultType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return resultType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

113
Tree	if ( token != null ) { return token . addChildToBack ( token , Token.NEW ) ; }
Code	if ( token != null ) { return token . addChildToBack ( token , Token.NEW ) ; }
Distance : 9

114
Tree	if ( token != null ) { return getString ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return getString ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

115
Tree	if ( token != null ) { return token . token ( token , Token.NEW ) ; }
Code	if ( token != null ) { return token . token ( token , Token.NEW ) ; }
Distance : 9

116
Tree	if ( token != null ) { return token . addChildToBack ( token ) ; }
Code	if ( token != null ) { return token . addChildToBack ( token ) ; }
Distance : 8

117
Tree	if ( token != null ) { return functionType ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return functionType ( NUMBER_CONSTANT ) ; }
Distance : 8

118
Tree	if ( token != null ) { return resultType . resultType ( token ) ; }
Code	if ( token != null ) { return resultType . resultType ( token ) ; }
Distance : 9

119
Tree	if ( token != null ) { return token . Token.NEW ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return token . Token.NEW ( NUMBER_CONSTANT ) ; }
Distance : 8

120
Tree	if ( token != null ) { return token . getString ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return token . getString ( NUMBER_CONSTANT ) ; }
Distance : 8

121
Tree	if ( token != null ) { return resultType . resultType ( CHAR_CONS ) ; }
Code	if ( token != null ) { return resultType . resultType ( CHAR_CONS ) ; }
Distance : 9

122
Tree	if ( token != null ) { return resultType . resultType ( token , Token.NEW ) ; }
Code	if ( token != null ) { return resultType . resultType ( token , Token.NEW ) ; }
Distance : 10

123
Tree	if ( token != null ) { return resultType . addChildToBack ( token ) ; }
Code	if ( token != null ) { return resultType . addChildToBack ( token ) ; }
Distance : 9

124
Tree	if ( token != null ) { return token ( STRING_CONSTANT , token ) ; }
Code	if ( token != null ) { return token ( STRING_CONSTANT , token ) ; }
Distance : 9

125
Tree	if ( token != null ) { return addChildToFront ( token , Token.NEW ) ; }
Code	if ( token != null ) { return addChildToFront ( token , Token.NEW ) ; }
Distance : 9

126
Tree	if ( token != null ) { return addChildToFront ( STRING_CONSTANT , token ) ; }
Code	if ( token != null ) { return addChildToFront ( STRING_CONSTANT , token ) ; }
Distance : 9

127
Tree	if ( token != null ) { return functionType ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return functionType ( token , STRING_CONSTANT ) ; }
Distance : 8

128
Tree	if ( token != null ) { return resultType . getString ( token ) ; }
Code	if ( token != null ) { return resultType . getString ( token ) ; }
Distance : 9

129
Tree	if ( token != null ) { return isThis ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return isThis ( token , STRING_CONSTANT ) ; }
Distance : 8

130
Tree	if ( token != null ) { return token . token ( CHAR_CONS ) ; }
Code	if ( token != null ) { return token . token ( CHAR_CONS ) ; }
Distance : 8

131
Tree	if ( token != null ) { return token . resultType ( token , Token.NEW ) ; }
Code	if ( token != null ) { return token . resultType ( token , Token.NEW ) ; }
Distance : 9

132
Tree	if ( token != null ) { return resultType . token ( CHAR_CONS ) ; }
Code	if ( token != null ) { return resultType . token ( CHAR_CONS ) ; }
Distance : 9

133
Tree	if ( token != null ) { return resultType ( STRING_CONSTANT , token ) ; }
Code	if ( token != null ) { return resultType ( STRING_CONSTANT , token ) ; }
Distance : 9

134
Tree	if ( token != null ) { return functionType ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return functionType ( STRING_CONSTANT ) ; }
Distance : 7

135
Tree	if ( token != null ) { return contextType ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return contextType ( token , STRING_CONSTANT ) ; }
Distance : 8

136
Tree	if ( token != null ) { return token . token ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != null ) { return token . token ( token , NUMBER_CONSTANT , token ) ; }
Distance : 10

137
Tree	if ( token != null ) { return token . resultType ( token , NUMBER_CONSTANT , resultType ) ; }
Code	if ( token != null ) { return token . resultType ( token , NUMBER_CONSTANT , resultType ) ; }
Distance : 11

138
Tree	if ( token != null ) { return isThis ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return isThis ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

139
Tree	if ( token != null ) { return token . getString ( token , Token.NEW ) ; }
Code	if ( token != null ) { return token . getString ( token , Token.NEW ) ; }
Distance : 9

140
Tree	if ( token != null ) { return resultType . addChildToFront ( CHAR_CONS ) ; }
Code	if ( token != null ) { return resultType . addChildToFront ( CHAR_CONS ) ; }
Distance : 9

141
Tree	if ( token != null ) { return resultType . getString ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return resultType . getString ( NUMBER_CONSTANT ) ; }
Distance : 9

142
Tree	if ( token != null ) { return resultType . addChildToFront ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return resultType . addChildToFront ( NUMBER_CONSTANT ) ; }
Distance : 9

143
Tree	if ( token != null ) { return resultType . getString ( CHAR_CONS ) ; }
Code	if ( token != null ) { return resultType . getString ( CHAR_CONS ) ; }
Distance : 9

144
Tree	if ( token != null ) { return resultType . getString ( token ) ; }
Code	if ( token != null ) { return resultType . getString ( token ) ; }
Distance : 9

145
Tree	if ( token != null ) { return token . getString ( token , NUMBER_CONSTANT , resultType ) ; }
Code	if ( token != null ) { return token . getString ( token , NUMBER_CONSTANT , resultType ) ; }
Distance : 11

146
Tree	if ( token != null ) { return token . token ( token , functionType , this ) ; }
Code	if ( token != null ) { return token . token ( token , functionType , this ) ; }
Distance : 10

147
Tree	if ( token != null ) { return Token.NEW ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return Token.NEW ( token , STRING_CONSTANT ) ; }
Distance : 8

148
Tree	if ( token != null ) { return resultType . resultType ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != null ) { return resultType . resultType ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

149
Tree	if ( token != null ) { return token . addChildToBack ( token ) ; }
Code	if ( token != null ) { return token . addChildToBack ( token ) ; }
Distance : 8

150
Tree	if ( token != null ) { return contextType ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return contextType ( STRING_CONSTANT ) ; }
Distance : 7

151
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

152
Tree	if ( token != null ) { return Token.NEW ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return Token.NEW ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

153
Tree	if ( token != null ) { return functionType ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return functionType ( STRING_CONSTANT ) ; }
Distance : 7

154
Tree	if ( token != null ) { return Token.NEW ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return Token.NEW ( NUMBER_CONSTANT ) ; }
Distance : 8

155
Tree	if ( token != null ) { return addChildToBack ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return addChildToBack ( NUMBER_CONSTANT ) ; }
Distance : 8

156
Tree	if ( token != null ) { return isThis ( STRING_CONSTANT , token ) ; }
Code	if ( token != null ) { return isThis ( STRING_CONSTANT , token ) ; }
Distance : 9

157
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

158
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

159
Tree	if ( token != null ) { return resultType . addChildToBack ( token , Token.NEW ) ; }
Code	if ( token != null ) { return resultType . addChildToBack ( token , Token.NEW ) ; }
Distance : 10

160
Tree	if ( token != null ) { return isThis ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return isThis ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

161
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

162
Tree	if ( token != null ) { return token . token ( token ) ; }
Code	if ( token != null ) { return token . token ( token ) ; }
Distance : 8

163
Tree	if ( token != null ) { return resultType . resultType ( token ) ; }
Code	if ( token != null ) { return resultType . resultType ( token ) ; }
Distance : 9

164
Tree	if ( token != null ) { return token . resultType ( token ) ; }
Code	if ( token != null ) { return token . resultType ( token ) ; }
Distance : 8

165
Tree	if ( token != null ) { return token . token ( token ) ; }
Code	if ( token != null ) { return token . token ( token ) ; }
Distance : 8

166
Tree	if ( token != null ) { return addChildToBack ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return addChildToBack ( token , STRING_CONSTANT ) ; }
Distance : 8

167
Tree	if ( token != null ) { return addChildToBack ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return addChildToBack ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

168
Tree	if ( token != null ) { return token . Token.NEW ( token ) ; }
Code	if ( token != null ) { return token . Token.NEW ( token ) ; }
Distance : 8

169
Tree	if ( token != null ) { return resultType . resultType ( token , functionType , this ) ; }
Code	if ( token != null ) { return resultType . resultType ( token , functionType , this ) ; }
Distance : 11

170
Tree	if ( token != null ) { return isThis ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return isThis ( STRING_CONSTANT ) ; }
Distance : 7

171
Tree	if ( token != null ) { return functionType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return functionType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

172
Tree	if ( token != null ) { return contextType ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return contextType ( STRING_CONSTANT ) ; }
Distance : 7

173
Tree	if ( token != null ) { return token . resultType ( token ) ; }
Code	if ( token != null ) { return token . resultType ( token ) ; }
Distance : 8

174
Tree	if ( token != null ) { return token . resultType ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return token . resultType ( NUMBER_CONSTANT ) ; }
Distance : 8

175
Tree	if ( token != null ) { return token ( token , Token.NEW ) ; }
Code	if ( token != null ) { return token ( token , Token.NEW ) ; }
Distance : 9

176
Tree	if ( token != null ) { return resultType . token ( token , Token.NEW ) ; }
Code	if ( token != null ) { return resultType . token ( token , Token.NEW ) ; }
Distance : 10

177
Tree	if ( token != null ) { return token . addChildToFront ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return token . addChildToFront ( NUMBER_CONSTANT ) ; }
Distance : 8

178
Tree	if ( token != null ) { return token . addChildToBack ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return token . addChildToBack ( NUMBER_CONSTANT ) ; }
Distance : 8

179
Tree	if ( token != null ) { return token . getString ( token , functionType , this ) ; }
Code	if ( token != null ) { return token . getString ( token , functionType , this ) ; }
Distance : 11

180
Tree	if ( token != null ) { return token . addChildToFront ( token ) ; }
Code	if ( token != null ) { return token . addChildToFront ( token ) ; }
Distance : 8

181
Tree	if ( token != null ) { return token . getString ( token ) ; }
Code	if ( token != null ) { return token . getString ( token ) ; }
Distance : 8

182
Tree	if ( token != null ) { return token . getString ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != null ) { return token . getString ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

183
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , Token.NEW ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , Token.NEW ) ; }
Distance : 9

184
Tree	if ( token != null ) { return token . addChildToFront ( CHAR_CONS ) ; }
Code	if ( token != null ) { return token . addChildToFront ( CHAR_CONS ) ; }
Distance : 8

185
Tree	if ( token != null ) { return token . token ( token , NUMBER_CONSTANT , resultType ) ; }
Code	if ( token != null ) { return token . token ( token , NUMBER_CONSTANT , resultType ) ; }
Distance : 10

186
Tree	if ( token != null ) { return resultType . token ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != null ) { return resultType . token ( token , NUMBER_CONSTANT , token ) ; }
Distance : 10

187
Tree	if ( token != null ) { return resultType . resultType ( token , NUMBER_CONSTANT , resultType ) ; }
Code	if ( token != null ) { return resultType . resultType ( token , NUMBER_CONSTANT , resultType ) ; }
Distance : 11

188
Tree	if ( token != null ) { return token . addChildToBack ( token ) ; }
Code	if ( token != null ) { return token . addChildToBack ( token ) ; }
Distance : 8

189
Tree	if ( token != null ) { return addChildToBack . resultType ( token ) ; }
Code	if ( token != null ) { return addChildToBack . resultType ( token ) ; }
Distance : 9

190
Tree	if ( token != null ) { return token . addChildToBack ( CHAR_CONS ) ; }
Code	if ( token != null ) { return token . addChildToBack ( CHAR_CONS ) ; }
Distance : 8

191
Tree	if ( token != null ) { return token . resultType ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != null ) { return token . resultType ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

192
Tree	if ( token != null ) { return token . resultType ( token , functionType , this ) ; }
Code	if ( token != null ) { return token . resultType ( token , functionType , this ) ; }
Distance : 11

193
Tree	if ( token != null ) { return resultType . token ( token , functionType , this ) ; }
Code	if ( token != null ) { return resultType . token ( token , functionType , this ) ; }
Distance : 10

194
Tree	if ( token != null ) { return resultType . getString ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != null ) { return resultType . getString ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

195
Tree	if ( token != null ) { return resultType . getString ( token , functionType , this ) ; }
Code	if ( token != null ) { return resultType . getString ( token , functionType , this ) ; }
Distance : 11

196
Tree	if ( token != null ) { return token . addChildToFront ( token , functionType , this ) ; }
Code	if ( token != null ) { return token . addChildToFront ( token , functionType , this ) ; }
Distance : 11

197
Tree	if ( token != null ) { return token . addChildToBack ( token , functionType , this ) ; }
Code	if ( token != null ) { return token . addChildToBack ( token , functionType , this ) ; }
Distance : 11

198
Tree	if ( token != null ) { return token . resultType ( token , token , this ) ; }
Code	if ( token != null ) { return token . resultType ( token , token , this ) ; }
Distance : 11

199
Tree	if ( token != null ) { return token . resultType ( token , String , this ) ; }
Code	if ( token != null ) { return token . resultType ( token , String , this ) ; }
Distance : 11

========================================================================


========================================================================
Example Number: 22
Parent Code is: 
{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ initCompilerOptionsIfTesting () ; return toSource ( n , null , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=initCompilerOptionsIfTesting}) (216{val=()})) (227{val=;})) (41 (329{val=return}) (32 (802{val=toSource}) (214{val=(}) (800{val=n}) (234{val=,}) (500{val=null}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=initCompilerOptionsIfTesting}) (216{val=()})) (227{val=;})) (41 (329{val=return}) (32 (802{val=toSource}) (214{val=(}) (800{val=n}) (234{val=,}) (500{val=null}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/64/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ toSource ( n ) ; return toSource ( n . n ( n ) , null ) ; }
Code	{ toSource ( n ) ; return toSource ( n . n ( n ) , null ) ; }
Distance : 10

1
Tree	{ Override () ; return toSource ( n , null , null , n ) ; }
Code	{ Override () ; return toSource ( n , null , null , n ) ; }
Distance : 4

2
Tree	{ Node () ; return toSource ( n , null , null , n ) ; }
Code	{ Node () ; return toSource ( n , null , null , n ) ; }
Distance : 4

3
Tree	{ toSource () ; return toSource ( n . Node ( n ) , null ) ; }
Code	{ toSource () ; return toSource ( n . Node ( n ) , null ) ; }
Distance : 7

4
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . Node ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . Node ( n ) , n ) ; }
Distance : 6

5
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , Node , false ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , Node , false ) ; }
Distance : 4

6
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . n ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . n ( n ) ) ; }
Distance : 7

7
Tree	{ initCompilerOptionsIfTesting () ; return Override ( n . n ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return Override ( n . n ( n ) , null ) ; }
Distance : 7

8
Tree	{ toSource () ; return toSource ( n . Node ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n . Node ( n ) , n ) ; }
Distance : 7

9
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . Node ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . Node ( n ) , n ) ; }
Distance : 6

10
Tree	{ initCompilerOptionsIfTesting () ; return Override ( n . n ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return Override ( n . n ( n ) , n ) ; }
Distance : 7

11
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( ( , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( ( , n ) ; }
Distance : 4

12
Tree	{ toSource () ; return Override ( n . n ( n ) , n ) ; }
Code	{ toSource () ; return Override ( n . n ( n ) , n ) ; }
Distance : 8

13
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( toSource , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( toSource , n ) ; }
Distance : 4

14
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . Node ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . Node ( n ) , null ) ; }
Distance : 9

15
Tree	{ toSource () ; return toSource ( ( , n ) ; }
Code	{ toSource () ; return toSource ( ( , n ) ; }
Distance : 5

16
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , Node , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , Node , n ) ; }
Distance : 4

17
Tree	{ initCompilerOptionsIfTesting () ; return Override ( STRING_CONSTANT , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return Override ( STRING_CONSTANT , n ) ; }
Distance : 5

18
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( ( , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( ( , n ) ; }
Distance : 4

19
Tree	{ String () ; return toSource ( n , null ) ; }
Code	{ String () ; return toSource ( n , null ) ; }
Distance : 3

20
Tree	{ toSource () ; return Override ( STRING_CONSTANT , n ) ; }
Code	{ toSource () ; return Override ( STRING_CONSTANT , n ) ; }
Distance : 6

21
Tree	{ String () ; return toSource ( n , null ) ; }
Code	{ String () ; return toSource ( n , null ) ; }
Distance : 3

22
Tree	{ initCompilerOptionsIfTesting () ; return Override ( n , ( n ) null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return Override ( n , ( n ) null ) ; }
Distance : 5

23
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( this , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( this , n ) ; }
Distance : 5

24
Tree	{ String () ; return toSource ( STRING_CONSTANT , n ) ; }
Code	{ String () ; return toSource ( STRING_CONSTANT , n ) ; }
Distance : 5

25
Tree	{ toSource () ; return toSource ( toSource , n ) ; }
Code	{ toSource () ; return toSource ( toSource , n ) ; }
Distance : 5

26
Tree	{ Override () ; return toSource ( n , null ) ; }
Code	{ Override () ; return toSource ( n , null ) ; }
Distance : 3

27
Tree	{ Node () ; return toSource ( n , null ) ; }
Code	{ Node () ; return toSource ( n , null ) ; }
Distance : 3

28
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; }
Distance : 4

29
Tree	{ toSource () ; return Override ( n , ( n ) null ) ; }
Code	{ toSource () ; return Override ( n , ( n ) null ) ; }
Distance : 6

30
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . Node ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . Node ( n ) , null ) ; }
Distance : 9

31
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( toSource , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( toSource , n ) ; }
Distance : 4

32
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( this , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( this , n ) ; }
Distance : 5

33
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( this , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( this , n ) ; }
Distance : 5

34
Tree	{ toSource ( n ) ; return toSource ( n . Node ( n ) , null ) ; }
Code	{ toSource ( n ) ; return toSource ( n . Node ( n ) , null ) ; }
Distance : 10

35
Tree	{ toSource () ; return toSource ( n , n , Node , n ) ; }
Code	{ toSource () ; return toSource ( n , n , Node , n ) ; }
Distance : 5

36
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , Node , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , Node , n ) ; }
Distance : 4

37
Tree	{ toSource () ; return toSource ( ( , n ) ; }
Code	{ toSource () ; return toSource ( ( , n ) ; }
Distance : 5

38
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( this , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( this , n ) ; }
Distance : 5

39
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Distance : 2

40
Tree	{ toSource () ; return toSource ( n , null ) ; }
Code	{ toSource () ; return toSource ( n , null ) ; }
Distance : 3

41
Tree	{ toSource () ; return toSource . toSource ( this , n ) ; }
Code	{ toSource () ; return toSource . toSource ( this , n ) ; }
Distance : 6

42
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Distance : 2

43
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; }
Distance : 4

44
Tree	{ toSource () ; return toSource ( n , null ) ; }
Code	{ toSource () ; return toSource ( n , null ) ; }
Distance : 3

45
Tree	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; }
Code	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; }
Distance : 5

46
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; }
Distance : 4

47
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Distance : 7

48
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Distance : 7

49
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) null ) ; }
Distance : 4

50
Tree	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; }
Code	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; }
Distance : 5

51
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Distance : 7

52
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Distance : 7

53
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Distance : 7

54
Tree	{ toSource () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Distance : 8

55
Tree	{ toSource () ; return toSource ( n , ( n ) null ) ; }
Code	{ toSource () ; return toSource ( n , ( n ) null ) ; }
Distance : 5

56
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Distance : 7

57
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Distance : 7

58
Tree	{ initCompilerOptionsIfTesting () ; return Override . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return Override . toSource () . toSource ( n , n , n ) ; }
Distance : 7

59
Tree	{ toSource () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Distance : 8

60
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) null ) ; }
Distance : 4

61
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , null , n ) ; }
Distance : 3

62
Tree	{ String () ; return toSource ( n , null , null , n ) ; }
Code	{ String () ; return toSource ( n , null , null , n ) ; }
Distance : 4

63
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . n ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . n ( n ) , null ) ; }
Distance : 9

64
Tree	{ toSource () ; return toSource ( n , n , n , n ) ; }
Code	{ toSource () ; return toSource ( n , n , n , n ) ; }
Distance : 5

65
Tree	{ Override () ; return toSource ( n , ( n ) null ) ; }
Code	{ Override () ; return toSource ( n , ( n ) null ) ; }
Distance : 5

66
Tree	{ Node () ; return toSource ( n , ( n ) null ) ; }
Code	{ Node () ; return toSource ( n , ( n ) null ) ; }
Distance : 5

67
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . n ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . n ( n ) , null ) ; }
Distance : 9

68
Tree	{ toSource () ; return toSource ( n , ( n ) null ) ; }
Code	{ toSource () ; return toSource ( n , ( n ) null ) ; }
Distance : 5

69
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . n ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . n ( n ) , n ) ; }
Distance : 7

70
Tree	{ toSource () ; return toSource ( null , n . Node ( n ) ) ; }
Code	{ toSource () ; return toSource ( null , n . Node ( n ) ) ; }
Distance : 8

71
Tree	{ toSource () ; return toSource ( n , null , null , n ) ; }
Code	{ toSource () ; return toSource ( n , null , null , n ) ; }
Distance : 4

72
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , null , n ) ; }
Distance : 3

73
Tree	{ toSource () ; return toSource ( n , null , null , n ) ; }
Code	{ toSource () ; return toSource ( n , null , null , n ) ; }
Distance : 4

74
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . n ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . n ( n ) , null ) ; }
Distance : 6

75
Tree	{ toSource () ; return toSource ( n . n ( n ) , null ) ; }
Code	{ toSource () ; return toSource ( n . n ( n ) , null ) ; }
Distance : 7

76
Tree	{ initCompilerOptionsIfTesting () ; return Override . toSource ( this , n . n ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return Override . toSource ( this , n . n ( n ) ) ; }
Distance : 9

77
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . n ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . n ( n ) , null ) ; }
Distance : 6

78
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? Node : null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? Node : null ) ; }
Distance : 5

79
Tree	{ toSource () ; return toSource ( n . n ( n ) , null ) ; }
Code	{ toSource () ; return toSource ( n . n ( n ) , null ) ; }
Distance : 7

80
Tree	{ initCompilerOptionsIfTesting ( n ) ; return Override ( n . n ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return Override ( n . n ( n ) , null ) ; }
Distance : 10

81
Tree	{ toSource () ; return toSource ( n . Node ( n ) , null ) ; }
Code	{ toSource () ; return toSource ( n . Node ( n ) , null ) ; }
Distance : 7

82
Tree	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , initCompilerOptionsIfTesting ) ; }
Code	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , initCompilerOptionsIfTesting ) ; }
Distance : 3

83
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . Node ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . Node ( n ) , n ) ; }
Distance : 7

84
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . Node ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . Node ( n ) , null ) ; }
Distance : 6

85
Tree	{ toSource ( n ) ; return toSource ( n . n ( n ) , null ) ; }
Code	{ toSource ( n ) ; return toSource ( n . n ( n ) , null ) ; }
Distance : 10

86
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( toSource ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( toSource ) ; }
Distance : 6

87
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . null ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . null ( n ) , n ) ; }
Distance : 6

88
Tree	{ toSource () ; return toSource ( n , n . Node ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n , n . Node ( n ) , n ) ; }
Distance : 8

89
Tree	{ String () ; return toSource ( n , null , null , n ) ; }
Code	{ String () ; return toSource ( n , null , null , n ) ; }
Distance : 4

90
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . Node ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . Node ( n ) ) ; }
Distance : 7

91
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , String , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , String , n ) ; }
Distance : 4

92
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( toSource ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( toSource ) ; }
Distance : 6

93
Tree	{ toSource ( n ) ; return toSource ( n . Node ( n ) , null ) ; }
Code	{ toSource ( n ) ; return toSource ( n . Node ( n ) , null ) ; }
Distance : 10

94
Tree	{ toSource () ; return toSource ( toSource , n ) ; }
Code	{ toSource () ; return toSource ( toSource , n ) ; }
Distance : 5

95
Tree	{ toSource () ; return toSource . toSource ( this , n ) ; }
Code	{ toSource () ; return toSource . toSource ( this , n ) ; }
Distance : 6

96
Tree	{ toSource () ; return toSource ( n , n ? n : null ) ; }
Code	{ toSource () ; return toSource ( n , n ? n : null ) ; }
Distance : 6

97
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . Node ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . Node ( n ) ) ; }
Distance : 7

98
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( ( ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( ( ) ; }
Distance : 6

99
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . Node ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . Node ( n ) , n ) ; }
Distance : 7

100
Tree	{ initCompilerOptionsIfTesting () ; return Override . toSource ( this , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return Override . toSource ( this , n ) ; }
Distance : 6

101
Tree	{ toSource () ; return toSource . toSource ( this , n ) ; }
Code	{ toSource () ; return toSource . toSource ( this , n ) ; }
Distance : 6

102
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? n : null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? n : null ) ; }
Distance : 5

103
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( toSource ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( toSource ) ; }
Distance : 6

104
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( this , n . n ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( this , n . n ( n ) ) ; }
Distance : 9

105
Tree	{ toSource () ; return toSource ( n , n , String , n ) ; }
Code	{ toSource () ; return toSource ( n , n , String , n ) ; }
Distance : 5

106
Tree	{ toSource () ; return toSource ( n , n , Node , n ) ; }
Code	{ toSource () ; return toSource ( n , n , Node , n ) ; }
Distance : 5

107
Tree	{ toSource () ; return toSource . toSource ( this , n ) ; }
Code	{ toSource () ; return toSource . toSource ( this , n ) ; }
Distance : 6

108
Tree	{ toSource () ; return toSource ( n , n ? Node : null ) ; }
Code	{ toSource () ; return toSource ( n , n ? Node : null ) ; }
Distance : 6

109
Tree	{ toSource () ; return toSource ( n , n . n ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n , n . n ( n ) , n ) ; }
Distance : 8

110
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? Node : null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? Node : null ) ; }
Distance : 5

111
Tree	{ initCompilerOptionsIfTesting () ; return Override . toSource ( this , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return Override . toSource ( this , n ) ; }
Distance : 6

112
Tree	{ toSource () ; return toSource ( n , n ? n : null ) ; }
Code	{ toSource () ; return toSource ( n , n ? n : null ) ; }
Distance : 6

113
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( ( ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( ( ) ; }
Distance : 6

114
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? n : toSource ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? n : toSource ) ; }
Distance : 5

115
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . n ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . n ( n ) , n ) ; }
Distance : 7

116
Tree	{ toSource () ; return toSource ( n , n ? Node : null ) ; }
Code	{ toSource () ; return toSource ( n , n ? Node : null ) ; }
Distance : 6

117
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Distance : 7

118
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? Node : toSource ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? Node : toSource ) ; }
Distance : 5

119
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Distance : 7

120
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . n ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . n ( n ) , n ) ; }
Distance : 6

121
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . toSource ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . toSource ( n ) , n ) ; }
Distance : 7

122
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , false ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , false ) ; }
Distance : 4

123
Tree	{ toSource () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Distance : 8

124
Tree	{ toSource () ; return toSource ( n . n ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n . n ( n ) , n ) ; }
Distance : 7

125
Tree	{ toSource () ; return toSource ( n , n . null ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n , n . null ( n ) , n ) ; }
Distance : 7

126
Tree	{ initCompilerOptionsIfTesting . initCompilerOptionsIfTesting ( toSource ) ; return toSource ( n . n ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting . initCompilerOptionsIfTesting ( toSource ) ; return toSource ( n . n ( n ) , null ) ; }
Distance : 11

127
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , n ) ; }
Distance : 2

128
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . n ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . n ( n ) , n ) ; }
Distance : 6

129
Tree	{ toSource () ; return toSource ( n , n , n , false ) ; }
Code	{ toSource () ; return toSource ( n , n , n , false ) ; }
Distance : 5

130
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Distance : 7

131
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Distance : 7

132
Tree	{ initCompilerOptionsIfTesting . initCompilerOptionsIfTesting ( toSource ) ; return toSource ( n . n ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting . initCompilerOptionsIfTesting ( toSource ) ; return toSource ( n . n ( n ) , null ) ; }
Distance : 11

133
Tree	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , n ) ; }
Code	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , n ) ; }
Distance : 3

134
Tree	{ initCompilerOptionsIfTesting () ; return Override ( n , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return Override ( n , null ) ; }
Distance : 3

135
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Distance : 7

136
Tree	{ toSource . initCompilerOptionsIfTesting ( toSource ) ; return toSource ( n . n ( n ) , null ) ; }
Code	{ toSource . initCompilerOptionsIfTesting ( toSource ) ; return toSource ( n . n ( n ) , null ) ; }
Distance : 11

137
Tree	{ String () ; return toSource ( STRING_CONSTANT , n ) ; }
Code	{ String () ; return toSource ( STRING_CONSTANT , n ) ; }
Distance : 5

138
Tree	{ initCompilerOptionsIfTesting () ; return Override ( n , null , null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return Override ( n , null , null , n ) ; }
Distance : 4

139
Tree	{ toSource () ; return toSource ( null , n . Node ( n ) ) ; }
Code	{ toSource () ; return toSource ( null , n . Node ( n ) ) ; }
Distance : 8

140
Tree	{ String () ; return toSource ( n , ( n ) null ) ; }
Code	{ String () ; return toSource ( n , ( n ) null ) ; }
Distance : 5

141
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; }
Distance : 7

142
Tree	{ initCompilerOptionsIfTesting . initCompilerOptionsIfTesting ( ( ) ; return toSource ( n . n ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting . initCompilerOptionsIfTesting ( ( ) ; return toSource ( n . n ( n ) , null ) ; }
Distance : 11

143
Tree	{ initCompilerOptionsIfTesting . toSource ( toSource ) ; return toSource ( n . n ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting . toSource ( toSource ) ; return toSource ( n . n ( n ) , null ) ; }
Distance : 11

144
Tree	{ toSource () ; return toSource ( n , n . n ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n , n . n ( n ) , n ) ; }
Distance : 8

145
Tree	{ toSource () ; return toSource ( n , n , Node , false ) ; }
Code	{ toSource () ; return toSource ( n , n , Node , false ) ; }
Distance : 5

146
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , Node , false ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , Node , false ) ; }
Distance : 4

147
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( toSource ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( toSource ) ; }
Distance : 6

148
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . null ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . null ( n ) ) ; }
Distance : 6

149
Tree	{ toSource () ; return toSource ( n , n , n , n ) ; }
Code	{ toSource () ; return toSource ( n , n , n , n ) ; }
Distance : 5

150
Tree	{ toSource () ; return toSource ( null , n . n ( n ) ) ; }
Code	{ toSource () ; return toSource ( null , n . n ( n ) ) ; }
Distance : 8

151
Tree	{ toSource . initCompilerOptionsIfTesting ( toSource ) ; return toSource ( n . n ( n ) , null ) ; }
Code	{ toSource . initCompilerOptionsIfTesting ( toSource ) ; return toSource ( n . n ( n ) , null ) ; }
Distance : 11

152
Tree	{ Override () ; return toSource ( STRING_CONSTANT , n ) ; }
Code	{ Override () ; return toSource ( STRING_CONSTANT , n ) ; }
Distance : 5

153
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , toSource ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , toSource ) ; }
Distance : 2

154
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( n ) ; }
Distance : 6

155
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ) ; }
Distance : 3

156
Tree	{ toSource () ; return toSource . toSource ( toSource ) ; }
Code	{ toSource () ; return toSource . toSource ( toSource ) ; }
Distance : 7

157
Tree	{ toSource () ; return Override ( n . n ( n ) , null ) ; }
Code	{ toSource () ; return Override ( n . n ( n ) , null ) ; }
Distance : 8

158
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; }
Distance : 4

159
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , initCompilerOptionsIfTesting ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , initCompilerOptionsIfTesting ) ; }
Distance : 2

160
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . n ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . n ( n ) ) ; }
Distance : 7

161
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( this , n . n ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( this , n . n ( n ) ) ; }
Distance : 9

162
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( this , n . n ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( this , n . n ( n ) ) ; }
Distance : 9

163
Tree	{ initCompilerOptionsIfTesting () ; return Override . toSource ( toSource ) ; }
Code	{ initCompilerOptionsIfTesting () ; return Override . toSource ( toSource ) ; }
Distance : 7

164
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( Node , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( Node , n ) ; }
Distance : 4

165
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , String , false ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , String , false ) ; }
Distance : 4

166
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( ( ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( ( ) ; }
Distance : 6

167
Tree	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , toSource ) ; }
Code	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , toSource ) ; }
Distance : 3

168
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( this , n . n ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource ( this , n . n ( n ) ) ; }
Distance : 9

169
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , toSource ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , toSource ) ; }
Distance : 2

170
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , false ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , false ) ; }
Distance : 4

171
Tree	{ toSource () ; return toSource . toSource ( this , n . n ( n ) ) ; }
Code	{ toSource () ; return toSource . toSource ( this , n . n ( n ) ) ; }
Distance : 10

172
Tree	{ toSource () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Distance : 8

173
Tree	{ toSource () ; return toSource ( n . n ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n . n ( n ) , n ) ; }
Distance : 7

174
Tree	{ toSource () ; return toSource . toSource ( this , n . n ( n ) ) ; }
Code	{ toSource () ; return toSource . toSource ( this , n . n ( n ) ) ; }
Distance : 10

175
Tree	{ toSource () ; return Override ( n , null ) ; }
Code	{ toSource () ; return Override ( n , null ) ; }
Distance : 4

176
Tree	{ toSource () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Distance : 8

177
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Distance : 7

178
Tree	{ toSource () ; return toSource ( n , n , n , false ) ; }
Code	{ toSource () ; return toSource ( n , n , n , false ) ; }
Distance : 5

179
Tree	{ initCompilerOptionsIfTesting () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource . toSource () . toSource ( n , n , n ) ; }
Distance : 7

180
Tree	{ initCompilerOptionsIfTesting . initCompilerOptionsIfTesting ( toSource ) ; return toSource ( n . n ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting . initCompilerOptionsIfTesting ( toSource ) ; return toSource ( n . n ( n ) , null ) ; }
Distance : 11

181
Tree	{ toSource . initCompilerOptionsIfTesting ( toSource ) ; return toSource ( n . n ( n ) , null ) ; }
Code	{ toSource . initCompilerOptionsIfTesting ( toSource ) ; return toSource ( n . n ( n ) , null ) ; }
Distance : 11

182
Tree	{ initCompilerOptionsIfTesting . toSource ( toSource ) ; return toSource ( n . n ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting . toSource ( toSource ) ; return toSource ( n . n ( n ) , null ) ; }
Distance : 11

183
Tree	{ toSource . toSource ( toSource ) ; return toSource ( n . n ( n ) , null ) ; }
Code	{ toSource . toSource ( toSource ) ; return toSource ( n . n ( n ) , null ) ; }
Distance : 12

184
Tree	{ Node () ; return toSource ( STRING_CONSTANT , n ) ; }
Code	{ Node () ; return toSource ( STRING_CONSTANT , n ) ; }
Distance : 5

185
Tree	{ toSource () ; return Override ( n , null , null , n ) ; }
Code	{ toSource () ; return Override ( n , null , null , n ) ; }
Distance : 5

186
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . Node ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . Node ( n ) , null ) ; }
Distance : 6

187
Tree	{ toSource () ; return toSource ( n . Node ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n . Node ( n ) , n ) ; }
Distance : 7

188
Tree	{ String () ; return toSource ( n , ( n ) null ) ; }
Code	{ String () ; return toSource ( n , ( n ) null ) ; }
Distance : 5

189
Tree	{ toSource () ; return toSource ( n , n , Node , false ) ; }
Code	{ toSource () ; return toSource ( n , n , Node , false ) ; }
Distance : 5

190
Tree	{ toSource () ; return toSource ( null , n . n ( n ) ) ; }
Code	{ toSource () ; return toSource ( null , n . n ( n ) ) ; }
Distance : 8

191
Tree	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , initCompilerOptionsIfTesting ) ; }
Code	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , initCompilerOptionsIfTesting ) ; }
Distance : 3

192
Tree	{ toSource () ; return toSource ( n , n , String , false ) ; }
Code	{ toSource () ; return toSource ( n , n , String , false ) ; }
Distance : 5

193
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , initCompilerOptionsIfTesting ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , initCompilerOptionsIfTesting ) ; }
Distance : 2

194
Tree	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , toSource ) ; }
Code	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , toSource ) ; }
Distance : 3

195
Tree	{ initCompilerOptionsIfTesting () ; return Override . toSource ( this , n . n ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return Override . toSource ( this , n . n ( n ) ) ; }
Distance : 9

196
Tree	{ String ( n ) ; return toSource ( n . n ( n ) , null ) ; }
Code	{ String ( n ) ; return toSource ( n . n ( n ) , null ) ; }
Distance : 10

197
Tree	{ toSource () ; return toSource . toSource ( this , n . n ( n ) ) ; }
Code	{ toSource () ; return toSource . toSource ( this , n . n ( n ) ) ; }
Distance : 10

198
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? n : null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? n : null ) ; }
Distance : 5

199
Tree	{ toSource () ; return toSource . toSource ( this , n . n ( n ) ) ; }
Code	{ toSource () ; return toSource . toSource ( this , n . n ( n ) ) ; }
Distance : 10

========================================================================


========================================================================
Example Number: 23
Parent Code is: 
String code = toSource ( root , sourceMap ) ;
-------------------------------------------------------------------------------
Child code is: 
String code = toSource ( root , sourceMap , inputSeqNum == NUMBER_CONSTANT ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=code}) (204{val==}) (32 (802{val=toSource}) (214{val=(}) (800{val=root}) (234{val=,}) (800{val=sourceMap}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=code}) (204{val==}) (32 (802{val=toSource}) (214{val=(}) (800{val=root}) (234{val=,}) (800{val=sourceMap}) (234{val=,}) (27 (800{val=inputSeqNum}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/64/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	String code = endsWith ( root , this . code ) ;
Code	String code = endsWith ( root , this . code ) ;
Distance : 6

1
Tree	String code = sourceMap . delimiter ( root ) ;
Code	String code = sourceMap . delimiter ( root ) ;
Distance : 8

2
Tree	String code = sourceMap . charAt ( root ) ;
Code	String code = sourceMap . charAt ( root ) ;
Distance : 8

3
Tree	String code = delimiter . sourceMap ( root ) ;
Code	String code = delimiter . sourceMap ( root ) ;
Distance : 8

4
Tree	String code = charAt ( root , sourceMap , false ) ;
Code	String code = charAt ( root , sourceMap , false ) ;
Distance : 4

5
Tree	String code = sourceMap . sourceMap ( root , sourceMap ) ;
Code	String code = sourceMap . sourceMap ( root , sourceMap ) ;
Distance : 7

6
Tree	String code = getLength ( root ) ;
Code	String code = getLength ( root ) ;
Distance : 7

7
Tree	String code = code . charAt ( root ) ;
Code	String code = code . charAt ( root ) ;
Distance : 9

8
Tree	String code = delimiter ( root ) ;
Code	String code = delimiter ( root ) ;
Distance : 7

9
Tree	String code = code . sourceMap ( root ) ;
Code	String code = code . sourceMap ( root ) ;
Distance : 8

10
Tree	String code = sourceMap ( root , sourceMap , cb ) ;
Code	String code = sourceMap ( root , sourceMap , cb ) ;
Distance : 4

11
Tree	String code = code ( root , sourceMap , sourceMap ) ;
Code	String code = code ( root , sourceMap , sourceMap ) ;
Distance : 4

12
Tree	String code = sourceMap ( root , sourceMap , code ) ;
Code	String code = sourceMap ( root , sourceMap , code ) ;
Distance : 4

13
Tree	String code = code ( root , code , false ) ;
Code	String code = code ( root , code , false ) ;
Distance : 5

14
Tree	String code = sourceMap ( root , sourceMap , false ) ;
Code	String code = sourceMap ( root , sourceMap , false ) ;
Distance : 4

15
Tree	String code = code . delimiter ( root ) ;
Code	String code = code . delimiter ( root ) ;
Distance : 9

16
Tree	String code = code ( root , sourceMap , cb ) ;
Code	String code = code ( root , sourceMap , cb ) ;
Distance : 4

17
Tree	String code = endsWith ( root , code , sourceMap ) ;
Code	String code = endsWith ( root , code , sourceMap ) ;
Distance : 5

18
Tree	String code = runInCompilerThread ( root ) ;
Code	String code = runInCompilerThread ( root ) ;
Distance : 7

19
Tree	String code = code ( root , sourceMap ) ;
Code	String code = code ( root , sourceMap ) ;
Distance : 5

20
Tree	String code = endsWith ( root , code ) ;
Code	String code = endsWith ( root , code ) ;
Distance : 6

21
Tree	String code = Token.SCRIPT ( root ) ;
Code	String code = Token.SCRIPT ( root ) ;
Distance : 7

22
Tree	String code = delimiter ( root ) ;
Code	String code = delimiter ( root ) ;
Distance : 7

23
Tree	String code = cb ( root ) ;
Code	String code = cb ( root ) ;
Distance : 7

24
Tree	String code = sourceMap ( root , sourceMap , sourceMap , cb ) ;
Code	String code = sourceMap ( root , sourceMap , sourceMap , cb ) ;
Distance : 4

25
Tree	String code = ( ( root ) this ) . isEmpty ( root , sourceMap ) ;
Code	String code = ( ( root ) this ) . isEmpty ( root , sourceMap ) ;
Distance : 10

26
Tree	String code = cb ( root , sourceMap ) ;
Code	String code = cb ( root , sourceMap ) ;
Distance : 5

27
Tree	String code = cb ( root , code , false ) ;
Code	String code = cb ( root , code , false ) ;
Distance : 5

28
Tree	String code = sourceMap . charAt ( root , sourceMap ) ;
Code	String code = sourceMap . charAt ( root , sourceMap ) ;
Distance : 7

29
Tree	String code = sourceMap . delimiter ( root , sourceMap ) ;
Code	String code = sourceMap . delimiter ( root , sourceMap ) ;
Distance : 7

30
Tree	String code = sourceMap ( root , code , cb ) ;
Code	String code = sourceMap ( root , code , cb ) ;
Distance : 5

31
Tree	String code = Preconditions ( root ) ;
Code	String code = Preconditions ( root ) ;
Distance : 7

32
Tree	String code = sourceMap ( root , code , code ) ;
Code	String code = sourceMap ( root , code , code ) ;
Distance : 5

33
Tree	String code = sourceMap ( root , code , sourceMap , cb ) ;
Code	String code = sourceMap ( root , code , sourceMap , cb ) ;
Distance : 5

34
Tree	String code = sourceMap . code ( root ) ;
Code	String code = sourceMap . code ( root ) ;
Distance : 8

35
Tree	String code = delimiter ( root , sourceMap ) ;
Code	String code = delimiter ( root , sourceMap ) ;
Distance : 5

36
Tree	String code = cb ( root , sourceMap ) ;
Code	String code = cb ( root , sourceMap ) ;
Distance : 5

37
Tree	String code = sourceMap ( root ) ;
Code	String code = sourceMap ( root ) ;
Distance : 7

38
Tree	String code = sourceMap ( root , code , false ) ;
Code	String code = sourceMap ( root , code , false ) ;
Distance : 5

39
Tree	String code = code . charAt ( root , sourceMap ) ;
Code	String code = code . charAt ( root , sourceMap ) ;
Distance : 7

40
Tree	String code = ( ( root ) this ) . replaceAll ( root , code ) ;
Code	String code = ( ( root ) this ) . replaceAll ( root , code ) ;
Distance : 10

41
Tree	String code = root ( root , sourceMap , sourceMap ) ;
Code	String code = root ( root , sourceMap , sourceMap ) ;
Distance : 4

42
Tree	String code = code . delimiter ( root , sourceMap ) ;
Code	String code = code . delimiter ( root , sourceMap ) ;
Distance : 7

43
Tree	String code = sourceMap ( root , sourceMap , cb ) ;
Code	String code = sourceMap ( root , sourceMap , cb ) ;
Distance : 4

44
Tree	String code = sourceMap . cb ( root ) ;
Code	String code = sourceMap . cb ( root ) ;
Distance : 8

45
Tree	String code = sourceMap ( root , cb ) ;
Code	String code = sourceMap ( root , cb ) ;
Distance : 6

46
Tree	String code = sourceMap ( root , code , cb ) ;
Code	String code = sourceMap ( root , code , cb ) ;
Distance : 5

47
Tree	String code = sourceMap ( root , code , cb , cb ) ;
Code	String code = sourceMap ( root , code , cb , cb ) ;
Distance : 5

48
Tree	String code = sourceMap ( root , code , code , sourceMap ) ;
Code	String code = sourceMap ( root , code , code , sourceMap ) ;
Distance : 5

49
Tree	String code = code ( root , sourceMap , false ) ;
Code	String code = code ( root , sourceMap , false ) ;
Distance : 4

50
Tree	String code = code . cb ( root ) ;
Code	String code = code . cb ( root ) ;
Distance : 9

51
Tree	String code = root . sourceMap ( root ) ;
Code	String code = root . sourceMap ( root ) ;
Distance : 7

52
Tree	String code = sourceMap ( root , sourceMap ) ;
Code	String code = sourceMap ( root , sourceMap ) ;
Distance : 5

53
Tree	String code = root ( root , code , sourceMap ) ;
Code	String code = root ( root , code , sourceMap ) ;
Distance : 5

54
Tree	String code = endsWith ( root , sourceMap ) ;
Code	String code = endsWith ( root , sourceMap ) ;
Distance : 5

55
Tree	String code = endsWith ( root ) ;
Code	String code = endsWith ( root ) ;
Distance : 7

56
Tree	String code = endsWith ( root ) ;
Code	String code = endsWith ( root ) ;
Distance : 7

57
Tree	String code = code ( root , sourceMap ) ;
Code	String code = code ( root , sourceMap ) ;
Distance : 5

58
Tree	String code = endsWith ( root , code , false ) ;
Code	String code = endsWith ( root , code , false ) ;
Distance : 5

59
Tree	String code = code . code ( root ) ;
Code	String code = code . code ( root ) ;
Distance : 9

60
Tree	String code = sourceMap ( root , sourceMap , cb , sourceMap ) ;
Code	String code = sourceMap ( root , sourceMap , cb , sourceMap ) ;
Distance : 4

61
Tree	String code = ( ( root ) this ) . sourceMap ( root , sourceMap ) ;
Code	String code = ( ( root ) this ) . sourceMap ( root , sourceMap ) ;
Distance : 9

62
Tree	String code = sourceMap ( root , code ) ;
Code	String code = sourceMap ( root , code ) ;
Distance : 6

63
Tree	String code = charAt ( root ) ;
Code	String code = charAt ( root ) ;
Distance : 7

64
Tree	String code = ( ( root ) this ) . replaceAll ( root , cb ) ;
Code	String code = ( ( root ) this ) . replaceAll ( root , cb ) ;
Distance : 10

65
Tree	String code = ( ( root ) this ) . charAt ( root , code ) ;
Code	String code = ( ( root ) this ) . charAt ( root , code ) ;
Distance : 10

66
Tree	String code = cb ( root , sourceMap , false ) ;
Code	String code = cb ( root , sourceMap , false ) ;
Distance : 4

67
Tree	String code = String ( root ) ;
Code	String code = String ( root ) ;
Distance : 7

68
Tree	String code = code ( root ) ;
Code	String code = code ( root ) ;
Distance : 7

69
Tree	String code = runInCompilerThread ( root ) ;
Code	String code = runInCompilerThread ( root ) ;
Distance : 7

70
Tree	String code = ( ( root ) this ) . endsWith ( root , code ) ;
Code	String code = ( ( root ) this ) . endsWith ( root , code ) ;
Distance : 10

71
Tree	String code = code ( root , code ) ;
Code	String code = code ( root , code ) ;
Distance : 6

72
Tree	String code = sourceMap ( root , sourceMap ) ;
Code	String code = sourceMap ( root , sourceMap ) ;
Distance : 5

73
Tree	String code = sourceMap ( root , code , cb , sourceMap ) ;
Code	String code = sourceMap ( root , code , cb , sourceMap ) ;
Distance : 5

74
Tree	String code = cb ( root ) ;
Code	String code = cb ( root ) ;
Distance : 7

75
Tree	String code = root ( root , sourceMap ) ;
Code	String code = root ( root , sourceMap ) ;
Distance : 5

76
Tree	String code = code . replaceAll ( this , root , sourceMap ) ;
Code	String code = code . replaceAll ( this , root , sourceMap ) ;
Distance : 8

77
Tree	String code = root . delimiter ( this , root , sourceMap ) ;
Code	String code = root . delimiter ( this , root , sourceMap ) ;
Distance : 8

78
Tree	String code = root . charAt ( this , root , sourceMap ) ;
Code	String code = root . charAt ( this , root , sourceMap ) ;
Distance : 8

79
Tree	String code = code . charAt ( root , sourceMap , sourceMap ) ;
Code	String code = code . charAt ( root , sourceMap , sourceMap ) ;
Distance : 6

80
Tree	String code = code . delimiter ( root , sourceMap , sourceMap ) ;
Code	String code = code . delimiter ( root , sourceMap , sourceMap ) ;
Distance : 6

81
Tree	String code = sourceMap . replaceAll ( root , sourceMap ) ;
Code	String code = sourceMap . replaceAll ( root , sourceMap ) ;
Distance : 7

82
Tree	String code = sourceMap () . sourceMap ( root , sourceMap ) ;
Code	String code = sourceMap () . sourceMap ( root , sourceMap ) ;
Distance : 8

83
Tree	String code = sourceMap . delimiter ( root , code , sourceMap ) ;
Code	String code = sourceMap . delimiter ( root , code , sourceMap ) ;
Distance : 7

84
Tree	String code = sourceMap () . sourceMap ( root ) ;
Code	String code = sourceMap () . sourceMap ( root ) ;
Distance : 8

85
Tree	String code = sourceMap () . endsWith ( root ) ;
Code	String code = sourceMap () . endsWith ( root ) ;
Distance : 9

86
Tree	String code = sourceMap ( root , code ) ;
Code	String code = sourceMap ( root , code ) ;
Distance : 6

87
Tree	String code = sourceMap . charAt ( root , code , sourceMap ) ;
Code	String code = sourceMap . charAt ( root , code , sourceMap ) ;
Distance : 7

88
Tree	String code = code . replaceAll ( root , sourceMap , sourceMap ) ;
Code	String code = code . replaceAll ( root , sourceMap , sourceMap ) ;
Distance : 6

89
Tree	String code = root ( root , code ) ;
Code	String code = root ( root , code ) ;
Distance : 6

90
Tree	String code = code . sourceMap ( this , root , sourceMap ) ;
Code	String code = code . sourceMap ( this , root , sourceMap ) ;
Distance : 8

91
Tree	String code = sourceMap . sourceMap ( root , sourceMap , sourceMap ) ;
Code	String code = sourceMap . sourceMap ( root , sourceMap , sourceMap ) ;
Distance : 6

92
Tree	String code = sourceMap . sourceMap ( root , sourceMap ) ;
Code	String code = sourceMap . sourceMap ( root , sourceMap ) ;
Distance : 7

93
Tree	String code = Token.SCRIPT ( root , this . code ) ;
Code	String code = Token.SCRIPT ( root , this . code ) ;
Distance : 6

94
Tree	String code = sourceMap () . code ( root ) ;
Code	String code = sourceMap () . code ( root ) ;
Distance : 9

95
Tree	String code = code ( root , this . code ) ;
Code	String code = code ( root , this . code ) ;
Distance : 6

96
Tree	String code = code ( root , code ) ;
Code	String code = code ( root , code ) ;
Distance : 6

97
Tree	String code = code . sourceMap ( root , sourceMap , sourceMap ) ;
Code	String code = code . sourceMap ( root , sourceMap , sourceMap ) ;
Distance : 6

98
Tree	String code = sourceMap . replaceAll ( root , sourceMap , sourceMap ) ;
Code	String code = sourceMap . replaceAll ( root , sourceMap , sourceMap ) ;
Distance : 6

99
Tree	String code = sourceMap ( root , sourceMap , sourceMap ) ;
Code	String code = sourceMap ( root , sourceMap , sourceMap ) ;
Distance : 4

100
Tree	String code = sourceMap () . delimiter ( root ) ;
Code	String code = sourceMap () . delimiter ( root ) ;
Distance : 9

101
Tree	String code = sourceMap () . sourceMap ( root , code ) ;
Code	String code = sourceMap () . sourceMap ( root , code ) ;
Distance : 8

102
Tree	String code = sourceMap . replaceAll ( root ) ;
Code	String code = sourceMap . replaceAll ( root ) ;
Distance : 8

103
Tree	String code = sourceMap . delimiter ( root , sourceMap ) ;
Code	String code = sourceMap . delimiter ( root , sourceMap ) ;
Distance : 7

104
Tree	String code = sourceMap () . endsWith ( root , sourceMap ) ;
Code	String code = sourceMap () . endsWith ( root , sourceMap ) ;
Distance : 8

105
Tree	String code = code . sourceMap ( root , sourceMap ) ;
Code	String code = code . sourceMap ( root , sourceMap ) ;
Distance : 7

106
Tree	String code = code ( root ) ;
Code	String code = code ( root ) ;
Distance : 7

107
Tree	String code = sourceMap . replaceAll ( this , root , sourceMap ) ;
Code	String code = sourceMap . replaceAll ( this , root , sourceMap ) ;
Distance : 8

108
Tree	String code = code . replaceAll ( this , root ) ;
Code	String code = code . replaceAll ( this , root ) ;
Distance : 8

109
Tree	String code = sourceMap . replaceAll ( root , sourceMap ) ;
Code	String code = sourceMap . replaceAll ( root , sourceMap ) ;
Distance : 7

110
Tree	String code = sourceMap ( root , code , sourceMap ) ;
Code	String code = sourceMap ( root , code , sourceMap ) ;
Distance : 5

111
Tree	String code = code . replaceAll ( root ) ;
Code	String code = code . replaceAll ( root ) ;
Distance : 9

112
Tree	String code = cb ( root , this . code ) ;
Code	String code = cb ( root , this . code ) ;
Distance : 6

113
Tree	String code = sourceMap ( root , sourceMap , sourceMap ) ;
Code	String code = sourceMap ( root , sourceMap , sourceMap ) ;
Distance : 4

114
Tree	String code = sourceMap . delimiter ( root , sourceMap , sourceMap ) ;
Code	String code = sourceMap . delimiter ( root , sourceMap , sourceMap ) ;
Distance : 6

115
Tree	String code = sourceMap . sourceMap ( root ) ;
Code	String code = sourceMap . sourceMap ( root ) ;
Distance : 8

116
Tree	String code = root . delimiter ( root ) ;
Code	String code = root . delimiter ( root ) ;
Distance : 8

117
Tree	String code = replaceAll ( root ) ;
Code	String code = replaceAll ( root ) ;
Distance : 7

118
Tree	String code = root . code ( root ) ;
Code	String code = root . code ( root ) ;
Distance : 8

119
Tree	String code = root . cb ( root ) ;
Code	String code = root . cb ( root ) ;
Distance : 8

120
Tree	String code = sourceMap . delimiter ( root , code ) ;
Code	String code = sourceMap . delimiter ( root , code ) ;
Distance : 8

121
Tree	String code = root . charAt ( root ) ;
Code	String code = root . charAt ( root ) ;
Distance : 8

122
Tree	String code = code ( root , sourceMap , sourceMap ) ;
Code	String code = code ( root , sourceMap , sourceMap ) ;
Distance : 4

123
Tree	String code = sourceMap ( root , cb ) ;
Code	String code = sourceMap ( root , cb ) ;
Distance : 6

124
Tree	String code = ( ( root ) this ) . replaceAll ( root , sourceMap ) ;
Code	String code = ( ( root ) this ) . replaceAll ( root , sourceMap ) ;
Distance : 10

125
Tree	String code = sourceMap ( root , cb , false ) ;
Code	String code = sourceMap ( root , cb , false ) ;
Distance : 5

126
Tree	String code = sourceMap ( root , sourceMap , cb , cb ) ;
Code	String code = sourceMap ( root , sourceMap , cb , cb ) ;
Distance : 4

127
Tree	String code = sourceMap . charAt ( root , code ) ;
Code	String code = sourceMap . charAt ( root , code ) ;
Distance : 8

128
Tree	String code = sourceMap ( root , sourceMap , code ) ;
Code	String code = sourceMap ( root , sourceMap , code ) ;
Distance : 4

129
Tree	String code = cb ( root , code ) ;
Code	String code = cb ( root , code ) ;
Distance : 6

130
Tree	String code = sourceMap . charAt ( root , sourceMap , sourceMap ) ;
Code	String code = sourceMap . charAt ( root , sourceMap , sourceMap ) ;
Distance : 6

131
Tree	String code = sourceMap ( root , sourceMap , code , sourceMap ) ;
Code	String code = sourceMap ( root , sourceMap , code , sourceMap ) ;
Distance : 4

132
Tree	String code = replaceAll ( root , this . code ) ;
Code	String code = replaceAll ( root , this . code ) ;
Distance : 6

133
Tree	String code = charAt ( root , this . code ) ;
Code	String code = charAt ( root , this . code ) ;
Distance : 6

134
Tree	String code = sourceMap ( root , code , sourceMap ) ;
Code	String code = sourceMap ( root , code , sourceMap ) ;
Distance : 5

135
Tree	String code = code ( root , cb ) ;
Code	String code = code ( root , cb ) ;
Distance : 6

136
Tree	String code = ( ( root ) this ) . sourceMap ( root , code ) ;
Code	String code = ( ( root ) this ) . sourceMap ( root , code ) ;
Distance : 9

137
Tree	String code = root . delimiter ( this , root ) ;
Code	String code = root . delimiter ( this , root ) ;
Distance : 8

138
Tree	String code = sourceMap ( root , cb , sourceMap ) ;
Code	String code = sourceMap ( root , cb , sourceMap ) ;
Distance : 5

139
Tree	String code = sourceMap ( root , sourceMap , sourceMap , sourceMap ) ;
Code	String code = sourceMap ( root , sourceMap , sourceMap , sourceMap ) ;
Distance : 4

140
Tree	String code = sourceMap . sourceMap ( root ) ;
Code	String code = sourceMap . sourceMap ( root ) ;
Distance : 8

141
Tree	String code = endsWith ( root , sourceMap , sourceMap ) ;
Code	String code = endsWith ( root , sourceMap , sourceMap ) ;
Distance : 4

142
Tree	String code = sourceMap ( root , code , sourceMap , sourceMap ) ;
Code	String code = sourceMap ( root , code , sourceMap , sourceMap ) ;
Distance : 5

143
Tree	String code = ( ( root ) this ) . charAt ( root , sourceMap ) ;
Code	String code = ( ( root ) this ) . charAt ( root , sourceMap ) ;
Distance : 10

144
Tree	String code = ( ( root ) this ) . endsWith ( root , sourceMap ) ;
Code	String code = ( ( root ) this ) . endsWith ( root , sourceMap ) ;
Distance : 10

145
Tree	String code = sourceMap . delimiter ( this , root ) ;
Code	String code = sourceMap . delimiter ( this , root ) ;
Distance : 8

146
Tree	String code = sourceMap . charAt ( root , sourceMap ) ;
Code	String code = sourceMap . charAt ( root , sourceMap ) ;
Distance : 7

147
Tree	String code = sourceMap . sourceMap ( root , code ) ;
Code	String code = sourceMap . sourceMap ( root , code ) ;
Distance : 8

148
Tree	String code = charAt ( root , sourceMap ) ;
Code	String code = charAt ( root , sourceMap ) ;
Distance : 5

149
Tree	String code = sourceMap . charAt ( this , root ) ;
Code	String code = sourceMap . charAt ( this , root ) ;
Distance : 8

150
Tree	String code = sourceMap ( root ) ;
Code	String code = sourceMap ( root ) ;
Distance : 7

151
Tree	String code = sourceMap () . runInCompilerThread ( root ) ;
Code	String code = sourceMap () . runInCompilerThread ( root ) ;
Distance : 9

152
Tree	String code = Void ( root ) ;
Code	String code = Void ( root ) ;
Distance : 7

153
Tree	String code = sourceMap . replaceAll ( root , code ) ;
Code	String code = sourceMap . replaceAll ( root , code ) ;
Distance : 8

154
Tree	String code = sourceMap ( root , this . code ) ;
Code	String code = sourceMap ( root , this . code ) ;
Distance : 6

155
Tree	String code = endsWith ( root , sourceMap , false ) ;
Code	String code = endsWith ( root , sourceMap , false ) ;
Distance : 4

156
Tree	String code = sourceMap () . endsWith ( root , code ) ;
Code	String code = sourceMap () . endsWith ( root , code ) ;
Distance : 9

157
Tree	String code = endsWith () . sourceMap ( root ) ;
Code	String code = endsWith () . sourceMap ( root ) ;
Distance : 8

158
Tree	String code = sourceMap . charAt ( this , root , sourceMap ) ;
Code	String code = sourceMap . charAt ( this , root , sourceMap ) ;
Distance : 8

159
Tree	String code = sourceMap ( Node () , STRING_CONSTANT , root , sourceMap ) ;
Code	String code = sourceMap ( Node () , STRING_CONSTANT , root , sourceMap ) ;
Distance : 7

160
Tree	String code = code . replaceAll ( root , sourceMap ) ;
Code	String code = code . replaceAll ( root , sourceMap ) ;
Distance : 7

161
Tree	String code = sourceMap . endsWith ( root , sourceMap ) ;
Code	String code = sourceMap . endsWith ( root , sourceMap ) ;
Distance : 7

162
Tree	String code = code . charAt ( this , root ) ;
Code	String code = code . charAt ( this , root ) ;
Distance : 8

163
Tree	String code = sourceMap ( String () , STRING_CONSTANT , root , sourceMap ) ;
Code	String code = sourceMap ( String () , STRING_CONSTANT , root , sourceMap ) ;
Distance : 7

164
Tree	String code = sourceMap ( Exception () , STRING_CONSTANT , root , sourceMap ) ;
Code	String code = sourceMap ( Exception () , STRING_CONSTANT , root , sourceMap ) ;
Distance : 7

165
Tree	String code = sourceMap ( root () , STRING_CONSTANT , root , sourceMap ) ;
Code	String code = sourceMap ( root () , STRING_CONSTANT , root , sourceMap ) ;
Distance : 6

166
Tree	String code = code . delimiter ( this , root ) ;
Code	String code = code . delimiter ( this , root ) ;
Distance : 8

167
Tree	String code = code . sourceMap ( root ) ;
Code	String code = code . sourceMap ( root ) ;
Distance : 8

168
Tree	String code = sourceMap () . String ( root ) ;
Code	String code = sourceMap () . String ( root ) ;
Distance : 9

169
Tree	String code = code . charAt ( this , root , sourceMap ) ;
Code	String code = code . charAt ( this , root , sourceMap ) ;
Distance : 8

170
Tree	String code = sourceMap ( cb () , STRING_CONSTANT , root , sourceMap ) ;
Code	String code = sourceMap ( cb () , STRING_CONSTANT , root , sourceMap ) ;
Distance : 7

171
Tree	String code = code . delimiter ( this , root , sourceMap ) ;
Code	String code = code . delimiter ( this , root , sourceMap ) ;
Distance : 8

172
Tree	String code = sourceMap () . replaceAll ( root ) ;
Code	String code = sourceMap () . replaceAll ( root ) ;
Distance : 9

173
Tree	String code = sourceMap ( endsWith () , STRING_CONSTANT , root , sourceMap ) ;
Code	String code = sourceMap ( endsWith () , STRING_CONSTANT , root , sourceMap ) ;
Distance : 7

174
Tree	String code = sourceMap . delimiter ( root , code ) ;
Code	String code = sourceMap . delimiter ( root , code ) ;
Distance : 8

175
Tree	String code = sourceMap . sourceMap ( this , root ) ;
Code	String code = sourceMap . sourceMap ( this , root ) ;
Distance : 8

176
Tree	String code = root ( root ) ;
Code	String code = root ( root ) ;
Distance : 7

177
Tree	String code = root . charAt ( this , root ) ;
Code	String code = root . charAt ( this , root ) ;
Distance : 8

178
Tree	String code = sourceMap () . delimiter ( root , sourceMap ) ;
Code	String code = sourceMap () . delimiter ( root , sourceMap ) ;
Distance : 8

179
Tree	String code = sourceMap . charAt ( root , code ) ;
Code	String code = sourceMap . charAt ( root , code ) ;
Distance : 8

180
Tree	String code = sourceMap . sourceMap ( this , root , sourceMap ) ;
Code	String code = sourceMap . sourceMap ( this , root , sourceMap ) ;
Distance : 8

181
Tree	String code = runInCompilerThread ( root , this . code ) ;
Code	String code = runInCompilerThread ( root , this . code ) ;
Distance : 6

182
Tree	String code = sourceMap () . root ( root ) ;
Code	String code = sourceMap () . root ( root ) ;
Distance : 9

183
Tree	String code = getLength ( root , this . code ) ;
Code	String code = getLength ( root , this . code ) ;
Distance : 6

184
Tree	String code = code ( root , code , sourceMap ) ;
Code	String code = code ( root , code , sourceMap ) ;
Distance : 5

185
Tree	String code = sourceMap () . code ( root , code ) ;
Code	String code = sourceMap () . code ( root , code ) ;
Distance : 9

186
Tree	String code = code . sourceMap ( this , root ) ;
Code	String code = code . sourceMap ( this , root ) ;
Distance : 8

187
Tree	String code = sourceMap . replaceAll ( this , root ) ;
Code	String code = sourceMap . replaceAll ( this , root ) ;
Distance : 8

188
Tree	String code = sourceMap ( sourceMap () , STRING_CONSTANT , root , sourceMap ) ;
Code	String code = sourceMap ( sourceMap () , STRING_CONSTANT , root , sourceMap ) ;
Distance : 7

189
Tree	String code = delimiter ( root , this . code ) ;
Code	String code = delimiter ( root , this . code ) ;
Distance : 6

190
Tree	String code = sourceMap . delimiter ( this , root , sourceMap ) ;
Code	String code = sourceMap . delimiter ( this , root , sourceMap ) ;
Distance : 8

191
Tree	String code = sourceMap () . code ( root , sourceMap ) ;
Code	String code = sourceMap () . code ( root , sourceMap ) ;
Distance : 8

192
Tree	String code = sourceMap ( Token.SCRIPT () , STRING_CONSTANT , root , sourceMap ) ;
Code	String code = sourceMap ( Token.SCRIPT () , STRING_CONSTANT , root , sourceMap ) ;
Distance : 7

193
Tree	String code = sourceMap ( sourceMap () , STRING_CONSTANT , root , code ) ;
Code	String code = sourceMap ( sourceMap () , STRING_CONSTANT , root , code ) ;
Distance : 7

194
Tree	String code = sourceMap () . delimiter ( root , code ) ;
Code	String code = sourceMap () . delimiter ( root , code ) ;
Distance : 9

195
Tree	String code = sourceMap ( code () , STRING_CONSTANT , root , sourceMap ) ;
Code	String code = sourceMap ( code () , STRING_CONSTANT , root , sourceMap ) ;
Distance : 7

196
Tree	String code = sourceMap . endsWith ( root , code ) ;
Code	String code = sourceMap . endsWith ( root , code ) ;
Distance : 8

197
Tree	String code = sourceMap () . String ( root , sourceMap ) ;
Code	String code = sourceMap () . String ( root , sourceMap ) ;
Distance : 8

198
Tree	String code = sourceMap () . charAt ( root ) ;
Code	String code = sourceMap () . charAt ( root ) ;
Distance : 9

199
Tree	String code = sourceMap () . replaceAll ( root , sourceMap ) ;
Code	String code = sourceMap () . replaceAll ( root , sourceMap ) ;
Distance : 8

========================================================================


========================================================================
Example Number: 24
Parent Code is: 
this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
-------------------------------------------------------------------------------
Child code is: 
this . maybeAliased = NodeUtil . isExpressionResultUsed ( assignNode ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=maybeAliased})) (204{val==}) (38 (207{val=!}) (32 (32 (800{val=assignNode}) (235{val=.}) (802{val=getParent}) (216{val=()})) (235{val=.}) (802{val=isExprResult}) (216{val=()})))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=maybeAliased})) (204{val==}) (32 (800{val=NodeUtil}) (235{val=.}) (802{val=isExpressionResultUsed}) (214{val=(}) (800{val=assignNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/45/parent/src_com_google_javascript_jscomp_RemoveUnusedVars.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Assign = new Preconditions ( assignNode ) . isExprResult () ;
Code	Assign = new Preconditions ( assignNode ) . isExprResult () ;
Distance : 9

1
Tree	getLastChild = assignNode . getParent ( assignNode . getParent () . isExprResult () . isExprResult ) ;
Code	getLastChild = assignNode . getParent ( assignNode . getParent () . isExprResult () . isExprResult ) ;
Distance : 13

2
Tree	getParent = ( assignNode ) assignNode . getParent () ;
Code	getParent = ( assignNode ) assignNode . getParent () ;
Distance : 10

3
Tree	Preconditions = assignNode . getParent ( assignNode . getParent () . isExprResult () . isExprResult ) ;
Code	Preconditions = assignNode . getParent ( assignNode . getParent () . isExprResult () . isExprResult ) ;
Distance : 13

4
Tree	checkState = ( assignNode ) getParent ( assignNode ) ;
Code	checkState = ( assignNode ) getParent ( assignNode ) ;
Distance : 7

5
Tree	isExprResult = assignNode . getParent ( assignNode . getParent () . isExprResult () . isExprResult ) ;
Code	isExprResult = assignNode . getParent ( assignNode . getParent () . isExprResult () . isExprResult ) ;
Distance : 13

6
Tree	Assign = new isExprResult ( assignNode ) . isExprResult () ;
Code	Assign = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

7
Tree	getParent = assignNode . getParent ( assignNode . getParent () . isExprResult () . isExprResult ) ;
Code	getParent = assignNode . getParent ( assignNode . getParent () . isExprResult () . isExprResult ) ;
Distance : 13

8
Tree	Assign = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	Assign = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

9
Tree	checkState = checkState . getParent () ;
Code	checkState = checkState . getParent () ;
Distance : 8

10
Tree	this . isAssignmentOp = null ;
Code	this . isAssignmentOp = null ;
Distance : 7

11
Tree	mayHaveSideEffects = assignNode . getParent ( assignNode . getParent () . isExprResult () . isExprResult ) ;
Code	mayHaveSideEffects = assignNode . getParent ( assignNode . getParent () . isExprResult () . isExprResult ) ;
Distance : 13

12
Tree	this . Assign = ( assignNode ) NodeUtil . getParent () ;
Code	this . Assign = ( assignNode ) NodeUtil . getParent () ;
Distance : 8

13
Tree	Assign = NodeUtil . getParent ( assignNode . getParent () . isExprResult () . isExprResult ) ;
Code	Assign = NodeUtil . getParent ( assignNode . getParent () . isExprResult () . isExprResult ) ;
Distance : 12

14
Tree	Preconditions = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	Preconditions = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

15
Tree	this . isExprResult = ( assignNode ) assignNode . getParent () ;
Code	this . isExprResult = ( assignNode ) assignNode . getParent () ;
Distance : 8

16
Tree	Preconditions = checkState . getParent () ;
Code	Preconditions = checkState . getParent () ;
Distance : 8

17
Tree	checkState = assignNode . getParent ( assignNode ) ;
Code	checkState = assignNode . getParent ( assignNode ) ;
Distance : 5

18
Tree	checkState = ( assignNode ) assignNode . getParent () ;
Code	checkState = ( assignNode ) assignNode . getParent () ;
Distance : 10

19
Tree	checkState = getParent . getParent () ;
Code	checkState = getParent . getParent () ;
Distance : 8

20
Tree	checkState = NodeUtil . getParent ( assignNode ) ;
Code	checkState = NodeUtil . getParent ( assignNode ) ;
Distance : 4

21
Tree	checkState = ( Preconditions ) getParent ( assignNode ) ;
Code	checkState = ( Preconditions ) getParent ( assignNode ) ;
Distance : 7

22
Tree	checkState = assignNode . getParent ( assignNode . getParent () . isExprResult () . isExprResult ) ;
Code	checkState = assignNode . getParent ( assignNode . getParent () . isExprResult () . isExprResult ) ;
Distance : 13

23
Tree	checkState = ( NodeUtil ) getParent ( assignNode ) ;
Code	checkState = ( NodeUtil ) getParent ( assignNode ) ;
Distance : 6

24
Tree	checkState = ( NodeUtil ) assignNode . getParent () ;
Code	checkState = ( NodeUtil ) assignNode . getParent () ;
Distance : 9

25
Tree	Assign = assignNode . getParent ( assignNode ) ;
Code	Assign = assignNode . getParent ( assignNode ) ;
Distance : 5

26
Tree	Assign = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Code	Assign = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Distance : 11

27
Tree	isExprResult = new Preconditions ( assignNode ) . isExprResult () ;
Code	isExprResult = new Preconditions ( assignNode ) . isExprResult () ;
Distance : 9

28
Tree	mayHaveSideEffects = new Preconditions ( assignNode ) . isExprResult () ;
Code	mayHaveSideEffects = new Preconditions ( assignNode ) . isExprResult () ;
Distance : 9

29
Tree	checkState = getFirstChild . getParent () ;
Code	checkState = getFirstChild . getParent () ;
Distance : 8

30
Tree	Assign = new checkState ( assignNode ) . isExprResult () ;
Code	Assign = new checkState ( assignNode ) . isExprResult () ;
Distance : 9

31
Tree	mayHaveSideEffects = getParent ( assignNode , getParent ) ;
Code	mayHaveSideEffects = getParent ( assignNode , getParent ) ;
Distance : 8

32
Tree	getLastChild = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	getLastChild = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

33
Tree	checkState = getParent ( assignNode , getParent ) ;
Code	checkState = getParent ( assignNode , getParent ) ;
Distance : 8

34
Tree	getLastChild = new Preconditions ( assignNode ) . isExprResult () ;
Code	getLastChild = new Preconditions ( assignNode ) . isExprResult () ;
Distance : 9

35
Tree	this . Assign = ( isExprResult ) assignNode . getParent () ;
Code	this . Assign = ( isExprResult ) assignNode . getParent () ;
Distance : 8

36
Tree	checkState = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	checkState = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

37
Tree	checkState = assignNode . getParent ( this . Assign ) ;
Code	checkState = assignNode . getParent ( this . Assign ) ;
Distance : 8

38
Tree	checkState = new NodeUtil ( assignNode ) . isExprResult () ;
Code	checkState = new NodeUtil ( assignNode ) . isExprResult () ;
Distance : 9

39
Tree	Preconditions = new isExprResult ( assignNode ) . isExprResult () ;
Code	Preconditions = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

40
Tree	checkState = assignNode . getParent ( this . assignNode ) ;
Code	checkState = assignNode . getParent ( this . assignNode ) ;
Distance : 7

41
Tree	this . maybeAliased = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	this . maybeAliased = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 9

42
Tree	checkState = assignNode . getParent ( this . mayHaveSideEffects ) ;
Code	checkState = assignNode . getParent ( this . mayHaveSideEffects ) ;
Distance : 8

43
Tree	this . isAssignmentOp = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	this . isAssignmentOp = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 10

44
Tree	checkState = new NodeUtil ( assignNode ) . isExprResult () ;
Code	checkState = new NodeUtil ( assignNode ) . isExprResult () ;
Distance : 9

45
Tree	isExprResult = ( assignNode ) getParent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	isExprResult = ( assignNode ) getParent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

46
Tree	getParent = new Preconditions ( assignNode ) . isExprResult () ;
Code	getParent = new Preconditions ( assignNode ) . isExprResult () ;
Distance : 9

47
Tree	this . mayHaveSideEffects = null ;
Code	this . mayHaveSideEffects = null ;
Distance : 7

48
Tree	checkState = new isExprResult ( assignNode ) . isExprResult () ;
Code	checkState = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

49
Tree	mayHaveSideEffects = ( assignNode ) getParent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	mayHaveSideEffects = ( assignNode ) getParent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

50
Tree	isExprResult = ( assignNode ) getParent ( assignNode ) ;
Code	isExprResult = ( assignNode ) getParent ( assignNode ) ;
Distance : 7

51
Tree	getParent = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	getParent = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

52
Tree	Assign = ( assignNode ) getParent ( assignNode ) ;
Code	Assign = ( assignNode ) getParent ( assignNode ) ;
Distance : 7

53
Tree	checkState = Preconditions . getParent () ;
Code	checkState = Preconditions . getParent () ;
Distance : 8

54
Tree	isExprResult = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	isExprResult = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

55
Tree	Assign = checkState . getParent () ;
Code	Assign = checkState . getParent () ;
Distance : 8

56
Tree	Preconditions = new Preconditions ( assignNode ) . isExprResult () ;
Code	Preconditions = new Preconditions ( assignNode ) . isExprResult () ;
Distance : 9

57
Tree	checkState = ( NodeUtil ) getParent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	checkState = ( NodeUtil ) getParent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

58
Tree	Preconditions = new getParent ( assignNode ) . isExprResult () ;
Code	Preconditions = new getParent ( assignNode ) . isExprResult () ;
Distance : 9

59
Tree	checkState = NodeUtil . getParent ( this . isAssignmentOp ) ;
Code	checkState = NodeUtil . getParent ( this . isAssignmentOp ) ;
Distance : 7

60
Tree	this . Assign = ( assignNode ) assignNode . getParent () ;
Code	this . Assign = ( assignNode ) assignNode . getParent () ;
Distance : 8

61
Tree	getLastChild = new isExprResult ( assignNode ) . isExprResult () ;
Code	getLastChild = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

62
Tree	this . Assign = ( NodeUtil ) assignNode . getParent () ;
Code	this . Assign = ( NodeUtil ) assignNode . getParent () ;
Distance : 7

63
Tree	getLastChild = getParent ( assignNode , getParent ) ;
Code	getLastChild = getParent ( assignNode , getParent ) ;
Distance : 8

64
Tree	isAssignmentOp /= assignNode * NodeUtil . getParent () . isExprResult () ;
Code	isAssignmentOp /= assignNode * NodeUtil . getParent () . isExprResult () ;
Distance : 9

65
Tree	Assign = new NodeUtil ( assignNode ) . isExprResult () ;
Code	Assign = new NodeUtil ( assignNode ) . isExprResult () ;
Distance : 9

66
Tree	mayHaveSideEffects = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	mayHaveSideEffects = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

67
Tree	Preconditions = new checkState ( assignNode ) . isExprResult () ;
Code	Preconditions = new checkState ( assignNode ) . isExprResult () ;
Distance : 9

68
Tree	Assign /= assignNode * assignNode . getParent () . isExprResult () ;
Code	Assign /= assignNode * assignNode . getParent () . isExprResult () ;
Distance : 10

69
Tree	checkState = ( assignNode ) getParent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	checkState = ( assignNode ) getParent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

70
Tree	checkState = new checkState ( assignNode ) . isExprResult () ;
Code	checkState = new checkState ( assignNode ) . isExprResult () ;
Distance : 9

71
Tree	mayHaveSideEffects = new isExprResult ( assignNode ) . isExprResult () ;
Code	mayHaveSideEffects = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

72
Tree	mayHaveSideEffects = new getParent ( assignNode ) . isExprResult () ;
Code	mayHaveSideEffects = new getParent ( assignNode ) . isExprResult () ;
Distance : 9

73
Tree	this . Preconditions = null ;
Code	this . Preconditions = null ;
Distance : 7

74
Tree	getParent = getParent ( assignNode , getParent ) ;
Code	getParent = getParent ( assignNode , getParent ) ;
Distance : 8

75
Tree	Preconditions = assignNode . getParent ( this . Assign ) ;
Code	Preconditions = assignNode . getParent ( this . Assign ) ;
Distance : 8

76
Tree	isExprResult = NodeUtil . getParent ( assignNode . getParent () . isExprResult () . isExprResult ) ;
Code	isExprResult = NodeUtil . getParent ( assignNode . getParent () . isExprResult () . isExprResult ) ;
Distance : 12

77
Tree	checkState = assignNode . getParent ( this . maybeAliased ) ;
Code	checkState = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

78
Tree	mayHaveSideEffects /= NodeUtil * NodeUtil . getParent () . isExprResult () ;
Code	mayHaveSideEffects /= NodeUtil * NodeUtil . getParent () . isExprResult () ;
Distance : 9

79
Tree	this . assignNode = ( assignNode ) assignNode . getParent () ;
Code	this . assignNode = ( assignNode ) assignNode . getParent () ;
Distance : 8

80
Tree	Assign = ( NodeUtil ) getParent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	Assign = ( NodeUtil ) getParent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

81
Tree	this . maybeAliased = ( assignNode ) assignNode . getParent () ;
Code	this . maybeAliased = ( assignNode ) assignNode . getParent () ;
Distance : 7

82
Tree	checkState = NodeUtil . getParent ( this . Assign ) ;
Code	checkState = NodeUtil . getParent ( this . Assign ) ;
Distance : 7

83
Tree	this . mayHaveSideEffects = ( NodeUtil ) assignNode . getParent () ;
Code	this . mayHaveSideEffects = ( NodeUtil ) assignNode . getParent () ;
Distance : 7

84
Tree	mayHaveSideEffects = ( assignNode ) getParent ( assignNode ) ;
Code	mayHaveSideEffects = ( assignNode ) getParent ( assignNode ) ;
Distance : 7

85
Tree	this . assignNode = null ;
Code	this . assignNode = null ;
Distance : 7

86
Tree	Assign /= assignNode * isExprResult . getParent () . isExprResult () ;
Code	Assign /= assignNode * isExprResult . getParent () . isExprResult () ;
Distance : 10

87
Tree	this . Assign = null ;
Code	this . Assign = null ;
Distance : 7

88
Tree	Assign /= assignNode * Preconditions . getParent () . isExprResult () ;
Code	Assign /= assignNode * Preconditions . getParent () . isExprResult () ;
Distance : 10

89
Tree	Preconditions = assignNode . getParent ( assignNode ) ;
Code	Preconditions = assignNode . getParent ( assignNode ) ;
Distance : 5

90
Tree	Assign = ( assignNode ) assignNode . getParent () ;
Code	Assign = ( assignNode ) assignNode . getParent () ;
Distance : 10

91
Tree	isExprResult = assignNode . getParent ( assignNode ) ;
Code	isExprResult = assignNode . getParent ( assignNode ) ;
Distance : 5

92
Tree	checkState = new getParent ( assignNode ) . isExprResult () ;
Code	checkState = new getParent ( assignNode ) . isExprResult () ;
Distance : 9

93
Tree	this . mayHaveSideEffects = ( isExprResult ) assignNode . getParent () ;
Code	this . mayHaveSideEffects = ( isExprResult ) assignNode . getParent () ;
Distance : 8

94
Tree	getParent = new isExprResult ( assignNode ) . isExprResult () ;
Code	getParent = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

95
Tree	Assign /= assignNode * NodeUtil . getParent () . isExprResult () ;
Code	Assign /= assignNode * NodeUtil . getParent () . isExprResult () ;
Distance : 9

96
Tree	this . assignNode = ( isExprResult ) assignNode . getParent () ;
Code	this . assignNode = ( isExprResult ) assignNode . getParent () ;
Distance : 8

97
Tree	checkState = NodeUtil . getParent ( assignNode . getParent () . isExprResult () . isExprResult ) ;
Code	checkState = NodeUtil . getParent ( assignNode . getParent () . isExprResult () . isExprResult ) ;
Distance : 12

98
Tree	mayHaveSideEffects /= assignNode * assignNode . getParent () . isExprResult () ;
Code	mayHaveSideEffects /= assignNode * assignNode . getParent () . isExprResult () ;
Distance : 10

99
Tree	checkState = ( NodeUtil ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	checkState = ( NodeUtil ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

100
Tree	Preconditions = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	Preconditions = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

101
Tree	Preconditions = ( assignNode ) getParent . getParent () ;
Code	Preconditions = ( assignNode ) getParent . getParent () ;
Distance : 10

102
Tree	this . mayHaveSideEffects = ( assignNode ) assignNode . getParent () ;
Code	this . mayHaveSideEffects = ( assignNode ) assignNode . getParent () ;
Distance : 8

103
Tree	checkState = new Preconditions ( assignNode ) . isExprResult () ;
Code	checkState = new Preconditions ( assignNode ) . isExprResult () ;
Distance : 9

104
Tree	mayHaveSideEffects = assignNode . getParent ( assignNode ) ;
Code	mayHaveSideEffects = assignNode . getParent ( assignNode ) ;
Distance : 5

105
Tree	checkState = ( NodeUtil ) assignNode . getParent ( nameNode . getParent () , assignNode ) ;
Code	checkState = ( NodeUtil ) assignNode . getParent ( nameNode . getParent () , assignNode ) ;
Distance : 12

106
Tree	Preconditions = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	Preconditions = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

107
Tree	getLastChild = ( assignNode ) getParent . getParent () ;
Code	getLastChild = ( assignNode ) getParent . getParent () ;
Distance : 10

108
Tree	getParent = ( assignNode ) getParent . getParent () ;
Code	getParent = ( assignNode ) getParent . getParent () ;
Distance : 10

109
Tree	checkState = ( Preconditions ) assignNode . getParent () . isExprResult () ;
Code	checkState = ( Preconditions ) assignNode . getParent () . isExprResult () ;
Distance : 11

110
Tree	Preconditions = ( assignNode ) getParent ( assignNode ) ;
Code	Preconditions = ( assignNode ) getParent ( assignNode ) ;
Distance : 7

111
Tree	Assign = NodeUtil . getParent ( assignNode ) ;
Code	Assign = NodeUtil . getParent ( assignNode ) ;
Distance : 4

112
Tree	this . isExprResult = ( isExprResult ) assignNode . getParent () ;
Code	this . isExprResult = ( isExprResult ) assignNode . getParent () ;
Distance : 8

113
Tree	Assign /= NodeUtil * assignNode . getParent () . isExprResult () ;
Code	Assign /= NodeUtil * assignNode . getParent () . isExprResult () ;
Distance : 10

114
Tree	this . mayHaveSideEffects = ( checkState ) assignNode . getParent () ;
Code	this . mayHaveSideEffects = ( checkState ) assignNode . getParent () ;
Distance : 8

115
Tree	Assign = assignNode . getParent ( assignNode . getParent () . isExprResult () . isExprResult ) ;
Code	Assign = assignNode . getParent ( assignNode . getParent () . isExprResult () . isExprResult ) ;
Distance : 13

116
Tree	Assign = ( assignNode ) getParent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	Assign = ( assignNode ) getParent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

117
Tree	checkState = ( Preconditions ) getParent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	checkState = ( Preconditions ) getParent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

118
Tree	this . Assign = return; ;
Code	this . Assign = return; ;
Distance : 7

119
Tree	this . isExprResult = null ;
Code	this . isExprResult = null ;
Distance : 7

120
Tree	Assign = Preconditions . getParent () ;
Code	Assign = Preconditions . getParent () ;
Distance : 8

121
Tree	this . getFirstChild = null ;
Code	this . getFirstChild = null ;
Distance : 7

122
Tree	checkState = ( NodeUtil ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	checkState = ( NodeUtil ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

123
Tree	checkState = ( NodeUtil ) assignNode . getParent ( nameNode . getParent () . isExprResult () , assignNode ) ;
Code	checkState = ( NodeUtil ) assignNode . getParent ( nameNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

124
Tree	Preconditions = ( assignNode ) assignNode . getParent () ;
Code	Preconditions = ( assignNode ) assignNode . getParent () ;
Distance : 10

125
Tree	checkState = assignNode . getParent ( this . isAssignmentOp ) ;
Code	checkState = assignNode . getParent ( this . isAssignmentOp ) ;
Distance : 8

126
Tree	isExprResult = checkState . getParent () ;
Code	isExprResult = checkState . getParent () ;
Distance : 8

127
Tree	checkState = ( assignNode ) getParent . getParent () ;
Code	checkState = ( assignNode ) getParent . getParent () ;
Distance : 10

128
Tree	checkState = ( Preconditions ) assignNode . getParent () ;
Code	checkState = ( Preconditions ) assignNode . getParent () ;
Distance : 10

129
Tree	this . mayHaveSideEffects = ( assignNode ) NodeUtil . getParent () ;
Code	this . mayHaveSideEffects = ( assignNode ) NodeUtil . getParent () ;
Distance : 8

130
Tree	isExprResult = ( assignNode ) assignNode . getParent () ;
Code	isExprResult = ( assignNode ) assignNode . getParent () ;
Distance : 10

131
Tree	mayHaveSideEffects = ( assignNode ) assignNode . getParent () ;
Code	mayHaveSideEffects = ( assignNode ) assignNode . getParent () ;
Distance : 10

132
Tree	mayHaveSideEffects = checkState . getParent () ;
Code	mayHaveSideEffects = checkState . getParent () ;
Distance : 8

133
Tree	getLastChild = ( assignNode ) getParent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	getLastChild = ( assignNode ) getParent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

134
Tree	this . Assign = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	this . Assign = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 10

135
Tree	this . mayHaveSideEffects = return; ;
Code	this . mayHaveSideEffects = return; ;
Distance : 7

136
Tree	getParent = ( assignNode ) getParent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	getParent = ( assignNode ) getParent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

137
Tree	checkState = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	checkState = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

138
Tree	checkState = ( assignNode ) assignNode . getParent ( nameNode . getParent () , assignNode ) ;
Code	checkState = ( assignNode ) assignNode . getParent ( nameNode . getParent () , assignNode ) ;
Distance : 12

139
Tree	getLastChild = assignNode . getParent ( assignNode ) ;
Code	getLastChild = assignNode . getParent ( assignNode ) ;
Distance : 5

140
Tree	isExprResult = new getParent ( assignNode ) . isExprResult () ;
Code	isExprResult = new getParent ( assignNode ) . isExprResult () ;
Distance : 9

141
Tree	this . mayHaveSideEffects = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	this . mayHaveSideEffects = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 10

142
Tree	isExprResult = new isExprResult ( assignNode ) . isExprResult () ;
Code	isExprResult = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

143
Tree	mayHaveSideEffects /= assignNode * NodeUtil . getParent () . isExprResult () ;
Code	mayHaveSideEffects /= assignNode * NodeUtil . getParent () . isExprResult () ;
Distance : 9

144
Tree	getParent = ( assignNode ) getParent ( assignNode ) ;
Code	getParent = ( assignNode ) getParent ( assignNode ) ;
Distance : 7

145
Tree	checkState = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Code	checkState = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Distance : 11

146
Tree	checkState = ( NodeUtil ) getParent . getParent () ;
Code	checkState = ( NodeUtil ) getParent . getParent () ;
Distance : 9

147
Tree	checkState = ( assignNode ) assignNode . getParent ( nameNode . getParent () . isExprResult () , assignNode ) ;
Code	checkState = ( assignNode ) assignNode . getParent ( nameNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

148
Tree	checkState = ( assignNode ) assignNode . getParent ( assignNode . getParent () , NodeUtil ) ;
Code	checkState = ( assignNode ) assignNode . getParent ( assignNode . getParent () , NodeUtil ) ;
Distance : 12

149
Tree	this . mayHaveSideEffects = ( assignNode ) NodeUtil . getParent () . isExprResult () ;
Code	this . mayHaveSideEffects = ( assignNode ) NodeUtil . getParent () . isExprResult () ;
Distance : 9

150
Tree	isExprResult = NodeUtil . getParent ( assignNode ) ;
Code	isExprResult = NodeUtil . getParent ( assignNode ) ;
Distance : 4

151
Tree	this . maybeAliased = null ;
Code	this . maybeAliased = null ;
Distance : 6

152
Tree	getLastChild = new getParent ( assignNode ) . isExprResult () ;
Code	getLastChild = new getParent ( assignNode ) . isExprResult () ;
Distance : 9

153
Tree	checkState = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	checkState = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

154
Tree	Assign = ( NodeUtil ) assignNode . getParent () ;
Code	Assign = ( NodeUtil ) assignNode . getParent () ;
Distance : 9

155
Tree	Assign = getParent ( assignNode , getParent ) ;
Code	Assign = getParent ( assignNode , getParent ) ;
Distance : 8

156
Tree	getParent = new getParent ( assignNode ) . isExprResult () ;
Code	getParent = new getParent ( assignNode ) . isExprResult () ;
Distance : 9

157
Tree	Assign = assignNode . getParent ( this . Assign ) ;
Code	Assign = assignNode . getParent ( this . Assign ) ;
Distance : 8

158
Tree	checkState = new Preconditions ( assignNode ) . isExprResult () ;
Code	checkState = new Preconditions ( assignNode ) . isExprResult () ;
Distance : 9

159
Tree	Assign = new getParent ( assignNode ) . isExprResult () ;
Code	Assign = new getParent ( assignNode ) . isExprResult () ;
Distance : 9

160
Tree	Assign = ( NodeUtil ) getParent ( assignNode ) ;
Code	Assign = ( NodeUtil ) getParent ( assignNode ) ;
Distance : 6

161
Tree	checkState = NodeUtil . getParent ( this . mayHaveSideEffects ) ;
Code	checkState = NodeUtil . getParent ( this . mayHaveSideEffects ) ;
Distance : 7

162
Tree	getLastChild = checkState . getParent () ;
Code	getLastChild = checkState . getParent () ;
Distance : 8

163
Tree	checkState = ( NodeUtil ) assignNode . getParent ( assignNode . getParent () , NodeUtil ) ;
Code	checkState = ( NodeUtil ) assignNode . getParent ( assignNode . getParent () , NodeUtil ) ;
Distance : 12

164
Tree	checkState = ( assignNode ) assignNode . getParent ( NodeUtil . getParent () , assignNode ) ;
Code	checkState = ( assignNode ) assignNode . getParent ( NodeUtil . getParent () , assignNode ) ;
Distance : 11

165
Tree	this . isAssignmentOp = ( assignNode ) assignNode . getParent () ;
Code	this . isAssignmentOp = ( assignNode ) assignNode . getParent () ;
Distance : 8

166
Tree	this . isAssignmentOp = ( isExprResult ) assignNode . getParent () ;
Code	this . isAssignmentOp = ( isExprResult ) assignNode . getParent () ;
Distance : 8

167
Tree	getParent = assignNode . getParent ( assignNode ) ;
Code	getParent = assignNode . getParent ( assignNode ) ;
Distance : 5

168
Tree	isExprResult = getParent ( assignNode , getParent ) ;
Code	isExprResult = getParent ( assignNode , getParent ) ;
Distance : 8

169
Tree	checkState = getParent ( assignNode , nameNode ) ;
Code	checkState = getParent ( assignNode , nameNode ) ;
Distance : 8

170
Tree	checkState = ( assignNode ) assignNode . getParent ( isExprResult . getParent () , assignNode ) ;
Code	checkState = ( assignNode ) assignNode . getParent ( isExprResult . getParent () , assignNode ) ;
Distance : 12

171
Tree	checkState = new checkState ( assignNode ) . isExprResult () ;
Code	checkState = new checkState ( assignNode ) . isExprResult () ;
Distance : 9

172
Tree	this . Assign = ( isExprResult ) NodeUtil . getParent () ;
Code	this . Assign = ( isExprResult ) NodeUtil . getParent () ;
Distance : 8

173
Tree	checkState = ( assignNode ) assignNode . getParent ( isExprResult . getParent () . isExprResult () , assignNode ) ;
Code	checkState = ( assignNode ) assignNode . getParent ( isExprResult . getParent () . isExprResult () , assignNode ) ;
Distance : 15

174
Tree	this . Assign = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Code	this . Assign = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Distance : 9

175
Tree	checkState = ( assignNode ) assignNode . getParent ( NodeUtil . getParent () . isExprResult () , assignNode ) ;
Code	checkState = ( assignNode ) assignNode . getParent ( NodeUtil . getParent () . isExprResult () , assignNode ) ;
Distance : 14

176
Tree	checkState = ( Preconditions ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	checkState = ( Preconditions ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

177
Tree	isExprResult = ( assignNode ) getParent . getParent () ;
Code	isExprResult = ( assignNode ) getParent . getParent () ;
Distance : 10

178
Tree	mayHaveSideEffects = ( assignNode ) getParent . getParent () ;
Code	mayHaveSideEffects = ( assignNode ) getParent . getParent () ;
Distance : 10

179
Tree	Preconditions = getParent ( assignNode , getParent ) ;
Code	Preconditions = getParent ( assignNode , getParent ) ;
Distance : 8

180
Tree	Assign = ( assignNode ) getParent . getParent () ;
Code	Assign = ( assignNode ) getParent . getParent () ;
Distance : 10

181
Tree	Assign = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	Assign = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

182
Tree	isExprResult = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	isExprResult = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

183
Tree	Assign = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	Assign = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

184
Tree	this . assignNode = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	this . assignNode = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 10

185
Tree	getLastChild = ( assignNode ) getParent ( assignNode ) ;
Code	getLastChild = ( assignNode ) getParent ( assignNode ) ;
Distance : 7

186
Tree	Assign /= NodeUtil * NodeUtil . getParent () . isExprResult () ;
Code	Assign /= NodeUtil * NodeUtil . getParent () . isExprResult () ;
Distance : 9

187
Tree	this . mayHaveSideEffects = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Code	this . mayHaveSideEffects = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Distance : 9

188
Tree	checkState = ( Preconditions ) getParent . getParent () ;
Code	checkState = ( Preconditions ) getParent . getParent () ;
Distance : 10

189
Tree	isAssignmentOp = getParent ( assignNode , getParent ) ;
Code	isAssignmentOp = getParent ( assignNode , getParent ) ;
Distance : 8

190
Tree	checkState = new checkState ( assignNode ) . isExprResult () ;
Code	checkState = new checkState ( assignNode ) . isExprResult () ;
Distance : 9

191
Tree	this . Assign = ( isAssignmentOp ) assignNode . getParent () ;
Code	this . Assign = ( isAssignmentOp ) assignNode . getParent () ;
Distance : 8

192
Tree	getLastChild = ( assignNode ) assignNode . getParent () ;
Code	getLastChild = ( assignNode ) assignNode . getParent () ;
Distance : 10

193
Tree	this . maybeAliased = ( isExprResult ) assignNode . getParent () ;
Code	this . maybeAliased = ( isExprResult ) assignNode . getParent () ;
Distance : 7

194
Tree	maybeAliased = getParent ( assignNode , getParent ) ;
Code	maybeAliased = getParent ( assignNode , getParent ) ;
Distance : 7

195
Tree	this . Assign = ( checkState ) assignNode . getParent () ;
Code	this . Assign = ( checkState ) assignNode . getParent () ;
Distance : 8

196
Tree	Preconditions = ( assignNode ) getParent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	Preconditions = ( assignNode ) getParent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

197
Tree	this . Assign = ( assignNode ) NodeUtil . getParent () . isExprResult () ;
Code	this . Assign = ( assignNode ) NodeUtil . getParent () . isExprResult () ;
Distance : 9

198
Tree	Assign = ( NodeUtil ) getParent . getParent () ;
Code	Assign = ( NodeUtil ) getParent . getParent () ;
Distance : 9

199
Tree	this . isExprResult = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	this . isExprResult = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 10

========================================================================


========================================================================
Example Number: 25
Parent Code is: 
if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( ( x < NUMBER_CONSTANT  negativeZero ) && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=x}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=prev}) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=add}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (36 (214{val=(}) (27 (27 (800{val=x}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (250{val=||}) (800{val=negativeZero})) (215{val=)})) (249{val=&&}) (27 (800{val=prev}) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=add}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/38/parent/src_com_google_javascript_jscomp_CodeConsumer.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( x < NUMBER_CONSTANT && abs < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && abs < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

1
Tree	if ( x < NUMBER_CONSTANT && toString != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && toString != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

2
Tree	if ( x < NUMBER_CONSTANT && toString == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && toString == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

3
Tree	if ( x < NUMBER_CONSTANT && toString == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && toString == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

4
Tree	if ( x < NUMBER_CONSTANT && pow < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && pow < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

5
Tree	if ( x < NUMBER_CONSTANT && addNumber > addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber > addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 6

6
Tree	if ( x < NUMBER_CONSTANT && exp != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && exp != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

7
Tree	if ( x < NUMBER_CONSTANT && addNumber >= this . addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber >= this . addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 7

8
Tree	if ( x < NUMBER_CONSTANT && x [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

9
Tree	if ( x < NUMBER_CONSTANT && exp == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && exp == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

10
Tree	if ( x < NUMBER_CONSTANT && Integer [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Integer [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

11
Tree	if ( x < NUMBER_CONSTANT && String != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && String != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

12
Tree	if ( x < NUMBER_CONSTANT && String == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && String == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

13
Tree	if ( x < NUMBER_CONSTANT && exp == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && exp == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

14
Tree	if ( x < NUMBER_CONSTANT && Long [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Long [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

15
Tree	if ( x < NUMBER_CONSTANT && exp <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && exp <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

16
Tree	if ( x < NUMBER_CONSTANT && exp < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && exp < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

17
Tree	if ( x < NUMBER_CONSTANT && exp != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && exp != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

18
Tree	if ( x < NUMBER_CONSTANT && addNumber >= this . addNumber . toString ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber >= this . addNumber . toString ) { add ( STRING_CONSTANT ) ; }
Distance : 9

19
Tree	if ( x < NUMBER_CONSTANT && prev >= addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 5

20
Tree	if ( x < NUMBER_CONSTANT && addNumber [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

21
Tree	if ( x < NUMBER_CONSTANT && add == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && add == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

22
Tree	if ( x < NUMBER_CONSTANT && addNumber <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

23
Tree	if ( x < NUMBER_CONSTANT && prev == addNumber - addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == addNumber - addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 6

24
Tree	if ( x < NUMBER_CONSTANT && addNumber >= this . addNumber . addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber >= this . addNumber . addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 9

25
Tree	if ( x < NUMBER_CONSTANT && addNumber - addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber - addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 6

26
Tree	if ( x < NUMBER_CONSTANT && addNumber == prev - addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber == prev - addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 6

27
Tree	if ( x < NUMBER_CONSTANT && addNumber - prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber - prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

28
Tree	if ( x < NUMBER_CONSTANT && prev >= this . addNumber . toString ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . addNumber . toString ) { add ( STRING_CONSTANT ) ; }
Distance : 9

29
Tree	if ( x < NUMBER_CONSTANT && addNumber == addNumber - prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber == addNumber - prev ) { add ( STRING_CONSTANT ) ; }
Distance : 7

30
Tree	if ( x < NUMBER_CONSTANT && addNumber >= this . addNumber . abs ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber >= this . addNumber . abs ) { add ( STRING_CONSTANT ) ; }
Distance : 9

31
Tree	if ( x < NUMBER_CONSTANT && addNumber >= addNumber ) { add ( STRING_CONSTANT ) ; continue; }
Code	if ( x < NUMBER_CONSTANT && addNumber >= addNumber ) { add ( STRING_CONSTANT ) ; continue; }
Distance : 7

32
Tree	if ( x < NUMBER_CONSTANT && addNumber > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

33
Tree	if ( x < NUMBER_CONSTANT && addNumber >= this . addNumber . valueOf ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber >= this . addNumber . valueOf ) { add ( STRING_CONSTANT ) ; }
Distance : 9

34
Tree	if ( x < NUMBER_CONSTANT && addNumber >= this . addNumber . value ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber >= this . addNumber . value ) { add ( STRING_CONSTANT ) ; }
Distance : 9

35
Tree	if ( x < NUMBER_CONSTANT && exp >= addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && exp >= addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 6

36
Tree	if ( x < NUMBER_CONSTANT && pow <= addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && pow <= addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 6

37
Tree	if ( x < NUMBER_CONSTANT && addNumber <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

38
Tree	if ( x < NUMBER_CONSTANT && prev >= addNumber ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && prev >= addNumber ) { add ( STRING_CONSTANT ) ; return; }
Distance : 6

39
Tree	if ( x < NUMBER_CONSTANT && prev >= addNumber ) { add ( STRING_CONSTANT ) ; continue; }
Code	if ( x < NUMBER_CONSTANT && prev >= addNumber ) { add ( STRING_CONSTANT ) ; continue; }
Distance : 6

40
Tree	if ( x < NUMBER_CONSTANT && abs && addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && abs && addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 6

41
Tree	if ( x < NUMBER_CONSTANT && exp > addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && exp > addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 6

42
Tree	if ( x < NUMBER_CONSTANT && addNumber != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

43
Tree	if ( x < NUMBER_CONSTANT && Math < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Math < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

44
Tree	if ( x < NUMBER_CONSTANT && addNumber == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

45
Tree	if ( x < NUMBER_CONSTANT && abs >= addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && abs >= addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 6

46
Tree	if ( x < NUMBER_CONSTANT && addNumber >= this . abs ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber >= this . abs ) { add ( STRING_CONSTANT ) ; }
Distance : 7

47
Tree	if ( x < NUMBER_CONSTANT && addNumber == abs ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber == abs ) { add ( STRING_CONSTANT ) ; }
Distance : 5

48
Tree	if ( x < NUMBER_CONSTANT && addNumber && prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber && prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

49
Tree	if ( x < NUMBER_CONSTANT && addNumber < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

50
Tree	if ( x < NUMBER_CONSTANT && addNumber <= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber <= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

51
Tree	if ( x < NUMBER_CONSTANT && exp [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && exp [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

52
Tree	if ( x < NUMBER_CONSTANT && exp >= this . addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && exp >= this . addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 7

53
Tree	if ( x < NUMBER_CONSTANT && abs <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && abs <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

54
Tree	if ( x < NUMBER_CONSTANT && addNumber >= abs ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber >= abs ) { add ( STRING_CONSTANT ) ; }
Distance : 6

55
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

56
Tree	if ( x < NUMBER_CONSTANT && addNumber != abs ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber != abs ) { add ( STRING_CONSTANT ) ; }
Distance : 6

57
Tree	if ( x < NUMBER_CONSTANT && addNumber >= this . prev . toString ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber >= this . prev . toString ) { add ( STRING_CONSTANT ) ; }
Distance : 8

58
Tree	if ( x < NUMBER_CONSTANT && prev > abs ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > abs ) { add ( STRING_CONSTANT ) ; }
Distance : 5

59
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

60
Tree	if ( x < NUMBER_CONSTANT && addNumber != CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber != CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

61
Tree	if ( x < NUMBER_CONSTANT && addNumber > prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber > prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

62
Tree	if ( x < NUMBER_CONSTANT && Integer < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Integer < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

63
Tree	if ( x < NUMBER_CONSTANT && String [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && String [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

64
Tree	if ( x < NUMBER_CONSTANT && prev <= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

65
Tree	if ( x < NUMBER_CONSTANT && addNumber != x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber != x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

66
Tree	if ( x < NUMBER_CONSTANT && addNumber == add ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber == add ) { add ( STRING_CONSTANT ) ; }
Distance : 5

67
Tree	if ( x < NUMBER_CONSTANT && addNumber == addNumber - addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber == addNumber - addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 7

68
Tree	if ( x < NUMBER_CONSTANT && pow >= addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && pow >= addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 6

69
Tree	if ( x < NUMBER_CONSTANT && addNumber >= addNumber ) { add ( STRING_CONSTANT ) ; break; }
Code	if ( x < NUMBER_CONSTANT && addNumber >= addNumber ) { add ( STRING_CONSTANT ) ; break; }
Distance : 7

70
Tree	if ( x < NUMBER_CONSTANT && prev >= this . addNumber . addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . addNumber . addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 9

71
Tree	if ( x < NUMBER_CONSTANT && addNumber >= this . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber >= this . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 7

72
Tree	if ( x < NUMBER_CONSTANT && addNumber != add ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber != add ) { add ( STRING_CONSTANT ) ; }
Distance : 6

73
Tree	if ( x < NUMBER_CONSTANT && addNumber > pow ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber > pow ) { add ( STRING_CONSTANT ) ; }
Distance : 6

74
Tree	if ( x < NUMBER_CONSTANT && abs - addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && abs - addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 6

75
Tree	if ( x < NUMBER_CONSTANT && addNumber >= this . addNumber . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber >= this . addNumber . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 9

76
Tree	if ( x < NUMBER_CONSTANT && abs == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && abs == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

77
Tree	if ( x < NUMBER_CONSTANT && abs != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && abs != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

78
Tree	if ( x < NUMBER_CONSTANT && prev >= this . exp ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . exp ) { add ( STRING_CONSTANT ) ; }
Distance : 7

79
Tree	if ( x < NUMBER_CONSTANT && prev == prev - addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == prev - addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 6

80
Tree	if ( x < NUMBER_CONSTANT && abs == abs ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && abs == abs ) { add ( STRING_CONSTANT ) ; }
Distance : 5

81
Tree	if ( x < NUMBER_CONSTANT && exp <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && exp <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

82
Tree	if ( x < NUMBER_CONSTANT && addNumber - abs ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber - abs ) { add ( STRING_CONSTANT ) ; }
Distance : 6

83
Tree	if ( x < NUMBER_CONSTANT && addNumber <= addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber <= addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 6

84
Tree	if ( x < NUMBER_CONSTANT && addNumber >= this . addNumber . add ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber >= this . addNumber . add ) { add ( STRING_CONSTANT ) ; }
Distance : 9

85
Tree	if ( x < NUMBER_CONSTANT && addNumber >= exp ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber >= exp ) { add ( STRING_CONSTANT ) ; }
Distance : 6

86
Tree	if ( x < NUMBER_CONSTANT && abs == addNumber - addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && abs == addNumber - addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 7

87
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

88
Tree	if ( x < NUMBER_CONSTANT && prev == addNumber - prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == addNumber - prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

89
Tree	if ( x < NUMBER_CONSTANT && prev && addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev && addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 5

90
Tree	if ( x < NUMBER_CONSTANT && pow <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && pow <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

91
Tree	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

92
Tree	if ( x < NUMBER_CONSTANT && prev [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

93
Tree	if ( x < NUMBER_CONSTANT && addNumber && pow ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber && pow ) { add ( STRING_CONSTANT ) ; }
Distance : 6

94
Tree	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

95
Tree	if ( x < NUMBER_CONSTANT && abs <= addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && abs <= addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 6

96
Tree	if ( x < NUMBER_CONSTANT && pow && addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && pow && addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 6

97
Tree	if ( x < NUMBER_CONSTANT && CHAR_CONS != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && CHAR_CONS != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

98
Tree	if ( x < NUMBER_CONSTANT && abs [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && abs [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

99
Tree	if ( x < NUMBER_CONSTANT && exp > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && exp > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

100
Tree	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

101
Tree	if ( x < NUMBER_CONSTANT && prev > addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 5

102
Tree	if ( x < NUMBER_CONSTANT && addNumber [ NUMBER_CONSTANT ] == continue; ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber [ NUMBER_CONSTANT ] == continue; ) { add ( STRING_CONSTANT ) ; }
Distance : 7

103
Tree	if ( x < NUMBER_CONSTANT && Long < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Long < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

104
Tree	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

105
Tree	if ( x < NUMBER_CONSTANT && prev >= this . addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 7

106
Tree	if ( x < NUMBER_CONSTANT && CHAR_CONS == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && CHAR_CONS == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

107
Tree	if ( x < NUMBER_CONSTANT && abs == add ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && abs == add ) { add ( STRING_CONSTANT ) ; }
Distance : 5

108
Tree	if ( x < NUMBER_CONSTANT && addNumber != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

109
Tree	if ( x < NUMBER_CONSTANT && addNumber >= prev ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && addNumber >= prev ) { add ( STRING_CONSTANT ) ; return; }
Distance : 7

110
Tree	if ( x < NUMBER_CONSTANT && prev > prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

111
Tree	if ( x < NUMBER_CONSTANT && String < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && String < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

112
Tree	if ( x < NUMBER_CONSTANT && abs > addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && abs > addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 6

113
Tree	if ( x < NUMBER_CONSTANT && addNumber == abs - addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber == abs - addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 7

114
Tree	if ( x < NUMBER_CONSTANT && prev != abs ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != abs ) { add ( STRING_CONSTANT ) ; }
Distance : 5

115
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 7

116
Tree	if ( x < NUMBER_CONSTANT && addNumber - exp ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber - exp ) { add ( STRING_CONSTANT ) ; }
Distance : 6

117
Tree	if ( x < NUMBER_CONSTANT && Integer <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Integer <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

118
Tree	if ( x < NUMBER_CONSTANT && pow > addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && pow > addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 6

119
Tree	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

120
Tree	if ( x < NUMBER_CONSTANT && Math > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Math > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

121
Tree	if ( x < NUMBER_CONSTANT && Math <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Math <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

122
Tree	if ( x < NUMBER_CONSTANT && addNumber && abs ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber && abs ) { add ( STRING_CONSTANT ) ; }
Distance : 6

123
Tree	if ( x < NUMBER_CONSTANT && abs <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && abs <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

124
Tree	if ( x < NUMBER_CONSTANT && add != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && add != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

125
Tree	if ( x < NUMBER_CONSTANT && addNumber <= exp ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber <= exp ) { add ( STRING_CONSTANT ) ; }
Distance : 6

126
Tree	if ( x < NUMBER_CONSTANT && add == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && add == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

127
Tree	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

128
Tree	if ( x < NUMBER_CONSTANT && abs >= this . addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && abs >= this . addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 7

129
Tree	if ( x < NUMBER_CONSTANT && exp <= addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && exp <= addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 6

130
Tree	if ( x < NUMBER_CONSTANT && String == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && String == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

131
Tree	if ( x < NUMBER_CONSTANT && Long > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Long > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

132
Tree	if ( x < NUMBER_CONSTANT && pow != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && pow != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

133
Tree	if ( x < NUMBER_CONSTANT && Long <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Long <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

134
Tree	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

135
Tree	if ( x < NUMBER_CONSTANT && addNumber != String ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber != String ) { add ( STRING_CONSTANT ) ; }
Distance : 6

136
Tree	if ( x < NUMBER_CONSTANT && pow != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && pow != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

137
Tree	if ( x < NUMBER_CONSTANT && addNumber && addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber && addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 6

138
Tree	if ( x < NUMBER_CONSTANT && prev != add ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != add ) { add ( STRING_CONSTANT ) ; }
Distance : 5

139
Tree	if ( x < NUMBER_CONSTANT && abs == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && abs == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

140
Tree	if ( x < NUMBER_CONSTANT && pow == addNumber - addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && pow == addNumber - addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 7

141
Tree	if ( x < NUMBER_CONSTANT && addNumber == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

142
Tree	if ( x < NUMBER_CONSTANT && pow >= this . addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && pow >= this . addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 7

143
Tree	if ( x < NUMBER_CONSTANT && pow == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && pow == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

144
Tree	if ( x < NUMBER_CONSTANT && pow == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && pow == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

145
Tree	if ( x < NUMBER_CONSTANT && addNumber >= pow ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber >= pow ) { add ( STRING_CONSTANT ) ; }
Distance : 6

146
Tree	if ( x < NUMBER_CONSTANT && abs > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && abs > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

147
Tree	if ( x < NUMBER_CONSTANT && addNumber != toString ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber != toString ) { add ( STRING_CONSTANT ) ; }
Distance : 6

148
Tree	if ( x < NUMBER_CONSTANT && addNumber && exp ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber && exp ) { add ( STRING_CONSTANT ) ; }
Distance : 6

149
Tree	if ( x < NUMBER_CONSTANT && addNumber >= this . exp ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber >= this . exp ) { add ( STRING_CONSTANT ) ; }
Distance : 7

150
Tree	if ( x < NUMBER_CONSTANT && addNumber >= addNumber ) { add ( STRING_CONSTANT ) ; null }
Code	if ( x < NUMBER_CONSTANT && addNumber >= addNumber ) { add ( STRING_CONSTANT ) ; null }
Distance : 7

151
Tree	if ( x < NUMBER_CONSTANT && String <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && String <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

152
Tree	if ( x < NUMBER_CONSTANT && Math != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Math != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

153
Tree	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

154
Tree	if ( x < NUMBER_CONSTANT && prev <= addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 5

155
Tree	if ( x < NUMBER_CONSTANT && CHAR_CONS == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && CHAR_CONS == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

156
Tree	if ( x < NUMBER_CONSTANT && add == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && add == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

157
Tree	if ( x < NUMBER_CONSTANT && value != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && value != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

158
Tree	if ( x < NUMBER_CONSTANT && value == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && value == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

159
Tree	if ( x < NUMBER_CONSTANT && addNumber == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

160
Tree	if ( x < NUMBER_CONSTANT && addNumber >= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber >= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

161
Tree	if ( x < NUMBER_CONSTANT && addNumber != addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber != addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 6

162
Tree	if ( x < NUMBER_CONSTANT && prev && prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev && prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

163
Tree	if ( x < NUMBER_CONSTANT && Integer <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Integer <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

164
Tree	if ( x < NUMBER_CONSTANT && addNumber <= pow ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber <= pow ) { add ( STRING_CONSTANT ) ; }
Distance : 6

165
Tree	if ( x < NUMBER_CONSTANT && CHAR_CONS == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && CHAR_CONS == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

166
Tree	if ( x < NUMBER_CONSTANT && Integer > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Integer > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

167
Tree	if ( x < NUMBER_CONSTANT && prev != CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

168
Tree	if ( x < NUMBER_CONSTANT && Integer != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Integer != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

169
Tree	if ( x < NUMBER_CONSTANT && abs >= addNumber ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && abs >= addNumber ) { add ( STRING_CONSTANT ) ; return; }
Distance : 7

170
Tree	if ( x < NUMBER_CONSTANT && prev >= addNumber ) { add ( STRING_CONSTANT ) ; null }
Code	if ( x < NUMBER_CONSTANT && prev >= addNumber ) { add ( STRING_CONSTANT ) ; null }
Distance : 6

171
Tree	if ( x < NUMBER_CONSTANT && addNumber == prev - prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber == prev - prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

172
Tree	if ( x < NUMBER_CONSTANT && prev == abs ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == abs ) { add ( STRING_CONSTANT ) ; }
Distance : 4

173
Tree	if ( x < NUMBER_CONSTANT && addNumber <= abs ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber <= abs ) { add ( STRING_CONSTANT ) ; }
Distance : 6

174
Tree	if ( x < NUMBER_CONSTANT && pow [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && pow [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

175
Tree	if ( x < NUMBER_CONSTANT && prev - prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev - prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

176
Tree	if ( x < NUMBER_CONSTANT && pow <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && pow <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

177
Tree	if ( x < NUMBER_CONSTANT && value == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && value == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

178
Tree	if ( x < NUMBER_CONSTANT && x == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

179
Tree	if ( x < NUMBER_CONSTANT && exp && addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && exp && addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 6

180
Tree	if ( x < NUMBER_CONSTANT && addNumber >= addNumber ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && addNumber >= addNumber ) { add ( STRING_CONSTANT ) ; return; }
Distance : 7

181
Tree	if ( x < NUMBER_CONSTANT && Math <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Math <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

182
Tree	if ( x < NUMBER_CONSTANT && addNumber >= addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber >= addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 6

183
Tree	if ( x < NUMBER_CONSTANT && pow > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && pow > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

184
Tree	if ( x < NUMBER_CONSTANT && x != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

185
Tree	if ( x < NUMBER_CONSTANT && Long <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Long <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

186
Tree	if ( x < NUMBER_CONSTANT && x == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

187
Tree	if ( x < NUMBER_CONSTANT && Long != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Long != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

188
Tree	if ( x < NUMBER_CONSTANT && abs != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && abs != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

189
Tree	if ( x < NUMBER_CONSTANT && prev - addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev - addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 5

190
Tree	if ( x < NUMBER_CONSTANT && String <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && String <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

191
Tree	if ( x < NUMBER_CONSTANT && addNumber >= prev ) { add ( STRING_CONSTANT ) ; continue; }
Code	if ( x < NUMBER_CONSTANT && addNumber >= prev ) { add ( STRING_CONSTANT ) ; continue; }
Distance : 7

192
Tree	if ( x < NUMBER_CONSTANT && pow - addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && pow - addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 6

193
Tree	if ( x < NUMBER_CONSTANT && addNumber - pow ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber - pow ) { add ( STRING_CONSTANT ) ; }
Distance : 6

194
Tree	if ( x < NUMBER_CONSTANT && abs == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && abs == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

195
Tree	if ( x < NUMBER_CONSTANT && String > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && String > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

196
Tree	if ( x < NUMBER_CONSTANT && String != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && String != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

197
Tree	if ( x < NUMBER_CONSTANT && addNumber > abs ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && addNumber > abs ) { add ( STRING_CONSTANT ) ; }
Distance : 6

198
Tree	if ( x < NUMBER_CONSTANT && CHAR_CONS == add ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && CHAR_CONS == add ) { add ( STRING_CONSTANT ) ; }
Distance : 5

199
Tree	if ( x < NUMBER_CONSTANT && exp - addNumber ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && exp - addNumber ) { add ( STRING_CONSTANT ) ; }
Distance : 6

========================================================================


========================================================================
Example Number: 26
Parent Code is: 
cc . listSeparator () ;
-------------------------------------------------------------------------------
Child code is: 
cc . addOp ( opStr , true ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=cc}) (235{val=.}) (802{val=listSeparator}) (216{val=()})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=cc}) (235{val=.}) (802{val=addOp}) (214{val=(}) (800{val=opStr}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/34/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	context () . getNext () ;
Code	context () . getNext () ;
Distance : 8

1
Tree	current = cc . getNext ( NUMBER_CONSTANT ) ;
Code	current = cc . getNext ( NUMBER_CONSTANT ) ;
Distance : 6

2
Tree	cc = cc . addExpr ( NUMBER_CONSTANT ) ;
Code	cc = cc . addExpr ( NUMBER_CONSTANT ) ;
Distance : 6

3
Tree	cc . getNext ( cc , false ) ;
Code	cc . getNext ( cc , false ) ;
Distance : 3

4
Tree	addExpr = current . getNext ( NUMBER_CONSTANT ) ;
Code	addExpr = current . getNext ( NUMBER_CONSTANT ) ;
Distance : 7

5
Tree	cc = current . getNext ( NUMBER_CONSTANT ) ;
Code	cc = current . getNext ( NUMBER_CONSTANT ) ;
Distance : 6

6
Tree	cc . op ( NUMBER_CONSTANT ) ;
Code	cc . op ( NUMBER_CONSTANT ) ;
Distance : 4

7
Tree	addExpr = true ;
Code	addExpr = true ;
Distance : 7

8
Tree	context ( false ) ;
Code	context ( false ) ;
Distance : 6

9
Tree	addExpr . op ( NUMBER_CONSTANT ) ;
Code	addExpr . op ( NUMBER_CONSTANT ) ;
Distance : 5

10
Tree	cc () . listSeparator () ;
Code	cc () . listSeparator () ;
Distance : 7

11
Tree	new addExpr () . getNext () ;
Code	new addExpr () . getNext () ;
Distance : 8

12
Tree	context . getNext () ;
Code	context . getNext () ;
Distance : 7

13
Tree	getNext ( current ) ;
Code	getNext ( current ) ;
Distance : 6

14
Tree	current . getNext ( NUMBER_CONSTANT ) ;
Code	current . getNext ( NUMBER_CONSTANT ) ;
Distance : 5

15
Tree	this . current = current ;
Code	this . current = current ;
Distance : 7

16
Tree	addExpr = cc . getNext ( NUMBER_CONSTANT ) ;
Code	addExpr = cc . getNext ( NUMBER_CONSTANT ) ;
Distance : 6

17
Tree	this . context . getNext () ;
Code	this . context . getNext () ;
Distance : 7

18
Tree	cc () . listSeparator () ;
Code	cc () . listSeparator () ;
Distance : 7

19
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 4

20
Tree	this . cc = addExpr ;
Code	this . cc = addExpr ;
Distance : 7

21
Tree	addExpr () . addExpr () ;
Code	addExpr () . addExpr () ;
Distance : 8

22
Tree	listSeparator ( cc ) ;
Code	listSeparator ( cc ) ;
Distance : 6

23
Tree	cc () . op () ;
Code	cc () . op () ;
Distance : 7

24
Tree	cc ( cc ) ;
Code	cc ( cc ) ;
Distance : 5

25
Tree	addExpr ( current ) ;
Code	addExpr ( current ) ;
Distance : 6

26
Tree	cc . addExpr ( cc ) ;
Code	cc . addExpr ( cc ) ;
Distance : 4

27
Tree	getNext () . getNext () ;
Code	getNext () . getNext () ;
Distance : 8

28
Tree	getNext = true ;
Code	getNext = true ;
Distance : 7

29
Tree	cc . getNext ( current ) ;
Code	cc . getNext ( current ) ;
Distance : 4

30
Tree	cc = cc . op ( NUMBER_CONSTANT ) ;
Code	cc = cc . op ( NUMBER_CONSTANT ) ;
Distance : 6

31
Tree	this . cc . op () ;
Code	this . cc . op () ;
Distance : 7

32
Tree	cc . addExpr ( NUMBER_CONSTANT ) ;
Code	cc . addExpr ( NUMBER_CONSTANT ) ;
Distance : 4

33
Tree	cc = false ;
Code	cc = false ;
Distance : 7

34
Tree	getNext ( addExpr ) ;
Code	getNext ( addExpr ) ;
Distance : 6

35
Tree	getNext () ;
Code	getNext () ;
Distance : 8

36
Tree	cc = addExpr . getNext ( NUMBER_CONSTANT ) ;
Code	cc = addExpr . getNext ( NUMBER_CONSTANT ) ;
Distance : 6

37
Tree	addExpr () ;
Code	addExpr () ;
Distance : 8

38
Tree	this . cc . listSeparator () ;
Code	this . cc . listSeparator () ;
Distance : 7

39
Tree	this . cc = listSeparator ;
Code	this . cc = listSeparator ;
Distance : 7

40
Tree	addExpr ( addExpr ) ;
Code	addExpr ( addExpr ) ;
Distance : 6

41
Tree	cc ( false ) ;
Code	cc ( false ) ;
Distance : 5

42
Tree	getNext . getNext () ;
Code	getNext . getNext () ;
Distance : 7

43
Tree	cc . getNext ( NUMBER_CONSTANT ) ;
Code	cc . getNext ( NUMBER_CONSTANT ) ;
Distance : 4

44
Tree	current . getNext ( cc ) ;
Code	current . getNext ( cc ) ;
Distance : 5

45
Tree	current () ;
Code	current () ;
Distance : 8

46
Tree	addExpr = false ;
Code	addExpr = false ;
Distance : 8

47
Tree	cc . addExpr () ;
Code	cc . addExpr () ;
Distance : 6

48
Tree	cc () ;
Code	cc () ;
Distance : 7

49
Tree	addExpr = new current <> () ;
Code	addExpr = new current <> () ;
Distance : 8

50
Tree	cc = new getNext <> () ;
Code	cc = new getNext <> () ;
Distance : 7

51
Tree	this . context = cc ;
Code	this . context = cc ;
Distance : 7

52
Tree	this . cc . getNext () ;
Code	this . cc . getNext () ;
Distance : 7

53
Tree	getNext = new addExpr <> () ;
Code	getNext = new addExpr <> () ;
Distance : 8

54
Tree	current = false ;
Code	current = false ;
Distance : 8

55
Tree	cc = new addExpr <> () ;
Code	cc = new addExpr <> () ;
Distance : 7

56
Tree	addExpr ( cc ) ;
Code	addExpr ( cc ) ;
Distance : 6

57
Tree	cc = new cc <> () ;
Code	cc = new cc <> () ;
Distance : 7

58
Tree	this . cc = cc ;
Code	this . cc = cc ;
Distance : 7

59
Tree	current . getNext () ;
Code	current . getNext () ;
Distance : 7

60
Tree	getNext ( cc ) ;
Code	getNext ( cc ) ;
Distance : 6

61
Tree	cc () . getNext () ;
Code	cc () . getNext () ;
Distance : 7

62
Tree	op () ;
Code	op () ;
Distance : 8

63
Tree	addExpr . op () ;
Code	addExpr . op () ;
Distance : 7

64
Tree	listSeparator ( STRING_CONSTANT ) ;
Code	listSeparator ( STRING_CONSTANT ) ;
Distance : 6

65
Tree	cc . getNext () ;
Code	cc . getNext () ;
Distance : 6

66
Tree	addExpr = new cc <> () ;
Code	addExpr = new cc <> () ;
Distance : 8

67
Tree	getNext = false ;
Code	getNext = false ;
Distance : 8

68
Tree	cc () . addExpr () ;
Code	cc () . addExpr () ;
Distance : 7

69
Tree	this . cc = context ;
Code	this . cc = context ;
Distance : 7

70
Tree	current = new cc <> () ;
Code	current = new cc <> () ;
Distance : 8

71
Tree	cc = new current <> () ;
Code	cc = new current <> () ;
Distance : 7

72
Tree	getNext . getNext ( cc ) ;
Code	getNext . getNext ( cc ) ;
Distance : 5

73
Tree	cc . listSeparator () ;
Code	cc . listSeparator () ;
Distance : 6

74
Tree	cc . listSeparator ( cc ) ;
Code	cc . listSeparator ( cc ) ;
Distance : 4

75
Tree	addExpr . getNext () ;
Code	addExpr . getNext () ;
Distance : 7

76
Tree	listSeparator = false ;
Code	listSeparator = false ;
Distance : 8

77
Tree	cc = cc . getNext ( NUMBER_CONSTANT ) ;
Code	cc = cc . getNext ( NUMBER_CONSTANT ) ;
Distance : 6

78
Tree	op ( cc ) ;
Code	op ( cc ) ;
Distance : 6

79
Tree	new context () . getNext () ;
Code	new context () . getNext () ;
Distance : 8

80
Tree	this . current . op () ;
Code	this . current . op () ;
Distance : 7

81
Tree	cc ( STRING_CONSTANT ) ;
Code	cc ( STRING_CONSTANT ) ;
Distance : 5

82
Tree	current ( STRING_CONSTANT ) ;
Code	current ( STRING_CONSTANT ) ;
Distance : 6

83
Tree	getNext ( getNext ) ;
Code	getNext ( getNext ) ;
Distance : 6

84
Tree	addExpr = new addExpr <> () ;
Code	addExpr = new addExpr <> () ;
Distance : 8

85
Tree	cc . addExpr ( cc , false ) ;
Code	cc . addExpr ( cc , false ) ;
Distance : 3

86
Tree	listSeparator () ;
Code	listSeparator () ;
Distance : 8

87
Tree	new addExpr () . listSeparator () ;
Code	new addExpr () . listSeparator () ;
Distance : 8

88
Tree	cc . getNext ( current , false ) ;
Code	cc . getNext ( current , false ) ;
Distance : 3

89
Tree	this . cc = op ;
Code	this . cc = op ;
Distance : 7

90
Tree	cc . getNext ( getNext , false ) ;
Code	cc . getNext ( getNext , false ) ;
Distance : 3

91
Tree	this . getNext = cc ;
Code	this . getNext = cc ;
Distance : 7

92
Tree	this . cc = listSeparator ;
Code	this . cc = listSeparator ;
Distance : 7

93
Tree	context = false ;
Code	context = false ;
Distance : 8

94
Tree	cc = context . getNext ( NUMBER_CONSTANT ) ;
Code	cc = context . getNext ( NUMBER_CONSTANT ) ;
Distance : 6

95
Tree	addExpr () . getNext () ;
Code	addExpr () . getNext () ;
Distance : 8

96
Tree	this . addExpr = listSeparator ;
Code	this . addExpr = listSeparator ;
Distance : 7

97
Tree	cc = current . op ( NUMBER_CONSTANT ) ;
Code	cc = current . op ( NUMBER_CONSTANT ) ;
Distance : 6

98
Tree	addExpr . addExpr ( NUMBER_CONSTANT ) ;
Code	addExpr . addExpr ( NUMBER_CONSTANT ) ;
Distance : 5

99
Tree	cc . getNext ( current . getNext () ) ;
Code	cc . getNext ( current . getNext () ) ;
Distance : 5

100
Tree	listSeparator () ;
Code	listSeparator () ;
Distance : 8

101
Tree	this . getNext . getNext () ;
Code	this . getNext . getNext () ;
Distance : 7

102
Tree	current ( false ) ;
Code	current ( false ) ;
Distance : 6

103
Tree	new cc () . getNext () ;
Code	new cc () . getNext () ;
Distance : 8

104
Tree	String ( STRING_CONSTANT ) ;
Code	String ( STRING_CONSTANT ) ;
Distance : 6

105
Tree	addExpr . getNext ( cc ) ;
Code	addExpr . getNext ( cc ) ;
Distance : 5

106
Tree	this . current . getNext () ;
Code	this . current . getNext () ;
Distance : 7

107
Tree	getNext . getNext ( NUMBER_CONSTANT ) ;
Code	getNext . getNext ( NUMBER_CONSTANT ) ;
Distance : 5

108
Tree	listSeparator ( STRING_CONSTANT ) ;
Code	listSeparator ( STRING_CONSTANT ) ;
Distance : 6

109
Tree	cc = true ;
Code	cc = true ;
Distance : 6

110
Tree	new Node ( cc ) . getNext () ;
Code	new Node ( cc ) . getNext () ;
Distance : 8

111
Tree	addExpr . getNext ( getNext ) ;
Code	addExpr . getNext ( getNext ) ;
Distance : 5

112
Tree	cc . getNext ( cc , n ) ;
Code	cc . getNext ( cc , n ) ;
Distance : 3

113
Tree	op ( STRING_CONSTANT ) ;
Code	op ( STRING_CONSTANT ) ;
Distance : 6

114
Tree	addExpr . getNext ( cc , n ) ;
Code	addExpr . getNext ( cc , n ) ;
Distance : 4

115
Tree	this . cc . addExpr () ;
Code	this . cc . addExpr () ;
Distance : 7

116
Tree	context ( STRING_CONSTANT ) ;
Code	context ( STRING_CONSTANT ) ;
Distance : 6

117
Tree	new current () . getNext () ;
Code	new current () . getNext () ;
Distance : 8

118
Tree	new listSeparator ( cc ) . getNext () ;
Code	new listSeparator ( cc ) . getNext () ;
Distance : 8

119
Tree	addExpr . getNext ( cc , false ) ;
Code	addExpr . getNext ( cc , false ) ;
Distance : 4

120
Tree	this . current = cc ;
Code	this . current = cc ;
Distance : 7

121
Tree	new getNext ( cc ) . op () ;
Code	new getNext ( cc ) . op () ;
Distance : 8

122
Tree	context . getNext ( NUMBER_CONSTANT ) ;
Code	context . getNext ( NUMBER_CONSTANT ) ;
Distance : 5

123
Tree	this . cc = cc ;
Code	this . cc = cc ;
Distance : 7

124
Tree	this . current = addExpr ;
Code	this . current = addExpr ;
Distance : 7

125
Tree	String () ;
Code	String () ;
Distance : 8

126
Tree	cc . listSeparator ( cc , n ) ;
Code	cc . listSeparator ( cc , n ) ;
Distance : 3

127
Tree	cc . getNext ( addExpr , false ) ;
Code	cc . getNext ( addExpr , false ) ;
Distance : 3

128
Tree	this . addExpr . getNext () ;
Code	this . addExpr . getNext () ;
Distance : 7

129
Tree	this . cc = getFirstChild ;
Code	this . cc = getFirstChild ;
Distance : 7

130
Tree	this . cc = listSeparator ;
Code	this . cc = listSeparator ;
Distance : 7

131
Tree	current . getNext ( cc . getNext () ) ;
Code	current . getNext ( cc . getNext () ) ;
Distance : 6

132
Tree	cc . listSeparator ( cc . getNext () ) ;
Code	cc . listSeparator ( cc . getNext () ) ;
Distance : 5

133
Tree	new getNext ( current ) . getNext () ;
Code	new getNext ( current ) . getNext () ;
Distance : 8

134
Tree	cc . op ( getNext ) ;
Code	cc . op ( getNext ) ;
Distance : 4

135
Tree	getNext ( STRING_CONSTANT ) ;
Code	getNext ( STRING_CONSTANT ) ;
Distance : 6

136
Tree	this . cc = getNext ;
Code	this . cc = getNext ;
Distance : 7

137
Tree	cc . getNext ( getNext ) ;
Code	cc . getNext ( getNext ) ;
Distance : 4

138
Tree	addExpr ( STRING_CONSTANT ) ;
Code	addExpr ( STRING_CONSTANT ) ;
Distance : 6

139
Tree	cc . getNext ( addExpr ) ;
Code	cc . getNext ( addExpr ) ;
Distance : 4

140
Tree	cc . op () ;
Code	cc . op () ;
Distance : 6

141
Tree	cc . getNext ( cc . op () ) ;
Code	cc . getNext ( cc . op () ) ;
Distance : 5

142
Tree	listSeparator ( false ) ;
Code	listSeparator ( false ) ;
Distance : 6

143
Tree	String ( false ) ;
Code	String ( false ) ;
Distance : 6

144
Tree	this . cc = addExpr ;
Code	this . cc = addExpr ;
Distance : 7

145
Tree	getNext . getNext ( cc , n ) ;
Code	getNext . getNext ( cc , n ) ;
Distance : 4

146
Tree	addExpr . addExpr () ;
Code	addExpr . addExpr () ;
Distance : 7

147
Tree	new String ( cc ) . getNext () ;
Code	new String ( cc ) . getNext () ;
Distance : 8

148
Tree	new addExpr ( cc ) . getNext () ;
Code	new addExpr ( cc ) . getNext () ;
Distance : 8

149
Tree	getNext ( false ) ;
Code	getNext ( false ) ;
Distance : 6

150
Tree	addExpr . getNext ( NUMBER_CONSTANT ) ;
Code	addExpr . getNext ( NUMBER_CONSTANT ) ;
Distance : 5

151
Tree	op ( false ) ;
Code	op ( false ) ;
Distance : 6

152
Tree	new getNext ( addExpr ) . getNext () ;
Code	new getNext ( addExpr ) . getNext () ;
Distance : 8

153
Tree	Node ( STRING_CONSTANT ) ;
Code	Node ( STRING_CONSTANT ) ;
Distance : 6

154
Tree	Node () ;
Code	Node () ;
Distance : 8

155
Tree	context () ;
Code	context () ;
Distance : 8

156
Tree	cc . getNext ( getNext , n ) ;
Code	cc . getNext ( getNext , n ) ;
Distance : 3

157
Tree	addExpr . getNext ( cc . getNext () ) ;
Code	addExpr . getNext ( cc . getNext () ) ;
Distance : 6

158
Tree	new op ( cc ) . getNext () ;
Code	new op ( cc ) . getNext () ;
Distance : 8

159
Tree	listSeparator ( false ) ;
Code	listSeparator ( false ) ;
Distance : 6

160
Tree	this . addExpr . op () ;
Code	this . addExpr . op () ;
Distance : 7

161
Tree	cc . op ( cc , false ) ;
Code	cc . op ( cc , false ) ;
Distance : 3

162
Tree	cc . getNext ( addExpr , n ) ;
Code	cc . getNext ( addExpr , n ) ;
Distance : 3

163
Tree	new getNext () . getNext () ;
Code	new getNext () . getNext () ;
Distance : 8

164
Tree	cc . getNext ( cc . getNext () ) ;
Code	cc . getNext ( cc . getNext () ) ;
Distance : 5

165
Tree	this . addExpr = cc ;
Code	this . addExpr = cc ;
Distance : 7

166
Tree	current . getNext ( cc , false ) ;
Code	current . getNext ( cc , false ) ;
Distance : 4

167
Tree	cc . op ( cc , n ) ;
Code	cc . op ( cc , n ) ;
Distance : 3

168
Tree	cc . getNext ( getNext . getNext () ) ;
Code	cc . getNext ( getNext . getNext () ) ;
Distance : 5

169
Tree	current = true ;
Code	current = true ;
Distance : 7

170
Tree	cc . listSeparator ( cc , false ) ;
Code	cc . listSeparator ( cc , false ) ;
Distance : 3

171
Tree	cc . getNext ( op ) ;
Code	cc . getNext ( op ) ;
Distance : 4

172
Tree	new getNext ( cc ) . listSeparator () ;
Code	new getNext ( cc ) . listSeparator () ;
Distance : 8

173
Tree	cc . getNext ( getNext ) ;
Code	cc . getNext ( getNext ) ;
Distance : 4

174
Tree	cc . getNext ( addExpr . getNext () ) ;
Code	cc . getNext ( addExpr . getNext () ) ;
Distance : 5

175
Tree	Node ( false ) ;
Code	Node ( false ) ;
Distance : 6

176
Tree	cc . op ( cc . getNext () ) ;
Code	cc . op ( cc . getNext () ) ;
Distance : 5

177
Tree	cc . getNext ( addExpr ) ;
Code	cc . getNext ( addExpr ) ;
Distance : 4

178
Tree	cc . addExpr ( cc , n ) ;
Code	cc . addExpr ( cc , n ) ;
Distance : 3

179
Tree	new addExpr () . addExpr () ;
Code	new addExpr () . addExpr () ;
Distance : 8

180
Tree	this . cc = current ;
Code	this . cc = current ;
Distance : 7

181
Tree	cc . op ( cc ) ;
Code	cc . op ( cc ) ;
Distance : 4

182
Tree	addExpr ( false ) ;
Code	addExpr ( false ) ;
Distance : 6

183
Tree	cc . getNext ( cc ) ;
Code	cc . getNext ( cc ) ;
Distance : 4

184
Tree	current = new addExpr <> () ;
Code	current = new addExpr <> () ;
Distance : 8

185
Tree	getNext . getNext ( cc , false ) ;
Code	getNext . getNext ( cc , false ) ;
Distance : 4

186
Tree	cc . getNext ( current , n ) ;
Code	cc . getNext ( current , n ) ;
Distance : 3

187
Tree	new listSeparator () . getNext () ;
Code	new listSeparator () . getNext () ;
Distance : 8

188
Tree	cc . getNext ( listSeparator ) ;
Code	cc . getNext ( listSeparator ) ;
Distance : 4

189
Tree	new op () . getNext () ;
Code	new op () . getNext () ;
Distance : 8

190
Tree	cc . addExpr ( getNext ) ;
Code	cc . addExpr ( getNext ) ;
Distance : 4

191
Tree	cc . addExpr ( cc . getNext () ) ;
Code	cc . addExpr ( cc . getNext () ) ;
Distance : 5

192
Tree	current () . getNext () ;
Code	current () . getNext () ;
Distance : 8

193
Tree	new getNext ( cc ) . getNext () ;
Code	new getNext ( cc ) . getNext () ;
Distance : 8

194
Tree	current . getNext ( cc , n ) ;
Code	current . getNext ( cc , n ) ;
Distance : 4

195
Tree	cc . getNext ( listSeparator ) ;
Code	cc . getNext ( listSeparator ) ;
Distance : 4

196
Tree	this . current = listSeparator ;
Code	this . current = listSeparator ;
Distance : 7

197
Tree	current . getNext ( getNext ) ;
Code	current . getNext ( getNext ) ;
Distance : 5

198
Tree	cc . listSeparator ( getNext ) ;
Code	cc . listSeparator ( getNext ) ;
Distance : 4

199
Tree	new Node () . getNext () ;
Code	new Node () . getNext () ;
Distance : 8

========================================================================


========================================================================
Example Number: 27
Parent Code is: 
options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.closurePass
-------------------------------------------------------------------------------
Child code is: 
options.dependencyOptions . needsManagement () && options.closurePass
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (40{val=options.dependencyOptions}) (235{val=.}) (802{val=needsManagement}) (216{val=()})) (249{val=&&}) (38 (207{val=!}) (40{val=options.skipAllPasses})) (249{val=&&}) (40{val=options.closurePass})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (40{val=options.dependencyOptions}) (235{val=.}) (802{val=needsManagement}) (216{val=()})) (249{val=&&}) (40{val=options.closurePass})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/31/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	options.transformAMDToCJSModules + NUMBER_CONSTANT == NUMBER_CONSTANT
Code	options.transformAMDToCJSModules + NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 6

1
Tree	Tracer + NUMBER_CONSTANT == NUMBER_CONSTANT
Code	Tracer + NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 6

2
Tree	getModule < String
Code	getModule < String
Distance : 6

3
Tree	detachChildren + NUMBER_CONSTANT == NUMBER_CONSTANT
Code	detachChildren + NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 6

4
Tree	options.devMode < String
Code	options.devMode < String
Distance : 6

5
Tree	CompilerInput + NUMBER_CONSTANT == NUMBER_CONSTANT
Code	CompilerInput + NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 6

6
Tree	tracer + NUMBER_CONSTANT == NUMBER_CONSTANT
Code	tracer + NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 6

7
Tree	getModule + NUMBER_CONSTANT == NUMBER_CONSTANT
Code	getModule + NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 6

8
Tree	options.devMode + NUMBER_CONSTANT == NUMBER_CONSTANT
Code	options.devMode + NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 6

9
Tree	getModule + STRING_CONSTANT == NUMBER_CONSTANT
Code	getModule + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

10
Tree	tracer + STRING_CONSTANT == NUMBER_CONSTANT
Code	tracer + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

11
Tree	isOn + STRING_CONSTANT == NUMBER_CONSTANT
Code	isOn + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

12
Tree	detachChildren + STRING_CONSTANT == NUMBER_CONSTANT
Code	detachChildren + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

13
Tree	getJSDocInfo + STRING_CONSTANT == NUMBER_CONSTANT
Code	getJSDocInfo + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

14
Tree	CompilerInput + STRING_CONSTANT == NUMBER_CONSTANT
Code	CompilerInput + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

15
Tree	tracker + STRING_CONSTANT == NUMBER_CONSTANT
Code	tracker + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

16
Tree	options.transformAMDToCJSModules + STRING_CONSTANT == NUMBER_CONSTANT
Code	options.transformAMDToCJSModules + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

17
Tree	JSDocInfo + STRING_CONSTANT == NUMBER_CONSTANT
Code	JSDocInfo + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

18
Tree	options.devMode + STRING_CONSTANT == NUMBER_CONSTANT
Code	options.devMode + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

19
Tree	detachChildren < String
Code	detachChildren < String
Distance : 6

20
Tree	Tracer < String
Code	Tracer < String
Distance : 6

21
Tree	CompilerInput < String == NUMBER_CONSTANT
Code	CompilerInput < String == NUMBER_CONSTANT
Distance : 6

22
Tree	options.transformAMDToCJSModules < String
Code	options.transformAMDToCJSModules < String
Distance : 6

23
Tree	null != hasErrors . getProvides ( null )
Code	null != hasErrors . getProvides ( null )
Distance : 7

24
Tree	options.devMode < Node
Code	options.devMode < Node
Distance : 6

25
Tree	JSDocInfo < String
Code	JSDocInfo < String
Distance : 6

26
Tree	detachChildren < String == NUMBER_CONSTANT
Code	detachChildren < String == NUMBER_CONSTANT
Distance : 6

27
Tree	options.devMode < n
Code	options.devMode < n
Distance : 6

28
Tree	null != tracker . getModule ( null )
Code	null != tracker . getModule ( null )
Distance : 7

29
Tree	Tracer < String == NUMBER_CONSTANT
Code	Tracer < String == NUMBER_CONSTANT
Distance : 6

30
Tree	null != this . hasErrors . isOn () == NUMBER_CONSTANT
Code	null != this . hasErrors . isOn () == NUMBER_CONSTANT
Distance : 8

31
Tree	getModule . detachChildren ( null ) > NUMBER_CONSTANT
Code	getModule . detachChildren ( null ) > NUMBER_CONSTANT
Distance : 7

32
Tree	null != hasErrors . hasErrors ( null )
Code	null != hasErrors . hasErrors ( null )
Distance : 7

33
Tree	options.transformAMDToCJSModules < String == NUMBER_CONSTANT
Code	options.transformAMDToCJSModules < String == NUMBER_CONSTANT
Distance : 6

34
Tree	null != hasErrors . getJSDocInfo ( null )
Code	null != hasErrors . getJSDocInfo ( null )
Distance : 7

35
Tree	getModule . detachChildren ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	getModule . detachChildren ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 9

36
Tree	options.devMode < Node == NUMBER_CONSTANT
Code	options.devMode < Node == NUMBER_CONSTANT
Distance : 6

37
Tree	getModule . getModule ( null ) > NUMBER_CONSTANT
Code	getModule . getModule ( null ) > NUMBER_CONSTANT
Distance : 7

38
Tree	JSDocInfo < String == NUMBER_CONSTANT
Code	JSDocInfo < String == NUMBER_CONSTANT
Distance : 6

39
Tree	getModule > getModule + STRING_CONSTANT
Code	getModule > getModule + STRING_CONSTANT
Distance : 6

40
Tree	null != hasErrors . getModule ( getAstRoot . class )
Code	null != hasErrors . getModule ( getAstRoot . class )
Distance : 9

41
Tree	null != hasErrors . getModule ( options.processCommonJSModules . class )
Code	null != hasErrors . getModule ( options.processCommonJSModules . class )
Distance : 9

42
Tree	null != tracker . isOn ( null )
Code	null != tracker . isOn ( null )
Distance : 7

43
Tree	options.devMode < n == NUMBER_CONSTANT
Code	options.devMode < n == NUMBER_CONSTANT
Distance : 6

44
Tree	null != this . hasErrors . getModule () == NUMBER_CONSTANT
Code	null != this . hasErrors . getModule () == NUMBER_CONSTANT
Distance : 8

45
Tree	null != hasErrors . getModule ( externs . class )
Code	null != hasErrors . getModule ( externs . class )
Distance : 9

46
Tree	null != hasErrors . getModule ( block . class )
Code	null != hasErrors . getModule ( block . class )
Distance : 9

47
Tree	null != this . hasErrors . detachChildren () == NUMBER_CONSTANT
Code	null != this . hasErrors . detachChildren () == NUMBER_CONSTANT
Distance : 8

48
Tree	null != hasErrors . isOn ( getAstRoot . class )
Code	null != hasErrors . isOn ( getAstRoot . class )
Distance : 9

49
Tree	getModule . getModule ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	getModule . getModule ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 9

50
Tree	null != this . tracker . isOn () == NUMBER_CONSTANT
Code	null != this . tracker . isOn () == NUMBER_CONSTANT
Distance : 8

51
Tree	this . tracer . isOn () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . tracer . isOn () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

52
Tree	getModule . detachChildren ( externs . class ) > NUMBER_CONSTANT
Code	getModule . detachChildren ( externs . class ) > NUMBER_CONSTANT
Distance : 9

53
Tree	null != JSDocInfo . getModule ( null )
Code	null != JSDocInfo . getModule ( null )
Distance : 7

54
Tree	detachChildren . detachChildren ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	detachChildren . detachChildren ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 9

55
Tree	detachChildren . getModule ( null ) > NUMBER_CONSTANT
Code	detachChildren . getModule ( null ) > NUMBER_CONSTANT
Distance : 7

56
Tree	null != hasErrors . isOn ( options.processCommonJSModules . class )
Code	null != hasErrors . isOn ( options.processCommonJSModules . class )
Distance : 9

57
Tree	tracer > tracker + STRING_CONSTANT
Code	tracer > tracker + STRING_CONSTANT
Distance : 6

58
Tree	null != tracker . detachChildren ( null )
Code	null != tracker . detachChildren ( null )
Distance : 7

59
Tree	getModule . isOn ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	getModule . isOn ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 9

60
Tree	null != hasErrors . getModule ( JSDocInfo . class )
Code	null != hasErrors . getModule ( JSDocInfo . class )
Distance : 9

61
Tree	tracer . detachChildren ( null ) > NUMBER_CONSTANT
Code	tracer . detachChildren ( null ) > NUMBER_CONSTANT
Distance : 7

62
Tree	tracer . detachChildren ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	tracer . detachChildren ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 9

63
Tree	detachChildren / options.processCommonJSModules == NUMBER_CONSTANT
Code	detachChildren / options.processCommonJSModules == NUMBER_CONSTANT
Distance : 6

64
Tree	null != this . hasErrors . isOn ( getAstRoot , this . jsRoot )
Code	null != this . hasErrors . isOn ( getAstRoot , this . jsRoot )
Distance : 13

65
Tree	getJSDocInfo . detachChildren ( null ) > NUMBER_CONSTANT
Code	getJSDocInfo . detachChildren ( null ) > NUMBER_CONSTANT
Distance : 7

66
Tree	null != this . hasErrors . isOn ( getAstRoot , this . sia )
Code	null != this . hasErrors . isOn ( getAstRoot , this . sia )
Distance : 13

67
Tree	null != this . hasErrors . getModule ( getAstRoot , this . jsRoot )
Code	null != this . hasErrors . getModule ( getAstRoot , this . jsRoot )
Distance : 13

68
Tree	this . getModule . detachChildren () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . getModule . detachChildren () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

69
Tree	null != this . hasErrors . detachChildren ( getAstRoot , this . jsRoot )
Code	null != this . hasErrors . detachChildren ( getAstRoot , this . jsRoot )
Distance : 13

70
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT
Distance : 6

71
Tree	null != this . hasErrors . isOn ( getAstRoot , this . getJSDocInfo )
Code	null != this . hasErrors . isOn ( getAstRoot , this . getJSDocInfo )
Distance : 13

72
Tree	tracer . getModule ( null ) < ^
Code	tracer . getModule ( null ) < ^
Distance : 7

73
Tree	getModule . getModule ( externs . class ) > NUMBER_CONSTANT
Code	getModule . getModule ( externs . class ) > NUMBER_CONSTANT
Distance : 9

74
Tree	null != this . hasErrors . getModule ( getAstRoot , this . sia )
Code	null != this . hasErrors . getModule ( getAstRoot , this . sia )
Distance : 13

75
Tree	detachChildren . getModule ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	detachChildren . getModule ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 9

76
Tree	null != this . hasErrors . getModule ( getAstRoot , this . getJSDocInfo )
Code	null != this . hasErrors . getModule ( getAstRoot , this . getJSDocInfo )
Distance : 13

77
Tree	getModule && n . hasErrors ( options.transformAMDToCJSModules . class ) && ^
Code	getModule && n . hasErrors ( options.transformAMDToCJSModules . class ) && ^
Distance : 10

78
Tree	null != this . hasErrors . detachChildren ( getAstRoot , this . sia )
Code	null != this . hasErrors . detachChildren ( getAstRoot , this . sia )
Distance : 13

79
Tree	getModule && externs . hasErrors ( options.transformAMDToCJSModules . class ) && ^
Code	getModule && externs . hasErrors ( options.transformAMDToCJSModules . class ) && ^
Distance : 10

80
Tree	null != this . hasErrors . isOn ( getAstRoot , this . isOn )
Code	null != this . hasErrors . isOn ( getAstRoot , this . isOn )
Distance : 13

81
Tree	getModule && JSDocInfo . hasErrors ( options.transformAMDToCJSModules . class ) && ^
Code	getModule && JSDocInfo . hasErrors ( options.transformAMDToCJSModules . class ) && ^
Distance : 10

82
Tree	getModule && remove . hasErrors ( options.transformAMDToCJSModules . class ) && ^
Code	getModule && remove . hasErrors ( options.transformAMDToCJSModules . class ) && ^
Distance : 10

83
Tree	null != this . hasErrors . isOn ( externs , this . jsRoot )
Code	null != this . hasErrors . isOn ( externs , this . jsRoot )
Distance : 13

84
Tree	getModule && n . hasErrors ( isOn . class ) && ^
Code	getModule && n . hasErrors ( isOn . class ) && ^
Distance : 10

85
Tree	getModule && options.processCommonJSModules . hasErrors ( options.transformAMDToCJSModules . class ) && ^
Code	getModule && options.processCommonJSModules . hasErrors ( options.transformAMDToCJSModules . class ) && ^
Distance : 10

86
Tree	getModule && n . hasErrors ( getJSDocInfo . class ) && ^
Code	getModule && n . hasErrors ( getJSDocInfo . class ) && ^
Distance : 10

87
Tree	getModule && externs . hasErrors ( isOn . class ) && ^
Code	getModule && externs . hasErrors ( isOn . class ) && ^
Distance : 10

88
Tree	tracer && n . hasErrors ( options.transformAMDToCJSModules . class ) && ^
Code	tracer && n . hasErrors ( options.transformAMDToCJSModules . class ) && ^
Distance : 10

89
Tree	options.devMode < String == NUMBER_CONSTANT
Code	options.devMode < String == NUMBER_CONSTANT
Distance : 6

90
Tree	tracer < String
Code	tracer < String
Distance : 6

91
Tree	getModule > n + STRING_CONSTANT
Code	getModule > n + STRING_CONSTANT
Distance : 6

92
Tree	JSDocInfo + NUMBER_CONSTANT == NUMBER_CONSTANT
Code	JSDocInfo + NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 6

93
Tree	isOn . detachChildren ( null ) > NUMBER_CONSTANT
Code	isOn . detachChildren ( null ) > NUMBER_CONSTANT
Distance : 7

94
Tree	isOn + NUMBER_CONSTANT == NUMBER_CONSTANT
Code	isOn + NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 6

95
Tree	options.processCommonJSModules + NUMBER_CONSTANT == NUMBER_CONSTANT
Code	options.processCommonJSModules + NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 6

96
Tree	getModule < String == NUMBER_CONSTANT
Code	getModule < String == NUMBER_CONSTANT
Distance : 6

97
Tree	this . tracker . getModule () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . tracker . getModule () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

98
Tree	getModule > tracker + STRING_CONSTANT
Code	getModule > tracker + STRING_CONSTANT
Distance : 6

99
Tree	getJSDocInfo . detachChildren ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	getJSDocInfo . detachChildren ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 9

100
Tree	null != this . tracker . getModule () == NUMBER_CONSTANT
Code	null != this . tracker . getModule () == NUMBER_CONSTANT
Distance : 8

101
Tree	isOn . getModule ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	isOn . getModule ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 9

102
Tree	null != hasErrors . getModule ( null )
Code	null != hasErrors . getModule ( null )
Distance : 7

103
Tree	tracer . detachChildren ( externs . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	tracer . detachChildren ( externs . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 11

104
Tree	isOn . detachChildren ( null ) < >=
Code	isOn . detachChildren ( null ) < >=
Distance : 7

105
Tree	null != hasErrors . isOn ( null )
Code	null != hasErrors . isOn ( null )
Distance : 7

106
Tree	getModule && remove . hasErrors ( null ) && ^
Code	getModule && remove . hasErrors ( null ) && ^
Distance : 8

107
Tree	getModule > getJSDocInfo + STRING_CONSTANT
Code	getModule > getJSDocInfo + STRING_CONSTANT
Distance : 6

108
Tree	tracer && n . hasErrors ( null ) && ^
Code	tracer && n . hasErrors ( null ) && ^
Distance : 8

109
Tree	getModule . getModule ( null ) < ^
Code	getModule . getModule ( null ) < ^
Distance : 7

110
Tree	tracer . detachChildren ( null ) < >=
Code	tracer . detachChildren ( null ) < >=
Distance : 7

111
Tree	this . getModule . isOn () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . getModule . isOn () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

112
Tree	CompilerInput < String
Code	CompilerInput < String
Distance : 6

113
Tree	getModule . detachChildren ( JSDocInfo . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	getModule . detachChildren ( JSDocInfo . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 11

114
Tree	getModule / n == NUMBER_CONSTANT
Code	getModule / n == NUMBER_CONSTANT
Distance : 6

115
Tree	isOn / options.processCommonJSModules == NUMBER_CONSTANT
Code	isOn / options.processCommonJSModules == NUMBER_CONSTANT
Distance : 6

116
Tree	detachChildren . detachChildren ( null ) > NUMBER_CONSTANT
Code	detachChildren . detachChildren ( null ) > NUMBER_CONSTANT
Distance : 7

117
Tree	getModule > options.transformAMDToCJSModules + STRING_CONSTANT
Code	getModule > options.transformAMDToCJSModules + STRING_CONSTANT
Distance : 6

118
Tree	getModule && n . getJSDocInfo ( null ) && ^
Code	getModule && n . getJSDocInfo ( null ) && ^
Distance : 8

119
Tree	null != hasErrors . detachChildren ( null )
Code	null != hasErrors . detachChildren ( null )
Distance : 7

120
Tree	this . isOn . detachChildren () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . isOn . detachChildren () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

121
Tree	getModule / externs == NUMBER_CONSTANT
Code	getModule / externs == NUMBER_CONSTANT
Distance : 6

122
Tree	getModule / remove == NUMBER_CONSTANT
Code	getModule / remove == NUMBER_CONSTANT
Distance : 6

123
Tree	getModule . detachChildren ( options.processCommonJSModules . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	getModule . detachChildren ( options.processCommonJSModules . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 11

124
Tree	isOn . detachChildren ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	isOn . detachChildren ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 9

125
Tree	tracer > n + STRING_CONSTANT
Code	tracer > n + STRING_CONSTANT
Distance : 6

126
Tree	getModule && n . getModule ( null ) && ^
Code	getModule && n . getModule ( null ) && ^
Distance : 8

127
Tree	getModule . isOn ( null ) > NUMBER_CONSTANT
Code	getModule . isOn ( null ) > NUMBER_CONSTANT
Distance : 7

128
Tree	tracer < String == NUMBER_CONSTANT
Code	tracer < String == NUMBER_CONSTANT
Distance : 6

129
Tree	tracer . getModule ( externs . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	tracer . getModule ( externs . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 11

130
Tree	tracer && externs . hasErrors ( null ) && ^
Code	tracer && externs . hasErrors ( null ) && ^
Distance : 8

131
Tree	null != this . sia . getModule () == NUMBER_CONSTANT
Code	null != this . sia . getModule () == NUMBER_CONSTANT
Distance : 8

132
Tree	isOn . getModule ( null ) > NUMBER_CONSTANT
Code	isOn . getModule ( null ) > NUMBER_CONSTANT
Distance : 7

133
Tree	getModule > moduleGraph + STRING_CONSTANT
Code	getModule > moduleGraph + STRING_CONSTANT
Distance : 6

134
Tree	getModule && externs . getJSDocInfo ( null ) && ^
Code	getModule && externs . getJSDocInfo ( null ) && ^
Distance : 8

135
Tree	tracer . detachChildren ( null ) < ^
Code	tracer . detachChildren ( null ) < ^
Distance : 7

136
Tree	null != this . tracker . detachChildren () == NUMBER_CONSTANT
Code	null != this . tracker . detachChildren () == NUMBER_CONSTANT
Distance : 8

137
Tree	tracer / n == NUMBER_CONSTANT
Code	tracer / n == NUMBER_CONSTANT
Distance : 6

138
Tree	tracer . getModule ( null ) < >=
Code	tracer . getModule ( null ) < >=
Distance : 7

139
Tree	getModule && options.processCommonJSModules . hasErrors ( null ) && ^
Code	getModule && options.processCommonJSModules . hasErrors ( null ) && ^
Distance : 8

140
Tree	tracer / JSDocInfo == NUMBER_CONSTANT
Code	tracer / JSDocInfo == NUMBER_CONSTANT
Distance : 6

141
Tree	getModule > hasErrors + STRING_CONSTANT
Code	getModule > hasErrors + STRING_CONSTANT
Distance : 6

142
Tree	getModule / JSDocInfo == NUMBER_CONSTANT
Code	getModule / JSDocInfo == NUMBER_CONSTANT
Distance : 6

143
Tree	getModule && JSDocInfo . hasErrors ( isOn . class ) && ^
Code	getModule && JSDocInfo . hasErrors ( isOn . class ) && ^
Distance : 10

144
Tree	getModule && n . hasErrors ( null )
Code	getModule && n . hasErrors ( null )
Distance : 7

145
Tree	isOn . detachChildren ( null ) < ^
Code	isOn . detachChildren ( null ) < ^
Distance : 7

146
Tree	this . isOn . getModule () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . isOn . getModule () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

147
Tree	this . tracker . detachChildren () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . tracker . detachChildren () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

148
Tree	tracer . getModule ( null ) > NUMBER_CONSTANT
Code	tracer . getModule ( null ) > NUMBER_CONSTANT
Distance : 7

149
Tree	getModule && n . getModule ( null )
Code	getModule && n . getModule ( null )
Distance : 7

150
Tree	getModule . detachChildren ( null ) < >=
Code	getModule . detachChildren ( null ) < >=
Distance : 7

151
Tree	getModule . getModule ( JSDocInfo . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	getModule . getModule ( JSDocInfo . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 11

152
Tree	this . getModule . getModule () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . getModule . getModule () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

153
Tree	isOn > tracker + STRING_CONSTANT
Code	isOn > tracker + STRING_CONSTANT
Distance : 6

154
Tree	getModule && n . getJSDocInfo ( null )
Code	getModule && n . getJSDocInfo ( null )
Distance : 7

155
Tree	tracer . getModule ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	tracer . getModule ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 9

156
Tree	getModule && n . isOn ( null )
Code	getModule && n . isOn ( null )
Distance : 7

157
Tree	tracer . detachChildren ( n . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	tracer . detachChildren ( n . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 11

158
Tree	null != this . sia . detachChildren () == NUMBER_CONSTANT
Code	null != this . sia . detachChildren () == NUMBER_CONSTANT
Distance : 8

159
Tree	getModule . detachChildren ( null ) < ^
Code	getModule . detachChildren ( null ) < ^
Distance : 7

160
Tree	tracer && n . hasErrors ( null )
Code	tracer && n . hasErrors ( null )
Distance : 7

161
Tree	null != hasErrors . detachChildren ( getAstRoot . class )
Code	null != hasErrors . detachChildren ( getAstRoot . class )
Distance : 9

162
Tree	this . tracer . detachChildren () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . tracer . detachChildren () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

163
Tree	getModule . detachChildren ( n . class ) > NUMBER_CONSTANT
Code	getModule . detachChildren ( n . class ) > NUMBER_CONSTANT
Distance : 9

164
Tree	null != hasErrors . isOn ( externs . class )
Code	null != hasErrors . isOn ( externs . class )
Distance : 9

165
Tree	getModule && n . JSDocInfo ( null )
Code	getModule && n . JSDocInfo ( null )
Distance : 7

166
Tree	null != hasErrors . detachChildren ( options.processCommonJSModules . class )
Code	null != hasErrors . detachChildren ( options.processCommonJSModules . class )
Distance : 9

167
Tree	getModule . getModule ( null ) < >=
Code	getModule . getModule ( null ) < >=
Distance : 7

168
Tree	getModule . detachChildren ( externs . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	getModule . detachChildren ( externs . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 11

169
Tree	getModule . getModule ( n . class ) > NUMBER_CONSTANT
Code	getModule . getModule ( n . class ) > NUMBER_CONSTANT
Distance : 9

170
Tree	null != this . sia . isOn () == NUMBER_CONSTANT
Code	null != this . sia . isOn () == NUMBER_CONSTANT
Distance : 8

171
Tree	tracer && n . getModule ( null )
Code	tracer && n . getModule ( null )
Distance : 7

172
Tree	getModule / options.processCommonJSModules == NUMBER_CONSTANT
Code	getModule / options.processCommonJSModules == NUMBER_CONSTANT
Distance : 6

173
Tree	getModule && options.processCommonJSModules . getModule ( null )
Code	getModule && options.processCommonJSModules . getModule ( null )
Distance : 7

174
Tree	null != this . hasErrors . getProvides () == NUMBER_CONSTANT
Code	null != this . hasErrors . getProvides () == NUMBER_CONSTANT
Distance : 8

175
Tree	getModule . detachChildren ( JSDocInfo . class ) > NUMBER_CONSTANT
Code	getModule . detachChildren ( JSDocInfo . class ) > NUMBER_CONSTANT
Distance : 9

176
Tree	getModule && n . hasErrors ( null ) && ^
Code	getModule && n . hasErrors ( null ) && ^
Distance : 8

177
Tree	getModule . detachChildren ( options.processCommonJSModules . class ) > NUMBER_CONSTANT
Code	getModule . detachChildren ( options.processCommonJSModules . class ) > NUMBER_CONSTANT
Distance : 9

178
Tree	getModule . getModule ( externs . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	getModule . getModule ( externs . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 11

179
Tree	this . tracer . getModule () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . tracer . getModule () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

180
Tree	getModule && n . options.transformAMDToCJSModules ( null )
Code	getModule && n . options.transformAMDToCJSModules ( null )
Distance : 7

181
Tree	tracer . getModule ( externs . class ) > NUMBER_CONSTANT
Code	tracer . getModule ( externs . class ) > NUMBER_CONSTANT
Distance : 9

182
Tree	getModule . getModule ( n . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	getModule . getModule ( n . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 11

183
Tree	tracer . detachChildren ( externs . class ) > NUMBER_CONSTANT
Code	tracer . detachChildren ( externs . class ) > NUMBER_CONSTANT
Distance : 9

184
Tree	getModule . getModule ( JSDocInfo . class ) > NUMBER_CONSTANT
Code	getModule . getModule ( JSDocInfo . class ) > NUMBER_CONSTANT
Distance : 9

185
Tree	getModule . detachChildren ( n . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	getModule . detachChildren ( n . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 11

186
Tree	tracer . detachChildren ( n . class ) > NUMBER_CONSTANT
Code	tracer . detachChildren ( n . class ) > NUMBER_CONSTANT
Distance : 9

187
Tree	getModule && externs . hasErrors ( null ) && ^
Code	getModule && externs . hasErrors ( null ) && ^
Distance : 8

188
Tree	getModule && JSDocInfo . hasErrors ( null ) && ^
Code	getModule && JSDocInfo . hasErrors ( null ) && ^
Distance : 8

189
Tree	tracer / options.processCommonJSModules == NUMBER_CONSTANT
Code	tracer / options.processCommonJSModules == NUMBER_CONSTANT
Distance : 6

190
Tree	getModule && externs . getModule ( null )
Code	getModule && externs . getModule ( null )
Distance : 7

191
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT -
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT -
Distance : 6

192
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT [
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT [
Distance : 6

193
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT f
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT f
Distance : 6

194
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT Override
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT Override
Distance : 6

195
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT MathRuntimeException
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT MathRuntimeException
Distance : 6

196
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT mock
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT mock
Distance : 6

197
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT array
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT array
Distance : 6

198
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT class
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT class
Distance : 6

199
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT notifyListeners
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT notifyListeners
Distance : 6

========================================================================


========================================================================
Example Number: 28
Parent Code is: 
{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ ( new NodeTraversal ( compiler , this ) ) . traverseRoots ( externs , root ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (36 (214{val=(}) (14 (304{val=new}) (43 (801{val=NodeTraversal})) (214{val=(}) (800{val=compiler}) (234{val=,}) (315{val=this}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=traverse}) (214{val=(}) (800{val=root}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (36 (214{val=(}) (14 (304{val=new}) (43 (801{val=NodeTraversal})) (214{val=(}) (800{val=compiler}) (234{val=,}) (315{val=this}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=traverseRoots}) (214{val=(}) (800{val=externs}) (234{val=,}) (800{val=root}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/30/parent/src_com_google_javascript_jscomp_FlowSensitiveInlineVariables.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . root ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . root ( root ) ; }
Distance : 6

1
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Distance : 6

2
Tree	{ ( new NodeTraversal ( compiler , root , compiler , false ) ) . process ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , root , compiler , false ) ) . process ( root ) ; }
Distance : 8

3
Tree	{ ( new NodeTraversal ( compiler , root , NUMBER_CONSTANT ) ) . process ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , root , NUMBER_CONSTANT ) ) . process ( root ) ; }
Distance : 6

4
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , externs ) ) . process ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , externs ) ) . process ( externs ) ; }
Distance : 5

5
Tree	{ NodeTraversal . traverse ( compiler . traverse ( compiler ) , null ) ; }
Code	{ NodeTraversal . traverse ( compiler . traverse ( compiler ) , null ) ; }
Distance : 11

6
Tree	{ new NodeTraversal ( compiler , this , compiler ) . process ( root ) . process ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , compiler ) . process ( root ) . process ( CHAR_CONS ) ; }
Distance : 10

7
Tree	{ ( new NodeTraversal ( compiler , compiler , NodeTraversal , false ) ) . process ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NodeTraversal , false ) ) . process ( root ) ; }
Distance : 8

8
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NodeTraversal ) ) . process ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NodeTraversal ) ) . process ( root ) ; }
Distance : 5

9
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . process ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . process ( externs ) ; }
Distance : 6

10
Tree	{ NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( true ) , false ) ; }
Code	{ NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( true ) , false ) ; }
Distance : 7

11
Tree	{ NodeTraversal . NodeTraversal ( compiler . externs ( null , false ) , null ) ; }
Code	{ NodeTraversal . NodeTraversal ( compiler . externs ( null , false ) , null ) ; }
Distance : 11

12
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . process ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . process ( externs ) ; }
Distance : 7

13
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . process ( NodeTraversal ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . process ( NodeTraversal ) ; }
Distance : 8

14
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Distance : 7

15
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . process ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . process ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Distance : 5

16
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . process ( process ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . process ( process ) ; }
Distance : 6

17
Tree	{ NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( false ) , false ) ; }
Code	{ NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( false ) , false ) ; }
Distance : 7

18
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . process ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . process ( root ) ; }
Distance : 6

19
Tree	{ NodeTraversal . NodeTraversal ( externs ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ NodeTraversal . NodeTraversal ( externs ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 12

20
Tree	{ ( new NodeTraversal ( compiler , compiler , root , false ) ) . process ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , root , false ) ) . process ( root ) ; }
Distance : 8

21
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . process ( root , root ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . process ( root , root ) , null ) ; }
Distance : 10

22
Tree	{ NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( root ) , false ) ; }
Code	{ NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( root ) , false ) ; }
Distance : 7

23
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NodeTraversal ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NodeTraversal ) ) . traverse ( root ) ; }
Distance : 5

24
Tree	{ NodeTraversal . externs ( externs ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ NodeTraversal . externs ( externs ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

25
Tree	{ new NodeTraversal ( compiler , this , root ) . process ( externs ) . process ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . process ( externs ) . process ( CHAR_CONS ) ; }
Distance : 9

26
Tree	{ NodeTraversal ( compiler , new NodeTraversal ( root , this , root ) . process ( false ) ) ; }
Code	{ NodeTraversal ( compiler , new NodeTraversal ( root , this , root ) . process ( false ) ) ; }
Distance : 10

27
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . process ( NUMBER_CONSTANT , ! ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . process ( NUMBER_CONSTANT , ! ) ; }
Distance : 5

28
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . process ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . process ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Distance : 5

29
Tree	{ new NodeTraversal ( compiler , this , externs ) . process ( root , root ) . process ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . process ( root , root ) . process ( CHAR_CONS ) ; }
Distance : 10

30
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . process ( root ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . process ( root ) , null ) ; }
Distance : 9

31
Tree	{ NodeTraversal . process ( compiler . compiler ( null , false ) , null ) ; }
Code	{ NodeTraversal . process ( compiler . compiler ( null , false ) , null ) ; }
Distance : 12

32
Tree	{ new NodeTraversal ( compiler , this , externs ) . process ( externs ) . process ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . process ( externs ) . process ( CHAR_CONS ) ; }
Distance : 9

33
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . process ( compiler ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . process ( compiler ) ; }
Distance : 7

34
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . process ( NUMBER_CONSTANT , externs , root , root ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . process ( NUMBER_CONSTANT , externs , root , root ) , null ) ; }
Distance : 13

35
Tree	{ NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( root ) , false ) ; }
Code	{ NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( root ) , false ) ; }
Distance : 7

36
Tree	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( false ) , null ) ; }
Code	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( false ) , null ) ; }
Distance : 9

37
Tree	{ NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( false ) , false ) ; }
Code	{ NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( false ) , false ) ; }
Distance : 7

38
Tree	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . process ( compiler ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . process ( compiler ) ; }
Distance : 9

39
Tree	{ NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( true ) , ! ) ; }
Code	{ NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( true ) , ! ) ; }
Distance : 7

40
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , externs ) . process ( root , root ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , externs ) . process ( root , root ) , null ) ; }
Distance : 10

41
Tree	{ NodeTraversal . process ( new NodeTraversal ( compiler , this , externs ) . process ( root ) , null ) ; }
Code	{ NodeTraversal . process ( new NodeTraversal ( compiler , this , externs ) . process ( root ) , null ) ; }
Distance : 9

42
Tree	{ NodeTraversal . traverse ( compiler . compiler ( null , false ) , null ) ; }
Code	{ NodeTraversal . traverse ( compiler . compiler ( null , false ) , null ) ; }
Distance : 12

43
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . process ( NodeTraversal ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . process ( NodeTraversal ) ; }
Distance : 6

44
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . process ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . process ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 14

45
Tree	{ NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( true ) , false ) ; }
Code	{ NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( true ) , false ) ; }
Distance : 7

46
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . process ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . process ( root ) ; }
Distance : 5

47
Tree	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( true ) , null ) ; }
Code	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( true ) , null ) ; }
Distance : 9

48
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . process ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . process ( root ) ; }
Distance : 5

49
Tree	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( externs ) , null ) ; }
Code	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( externs ) , null ) ; }
Distance : 8

50
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Distance : 7

51
Tree	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( externs ) , null ) ; }
Code	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( externs ) , null ) ; }
Distance : 8

52
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . process ( compiler ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . process ( compiler ) ; }
Distance : 7

53
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . process ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . process ( root ) ; }
Distance : 6

54
Tree	{ NodeTraversal . traverse ( compiler . NodeTraversal ( compiler ) , null ) ; }
Code	{ NodeTraversal . traverse ( compiler . NodeTraversal ( compiler ) , null ) ; }
Distance : 11

55
Tree	{ ( new NodeTraversal ( compiler , this , compiler ) ) . process ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , compiler ) ) . process ( root ) ; }
Distance : 5

56
Tree	{ NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( root ) , super ) ; }
Code	{ NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( root ) , super ) ; }
Distance : 7

57
Tree	{ NodeTraversal . traverse ( compiler ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ NodeTraversal . traverse ( compiler ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 12

58
Tree	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . process ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . process ( externs ) ; }
Distance : 8

59
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . process ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . process ( externs ) ; }
Distance : 5

60
Tree	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( NUMBER_CONSTANT , externs , root , root ) , null ) ; }
Code	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( NUMBER_CONSTANT , externs , root , root ) , null ) ; }
Distance : 13

61
Tree	{ ( new NodeTraversal ( compiler , root , NUMBER_CONSTANT ) ) . process ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , root , NUMBER_CONSTANT ) ) . process ( externs ) ; }
Distance : 6

62
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverse ( externs ) ; }
Distance : 5

63
Tree	{ new NodeTraversal ( compiler , this , root ) . process ( root , root ) . process ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . process ( root , root ) . process ( CHAR_CONS ) ; }
Distance : 10

64
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . process ( compiler ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . process ( compiler ) ; }
Distance : 6

65
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , externs ) . process ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , externs ) . process ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 14

66
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . process ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . process ( externs ) ; }
Distance : 5

67
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . process ( NUMBER_CONSTANT , false ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . process ( NUMBER_CONSTANT , false ) ; }
Distance : 5

68
Tree	{ NodeTraversal ( compiler , new Node ( root , this , root ) . process ( false ) ) ; }
Code	{ NodeTraversal ( compiler , new Node ( root , this , root ) . process ( false ) ) ; }
Distance : 11

69
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , externs ) . process ( root ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , externs ) . process ( root ) , null ) ; }
Distance : 9

70
Tree	{ NodeTraversal . traverse ( compiler . compiler ( compiler ) , null ) ; }
Code	{ NodeTraversal . traverse ( compiler . compiler ( compiler ) , null ) ; }
Distance : 11

71
Tree	{ new NodeTraversal ( compiler , this , root ) . process ( externs , root ) . process ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . process ( externs , root ) . process ( CHAR_CONS ) ; }
Distance : 9

72
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . process ( Node ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . process ( Node ) ; }
Distance : 7

73
Tree	{ NodeTraversal . traverse ( NodeTraversal ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ NodeTraversal . traverse ( NodeTraversal ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 12

74
Tree	{ NodeTraversal . NodeTraversal ( compiler . process ( null , false ) , null ) ; }
Code	{ NodeTraversal . NodeTraversal ( compiler . process ( null , false ) , null ) ; }
Distance : 11

75
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . process ( process ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . process ( process ) ; }
Distance : 8

76
Tree	{ NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( root ) , super ) ; }
Code	{ NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( root ) , super ) ; }
Distance : 7

77
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . process ( externs ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . process ( externs ) ; }
Distance : 5

78
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . process ( process ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . process ( process ) ; }
Distance : 6

79
Tree	{ NodeTraversal . process ( compiler . compiler ( compiler ) , null ) ; }
Code	{ NodeTraversal . process ( compiler . compiler ( compiler ) , null ) ; }
Distance : 11

80
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . process ( Node ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . process ( Node ) ; }
Distance : 6

81
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . process ( process ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . process ( process ) ; }
Distance : 6

82
Tree	{ ( new NodeTraversal ( compiler , this , compiler ) ) . process ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this , compiler ) ) . process ( externs ) ; }
Distance : 5

83
Tree	{ NodeTraversal . process ( new NodeTraversal ( compiler , this , root ) . process ( root ) , null ) ; }
Code	{ NodeTraversal . process ( new NodeTraversal ( compiler , this , root ) . process ( root ) , null ) ; }
Distance : 9

84
Tree	{ NodeTraversal . traverse ( compiler . NodeTraversal ( null , false ) , null ) ; }
Code	{ NodeTraversal . traverse ( compiler . NodeTraversal ( null , false ) , null ) ; }
Distance : 12

85
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . process ( NodeTraversal ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . process ( NodeTraversal ) ; }
Distance : 7

86
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . process ( externs , root ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . process ( externs , root ) , null ) ; }
Distance : 9

87
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . process ( Node ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . process ( Node ) ; }
Distance : 8

88
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , externs ) . process ( NUMBER_CONSTANT , externs , root , root ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , externs ) . process ( NUMBER_CONSTANT , externs , root , root ) , null ) ; }
Distance : 13

89
Tree	{ NodeTraversal . process ( new NodeTraversal ( compiler , this , externs ) . process ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ NodeTraversal . process ( new NodeTraversal ( compiler , this , externs ) . process ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 14

90
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . process ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . process ( externs ) ; }
Distance : 6

91
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . process ( root ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . process ( root ) ; }
Distance : 5

92
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . process ( false ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . process ( false ) , null ) ; }
Distance : 9

93
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Distance : 5

94
Tree	{ NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( externs ) , false ) ; }
Code	{ NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( externs ) , false ) ; }
Distance : 6

95
Tree	{ NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( process ) , false ) ; }
Code	{ NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( process ) , false ) ; }
Distance : 7

96
Tree	{ NodeTraversal . NodeTraversal ( compiler . traverse ( null , false ) , null ) ; }
Code	{ NodeTraversal . NodeTraversal ( compiler . traverse ( null , false ) , null ) ; }
Distance : 11

97
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverse ( root ) ; }
Distance : 5

98
Tree	{ NodeTraversal . traverse ( externs ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ NodeTraversal . traverse ( externs ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

99
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NodeTraversal ) ) . process ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NodeTraversal ) ) . process ( externs ) ; }
Distance : 5

100
Tree	{ NodeTraversal . process ( NodeTraversal ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ NodeTraversal . process ( NodeTraversal ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 12

101
Tree	{ NodeTraversal . process ( new NodeTraversal ( compiler , this , root ) . process ( false ) , null ) ; }
Code	{ NodeTraversal . process ( new NodeTraversal ( compiler , this , root ) . process ( false ) , null ) ; }
Distance : 9

102
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . process ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . process ( root ) ; }
Distance : 7

103
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . process ( process ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . process ( process ) ; }
Distance : 7

104
Tree	{ NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( false ) , CHAR_CONS ) ; }
Code	{ NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( false ) , CHAR_CONS ) ; }
Distance : 7

105
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , externs ) . process ( externs ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , externs ) . process ( externs ) , null ) ; }
Distance : 8

106
Tree	{ NodeTraversal ( compiler , new NodeTraversal ( root , this , externs ) . process ( false ) ) ; }
Code	{ NodeTraversal ( compiler , new NodeTraversal ( root , this , externs ) . process ( false ) ) ; }
Distance : 10

107
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , externs ) . process ( externs , root ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , externs ) . process ( externs , root ) , null ) ; }
Distance : 9

108
Tree	{ NodeTraversal . process ( new NodeTraversal ( compiler , this , root ) . process ( root , root ) , null ) ; }
Code	{ NodeTraversal . process ( new NodeTraversal ( compiler , this , root ) . process ( root , root ) , null ) ; }
Distance : 10

109
Tree	{ new NodeTraversal ( compiler , this , compiler ) . process ( externs , root ) . process ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , compiler ) . process ( externs , root ) . process ( CHAR_CONS ) ; }
Distance : 9

110
Tree	{ NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( root ) , ! ) ; }
Code	{ NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( root ) , ! ) ; }
Distance : 7

111
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , externs ) . process ( false ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , externs ) . process ( false ) , null ) ; }
Distance : 9

112
Tree	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( root , root ) , null ) ; }
Code	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( root , root ) , null ) ; }
Distance : 10

113
Tree	{ NodeTraversal . process ( new NodeTraversal ( compiler , this , externs ) . process ( false ) , null ) ; }
Code	{ NodeTraversal . process ( new NodeTraversal ( compiler , this , externs ) . process ( false ) , null ) ; }
Distance : 9

114
Tree	{ NodeTraversal . NodeTraversal ( compiler . externs ( compiler ) , null ) ; }
Code	{ NodeTraversal . NodeTraversal ( compiler . externs ( compiler ) , null ) ; }
Distance : 10

115
Tree	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( NUMBER_CONSTANT , externs , root , root ) , null ) ; }
Code	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( NUMBER_CONSTANT , externs , root , root ) , null ) ; }
Distance : 13

116
Tree	{ NodeTraversal . NodeTraversal ( compiler . compiler ( null , false ) , null ) ; }
Code	{ NodeTraversal . NodeTraversal ( compiler . compiler ( null , false ) , null ) ; }
Distance : 11

117
Tree	{ NodeTraversal ( compiler , new Node ( root , this , externs ) . process ( false ) ) ; }
Code	{ NodeTraversal ( compiler , new Node ( root , this , externs ) . process ( false ) ) ; }
Distance : 11

118
Tree	{ NodeTraversal ( compiler , new Node ( root , this , root ) . process ( true ) ) ; }
Code	{ NodeTraversal ( compiler , new Node ( root , this , root ) . process ( true ) ) ; }
Distance : 11

119
Tree	{ NodeTraversal . process ( externs ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ NodeTraversal . process ( externs ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

120
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . process ( compiler ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . process ( compiler ) ; }
Distance : 8

121
Tree	{ NodeTraversal . NodeTraversal ( compiler . process ( compiler ) , null ) ; }
Code	{ NodeTraversal . NodeTraversal ( compiler . process ( compiler ) , null ) ; }
Distance : 10

122
Tree	{ NodeTraversal . traverse ( process ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ NodeTraversal . traverse ( process ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

123
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , externs ) ) . process ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , externs ) ) . process ( root ) ; }
Distance : 5

124
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . traverse ( root ) ; }
Distance : 6

125
Tree	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( externs , root ) , null ) ; }
Code	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( externs , root ) , null ) ; }
Distance : 9

126
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Distance : 6

127
Tree	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( root ) , null ) ; }
Code	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( root ) , null ) ; }
Distance : 9

128
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , compiler ) ) . process ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , compiler ) ) . process ( root ) ; }
Distance : 5

129
Tree	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( root , root ) , null ) ; }
Code	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( root , root ) , null ) ; }
Distance : 10

130
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . process ( externs ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . process ( externs ) , null ) ; }
Distance : 8

131
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . process ( true ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . process ( true ) , null ) ; }
Distance : 9

132
Tree	{ new NodeTraversal ( compiler , this , compiler ) . process ( root , root ) . process ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , compiler ) . process ( root , root ) . process ( CHAR_CONS ) ; }
Distance : 10

133
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . NodeTraversal ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . NodeTraversal ( root ) ; }
Distance : 6

134
Tree	{ NodeTraversal . process ( new NodeTraversal ( compiler , this , externs ) . process ( root , root ) , null ) ; }
Code	{ NodeTraversal . process ( new NodeTraversal ( compiler , this , externs ) . process ( root , root ) , null ) ; }
Distance : 10

135
Tree	{ new NodeTraversal ( compiler , this , compiler ) . process ( externs ) . process ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , compiler ) . process ( externs ) . process ( CHAR_CONS ) ; }
Distance : 9

136
Tree	{ NodeTraversal . traverse ( compiler . externs ( compiler ) , null ) ; }
Code	{ NodeTraversal . traverse ( compiler . externs ( compiler ) , null ) ; }
Distance : 11

137
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . NodeTraversal ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . NodeTraversal ( root ) ; }
Distance : 6

138
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . process ( externs ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . process ( externs ) ; }
Distance : 5

139
Tree	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( root ) , null ) ; }
Code	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( root ) , null ) ; }
Distance : 9

140
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . process ( root ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . process ( root ) ; }
Distance : 5

141
Tree	{ NodeTraversal ( compiler , new NodeTraversal ( root , this , root ) . process ( true ) ) ; }
Code	{ NodeTraversal ( compiler , new NodeTraversal ( root , this , root ) . process ( true ) ) ; }
Distance : 10

142
Tree	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 14

143
Tree	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 14

144
Tree	{ new NodeTraversal ( compiler , this , root ) . process ( root ) . process ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . process ( root ) . process ( CHAR_CONS ) ; }
Distance : 10

145
Tree	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverse ( externs ) ; }
Distance : 8

146
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . process ( NUMBER_CONSTANT , / ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . process ( NUMBER_CONSTANT , / ) ; }
Distance : 5

147
Tree	{ NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( root ) , ! ) ; }
Code	{ NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( root ) , ! ) ; }
Distance : 7

148
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . process ( NUMBER_CONSTANT , ! ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . process ( NUMBER_CONSTANT , ! ) ; }
Distance : 5

149
Tree	{ NodeTraversal ( compiler , new compiler ( root , this , root ) . process ( false ) ) ; }
Code	{ NodeTraversal ( compiler , new compiler ( root , this , root ) . process ( false ) ) ; }
Distance : 11

150
Tree	{ NodeTraversal ( compiler , new compiler ( root , this , externs ) . process ( false ) ) ; }
Code	{ NodeTraversal ( compiler , new compiler ( root , this , externs ) . process ( false ) ) ; }
Distance : 11

151
Tree	{ NodeTraversal . NodeTraversal ( compiler . traverse ( compiler ) , null ) ; }
Code	{ NodeTraversal . NodeTraversal ( compiler . traverse ( compiler ) , null ) ; }
Distance : 10

152
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NodeTraversal ) ) . process ( compiler ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NodeTraversal ) ) . process ( compiler ) ; }
Distance : 6

153
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , externs ) . process ( true ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , externs ) . process ( true ) , null ) ; }
Distance : 9

154
Tree	{ NodeTraversal . process ( new NodeTraversal ( compiler , this , root ) . process ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ NodeTraversal . process ( new NodeTraversal ( compiler , this , root ) . process ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 14

155
Tree	{ NodeTraversal . NodeTraversal ( compiler . compiler ( compiler ) , null ) ; }
Code	{ NodeTraversal . NodeTraversal ( compiler . compiler ( compiler ) , null ) ; }
Distance : 10

156
Tree	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . process ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . process ( root ) ; }
Distance : 8

157
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . compiler ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . compiler ( root ) ; }
Distance : 7

158
Tree	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . process ( process ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . process ( process ) ; }
Distance : 9

159
Tree	{ ( new NodeTraversal ( compiler , this , compiler ) ) . process ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Code	{ ( new NodeTraversal ( compiler , this , compiler ) ) . process ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Distance : 5

160
Tree	{ NodeTraversal ( new NodeTraversal ( compiler , this , compiler ) . process ( false ) , false ) ; }
Code	{ NodeTraversal ( new NodeTraversal ( compiler , this , compiler ) . process ( false ) , false ) ; }
Distance : 7

161
Tree	{ new NodeTraversal ( compiler , this , root ) . process ( process , root ) . process ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . process ( process , root ) . process ( CHAR_CONS ) ; }
Distance : 10

162
Tree	{ new NodeTraversal ( compiler , this , externs ) . process ( externs , root ) . process ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . process ( externs , root ) . process ( CHAR_CONS ) ; }
Distance : 9

163
Tree	{ new NodeTraversal ( compiler , this , externs ) . process ( root ) . process ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . process ( root ) . process ( CHAR_CONS ) ; }
Distance : 10

164
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . process ( process ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . process ( process ) ; }
Distance : 7

165
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , process ) ) . process ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , process ) ) . process ( externs ) ; }
Distance : 5

166
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( root ) ; }
Distance : 5

167
Tree	{ new NodeTraversal ( compiler , this , process ) . process ( root , root ) . process ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , process ) . process ( root , root ) . process ( CHAR_CONS ) ; }
Distance : 10

168
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . compiler ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . compiler ( root ) ; }
Distance : 6

169
Tree	{ NodeTraversal . NodeTraversal ( NodeTraversal ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ NodeTraversal . NodeTraversal ( NodeTraversal ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 12

170
Tree	{ new NodeTraversal ( compiler , this , NodeTraversal ) . process ( root , root ) . process ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , NodeTraversal ) . process ( root , root ) . process ( CHAR_CONS ) ; }
Distance : 10

171
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , process ) ) . process ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , process ) ) . process ( root ) ; }
Distance : 5

172
Tree	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( false ) , null ) ; }
Code	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( false ) , null ) ; }
Distance : 9

173
Tree	{ NodeTraversal . traverse ( compiler . process ( null , false ) , null ) ; }
Code	{ NodeTraversal . traverse ( compiler . process ( null , false ) , null ) ; }
Distance : 12

174
Tree	{ NodeTraversal . traverse ( compiler . traverse ( null , false ) , null ) ; }
Code	{ NodeTraversal . traverse ( compiler . traverse ( null , false ) , null ) ; }
Distance : 12

175
Tree	{ NodeTraversal . traverse ( compiler . externs ( null , false ) , null ) ; }
Code	{ NodeTraversal . traverse ( compiler . externs ( null , false ) , null ) ; }
Distance : 12

176
Tree	{ new NodeTraversal ( compiler , this , root ) . process ( root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . process ( root ) . traverse ( CHAR_CONS ) ; }
Distance : 10

177
Tree	{ NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( true ) , ! ) ; }
Code	{ NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( true ) , ! ) ; }
Distance : 7

178
Tree	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( true ) , null ) ; }
Code	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( true ) , null ) ; }
Distance : 9

179
Tree	{ NodeTraversal ( new NodeTraversal ( compiler , this , compiler ) . process ( root ) , false ) ; }
Code	{ NodeTraversal ( new NodeTraversal ( compiler , this , compiler ) . process ( root ) , false ) ; }
Distance : 7

180
Tree	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverse ( root ) ; }
Distance : 8

181
Tree	{ NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( false ) , ! ) ; }
Code	{ NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( false ) , ! ) ; }
Distance : 7

182
Tree	{ NodeTraversal . traverse ( traverse ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ NodeTraversal . traverse ( traverse ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

183
Tree	{ NodeTraversal . traverse ( compiler . process ( compiler ) , null ) ; }
Code	{ NodeTraversal . traverse ( compiler . process ( compiler ) , null ) ; }
Distance : 11

184
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; }
Distance : 5

185
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NodeTraversal ) ) . process ( process ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NodeTraversal ) ) . process ( process ) ; }
Distance : 6

186
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . NodeTraversal ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . NodeTraversal ( root ) ; }
Distance : 7

187
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . process ( NUMBER_CONSTANT , false ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . process ( NUMBER_CONSTANT , false ) ; }
Distance : 5

188
Tree	{ NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( externs ) , false ) ; }
Code	{ NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( externs ) , false ) ; }
Distance : 6

189
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . traverse ( externs ) ; }
Distance : 6

190
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . process ( NUMBER_CONSTANT , / ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . process ( NUMBER_CONSTANT , / ) ; }
Distance : 5

191
Tree	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( externs , root ) , null ) ; }
Code	{ NodeTraversal . NodeTraversal ( new NodeTraversal ( compiler , this , externs ) . process ( externs , root ) , null ) ; }
Distance : 9

192
Tree	{ NodeTraversal ( compiler , new NodeTraversal ( root , this , externs ) . process ( true ) ) ; }
Code	{ NodeTraversal ( compiler , new NodeTraversal ( root , this , externs ) . process ( true ) ) ; }
Distance : 10

193
Tree	{ NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( false ) , ! ) ; }
Code	{ NodeTraversal ( new NodeTraversal ( compiler , this , root ) . process ( false ) , ! ) ; }
Distance : 7

194
Tree	{ ( new NodeTraversal ( compiler , root , compiler , false ) ) . process ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , root , compiler , false ) ) . process ( externs ) ; }
Distance : 8

195
Tree	{ new NodeTraversal ( compiler , this , root ) . process ( process ) . process ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . process ( process ) . process ( CHAR_CONS ) ; }
Distance : 10

196
Tree	{ new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) . process ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) . process ( CHAR_CONS ) ; }
Distance : 10

197
Tree	{ NodeTraversal ( compiler , new Node ( root , this , externs ) . process ( true ) ) ; }
Code	{ NodeTraversal ( compiler , new Node ( root , this , externs ) . process ( true ) ) ; }
Distance : 11

198
Tree	{ new NodeTraversal ( compiler , this , process ) . process ( root ) . process ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , process ) . process ( root ) . process ( CHAR_CONS ) ; }
Distance : 10

199
Tree	{ new NodeTraversal ( compiler , this , NodeTraversal ) . process ( root ) . process ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , NodeTraversal ) . process ( root ) . process ( CHAR_CONS ) ; }
Distance : 10

========================================================================


========================================================================
Example Number: 29
Parent Code is: 
Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
-------------------------------------------------------------------------------
Child code is: 
Node catchBody = blockUnchecked ( catchNode ) . copyInformationFrom ( catchNode ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=catchBody}) (204{val==}) (32 (32 (802{val=block}) (214{val=(}) (800{val=catchNode}) (215{val=)})) (235{val=.}) (802{val=copyInformationFrom}) (214{val=(}) (800{val=catchNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=catchBody}) (204{val==}) (32 (32 (802{val=blockUnchecked}) (214{val=(}) (800{val=catchNode}) (215{val=)})) (235{val=.}) (802{val=copyInformationFrom}) (214{val=(}) (800{val=catchNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/27/parent/src_com_google_javascript_rhino_IR.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Node catchBody = block ( catchBody , catchBody , false ) ;
Code	Node catchBody = block ( catchBody , catchBody , false ) ;
Distance : 7

1
Tree	Node catchBody = block ( catchBody , tryBody ) ;
Code	Node catchBody = block ( catchBody , tryBody ) ;
Distance : 7

2
Tree	Node catchBody = block ( catchBody , this . catchBody ) ;
Code	Node catchBody = block ( catchBody , this . catchBody ) ;
Distance : 7

3
Tree	checkState catchBody = block ( tryBody , false ) ;
Code	checkState catchBody = block ( tryBody , false ) ;
Distance : 8

4
Tree	Node catchBody = block ( tryBody , catchBody ) ;
Code	Node catchBody = block ( tryBody , catchBody ) ;
Distance : 7

5
Tree	Node catchBody = block ( catchBody , this . isCatch ) ;
Code	Node catchBody = block ( catchBody , this . isCatch ) ;
Distance : 7

6
Tree	Node catchBody = block ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody ) ;
Distance : 7

7
Tree	Node catchBody = block ( catchBody , isCatch ) ;
Code	Node catchBody = block ( catchBody , isCatch ) ;
Distance : 7

8
Tree	Node catchBody = block ( catchBody , this . tryBody ) ;
Code	Node catchBody = block ( catchBody , this . tryBody ) ;
Distance : 7

9
Tree	Node catchBody = block ( catchBody ( catchBody ) ) ;
Code	Node catchBody = block ( catchBody ( catchBody ) ) ;
Distance : 7

10
Tree	Node catchBody = block ( tryBody , copyInformationFrom ) ;
Code	Node catchBody = block ( tryBody , copyInformationFrom ) ;
Distance : 6

11
Tree	Node catchBody = this . catchBody . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom ( catchBody ) ;
Distance : 5

12
Tree	Node catchBody = this . catchBody . tryBody ( isCatch ) ;
Code	Node catchBody = this . catchBody . tryBody ( isCatch ) ;
Distance : 6

13
Tree	Node catchBody = this . catchBody . catchBody ( catchBody ) ;
Code	Node catchBody = this . catchBody . catchBody ( catchBody ) ;
Distance : 6

14
Tree	Node catchBody = this . catchBody . tryBody ( tryBody ) ;
Code	Node catchBody = this . catchBody . tryBody ( tryBody ) ;
Distance : 6

15
Tree	Node catchBody = this . catchBody . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom ( catchBody ) ;
Distance : 5

16
Tree	Node catchBody = this . catchBody . copyInformationFrom ( isCatch ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom ( isCatch ) ;
Distance : 5

17
Tree	Node catchBody = block . block ( catchBody , copyInformationFrom ) ;
Code	Node catchBody = block . block ( catchBody , copyInformationFrom ) ;
Distance : 8

18
Tree	Node catchBody = this . catchBody . copyInformationFrom ( tryBody ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom ( tryBody ) ;
Distance : 5

19
Tree	Node catchBody = block ( catchBody , catchNode , false ) ;
Code	Node catchBody = block ( catchBody , catchNode , false ) ;
Distance : 7

20
Tree	Node catchBody = block ( catchBody ) . catchBody ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . catchBody ( catchBody ) ;
Distance : 4

21
Tree	Node catchBody = block ( catchBody ) . tryBody ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . tryBody ( catchBody ) ;
Distance : 4

22
Tree	Node catchBody = new block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = new block () . copyInformationFrom ( catchBody ) ;
Distance : 5

23
Tree	Node catchBody = block . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block . copyInformationFrom ( catchBody ) ;
Distance : 5

24
Tree	Node catchBody = block ( tryBody , this . copyInformationFrom ) ;
Code	Node catchBody = block ( tryBody , this . copyInformationFrom ) ;
Distance : 6

25
Tree	Node catchBody = block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block () . copyInformationFrom ( catchBody ) ;
Distance : 5

26
Tree	Node catchBody = block ( catchBody , tryBody ) ;
Code	Node catchBody = block ( catchBody , tryBody ) ;
Distance : 7

27
Tree	Node catchBody = block ( catchBody , catchNode ) ;
Code	Node catchBody = block ( catchBody , catchNode ) ;
Distance : 6

28
Tree	Node catchBody = block . tryBody ( tryBody ) ;
Code	Node catchBody = block . tryBody ( tryBody ) ;
Distance : 6

29
Tree	Node catchBody = block ( catchBody , isCatch , false ) ;
Code	Node catchBody = block ( catchBody , isCatch , false ) ;
Distance : 7

30
Tree	checkState catchBody = block ( catchBody , catchBody , false ) ;
Code	checkState catchBody = block ( catchBody , catchBody , false ) ;
Distance : 8

31
Tree	Node catchBody = block ( tryBody , this . catchBody ) ;
Code	Node catchBody = block ( tryBody , this . catchBody ) ;
Distance : 7

32
Tree	Node catchBody = checkState . block () ;
Code	Node catchBody = checkState . block () ;
Distance : 8

33
Tree	checkState catchBody = block ( catchBody ) ;
Code	checkState catchBody = block ( catchBody ) ;
Distance : 8

34
Tree	Node catchBody = isBlock ( catchBody ) ;
Code	Node catchBody = isBlock ( catchBody ) ;
Distance : 7

35
Tree	Node catchBody = block ( copyInformationFrom ) ;
Code	Node catchBody = block ( copyInformationFrom ) ;
Distance : 6

36
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Distance : 5

37
Tree	Node copyInformationFrom = block . block () ;
Code	Node copyInformationFrom = block . block () ;
Distance : 9

38
Tree	Node catchBody = block ( catchBody ( tryBody ) ) ;
Code	Node catchBody = block ( catchBody ( tryBody ) ) ;
Distance : 7

39
Tree	Node catchBody = block ( catchBody ) . isCatch () ;
Code	Node catchBody = block ( catchBody ) . isCatch () ;
Distance : 6

40
Tree	Node catchBody = block ( catchBody , false ) ;
Code	Node catchBody = block ( catchBody , false ) ;
Distance : 7

41
Tree	Node catchBody = block . block () . isCatch ( isCatch ) ;
Code	Node catchBody = block . block () . isCatch ( isCatch ) ;
Distance : 6

42
Tree	checkState catchBody = block . block ( catchBody ) ;
Code	checkState catchBody = block . block ( catchBody ) ;
Distance : 7

43
Tree	Node catchBody = block . isCatch ( catchBody ) ;
Code	Node catchBody = block . isCatch ( catchBody ) ;
Distance : 6

44
Tree	Node catchBody = new block () . catchBody ( tryBody ) ;
Code	Node catchBody = new block () . catchBody ( tryBody ) ;
Distance : 6

45
Tree	Node catchBody = block . block () . tryBody ( isCatch ) ;
Code	Node catchBody = block . block () . tryBody ( isCatch ) ;
Distance : 6

46
Tree	Node catchBody = block ( catchBody , this . catchNode ) ;
Code	Node catchBody = block ( catchBody , this . catchNode ) ;
Distance : 6

47
Tree	checkState catchBody = block . isBlock () ;
Code	checkState catchBody = block . isBlock () ;
Distance : 9

48
Tree	Node catchBody = block . isBlock ( catchBody ) ;
Code	Node catchBody = block . isBlock ( catchBody ) ;
Distance : 6

49
Tree	Node catchBody = block ( tryBody ( tryBody ) ) ;
Code	Node catchBody = block ( tryBody ( tryBody ) ) ;
Distance : 7

50
Tree	Node catchBody = block ( catchBody , Preconditions ) ;
Code	Node catchBody = block ( catchBody , Preconditions ) ;
Distance : 7

51
Tree	Node catchBody = block ( catchBody , copyInformationFrom ) ;
Code	Node catchBody = block ( catchBody , copyInformationFrom ) ;
Distance : 6

52
Tree	Node catchBody = block ( copyInformationFrom , catchBody ) ;
Code	Node catchBody = block ( copyInformationFrom , catchBody ) ;
Distance : 6

53
Tree	Node catchBody = block . tryBody ( catchBody ) ;
Code	Node catchBody = block . tryBody ( catchBody ) ;
Distance : 6

54
Tree	Node catchBody = block . block () ;
Code	Node catchBody = block . block () ;
Distance : 8

55
Tree	Node catchBody = block () . tryBody ( catchBody ) ;
Code	Node catchBody = block () . tryBody ( catchBody ) ;
Distance : 6

56
Tree	Node catchBody = block . block ( tryBody , catchBody ) ;
Code	Node catchBody = block . block ( tryBody , catchBody ) ;
Distance : 8

57
Tree	Node catchBody = block . block () . tryBody ( tryBody ) ;
Code	Node catchBody = block . block () . tryBody ( tryBody ) ;
Distance : 6

58
Tree	Node catchBody = block ( tryBody ) ;
Code	Node catchBody = block ( tryBody ) ;
Distance : 7

59
Tree	Node catchBody = block . catchBody ( catchBody ) ;
Code	Node catchBody = block . catchBody ( catchBody ) ;
Distance : 6

60
Tree	Node catchBody = block . block ( copyInformationFrom ) ;
Code	Node catchBody = block . block ( copyInformationFrom ) ;
Distance : 6

61
Tree	Node catchBody = block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) ;
Distance : 7

62
Tree	Node catchBody = block . block ( catchBody ) ;
Code	Node catchBody = block . block ( catchBody ) ;
Distance : 6

63
Tree	Node catchBody = block ( tryBody ) . tryBody () ;
Code	Node catchBody = block ( tryBody ) . tryBody () ;
Distance : 6

64
Tree	Node catchBody = block ( tryBody , catchBody , false ) ;
Code	Node catchBody = block ( tryBody , catchBody , false ) ;
Distance : 7

65
Tree	Node catchBody = block . block ( tryBody , tryBody ) ;
Code	Node catchBody = block . block ( tryBody , tryBody ) ;
Distance : 8

66
Tree	Node catchBody = block . isBlock () ;
Code	Node catchBody = block . isBlock () ;
Distance : 8

67
Tree	Node catchBody = block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) ;
Distance : 6

68
Tree	Node catchBody = block ( tryBody , catchBody ) ;
Code	Node catchBody = block ( tryBody , catchBody ) ;
Distance : 7

69
Tree	Node catchBody = block () . catchBody ( tryBody ) ;
Code	Node catchBody = block () . catchBody ( tryBody ) ;
Distance : 6

70
Tree	Node catchBody = new block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = new block () . copyInformationFrom ( catchBody ) ;
Distance : 5

71
Tree	Node catchBody = block ( catchBody , Node , false ) ;
Code	Node catchBody = block ( catchBody , Node , false ) ;
Distance : 7

72
Tree	Node catchBody = block . block () . copyInformationFrom ( isCatch ) ;
Code	Node catchBody = block . block () . copyInformationFrom ( isCatch ) ;
Distance : 5

73
Tree	Node catchBody = block ( tryBody ) . copyInformationFrom () ;
Code	Node catchBody = block ( tryBody ) . copyInformationFrom () ;
Distance : 5

74
Tree	Node catchBody = block ( tryBody ( catchBody ) ) ;
Code	Node catchBody = block ( tryBody ( catchBody ) ) ;
Distance : 7

75
Tree	Node catchBody = block ( isCatch ( catchBody ) ) ;
Code	Node catchBody = block ( isCatch ( catchBody ) ) ;
Distance : 7

76
Tree	Node catchBody = block ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody ) ;
Distance : 7

77
Tree	Node catchBody = block ( catchBody ( copyInformationFrom ) ) ;
Code	Node catchBody = block ( catchBody ( copyInformationFrom ) ) ;
Distance : 6

78
Tree	checkState catchBody = block ( catchBody , this . catchBody ) ;
Code	checkState catchBody = block ( catchBody , this . catchBody ) ;
Distance : 8

79
Tree	Node catchBody = block ( catchBody , copyInformationFrom ) ;
Code	Node catchBody = block ( catchBody , copyInformationFrom ) ;
Distance : 6

80
Tree	Node catchBody = block . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block . copyInformationFrom ( catchBody ) ;
Distance : 5

81
Tree	Node catchBody = block . block () . copyInformationFrom ( tryBody ) ;
Code	Node catchBody = block . block () . copyInformationFrom ( tryBody ) ;
Distance : 5

82
Tree	Node catchBody = block . isBlock ( tryBody ) ;
Code	Node catchBody = block . isBlock ( tryBody ) ;
Distance : 6

83
Tree	Node catchBody = block . copyInformationFrom ( tryBody ) ;
Code	Node catchBody = block . copyInformationFrom ( tryBody ) ;
Distance : 5

84
Tree	Node catchBody = block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) ;
Distance : 6

85
Tree	Node tryBody = block . block ( catchBody ) ;
Code	Node tryBody = block . block ( catchBody ) ;
Distance : 7

86
Tree	Node catchBody = block . block ( isCatch ) ;
Code	Node catchBody = block . block ( isCatch ) ;
Distance : 6

87
Tree	Node catchBody = block ( catchBody , isCatch ) ;
Code	Node catchBody = block ( catchBody , isCatch ) ;
Distance : 7

88
Tree	Node catchBody = block . catchBody ( tryBody ) ;
Code	Node catchBody = block . catchBody ( tryBody ) ;
Distance : 6

89
Tree	Node catchBody = block . copyInformationFrom ( tryBody ) ;
Code	Node catchBody = block . copyInformationFrom ( tryBody ) ;
Distance : 5

90
Tree	Node isCatch = block . block () ;
Code	Node isCatch = block . block () ;
Distance : 9

91
Tree	Node catchBody = block ( catchBody , Preconditions , false ) ;
Code	Node catchBody = block ( catchBody , Preconditions , false ) ;
Distance : 7

92
Tree	Node catchBody = block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) ;
Distance : 7

93
Tree	Node catchBody = block ( tryBody , this . isCatch ) ;
Code	Node catchBody = block ( tryBody , this . isCatch ) ;
Distance : 7

94
Tree	Node catchBody = block . block () ;
Code	Node catchBody = block . block () ;
Distance : 8

95
Tree	Node catchBody = block . block ( catchBody , catchNode ) ;
Code	Node catchBody = block . block ( catchBody , catchNode ) ;
Distance : 7

96
Tree	Node catchBody = block ( tryBody ) . catchBody () ;
Code	Node catchBody = block ( tryBody ) . catchBody () ;
Distance : 6

97
Tree	Node catchBody = block ( isCatch ) ;
Code	Node catchBody = block ( isCatch ) ;
Distance : 7

98
Tree	Node catchBody = block ( isCatch ) ;
Code	Node catchBody = block ( isCatch ) ;
Distance : 7

99
Tree	Node catchBody = block ( catchBody , copyInformationFrom , false ) ;
Code	Node catchBody = block ( catchBody , copyInformationFrom , false ) ;
Distance : 6

100
Tree	Node catchBody = block ( tryBody , this . tryBody ) ;
Code	Node catchBody = block ( tryBody , this . tryBody ) ;
Distance : 7

101
Tree	Node catchBody = block . block ( catchNode ) ;
Code	Node catchBody = block . block ( catchNode ) ;
Distance : 5

102
Tree	Node catchBody = block ( copyInformationFrom ) ;
Code	Node catchBody = block ( copyInformationFrom ) ;
Distance : 6

103
Tree	Node catchBody = new block () . isCatch ( catchBody ) ;
Code	Node catchBody = new block () . isCatch ( catchBody ) ;
Distance : 6

104
Tree	Node tryBody = block ( catchBody ) ;
Code	Node tryBody = block ( catchBody ) ;
Distance : 8

105
Tree	checkState catchBody = block . block () ;
Code	checkState catchBody = block . block () ;
Distance : 9

106
Tree	Node catchBody = new block () . tryBody ( catchBody ) ;
Code	Node catchBody = new block () . tryBody ( catchBody ) ;
Distance : 6

107
Tree	Node catchBody = block ( tryBody ) ;
Code	Node catchBody = block ( tryBody ) ;
Distance : 7

108
Tree	checkState catchBody = block ( catchBody ) ;
Code	checkState catchBody = block ( catchBody ) ;
Distance : 8

109
Tree	Node catchBody = block () . catchBody ( catchBody ) ;
Code	Node catchBody = block () . catchBody ( catchBody ) ;
Distance : 6

110
Tree	Node catchBody = block ( Node ) ;
Code	Node catchBody = block ( Node ) ;
Distance : 7

111
Tree	Node tryBody = block ( catchBody ) ;
Code	Node tryBody = block ( catchBody ) ;
Distance : 8

112
Tree	Node catchBody = block ( copyInformationFrom , catchBody ) ;
Code	Node catchBody = block ( copyInformationFrom , catchBody ) ;
Distance : 6

113
Tree	Node catchBody = block ( copyInformationFrom , catchBody , false ) ;
Code	Node catchBody = block ( copyInformationFrom , catchBody , false ) ;
Distance : 7

114
Tree	Node catchBody = block . block () . isCatch ( tryBody ) ;
Code	Node catchBody = block . block () . isCatch ( tryBody ) ;
Distance : 6

115
Tree	Node catchBody = block ( tryBody ) . copyInformationFrom () ;
Code	Node catchBody = block ( tryBody ) . copyInformationFrom () ;
Distance : 5

116
Tree	Node catchBody = block ( catchBody , tryBody ) ;
Code	Node catchBody = block ( catchBody , tryBody ) ;
Distance : 7

117
Tree	Node catchBody = block ( tryBody ) . isCatch () ;
Code	Node catchBody = block ( tryBody ) . isCatch () ;
Distance : 6

118
Tree	Node catchBody = block . block () . copyInformationFrom ( isCatch ) ;
Code	Node catchBody = block . block () . copyInformationFrom ( isCatch ) ;
Distance : 5

119
Tree	checkState catchBody = block ( tryBody ) ;
Code	checkState catchBody = block ( tryBody ) ;
Distance : 8

120
Tree	Node catchBody = block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block () . copyInformationFrom ( catchBody ) ;
Distance : 5

121
Tree	Node catchBody = new block () . catchBody ( catchBody ) ;
Code	Node catchBody = new block () . catchBody ( catchBody ) ;
Distance : 6

122
Tree	Node catchBody = block . block ( tryBody ) ;
Code	Node catchBody = block . block ( tryBody ) ;
Distance : 6

123
Tree	Node tryBody = block . block () ;
Code	Node tryBody = block . block () ;
Distance : 9

124
Tree	Node catchBody = block . block ( catchBody , catchBody ) ;
Code	Node catchBody = block . block ( catchBody , catchBody ) ;
Distance : 8

125
Tree	Node catchBody = block ( tryBody , false ) ;
Code	Node catchBody = block ( tryBody , false ) ;
Distance : 7

126
Tree	Node catchBody = block ( catchBody , copyInformationFrom ) ;
Code	Node catchBody = block ( catchBody , copyInformationFrom ) ;
Distance : 6

127
Tree	Node catchBody = block ( catchBody , Node ) ;
Code	Node catchBody = block ( catchBody , Node ) ;
Distance : 7

128
Tree	Node catchBody = new block () . tryBody ( tryBody ) ;
Code	Node catchBody = new block () . tryBody ( tryBody ) ;
Distance : 6

129
Tree	Node catchBody = block ( catchBody ( isCatch ) ) ;
Code	Node catchBody = block ( catchBody ( isCatch ) ) ;
Distance : 7

130
Tree	Node catchBody = block . block () . copyInformationFrom ( tryBody ) ;
Code	Node catchBody = block . block () . copyInformationFrom ( tryBody ) ;
Distance : 5

131
Tree	Node catchBody = block . block () . catchBody ( tryBody ) ;
Code	Node catchBody = block . block () . catchBody ( tryBody ) ;
Distance : 6

132
Tree	Node catchBody = block . checkState ( catchBody ) ;
Code	Node catchBody = block . checkState ( catchBody ) ;
Distance : 6

133
Tree	Node catchBody = block () . tryBody ( tryBody ) ;
Code	Node catchBody = block () . tryBody ( tryBody ) ;
Distance : 6

134
Tree	Node catchBody = block . block ( tryBody , isCatch ) ;
Code	Node catchBody = block . block ( tryBody , isCatch ) ;
Distance : 8

135
Tree	Node catchBody = block . isBlock ( catchBody , isCatch ) ;
Code	Node catchBody = block . isBlock ( catchBody , isCatch ) ;
Distance : 8

136
Tree	Node catchBody = block . tryBody ( isCatch ) ;
Code	Node catchBody = block . tryBody ( isCatch ) ;
Distance : 6

137
Tree	Node catchBody = new block () . copyInformationFrom ( tryBody ) ;
Code	Node catchBody = new block () . copyInformationFrom ( tryBody ) ;
Distance : 5

138
Tree	Node catchBody = block ( catchNode , catchBody ) ;
Code	Node catchBody = block ( catchNode , catchBody ) ;
Distance : 6

139
Tree	Node catchBody = block . block () . catchBody ( isCatch ) ;
Code	Node catchBody = block . block () . catchBody ( isCatch ) ;
Distance : 6

140
Tree	Node catchBody = block . block ( catchBody , tryBody ) ;
Code	Node catchBody = block . block ( catchBody , tryBody ) ;
Distance : 8

141
Tree	checkState catchBody = block ( catchBody , catchBody ) ;
Code	checkState catchBody = block ( catchBody , catchBody ) ;
Distance : 8

142
Tree	Node catchBody = block ( copyInformationFrom ( catchBody ) ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchBody ) ) ;
Distance : 6

143
Tree	Node catchBody = block . checkState () ;
Code	Node catchBody = block . checkState () ;
Distance : 8

144
Tree	Node catchBody = block ( catchBody , Node ) ;
Code	Node catchBody = block ( catchBody , Node ) ;
Distance : 7

145
Tree	Node catchBody = block ( catchBody ( catchNode ) ) ;
Code	Node catchBody = block ( catchBody ( catchNode ) ) ;
Distance : 6

146
Tree	checkState catchBody = block ( catchBody , false ) ;
Code	checkState catchBody = block ( catchBody , false ) ;
Distance : 8

147
Tree	Node catchBody = block () . isCatch ( catchBody ) ;
Code	Node catchBody = block () . isCatch ( catchBody ) ;
Distance : 6

148
Tree	Node catchBody = block . block ( isCatch , isCatch ) ;
Code	Node catchBody = block . block ( isCatch , isCatch ) ;
Distance : 8

149
Tree	Node catchBody = block ( Node ) ;
Code	Node catchBody = block ( Node ) ;
Distance : 7

150
Tree	checkState catchBody = block ( tryBody ) ;
Code	checkState catchBody = block ( tryBody ) ;
Distance : 8

151
Tree	Node catchBody = block ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody ) ;
Distance : 7

152
Tree	Node catchBody = block ( copyInformationFrom , false ) ;
Code	Node catchBody = block ( copyInformationFrom , false ) ;
Distance : 6

153
Tree	Node catchBody = checkState ( catchBody ) ;
Code	Node catchBody = checkState ( catchBody ) ;
Distance : 7

154
Tree	Node catchBody = block ( catchNode , false ) ;
Code	Node catchBody = block ( catchNode , false ) ;
Distance : 6

155
Tree	Node catchBody = block ( catchBody , isCatch ) ;
Code	Node catchBody = block ( catchBody , isCatch ) ;
Distance : 7

156
Tree	Node catchBody = block ( isCatch , false ) ;
Code	Node catchBody = block ( isCatch , false ) ;
Distance : 7

157
Tree	Node catchBody = block ( catchNode ( catchBody ) ) ;
Code	Node catchBody = block ( catchNode ( catchBody ) ) ;
Distance : 6

158
Tree	Node catchBody = block ( tryBody , copyInformationFrom ) ;
Code	Node catchBody = block ( tryBody , copyInformationFrom ) ;
Distance : 6

159
Tree	Node tryBody = block ( catchBody , false ) ;
Code	Node tryBody = block ( catchBody , false ) ;
Distance : 8

160
Tree	Node catchBody = block () . copyInformationFrom ( tryBody ) ;
Code	Node catchBody = block () . copyInformationFrom ( tryBody ) ;
Distance : 5

161
Tree	Node catchBody = this . catchBody . catchBody ( isCatch ) ;
Code	Node catchBody = this . catchBody . catchBody ( isCatch ) ;
Distance : 6

162
Tree	Node catchBody = isBlock ( catchBody , false ) ;
Code	Node catchBody = isBlock ( catchBody , false ) ;
Distance : 7

163
Tree	Node catchBody = block . block ( catchBody ( tryBody ) , catchBody ) ;
Code	Node catchBody = block . block ( catchBody ( tryBody ) , catchBody ) ;
Distance : 9

164
Tree	Node catchBody = block ( tryBody , catchBody ) ;
Code	Node catchBody = block ( tryBody , catchBody ) ;
Distance : 7

165
Tree	Node catchBody = new block () . copyInformationFrom ( tryBody ) ;
Code	Node catchBody = new block () . copyInformationFrom ( tryBody ) ;
Distance : 5

166
Tree	Node catchBody = block ( catchBody , this . copyInformationFrom ) ;
Code	Node catchBody = block ( catchBody , this . copyInformationFrom ) ;
Distance : 6

167
Tree	Node catchBody = block ( catchBody ) . catchBody ( tryBody ) ;
Code	Node catchBody = block ( catchBody ) . catchBody ( tryBody ) ;
Distance : 4

168
Tree	Node catchBody = block () . copyInformationFrom ( tryBody ) ;
Code	Node catchBody = block () . copyInformationFrom ( tryBody ) ;
Distance : 5

169
Tree	Node catchBody = this . catchBody . isCatch ( catchBody ) ;
Code	Node catchBody = this . catchBody . isCatch ( catchBody ) ;
Distance : 6

170
Tree	Node catchBody = block . block ( catchBody ( isCatch ) , catchBody ) ;
Code	Node catchBody = block . block ( catchBody ( isCatch ) , catchBody ) ;
Distance : 9

171
Tree	Node catchBody = new block () . tryBody ( isCatch ) ;
Code	Node catchBody = new block () . tryBody ( isCatch ) ;
Distance : 6

172
Tree	Node catchBody = block () . checkState ( catchBody ) ;
Code	Node catchBody = block () . checkState ( catchBody ) ;
Distance : 6

173
Tree	Node catchBody = block ( catchBody , copyInformationFrom ) ;
Code	Node catchBody = block ( catchBody , copyInformationFrom ) ;
Distance : 6

174
Tree	Node catchBody = block ( catchBody ) . tryBody ( tryBody ) ;
Code	Node catchBody = block ( catchBody ) . tryBody ( tryBody ) ;
Distance : 4

175
Tree	Node catchBody = block ( catchBody ) . catchBody () ;
Code	Node catchBody = block ( catchBody ) . catchBody () ;
Distance : 6

176
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

177
Tree	Node catchBody = block ( catchBody ) . tryBody () ;
Code	Node catchBody = block ( catchBody ) . tryBody () ;
Distance : 6

178
Tree	Node catchBody = block . block ( catchBody ( tryBody ) , isCatch ) ;
Code	Node catchBody = block . block ( catchBody ( tryBody ) , isCatch ) ;
Distance : 9

179
Tree	Node catchBody = block ( catchBody , catchNode ) ;
Code	Node catchBody = block ( catchBody , catchNode ) ;
Distance : 6

180
Tree	Node catchBody = block . block ( catchBody ( tryBody ) , tryBody ) ;
Code	Node catchBody = block . block ( catchBody ( tryBody ) , tryBody ) ;
Distance : 9

181
Tree	Node catchBody = block ( catchBody ) . catchBody ( isCatch ) ;
Code	Node catchBody = block ( catchBody ) . catchBody ( isCatch ) ;
Distance : 4

182
Tree	Node catchBody = block . block ( tryBody ( tryBody ) , catchBody ) ;
Code	Node catchBody = block . block ( tryBody ( tryBody ) , catchBody ) ;
Distance : 9

183
Tree	Node catchBody = block ( catchBody ) . tryBody ( isCatch ) ;
Code	Node catchBody = block ( catchBody ) . tryBody ( isCatch ) ;
Distance : 4

184
Tree	Node catchBody = block . block ( catchBody ( isCatch ) , isCatch ) ;
Code	Node catchBody = block . block ( catchBody ( isCatch ) , isCatch ) ;
Distance : 9

185
Tree	Node catchBody = block ( tryBody , tryBody ) ;
Code	Node catchBody = block ( tryBody , tryBody ) ;
Distance : 7

186
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( tryBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( tryBody ) ;
Distance : 3

187
Tree	Node catchBody = block ( Node , false ) ;
Code	Node catchBody = block ( Node , false ) ;
Distance : 7

188
Tree	Node catchBody = block . block ( catchBody ( isCatch ) , tryBody ) ;
Code	Node catchBody = block . block ( catchBody ( isCatch ) , tryBody ) ;
Distance : 9

189
Tree	Node catchBody = block . block ( tryBody ( isCatch ) , catchBody ) ;
Code	Node catchBody = block . block ( tryBody ( isCatch ) , catchBody ) ;
Distance : 9

190
Tree	Node catchBody = block . block ( catchBody , isCatch ) ;
Code	Node catchBody = block . block ( catchBody , isCatch ) ;
Distance : 8

191
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Distance : 5

192
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( isCatch ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( isCatch ) ;
Distance : 3

193
Tree	Node catchBody = block . block ( catchBody ( catchBody ) , catchBody ) ;
Code	Node catchBody = block . block ( catchBody ( catchBody ) , catchBody ) ;
Distance : 9

194
Tree	Node catchBody = block ( catchBody , tryBody , false ) ;
Code	Node catchBody = block ( catchBody , tryBody , false ) ;
Distance : 7

195
Tree	Node catchBody = this . catchBody . tryBody ( catchBody ) ;
Code	Node catchBody = this . catchBody . tryBody ( catchBody ) ;
Distance : 6

196
Tree	checkState catchBody = block ( catchBody , catchBody ) ;
Code	checkState catchBody = block ( catchBody , catchBody ) ;
Distance : 8

197
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

198
Tree	Node catchBody = block . block ( isCatch ( tryBody ) , catchBody ) ;
Code	Node catchBody = block . block ( isCatch ( tryBody ) , catchBody ) ;
Distance : 9

199
Tree	Node catchBody = block ( catchBody , Node ) ;
Code	Node catchBody = block ( catchBody , Node ) ;
Distance : 7

========================================================================


========================================================================
Example Number: 30
Parent Code is: 
{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
-------------------------------------------------------------------------------
Child code is: 
{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.ON_EX , finallyNode ) ; } }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (70 (303{val=for}) (214{val=(}) (44 (43 (801{val=Node})) (800{val=finallyNode})) (226{val=:}) (32 (40{val=cfa.finallyMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=parent}) (215{val=)})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=cfa}) (235{val=.}) (802{val=createEdge}) (214{val=(}) (800{val=fromNode}) (234{val=,}) (40{val=Branch.UNCOND}) (234{val=,}) (800{val=finallyNode}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (70 (303{val=for}) (214{val=(}) (44 (43 (801{val=Node})) (800{val=finallyNode})) (226{val=:}) (32 (40{val=cfa.finallyMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=parent}) (215{val=)})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=cfa}) (235{val=.}) (802{val=createEdge}) (214{val=(}) (800{val=fromNode}) (234{val=,}) (40{val=Branch.ON_EX}) (234{val=,}) (800{val=finallyNode}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/14/parent/src_com_google_javascript_jscomp_ControlFlowAnalysis.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ for ( Node isCase : isCase . get () ) { nextSibling ( Token.IF , null ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { nextSibling ( Token.IF , null ) ; } }
Distance : 12

1
Tree	{ for ( Node Token.WHILE : isCase . get () ) { nextSibling . createEdge ( false ) ; } }
Code	{ for ( Node Token.WHILE : isCase . get () ) { nextSibling . createEdge ( false ) ; } }
Distance : 11

2
Tree	{ for ( final Node isCase : isCase . get () ) { createEdge ( Token.IF , null ) ; } }
Code	{ for ( final Node isCase : isCase . get () ) { createEdge ( Token.IF , null ) ; } }
Distance : 12

3
Tree	{ for ( final Node Token.IF : isCase . get () ) { nextSibling ( Token.IF , null ) ; } }
Code	{ for ( final Node Token.IF : isCase . get () ) { nextSibling ( Token.IF , null ) ; } }
Distance : 13

4
Tree	{ for ( final Node isCase : isCase . get () ) { getCatchBlock ( Token.IF , null ) ; } }
Code	{ for ( final Node isCase : isCase . get () ) { getCatchBlock ( Token.IF , null ) ; } }
Distance : 13

5
Tree	{ for ( Node Token.IF : isCase . get () ) { createEdge ( Token.DO , null ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { createEdge ( Token.DO , null ) ; } }
Distance : 11

6
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling . Token.IF ( false ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling . Token.IF ( false ) ; } }
Distance : 9

7
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.IF , STRING_CONSTANT ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.IF , STRING_CONSTANT ) ; } }
Distance : 7

8
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.IF , STRING_CONSTANT ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.IF , STRING_CONSTANT ) ; } }
Distance : 7

9
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.FOR , STRING_CONSTANT ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.FOR , STRING_CONSTANT ) ; } }
Distance : 7

10
Tree	{ for ( Node Token.IF : isCase . get () ) { createEdge ( Token.WHILE , null ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { createEdge ( Token.WHILE , null ) ; } }
Distance : 11

11
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock . createEdge ( Token.IF , STRING_CONSTANT ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock . createEdge ( Token.IF , STRING_CONSTANT ) ; } }
Distance : 7

12
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.FOR , STRING_CONSTANT ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.FOR , STRING_CONSTANT ) ; } }
Distance : 7

13
Tree	{ for ( Node Token.IF : isCase . get () ) { createEdge ( getCatchBlock , null ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { createEdge ( getCatchBlock , null ) ; } }
Distance : 11

14
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock . createEdge ( Token.IF , STRING_CONSTANT ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock . createEdge ( Token.IF , STRING_CONSTANT ) ; } }
Distance : 7

15
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { createEdge . createEdge ( Token.IF , STRING_CONSTANT ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { createEdge . createEdge ( Token.IF , STRING_CONSTANT ) ; } }
Distance : 7

16
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { createEdge . createEdge ( Token.IF , STRING_CONSTANT ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { createEdge . createEdge ( Token.IF , STRING_CONSTANT ) ; } }
Distance : 7

17
Tree	{ for ( Node Token.WHILE : Preconditions . get ( parent ) ) { getCatchBlock . createEdge ( false ) ; } }
Code	{ for ( Node Token.WHILE : Preconditions . get ( parent ) ) { getCatchBlock . createEdge ( false ) ; } }
Distance : 8

18
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock . createEdge ( Token.FOR , STRING_CONSTANT ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock . createEdge ( Token.FOR , STRING_CONSTANT ) ; } }
Distance : 7

19
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock . createEdge ( Token.FOR , STRING_CONSTANT ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock . createEdge ( Token.FOR , STRING_CONSTANT ) ; } }
Distance : 7

20
Tree	{ for ( Node Token.IF : isCase . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , Token.IF ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , Token.IF ) ; } }
Distance : 13

21
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Distance : 10

22
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.IF , Token.WHILE , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.IF , Token.WHILE , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Distance : 10

23
Tree	{ for ( Node Token.IF : isCase . get () ) { nextSibling . createEdge ( Token.IF , Token.WHILE , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { nextSibling . createEdge ( Token.IF , Token.WHILE , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Distance : 13

24
Tree	{ for ( Node Token.IF : isCase . get () ) { nextSibling . createEdge ( Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { nextSibling . createEdge ( Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Distance : 13

25
Tree	{ for ( Node isCase : isCase . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , Token.IF ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , Token.IF ) ; } }
Distance : 13

26
Tree	{ for ( Node Token.IF : isCase . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , Token.IF , getCatchBlock ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , Token.IF , getCatchBlock ) ; } }
Distance : 13

27
Tree	{ for ( final Node Token.IF : isCase . get () ) { getCatchBlock . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( final Node Token.IF : isCase . get () ) { getCatchBlock . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Distance : 14

28
Tree	{ for ( final Node Token.IF : isCase . get () ) { nextSibling . createEdge ( Token.IF , Token.WHILE , getCatchBlock , getCatchBlock , Token.IF ) ; } }
Code	{ for ( final Node Token.IF : isCase . get () ) { nextSibling . createEdge ( Token.IF , Token.WHILE , getCatchBlock , getCatchBlock , Token.IF ) ; } }
Distance : 14

29
Tree	{ for ( Node isCase : isCase . get () ) { nextSibling . createEdge ( Token.IF , Token.WHILE , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { nextSibling . createEdge ( Token.IF , Token.WHILE , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Distance : 13

30
Tree	{ for ( final Node Token.IF : isCase . get () ) { nextSibling . createEdge ( Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , Token.IF ) ; } }
Code	{ for ( final Node Token.IF : isCase . get () ) { nextSibling . createEdge ( Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , Token.IF ) ; } }
Distance : 14

31
Tree	{ for ( Node Token.IF : Preconditions . get () ) { nextSibling . createEdge ( Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get () ) { nextSibling . createEdge ( Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Distance : 13

32
Tree	{ for ( Node Token.IF : Preconditions . get () ) { nextSibling . createEdge ( Token.IF , Token.WHILE , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get () ) { nextSibling . createEdge ( Token.IF , Token.WHILE , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Distance : 13

33
Tree	{ for ( Node isCase : Preconditions . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , Token.IF ) ; } }
Code	{ for ( Node isCase : Preconditions . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , Token.IF ) ; } }
Distance : 13

34
Tree	{ for ( Node Token.IF : Preconditions . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , Token.IF , getCatchBlock ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , Token.IF , getCatchBlock ) ; } }
Distance : 13

35
Tree	{ for ( Node isCase : isCase . get () ) { nextSibling . createEdge ( Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { nextSibling . createEdge ( Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Distance : 13

36
Tree	{ for ( Node isCase : Preconditions . get () ) { nextSibling . createEdge ( Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( Node isCase : Preconditions . get () ) { nextSibling . createEdge ( Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Distance : 13

37
Tree	{ for ( Node Token.IF : isCase . get () ) { createEdge . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { createEdge . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Distance : 13

38
Tree	{ for ( Node isCase : Preconditions . get () ) { nextSibling . createEdge ( Token.IF , Token.WHILE , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( Node isCase : Preconditions . get () ) { nextSibling . createEdge ( Token.IF , Token.WHILE , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Distance : 13

39
Tree	{ for ( Node isCase : Preconditions . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , Token.IF , getCatchBlock ) ; } }
Code	{ for ( Node isCase : Preconditions . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , Token.IF , getCatchBlock ) ; } }
Distance : 13

40
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , null ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , null ) ; } }
Distance : 9

41
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , null ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , null ) ; } }
Distance : 9

42
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling . createEdge ( false ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling . createEdge ( false ) ; } }
Distance : 8

43
Tree	{ for ( Node Token.IF : isCase . get () ) { nextSibling . createEdge ( false ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { nextSibling . createEdge ( false ) ; } }
Distance : 11

44
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { nextSibling . createEdge ( false ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { nextSibling . createEdge ( false ) ; } }
Distance : 8

45
Tree	{ for ( Node Token.IF : Preconditions . get () ) { getCatchBlock ( Token.IF , null ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get () ) { getCatchBlock ( Token.IF , null ) ; } }
Distance : 12

46
Tree	{ for ( Node isCase : isCase . get () ) { nextSibling . createEdge ( false ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { nextSibling . createEdge ( false ) ; } }
Distance : 11

47
Tree	{ for ( Node isCase : Preconditions . get () ) { getCatchBlock ( Token.IF , null ) ; } }
Code	{ for ( Node isCase : Preconditions . get () ) { getCatchBlock ( Token.IF , null ) ; } }
Distance : 12

48
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock . createEdge ( false ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock . createEdge ( false ) ; } }
Distance : 8

49
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling ( Token.IF , null ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling ( Token.IF , null ) ; } }
Distance : 9

50
Tree	{ for ( Node Token.IF : isCase . get () ) { createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 17

51
Tree	{ for ( Node Token.IF : isCase . get () ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 17

52
Tree	{ for ( Node isCase : isCase . get () ) { createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 17

53
Tree	{ for ( Node Token.IF : isCase . get () ) { createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , Token.IF , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , Token.IF , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 17

54
Tree	{ for ( Node isCase : isCase . get () ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 17

55
Tree	{ for ( Node Token.IF : isCase . get () ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , Token.IF , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , Token.IF , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 17

56
Tree	{ for ( Node Token.IF : isCase . get () ) { createEdge ( Token.IF , Token.IF , getCatchBlock , Token.IF , getCatchBlock , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { createEdge ( Token.IF , Token.IF , getCatchBlock , Token.IF , getCatchBlock , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 17

57
Tree	{ for ( Node isCase : isCase . get () ) { createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , Token.IF , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , Token.IF , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 17

58
Tree	{ for ( Node Token.IF : isCase . get () ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock , Token.IF , getCatchBlock , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock , Token.IF , getCatchBlock , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 17

59
Tree	{ for ( Node isCase : isCase . get () ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , Token.IF , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , Token.IF , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 17

60
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.IF , Token.IF ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.IF , Token.IF ) ; } }
Distance : 7

61
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.IF , Token.IF ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.IF , Token.IF ) ; } }
Distance : 7

62
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.IF , Token.FOR ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.IF , Token.FOR ) ; } }
Distance : 7

63
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.FOR , Token.IF ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.FOR , Token.IF ) ; } }
Distance : 7

64
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock . createEdge ( Token.IF , Token.IF ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock . createEdge ( Token.IF , Token.IF ) ; } }
Distance : 7

65
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.IF , Token.FOR ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.IF , Token.FOR ) ; } }
Distance : 7

66
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.FOR , Token.IF ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.FOR , Token.IF ) ; } }
Distance : 7

67
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock . createEdge ( Token.IF , Token.IF ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock . createEdge ( Token.IF , Token.IF ) ; } }
Distance : 7

68
Tree	{ for ( Node Token.IF : isCase . get () ) { nextSibling . createEdge ( Token.DEFAULT_CASE , STRING_CONSTANT ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { nextSibling . createEdge ( Token.DEFAULT_CASE , STRING_CONSTANT ) ; } }
Distance : 10

69
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { createEdge . createEdge ( Token.IF , Token.IF ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { createEdge . createEdge ( Token.IF , Token.IF ) ; } }
Distance : 7

70
Tree	{ for ( Node isCase : isCase . get () ) { nextSibling . createEdge ( Token.DEFAULT_CASE , STRING_CONSTANT ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { nextSibling . createEdge ( Token.DEFAULT_CASE , STRING_CONSTANT ) ; } }
Distance : 10

71
Tree	{ for ( Node Token.IF : isCase . get () ) { createEdge () . createEdge ( Node , Token.IF ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { createEdge () . createEdge ( Node , Token.IF ) ; } }
Distance : 11

72
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock () . createEdge ( Token.IF , Token.IF ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock () . createEdge ( Token.IF , Token.IF ) ; } }
Distance : 8

73
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { createEdge . createEdge ( Token.IF , Token.IF ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { createEdge . createEdge ( Token.IF , Token.IF ) ; } }
Distance : 7

74
Tree	{ for ( Node Token.IF : isCase . get () ) { getCatchBlock () . createEdge ( Node , Token.IF ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { getCatchBlock () . createEdge ( Node , Token.IF ) ; } }
Distance : 11

75
Tree	{ for ( Node Token.IF : isCase . get () ) { nextSibling . createEdge ( isCase , STRING_CONSTANT ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { nextSibling . createEdge ( isCase , STRING_CONSTANT ) ; } }
Distance : 10

76
Tree	{ for ( Node isCase : isCase . get () ) { createEdge () . createEdge ( Node , Token.IF ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { createEdge () . createEdge ( Node , Token.IF ) ; } }
Distance : 11

77
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock () . createEdge ( Token.IF , Token.IF ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock () . createEdge ( Token.IF , Token.IF ) ; } }
Distance : 8

78
Tree	{ for ( Node Token.IF : isCase . get () ) { nextSibling . createEdge ( Token.IF , STRING_CONSTANT ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { nextSibling . createEdge ( Token.IF , STRING_CONSTANT ) ; } }
Distance : 10

79
Tree	{ for ( Node isCase : isCase . get () ) { getCatchBlock () . createEdge ( Node , Token.IF ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { getCatchBlock () . createEdge ( Node , Token.IF ) ; } }
Distance : 11

80
Tree	{ for ( Node Token.IF : isCase . get () ) { createEdge . createEdge ( false ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { createEdge . createEdge ( false ) ; } }
Distance : 11

81
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { createEdge . createEdge ( false ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { createEdge . createEdge ( false ) ; } }
Distance : 8

82
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock ( getCatchBlock , null ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock ( getCatchBlock , null ) ; } }
Distance : 9

83
Tree	{ for ( Node isCase : Preconditions . get () ) { nextSibling ( Token.IF , null ) ; } }
Code	{ for ( Node isCase : Preconditions . get () ) { nextSibling ( Token.IF , null ) ; } }
Distance : 12

84
Tree	{ for ( Node Token.IF : isCase . get () ) { getCatchBlock ( Token.IF , null ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { getCatchBlock ( Token.IF , null ) ; } }
Distance : 12

85
Tree	{ for ( Node isCase : isCase . get () ) { createEdge ( Token.IF , null ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { createEdge ( Token.IF , null ) ; } }
Distance : 11

86
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { createEdge ( Token.IF , null ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { createEdge ( Token.IF , null ) ; } }
Distance : 8

87
Tree	{ for ( Node Token.IF : isCase . get () ) { getCatchBlock . createEdge ( false ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { getCatchBlock . createEdge ( false ) ; } }
Distance : 11

88
Tree	{ for ( final Node Token.IF : isCase . get () ) { createEdge ( Token.IF , null ) ; } }
Code	{ for ( final Node Token.IF : isCase . get () ) { createEdge ( Token.IF , null ) ; } }
Distance : 12

89
Tree	{ for ( Node isCase : isCase . get () ) { createEdge . createEdge ( false ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { createEdge . createEdge ( false ) ; } }
Distance : 11

90
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock ( getCatchBlock , null ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock ( getCatchBlock , null ) ; } }
Distance : 9

91
Tree	{ for ( Node isCase : isCase . get () ) { getCatchBlock ( Token.IF , null ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { getCatchBlock ( Token.IF , null ) ; } }
Distance : 12

92
Tree	{ for ( Node isCase : isCase . get () ) { getCatchBlock . createEdge ( false ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { getCatchBlock . createEdge ( false ) ; } }
Distance : 11

93
Tree	{ for ( final Node Token.IF : isCase . get () ) { getCatchBlock ( Token.IF , null ) ; } }
Code	{ for ( final Node Token.IF : isCase . get () ) { getCatchBlock ( Token.IF , null ) ; } }
Distance : 13

94
Tree	{ for ( Node Token.IF : Preconditions . get () ) { getCatchBlock ( Token.DO , null ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get () ) { getCatchBlock ( Token.DO , null ) ; } }
Distance : 12

95
Tree	{ for ( Node Token.IF : Preconditions . get () ) { getCatchBlock ( getCatchBlock , null ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get () ) { getCatchBlock ( getCatchBlock , null ) ; } }
Distance : 12

96
Tree	{ for ( Node Token.IF : Preconditions . get () ) { getCatchBlock ( Token.WHILE , null ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get () ) { getCatchBlock ( Token.WHILE , null ) ; } }
Distance : 12

97
Tree	{ for ( Node Token.IF : isCase . get () ) { nextSibling ( Token.IF , null ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { nextSibling ( Token.IF , null ) ; } }
Distance : 12

98
Tree	{ for ( Node isCase : Preconditions . get () ) { getCatchBlock ( Token.DO , null ) ; } }
Code	{ for ( Node isCase : Preconditions . get () ) { getCatchBlock ( Token.DO , null ) ; } }
Distance : 12

99
Tree	{ for ( Node Token.WHILE : Preconditions . get ( parent ) ) { nextSibling . createEdge ( false ) ; } }
Code	{ for ( Node Token.WHILE : Preconditions . get ( parent ) ) { nextSibling . createEdge ( false ) ; } }
Distance : 8

100
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , Token.IF , Token.IF ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , Token.IF , Token.IF ) ; } }
Distance : 8

101
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , Token.IF , Token.IF ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , Token.IF , Token.IF ) ; } }
Distance : 8

102
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock ) ; } }
Distance : 8

103
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock ) ; } }
Distance : 8

104
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling ( Token.IF , Token.IF , Token.IF ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling ( Token.IF , Token.IF , Token.IF ) ; } }
Distance : 8

105
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock ( Token.DO , Token.IF , Token.IF ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock ( Token.DO , Token.IF , Token.IF ) ; } }
Distance : 8

106
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { nextSibling ( Token.IF , Token.IF , Token.IF ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { nextSibling ( Token.IF , Token.IF , Token.IF ) ; } }
Distance : 8

107
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling ( Token.IF , Token.IF , getCatchBlock ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling ( Token.IF , Token.IF , getCatchBlock ) ; } }
Distance : 8

108
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock ( Token.DO , null ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock ( Token.DO , null ) ; } }
Distance : 9

109
Tree	{ for ( Node Token.IF : Preconditions . get () ) { createEdge ( Token.IF , null ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get () ) { createEdge ( Token.IF , null ) ; } }
Distance : 11

110
Tree	{ for ( Node isCase : isCase . get () ) { nextSibling . createEdge ( isCase , STRING_CONSTANT ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { nextSibling . createEdge ( isCase , STRING_CONSTANT ) ; } }
Distance : 10

111
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock . createEdge ( false ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock . createEdge ( false ) ; } }
Distance : 8

112
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { nextSibling ( Token.IF , null ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { nextSibling ( Token.IF , null ) ; } }
Distance : 9

113
Tree	{ for ( Node Token.IF : isCase . get () ) { createEdge . createEdge ( Token.DEFAULT_CASE , STRING_CONSTANT ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { createEdge . createEdge ( Token.DEFAULT_CASE , STRING_CONSTANT ) ; } }
Distance : 10

114
Tree	{ for ( Node Token.IF : isCase . get () ) { createEdge () . createEdge ( Token.DEFAULT_CASE , Token.IF ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { createEdge () . createEdge ( Token.DEFAULT_CASE , Token.IF ) ; } }
Distance : 11

115
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { createEdge . createEdge ( false ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { createEdge . createEdge ( false ) ; } }
Distance : 8

116
Tree	{ for ( Node isCase : isCase . get () ) { nextSibling . createEdge ( Token.IF , STRING_CONSTANT ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { nextSibling . createEdge ( Token.IF , STRING_CONSTANT ) ; } }
Distance : 10

117
Tree	{ for ( Node Token.IF : Preconditions . get () ) { nextSibling ( Token.IF , null ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get () ) { nextSibling ( Token.IF , null ) ; } }
Distance : 12

118
Tree	{ for ( Node Token.IF : isCase . get () ) { getCatchBlock () . createEdge ( Token.DEFAULT_CASE , Token.IF ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { getCatchBlock () . createEdge ( Token.DEFAULT_CASE , Token.IF ) ; } }
Distance : 11

119
Tree	{ for ( Node Token.IF : isCase . get () ) { getCatchBlock . createEdge ( Token.DEFAULT_CASE , STRING_CONSTANT ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { getCatchBlock . createEdge ( Token.DEFAULT_CASE , STRING_CONSTANT ) ; } }
Distance : 10

120
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock ( Token.DO , null ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock ( Token.DO , null ) ; } }
Distance : 9

121
Tree	{ for ( Node isCase : isCase . get () ) { createEdge . createEdge ( Token.DEFAULT_CASE , STRING_CONSTANT ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { createEdge . createEdge ( Token.DEFAULT_CASE , STRING_CONSTANT ) ; } }
Distance : 10

122
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock ( Token.DO , Token.IF , Token.IF ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock ( Token.DO , Token.IF , Token.IF ) ; } }
Distance : 8

123
Tree	{ for ( Node isCase : Preconditions . get () ) { createEdge ( Token.IF , null ) ; } }
Code	{ for ( Node isCase : Preconditions . get () ) { createEdge ( Token.IF , null ) ; } }
Distance : 11

124
Tree	{ for ( Node isCase : isCase . get () ) { createEdge () . createEdge ( Token.DEFAULT_CASE , Token.IF ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { createEdge () . createEdge ( Token.DEFAULT_CASE , Token.IF ) ; } }
Distance : 11

125
Tree	{ for ( Node Token.IF : isCase . get () ) { createEdge ( Token.IF , null ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { createEdge ( Token.IF , null ) ; } }
Distance : 11

126
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock ( Token.DO , Token.IF , getCatchBlock ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock ( Token.DO , Token.IF , getCatchBlock ) ; } }
Distance : 8

127
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { createEdge ( Token.IF , null ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { createEdge ( Token.IF , null ) ; } }
Distance : 8

128
Tree	{ for ( Node isCase : isCase . get () ) { getCatchBlock () . createEdge ( Token.DEFAULT_CASE , Token.IF ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { getCatchBlock () . createEdge ( Token.DEFAULT_CASE , Token.IF ) ; } }
Distance : 11

129
Tree	{ for ( Node isCase : isCase . get () ) { getCatchBlock . createEdge ( Token.DEFAULT_CASE , STRING_CONSTANT ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { getCatchBlock . createEdge ( Token.DEFAULT_CASE , STRING_CONSTANT ) ; } }
Distance : 10

130
Tree	{ for ( Node isCase : isCase . get () ) { this . getCatchBlock . createEdge ( getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { this . getCatchBlock . createEdge ( getCatchBlock , getCatchBlock ) ; } }
Distance : 12

131
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { this . getCatchBlock . createEdge ( getCatchBlock , Token.IF ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { this . getCatchBlock . createEdge ( getCatchBlock , Token.IF ) ; } }
Distance : 9

132
Tree	{ for ( Node Token.IF : isCase . get () ) { this . getCatchBlock . createEdge ( Token.IF , getCatchBlock ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { this . getCatchBlock . createEdge ( Token.IF , getCatchBlock ) ; } }
Distance : 12

133
Tree	{ for ( Node isCase : isCase . get () ) { this . getCatchBlock . createEdge ( Token.IF , getCatchBlock ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { this . getCatchBlock . createEdge ( Token.IF , getCatchBlock ) ; } }
Distance : 12

134
Tree	{ for ( Node Token.IF : isCase . get () ) { this . getCatchBlock . createEdge ( Token.FOR , getCatchBlock ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { this . getCatchBlock . createEdge ( Token.FOR , getCatchBlock ) ; } }
Distance : 12

135
Tree	{ for ( Node Token.IF : isCase . get () ) { this . getCatchBlock . createEdge ( getCatchBlock , Token.IF ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { this . getCatchBlock . createEdge ( getCatchBlock , Token.IF ) ; } }
Distance : 12

136
Tree	{ for ( Node isCase : isCase . get () ) { this . getCatchBlock . createEdge ( Token.FOR , getCatchBlock ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { this . getCatchBlock . createEdge ( Token.FOR , getCatchBlock ) ; } }
Distance : 12

137
Tree	{ for ( Node isCase : isCase . get () ) { this . getCatchBlock . createEdge ( getCatchBlock , Token.IF ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { this . getCatchBlock . createEdge ( getCatchBlock , Token.IF ) ; } }
Distance : 12

138
Tree	{ for ( Node Token.IF : isCase . get () ) { this . nextSibling . createEdge ( getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { this . nextSibling . createEdge ( getCatchBlock , getCatchBlock ) ; } }
Distance : 12

139
Tree	{ for ( Node isCase : isCase . get () ) { this . nextSibling . createEdge ( getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { this . nextSibling . createEdge ( getCatchBlock , getCatchBlock ) ; } }
Distance : 12

140
Tree	{ for ( Node Token.IF : isCase . get () ) { nextSibling () . createEdge ( Node , Token.IF ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { nextSibling () . createEdge ( Node , Token.IF ) ; } }
Distance : 11

141
Tree	{ for ( Node isCase : isCase . get () ) { nextSibling () . createEdge ( Node , Token.IF ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { nextSibling () . createEdge ( Node , Token.IF ) ; } }
Distance : 11

142
Tree	{ for ( Node Token.IF : isCase . get () ) { getCatchBlock ( Token.DO , null ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { getCatchBlock ( Token.DO , null ) ; } }
Distance : 12

143
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { nextSibling . Token.IF ( false ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { nextSibling . Token.IF ( false ) ; } }
Distance : 9

144
Tree	{ for ( final Node Token.IF : isCase . get () ) { createEdge ( Token.DO , null ) ; } }
Code	{ for ( final Node Token.IF : isCase . get () ) { createEdge ( Token.DO , null ) ; } }
Distance : 12

145
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock () . createEdge ( Token.IF , Token.FOR ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock () . createEdge ( Token.IF , Token.FOR ) ; } }
Distance : 8

146
Tree	{ for ( final Node Token.IF : isCase . get () ) { createEdge ( Token.WHILE , null ) ; } }
Code	{ for ( final Node Token.IF : isCase . get () ) { createEdge ( Token.WHILE , null ) ; } }
Distance : 12

147
Tree	{ for ( Node Token.IF : isCase . get () ) { nextSibling . createEdge ( true ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { nextSibling . createEdge ( true ) ; } }
Distance : 11

148
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { this . getCatchBlock . createEdge ( Token.IF , getCatchBlock ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { this . getCatchBlock . createEdge ( Token.IF , getCatchBlock ) ; } }
Distance : 9

149
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

150
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { this . getCatchBlock . createEdge ( Token.IF , getCatchBlock ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { this . getCatchBlock . createEdge ( Token.IF , getCatchBlock ) ; } }
Distance : 9

151
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , Token.IF , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , Token.IF , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

152
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

153
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { this . getCatchBlock . createEdge ( getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { this . getCatchBlock . createEdge ( getCatchBlock , getCatchBlock ) ; } }
Distance : 9

154
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock , Token.IF , getCatchBlock , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock , Token.IF , getCatchBlock , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

155
Tree	{ for ( final Node Token.IF : isCase . get () ) { createEdge ( getCatchBlock , null ) ; } }
Code	{ for ( final Node Token.IF : isCase . get () ) { createEdge ( getCatchBlock , null ) ; } }
Distance : 12

156
Tree	{ for ( final Node Token.IF : isCase . get () ) { getCatchBlock ( Token.DO , null ) ; } }
Code	{ for ( final Node Token.IF : isCase . get () ) { getCatchBlock ( Token.DO , null ) ; } }
Distance : 13

157
Tree	{ for ( final Node Token.IF : isCase . get () ) { getCatchBlock ( Token.WHILE , null ) ; } }
Code	{ for ( final Node Token.IF : isCase . get () ) { getCatchBlock ( Token.WHILE , null ) ; } }
Distance : 13

158
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling () . createEdge ( Token.IF , Token.IF ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling () . createEdge ( Token.IF , Token.IF ) ; } }
Distance : 8

159
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , Token.IF , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , Token.IF , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

160
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { this . getCatchBlock . createEdge ( getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { this . getCatchBlock . createEdge ( getCatchBlock , getCatchBlock ) ; } }
Distance : 9

161
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Distance : 10

162
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock , Token.IF , Token.IF , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock , Token.IF , Token.IF , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

163
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Distance : 10

164
Tree	{ for ( Node Token.IF : isCase . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Distance : 13

165
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , Token.IF ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , Token.IF ) ; } }
Distance : 10

166
Tree	{ for ( Node isCase : isCase . get () ) { nextSibling . createEdge ( true ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { nextSibling . createEdge ( true ) ; } }
Distance : 11

167
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock () . createEdge ( Token.IF , Token.FOR ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock () . createEdge ( Token.IF , Token.FOR ) ; } }
Distance : 8

168
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock , Token.IF , getCatchBlock , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock , Token.IF , getCatchBlock , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

169
Tree	{ for ( final Node Token.IF : isCase . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( final Node Token.IF : isCase . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Distance : 14

170
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { nextSibling () . createEdge ( Token.IF , Token.IF ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { nextSibling () . createEdge ( Token.IF , Token.IF ) ; } }
Distance : 8

171
Tree	{ for ( Node Token.WHILE : isCase . get () ) { createEdge . createEdge ( false ) ; } }
Code	{ for ( Node Token.WHILE : isCase . get () ) { createEdge . createEdge ( false ) ; } }
Distance : 11

172
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { createEdge () . createEdge ( Token.IF , Token.IF ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { createEdge () . createEdge ( Token.IF , Token.IF ) ; } }
Distance : 8

173
Tree	{ for ( final Node Token.IF : isCase . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , Token.IF ) ; } }
Code	{ for ( final Node Token.IF : isCase . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , Token.IF ) ; } }
Distance : 14

174
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock , Token.IF , Token.IF , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , Token.IF , getCatchBlock , Token.IF , Token.IF , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

175
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

176
Tree	{ for ( Node isCase : isCase . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( Node isCase : isCase . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Distance : 13

177
Tree	{ for ( Node Token.IF : Preconditions . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Distance : 13

178
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { this . getCatchBlock . createEdge ( Token.FOR , getCatchBlock ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { this . getCatchBlock . createEdge ( Token.FOR , getCatchBlock ) ; } }
Distance : 9

179
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { createEdge () . createEdge ( Token.IF , Token.IF ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { createEdge () . createEdge ( Token.IF , Token.IF ) ; } }
Distance : 8

180
Tree	{ for ( final Node Token.IF : isCase . get () ) { nextSibling . createEdge ( Token.IF , Token.WHILE , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( final Node Token.IF : isCase . get () ) { nextSibling . createEdge ( Token.IF , Token.WHILE , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Distance : 14

181
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , Token.IF , Token.IF , getCatchBlock , getCatchBlock , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock ( Token.IF , Token.IF , Token.IF , getCatchBlock , getCatchBlock , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

182
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Distance : 10

183
Tree	{ for ( final Node Token.IF : isCase . get () ) { nextSibling . createEdge ( Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( final Node Token.IF : isCase . get () ) { nextSibling . createEdge ( Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Distance : 14

184
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Distance : 10

185
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { this . getCatchBlock . createEdge ( Token.IF , Token.IF ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { this . getCatchBlock . createEdge ( Token.IF , Token.IF ) ; } }
Distance : 9

186
Tree	{ for ( final Node Token.IF : isCase . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , Token.IF , getCatchBlock ) ; } }
Code	{ for ( final Node Token.IF : isCase . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , Token.IF , getCatchBlock ) ; } }
Distance : 14

187
Tree	{ for ( Node Token.IF : isCase . get () ) { this . getCatchBlock . createEdge ( getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( Node Token.IF : isCase . get () ) { this . getCatchBlock . createEdge ( getCatchBlock , getCatchBlock ) ; } }
Distance : 12

188
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , Token.IF , getCatchBlock ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , Token.IF , getCatchBlock ) ; } }
Distance : 10

189
Tree	{ for ( Node isCase : Preconditions . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( Node isCase : Preconditions . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Distance : 13

190
Tree	{ for ( final Node Token.IF : isCase . get () ) { createEdge . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( final Node Token.IF : isCase . get () ) { createEdge . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Distance : 14

191
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { this . getCatchBlock . createEdge ( Token.FOR , getCatchBlock ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { this . getCatchBlock . createEdge ( Token.FOR , getCatchBlock ) ; } }
Distance : 9

192
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , Token.IF ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , Token.IF ) ; } }
Distance : 10

193
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock () . Token.IF ( Token.IF , Token.IF ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { getCatchBlock () . Token.IF ( Token.IF , Token.IF ) ; } }
Distance : 9

194
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { nextSibling . createEdge ( Token.IF , getCatchBlock , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Distance : 10

195
Tree	{ for ( Node isCase : Preconditions . get ( parent ) ) { this . getCatchBlock . createEdge ( Token.IF , Token.IF ) ; } }
Code	{ for ( Node isCase : Preconditions . get ( parent ) ) { this . getCatchBlock . createEdge ( Token.IF , Token.IF ) ; } }
Distance : 9

196
Tree	{ for ( Node Token.WHILE : Preconditions . get ( parent ) ) { getCatchBlock () . createEdge ( Token.IF , Token.IF ) ; } }
Code	{ for ( Node Token.WHILE : Preconditions . get ( parent ) ) { getCatchBlock () . createEdge ( Token.IF , Token.IF ) ; } }
Distance : 8

197
Tree	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { this . getCatchBlock . createEdge ( getCatchBlock , Token.IF ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get ( parent ) ) { this . getCatchBlock . createEdge ( getCatchBlock , Token.IF ) ; } }
Distance : 9

198
Tree	{ for ( final Node isCase : isCase . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Code	{ for ( final Node isCase : isCase . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , getCatchBlock ) ; } }
Distance : 14

199
Tree	{ for ( Node Token.IF : Preconditions . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , Token.IF ) ; } }
Code	{ for ( Node Token.IF : Preconditions . get () ) { nextSibling . createEdge ( Token.IF , Token.IF , getCatchBlock , getCatchBlock , Token.IF ) ; } }
Distance : 13

========================================================================


========================================================================
Example Number: 31
Parent Code is: 
{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
-------------------------------------------------------------------------------
Child code is: 
{ if ( recurse ) { return anyResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (800{val=recurse}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=allResultsMatch}) (214{val=(}) (800{val=n}) (234{val=,}) (800{val=MAY_BE_STRING_PREDICATE}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=mayBeStringHelper}) (214{val=(}) (800{val=n}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (800{val=recurse}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyResultsMatch}) (214{val=(}) (800{val=n}) (234{val=,}) (800{val=MAY_BE_STRING_PREDICATE}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=mayBeStringHelper}) (214{val=(}) (800{val=n}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/10/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ if ( recurse ) { return this . n . Node ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return this . n . Node ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 8

1
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 7

2
Tree	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 3

3
Tree	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return n . Node ( n ) ; } }
Code	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return n . Node ( n ) ; } }
Distance : 9

4
Tree	{ if ( recurse ) { return Node ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return Node ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 6

5
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

6
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Distance : 6

7
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , Node ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , Node ) ; } }
Distance : 5

8
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

9
Tree	{ if ( Node ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( Node ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 7

10
Tree	{ if ( recurse . { ( Node ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Code	{ if ( recurse . { ( Node ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Distance : 10

11
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 7

12
Tree	{ if ( recurse . { ( Node ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Code	{ if ( recurse . { ( Node ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Distance : 10

13
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return Node . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return Node . mayBeStringHelper ( n ) ; } }
Distance : 5

14
Tree	{ if ( recurse . ) ( n ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Code	{ if ( recurse . ) ( n ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Distance : 11

15
Tree	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

16
Tree	{ if ( recurse ) { return Node ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return Node ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 5

17
Tree	{ if ( recurse . { ( ( ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( recurse . { ( ( ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 11

18
Tree	{ if ( recurse . allResultsMatch ( ( ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( recurse . allResultsMatch ( ( ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 12

19
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 6

20
Tree	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 5

21
Tree	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 3

22
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 7

23
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 7

24
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . n ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . n ( n , n ) ; } }
Distance : 8

25
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 10

26
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 5

27
Tree	{ if ( Node ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( Node ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 6

28
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return Node . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return Node . mayBeStringHelper ( n ) ; } }
Distance : 4

29
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . n ( n ) ; } }
Distance : 5

30
Tree	{ if ( recurse . n ( n ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Code	{ if ( recurse . n ( n ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Distance : 11

31
Tree	{ if ( recurse ) { return n ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return n ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 5

32
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 6

33
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 8

34
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 7

35
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Distance : 7

36
Tree	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 5

37
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . n ( n ) ; } }
Distance : 7

38
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 6

39
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 8

40
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , Node ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , Node ) ; } }
Distance : 7

41
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Distance : 8

42
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return Node ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return Node ( n , n ) ; } }
Distance : 6

43
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . n ( n ) ; } }
Distance : 4

44
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return Node . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return Node . mayBeStringHelper ( n , n ) ; } }
Distance : 7

45
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . Node ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . Node ( n ) ; } }
Distance : 6

46
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 7

47
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n ( n , n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n ( n , n ) ; } }
Distance : 8

48
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 7

49
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n () . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n () . mayBeStringHelper ( n ) ; } }
Distance : 7

50
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 10

51
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . n ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . n ( n , n ) ; } }
Distance : 7

52
Tree	{ if ( recurse ) { return allResultsMatch . Node ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . Node ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 7

53
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

54
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 8

55
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . n ( n ) ; } }
Distance : 6

56
Tree	{ if ( recurse . allResultsMatch ( n ( n ) ) ) { return mayBeStringHelper ( n ) ; } else & }
Code	{ if ( recurse . allResultsMatch ( n ( n ) ) ) { return mayBeStringHelper ( n ) ; } else & }
Distance : 11

57
Tree	{ if ( recurse . { ( n ( n ) ) ) { return mayBeStringHelper ( n ) ; } else & }
Code	{ if ( recurse . { ( n ( n ) ) ) { return mayBeStringHelper ( n ) ; } else & }
Distance : 10

58
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Distance : 9

59
Tree	{ if ( recurse ) { return allResultsMatch . n ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . n ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 6

60
Tree	{ if ( recurse . n ( Node ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Code	{ if ( recurse . n ( Node ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Distance : 11

61
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . n ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . n ( n , n ) ; } }
Distance : 9

62
Tree	{ if ( n . { ( n ) ) { return mayBeStringHelper ( n ) ; } else else }
Code	{ if ( n . { ( n ) ) { return mayBeStringHelper ( n ) ; } else else }
Distance : 11

63
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Distance : 10

64
Tree	{ if ( recurse . allResultsMatch ( n ) ) { return mayBeStringHelper ( n ) ; } else ReadablePartial }
Code	{ if ( recurse . allResultsMatch ( n ) ) { return mayBeStringHelper ( n ) ; } else ReadablePartial }
Distance : 11

65
Tree	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else >= }
Code	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else >= }
Distance : 10

66
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 9

67
Tree	{ if ( recurse . n ( Node ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Code	{ if ( recurse . n ( Node ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Distance : 11

68
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . n ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . n ( n , n ) ; } }
Distance : 10

69
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 10

70
Tree	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . n ( n ) ; } }
Code	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . n ( n ) ; } }
Distance : 8

71
Tree	{ if ( recurse ) { return n ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

72
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return Node ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return Node ( n ) ; } }
Distance : 4

73
Tree	{ if ( recurse ) { return Node . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return Node . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 7

74
Tree	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else TranspilationPasses }
Code	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else TranspilationPasses }
Distance : 10

75
Tree	{ if ( recurse ) { return allResultsMatch . n ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . n ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 7

76
Tree	{ if ( n ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 9

77
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 9

78
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . n ( n ) ; } }
Distance : 10

79
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 5

80
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Distance : 8

81
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 9

82
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 6

83
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 9

84
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return Node () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return Node () . mayBeStringHelper ( n ) ; } }
Distance : 8

85
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 11

86
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return n . n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return n . n ( n ) ; } }
Distance : 5

87
Tree	{ if ( recurse ) { return n ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 10

88
Tree	{ if ( recurse ) { return Node ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return Node ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

89
Tree	{ if ( recurse ) { return Node . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return Node . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 8

90
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 10

91
Tree	{ if ( recurse ) { return n . allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 6

92
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . n ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . n ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 7

93
Tree	{ if ( recurse ) { return n . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

94
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . Node ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . Node ( n ) ; } }
Distance : 6

95
Tree	{ if ( recurse ) { return allResultsMatch . Node ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . Node ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 5

96
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 5

97
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Distance : 7

98
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 11

99
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

100
Tree	{ if ( recurse ) { return allResultsMatch . n ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . n ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 4

101
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return Node . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return Node . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 10

102
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 5

103
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 4

104
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 12

105
Tree	{ if ( recurse ) { return Node . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return Node . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 5

106
Tree	{ if ( recurse . n ( n ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( recurse . n ( n ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 12

107
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Distance : 9

108
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Distance : 9

109
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 4

110
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , Node ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , Node ) ; } }
Distance : 9

111
Tree	{ if ( recurse ) { return n ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 5

112
Tree	{ if ( recurse . { ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else synchronized }
Code	{ if ( recurse . { ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else synchronized }
Distance : 10

113
Tree	{ if ( recurse . allResultsMatch ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else synchronized }
Code	{ if ( recurse . allResultsMatch ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else synchronized }
Distance : 11

114
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 9

115
Tree	{ if ( Node ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( Node ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 4

116
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . Node ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . Node ( n ) ; } }
Distance : 5

117
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 5

118
Tree	{ if ( recurse . n ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Code	{ if ( recurse . n ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Distance : 11

119
Tree	{ if ( recurse . n ( ( ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( recurse . n ( ( ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 12

120
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 9

121
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 9

122
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 7

123
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n () . mayBeStringHelper ( n ) ; } }
Distance : 6

124
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 6

125
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

126
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 5

127
Tree	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else else }
Code	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else else }
Distance : 10

128
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 5

129
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 7

130
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 4

131
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 5

132
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 7

133
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 9

134
Tree	{ if ( recurse . n ( n ) ) { return mayBeStringHelper ( n ) ; } else else }
Code	{ if ( recurse . n ( n ) ) { return mayBeStringHelper ( n ) ; } else else }
Distance : 11

135
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n ( n , n ) ; } }
Distance : 6

136
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . n ( n ) ; } }
Distance : 6

137
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n () . mayBeStringHelper ( n ) ; } }
Distance : 8

138
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 9

139
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 12

140
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 4

141
Tree	{ if ( recurse ) { return allResultsMatch ( Node ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( Node ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 4

142
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 12

143
Tree	{ if ( recurse . Node ( n ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Code	{ if ( recurse . Node ( n ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Distance : 11

144
Tree	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else synchronized }
Code	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else synchronized }
Distance : 10

145
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 6

146
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , Node ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , Node ) ; } }
Distance : 9

147
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Distance : 9

148
Tree	{ if ( recurse ) { return allResultsMatch . Node ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . Node ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 8

149
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 5

150
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 6

151
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n ( n , n ) ; } }
Distance : 8

152
Tree	{ if ( recurse ) { return Node . allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return Node . allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 6

153
Tree	{ if ( recurse ) { return n ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 4

154
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 9

155
Tree	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else & }
Code	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else & }
Distance : 10

156
Tree	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 8

157
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . n ( n ) ; } }
Distance : 12

158
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

159
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . n ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . n ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 12

160
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 7

161
Tree	{ if ( recurse ) { return n ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return n ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Distance : 7

162
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . n ( n ) ; } }
Distance : 12

163
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 8

164
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 13

165
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 12

166
Tree	{ if ( recurse . Node ( n ) ) { return mayBeStringHelper ( n ) ; } else else }
Code	{ if ( recurse . Node ( n ) ) { return mayBeStringHelper ( n ) ; } else else }
Distance : 11

167
Tree	{ if ( recurse ) { return n ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( recurse ) { return n ( n ) ; } else { return n ( n ) ; } }
Distance : 4

168
Tree	{ if ( recurse . { ( n ( n ) ) ) { return mayBeStringHelper ( n ) ; } else synchronized }
Code	{ if ( recurse . { ( n ( n ) ) ) { return mayBeStringHelper ( n ) ; } else synchronized }
Distance : 10

169
Tree	{ if ( recurse . allResultsMatch ( n ) ) { return n ( n ) ; } else else }
Code	{ if ( recurse . allResultsMatch ( n ) ) { return n ( n ) ; } else else }
Distance : 12

170
Tree	{ if ( recurse . allResultsMatch ( n ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( recurse . allResultsMatch ( n ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 12

171
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n () . mayBeStringHelper ( n ) ; } }
Distance : 8

172
Tree	{ if ( recurse . { ( n ( n ) ) ) { return mayBeStringHelper ( n ) ; } else synchronized }
Code	{ if ( recurse . { ( n ( n ) ) ) { return mayBeStringHelper ( n ) ; } else synchronized }
Distance : 10

173
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 8

174
Tree	{ if ( recurse . Node ( n ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( recurse . Node ( n ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 12

175
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return Node . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return Node . mayBeStringHelper ( n ) ; } }
Distance : 7

176
Tree	{ if ( recurse ) { return Node . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return Node . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 7

177
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , n ) ; } else { return n . n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , n ) ; } else { return n . n ( n ) ; } }
Distance : 7

178
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 8

179
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 7

180
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . n ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . n ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 8

181
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . n ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . n ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 12

182
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 8

183
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 13

184
Tree	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Code	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Distance : 9

185
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . n ( n ) ; } }
Distance : 10

186
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 9

187
Tree	{ if ( n ) { return this . n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return this . n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 9

188
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return Node ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return Node ( n ) ; } }
Distance : 6

189
Tree	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return Node . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return Node . mayBeStringHelper ( n ) ; } }
Distance : 8

190
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 7

191
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 6

192
Tree	{ if ( recurse ) { return n ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 6

193
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , Node ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , Node ) ; } }
Distance : 7

194
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return Node () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return Node () . mayBeStringHelper ( n ) ; } }
Distance : 6

195
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . n ( n ) ; } }
Distance : 8

196
Tree	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . Node ( n ) ; } }
Code	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . Node ( n ) ; } }
Distance : 8

197
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . n ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . n ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 10

198
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 7

199
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 6

========================================================================


========================================================================
Example Number: 32
Parent Code is: 
String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
-------------------------------------------------------------------------------
Child code is: 
String moduleName = guessCJSModuleName ( script . getSourceFileName () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=moduleName}) (204{val==}) (32 (802{val=guessCJSModuleName}) (214{val=(}) (32 (802{val=normalizeSourceName}) (214{val=(}) (32 (800{val=script}) (235{val=.}) (802{val=getSourceFileName}) (216{val=()})) (215{val=)})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=moduleName}) (204{val==}) (32 (802{val=guessCJSModuleName}) (214{val=(}) (32 (800{val=script}) (235{val=.}) (802{val=getSourceFileName}) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/9/parent/src_com_google_javascript_jscomp_ProcessCommonJSModules.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	String moduleName = exprResult ( script , script ) ;
Code	String moduleName = exprResult ( script , script ) ;
Distance : 4

1
Tree	String moduleName = visitScript ( script , script ) ;
Code	String moduleName = visitScript ( script , script ) ;
Distance : 4

2
Tree	String moduleName = exprResult ( var , script ) ;
Code	String moduleName = exprResult ( var , script ) ;
Distance : 5

3
Tree	String moduleName = visitScript ( var , script ) ;
Code	String moduleName = visitScript ( var , script ) ;
Distance : 5

4
Tree	String moduleName = moduleName ( script , script ) ;
Code	String moduleName = moduleName ( script , script ) ;
Distance : 4

5
Tree	String moduleName = CompilerInput ( script , script ) ;
Code	String moduleName = CompilerInput ( script , script ) ;
Distance : 4

6
Tree	String moduleName = exprResult ( script ) ;
Code	String moduleName = exprResult ( script ) ;
Distance : 4

7
Tree	String moduleName = exprResult ( script , NUMBER_CONSTANT ) ;
Code	String moduleName = exprResult ( script , NUMBER_CONSTANT ) ;
Distance : 4

8
Tree	String moduleName = moduleName ( script ) ;
Code	String moduleName = moduleName ( script ) ;
Distance : 4

9
Tree	String moduleName = objectlit ( script , script ) ;
Code	String moduleName = objectlit ( script , script ) ;
Distance : 4

10
Tree	String moduleName = CompilerInput ( var ) ;
Code	String moduleName = CompilerInput ( var ) ;
Distance : 5

11
Tree	String moduleName = scriptNodeCount ( script , script ) ;
Code	String moduleName = scriptNodeCount ( script , script ) ;
Distance : 4

12
Tree	String moduleName = moduleName ( var ) ;
Code	String moduleName = moduleName ( var ) ;
Distance : 5

13
Tree	String moduleName = CompilerInput ( var ) ;
Code	String moduleName = CompilerInput ( var ) ;
Distance : 5

14
Tree	String visitScript = exprResult ( script , NUMBER_CONSTANT ) ;
Code	String visitScript = exprResult ( script , NUMBER_CONSTANT ) ;
Distance : 5

15
Tree	String moduleName = moduleName ( var , NUMBER_CONSTANT ) ;
Code	String moduleName = moduleName ( var , NUMBER_CONSTANT ) ;
Distance : 5

16
Tree	String moduleName = CompilerInput ( var , NUMBER_CONSTANT ) ;
Code	String moduleName = CompilerInput ( var , NUMBER_CONSTANT ) ;
Distance : 5

17
Tree	String moduleName = visitScript ( script , script ) ;
Code	String moduleName = visitScript ( script , script ) ;
Distance : 4

18
Tree	String moduleName = exprResult ( var , script ) ;
Code	String moduleName = exprResult ( var , script ) ;
Distance : 5

19
Tree	String moduleName = exprResult ( script , script , getSourceFileName ) ;
Code	String moduleName = exprResult ( script , script , getSourceFileName ) ;
Distance : 5

20
Tree	String moduleName = exprResult ( visitScript ( getSourceFileName ( var ) ) ) ;
Code	String moduleName = exprResult ( visitScript ( getSourceFileName ( var ) ) ) ;
Distance : 7

21
Tree	String moduleName = visitScript ( exprResult ( script . getSourceFileName () ) , STRING_CONSTANT , script , compiler ) ;
Code	String moduleName = visitScript ( exprResult ( script . getSourceFileName () ) , STRING_CONSTANT , script , compiler ) ;
Distance : 10

22
Tree	String moduleName = exprResult ( objectlit ( script . getSourceFileName () ) , STRING_CONSTANT , script , compiler ) ;
Code	String moduleName = exprResult ( objectlit ( script . getSourceFileName () ) , STRING_CONSTANT , script , compiler ) ;
Distance : 10

23
Tree	String moduleName = moduleName . exprResult ( script , var , getSourceFileName ) ;
Code	String moduleName = moduleName . exprResult ( script , var , getSourceFileName ) ;
Distance : 7

24
Tree	String moduleName = visitScript ( visitScript ( script . getSourceFileName () ) , STRING_CONSTANT , script , compiler ) ;
Code	String moduleName = visitScript ( visitScript ( script . getSourceFileName () ) , STRING_CONSTANT , script , compiler ) ;
Distance : 10

25
Tree	String moduleName = exprResult ( exprResult ( script . getSourceFileName () ) , STRING_CONSTANT , script , var ) ;
Code	String moduleName = exprResult ( exprResult ( script . getSourceFileName () ) , STRING_CONSTANT , script , var ) ;
Distance : 10

26
Tree	String moduleName = moduleName ( var ) ;
Code	String moduleName = moduleName ( var ) ;
Distance : 5

27
Tree	String moduleName = exprResult ( visitScript ( script . getSourceFileName () ) , STRING_CONSTANT , script , var ) ;
Code	String moduleName = exprResult ( visitScript ( script . getSourceFileName () ) , STRING_CONSTANT , script , var ) ;
Distance : 10

28
Tree	String moduleName = visitScript ( objectlit ( script . getSourceFileName () ) , STRING_CONSTANT , script , compiler ) ;
Code	String moduleName = visitScript ( objectlit ( script . getSourceFileName () ) , STRING_CONSTANT , script , compiler ) ;
Distance : 10

29
Tree	String moduleName = exprResult ( exprResult ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = exprResult ( exprResult ( getSourceFileName ( script ) ) ) ;
Distance : 7

30
Tree	String moduleName = JSModule ( var ) ;
Code	String moduleName = JSModule ( var ) ;
Distance : 5

31
Tree	String moduleName = moduleName . exprResult ( script , script , getSourceFileName ) ;
Code	String moduleName = moduleName . exprResult ( script , script , getSourceFileName ) ;
Distance : 7

32
Tree	String moduleName = exprResult ( visitScript ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = exprResult ( visitScript ( getSourceFileName ( script ) ) ) ;
Distance : 7

33
Tree	String moduleName = visitScript ( var ) ;
Code	String moduleName = visitScript ( var ) ;
Distance : 5

34
Tree	String moduleName = JSModule . exprResult ( script , script , getSourceFileName ) ;
Code	String moduleName = JSModule . exprResult ( script , script , getSourceFileName ) ;
Distance : 7

35
Tree	String moduleName = visitScript ( exprResult ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = visitScript ( exprResult ( getSourceFileName ( script ) ) ) ;
Distance : 7

36
Tree	String moduleName = exprResult ( script ) ;
Code	String moduleName = exprResult ( script ) ;
Distance : 4

37
Tree	String moduleName = CompilerInput ( script ) ;
Code	String moduleName = CompilerInput ( script ) ;
Distance : 4

38
Tree	String moduleName = moduleName ( var , script ) ;
Code	String moduleName = moduleName ( var , script ) ;
Distance : 5

39
Tree	String moduleName = moduleName ( script ) ;
Code	String moduleName = moduleName ( script ) ;
Distance : 4

40
Tree	String moduleName = exprResult ( exprResult ( var . getSourceFileName () ) , STRING_CONSTANT , script , compiler ) ;
Code	String moduleName = exprResult ( exprResult ( var . getSourceFileName () ) , STRING_CONSTANT , script , compiler ) ;
Distance : 11

41
Tree	String moduleName = CompilerInput ( script ) ;
Code	String moduleName = CompilerInput ( script ) ;
Distance : 4

42
Tree	String moduleName = exprResult ( visitScript ( var . getSourceFileName () ) , STRING_CONSTANT , script , compiler ) ;
Code	String moduleName = exprResult ( visitScript ( var . getSourceFileName () ) , STRING_CONSTANT , script , compiler ) ;
Distance : 11

43
Tree	String moduleName = exprResult ( objectlit ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = exprResult ( objectlit ( getSourceFileName ( script ) ) ) ;
Distance : 7

44
Tree	String moduleName = visitScript ( visitScript ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = visitScript ( visitScript ( getSourceFileName ( script ) ) ) ;
Distance : 7

45
Tree	String moduleName = exprResult ( exprResult ( script . getSourceFileName () ) , STRING_CONSTANT , script , compiler ) ;
Code	String moduleName = exprResult ( exprResult ( script . getSourceFileName () ) , STRING_CONSTANT , script , compiler ) ;
Distance : 10

46
Tree	String moduleName = visitScript ( var , NUMBER_CONSTANT ) ;
Code	String moduleName = visitScript ( var , NUMBER_CONSTANT ) ;
Distance : 5

47
Tree	String moduleName = moduleName . exprResult ( var , script , getSourceFileName ) ;
Code	String moduleName = moduleName . exprResult ( var , script , getSourceFileName ) ;
Distance : 7

48
Tree	String moduleName = JSModule ( var , script ) ;
Code	String moduleName = JSModule ( var , script ) ;
Distance : 5

49
Tree	String moduleName = exprResult ( visitScript ( script . getSourceFileName () ) , STRING_CONSTANT , script , compiler ) ;
Code	String moduleName = exprResult ( visitScript ( script . getSourceFileName () ) , STRING_CONSTANT , script , compiler ) ;
Distance : 10

50
Tree	String moduleName = exprResult ( moduleName , script ) ;
Code	String moduleName = exprResult ( moduleName , script ) ;
Distance : 5

51
Tree	String moduleName = exprResult ( exprResult ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = exprResult ( exprResult ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

52
Tree	String moduleName = visitScript ( var . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = visitScript ( var . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 7

53
Tree	String moduleName = visitScript ( exprResult ) ;
Code	String moduleName = visitScript ( exprResult ) ;
Distance : 5

54
Tree	String moduleName = exprResult ( visitScript ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = exprResult ( visitScript ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

55
Tree	String moduleName = exprResult ( objectlit ( script . getSourceFileName () ) , else ) ;
Code	String moduleName = exprResult ( objectlit ( script . getSourceFileName () ) , else ) ;
Distance : 6

56
Tree	String moduleName = exprResult ( visitScript ( var . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = exprResult ( visitScript ( var . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

57
Tree	String moduleName = visitScript ( moduleName ) ;
Code	String moduleName = visitScript ( moduleName ) ;
Distance : 5

58
Tree	String moduleName = visitScript ( visitScript ( script . getSourceFileName () ) , else ) ;
Code	String moduleName = visitScript ( visitScript ( script . getSourceFileName () ) , else ) ;
Distance : 6

59
Tree	String moduleName = exprResult ( scriptNodeCount ) ;
Code	String moduleName = exprResult ( scriptNodeCount ) ;
Distance : 5

60
Tree	String moduleName = exprResult ( visitScript ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String moduleName = exprResult ( visitScript ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 8

61
Tree	String moduleName = exprResult ( objectlit , script ) ;
Code	String moduleName = exprResult ( objectlit , script ) ;
Distance : 5

62
Tree	String moduleName = moduleName ( exprResult ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = moduleName ( exprResult ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

63
Tree	String moduleName = CompilerInput ( exprResult ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = CompilerInput ( exprResult ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

64
Tree	String moduleName = exprResult ( objectlit ) ;
Code	String moduleName = exprResult ( objectlit ) ;
Distance : 5

65
Tree	String moduleName = moduleName ( visitScript ) ;
Code	String moduleName = moduleName ( visitScript ) ;
Distance : 5

66
Tree	String moduleName = moduleName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = moduleName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 6

67
Tree	String moduleName = CompilerInput ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = CompilerInput ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 6

68
Tree	String moduleName = CompilerInput ( visitScript ) ;
Code	String moduleName = CompilerInput ( visitScript ) ;
Distance : 5

69
Tree	String moduleName = visitScript ( moduleName , script ) ;
Code	String moduleName = visitScript ( moduleName , script ) ;
Distance : 5

70
Tree	String moduleName = scriptNodeCount ( script ) ;
Code	String moduleName = scriptNodeCount ( script ) ;
Distance : 4

71
Tree	String moduleName = moduleName ( script , NUMBER_CONSTANT ) ;
Code	String moduleName = moduleName ( script , NUMBER_CONSTANT ) ;
Distance : 4

72
Tree	String moduleName = objectlit ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = objectlit ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 6

73
Tree	String moduleName = CompilerInput ( script , NUMBER_CONSTANT ) ;
Code	String moduleName = CompilerInput ( script , NUMBER_CONSTANT ) ;
Distance : 4

74
Tree	String moduleName = exprResult ( scriptNodeCount , script ) ;
Code	String moduleName = exprResult ( scriptNodeCount , script ) ;
Distance : 5

75
Tree	String moduleName = exprResult ( exprResult ( var . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String moduleName = exprResult ( exprResult ( var . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 9

76
Tree	String moduleName = visitScript ( exprResult ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = visitScript ( exprResult ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

77
Tree	String moduleName = visitScript ( objectlit ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String moduleName = visitScript ( objectlit ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 8

78
Tree	String moduleName = exprResult ( visitScript , script ) ;
Code	String moduleName = exprResult ( visitScript , script ) ;
Distance : 5

79
Tree	String moduleName = exprResult ( var , getSourceFileName ( getSourceFileName ( var . getSourceFileName () ) ) ) ;
Code	String moduleName = exprResult ( var , getSourceFileName ( getSourceFileName ( var . getSourceFileName () ) ) ) ;
Distance : 10

80
Tree	String moduleName = exprResult ( exprResult ( script . getSourceFileName () ) , STRING_CONSTANT , else ) ;
Code	String moduleName = exprResult ( exprResult ( script . getSourceFileName () ) , STRING_CONSTANT , else ) ;
Distance : 8

81
Tree	String visitScript = exprResult ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String visitScript = exprResult ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 10

82
Tree	String moduleName = exprResult ( script , script ) ;
Code	String moduleName = exprResult ( script , script ) ;
Distance : 4

83
Tree	String moduleName = visitScript ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = visitScript ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 6

84
Tree	String moduleName = moduleName ( visitScript , script ) ;
Code	String moduleName = moduleName ( visitScript , script ) ;
Distance : 5

85
Tree	String moduleName = CompilerInput ( visitScript , script ) ;
Code	String moduleName = CompilerInput ( visitScript , script ) ;
Distance : 5

86
Tree	String moduleName = exprResult ( var . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = exprResult ( var . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 7

87
Tree	String moduleName = visitScript ( exprResult , script ) ;
Code	String moduleName = visitScript ( exprResult , script ) ;
Distance : 5

88
Tree	String moduleName = exprResult ( objectlit ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = exprResult ( objectlit ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

89
Tree	String moduleName = exprResult ( exprResult ( script . getSourceFileName () ) , else ) ;
Code	String moduleName = exprResult ( exprResult ( script . getSourceFileName () ) , else ) ;
Distance : 6

90
Tree	String moduleName = exprResult ( exprResult ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String moduleName = exprResult ( exprResult ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 8

91
Tree	String moduleName = exprResult ( exprResult ) ;
Code	String moduleName = exprResult ( exprResult ) ;
Distance : 5

92
Tree	String moduleName = objectlit ( script ) ;
Code	String moduleName = objectlit ( script ) ;
Distance : 4

93
Tree	String moduleName = CompilerInput ( script , script ) ;
Code	String moduleName = CompilerInput ( script , script ) ;
Distance : 4

94
Tree	String moduleName = visitScript ( visitScript ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = visitScript ( visitScript ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

95
Tree	String moduleName = exprResult ( visitScript ( var . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String moduleName = exprResult ( visitScript ( var . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 9

96
Tree	String moduleName = exprResult ( exprResult ( script . getSourceFileName () ) , CHAR_CONS ) ;
Code	String moduleName = exprResult ( exprResult ( script . getSourceFileName () ) , CHAR_CONS ) ;
Distance : 6

97
Tree	String moduleName = visitScript ( script ) ;
Code	String moduleName = visitScript ( script ) ;
Distance : 4

98
Tree	String moduleName = exprResult ( visitScript ( script . getSourceFileName () ) , STRING_CONSTANT , else ) ;
Code	String moduleName = exprResult ( visitScript ( script . getSourceFileName () ) , STRING_CONSTANT , else ) ;
Distance : 8

99
Tree	String moduleName = visitScript ( visitScript ) ;
Code	String moduleName = visitScript ( visitScript ) ;
Distance : 5

100
Tree	String moduleName = exprResult ( exprResult , script ) ;
Code	String moduleName = exprResult ( exprResult , script ) ;
Distance : 5

101
Tree	String visitScript = exprResult ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String visitScript = exprResult ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 7

102
Tree	String moduleName = exprResult ( moduleName ) ;
Code	String moduleName = exprResult ( moduleName ) ;
Distance : 5

103
Tree	String moduleName = exprResult ( visitScript ( script . getSourceFileName () ) , else ) ;
Code	String moduleName = exprResult ( visitScript ( script . getSourceFileName () ) , else ) ;
Distance : 6

104
Tree	String moduleName = CompilerInput ( var . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = CompilerInput ( var . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 7

105
Tree	String moduleName = exprResult ( var ) ;
Code	String moduleName = exprResult ( var ) ;
Distance : 5

106
Tree	String moduleName = objectlit ( script , NUMBER_CONSTANT ) ;
Code	String moduleName = objectlit ( script , NUMBER_CONSTANT ) ;
Distance : 4

107
Tree	String moduleName = CompilerInput ( var , script ) ;
Code	String moduleName = CompilerInput ( var , script ) ;
Distance : 5

108
Tree	String moduleName = exprResult ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = exprResult ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

109
Tree	String moduleName = visitScript ( visitScript , script ) ;
Code	String moduleName = visitScript ( visitScript , script ) ;
Distance : 5

110
Tree	String moduleName = visitScript ( script , script , getSourceFileName ) ;
Code	String moduleName = visitScript ( script , script , getSourceFileName ) ;
Distance : 5

111
Tree	String moduleName = moduleName ( var . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = moduleName ( var . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 7

112
Tree	String moduleName = exprResult ( var , script , getSourceFileName ) ;
Code	String moduleName = exprResult ( var , script , getSourceFileName ) ;
Distance : 5

113
Tree	String moduleName = exprResult ( var , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = exprResult ( var , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

114
Tree	String moduleName = exprResult ( exprResult ( getSourceFileName ( script . getSourceFileName () ) ) , visitScript ) ;
Code	String moduleName = exprResult ( exprResult ( getSourceFileName ( script . getSourceFileName () ) ) , visitScript ) ;
Distance : 9

115
Tree	String moduleName = exprResult ( exprResult ( getSourceFileName ( script . getSourceFileName () ) ) , moduleName ) ;
Code	String moduleName = exprResult ( exprResult ( getSourceFileName ( script . getSourceFileName () ) ) , moduleName ) ;
Distance : 9

116
Tree	String visitScript = exprResult ( script ) ;
Code	String visitScript = exprResult ( script ) ;
Distance : 5

117
Tree	String moduleName = visitScript ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = visitScript ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

118
Tree	String moduleName = exprResult ( visitScript ( getSourceFileName ( script . getSourceFileName () ) ) , visitScript ) ;
Code	String moduleName = exprResult ( visitScript ( getSourceFileName ( script . getSourceFileName () ) ) , visitScript ) ;
Distance : 9

119
Tree	String moduleName = exprResult ( visitScript ( getSourceFileName ( script . getSourceFileName () ) ) , moduleName ) ;
Code	String moduleName = exprResult ( visitScript ( getSourceFileName ( script . getSourceFileName () ) ) , moduleName ) ;
Distance : 9

120
Tree	String moduleName = visitScript ( exprResult ( getSourceFileName ( script . getSourceFileName () ) ) , visitScript ) ;
Code	String moduleName = visitScript ( exprResult ( getSourceFileName ( script . getSourceFileName () ) ) , visitScript ) ;
Distance : 9

121
Tree	String moduleName = visitScript ( var , script , getSourceFileName ) ;
Code	String moduleName = visitScript ( var , script , getSourceFileName ) ;
Distance : 5

122
Tree	String moduleName = visitScript ( exprResult ( getSourceFileName ( script . getSourceFileName () ) ) , moduleName ) ;
Code	String moduleName = visitScript ( exprResult ( getSourceFileName ( script . getSourceFileName () ) ) , moduleName ) ;
Distance : 9

123
Tree	String moduleName = visitScript ( objectlit ( script . getSourceFileName () ) ) ;
Code	String moduleName = visitScript ( objectlit ( script . getSourceFileName () ) ) ;
Distance : 4

124
Tree	String moduleName = exprResult ( visitScript ( var . getSourceFileName () ) ) ;
Code	String moduleName = exprResult ( visitScript ( var . getSourceFileName () ) ) ;
Distance : 5

125
Tree	String moduleName = exprResult ( objectlit ( getSourceFileName ( script . getSourceFileName () ) ) , visitScript ) ;
Code	String moduleName = exprResult ( objectlit ( getSourceFileName ( script . getSourceFileName () ) ) , visitScript ) ;
Distance : 9

126
Tree	String moduleName = moduleName ( script , script , getSourceFileName ) ;
Code	String moduleName = moduleName ( script , script , getSourceFileName ) ;
Distance : 5

127
Tree	String moduleName = CompilerInput ( script , script , getSourceFileName ) ;
Code	String moduleName = CompilerInput ( script , script , getSourceFileName ) ;
Distance : 5

128
Tree	String moduleName = visitScript ( visitScript ( getSourceFileName ( script . getSourceFileName () ) ) , visitScript ) ;
Code	String moduleName = visitScript ( visitScript ( getSourceFileName ( script . getSourceFileName () ) ) , visitScript ) ;
Distance : 9

129
Tree	String moduleName = exprResult ( script , getSourceFileName ( getSourceFileName ( var . getSourceFileName () ) ) ) ;
Code	String moduleName = exprResult ( script , getSourceFileName ( getSourceFileName ( var . getSourceFileName () ) ) ) ;
Distance : 9

130
Tree	String moduleName = visitScript ( var , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = visitScript ( var , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

131
Tree	String moduleName = exprResult ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = exprResult ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

132
Tree	String moduleName = exprResult ( script , getSourceFileName ( var . getSourceFileName () ) ) ;
Code	String moduleName = exprResult ( script , getSourceFileName ( var . getSourceFileName () ) ) ;
Distance : 6

133
Tree	String moduleName = exprResult ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = exprResult ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 6

134
Tree	String moduleName = moduleName ( exprResult ( script . getSourceFileName () ) ) ;
Code	String moduleName = moduleName ( exprResult ( script . getSourceFileName () ) ) ;
Distance : 4

135
Tree	String moduleName = exprResult ( objectlit ( getSourceFileName ( script . getSourceFileName () ) ) , moduleName ) ;
Code	String moduleName = exprResult ( objectlit ( getSourceFileName ( script . getSourceFileName () ) ) , moduleName ) ;
Distance : 9

136
Tree	String moduleName = objectlit ( script , script , getSourceFileName ) ;
Code	String moduleName = objectlit ( script , script , getSourceFileName ) ;
Distance : 5

137
Tree	String moduleName = CompilerInput ( exprResult ( script . getSourceFileName () ) ) ;
Code	String moduleName = CompilerInput ( exprResult ( script . getSourceFileName () ) ) ;
Distance : 4

138
Tree	String moduleName = exprResult ( exprResult ( script . getSourceFileName () ) ) ;
Code	String moduleName = exprResult ( exprResult ( script . getSourceFileName () ) ) ;
Distance : 4

139
Tree	String moduleName = CompilerInput ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = CompilerInput ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

140
Tree	String moduleName = exprResult ( exprResult ( getSourceFileName ( script . getSourceFileName () ) ) , scriptNodeCount ) ;
Code	String moduleName = exprResult ( exprResult ( getSourceFileName ( script . getSourceFileName () ) ) , scriptNodeCount ) ;
Distance : 9

141
Tree	String moduleName = exprResult ( visitScript ( script . getSourceFileName () ) ) ;
Code	String moduleName = exprResult ( visitScript ( script . getSourceFileName () ) ) ;
Distance : 4

142
Tree	String moduleName = moduleName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = moduleName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

143
Tree	String moduleName = CompilerInput ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = CompilerInput ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

144
Tree	String moduleName = moduleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = moduleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

145
Tree	String moduleName = exprResult ( visitScript ) ;
Code	String moduleName = exprResult ( visitScript ) ;
Distance : 5

146
Tree	String visitScript = exprResult ( script , script , getSourceFileName ) ;
Code	String visitScript = exprResult ( script , script , getSourceFileName ) ;
Distance : 6

147
Tree	String moduleName = moduleName ( var , script , getSourceFileName ) ;
Code	String moduleName = moduleName ( var , script , getSourceFileName ) ;
Distance : 5

148
Tree	String moduleName = objectlit ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = objectlit ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

149
Tree	String moduleName = JSModule ( script ) ;
Code	String moduleName = JSModule ( script ) ;
Distance : 4

150
Tree	String moduleName = CompilerInput ( var , script , getSourceFileName ) ;
Code	String moduleName = CompilerInput ( var , script , getSourceFileName ) ;
Distance : 5

151
Tree	String visitScript = exprResult ( script , script ) ;
Code	String visitScript = exprResult ( script , script ) ;
Distance : 5

152
Tree	String moduleName = moduleName ( var , script ) ;
Code	String moduleName = moduleName ( var , script ) ;
Distance : 5

153
Tree	String moduleName = exprResult ( visitScript ( script . getSourceFileName () ) , CHAR_CONS ) ;
Code	String moduleName = exprResult ( visitScript ( script . getSourceFileName () ) , CHAR_CONS ) ;
Distance : 6

154
Tree	String moduleName = exprResult ( exprResult ( script . getSourceFileName () ) , super ) ;
Code	String moduleName = exprResult ( exprResult ( script . getSourceFileName () ) , super ) ;
Distance : 6

155
Tree	String moduleName = visitScript ( exprResult ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String moduleName = visitScript ( exprResult ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 8

156
Tree	String moduleName = exprResult . exprResult ( script , script , getSourceFileName ) ;
Code	String moduleName = exprResult . exprResult ( script , script , getSourceFileName ) ;
Distance : 7

157
Tree	String moduleName = JSModule . exprResult ( var , script , getSourceFileName ) ;
Code	String moduleName = JSModule . exprResult ( var , script , getSourceFileName ) ;
Distance : 7

158
Tree	String moduleName = CompilerInput ( var , script ) ;
Code	String moduleName = CompilerInput ( var , script ) ;
Distance : 5

159
Tree	String moduleName = objectlit ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = objectlit ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

160
Tree	String moduleName = CompilerInput . exprResult ( script , script , getSourceFileName ) ;
Code	String moduleName = CompilerInput . exprResult ( script , script , getSourceFileName ) ;
Distance : 7

161
Tree	String moduleName = exprResult ( objectlit ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String moduleName = exprResult ( objectlit ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 8

162
Tree	String moduleName = visitScript ( exprResult ( script . getSourceFileName () ) ) ;
Code	String moduleName = visitScript ( exprResult ( script . getSourceFileName () ) ) ;
Distance : 4

163
Tree	String moduleName = exprResult ( var , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = exprResult ( var , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

164
Tree	String moduleName = visitScript ( script ) ;
Code	String moduleName = visitScript ( script ) ;
Distance : 4

165
Tree	String moduleName = moduleName . moduleName ( script , script , getSourceFileName ) ;
Code	String moduleName = moduleName . moduleName ( script , script , getSourceFileName ) ;
Distance : 7

166
Tree	String moduleName = exprResult ( var ) ;
Code	String moduleName = exprResult ( var ) ;
Distance : 5

167
Tree	String moduleName = exprResult ( visitScript ( script . getSourceFileName () ) , super ) ;
Code	String moduleName = exprResult ( visitScript ( script . getSourceFileName () ) , super ) ;
Distance : 6

168
Tree	String moduleName = visitScript ( visitScript ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String moduleName = visitScript ( visitScript ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 8

169
Tree	String moduleName = visitScript ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = visitScript ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

170
Tree	String moduleName = moduleName ( script , script ) ;
Code	String moduleName = moduleName ( script , script ) ;
Distance : 4

171
Tree	String moduleName = exprResult ( exprResult ( var . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = exprResult ( exprResult ( var . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

172
Tree	String moduleName = visitScript ( objectlit ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = visitScript ( objectlit ( getSourceFileName ( script ) ) ) ;
Distance : 7

173
Tree	String moduleName = exprResult ( exprResult ( getSourceFileName ( var ) ) ) ;
Code	String moduleName = exprResult ( exprResult ( getSourceFileName ( var ) ) ) ;
Distance : 7

174
Tree	String moduleName = visitScript ( script , NUMBER_CONSTANT ) ;
Code	String moduleName = visitScript ( script , NUMBER_CONSTANT ) ;
Distance : 4

175
Tree	String moduleName = exprResult ( objectlit ( script . getSourceFileName () ) ) ;
Code	String moduleName = exprResult ( objectlit ( script . getSourceFileName () ) ) ;
Distance : 4

176
Tree	String moduleName = exprResult ( var , getSourceFileName ( var . getSourceFileName () ) ) ;
Code	String moduleName = exprResult ( var , getSourceFileName ( var . getSourceFileName () ) ) ;
Distance : 7

177
Tree	String moduleName = JSModule . moduleName ( script , script , getSourceFileName ) ;
Code	String moduleName = JSModule . moduleName ( script , script , getSourceFileName ) ;
Distance : 7

178
Tree	String moduleName = visitScript ( script , getSourceFileName ( var . getSourceFileName () ) ) ;
Code	String moduleName = visitScript ( script , getSourceFileName ( var . getSourceFileName () ) ) ;
Distance : 6

179
Tree	String moduleName = visitScript ( visitScript ( script . getSourceFileName () ) ) ;
Code	String moduleName = visitScript ( visitScript ( script . getSourceFileName () ) ) ;
Distance : 4

180
Tree	String moduleName = exprResult ( var , NUMBER_CONSTANT ) ;
Code	String moduleName = exprResult ( var , NUMBER_CONSTANT ) ;
Distance : 5

181
Tree	String moduleName = visitScript ( objectlit ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = visitScript ( objectlit ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

182
Tree	String moduleName = visitScript ( exprResult ( script . getSourceFileName () ) , else ) ;
Code	String moduleName = visitScript ( exprResult ( script . getSourceFileName () ) , else ) ;
Distance : 6

183
Tree	String moduleName = JSModule ( script , script ) ;
Code	String moduleName = JSModule ( script , script ) ;
Distance : 4

184
Tree	String moduleName = CompilerInput ( exprResult ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = CompilerInput ( exprResult ( getSourceFileName ( script ) ) ) ;
Distance : 7

185
Tree	String moduleName = moduleName ( exprResult ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = moduleName ( exprResult ( getSourceFileName ( script ) ) ) ;
Distance : 7

186
Tree	String moduleName = exprResult ( exprResult ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , compiler ) ;
Code	String moduleName = exprResult ( exprResult ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , compiler ) ;
Distance : 13

187
Tree	String moduleName = exprResult ( visitScript ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , compiler ) ;
Code	String moduleName = exprResult ( visitScript ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , compiler ) ;
Distance : 13

188
Tree	String moduleName = visitScript ( exprResult ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , compiler ) ;
Code	String moduleName = visitScript ( exprResult ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , compiler ) ;
Distance : 13

189
Tree	String moduleName = visitScript ( var , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = visitScript ( var , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

190
Tree	String moduleName = exprResult ( objectlit ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , compiler ) ;
Code	String moduleName = exprResult ( objectlit ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , compiler ) ;
Distance : 13

191
Tree	String moduleName = exprResult ( exprResult ( var . getSourceFileName () ) ) ;
Code	String moduleName = exprResult ( exprResult ( var . getSourceFileName () ) ) ;
Distance : 5

192
Tree	String moduleName = visitScript ( exprResult ( script . getSourceFileName () ) , CHAR_CONS ) ;
Code	String moduleName = visitScript ( exprResult ( script . getSourceFileName () ) , CHAR_CONS ) ;
Distance : 6

193
Tree	String moduleName = scriptNodeCount . exprResult ( script , script , getSourceFileName ) ;
Code	String moduleName = scriptNodeCount . exprResult ( script , script , getSourceFileName ) ;
Distance : 7

194
Tree	String moduleName = visitScript ( visitScript ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , compiler ) ;
Code	String moduleName = visitScript ( visitScript ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , compiler ) ;
Distance : 13

195
Tree	String moduleName = exprResult ( exprResult ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , var , compiler ) ;
Code	String moduleName = exprResult ( exprResult ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , var , compiler ) ;
Distance : 13

196
Tree	String moduleName = visitScript ( objectlit ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , compiler ) ;
Code	String moduleName = visitScript ( objectlit ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , compiler ) ;
Distance : 13

197
Tree	String moduleName = exprResult ( visitScript ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , var , compiler ) ;
Code	String moduleName = exprResult ( visitScript ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , var , compiler ) ;
Distance : 13

198
Tree	String moduleName = exprResult ( exprResult ( getSourceFileName ( var . getSourceFileName () ) ) , STRING_CONSTANT , script , compiler ) ;
Code	String moduleName = exprResult ( exprResult ( getSourceFileName ( var . getSourceFileName () ) ) , STRING_CONSTANT , script , compiler ) ;
Distance : 14

199
Tree	String moduleName = exprResult ( exprResult ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , var ) ;
Code	String moduleName = exprResult ( exprResult ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , var ) ;
Distance : 13

========================================================================


========================================================================
Example Number: 33
Parent Code is: 
c . canInline ()
-------------------------------------------------------------------------------
Child code is: 
c . canInline ( t . getScope () )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (32 (800{val=c}) (235{val=.}) (802{val=canInline}) (216{val=()})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (32 (800{val=c}) (235{val=.}) (802{val=canInline}) (214{val=(}) (32 (800{val=t}) (235{val=.}) (802{val=getScope}) (216{val=()})) (215{val=)})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/3/parent/src_com_google_javascript_jscomp_FlowSensitiveInlineVariables.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	c . reachingDef ()
Code	c . reachingDef ()
Distance : 6

1
Tree	c . reachingDef ( c )
Code	c . reachingDef ( c )
Distance : 5

2
Tree	c . inGlobalScope ()
Code	c . inGlobalScope ()
Distance : 6

3
Tree	c . MaybeReachingVariableUse ()
Code	c . MaybeReachingVariableUse ()
Distance : 6

4
Tree	c . getCfg ()
Code	c . getCfg ()
Distance : 6

5
Tree	c . MustBeReachingVariableDef ()
Code	c . MustBeReachingVariableDef ()
Distance : 6

6
Tree	c . getScopeRoot ()
Code	c . getScopeRoot ()
Distance : 6

7
Tree	c . inGlobalScope ( c )
Code	c . inGlobalScope ( c )
Distance : 5

8
Tree	c . MaybeReachingVariableUse ( c )
Code	c . MaybeReachingVariableUse ( c )
Distance : 5

9
Tree	c . getCfg ( c )
Code	c . getCfg ( c )
Distance : 5

10
Tree	c . MustBeReachingVariableDef ( c )
Code	c . MustBeReachingVariableDef ( c )
Distance : 5

11
Tree	reachingDef ()
Code	reachingDef ()
Distance : 8

12
Tree	c . canInline ()
Code	c . canInline ()
Distance : 5

13
Tree	c . inGlobalScope ( c ) . reachingDef ()
Code	c . inGlobalScope ( c ) . reachingDef ()
Distance : 5

14
Tree	c . reachingDef ( c . getLastChild () )
Code	c . reachingDef ( c . getLastChild () )
Distance : 3

15
Tree	c . Lists ()
Code	c . Lists ()
Distance : 6

16
Tree	c . reachingDef ( c . inGlobalScope () )
Code	c . reachingDef ( c . inGlobalScope () )
Distance : 3

17
Tree	c . getCfg () . reachingDef ( c )
Code	c . getCfg () . reachingDef ( c )
Distance : 6

18
Tree	MaybeReachingVariableUse ( c )
Code	MaybeReachingVariableUse ( c )
Distance : 7

19
Tree	( ( c ) c ) . Lists ()
Code	( ( c ) c ) . Lists ()
Distance : 8

20
Tree	c . canInline () . reachingDef ()
Code	c . canInline () . reachingDef ()
Distance : 4

21
Tree	c . MustBeReachingVariableDef () . reachingDef ( c )
Code	c . MustBeReachingVariableDef () . reachingDef ( c )
Distance : 6

22
Tree	new MaybeReachingVariableUse ( c ) . reachingDef ( c )
Code	new MaybeReachingVariableUse ( c ) . reachingDef ( c )
Distance : 8

23
Tree	new MustBeReachingVariableDef ( c ) . MaybeReachingVariableUse ( c )
Code	new MustBeReachingVariableDef ( c ) . MaybeReachingVariableUse ( c )
Distance : 8

24
Tree	c . MustBeReachingVariableDef ()
Code	c . MustBeReachingVariableDef ()
Distance : 6

25
Tree	c . reachingDef ( STRING_CONSTANT )
Code	c . reachingDef ( STRING_CONSTANT )
Distance : 5

26
Tree	this . c . MaybeReachingVariableUse ()
Code	this . c . MaybeReachingVariableUse ()
Distance : 6

27
Tree	new c () . isFunction ( c )
Code	new c () . isFunction ( c )
Distance : 7

28
Tree	c . LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( c , c )
Code	c . LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( c , c )
Distance : 5

29
Tree	c . LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( null )
Code	c . LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( null )
Distance : 5

30
Tree	( ( c ) c ) . process ()
Code	( ( c ) c ) . process ()
Distance : 8

31
Tree	Lists ()
Code	Lists ()
Distance : 8

32
Tree	c . isFunction ( STRING_CONSTANT )
Code	c . isFunction ( STRING_CONSTANT )
Distance : 5

33
Tree	c . getScopeRoot ( c )
Code	c . getScopeRoot ( c )
Distance : 5

34
Tree	c . reachingDef ( c , c )
Code	c . reachingDef ( c , c )
Distance : 5

35
Tree	new MustBeReachingVariableDef ( c ) . getCfg ()
Code	new MustBeReachingVariableDef ( c ) . getCfg ()
Distance : 7

36
Tree	new MustBeReachingVariableDef ( c ) . getVarCount ()
Code	new MustBeReachingVariableDef ( c ) . getVarCount ()
Distance : 7

37
Tree	c . LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( STRING_CONSTANT )
Code	c . LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( STRING_CONSTANT )
Distance : 5

38
Tree	( ( c ) c ) . inGlobalScope ()
Code	( ( c ) c ) . inGlobalScope ()
Distance : 8

39
Tree	canInline ()
Code	canInline ()
Distance : 7

40
Tree	c . reachingDef () . reachingDef ()
Code	c . reachingDef () . reachingDef ()
Distance : 5

41
Tree	new MustBeReachingVariableDef ( c ) . reachingDef ( c )
Code	new MustBeReachingVariableDef ( c ) . reachingDef ( c )
Distance : 8

42
Tree	c . reachingDef ()
Code	c . reachingDef ()
Distance : 6

43
Tree	c . inGlobalScope ( c , c )
Code	c . inGlobalScope ( c , c )
Distance : 5

44
Tree	c . inGlobalScope ( null )
Code	c . inGlobalScope ( null )
Distance : 5

45
Tree	c . LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( c )
Code	c . LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( c )
Distance : 5

46
Tree	new MustBeReachingVariableDef ( c ) . MustBeReachingVariableDef ( c )
Code	new MustBeReachingVariableDef ( c ) . MustBeReachingVariableDef ( c )
Distance : 8

47
Tree	new c () . getCfg ( c )
Code	new c () . getCfg ( c )
Distance : 7

48
Tree	c . reachingDef ( null )
Code	c . reachingDef ( null )
Distance : 5

49
Tree	c . Lists () . reachingDef ()
Code	c . Lists () . reachingDef ()
Distance : 5

50
Tree	c . reachingDef ( reachingDef )
Code	c . reachingDef ( reachingDef )
Distance : 5

51
Tree	new MaybeReachingVariableUse ( c ) . reachingDef ()
Code	new MaybeReachingVariableUse ( c ) . reachingDef ()
Distance : 7

52
Tree	this . c . inGlobalScope ()
Code	this . c . inGlobalScope ()
Distance : 6

53
Tree	inGlobalScope ()
Code	inGlobalScope ()
Distance : 8

54
Tree	getCfg ()
Code	getCfg ()
Distance : 8

55
Tree	new MustBeReachingVariableDef ( c ) . MaybeReachingVariableUse ()
Code	new MustBeReachingVariableDef ( c ) . MaybeReachingVariableUse ()
Distance : 7

56
Tree	( ( c ) c ) . reachingDef ()
Code	( ( c ) c ) . reachingDef ()
Distance : 8

57
Tree	c . reachingDef ( c ) . reachingDef ()
Code	c . reachingDef ( c ) . reachingDef ()
Distance : 5

58
Tree	getCfg () . reachingDef ( c )
Code	getCfg () . reachingDef ( c )
Distance : 7

59
Tree	new c () . getVarCount ( c )
Code	new c () . getVarCount ( c )
Distance : 7

60
Tree	MustBeReachingVariableDef ()
Code	MustBeReachingVariableDef ()
Distance : 8

61
Tree	canInline ( c )
Code	canInline ( c )
Distance : 6

62
Tree	this . c . getScopeRoot ()
Code	this . c . getScopeRoot ()
Distance : 6

63
Tree	inGlobalScope ( c )
Code	inGlobalScope ( c )
Distance : 7

64
Tree	c . MaybeReachingVariableUse ()
Code	c . MaybeReachingVariableUse ()
Distance : 6

65
Tree	c . getScopeRoot () . reachingDef ()
Code	c . getScopeRoot () . reachingDef ()
Distance : 5

66
Tree	isFunction . reachingDef ()
Code	isFunction . reachingDef ()
Distance : 7

67
Tree	c . canInline ( c )
Code	c . canInline ( c )
Distance : 4

68
Tree	c . MaybeReachingVariableUse ( c , c )
Code	c . MaybeReachingVariableUse ( c , c )
Distance : 5

69
Tree	this . c . canInline ()
Code	this . c . canInline ()
Distance : 6

70
Tree	( ( c ) c ) . getVarCount ()
Code	( ( c ) c ) . getVarCount ()
Distance : 8

71
Tree	c . inGlobalScope ( c . getScopeRoot () )
Code	c . inGlobalScope ( c . getScopeRoot () )
Distance : 3

72
Tree	c . getCfg ( c , c )
Code	c . getCfg ( c , c )
Distance : 5

73
Tree	new c () . canInline ( c )
Code	new c () . canInline ( c )
Distance : 6

74
Tree	c . MaybeReachingVariableUse ( null )
Code	c . MaybeReachingVariableUse ( null )
Distance : 5

75
Tree	this . c . getVarCount ()
Code	this . c . getVarCount ()
Distance : 6

76
Tree	new c () . MustBeReachingVariableDef ( c )
Code	new c () . MustBeReachingVariableDef ( c )
Distance : 7

77
Tree	( ( c ) c ) . MaybeReachingVariableUse ()
Code	( ( c ) c ) . MaybeReachingVariableUse ()
Distance : 8

78
Tree	c . isFunction ( c )
Code	c . isFunction ( c )
Distance : 5

79
Tree	c . MustBeReachingVariableDef ( c , c )
Code	c . MustBeReachingVariableDef ( c , c )
Distance : 5

80
Tree	new MaybeReachingVariableUse ( c ) . MustBeReachingVariableDef ()
Code	new MaybeReachingVariableUse ( c ) . MustBeReachingVariableDef ()
Distance : 7

81
Tree	new c () . Lists ( c )
Code	new c () . Lists ( c )
Distance : 7

82
Tree	( ( c ) c ) . canInline ()
Code	( ( c ) c ) . canInline ()
Distance : 8

83
Tree	c . Lists ( c )
Code	c . Lists ( c )
Distance : 5

84
Tree	new MustBeReachingVariableDef ( c ) . Lists ()
Code	new MustBeReachingVariableDef ( c ) . Lists ()
Distance : 7

85
Tree	new MustBeReachingVariableDef ( c ) . getVarCount ( c )
Code	new MustBeReachingVariableDef ( c ) . getVarCount ( c )
Distance : 8

86
Tree	new c () . reachingDef ( c )
Code	new c () . reachingDef ( c )
Distance : 7

87
Tree	new MustBeReachingVariableDef ( c ) . inGlobalScope ()
Code	new MustBeReachingVariableDef ( c ) . inGlobalScope ()
Distance : 7

88
Tree	c . getCfg ( null )
Code	c . getCfg ( null )
Distance : 5

89
Tree	c . reachingDef ( c ) . inGlobalScope ()
Code	c . reachingDef ( c ) . inGlobalScope ()
Distance : 5

90
Tree	c . canInline ( STRING_CONSTANT )
Code	c . canInline ( STRING_CONSTANT )
Distance : 4

91
Tree	c . getScopeRoot ( c ) . reachingDef ()
Code	c . getScopeRoot ( c ) . reachingDef ()
Distance : 5

92
Tree	c . reachingDef ( c ) . getVarCount ()
Code	c . reachingDef ( c ) . getVarCount ()
Distance : 5

93
Tree	getVarCount ( c )
Code	getVarCount ( c )
Distance : 7

94
Tree	reachingDef () . inGlobalScope ( c )
Code	reachingDef () . inGlobalScope ( c )
Distance : 7

95
Tree	c . Lists ( STRING_CONSTANT )
Code	c . Lists ( STRING_CONSTANT )
Distance : 5

96
Tree	inGlobalScope () . reachingDef ( c )
Code	inGlobalScope () . reachingDef ( c )
Distance : 7

97
Tree	c . inGlobalScope ( c . getLastChild () )
Code	c . inGlobalScope ( c . getLastChild () )
Distance : 3

98
Tree	c . MustBeReachingVariableDef ( null )
Code	c . MustBeReachingVariableDef ( null )
Distance : 5

99
Tree	c . reachingDef ( canInline )
Code	c . reachingDef ( canInline )
Distance : 5

100
Tree	getScopeRoot ( c )
Code	getScopeRoot ( c )
Distance : 7

101
Tree	new MustBeReachingVariableDef ( c ) . reachingDef ()
Code	new MustBeReachingVariableDef ( c ) . reachingDef ()
Distance : 7

102
Tree	new MustBeReachingVariableDef ( c ) . MustBeReachingVariableDef ()
Code	new MustBeReachingVariableDef ( c ) . MustBeReachingVariableDef ()
Distance : 7

103
Tree	new c () . MaybeReachingVariableUse ( c )
Code	new c () . MaybeReachingVariableUse ( c )
Distance : 7

104
Tree	reachingDef ( c )
Code	reachingDef ( c )
Distance : 7

105
Tree	c . reachingDef ( LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE )
Code	c . reachingDef ( LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE )
Distance : 5

106
Tree	this . c . reachingDef ()
Code	this . c . reachingDef ()
Distance : 6

107
Tree	c . inGlobalScope ( STRING_CONSTANT )
Code	c . inGlobalScope ( STRING_CONSTANT )
Distance : 5

108
Tree	getVarCount ()
Code	getVarCount ()
Distance : 8

109
Tree	c . isFunction ( c , c )
Code	c . isFunction ( c , c )
Distance : 5

110
Tree	LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ()
Code	LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ()
Distance : 8

111
Tree	new c () . inGlobalScope ( c )
Code	new c () . inGlobalScope ( c )
Distance : 7

112
Tree	c . getScopeRoot ( STRING_CONSTANT )
Code	c . getScopeRoot ( STRING_CONSTANT )
Distance : 5

113
Tree	c . inGlobalScope ( reachingDef )
Code	c . inGlobalScope ( reachingDef )
Distance : 5

114
Tree	c . inGlobalScope ( getCfg )
Code	c . inGlobalScope ( getCfg )
Distance : 5

115
Tree	new MustBeReachingVariableDef ( c ) . canInline ()
Code	new MustBeReachingVariableDef ( c ) . canInline ()
Distance : 7

116
Tree	getCfg ( c )
Code	getCfg ( c )
Distance : 7

117
Tree	c . inGlobalScope ()
Code	c . inGlobalScope ()
Distance : 6

118
Tree	MaybeReachingVariableUse ()
Code	MaybeReachingVariableUse ()
Distance : 8

119
Tree	c . isFunction ( null )
Code	c . isFunction ( null )
Distance : 5

120
Tree	Lists ( c )
Code	Lists ( c )
Distance : 7

121
Tree	this . c . Lists ()
Code	this . c . Lists ()
Distance : 6

122
Tree	this . c . getCfg ()
Code	this . c . getCfg ()
Distance : 6

123
Tree	this . c . traverse ()
Code	this . c . traverse ()
Distance : 6

124
Tree	new MustBeReachingVariableDef ( c ) . Lists ( c )
Code	new MustBeReachingVariableDef ( c ) . Lists ( c )
Distance : 8

125
Tree	c . inGlobalScope () . reachingDef ()
Code	c . inGlobalScope () . reachingDef ()
Distance : 5

126
Tree	c . reachingDef ( getCfg )
Code	c . reachingDef ( getCfg )
Distance : 5

127
Tree	new MaybeReachingVariableUse ( c ) . MustBeReachingVariableDef ( c )
Code	new MaybeReachingVariableUse ( c ) . MustBeReachingVariableDef ( c )
Distance : 8

128
Tree	c . isFunction ()
Code	c . isFunction ()
Distance : 6

129
Tree	new MustBeReachingVariableDef ( c ) . inGlobalScope ( c )
Code	new MustBeReachingVariableDef ( c ) . inGlobalScope ( c )
Distance : 8

130
Tree	( ( c ) c ) . LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ()
Code	( ( c ) c ) . LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ()
Distance : 8

131
Tree	( ( c ) c ) . MustBeReachingVariableDef ()
Code	( ( c ) c ) . MustBeReachingVariableDef ()
Distance : 8

132
Tree	c . LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ()
Code	c . LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ()
Distance : 6

133
Tree	LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( c )
Code	LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( c )
Distance : 7

134
Tree	( ( c ) c ) . getCfg ()
Code	( ( c ) c ) . getCfg ()
Distance : 8

135
Tree	MustBeReachingVariableDef () . reachingDef ( c )
Code	MustBeReachingVariableDef () . reachingDef ( c )
Distance : 7

136
Tree	c . MaybeReachingVariableUse ( c ) . reachingDef ()
Code	c . MaybeReachingVariableUse ( c ) . reachingDef ()
Distance : 5

137
Tree	new MustBeReachingVariableDef () . reachingDef ( c )
Code	new MustBeReachingVariableDef () . reachingDef ( c )
Distance : 8

138
Tree	c . MustBeReachingVariableDef ( c ) . reachingDef ()
Code	c . MustBeReachingVariableDef ( c ) . reachingDef ()
Distance : 5

139
Tree	this . c . MustBeReachingVariableDef ()
Code	this . c . MustBeReachingVariableDef ()
Distance : 6

140
Tree	c . MaybeReachingVariableUse ( STRING_CONSTANT )
Code	c . MaybeReachingVariableUse ( STRING_CONSTANT )
Distance : 5

141
Tree	c . getScopeRoot ( c , c )
Code	c . getScopeRoot ( c , c )
Distance : 5

142
Tree	getScopeRoot ()
Code	getScopeRoot ()
Distance : 8

143
Tree	c . getCfg ( STRING_CONSTANT )
Code	c . getCfg ( STRING_CONSTANT )
Distance : 5

144
Tree	c . canInline ( c , c )
Code	c . canInline ( c , c )
Distance : 4

145
Tree	c . Lists ( c , c )
Code	c . Lists ( c , c )
Distance : 5

146
Tree	c . reachingDef ( c . getScopeRoot () )
Code	c . reachingDef ( c . getScopeRoot () )
Distance : 3

147
Tree	c . MaybeReachingVariableUse () . reachingDef ()
Code	c . MaybeReachingVariableUse () . reachingDef ()
Distance : 5

148
Tree	c . MustBeReachingVariableDef ( STRING_CONSTANT )
Code	c . MustBeReachingVariableDef ( STRING_CONSTANT )
Distance : 5

149
Tree	c . canInline ( null )
Code	c . canInline ( null )
Distance : 4

150
Tree	c . getCfg ()
Code	c . getCfg ()
Distance : 6

151
Tree	c . reachingDef ( c . reachingDef () )
Code	c . reachingDef ( c . reachingDef () )
Distance : 3

152
Tree	MaybeReachingVariableUse () . reachingDef ( c )
Code	MaybeReachingVariableUse () . reachingDef ( c )
Distance : 7

153
Tree	getCfg () . isFunction ( c )
Code	getCfg () . isFunction ( c )
Distance : 7

154
Tree	c . reachingDef ( c ) . MustBeReachingVariableDef ()
Code	c . reachingDef ( c ) . MustBeReachingVariableDef ()
Distance : 5

155
Tree	c . inGlobalScope () . reachingDef ( c )
Code	c . inGlobalScope () . reachingDef ( c )
Distance : 6

156
Tree	c . getVarCount ()
Code	c . getVarCount ()
Distance : 6

157
Tree	MustBeReachingVariableDef ( c )
Code	MustBeReachingVariableDef ( c )
Distance : 7

158
Tree	c . MaybeReachingVariableUse ( c . getScopeRoot () )
Code	c . MaybeReachingVariableUse ( c . getScopeRoot () )
Distance : 3

159
Tree	c . reachingDef () . reachingDef ( c )
Code	c . reachingDef () . reachingDef ( c )
Distance : 6

160
Tree	getCfg () . inGlobalScope ( c )
Code	getCfg () . inGlobalScope ( c )
Distance : 7

161
Tree	c . getCfg ( c . getScopeRoot () )
Code	c . getCfg ( c . getScopeRoot () )
Distance : 3

162
Tree	c . MustBeReachingVariableDef ( c . getScopeRoot () )
Code	c . MustBeReachingVariableDef ( c . getScopeRoot () )
Distance : 3

163
Tree	c . Lists ()
Code	c . Lists ()
Distance : 6

164
Tree	c . reachingDef () . inGlobalScope ()
Code	c . reachingDef () . inGlobalScope ()
Distance : 5

165
Tree	c . reachingDef () . isFunction ()
Code	c . reachingDef () . isFunction ()
Distance : 5

166
Tree	c . getScopeRoot ( null )
Code	c . getScopeRoot ( null )
Distance : 5

167
Tree	new MustBeReachingVariableDef ( c ) . canInline ( c )
Code	new MustBeReachingVariableDef ( c ) . canInline ( c )
Distance : 8

168
Tree	isFunction . inGlobalScope ()
Code	isFunction . inGlobalScope ()
Distance : 7

169
Tree	c . Lists ( null )
Code	c . Lists ( null )
Distance : 5

170
Tree	reachingDef () . reachingDef ( c )
Code	reachingDef () . reachingDef ( c )
Distance : 7

171
Tree	c . getScopeRoot ( c . getScopeRoot () )
Code	c . getScopeRoot ( c . getScopeRoot () )
Distance : 3

172
Tree	new MustBeReachingVariableDef ( c ) . getCfg ( c )
Code	new MustBeReachingVariableDef ( c ) . getCfg ( c )
Distance : 8

173
Tree	c . reachingDef ( getCfg () , c . getScopeRoot () )
Code	c . reachingDef ( getCfg () , c . getScopeRoot () )
Distance : 6

174
Tree	c . canInline ()
Code	c . canInline ()
Distance : 5

175
Tree	c . inGlobalScope ( getCfg () , c . getScopeRoot () )
Code	c . inGlobalScope ( getCfg () , c . getScopeRoot () )
Distance : 6

176
Tree	c . getScopeRoot () . reachingDef ( c )
Code	c . getScopeRoot () . reachingDef ( c )
Distance : 6

177
Tree	c . getCfg () . reachingDef ()
Code	c . getCfg () . reachingDef ()
Distance : 5

178
Tree	c . getCfg ( c ) . reachingDef ()
Code	c . getCfg ( c ) . reachingDef ()
Distance : 5

179
Tree	c . MustBeReachingVariableDef () . reachingDef ()
Code	c . MustBeReachingVariableDef () . reachingDef ()
Distance : 5

180
Tree	c . MaybeReachingVariableUse ( reachingDef )
Code	c . MaybeReachingVariableUse ( reachingDef )
Distance : 5

181
Tree	c . reachingDef ( MaybeReachingVariableUse )
Code	c . reachingDef ( MaybeReachingVariableUse )
Distance : 5

182
Tree	c . reachingDef ( c ) . getCfg ()
Code	c . reachingDef ( c ) . getCfg ()
Distance : 5

183
Tree	c . MaybeReachingVariableUse () . reachingDef ( c )
Code	c . MaybeReachingVariableUse () . reachingDef ( c )
Distance : 6

184
Tree	reachingDef () . isFunction ( c )
Code	reachingDef () . isFunction ( c )
Distance : 7

185
Tree	c . canInline () . reachingDef ( c )
Code	c . canInline () . reachingDef ( c )
Distance : 5

186
Tree	c . MaybeReachingVariableUse ( getCfg () , c . getScopeRoot () )
Code	c . MaybeReachingVariableUse ( getCfg () , c . getScopeRoot () )
Distance : 6

187
Tree	c . getCfg ( getCfg () , c . getScopeRoot () )
Code	c . getCfg ( getCfg () , c . getScopeRoot () )
Distance : 6

188
Tree	canInline () . reachingDef ( c )
Code	canInline () . reachingDef ( c )
Distance : 7

189
Tree	c . MaybeReachingVariableUse ( getCfg )
Code	c . MaybeReachingVariableUse ( getCfg )
Distance : 5

190
Tree	c . reachingDef ( MustBeReachingVariableDef )
Code	c . reachingDef ( MustBeReachingVariableDef )
Distance : 5

191
Tree	c . Lists () . reachingDef ( c )
Code	c . Lists () . reachingDef ( c )
Distance : 6

192
Tree	c . reachingDef () . isFunction ( c )
Code	c . reachingDef () . isFunction ( c )
Distance : 6

193
Tree	c . MustBeReachingVariableDef ( getCfg () , c . getScopeRoot () )
Code	c . MustBeReachingVariableDef ( getCfg () , c . getScopeRoot () )
Distance : 6

194
Tree	c . reachingDef ( getScopeRoot () , c . getScopeRoot () )
Code	c . reachingDef ( getScopeRoot () , c . getScopeRoot () )
Distance : 6

195
Tree	c . getScopeRoot ( getCfg () , c . getScopeRoot () )
Code	c . getScopeRoot ( getCfg () , c . getScopeRoot () )
Distance : 6

196
Tree	c . reachingDef ( inGlobalScope () , c . getScopeRoot () )
Code	c . reachingDef ( inGlobalScope () , c . getScopeRoot () )
Distance : 6

197
Tree	c . reachingDef ( getCfg () , c . reachingDef () )
Code	c . reachingDef ( getCfg () , c . reachingDef () )
Distance : 6

198
Tree	c . reachingDef () . inGlobalScope ( c )
Code	c . reachingDef () . inGlobalScope ( c )
Distance : 6

199
Tree	c . reachingDef ( getVarCount () , c . getScopeRoot () )
Code	c . reachingDef ( getVarCount () , c . getScopeRoot () )
Distance : 6

========================================================================


========================================================================
Example Number: 34
Parent Code is: 
int len = thisBuf.length - strLen ;
-------------------------------------------------------------------------------
Child code is: 
int len = size - strLen + NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=len}) (204{val==}) (27 (40{val=thisBuf.length}) (201{val=-}) (800{val=strLen}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=len}) (204{val==}) (27 (27 (800{val=size}) (201{val=-}) (800{val=strLen})) (200{val=+}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/61/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	int len = NUMBER_CONSTANT * i ;
Code	int len = NUMBER_CONSTANT * i ;
Distance : 5

1
Tree	int len = i + strLen + strLen + strLen ;
Code	int len = i + strLen + strLen + strLen ;
Distance : 5

2
Tree	int len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

3
Tree	int len = thisBuf + strLen + strLen + strLen ;
Code	int len = thisBuf + strLen + strLen + strLen ;
Distance : 5

4
Tree	int len = startIndex + strLen + strLen + len ;
Code	int len = startIndex + strLen + strLen + len ;
Distance : 5

5
Tree	int len = startIndex % NUMBER_CONSTANT ;
Code	int len = startIndex % NUMBER_CONSTANT ;
Distance : 4

6
Tree	int len = i ;
Code	int len = i ;
Distance : 5

7
Tree	int len = len & NUMBER_CONSTANT ;
Code	int len = len & NUMBER_CONSTANT ;
Distance : 4

8
Tree	int len = thisBuf + NUMBER_CONSTANT ;
Code	int len = thisBuf + NUMBER_CONSTANT ;
Distance : 3

9
Tree	int len = startIndex + NUMBER_CONSTANT ;
Code	int len = startIndex + NUMBER_CONSTANT ;
Distance : 3

10
Tree	char len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	char len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

11
Tree	int len = thisBuf ;
Code	int len = thisBuf ;
Distance : 5

12
Tree	int len = size + strLen + strLen + len ;
Code	int len = size + strLen + strLen + len ;
Distance : 4

13
Tree	int len = i % NUMBER_CONSTANT ;
Code	int len = i % NUMBER_CONSTANT ;
Distance : 4

14
Tree	int len = size + NUMBER_CONSTANT ;
Code	int len = size + NUMBER_CONSTANT ;
Distance : 2

15
Tree	int len = i + NUMBER_CONSTANT ;
Code	int len = i + NUMBER_CONSTANT ;
Distance : 3

16
Tree	float len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	float len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

17
Tree	int len = j % NUMBER_CONSTANT ;
Code	int len = j % NUMBER_CONSTANT ;
Distance : 4

18
Tree	int len = NUMBER_CONSTANT - strLen ;
Code	int len = NUMBER_CONSTANT - strLen ;
Distance : 3

19
Tree	int len = i + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = i + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

20
Tree	int len = NUMBER_CONSTANT * strLen * strLen * thisBuf ;
Code	int len = NUMBER_CONSTANT * strLen * strLen * thisBuf ;
Distance : 6

21
Tree	int len = NUMBER_CONSTANT * strLen * str * outer ;
Code	int len = NUMBER_CONSTANT * strLen * str * outer ;
Distance : 6

22
Tree	int len = thisBuf % NUMBER_CONSTANT ;
Code	int len = thisBuf % NUMBER_CONSTANT ;
Distance : 4

23
Tree	boolean len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	boolean len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

24
Tree	int len = i & NUMBER_CONSTANT ;
Code	int len = i & NUMBER_CONSTANT ;
Distance : 4

25
Tree	int len = thisBuf + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = thisBuf + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

26
Tree	int len = NUMBER_CONSTANT * strLen * strLen * charAt ;
Code	int len = NUMBER_CONSTANT * strLen * strLen * charAt ;
Distance : 6

27
Tree	int len = thisBuf & NUMBER_CONSTANT ;
Code	int len = thisBuf & NUMBER_CONSTANT ;
Distance : 4

28
Tree	double len = startIndex ;
Code	double len = startIndex ;
Distance : 6

29
Tree	int len = outer + NUMBER_CONSTANT ;
Code	int len = outer + NUMBER_CONSTANT ;
Distance : 3

30
Tree	float len = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	float len = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 6

31
Tree	int len = outer ;
Code	int len = outer ;
Distance : 5

32
Tree	byte len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	byte len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

33
Tree	double len = NUMBER_CONSTANT * thisBuf ;
Code	double len = NUMBER_CONSTANT * thisBuf ;
Distance : 6

34
Tree	int len = STRING_CONSTANT + strLen ;
Code	int len = STRING_CONSTANT + strLen ;
Distance : 4

35
Tree	double len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Code	double len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Distance : 6

36
Tree	int len = NUMBER_CONSTANT * charAt ;
Code	int len = NUMBER_CONSTANT * charAt ;
Distance : 5

37
Tree	char len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	char len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

38
Tree	int len = thisBuf () - strLen ;
Code	int len = thisBuf () - strLen ;
Distance : 4

39
Tree	double len = size - strLen ;
Code	double len = size - strLen ;
Distance : 3

40
Tree	int len = NUMBER_CONSTANT - charAt ;
Code	int len = NUMBER_CONSTANT - charAt ;
Distance : 4

41
Tree	int len = outer + strLen + strLen + len ;
Code	int len = outer + strLen + strLen + len ;
Distance : 5

42
Tree	int len = i / strLen ;
Code	int len = i / strLen ;
Distance : 4

43
Tree	int len = len () - strLen ;
Code	int len = len () - strLen ;
Distance : 4

44
Tree	double len = startIndex - strLen ;
Code	double len = startIndex - strLen ;
Distance : 4

45
Tree	int len = buffer % NUMBER_CONSTANT ;
Code	int len = buffer % NUMBER_CONSTANT ;
Distance : 4

46
Tree	double len = outer + NUMBER_CONSTANT ;
Code	double len = outer + NUMBER_CONSTANT ;
Distance : 4

47
Tree	int len = startIndex + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = startIndex + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

48
Tree	int len = len + strLen + strLen + strLen ;
Code	int len = len + strLen + strLen + strLen ;
Distance : 5

49
Tree	int len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

50
Tree	boolean len = NUMBER_CONSTANT - strLen ;
Code	boolean len = NUMBER_CONSTANT - strLen ;
Distance : 4

51
Tree	byte len = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	byte len = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 6

52
Tree	int len = startIndex / strLen - strLen ;
Code	int len = startIndex / strLen - strLen ;
Distance : 4

53
Tree	long len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	long len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

54
Tree	double strLen = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double strLen = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 14

55
Tree	int len = thisBuf / strLen ;
Code	int len = thisBuf / strLen ;
Distance : 4

56
Tree	int len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

57
Tree	int len = startIndex + size () + strLen ;
Code	int len = startIndex + size () + strLen ;
Distance : 5

58
Tree	int len = len + startIndex () + strLen ;
Code	int len = len + startIndex () + strLen ;
Distance : 5

59
Tree	int len = NUMBER_CONSTANT * startIndex ;
Code	int len = NUMBER_CONSTANT * startIndex ;
Distance : 5

60
Tree	double len = outer % NUMBER_CONSTANT ;
Code	double len = outer % NUMBER_CONSTANT ;
Distance : 5

61
Tree	int len = buffer + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = buffer + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

62
Tree	int len = outer + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = outer + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

63
Tree	int len = NUMBER_CONSTANT - str ;
Code	int len = NUMBER_CONSTANT - str ;
Distance : 4

64
Tree	double len = size () - strLen ;
Code	double len = size () - strLen ;
Distance : 4

65
Tree	int len = buffer - strLen ;
Code	int len = buffer - strLen ;
Distance : 3

66
Tree	double strLen = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double strLen = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 16

67
Tree	char len = STRING_CONSTANT + strLen ;
Code	char len = STRING_CONSTANT + strLen ;
Distance : 5

68
Tree	int len = NUMBER_CONSTANT - len ;
Code	int len = NUMBER_CONSTANT - len ;
Distance : 4

69
Tree	byte len = NUMBER_CONSTANT - strLen ;
Code	byte len = NUMBER_CONSTANT - strLen ;
Distance : 4

70
Tree	int len = j / strLen ;
Code	int len = j / strLen ;
Distance : 4

71
Tree	int len = startIndex + startIndex () + strLen ;
Code	int len = startIndex + startIndex () + strLen ;
Distance : 5

72
Tree	int len = getProperNumerator > > > NUMBER_CONSTANT ;
Code	int len = getProperNumerator > > > NUMBER_CONSTANT ;
Distance : 4

73
Tree	int len = STRING_CONSTANT + charAt ;
Code	int len = STRING_CONSTANT + charAt ;
Distance : 4

74
Tree	int len = NUMBER_CONSTANT * thisBuf ;
Code	int len = NUMBER_CONSTANT * thisBuf ;
Distance : 5

75
Tree	int len = thisBuf.length () - strLen ;
Code	int len = thisBuf.length () - strLen ;
Distance : 4

76
Tree	int len = thisBuf / strLen - strLen ;
Code	int len = thisBuf / strLen - strLen ;
Distance : 4

77
Tree	int len = size - strLen ;
Code	int len = size - strLen ;
Distance : 2

78
Tree	boolean len = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	boolean len = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 6

79
Tree	short len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	short len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

80
Tree	int len = STRING_CONSTANT + buffer ;
Code	int len = STRING_CONSTANT + buffer ;
Distance : 4

81
Tree	int len = NUMBER_CONSTANT * strLen * strLen * outer ;
Code	int len = NUMBER_CONSTANT * strLen * strLen * outer ;
Distance : 6

82
Tree	byte len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	byte len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

83
Tree	int len = charAt + NUMBER_CONSTANT ;
Code	int len = charAt + NUMBER_CONSTANT ;
Distance : 3

84
Tree	int len = j - strLen ;
Code	int len = j - strLen ;
Distance : 3

85
Tree	int len = outer () - strLen ;
Code	int len = outer () - strLen ;
Distance : 4

86
Tree	int len = startIndex & NUMBER_CONSTANT ;
Code	int len = startIndex & NUMBER_CONSTANT ;
Distance : 4

87
Tree	double len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

88
Tree	int len = outer & NUMBER_CONSTANT ;
Code	int len = outer & NUMBER_CONSTANT ;
Distance : 4

89
Tree	int len = len ;
Code	int len = len ;
Distance : 5

90
Tree	double len = outer & NUMBER_CONSTANT ;
Code	double len = outer & NUMBER_CONSTANT ;
Distance : 5

91
Tree	int len = startIndex + strLen + strLen + strLen ;
Code	int len = startIndex + strLen + strLen + strLen ;
Distance : 5

92
Tree	boolean len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	boolean len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

93
Tree	int strLen = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int strLen = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

94
Tree	int len = startIndex ;
Code	int len = startIndex ;
Distance : 5

95
Tree	byte len = STRING_CONSTANT + strLen ;
Code	byte len = STRING_CONSTANT + strLen ;
Distance : 5

96
Tree	boolean len = STRING_CONSTANT + strLen ;
Code	boolean len = STRING_CONSTANT + strLen ;
Distance : 5

97
Tree	char len = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	char len = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 6

98
Tree	int len = buffer & NUMBER_CONSTANT ;
Code	int len = buffer & NUMBER_CONSTANT ;
Distance : 4

99
Tree	int len = size + size () + strLen ;
Code	int len = size + size () + strLen ;
Distance : 4

100
Tree	int len = outer / strLen ;
Code	int len = outer / strLen ;
Distance : 4

101
Tree	int len = size % NUMBER_CONSTANT ;
Code	int len = size % NUMBER_CONSTANT ;
Distance : 3

102
Tree	int len = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 5

103
Tree	int len = size & NUMBER_CONSTANT ;
Code	int len = size & NUMBER_CONSTANT ;
Distance : 3

104
Tree	int len = buffer / strLen ;
Code	int len = buffer / strLen ;
Distance : 4

105
Tree	int len = outer - strLen ;
Code	int len = outer - strLen ;
Distance : 3

106
Tree	int len = startIndex / str ;
Code	int len = startIndex / str ;
Distance : 5

107
Tree	int len = requirePrinter > > > NUMBER_CONSTANT ;
Code	int len = requirePrinter > > > NUMBER_CONSTANT ;
Distance : 4

108
Tree	double len = thisBuf + NUMBER_CONSTANT ;
Code	double len = thisBuf + NUMBER_CONSTANT ;
Distance : 4

109
Tree	double len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

110
Tree	int len = NUMBER_CONSTANT * size ;
Code	int len = NUMBER_CONSTANT * size ;
Distance : 5

111
Tree	int len = coefficients.length > > > NUMBER_CONSTANT ;
Code	int len = coefficients.length > > > NUMBER_CONSTANT ;
Distance : 4

112
Tree	double len = startIndex / strLen - strLen ;
Code	double len = startIndex / strLen - strLen ;
Distance : 5

113
Tree	int len = NUMBER_CONSTANT * thisBuf.length ;
Code	int len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 5

114
Tree	int len = size + strLen + strLen + strLen ;
Code	int len = size + strLen + strLen + strLen ;
Distance : 4

115
Tree	float len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	float len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

116
Tree	int len = size / strLen ;
Code	int len = size / strLen ;
Distance : 3

117
Tree	long len = NUMBER_CONSTANT - strLen ;
Code	long len = NUMBER_CONSTANT - strLen ;
Distance : 4

118
Tree	int len = NUMBER_CONSTANT * strLen * str * thisBuf ;
Code	int len = NUMBER_CONSTANT * strLen * str * thisBuf ;
Distance : 6

119
Tree	int len = buffer / strLen - strLen ;
Code	int len = buffer / strLen - strLen ;
Distance : 4

120
Tree	int len = j / strLen - strLen ;
Code	int len = j / strLen - strLen ;
Distance : 4

121
Tree	int len = NUMBER_CONSTANT * strLen * strLen * startIndex ;
Code	int len = NUMBER_CONSTANT * strLen * strLen * startIndex ;
Distance : 6

122
Tree	int len = startIndex + STRING_CONSTANT + startIndex ;
Code	int len = startIndex + STRING_CONSTANT + startIndex ;
Distance : 4

123
Tree	int len = len - strLen ;
Code	int len = len - strLen ;
Distance : 3

124
Tree	int len = size () - strLen ;
Code	int len = size () - strLen ;
Distance : 3

125
Tree	int len = NUMBER_CONSTANT * outer ;
Code	int len = NUMBER_CONSTANT * outer ;
Distance : 5

126
Tree	double len = startIndex % NUMBER_CONSTANT ;
Code	double len = startIndex % NUMBER_CONSTANT ;
Distance : 5

127
Tree	int len = outer + size () + strLen ;
Code	int len = outer + size () + strLen ;
Distance : 5

128
Tree	int len = startIndex / str - strLen ;
Code	int len = startIndex / str - strLen ;
Distance : 5

129
Tree	int len = outer + strLen + strLen + strLen ;
Code	int len = outer + strLen + strLen + strLen ;
Distance : 5

130
Tree	int len = startIndex + STRING_CONSTANT + size ;
Code	int len = startIndex + STRING_CONSTANT + size ;
Distance : 4

131
Tree	int len = size ;
Code	int len = size ;
Distance : 4

132
Tree	int len = len / strLen ;
Code	int len = len / strLen ;
Distance : 4

133
Tree	int len = outer / strLen - strLen ;
Code	int len = outer / strLen - strLen ;
Distance : 4

134
Tree	int len = size + STRING_CONSTANT + startIndex ;
Code	int len = size + STRING_CONSTANT + startIndex ;
Distance : 3

135
Tree	int len = size + STRING_CONSTANT + len ;
Code	int len = size + STRING_CONSTANT + len ;
Distance : 3

136
Tree	double len = size ;
Code	double len = size ;
Distance : 5

137
Tree	int len = outer % NUMBER_CONSTANT ;
Code	int len = outer % NUMBER_CONSTANT ;
Distance : 4

138
Tree	int len = NUMBER_CONSTANT * strLen * str * startIndex ;
Code	int len = NUMBER_CONSTANT * strLen * str * startIndex ;
Distance : 6

139
Tree	int len = size / strLen - strLen ;
Code	int len = size / strLen - strLen ;
Distance : 3

140
Tree	int len = thisBuf.length + NUMBER_CONSTANT ;
Code	int len = thisBuf.length + NUMBER_CONSTANT ;
Distance : 3

141
Tree	int len = startIndex () - strLen ;
Code	int len = startIndex () - strLen ;
Distance : 4

142
Tree	int len = j ;
Code	int len = j ;
Distance : 5

143
Tree	double len = NUMBER_CONSTANT * strLen * strLen * startIndex ;
Code	double len = NUMBER_CONSTANT * strLen * strLen * startIndex ;
Distance : 7

144
Tree	int len = startIndex + STRING_CONSTANT + len ;
Code	int len = startIndex + STRING_CONSTANT + len ;
Distance : 4

145
Tree	int len = len + size () + strLen ;
Code	int len = len + size () + strLen ;
Distance : 5

146
Tree	int len = Sigmoid > > > NUMBER_CONSTANT ;
Code	int len = Sigmoid > > > NUMBER_CONSTANT ;
Distance : 4

147
Tree	int len = STRING_CONSTANT + len ;
Code	int len = STRING_CONSTANT + len ;
Distance : 4

148
Tree	int len = len / strLen - strLen ;
Code	int len = len / strLen - strLen ;
Distance : 4

149
Tree	int len = indexOf () - strLen ;
Code	int len = indexOf () - strLen ;
Distance : 4

150
Tree	double len = startIndex + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double len = startIndex + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

151
Tree	double len = NUMBER_CONSTANT * startIndex ;
Code	double len = NUMBER_CONSTANT * startIndex ;
Distance : 6

152
Tree	int len = length () - strLen ;
Code	int len = length () - strLen ;
Distance : 4

153
Tree	double len = startIndex & NUMBER_CONSTANT ;
Code	double len = startIndex & NUMBER_CONSTANT ;
Distance : 5

154
Tree	int len = i - strLen ;
Code	int len = i - strLen ;
Distance : 3

155
Tree	int len = startIndex / strLen ;
Code	int len = startIndex / strLen ;
Distance : 4

156
Tree	long len = STRING_CONSTANT + strLen ;
Code	long len = STRING_CONSTANT + strLen ;
Distance : 5

157
Tree	int len = NUMBER_CONSTANT * len ;
Code	int len = NUMBER_CONSTANT * len ;
Distance : 5

158
Tree	int len = thisBuf - strLen ;
Code	int len = thisBuf - strLen ;
Distance : 3

159
Tree	int len = startIndex + STRING_CONSTANT + outer ;
Code	int len = startIndex + STRING_CONSTANT + outer ;
Distance : 4

160
Tree	int len = STRING_CONSTANT + str ;
Code	int len = STRING_CONSTANT + str ;
Distance : 4

161
Tree	long len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	long len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

162
Tree	int strLen = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	int strLen = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 6

163
Tree	int len = len % NUMBER_CONSTANT ;
Code	int len = len % NUMBER_CONSTANT ;
Distance : 4

164
Tree	int len = len + NUMBER_CONSTANT ;
Code	int len = len + NUMBER_CONSTANT ;
Distance : 3

165
Tree	int len = j + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = j + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

166
Tree	int len = outer + startIndex () + strLen ;
Code	int len = outer + startIndex () + strLen ;
Distance : 5

167
Tree	int len = outer + STRING_CONSTANT + startIndex ;
Code	int len = outer + STRING_CONSTANT + startIndex ;
Distance : 4

168
Tree	int len = buffer ;
Code	int len = buffer ;
Distance : 5

169
Tree	int len = size + startIndex () + strLen ;
Code	int len = size + startIndex () + strLen ;
Distance : 4

170
Tree	int strLen = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int strLen = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

171
Tree	int len = outer + STRING_CONSTANT + len ;
Code	int len = outer + STRING_CONSTANT + len ;
Distance : 4

172
Tree	int len = i + size () + strLen ;
Code	int len = i + size () + strLen ;
Distance : 5

173
Tree	int len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Distance : 5

174
Tree	int len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 14

175
Tree	int len = i / strLen - strLen ;
Code	int len = i / strLen - strLen ;
Distance : 4

176
Tree	double len = startIndex / strLen ;
Code	double len = startIndex / strLen ;
Distance : 5

177
Tree	int len = len + STRING_CONSTANT + startIndex ;
Code	int len = len + STRING_CONSTANT + startIndex ;
Distance : 4

178
Tree	long len = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	long len = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 6

179
Tree	int len = size + STRING_CONSTANT + size ;
Code	int len = size + STRING_CONSTANT + size ;
Distance : 3

180
Tree	int len = thisBuf + size () + strLen ;
Code	int len = thisBuf + size () + strLen ;
Distance : 5

181
Tree	int len = charAt () - strLen ;
Code	int len = charAt () - strLen ;
Distance : 4

182
Tree	short len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	short len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

183
Tree	int len = NUMBER_CONSTANT * strLen * strLen * len ;
Code	int len = NUMBER_CONSTANT * strLen * strLen * len ;
Distance : 6

184
Tree	int len = Cartesian2D.NEGATIVE_INFINITY > > > NUMBER_CONSTANT ;
Code	int len = Cartesian2D.NEGATIVE_INFINITY > > > NUMBER_CONSTANT ;
Distance : 4

185
Tree	int len = chars.length > > > NUMBER_CONSTANT ;
Code	int len = chars.length > > > NUMBER_CONSTANT ;
Distance : 4

186
Tree	int len = NUMBER_CONSTANT - buffer ;
Code	int len = NUMBER_CONSTANT - buffer ;
Distance : 4

187
Tree	int len = FACT.length > > > NUMBER_CONSTANT ;
Code	int len = FACT.length > > > NUMBER_CONSTANT ;
Distance : 4

188
Tree	double len = NUMBER_CONSTANT - strLen ;
Code	double len = NUMBER_CONSTANT - strLen ;
Distance : 4

189
Tree	int len = Cartesian3D.POSITIVE_INFINITY > > > NUMBER_CONSTANT ;
Code	int len = Cartesian3D.POSITIVE_INFINITY > > > NUMBER_CONSTANT ;
Distance : 4

190
Tree	int len = greatestCommonDivisor > > > NUMBER_CONSTANT ;
Code	int len = greatestCommonDivisor > > > NUMBER_CONSTANT ;
Distance : 4

191
Tree	int len = set.length > > > NUMBER_CONSTANT ;
Code	int len = set.length > > > NUMBER_CONSTANT ;
Distance : 4

192
Tree	double len = STRING_CONSTANT + strLen ;
Code	double len = STRING_CONSTANT + strLen ;
Distance : 5

193
Tree	double len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

194
Tree	double len = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	double len = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 6

195
Tree	int len = startIndex + strLen + strLen + charAt ;
Code	int len = startIndex + strLen + strLen + charAt ;
Distance : 5

196
Tree	int len = startIndex - strLen ;
Code	int len = startIndex - strLen ;
Distance : 3

197
Tree	int len = NUMBER_CONSTANT * strLen * strLen * size ;
Code	int len = NUMBER_CONSTANT * strLen * strLen * size ;
Distance : 6

198
Tree	int len = j & NUMBER_CONSTANT ;
Code	int len = j & NUMBER_CONSTANT ;
Distance : 4

199
Tree	char len = NUMBER_CONSTANT - strLen ;
Code	char len = NUMBER_CONSTANT - strLen ;
Distance : 4

========================================================================


========================================================================
Example Number: 35
Parent Code is: 
i < thisBuf.length
-------------------------------------------------------------------------------
Child code is: 
i < size
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (40{val=thisBuf.length})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (800{val=size})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/60/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	i == i < *=
Code	i == i < *=
Distance : 3

1
Tree	this . startIndex () != i
Code	this . startIndex () != i
Distance : 6

2
Tree	i == i < -=
Code	i == i < -=
Distance : 3

3
Tree	startIndex () != startIndex
Code	startIndex () != startIndex
Distance : 4

4
Tree	i != null thisBuf.length *=
Code	i != null thisBuf.length *=
Distance : 4

5
Tree	thisBuf > NUMBER_CONSTANT
Code	thisBuf > NUMBER_CONSTANT
Distance : 3

6
Tree	i == i
Code	i == i
Distance : 2

7
Tree	i == null < [
Code	i == null < [
Distance : 3

8
Tree	i == startIndex
Code	i == startIndex
Distance : 2

9
Tree	startIndex > NUMBER_CONSTANT
Code	startIndex > NUMBER_CONSTANT
Distance : 3

10
Tree	i ( i ) != i
Code	i ( i ) != i
Distance : 5

11
Tree	this == buffer
Code	this == buffer
Distance : 3

12
Tree	i == size
Code	i == size
Distance : 1

13
Tree	i == null thisBuf.length instanceof
Code	i == null thisBuf.length instanceof
Distance : 4

14
Tree	i != null < :
Code	i != null < :
Distance : 3

15
Tree	startIndex ( i ) != i
Code	startIndex ( i ) != i
Distance : 5

16
Tree	ch != null
Code	ch != null
Distance : 3

17
Tree	buffer == i
Code	buffer == i
Distance : 3

18
Tree	i > NUMBER_CONSTANT
Code	i > NUMBER_CONSTANT
Distance : 2

19
Tree	i == i
Code	i == i
Distance : 2

20
Tree	this == i
Code	this == i
Distance : 3

21
Tree	i == indexOf
Code	i == indexOf
Distance : 2

22
Tree	i != null
Code	i != null
Distance : 2

23
Tree	i < indexOf
Code	i < indexOf
Distance : 1

24
Tree	i / startIndex
Code	i / startIndex
Distance : 2

25
Tree	this . buffer == i
Code	this . buffer == i
Distance : 5

26
Tree	i < thisBuf.length
Code	i < thisBuf.length
Distance : 1

27
Tree	i / i
Code	i / i
Distance : 2

28
Tree	this . i == i
Code	this . i == i
Distance : 4

29
Tree	i == buffer
Code	i == buffer
Distance : 2

30
Tree	i == ch
Code	i == ch
Distance : 2

31
Tree	i < i
Code	i < i
Distance : 1

32
Tree	buffer > NUMBER_CONSTANT
Code	buffer > NUMBER_CONSTANT
Distance : 3

33
Tree	startIndex == i
Code	startIndex == i
Distance : 3

34
Tree	i < thisBuf ()
Code	i < thisBuf ()
Distance : 2

35
Tree	buffer / i
Code	buffer / i
Distance : 3

36
Tree	ch == i
Code	ch == i
Distance : 3

37
Tree	i == null i extends
Code	i == null i extends
Distance : 4

38
Tree	i == thisBuf
Code	i == thisBuf
Distance : 2

39
Tree	this . i == size
Code	this . i == size
Distance : 3

40
Tree	this == ch
Code	this == ch
Distance : 3

41
Tree	i != null < /
Code	i != null < /
Distance : 3

42
Tree	i / buffer
Code	i / buffer
Distance : 2

43
Tree	thisBuf < startIndex
Code	thisBuf < startIndex
Distance : 2

44
Tree	i == thisBuf
Code	i == thisBuf
Distance : 2

45
Tree	i == thisBuf.length && i
Code	i == thisBuf.length && i
Distance : 4

46
Tree	startIndex / i
Code	startIndex / i
Distance : 3

47
Tree	i / size
Code	i / size
Distance : 1

48
Tree	thisBuf () != i
Code	thisBuf () != i
Distance : 4

49
Tree	i / ch
Code	i / ch
Distance : 2

50
Tree	i == null thisBuf.length ^
Code	i == null thisBuf.length ^
Distance : 4

51
Tree	i . i () != thisBuf.length
Code	i . i () != thisBuf.length
Distance : 5

52
Tree	this == i
Code	this == i
Distance : 3

53
Tree	this == thisBuf
Code	this == thisBuf
Distance : 3

54
Tree	i ( i ) != startIndex
Code	i ( i ) != startIndex
Distance : 5

55
Tree	ch > NUMBER_CONSTANT
Code	ch > NUMBER_CONSTANT
Distance : 3

56
Tree	i == i && i
Code	i == i && i
Distance : 4

57
Tree	buffer != null
Code	buffer != null
Distance : 3

58
Tree	i == null < /
Code	i == null < /
Distance : 3

59
Tree	i < ch
Code	i < ch
Distance : 1

60
Tree	i . size () != thisBuf.length
Code	i . size () != thisBuf.length
Distance : 4

61
Tree	ch / i
Code	ch / i
Distance : 3

62
Tree	i . size () != i
Code	i . size () != i
Distance : 4

63
Tree	this . size () != i
Code	this . size () != i
Distance : 5

64
Tree	i < size
Code	i < size
Distance : 0

65
Tree	i != null thisBuf.length %
Code	i != null thisBuf.length %
Distance : 4

66
Tree	i < indexOf ()
Code	i < indexOf ()
Distance : 2

67
Tree	startIndex == i
Code	startIndex == i
Distance : 3

68
Tree	i () != thisBuf.length
Code	i () != thisBuf.length
Distance : 3

69
Tree	i < thisBuf.length ()
Code	i < thisBuf.length ()
Distance : 2

70
Tree	startIndex () != thisBuf.length
Code	startIndex () != thisBuf.length
Distance : 4

71
Tree	i != null thisBuf.length >=
Code	i != null thisBuf.length >=
Distance : 4

72
Tree	i < ch ()
Code	i < ch ()
Distance : 2

73
Tree	i . < () thisBuf.length i ( i )
Code	i . < () thisBuf.length i ( i )
Distance : 7

74
Tree	thisBuf.length ( i ) != i
Code	thisBuf.length ( i ) != i
Distance : 5

75
Tree	this . thisBuf.length () != thisBuf.length
Code	this . thisBuf.length () != thisBuf.length
Distance : 6

76
Tree	i < size ()
Code	i < size ()
Distance : 1

77
Tree	i () != thisBuf
Code	i () != thisBuf
Distance : 3

78
Tree	i < buffer
Code	i < buffer
Distance : 1

79
Tree	i . startIndex () thisBuf.length startIndex ( i )
Code	i . startIndex () thisBuf.length startIndex ( i )
Distance : 8

80
Tree	this . startIndex () != thisBuf.length
Code	this . startIndex () != thisBuf.length
Distance : 6

81
Tree	this == indexOf
Code	this == indexOf
Distance : 3

82
Tree	this . i . size () != i
Code	this . i . size () != i
Distance : 6

83
Tree	this . startIndex () != thisBuf
Code	this . startIndex () != thisBuf
Distance : 6

84
Tree	i . i () thisBuf.length startIndex ( i )
Code	i . i () thisBuf.length startIndex ( i )
Distance : 8

85
Tree	this . i . startIndex () != startIndex
Code	this . i . startIndex () != startIndex
Distance : 7

86
Tree	i () != i
Code	i () != i
Distance : 3

87
Tree	this . i . thisBuf () != thisBuf
Code	this . i . thisBuf () != thisBuf
Distance : 7

88
Tree	this . i . thisBuf.length () != i
Code	this . i . thisBuf.length () != i
Distance : 7

89
Tree	startIndex () != thisBuf
Code	startIndex () != thisBuf
Distance : 4

90
Tree	this . i . thisBuf () != thisBuf.length
Code	this . i . thisBuf () != thisBuf.length
Distance : 7

91
Tree	i == i < /
Code	i == i < /
Distance : 3

92
Tree	i . thisBuf () thisBuf.length startIndex ( i )
Code	i . thisBuf () thisBuf.length startIndex ( i )
Distance : 8

93
Tree	i . size () thisBuf.length startIndex ( i )
Code	i . size () thisBuf.length startIndex ( i )
Distance : 7

94
Tree	thisBuf.length () != i
Code	thisBuf.length () != i
Distance : 4

95
Tree	this . i . i () != i
Code	this . i . i () != i
Distance : 7

96
Tree	i . startIndex () thisBuf.length i ( i )
Code	i . startIndex () thisBuf.length i ( i )
Distance : 8

97
Tree	i < buffer ()
Code	i < buffer ()
Distance : 2

98
Tree	thisBuf != null
Code	thisBuf != null
Distance : 3

99
Tree	this . startIndex () != startIndex
Code	this . startIndex () != startIndex
Distance : 6

100
Tree	i == thisBuf.length < /
Code	i == thisBuf.length < /
Distance : 3

101
Tree	i == i < extends
Code	i == i < extends
Distance : 3

102
Tree	indexOf > NUMBER_CONSTANT
Code	indexOf > NUMBER_CONSTANT
Distance : 3

103
Tree	i == null < >=
Code	i == null < >=
Distance : 3

104
Tree	i == startIndex < /
Code	i == startIndex < /
Distance : 3

105
Tree	i == i < >=
Code	i == i < >=
Distance : 3

106
Tree	buffer < i
Code	buffer < i
Distance : 2

107
Tree	i == buffer
Code	i == buffer
Distance : 2

108
Tree	startIndex thisBuf.length i
Code	startIndex thisBuf.length i
Distance : 3

109
Tree	thisBuf.length i i
Code	thisBuf.length i i
Distance : 3

110
Tree	startIndex thisBuf.length startIndex
Code	startIndex thisBuf.length startIndex
Distance : 3

111
Tree	i == thisBuf < /
Code	i == thisBuf < /
Distance : 3

112
Tree	i / thisBuf.length
Code	i / thisBuf.length
Distance : 2

113
Tree	i . i () i i ( i )
Code	i . i () i i ( i )
Distance : 8

114
Tree	i != null thisBuf.length ^
Code	i != null thisBuf.length ^
Distance : 4

115
Tree	i < startIndex ()
Code	i < startIndex ()
Distance : 2

116
Tree	i . size () thisBuf.length i ( i )
Code	i . size () thisBuf.length i ( i )
Distance : 7

117
Tree	this == size
Code	this == size
Distance : 2

118
Tree	i < thisBuf.length
Code	i < thisBuf.length
Distance : 1

119
Tree	i == null < ?
Code	i == null < ?
Distance : 3

120
Tree	buffer == i
Code	buffer == i
Distance : 3

121
Tree	i == null < %
Code	i == null < %
Distance : 3

122
Tree	startIndex () != i
Code	startIndex () != i
Distance : 4

123
Tree	i != continue;
Code	i != continue;
Distance : 2

124
Tree	i . thisBuf () != i
Code	i . thisBuf () != i
Distance : 5

125
Tree	this . size == i
Code	this . size == i
Distance : 4

126
Tree	i () != startIndex
Code	i () != startIndex
Distance : 3

127
Tree	i . startIndex () != i
Code	i . startIndex () != i
Distance : 5

128
Tree	i == startIndex && i
Code	i == startIndex && i
Distance : 4

129
Tree	this . i . startIndex () != thisBuf
Code	this . i . startIndex () != thisBuf
Distance : 7

130
Tree	i == thisBuf.length
Code	i == thisBuf.length
Distance : 2

131
Tree	this . i . startIndex () != thisBuf.length
Code	this . i . startIndex () != thisBuf.length
Distance : 7

132
Tree	startIndex != null
Code	startIndex != null
Distance : 3

133
Tree	i == null thisBuf.length +=
Code	i == null thisBuf.length +=
Distance : 4

134
Tree	this . i == startIndex
Code	this . i == startIndex
Distance : 4

135
Tree	startIndex < i
Code	startIndex < i
Distance : 2

136
Tree	this . thisBuf () != thisBuf.length
Code	this . thisBuf () != thisBuf.length
Distance : 6

137
Tree	i != null thisBuf.length ?
Code	i != null thisBuf.length ?
Distance : 4

138
Tree	i != null thisBuf.length +=
Code	i != null thisBuf.length +=
Distance : 4

139
Tree	i != null i [
Code	i != null i [
Distance : 4

140
Tree	size > NUMBER_CONSTANT
Code	size > NUMBER_CONSTANT
Distance : 3

141
Tree	i == i
Code	i == i
Distance : 2

142
Tree	startIndex ( i ) != thisBuf.length
Code	startIndex ( i ) != thisBuf.length
Distance : 5

143
Tree	startIndex ( i ) != startIndex
Code	startIndex ( i ) != startIndex
Distance : 5

144
Tree	i != break;
Code	i != break;
Distance : 2

145
Tree	i == null thisBuf.length :
Code	i == null thisBuf.length :
Distance : 4

146
Tree	i / thisBuf
Code	i / thisBuf
Distance : 2

147
Tree	startIndex < i ()
Code	startIndex < i ()
Distance : 3

148
Tree	i ( i ) != thisBuf
Code	i ( i ) != thisBuf
Distance : 5

149
Tree	size != null
Code	size != null
Distance : 3

150
Tree	i == size
Code	i == size
Distance : 1

151
Tree	this . i . startIndex () != i
Code	this . i . startIndex () != i
Distance : 7

152
Tree	i < thisBuf
Code	i < thisBuf
Distance : 1

153
Tree	i . i () != i
Code	i . i () != i
Distance : 5

154
Tree	this . thisBuf == i
Code	this . thisBuf == i
Distance : 5

155
Tree	i < thisBuf
Code	i < thisBuf
Distance : 1

156
Tree	i != super();
Code	i != super();
Distance : 2

157
Tree	this . i == buffer
Code	this . i == buffer
Distance : 4

158
Tree	buffer < i ()
Code	buffer < i ()
Distance : 3

159
Tree	i . startIndex () != thisBuf.length
Code	i . startIndex () != thisBuf.length
Distance : 5

160
Tree	i > NUMBER_CONSTANT
Code	i > NUMBER_CONSTANT
Distance : 2

161
Tree	i != null thisBuf.length extends
Code	i != null thisBuf.length extends
Distance : 4

162
Tree	i ( i ) != thisBuf.length
Code	i ( i ) != thisBuf.length
Distance : 5

163
Tree	this == i Math
Code	this == i Math
Distance : 4

164
Tree	i . startIndex () != thisBuf
Code	i . startIndex () != thisBuf
Distance : 5

165
Tree	startIndex ( i ) != thisBuf
Code	startIndex ( i ) != thisBuf
Distance : 5

166
Tree	this . thisBuf () != i
Code	this . thisBuf () != i
Distance : 6

167
Tree	thisBuf.length ( i ) != startIndex
Code	thisBuf.length ( i ) != startIndex
Distance : 5

168
Tree	i == startIndex
Code	i == startIndex
Distance : 2

169
Tree	i thisBuf.length i
Code	i thisBuf.length i
Distance : 2

170
Tree	thisBuf.length < startIndex
Code	thisBuf.length < startIndex
Distance : 2

171
Tree	i != return;
Code	i != return;
Distance : 2

172
Tree	this . ch == i
Code	this . ch == i
Distance : 5

173
Tree	i < i ()
Code	i < i ()
Distance : 2

174
Tree	i == ch
Code	i == ch
Distance : 2

175
Tree	this . i == ch
Code	this . i == ch
Distance : 4

176
Tree	i . thisBuf () thisBuf.length i ( i )
Code	i . thisBuf () thisBuf.length i ( i )
Distance : 8

177
Tree	this . startIndex == i
Code	this . startIndex == i
Distance : 5

178
Tree	i == i < ^
Code	i == i < ^
Distance : 3

179
Tree	i < startIndex
Code	i < startIndex
Distance : 1

180
Tree	this . thisBuf.length () != i
Code	this . thisBuf.length () != i
Distance : 6

181
Tree	i == i < %
Code	i == i < %
Distance : 3

182
Tree	this == startIndex
Code	this == startIndex
Distance : 3

183
Tree	i . i () != thisBuf
Code	i . i () != thisBuf
Distance : 5

184
Tree	this . i () != i
Code	this . i () != i
Distance : 5

185
Tree	i == buffer && i
Code	i == buffer && i
Distance : 4

186
Tree	i == indexOf && i
Code	i == indexOf && i
Distance : 4

187
Tree	i > NUMBER_CONSTANT wanted
Code	i > NUMBER_CONSTANT wanted
Distance : 3

188
Tree	i == ch && i
Code	i == ch && i
Distance : 4

189
Tree	i . buffer () i i ( i )
Code	i . buffer () i i ( i )
Distance : 8

190
Tree	this == i wanted
Code	this == i wanted
Distance : 4

191
Tree	thisBuf thisBuf.length i
Code	thisBuf thisBuf.length i
Distance : 3

192
Tree	buffer == i && i
Code	buffer == i && i
Distance : 4

193
Tree	i == size && i
Code	i == size && i
Distance : 3

194
Tree	i < startIndex
Code	i < startIndex
Distance : 1

195
Tree	i . startIndex () != startIndex
Code	i . startIndex () != startIndex
Distance : 5

196
Tree	i == thisBuf && i
Code	i == thisBuf && i
Distance : 4

197
Tree	i == i && startIndex
Code	i == i && startIndex
Distance : 4

198
Tree	this . i . thisBuf () != i
Code	this . i . thisBuf () != i
Distance : 7

199
Tree	i > NUMBER_CONSTANT Math
Code	i > NUMBER_CONSTANT Math
Distance : 3

========================================================================


========================================================================
Example Number: 36
Parent Code is: 
i < thisBuf.length
-------------------------------------------------------------------------------
Child code is: 
i < this . size
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (40{val=thisBuf.length})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (22 (315{val=this}) (235{val=.}) (800{val=size}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/60/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	contains > NUMBER_CONSTANT
Code	contains > NUMBER_CONSTANT
Distance : 5

1
Tree	thisBuf.length thisBuf.length thisBuf
Code	thisBuf.length thisBuf.length thisBuf
Distance : 5

2
Tree	thisBuf < thisBuf.length
Code	thisBuf < thisBuf.length
Distance : 4

3
Tree	i thisBuf.length size
Code	i thisBuf.length size
Distance : 3

4
Tree	i == buffer && i
Code	i == buffer && i
Distance : 4

5
Tree	thisBuf.length () != thisBuf
Code	thisBuf.length () != thisBuf
Distance : 5

6
Tree	i < size
Code	i < size
Distance : 2

7
Tree	i < size ()
Code	i < size ()
Distance : 3

8
Tree	buffer < i
Code	buffer < i
Distance : 4

9
Tree	i == buffer
Code	i == buffer
Distance : 4

10
Tree	size != null
Code	size != null
Distance : 5

11
Tree	i > NUMBER_CONSTANT
Code	i > NUMBER_CONSTANT
Distance : 4

12
Tree	i == i
Code	i == i
Distance : 4

13
Tree	i == ch
Code	i == ch
Distance : 4

14
Tree	this == buffer
Code	this == buffer
Distance : 4

15
Tree	i == size
Code	i == size
Distance : 3

16
Tree	buffer == i
Code	buffer == i
Distance : 5

17
Tree	i . i () != thisBuf.length
Code	i . i () != thisBuf.length
Distance : 5

18
Tree	i > NUMBER_CONSTANT
Code	i > NUMBER_CONSTANT
Distance : 4

19
Tree	this . buffer == i
Code	this . buffer == i
Distance : 5

20
Tree	i < thisBuf.length
Code	i < thisBuf.length
Distance : 3

21
Tree	i == i
Code	i == i
Distance : 4

22
Tree	this == i
Code	this == i
Distance : 4

23
Tree	i != null
Code	i != null
Distance : 4

24
Tree	i / i
Code	i / i
Distance : 4

25
Tree	this == i
Code	this == i
Distance : 4

26
Tree	i == thisBuf.length
Code	i == thisBuf.length
Distance : 4

27
Tree	this . i == i
Code	this . i == i
Distance : 5

28
Tree	i == buffer
Code	i == buffer
Distance : 4

29
Tree	i == ch
Code	i == ch
Distance : 4

30
Tree	this == thisBuf
Code	this == thisBuf
Distance : 4

31
Tree	i < thisBuf
Code	i < thisBuf
Distance : 3

32
Tree	this . i == buffer
Code	this . i == buffer
Distance : 5

33
Tree	i < i
Code	i < i
Distance : 3

34
Tree	buffer > NUMBER_CONSTANT
Code	buffer > NUMBER_CONSTANT
Distance : 5

35
Tree	i == null < %
Code	i == null < %
Distance : 4

36
Tree	this . ch == i
Code	this . ch == i
Distance : 5

37
Tree	i < contains ()
Code	i < contains ()
Distance : 3

38
Tree	i == null thisBuf.length +=
Code	i == null thisBuf.length +=
Distance : 4

39
Tree	i != null i [
Code	i != null i [
Distance : 4

40
Tree	size == i
Code	size == i
Distance : 5

41
Tree	buffer != null
Code	buffer != null
Distance : 5

42
Tree	i < thisBuf.length ()
Code	i < thisBuf.length ()
Distance : 3

43
Tree	this == size
Code	this == size
Distance : 3

44
Tree	this . size == i
Code	this . size == i
Distance : 4

45
Tree	i == null thisBuf.length :
Code	i == null thisBuf.length :
Distance : 4

46
Tree	i != null thisBuf.length ?
Code	i != null thisBuf.length ?
Distance : 4

47
Tree	i != null thisBuf.length +=
Code	i != null thisBuf.length +=
Distance : 4

48
Tree	size > NUMBER_CONSTANT
Code	size > NUMBER_CONSTANT
Distance : 5

49
Tree	i . i () != i
Code	i . i () != i
Distance : 5

50
Tree	i () != thisBuf.length
Code	i () != thisBuf.length
Distance : 4

51
Tree	i . size () != thisBuf.length
Code	i . size () != thisBuf.length
Distance : 5

52
Tree	this . thisBuf == i
Code	this . thisBuf == i
Distance : 5

53
Tree	thisBuf.length ( i ) != thisBuf.length
Code	thisBuf.length ( i ) != thisBuf.length
Distance : 6

54
Tree	i . size () != thisBuf
Code	i . size () != thisBuf
Distance : 5

55
Tree	i < contains
Code	i < contains
Distance : 3

56
Tree	this . i . thisBuf () != thisBuf.length
Code	this . i . thisBuf () != thisBuf.length
Distance : 7

57
Tree	i != return;
Code	i != return;
Distance : 4

58
Tree	thisBuf ( i ) != i
Code	thisBuf ( i ) != i
Distance : 6

59
Tree	this . i . thisBuf.length () != thisBuf
Code	this . i . thisBuf.length () != thisBuf
Distance : 7

60
Tree	this . i . thisBuf.length () != thisBuf.length
Code	this . i . thisBuf.length () != thisBuf.length
Distance : 7

61
Tree	i . size () != i
Code	i . size () != i
Distance : 5

62
Tree	i < ch ()
Code	i < ch ()
Distance : 3

63
Tree	ch / i
Code	ch / i
Distance : 5

64
Tree	thisBuf.length ( i ) != i
Code	thisBuf.length ( i ) != i
Distance : 6

65
Tree	i () != thisBuf
Code	i () != thisBuf
Distance : 4

66
Tree	this . buffer == buffer
Code	this . buffer == buffer
Distance : 5

67
Tree	thisBuf thisBuf.length thisBuf
Code	thisBuf thisBuf.length thisBuf
Distance : 5

68
Tree	thisBuf.length ( i ) != thisBuf
Code	thisBuf.length ( i ) != thisBuf
Distance : 6

69
Tree	size / i
Code	size / i
Distance : 5

70
Tree	i == i
Code	i == i
Distance : 4

71
Tree	i != continue;
Code	i != continue;
Distance : 4

72
Tree	i . thisBuf () i i ( i )
Code	i . thisBuf () i i ( i )
Distance : 8

73
Tree	this . thisBuf () != i
Code	this . thisBuf () != i
Distance : 6

74
Tree	i / thisBuf
Code	i / thisBuf
Distance : 4

75
Tree	i < thisBuf ()
Code	i < thisBuf ()
Distance : 3

76
Tree	i == i < /
Code	i == i < /
Distance : 4

77
Tree	this . i . i () != thisBuf
Code	this . i . i () != thisBuf
Distance : 7

78
Tree	i == contains
Code	i == contains
Distance : 4

79
Tree	i . i () i i ( i )
Code	i . i () i i ( i )
Distance : 8

80
Tree	buffer == i
Code	buffer == i
Distance : 5

81
Tree	thisBuf > NUMBER_CONSTANT
Code	thisBuf > NUMBER_CONSTANT
Distance : 5

82
Tree	i == i i %
Code	i == i i %
Distance : 4

83
Tree	i < buffer
Code	i < buffer
Distance : 3

84
Tree	i . buffer () thisBuf.length i ( i )
Code	i . buffer () thisBuf.length i ( i )
Distance : 8

85
Tree	this . i . contains () != i
Code	this . i . contains () != i
Distance : 7

86
Tree	i ( i ) != thisBuf.length
Code	i ( i ) != thisBuf.length
Distance : 5

87
Tree	this . thisBuf.length () != i
Code	this . thisBuf.length () != i
Distance : 6

88
Tree	i . i () thisBuf.length size ( i )
Code	i . i () thisBuf.length size ( i )
Distance : 7

89
Tree	i == null < [
Code	i == null < [
Distance : 4

90
Tree	this . thisBuf () != thisBuf.length
Code	this . thisBuf () != thisBuf.length
Distance : 6

91
Tree	i != null
Code	i != null
Distance : 4

92
Tree	this . size () != i
Code	this . size () != i
Distance : 5

93
Tree	thisBuf thisBuf.length i
Code	thisBuf thisBuf.length i
Distance : 5

94
Tree	buffer < thisBuf.length
Code	buffer < thisBuf.length
Distance : 4

95
Tree	thisBuf.length () != thisBuf.length
Code	thisBuf.length () != thisBuf.length
Distance : 5

96
Tree	i . size () i i ( i )
Code	i . size () i i ( i )
Distance : 8

97
Tree	thisBuf.length () != i
Code	thisBuf.length () != i
Distance : 5

98
Tree	this . thisBuf.length () != thisBuf.length
Code	this . thisBuf.length () != thisBuf.length
Distance : 6

99
Tree	buffer == thisBuf
Code	buffer == thisBuf
Distance : 5

100
Tree	this . i . size () != i
Code	this . i . size () != i
Distance : 6

101
Tree	i . thisBuf.length () < i ( i )
Code	i . thisBuf.length () < i ( i )
Distance : 7

102
Tree	i == thisBuf.length < /
Code	i == thisBuf.length < /
Distance : 4

103
Tree	i ( i ) != i
Code	i ( i ) != i
Distance : 5

104
Tree	this . thisBuf () != thisBuf
Code	this . thisBuf () != thisBuf
Distance : 6

105
Tree	i / contains
Code	i / contains
Distance : 4

106
Tree	i == thisBuf < /
Code	i == thisBuf < /
Distance : 4

107
Tree	i == i < >=
Code	i == i < >=
Distance : 4

108
Tree	thisBuf () != i
Code	thisBuf () != i
Distance : 5

109
Tree	this . thisBuf.length () != thisBuf
Code	this . thisBuf.length () != thisBuf
Distance : 6

110
Tree	i == ch && i
Code	i == ch && i
Distance : 4

111
Tree	buffer == i && i
Code	buffer == i && i
Distance : 5

112
Tree	this . i () != thisBuf.length
Code	this . i () != thisBuf.length
Distance : 6

113
Tree	thisBuf.length thisBuf.length i
Code	thisBuf.length thisBuf.length i
Distance : 5

114
Tree	this == i i
Code	this == i i
Distance : 5

115
Tree	i == null thisBuf.length instanceof
Code	i == null thisBuf.length instanceof
Distance : 4

116
Tree	i . i () thisBuf.length thisBuf.length ( i )
Code	i . i () thisBuf.length thisBuf.length ( i )
Distance : 8

117
Tree	i == i < -=
Code	i == i < -=
Distance : 4

118
Tree	i . thisBuf () != i
Code	i . thisBuf () != i
Distance : 5

119
Tree	i == i < *=
Code	i == i < *=
Distance : 4

120
Tree	i == i < extends
Code	i == i < extends
Distance : 4

121
Tree	thisBuf ( i ) != thisBuf.length
Code	thisBuf ( i ) != thisBuf.length
Distance : 6

122
Tree	i != null thisBuf.length :
Code	i != null thisBuf.length :
Distance : 4

123
Tree	i != null thisBuf.length %
Code	i != null thisBuf.length %
Distance : 4

124
Tree	buffer / i
Code	buffer / i
Distance : 5

125
Tree	i < i
Code	i < i
Distance : 3

126
Tree	ch == i
Code	ch == i
Distance : 5

127
Tree	this == i Math
Code	this == i Math
Distance : 5

128
Tree	i . size () thisBuf.length thisBuf.length ( i )
Code	i . size () thisBuf.length thisBuf.length ( i )
Distance : 8

129
Tree	i < i ()
Code	i < i ()
Distance : 3

130
Tree	this . i == thisBuf
Code	this . i == thisBuf
Distance : 5

131
Tree	i . buffer () != i
Code	i . buffer () != i
Distance : 5

132
Tree	i != null thisBuf.length >=
Code	i != null thisBuf.length >=
Distance : 4

133
Tree	ch != null
Code	ch != null
Distance : 5

134
Tree	i < buffer ()
Code	i < buffer ()
Distance : 3

135
Tree	i == null thisBuf.length extends
Code	i == null thisBuf.length extends
Distance : 4

136
Tree	this . i () != i
Code	this . i () != i
Distance : 6

137
Tree	i () != i
Code	i () != i
Distance : 4

138
Tree	this . i == ch
Code	this . i == ch
Distance : 5

139
Tree	i == null thisBuf.length >=
Code	i == null thisBuf.length >=
Distance : 4

140
Tree	this . i () != thisBuf
Code	this . i () != thisBuf
Distance : 6

141
Tree	i thisBuf.length thisBuf.length
Code	i thisBuf.length thisBuf.length
Distance : 4

142
Tree	i == thisBuf
Code	i == thisBuf
Distance : 4

143
Tree	this . i . thisBuf () != thisBuf
Code	this . i . thisBuf () != thisBuf
Distance : 7

144
Tree	i != null thisBuf.length /
Code	i != null thisBuf.length /
Distance : 4

145
Tree	size () != i
Code	size () != i
Distance : 5

146
Tree	i / i
Code	i / i
Distance : 4

147
Tree	i / buffer
Code	i / buffer
Distance : 4

148
Tree	i != break;
Code	i != break;
Distance : 4

149
Tree	i == thisBuf.length && i
Code	i == thisBuf.length && i
Distance : 4

150
Tree	i == null thisBuf.length ^
Code	i == null thisBuf.length ^
Distance : 4

151
Tree	i != super();
Code	i != super();
Distance : 4

152
Tree	i == null thisBuf.length /
Code	i == null thisBuf.length /
Distance : 4

153
Tree	i != null thisBuf.length ^
Code	i != null thisBuf.length ^
Distance : 4

154
Tree	this == contains
Code	this == contains
Distance : 4

155
Tree	i . contains () != i
Code	i . contains () != i
Distance : 5

156
Tree	i != null thisBuf.length extends
Code	i != null thisBuf.length extends
Distance : 4

157
Tree	i == null i ?
Code	i == null i ?
Distance : 4

158
Tree	i () != contains
Code	i () != contains
Distance : 4

159
Tree	buffer == thisBuf.length
Code	buffer == thisBuf.length
Distance : 5

160
Tree	i ( i ) != thisBuf
Code	i ( i ) != thisBuf
Distance : 5

161
Tree	i == contains && i
Code	i == contains && i
Distance : 4

162
Tree	thisBuf ( i ) != thisBuf
Code	thisBuf ( i ) != thisBuf
Distance : 6

163
Tree	i > NUMBER_CONSTANT i
Code	i > NUMBER_CONSTANT i
Distance : 4

164
Tree	i == thisBuf && i
Code	i == thisBuf && i
Distance : 4

165
Tree	i != null thisBuf.length *=
Code	i != null thisBuf.length *=
Distance : 4

166
Tree	this . i == size
Code	this . i == size
Distance : 4

167
Tree	buffer < thisBuf.length ()
Code	buffer < thisBuf.length ()
Distance : 4

168
Tree	i == size
Code	i == size
Distance : 3

169
Tree	buffer == buffer
Code	buffer == buffer
Distance : 5

170
Tree	i . thisBuf.length () != i
Code	i . thisBuf.length () != i
Distance : 5

171
Tree	i > NUMBER_CONSTANT options
Code	i > NUMBER_CONSTANT options
Distance : 4

172
Tree	buffer < thisBuf
Code	buffer < thisBuf
Distance : 4

173
Tree	thisBuf != null
Code	thisBuf != null
Distance : 5

174
Tree	this . i . thisBuf.length () != i
Code	this . i . thisBuf.length () != i
Distance : 7

175
Tree	i == size && i
Code	i == size && i
Distance : 4

176
Tree	this == ch
Code	this == ch
Distance : 4

177
Tree	i . contains () i i ( i )
Code	i . contains () i i ( i )
Distance : 8

178
Tree	i == thisBuf
Code	i == thisBuf
Distance : 4

179
Tree	i . i () != thisBuf
Code	i . i () != thisBuf
Distance : 5

180
Tree	i / size
Code	i / size
Distance : 3

181
Tree	i / ch
Code	i / ch
Distance : 4

182
Tree	i == thisBuf.length < >=
Code	i == thisBuf.length < >=
Distance : 4

183
Tree	i . ch () thisBuf.length i ( i )
Code	i . ch () thisBuf.length i ( i )
Distance : 8

184
Tree	i thisBuf.length thisBuf
Code	i thisBuf.length thisBuf
Distance : 4

185
Tree	ch > NUMBER_CONSTANT
Code	ch > NUMBER_CONSTANT
Distance : 5

186
Tree	i == i && buffer
Code	i == i && buffer
Distance : 4

187
Tree	thisBuf () != thisBuf.length
Code	thisBuf () != thisBuf.length
Distance : 5

188
Tree	this . i . thisBuf () != i
Code	this . i . thisBuf () != i
Distance : 7

189
Tree	i == i < ^
Code	i == i < ^
Distance : 4

190
Tree	i > NUMBER_CONSTANT Math
Code	i > NUMBER_CONSTANT Math
Distance : 4

191
Tree	thisBuf.length thisBuf.length thisBuf.length
Code	thisBuf.length thisBuf.length thisBuf.length
Distance : 5

192
Tree	this . i . i () != i
Code	this . i . i () != i
Distance : 7

193
Tree	buffer < thisBuf ()
Code	buffer < thisBuf ()
Distance : 4

194
Tree	i == i && i
Code	i == i && i
Distance : 4

195
Tree	buffer < i ()
Code	buffer < i ()
Distance : 4

196
Tree	i < ch
Code	i < ch
Distance : 3

197
Tree	i ( i ) != contains
Code	i ( i ) != contains
Distance : 5

198
Tree	i == i && ch
Code	i == i && ch
Distance : 4

199
Tree	this == i options
Code	this == i options
Distance : 5

========================================================================


========================================================================
Example Number: 37
Parent Code is: 
{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ str . getChars ( NUMBER_CONSTANT , width , buffer , size ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=str}) (235{val=.}) (802{val=getChars}) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=strLen}) (234{val=,}) (800{val=buffer}) (234{val=,}) (800{val=size}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=str}) (235{val=.}) (802{val=getChars}) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=width}) (234{val=,}) (800{val=buffer}) (234{val=,}) (800{val=size}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/59/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	str . getChars ( NUMBER_CONSTANT , str , buffer , size ) ;
Code	str . getChars ( NUMBER_CONSTANT , str , buffer , size ) ;
Distance : 3

1
Tree	{ str . getChars ( str , str . size () , this ) ; }
Code	{ str . getChars ( str , str . size () , this ) ; }
Distance : 6

2
Tree	{ str . getChars ( str , size () , this ) ; }
Code	{ str . getChars ( str , size () , this ) ; }
Distance : 5

3
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ; }
Distance : 2

4
Tree	{ str . getChars ( this , strLen , buffer , length ) ; }
Code	{ str . getChars ( this , strLen , buffer , length ) ; }
Distance : 3

5
Tree	{ str . getChars ( str , buffer . size () , this ) ; }
Code	{ str . getChars ( str , buffer . size () , this ) ; }
Distance : 6

6
Tree	{ str . getChars ( null , strLen , padChar , size ) ; }
Code	{ str . getChars ( null , strLen , padChar , size ) ; }
Distance : 3

7
Tree	{ str . getChars ( padChar , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( padChar , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

8
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ; }
Distance : 2

9
Tree	str . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ;
Distance : 4

10
Tree	{ str . getChars ( this , str , buffer , size ) ; }
Code	{ str . getChars ( this , str , buffer , size ) ; }
Distance : 2

11
Tree	{ toString . getChars ( false ) ; }
Code	{ toString . getChars ( false ) ; }
Distance : 8

12
Tree	{ getChars ( STRING_CONSTANT , buffer , buffer , size ) ; }
Code	{ getChars ( STRING_CONSTANT , buffer , buffer , size ) ; }
Distance : 4

13
Tree	{ str . getChars ( strLen , buffer () , this ) ; }
Code	{ str . getChars ( strLen , buffer () , this ) ; }
Distance : 5

14
Tree	{ getChars ( STRING_CONSTANT , strLen , buffer , length ) ; }
Code	{ getChars ( STRING_CONSTANT , strLen , buffer , length ) ; }
Distance : 5

15
Tree	{ getChars . getChars ( strLen , strLen ) ; }
Code	{ getChars . getChars ( strLen , strLen ) ; }
Distance : 7

16
Tree	{ str . getChars ( null , strLen , length , size ) ; }
Code	{ str . getChars ( null , strLen , length , size ) ; }
Distance : 3

17
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , Object ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , Object ) ; }
Distance : 2

18
Tree	{ str . getChars ( toString , strLen , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( toString , strLen , size , STRING_CONSTANT ) ; }
Distance : 4

19
Tree	{ str . getChars ( str , toString . size () , this ) ; }
Code	{ str . getChars ( str , toString . size () , this ) ; }
Distance : 6

20
Tree	{ str . getChars ( strLen , padChar ) ; }
Code	{ str . getChars ( strLen , padChar ) ; }
Distance : 6

21
Tree	{ str . getChars ( size , buffer () , this ) ; }
Code	{ str . getChars ( size , buffer () , this ) ; }
Distance : 5

22
Tree	{ str . getChars ( false , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( false , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT ) ; }
Distance : 4

23
Tree	{ str . getChars ( this , strLen , str , size ) ; }
Code	{ str . getChars ( this , strLen , str , size ) ; }
Distance : 3

24
Tree	{ getChars ( strLen , toString , size , size ) ; }
Code	{ getChars ( strLen , toString , size , size ) ; }
Distance : 5

25
Tree	{ str . getChars ( this , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( this , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT ) ; }
Distance : 4

26
Tree	{ str . getChars ( true , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( true , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT ) ; }
Distance : 4

27
Tree	{ str . strLen ( false ) ; }
Code	{ str . strLen ( false ) ; }
Distance : 8

28
Tree	{ getChars ( STRING_CONSTANT , str , buffer , length ) ; }
Code	{ getChars ( STRING_CONSTANT , str , buffer , length ) ; }
Distance : 5

29
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , padChar , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , padChar , NUMBER_CONSTANT ) ; }
Distance : 4

30
Tree	{ strLen . getChars ( false ) ; }
Code	{ strLen . getChars ( false ) ; }
Distance : 8

31
Tree	{ str . getChars ( this , strLen , size , size ) ; }
Code	{ str . getChars ( this , strLen , size , size ) ; }
Distance : 3

32
Tree	{ getChars ( strLen , strLen , size , buffer ) ; }
Code	{ getChars ( strLen , strLen , size , buffer ) ; }
Distance : 6

33
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , str , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , str , NUMBER_CONSTANT ) ; }
Distance : 4

34
Tree	{ str . getChars ( toString , strLen ) ; }
Code	{ str . getChars ( toString , strLen ) ; }
Distance : 6

35
Tree	{ str . getChars ( str , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( str , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

36
Tree	{ str . getChars ( this , strLen , length , size ) ; }
Code	{ str . getChars ( this , strLen , length , size ) ; }
Distance : 3

37
Tree	{ str . getChars ( padChar , strLen , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( padChar , strLen , size , STRING_CONSTANT ) ; }
Distance : 4

38
Tree	{ str . getChars ( strLen , strLen . size () , this ) ; }
Code	{ str . getChars ( strLen , strLen . size () , this ) ; }
Distance : 6

39
Tree	{ getChars ( STRING_CONSTANT , strLen , buffer , str ) ; }
Code	{ getChars ( STRING_CONSTANT , strLen , buffer , str ) ; }
Distance : 5

40
Tree	str . getChars ( NUMBER_CONSTANT , strLen , padChar , size ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , padChar , size ) ;
Distance : 4

41
Tree	{ str . getChars ( int , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( int , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT ) ; }
Distance : 4

42
Tree	{ getChars ( strLen , strLen , buffer , size ) ; }
Code	{ getChars ( strLen , strLen , buffer , size ) ; }
Distance : 4

43
Tree	{ str . getChars ( getChars , NUMBER_CONSTANT , str , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( getChars , NUMBER_CONSTANT , str , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

44
Tree	str . getChars ( NUMBER_CONSTANT , str , buffer , length ) ;
Code	str . getChars ( NUMBER_CONSTANT , str , buffer , length ) ;
Distance : 4

45
Tree	{ str . getChars ( str , str , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( str , str , size , STRING_CONSTANT ) ; }
Distance : 4

46
Tree	{ str . str ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . str ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

47
Tree	{ StrBuilder . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ StrBuilder . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

48
Tree	str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ;
Distance : 4

49
Tree	{ getChars ( strLen , strLen , size , length , size , size ) ; }
Code	{ getChars ( strLen , strLen , size , length , size , size ) ; }
Distance : 9

50
Tree	{ str . getChars ( String , buffer () , this ) ; }
Code	{ str . getChars ( String , buffer () , this ) ; }
Distance : 5

51
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , padChar , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , padChar , size ) ; }
Distance : 2

52
Tree	{ str . getChars ( str , strLen . length () , this ) ; }
Code	{ str . getChars ( str , strLen . length () , this ) ; }
Distance : 6

53
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT ) ; }
Distance : 3

54
Tree	{ size . getChars ( strLen , strLen ) ; }
Code	{ size . getChars ( strLen , strLen ) ; }
Distance : 7

55
Tree	{ str . getChars ( getChars , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( getChars , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

56
Tree	{ getChars ( toString , strLen , size , size ) ; }
Code	{ getChars ( toString , strLen , size , size ) ; }
Distance : 5

57
Tree	{ str . getChars ( String , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( String , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

58
Tree	{ getChars ( strLen , size , false ) ; }
Code	{ getChars ( strLen , size , false ) ; }
Distance : 7

59
Tree	{ getChars ( strLen , strLen , length , size ) ; }
Code	{ getChars ( strLen , strLen , length , size ) ; }
Distance : 5

60
Tree	{ str . getChars ( getChars , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( getChars , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

61
Tree	{ str . getChars ( getChars , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + length ) ; }
Code	{ str . getChars ( getChars , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + length ) ; }
Distance : 7

62
Tree	{ str . getChars ( padChar , strLen . length () , this ) ; }
Code	{ str . getChars ( padChar , strLen . length () , this ) ; }
Distance : 6

63
Tree	{ str . getChars ( toString , buffer () , this ) ; }
Code	{ str . getChars ( toString , buffer () , this ) ; }
Distance : 5

64
Tree	{ getChars ( str , padChar , false ) ; }
Code	{ getChars ( str , padChar , false ) ; }
Distance : 7

65
Tree	{ getChars ( strLen , strLen , size , length ) ; }
Code	{ getChars ( strLen , strLen , size , length ) ; }
Distance : 6

66
Tree	{ str . getChars ( appendFixedWidthPadRight , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( appendFixedWidthPadRight , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

67
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , strLen , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , strLen , size ) ; }
Distance : 2

68
Tree	{ getChars ( strLen , toString , size , size ) ; }
Code	{ getChars ( strLen , toString , size , size ) ; }
Distance : 5

69
Tree	{ getChars ( str , strLen , size , size , size , size ) ; }
Code	{ getChars ( str , strLen , size , size , size , size ) ; }
Distance : 8

70
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , length ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , length ) ; }
Distance : 2

71
Tree	{ str . getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

72
Tree	str . getChars ( NUMBER_CONSTANT , strLen , buffer , Object ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , buffer , Object ) ;
Distance : 4

73
Tree	{ str . getChars ( getChars , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + buffer ) ; }
Code	{ str . getChars ( getChars , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + buffer ) ; }
Distance : 7

74
Tree	{ str . getChars ( this , strLen , buffer , Object ) ; }
Code	{ str . getChars ( this , strLen , buffer , Object ) ; }
Distance : 3

75
Tree	{ str . getChars ( this , strLen , buffer , size ) ; }
Code	{ str . getChars ( this , strLen , buffer , size ) ; }
Distance : 2

76
Tree	{ getChars ( strLen , toString , size , size , size , size ) ; }
Code	{ getChars ( strLen , toString , size , size , size , size ) ; }
Distance : 9

77
Tree	{ str . getChars ( null , strLen , buffer , str ) ; }
Code	{ str . getChars ( null , strLen , buffer , str ) ; }
Distance : 3

78
Tree	{ str . getChars ( str , padChar . size () , this ) ; }
Code	{ str . getChars ( str , padChar . size () , this ) ; }
Distance : 6

79
Tree	{ str . getChars ( size , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( size , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

80
Tree	{ str . getChars ( padChar , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( padChar , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

81
Tree	{ getChars ( str , strLen , false ) ; }
Code	{ getChars ( str , strLen , false ) ; }
Distance : 7

82
Tree	{ str . getChars ( null , strLen , str , size ) ; }
Code	{ str . getChars ( null , strLen , str , size ) ; }
Distance : 3

83
Tree	{ getChars ( strLen , strLen , length , size , size , size ) ; }
Code	{ getChars ( strLen , strLen , length , size , size , size ) ; }
Distance : 9

84
Tree	{ str . getChars ( null , str , buffer , size ) ; }
Code	{ str . getChars ( null , str , buffer , size ) ; }
Distance : 2

85
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

86
Tree	{ getChars ( strLen , buffer , size , size ) ; }
Code	{ getChars ( strLen , buffer , size , size ) ; }
Distance : 5

87
Tree	{ str . getChars ( size , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( size , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

88
Tree	{ getChars ( strLen , padChar , size , size , size , size ) ; }
Code	{ getChars ( strLen , padChar , size , size , size , size ) ; }
Distance : 9

89
Tree	{ str . getChars ( strLen , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( strLen , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

90
Tree	{ str . getChars ( null , strLen , buffer , size ) ; }
Code	{ str . getChars ( null , strLen , buffer , size ) ; }
Distance : 2

91
Tree	{ str . getChars ( padChar , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( padChar , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

92
Tree	{ str . getChars ( appendFixedWidthPadRight , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( appendFixedWidthPadRight , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

93
Tree	{ str . getChars ( strLen , strLen ) ; }
Code	{ str . getChars ( strLen , strLen ) ; }
Distance : 6

94
Tree	{ getChars ( strLen , strLen , false ) ; }
Code	{ getChars ( strLen , strLen , false ) ; }
Distance : 7

95
Tree	{ getChars ( strLen , strLen , buffer , size ) ; }
Code	{ getChars ( strLen , strLen , buffer , size ) ; }
Distance : 4

96
Tree	{ str . getChars ( false ) ; }
Code	{ str . getChars ( false ) ; }
Distance : 7

97
Tree	{ getChars ( strLen , strLen , size , size , size , size ) ; }
Code	{ getChars ( strLen , strLen , size , size , size , size ) ; }
Distance : 9

98
Tree	{ getChars ( str , buffer , false ) ; }
Code	{ getChars ( str , buffer , false ) ; }
Distance : 6

99
Tree	str . getChars ( NUMBER_CONSTANT , strLen , str , size ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , str , size ) ;
Distance : 4

100
Tree	{ str . getChars ( ( , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( ( , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

101
Tree	{ str . getChars ( str , buffer ) ; }
Code	{ str . getChars ( str , buffer ) ; }
Distance : 5

102
Tree	{ getChars ( toString , strLen , size , size ) ; }
Code	{ getChars ( toString , strLen , size , size ) ; }
Distance : 5

103
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT ) ; }
Distance : 4

104
Tree	{ getChars ( str , strLen , size , length ) ; }
Code	{ getChars ( str , strLen , size , length ) ; }
Distance : 6

105
Tree	{ str . getChars ( true ) ; }
Code	{ str . getChars ( true ) ; }
Distance : 7

106
Tree	{ str . getChars ( null , strLen , buffer , buffer ) ; }
Code	{ str . getChars ( null , strLen , buffer , buffer ) ; }
Distance : 3

107
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Distance : 1

108
Tree	{ str . getChars ( toString , strLen . size () , this ) ; }
Code	{ str . getChars ( toString , strLen . size () , this ) ; }
Distance : 6

109
Tree	{ getChars ( strLen , buffer , size , size , size , size ) ; }
Code	{ getChars ( strLen , buffer , size , size , size , size ) ; }
Distance : 9

110
Tree	{ str . getChars ( null , strLen , buffer , Object ) ; }
Code	{ str . getChars ( null , strLen , buffer , Object ) ; }
Distance : 3

111
Tree	{ length . getChars ( false ) ; }
Code	{ length . getChars ( false ) ; }
Distance : 8

112
Tree	{ getChars ( strLen , strLen , buffer , size , size , size ) ; }
Code	{ getChars ( strLen , strLen , buffer , size , size , size ) ; }
Distance : 8

113
Tree	{ getChars ( toString , strLen , size , size , size , size ) ; }
Code	{ getChars ( toString , strLen , size , size , size , size ) ; }
Distance : 9

114
Tree	{ getChars ( strLen , padChar , false ) ; }
Code	{ getChars ( strLen , padChar , false ) ; }
Distance : 7

115
Tree	str . getChars ( NUMBER_CONSTANT , strLen , strLen , size ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , strLen , size ) ;
Distance : 4

116
Tree	{ str . getChars ( str , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( str , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

117
Tree	{ getChars ( strLen , strLen , size , length ) ; }
Code	{ getChars ( strLen , strLen , size , length ) ; }
Distance : 6

118
Tree	{ str . getChars ( this , strLen , buffer , buffer ) ; }
Code	{ str . getChars ( this , strLen , buffer , buffer ) ; }
Distance : 3

119
Tree	{ str . getChars ( str , str ) ; }
Code	{ str . getChars ( str , str ) ; }
Distance : 6

120
Tree	{ getChars ( STRING_CONSTANT , strLen , buffer , Object ) ; }
Code	{ getChars ( STRING_CONSTANT , strLen , buffer , Object ) ; }
Distance : 5

121
Tree	str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Distance : 3

122
Tree	{ getChars ( strLen , strLen , size , size ) ; }
Code	{ getChars ( strLen , strLen , size , size ) ; }
Distance : 5

123
Tree	{ getChars ( strLen , str , size , size , size , size ) ; }
Code	{ getChars ( strLen , str , size , size , size , size ) ; }
Distance : 9

124
Tree	{ str . getChars ( str , buffer () , this ) ; }
Code	{ str . getChars ( str , buffer () , this ) ; }
Distance : 5

125
Tree	{ str . getChars ( str , buffer , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( str , buffer , size , STRING_CONSTANT ) ; }
Distance : 4

126
Tree	{ str . getChars ( strLen , str ) ; }
Code	{ str . getChars ( strLen , str ) ; }
Distance : 6

127
Tree	{ getChars ( STRING_CONSTANT , str , buffer , size ) ; }
Code	{ getChars ( STRING_CONSTANT , str , buffer , size ) ; }
Distance : 4

128
Tree	str . getChars ( NUMBER_CONSTANT , strLen , buffer , length ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , buffer , length ) ;
Distance : 4

129
Tree	{ str . getChars ( str , strLen , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( str , strLen , size , STRING_CONSTANT ) ; }
Distance : 4

130
Tree	{ str . getChars ( str , padChar () , this ) ; }
Code	{ str . getChars ( str , padChar () , this ) ; }
Distance : 5

131
Tree	{ str . getChars ( null , strLen , buffer , length ) ; }
Code	{ str . getChars ( null , strLen , buffer , length ) ; }
Distance : 3

132
Tree	{ getChars ( strLen , str , size , size ) ; }
Code	{ getChars ( strLen , str , size , size ) ; }
Distance : 5

133
Tree	{ getChars ( strLen , str , size , size ) ; }
Code	{ getChars ( strLen , str , size , size ) ; }
Distance : 5

134
Tree	{ str . getChars ( str , strLen , buffer , STRING_CONSTANT ) ; }
Code	{ str . getChars ( str , strLen , buffer , STRING_CONSTANT ) ; }
Distance : 3

135
Tree	{ str . getChars ( appendFixedWidthPadRight , strLen ) ; }
Code	{ str . getChars ( appendFixedWidthPadRight , strLen ) ; }
Distance : 6

136
Tree	{ str . getChars ( str , toString , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( str , toString , size , STRING_CONSTANT ) ; }
Distance : 4

137
Tree	{ str . getChars ( toString , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( toString , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

138
Tree	{ str . getChars ( padChar , buffer () , this ) ; }
Code	{ str . getChars ( padChar , buffer () , this ) ; }
Distance : 5

139
Tree	{ str . getChars ( ( , strLen ) ; }
Code	{ str . getChars ( ( , strLen ) ; }
Distance : 6

140
Tree	{ getChars ( STRING_CONSTANT , strLen , str , size ) ; }
Code	{ getChars ( STRING_CONSTANT , strLen , str , size ) ; }
Distance : 5

141
Tree	{ getChars ( strLen , strLen , size , Object ) ; }
Code	{ getChars ( strLen , strLen , size , Object ) ; }
Distance : 6

142
Tree	{ str . getChars ( strLen , strLen , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( strLen , strLen , size , STRING_CONSTANT ) ; }
Distance : 4

143
Tree	{ str . getChars ( NUMBER_CONSTANT , str , buffer , length ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , str , buffer , length ) ; }
Distance : 2

144
Tree	{ str . getChars ( this , strLen , size , length ) ; }
Code	{ str . getChars ( this , strLen , size , length ) ; }
Distance : 4

145
Tree	{ str . getChars ( null , strLen , size , size ) ; }
Code	{ str . getChars ( null , strLen , size , size ) ; }
Distance : 3

146
Tree	{ getChars ( STRING_CONSTANT , str , buffer , str ) ; }
Code	{ getChars ( STRING_CONSTANT , str , buffer , str ) ; }
Distance : 5

147
Tree	{ str . getChars ( str , padChar , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( str , padChar , size , STRING_CONSTANT ) ; }
Distance : 4

148
Tree	{ str . getChars ( str , strLen , length , STRING_CONSTANT ) ; }
Code	{ str . getChars ( str , strLen , length , STRING_CONSTANT ) ; }
Distance : 4

149
Tree	{ StrBuilder . getChars ( false ) ; }
Code	{ StrBuilder . getChars ( false ) ; }
Distance : 8

150
Tree	{ str . getChars ( this , strLen , buffer , str ) ; }
Code	{ str . getChars ( this , strLen , buffer , str ) ; }
Distance : 3

151
Tree	{ str . getChars ( padChar , size () , this ) ; }
Code	{ str . getChars ( padChar , size () , this ) ; }
Distance : 5

152
Tree	{ str . getChars ( String , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( String , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

153
Tree	{ str . getChars ( getChars , strLen ) ; }
Code	{ str . getChars ( getChars , strLen ) ; }
Distance : 6

154
Tree	{ str . getChars ( size , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( size , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

155
Tree	{ str . getChars ( getChars , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( getChars , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

156
Tree	{ str . getChars ( str , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( str , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

157
Tree	{ str . getChars ( getChars , NUMBER_CONSTANT , str , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( getChars , NUMBER_CONSTANT , str , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

158
Tree	{ str . getChars ( strLen , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( strLen , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

159
Tree	{ str . getChars ( buffer , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( buffer , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

160
Tree	{ getChars ( STRING_CONSTANT , strLen , buffer , size ) ; }
Code	{ getChars ( STRING_CONSTANT , strLen , buffer , size ) ; }
Distance : 4

161
Tree	{ getChars ( strLen , buffer , false ) ; }
Code	{ getChars ( strLen , buffer , false ) ; }
Distance : 6

162
Tree	{ str . getChars ( getChars , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( getChars , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

163
Tree	{ str . getChars ( padChar , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( padChar , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

164
Tree	{ str . String ( false ) ; }
Code	{ str . String ( false ) ; }
Distance : 8

165
Tree	{ str . getChars ( size , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( size , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

166
Tree	{ str . getChars ( getChars , buffer () , this ) ; }
Code	{ str . getChars ( getChars , buffer () , this ) ; }
Distance : 5

167
Tree	{ str . getChars ( appendFixedWidthPadRight , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( appendFixedWidthPadRight , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

168
Tree	{ str . getChars ( strLen , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( strLen , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

169
Tree	{ str . getChars ( NUMBER_CONSTANT , str , buffer , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , str , buffer , size ) ; }
Distance : 1

170
Tree	{ getChars ( str , strLen , size , size ) ; }
Code	{ getChars ( str , strLen , size , size ) ; }
Distance : 5

171
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , str , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , str , size ) ; }
Distance : 2

172
Tree	{ str . getChars ( super , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( super , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT ) ; }
Distance : 4

173
Tree	{ getChars ( toString , padChar , false ) ; }
Code	{ getChars ( toString , padChar , false ) ; }
Distance : 7

174
Tree	{ str . getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

175
Tree	{ getChars ( STRING_CONSTANT , strLen , buffer , buffer ) ; }
Code	{ getChars ( STRING_CONSTANT , strLen , buffer , buffer ) ; }
Distance : 5

176
Tree	{ getChars ( strLen , strLen , size , size ) ; }
Code	{ getChars ( strLen , strLen , size , size ) ; }
Distance : 5

177
Tree	{ str . getChars ( getChars , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , str + size ) ; }
Code	{ str . getChars ( getChars , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , str + size ) ; }
Distance : 6

178
Tree	{ str . getChars ( class , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( class , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT ) ; }
Distance : 4

179
Tree	{ str . getChars ( String , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( String , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

180
Tree	{ str . getChars ( str , strLen . size () , this ) ; }
Code	{ str . getChars ( str , strLen . size () , this ) ; }
Distance : 6

181
Tree	{ str . getChars ( getChars , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , str + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( getChars , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , str + NUMBER_CONSTANT ) ; }
Distance : 7

182
Tree	{ str . getChars ( str , strLen ) ; }
Code	{ str . getChars ( str , strLen ) ; }
Distance : 6

183
Tree	{ str . getChars ( str , strLen ) ; }
Code	{ str . getChars ( str , strLen ) ; }
Distance : 6

184
Tree	{ str . getChars ( size , strLen ) ; }
Code	{ str . getChars ( size , strLen ) ; }
Distance : 6

185
Tree	{ getChars ( str , strLen , size , size ) ; }
Code	{ getChars ( str , strLen , size , size ) ; }
Distance : 5

186
Tree	{ str . getChars ( strLen , strLen ) ; }
Code	{ str . getChars ( strLen , strLen ) ; }
Distance : 6

187
Tree	{ str . getChars ( getChars , buffer ) ; }
Code	{ str . getChars ( getChars , buffer ) ; }
Distance : 5

188
Tree	{ str . getChars ( padChar , strLen . size () , this ) ; }
Code	{ str . getChars ( padChar , strLen . size () , this ) ; }
Distance : 6

189
Tree	{ str . getChars ( getChars , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + str ) ; }
Code	{ str . getChars ( getChars , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + str ) ; }
Distance : 7

190
Tree	{ str . str ( false ) ; }
Code	{ str . str ( false ) ; }
Distance : 8

191
Tree	{ str . getChars ( strLen , buffer ) ; }
Code	{ str . getChars ( strLen , buffer ) ; }
Distance : 5

192
Tree	{ str . getChars ( String , strLen ) ; }
Code	{ str . getChars ( String , strLen ) ; }
Distance : 6

193
Tree	{ size . getChars ( false ) ; }
Code	{ size . getChars ( false ) ; }
Distance : 8

194
Tree	{ str . getChars ( padChar , strLen ) ; }
Code	{ str . getChars ( padChar , strLen ) ; }
Distance : 6

195
Tree	{ getChars ( strLen , padChar , size , size ) ; }
Code	{ getChars ( strLen , padChar , size , size ) ; }
Distance : 5

196
Tree	{ getChars ( str , size , false ) ; }
Code	{ getChars ( str , size , false ) ; }
Distance : 7

197
Tree	{ getChars ( toString , size , false ) ; }
Code	{ getChars ( toString , size , false ) ; }
Distance : 7

198
Tree	{ str . getChars ( getChars , NUMBER_CONSTANT , str , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( getChars , NUMBER_CONSTANT , str , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

199
Tree	{ str . getChars ( Object , strLen ) ; }
Code	{ str . getChars ( Object , strLen ) ; }
Distance : 6

========================================================================


========================================================================
Example Number: 38
Parent Code is: 
{ return cAvailableLocaleSet . contains ( locale ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return availableLocaleList () . contains ( locale ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=cAvailableLocaleSet}) (235{val=.}) (802{val=contains}) (214{val=(}) (800{val=locale}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=availableLocaleList}) (216{val=()})) (235{val=.}) (802{val=contains}) (214{val=(}) (800{val=locale}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/57/parent/src_java_org_apache_commons_lang_LocaleUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return locale ( locale , locale . contains () ) ; }
Code	{ return locale ( locale , locale . contains () ) ; }
Distance : 7

1
Tree	{ return locale . contains ( ( locale ) locale ) ; }
Code	{ return locale . contains ( ( locale ) locale ) ; }
Distance : 5

2
Tree	{ return locale . contains () ; }
Code	{ return locale . contains () ; }
Distance : 5

3
Tree	{ return locale . contains ( locale , locale ) ; }
Code	{ return locale . contains ( locale , locale ) ; }
Distance : 4

4
Tree	{ return ( locale ) locale . contains ( locale ) ; }
Code	{ return ( locale ) locale . contains ( locale ) ; }
Distance : 4

5
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

6
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) Locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) Locale ) ; }
Distance : 5

7
Tree	{ return ( Locale ) ; return false ; }
Code	{ return ( Locale ) ; return false ; }
Distance : 7

8
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

9
Tree	{ return contains . contains ( locale , false ) ; }
Code	{ return contains . contains ( locale , false ) ; }
Distance : 4

10
Tree	{ return locale . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) ; }
Distance : 2

11
Tree	{ return ( int ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( int ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

12
Tree	{ return cAvailableLocaleSet . contains ( locale , false ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , false ) ; }
Distance : 4

13
Tree	{ return locale . contains ( locale ) . contains () ; }
Code	{ return locale . contains ( locale ) . contains () ; }
Distance : 5

14
Tree	{ return cAvailableLocaleSet . contains ( locale , Locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , Locale ) ; }
Distance : 4

15
Tree	{ return ( double ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( double ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

16
Tree	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Distance : 6

17
Tree	{ return contains ( locale ) ; }
Code	{ return contains ( locale ) ; }
Distance : 3

18
Tree	{ return ( char ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( char ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

19
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Distance : 6

20
Tree	{ return ( short ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( short ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

21
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

22
Tree	{ contains ( locale ) ; return false ; }
Code	{ contains ( locale ) ; return false ; }
Distance : 7

23
Tree	{ return Locale ( locale . contains ( locale ) ) ; }
Code	{ return Locale ( locale . contains ( locale ) ) ; }
Distance : 4

24
Tree	{ return contains ( locale ) ; }
Code	{ return contains ( locale ) ; }
Distance : 3

25
Tree	{ return locale . contains ( locale , false ) ; }
Code	{ return locale . contains ( locale , false ) ; }
Distance : 4

26
Tree	{ return Locale . contains ( locale ) ; }
Code	{ return Locale . contains ( locale ) ; }
Distance : 2

27
Tree	{ return contains . contains ( locale ) . contains ( locale ) ; }
Code	{ return contains . contains ( locale ) . contains ( locale ) ; }
Distance : 6

28
Tree	{ return contains ( Locale ) ; }
Code	{ return contains ( Locale ) ; }
Distance : 4

29
Tree	{ return ( int ) contains ( Locale + NUMBER_CONSTANT ) ; }
Code	{ return ( int ) contains ( Locale + NUMBER_CONSTANT ) ; }
Distance : 6

30
Tree	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Distance : 4

31
Tree	{ return locale . contains ( locale ) . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) . contains ( locale ) ; }
Distance : 6

32
Tree	{ return cAvailableLocaleSet . contains ( ( Locale ) Locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( Locale ) Locale ) ; }
Distance : 6

33
Tree	{ return contains . contains ( locale ) ; }
Code	{ return contains . contains ( locale ) ; }
Distance : 2

34
Tree	{ return Locale . contains ( locale ) . contains () ; }
Code	{ return Locale . contains ( locale ) . contains () ; }
Distance : 5

35
Tree	{ return contains . contains ( ( Locale ) locale ) ; }
Code	{ return contains . contains ( ( Locale ) locale ) ; }
Distance : 5

36
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return break; ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return break; ; }
Distance : 6

37
Tree	{ return contains ( locale , Locale . contains () ) ; }
Code	{ return contains ( locale , Locale . contains () ) ; }
Distance : 7

38
Tree	{ return this . locale . contains ( locale ) ; }
Code	{ return this . locale . contains ( locale ) ; }
Distance : 3

39
Tree	{ return cAvailableLocaleSet . contains ( ( Locale ) locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( Locale ) locale ) ; }
Distance : 5

40
Tree	{ locale . contains ( Locale ) ; return false ; }
Code	{ locale . contains ( Locale ) ; return false ; }
Distance : 7

41
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

42
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

43
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return false ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return false ; }
Distance : 6

44
Tree	{ return locale . contains ( locale , Locale ) ; }
Code	{ return locale . contains ( locale , Locale ) ; }
Distance : 4

45
Tree	{ contains . contains ( locale ) ; return null ; }
Code	{ contains . contains ( locale ) ; return null ; }
Distance : 6

46
Tree	{ return ( contains ) locale . contains ( locale ) ; }
Code	{ return ( contains ) locale . contains ( locale ) ; }
Distance : 4

47
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

48
Tree	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Distance : 3

49
Tree	{ return cAvailableLocaleSet . contains ( locale . locale ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale . locale ( locale ) ) ; }
Distance : 7

50
Tree	{ return cAvailableLocaleSet . contains ( Locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( Locale ) ; }
Distance : 3

51
Tree	{ return contains ( contains ) ; }
Code	{ return contains ( contains ) ; }
Distance : 4

52
Tree	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Distance : 4

53
Tree	{ return cAvailableLocaleSet . contains ( locale , true ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , true ) ; }
Distance : 4

54
Tree	{ return this . cAvailableLocaleSet . contains ( contains ) ; }
Code	{ return this . cAvailableLocaleSet . contains ( contains ) ; }
Distance : 4

55
Tree	{ return locale . contains ( locale ) . contains ( Locale ) ; }
Code	{ return locale . contains ( locale ) . contains ( Locale ) ; }
Distance : 7

56
Tree	{ return contains . contains ( Locale ) ; }
Code	{ return contains . contains ( Locale ) ; }
Distance : 3

57
Tree	{ return contains ( Locale ) ; }
Code	{ return contains ( Locale ) ; }
Distance : 4

58
Tree	{ Locale . contains ( locale ) ; return null ; }
Code	{ Locale . contains ( locale ) ; return null ; }
Distance : 6

59
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return false ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return false ; }
Distance : 6

60
Tree	{ return locale . contains () ; }
Code	{ return locale . contains () ; }
Distance : 5

61
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return null ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return null ; }
Distance : 6

62
Tree	{ return contains . contains ( locale , locale ) ; }
Code	{ return contains . contains ( locale , locale ) ; }
Distance : 4

63
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

64
Tree	{ return locale . contains () . contains ( Locale ) ; }
Code	{ return locale . contains () . contains ( Locale ) ; }
Distance : 4

65
Tree	{ Locale ( locale ) ; return false ; }
Code	{ Locale ( locale ) ; return false ; }
Distance : 8

66
Tree	{ return cAvailableLocaleSet . Locale () ; }
Code	{ return cAvailableLocaleSet . Locale () ; }
Distance : 6

67
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return continue; ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return continue; ; }
Distance : 6

68
Tree	{ return Locale ( locale , locale . contains () ) ; }
Code	{ return Locale ( locale , locale . contains () ) ; }
Distance : 7

69
Tree	{ return ( double ) contains ( Locale + NUMBER_CONSTANT ) ; }
Code	{ return ( double ) contains ( Locale + NUMBER_CONSTANT ) ; }
Distance : 6

70
Tree	{ return contains ( Locale . contains ( locale ) ) ; }
Code	{ return contains ( Locale . contains ( locale ) ) ; }
Distance : 4

71
Tree	{ return this . contains . contains ( Locale ) ; }
Code	{ return this . contains . contains ( Locale ) ; }
Distance : 4

72
Tree	{ return cAvailableLocaleSet . contains ( locale , Locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , Locale ) ; }
Distance : 4

73
Tree	{ return Locale . contains ( locale , locale ) ; }
Code	{ return Locale . contains ( locale , locale ) ; }
Distance : 4

74
Tree	{ return contains ( locale , locale . locale () ) ; }
Code	{ return contains ( locale , locale . locale () ) ; }
Distance : 7

75
Tree	{ locale ( Locale ) ; return false ; }
Code	{ locale ( Locale ) ; return false ; }
Distance : 8

76
Tree	{ return Locale . contains ( locale , false ) ; }
Code	{ return Locale . contains ( locale , false ) ; }
Distance : 4

77
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

78
Tree	{ return contains () ; }
Code	{ return contains () ; }
Distance : 6

79
Tree	{ return locale . contains ( Locale , locale ) ; }
Code	{ return locale . contains ( Locale , locale ) ; }
Distance : 4

80
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Distance : 5

81
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

82
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

83
Tree	{ return contains . contains () ; }
Code	{ return contains . contains () ; }
Distance : 5

84
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Distance : 3

85
Tree	{ return ( locale ) ; return false ; }
Code	{ return ( locale ) ; return false ; }
Distance : 7

86
Tree	{ return locale . locale () ; }
Code	{ return locale . locale () ; }
Distance : 5

87
Tree	{ return ( contains ) locale . contains ( Locale ) ; }
Code	{ return ( contains ) locale . contains ( Locale ) ; }
Distance : 5

88
Tree	{ return locale . contains ( ( Locale ) locale ) ; }
Code	{ return locale . contains ( ( Locale ) locale ) ; }
Distance : 5

89
Tree	{ return ( long ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( long ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

90
Tree	{ return ( byte ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( byte ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

91
Tree	{ cAvailableLocaleSet . contains ( Locale ) ; return false ; }
Code	{ cAvailableLocaleSet . contains ( Locale ) ; return false ; }
Distance : 7

92
Tree	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Distance : 4

93
Tree	{ return cAvailableLocaleSet . locale () ; }
Code	{ return cAvailableLocaleSet . locale () ; }
Distance : 5

94
Tree	{ return cAvailableLocaleSet . contains () ; }
Code	{ return cAvailableLocaleSet . contains () ; }
Distance : 5

95
Tree	{ return contains ( locale ) ; }
Code	{ return contains ( locale ) ; }
Distance : 3

96
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Distance : 3

97
Tree	{ locale ( locale ) ; return false ; }
Code	{ locale ( locale ) ; return false ; }
Distance : 8

98
Tree	{ return locale . contains ( Locale ) ; }
Code	{ return locale . contains ( Locale ) ; }
Distance : 3

99
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Distance : 5

100
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

101
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return false ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return false ; }
Distance : 6

102
Tree	{ locale . contains ( locale ) ; return false ; }
Code	{ locale . contains ( locale ) ; return false ; }
Distance : 6

103
Tree	{ return locale . contains () . contains ( locale ) ; }
Code	{ return locale . contains () . contains ( locale ) ; }
Distance : 3

104
Tree	{ return ( boolean ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( boolean ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

105
Tree	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Distance : 3

106
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return null ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return null ; }
Distance : 6

107
Tree	{ return contains () ; } T
Code	{ return contains () ; } T
Distance : 7

108
Tree	{ return ( cAvailableLocaleSet ) locale . contains ( Locale ) ; }
Code	{ return ( cAvailableLocaleSet ) locale . contains ( Locale ) ; }
Distance : 5

109
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Distance : 3

110
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Distance : 3

111
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Distance : 6

112
Tree	{ locale . contains ( locale ) ; return null ; }
Code	{ locale . contains ( locale ) ; return null ; }
Distance : 6

113
Tree	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Distance : 4

114
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return true ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return true ; }
Distance : 6

115
Tree	{ return contains ( locale . contains ( Locale ) ) ; }
Code	{ return contains ( locale . contains ( Locale ) ) ; }
Distance : 5

116
Tree	{ return cAvailableLocaleSet . contains ( locale . locale ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale . locale ( locale ) ) ; }
Distance : 7

117
Tree	{ return cAvailableLocaleSet . contains ( Locale ) . contains () ; }
Code	{ return cAvailableLocaleSet . contains ( Locale ) . contains () ; }
Distance : 6

118
Tree	{ cAvailableLocaleSet . contains ( Locale ) ; return null ; }
Code	{ cAvailableLocaleSet . contains ( Locale ) ; return null ; }
Distance : 7

119
Tree	{ return ( locale ) locale . contains ( Locale ) ; }
Code	{ return ( locale ) locale . contains ( Locale ) ; }
Distance : 5

120
Tree	{ return contains . contains () . contains ( locale ) ; }
Code	{ return contains . contains () . contains ( locale ) ; }
Distance : 3

121
Tree	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Distance : 3

122
Tree	{ return contains ( Locale , locale . contains () ) ; }
Code	{ return contains ( Locale , locale . contains () ) ; }
Distance : 7

123
Tree	{ return contains ( locale . locale ( locale ) ) ; }
Code	{ return contains ( locale . locale ( locale ) ) ; }
Distance : 5

124
Tree	{ return contains . contains ( locale , locale ) ; }
Code	{ return contains . contains ( locale , locale ) ; }
Distance : 4

125
Tree	{ return Locale . contains () . contains ( locale ) ; }
Code	{ return Locale . contains () . contains ( locale ) ; }
Distance : 3

126
Tree	{ return contains () ; } &&
Code	{ return contains () ; } &&
Distance : 7

127
Tree	{ return contains () ; }
Code	{ return contains () ; }
Distance : 6

128
Tree	{ return Locale . contains ( locale . locale ( locale ) ) ; }
Code	{ return Locale . contains ( locale . locale ( locale ) ) ; }
Distance : 7

129
Tree	{ return contains . contains ( locale . locale ( locale ) ) ; }
Code	{ return contains . contains ( locale . locale ( locale ) ) ; }
Distance : 7

130
Tree	{ return cAvailableLocaleSet . contains ( Locale , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( Locale , locale ) ; }
Distance : 4

131
Tree	{ return cAvailableLocaleSet . contains ( locale ) . locale () ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . locale () ; }
Distance : 5

132
Tree	{ return locale () ; }
Code	{ return locale () ; }
Distance : 6

133
Tree	{ return contains . contains ( Locale , false ) ; }
Code	{ return contains . contains ( Locale , false ) ; }
Distance : 5

134
Tree	{ return cAvailableLocaleSet . contains ( locale , false ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , false ) ; }
Distance : 4

135
Tree	{ return cAvailableLocaleSet . contains ( Locale , false ) ; }
Code	{ return cAvailableLocaleSet . contains ( Locale , false ) ; }
Distance : 5

136
Tree	{ return ( cAvailableLocaleSet ) Locale . contains ( locale ) ; }
Code	{ return ( cAvailableLocaleSet ) Locale . contains ( locale ) ; }
Distance : 4

137
Tree	{ return cAvailableLocaleSet . contains ( locale . locale ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale . locale ( locale ) ) ; }
Distance : 7

138
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return return; ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return return; ; }
Distance : 6

139
Tree	{ return contains . contains () ; }
Code	{ return contains . contains () ; }
Distance : 5

140
Tree	{ return cAvailableLocaleSet . contains () ; }
Code	{ return cAvailableLocaleSet . contains () ; }
Distance : 5

141
Tree	{ return cAvailableLocaleSet . contains ( Locale ) . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( Locale ) . contains ( locale ) ; }
Distance : 6

142
Tree	{ return this . Locale . contains ( locale ) ; }
Code	{ return this . Locale . contains ( locale ) ; }
Distance : 3

143
Tree	{ return this . locale . contains ( Locale ) ; }
Code	{ return this . locale . contains ( Locale ) ; }
Distance : 4

144
Tree	{ return ( Locale ) locale . contains ( locale ) ; }
Code	{ return ( Locale ) locale . contains ( locale ) ; }
Distance : 4

145
Tree	{ return locale . contains ( Locale ) . contains ( locale ) ; }
Code	{ return locale . contains ( Locale ) . contains ( locale ) ; }
Distance : 6

146
Tree	{ locale ( locale ) ; return true ; }
Code	{ locale ( locale ) ; return true ; }
Distance : 8

147
Tree	{ return contains . contains ( ( locale ) locale ) ; }
Code	{ return contains . contains ( ( locale ) locale ) ; }
Distance : 5

148
Tree	{ return Locale . contains ( locale , locale ) ; }
Code	{ return Locale . contains ( locale , locale ) ; }
Distance : 4

149
Tree	{ return locale . contains ( locale , locale ) ; }
Code	{ return locale . contains ( locale , locale ) ; }
Distance : 4

150
Tree	{ return cAvailableLocaleSet . contains ( Locale . locale ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( Locale . locale ( locale ) ) ; }
Distance : 7

151
Tree	{ return Locale . contains () ; }
Code	{ return Locale . contains () ; }
Distance : 5

152
Tree	{ Locale ( Locale ) ; return false ; }
Code	{ Locale ( Locale ) ; return false ; }
Distance : 8

153
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

154
Tree	{ return contains () ; } p
Code	{ return contains () ; } p
Distance : 7

155
Tree	{ return Locale . contains ( locale ) . contains ( locale ) ; }
Code	{ return Locale . contains ( locale ) . contains ( locale ) ; }
Distance : 6

156
Tree	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Code	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Distance : 4

157
Tree	{ return contains () ; } source
Code	{ return contains () ; } source
Distance : 7

158
Tree	{ return ( float ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( float ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

159
Tree	{ return contains () ; } toString
Code	{ return contains () ; } toString
Distance : 7

160
Tree	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Code	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Distance : 4

161
Tree	{ return cAvailableLocaleSet . contains () . contains ( Locale ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( Locale ) ; }
Distance : 4

162
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Distance : 5

163
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

164
Tree	{ return this . contains . contains ( locale ) ; }
Code	{ return this . contains . contains ( locale ) ; }
Distance : 3

165
Tree	{ return cAvailableLocaleSet . contains ( locale . locale ( Locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale . locale ( Locale ) ) ; }
Distance : 7

166
Tree	{ return locale ( locale ) ; }
Code	{ return locale ( locale ) ; }
Distance : 4

167
Tree	{ return Locale . contains ( ( locale ) locale ) ; }
Code	{ return Locale . contains ( ( locale ) locale ) ; }
Distance : 5

168
Tree	{ return ( locale ) ; return true ; }
Code	{ return ( locale ) ; return true ; }
Distance : 7

169
Tree	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Distance : 4

170
Tree	{ return Locale () ; }
Code	{ return Locale () ; }
Distance : 6

171
Tree	{ return contains . contains ( locale ) . contains () ; }
Code	{ return contains . contains ( locale ) . contains () ; }
Distance : 5

172
Tree	{ return cAvailableLocaleSet . contains () . locale ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains () . locale ( locale ) ; }
Distance : 4

173
Tree	{ contains . contains ( locale ) ; return false ; }
Code	{ contains . contains ( locale ) ; return false ; }
Distance : 6

174
Tree	{ return cAvailableLocaleSet . locale ( locale ) ; }
Code	{ return cAvailableLocaleSet . locale ( locale ) ; }
Distance : 3

175
Tree	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Code	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Distance : 4

176
Tree	{ contains ( Locale ) ; return false ; }
Code	{ contains ( Locale ) ; return false ; }
Distance : 8

177
Tree	{ return locale . contains ( locale , Locale ) ; }
Code	{ return locale . contains ( locale , Locale ) ; }
Distance : 4

178
Tree	{ Locale . contains ( locale ) ; return false ; }
Code	{ Locale . contains ( locale ) ; return false ; }
Distance : 6

179
Tree	{ return cAvailableLocaleSet . contains ( Locale , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( Locale , locale ) ; }
Distance : 4

180
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( Locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( Locale ) ; }
Distance : 7

181
Tree	{ return cAvailableLocaleSet . contains ( locale . Locale ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale . Locale ( locale ) ) ; }
Distance : 7

182
Tree	{ return locale ( locale . contains ( locale ) ) ; }
Code	{ return locale ( locale . contains ( locale ) ) ; }
Distance : 4

183
Tree	{ contains . contains ( Locale ) ; return false ; }
Code	{ contains . contains ( Locale ) ; return false ; }
Distance : 7

184
Tree	{ return locale . contains ( locale . locale ( locale ) ) ; }
Code	{ return locale . contains ( locale . locale ( locale ) ) ; }
Distance : 7

185
Tree	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Distance : 4

186
Tree	{ return contains () ; } options
Code	{ return contains () ; } options
Distance : 7

187
Tree	{ return contains ( locale ) ; }
Code	{ return contains ( locale ) ; }
Distance : 3

188
Tree	{ return locale ( Locale ) ; }
Code	{ return locale ( Locale ) ; }
Distance : 5

189
Tree	{ return locale . contains ( Locale ) . contains () ; }
Code	{ return locale . contains ( Locale ) . contains () ; }
Distance : 6

190
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Distance : 5

191
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Distance : 6

192
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Distance : 5

193
Tree	{ return locale . contains ( Locale , false ) ; }
Code	{ return locale . contains ( Locale , false ) ; }
Distance : 5

194
Tree	{ return Locale ( locale ) ; }
Code	{ return Locale ( locale ) ; }
Distance : 4

195
Tree	{ return this . cAvailableLocaleSet . contains ( Locale ) ; }
Code	{ return this . cAvailableLocaleSet . contains ( Locale ) ; }
Distance : 4

196
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return super(); ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return super(); ; }
Distance : 6

197
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Distance : 5

198
Tree	{ return cAvailableLocaleSet . contains ( locale , false ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , false ) ; }
Distance : 4

199
Tree	{ return cAvailableLocaleSet . contains ( locale , contains ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , contains ) ; }
Distance : 4

========================================================================


========================================================================
Example Number: 39
Parent Code is: 
{ escapeJavaStyleString ( out , str , true ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ escapeJavaStyleString ( out , str , true , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=true}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ str . out () . out ( str , out ) ; }
Code	{ str . out () . out ( str , out ) ; }
Distance : 8

1
Tree	{ str . out ( NUMBER_CONSTANT ) . str ( str , out ) ; }
Code	{ str . out ( NUMBER_CONSTANT ) . str ( str , out ) ; }
Distance : 9

2
Tree	{ out . out () . out ( str , out ) ; }
Code	{ out . out () . out ( str , out ) ; }
Distance : 8

3
Tree	{ str . out ( NUMBER_CONSTANT ) . out ( str , out ) ; }
Code	{ str . out ( NUMBER_CONSTANT ) . out ( str , out ) ; }
Distance : 10

4
Tree	{ str () . str ( str , str ) ; }
Code	{ str () . str ( str , str ) ; }
Distance : 7

5
Tree	{ out . out ( NUMBER_CONSTANT ) . str ( str , out ) ; }
Code	{ out . out ( NUMBER_CONSTANT ) . str ( str , out ) ; }
Distance : 9

6
Tree	{ out . out ( NUMBER_CONSTANT ) . out ( str , out ) ; }
Code	{ out . out ( NUMBER_CONSTANT ) . out ( str , out ) ; }
Distance : 10

7
Tree	{ str . out () . str ( str , out ) ; }
Code	{ str . out () . str ( str , out ) ; }
Distance : 7

8
Tree	{ out ( out , out , IllegalArgumentException , str ) ; }
Code	{ out ( out , out , IllegalArgumentException , str ) ; }
Distance : 4

9
Tree	{ str . this . out ( str , out , IllegalArgumentException ) ; }
Code	{ str . this . out ( str , out , IllegalArgumentException ) ; }
Distance : 7

10
Tree	{ out ( out , out , out ) ; }
Code	{ out ( out , out , out ) ; }
Distance : 5

11
Tree	{ str ( out , out , IllegalArgumentException ) ; }
Code	{ str ( out , out , IllegalArgumentException ) ; }
Distance : 5

12
Tree	{ str ( out , out , true ) ; }
Code	{ str ( out , out , true ) ; }
Distance : 4

13
Tree	{ str . str ( str , out , this ) ; }
Code	{ str . str ( str , out , this ) ; }
Distance : 6

14
Tree	{ IllegalArgumentException ( out , out , false ) ; }
Code	{ IllegalArgumentException ( out , out , false ) ; }
Distance : 5

15
Tree	{ str . str ( str , str ) ; }
Code	{ str . str ( str , str ) ; }
Distance : 7

16
Tree	{ out . str ( str , out , this ) ; }
Code	{ out . str ( str , out , this ) ; }
Distance : 6

17
Tree	{ out . str ( str , str ) ; }
Code	{ out . str ( str , str ) ; }
Distance : 6

18
Tree	{ escapeJavaStyleString ( out , out ) ; }
Code	{ escapeJavaStyleString ( out , out ) ; }
Distance : 5

19
Tree	{ Writer ( out , str ) ; }
Code	{ Writer ( out , str ) ; }
Distance : 5

20
Tree	{ str () . out ( str , out ) ; }
Code	{ str () . out ( str , out ) ; }
Distance : 7

21
Tree	{ out () . str ( str , out ) ; }
Code	{ out () . str ( str , out ) ; }
Distance : 7

22
Tree	{ str () . str ( str , out ) ; }
Code	{ str () . str ( str , out ) ; }
Distance : 7

23
Tree	{ str . out ( out , out ) ; }
Code	{ str . out ( out , out ) ; }
Distance : 7

24
Tree	{ out () . out ( str , out ) ; }
Code	{ out () . out ( str , out ) ; }
Distance : 7

25
Tree	{ str ( out , out , out ) ; }
Code	{ str ( out , out , out ) ; }
Distance : 5

26
Tree	{ out . out ( out , out ) ; }
Code	{ out . out ( out , out ) ; }
Distance : 7

27
Tree	{ escapeJavaStyleString ( out , out , false ) ; }
Code	{ escapeJavaStyleString ( out , out , false ) ; }
Distance : 4

28
Tree	{ String ( out , out , false ) ; }
Code	{ String ( out , out , false ) ; }
Distance : 5

29
Tree	{ IllegalArgumentException ( out , null ) ; }
Code	{ IllegalArgumentException ( out , null ) ; }
Distance : 6

30
Tree	{ out ( out , out , IllegalArgumentException ) ; }
Code	{ out ( out , out , IllegalArgumentException ) ; }
Distance : 5

31
Tree	{ out ( out , out , true ) ; }
Code	{ out ( out , out , true ) ; }
Distance : 4

32
Tree	{ out . str ( str ) ; }
Code	{ out . str ( str ) ; }
Distance : 7

33
Tree	{ str . out ( str , out , this ) ; }
Code	{ str . out ( str , out , this ) ; }
Distance : 5

34
Tree	{ str . out ( str , str ) ; }
Code	{ str . out ( str , str ) ; }
Distance : 6

35
Tree	{ out . out ( str , out , this ) ; }
Code	{ out . out ( str , out , this ) ; }
Distance : 5

36
Tree	{ out . out ( str , str ) ; }
Code	{ out . out ( str , str ) ; }
Distance : 6

37
Tree	{ escapeJavaStyleString ( out , out ) ; }
Code	{ escapeJavaStyleString ( out , out ) ; }
Distance : 5

38
Tree	{ str ( STRING_CONSTANT , out , out , out ) ; }
Code	{ str ( STRING_CONSTANT , out , out , out ) ; }
Distance : 5

39
Tree	{ String ( out , out ) ; }
Code	{ String ( out , out ) ; }
Distance : 6

40
Tree	{ Writer ( out , null ) ; }
Code	{ Writer ( out , null ) ; }
Distance : 6

41
Tree	{ str () . str ( str , out ) ; }
Code	{ str () . str ( str , out ) ; }
Distance : 7

42
Tree	{ out ( STRING_CONSTANT , out , String , str ) ; }
Code	{ out ( STRING_CONSTANT , out , String , str ) ; }
Distance : 5

43
Tree	{ out ( str , null ) ; }
Code	{ out ( str , null ) ; }
Distance : 6

44
Tree	{ str () . str ( out , out ) ; }
Code	{ str () . str ( out , out ) ; }
Distance : 7

45
Tree	{ out . out () . str ( str , out ) ; }
Code	{ out . out () . str ( str , out ) ; }
Distance : 7

46
Tree	{ out () . str ( out , out ) ; }
Code	{ out () . str ( out , out ) ; }
Distance : 7

47
Tree	{ out ( out , out ) ; }
Code	{ out ( out , out ) ; }
Distance : 6

48
Tree	{ out . this . out ( str , out , IllegalArgumentException ) ; }
Code	{ out . this . out ( str , out , IllegalArgumentException ) ; }
Distance : 7

49
Tree	{ out . str ( NUMBER_CONSTANT ) . str ( str , out ) ; }
Code	{ out . str ( NUMBER_CONSTANT ) . str ( str , out ) ; }
Distance : 9

50
Tree	{ str ( out , out ) ; }
Code	{ str ( out , out ) ; }
Distance : 6

51
Tree	{ out . str ( NUMBER_CONSTANT ) . out ( str , out ) ; }
Code	{ out . str ( NUMBER_CONSTANT ) . out ( str , out ) ; }
Distance : 10

52
Tree	{ str () . out ( out , out ) ; }
Code	{ str () . out ( out , out ) ; }
Distance : 8

53
Tree	{ out ( STRING_CONSTANT , out , out , str ) ; }
Code	{ out ( STRING_CONSTANT , out , out , str ) ; }
Distance : 5

54
Tree	{ out ( out , out , false ) ; }
Code	{ out ( out , out , false ) ; }
Distance : 5

55
Tree	{ str ( out , out , false ) ; }
Code	{ str ( out , out , false ) ; }
Distance : 5

56
Tree	{ out ( out , out , str ) ; }
Code	{ out ( out , out , str ) ; }
Distance : 5

57
Tree	{ out . out ( str , out ) ; }
Code	{ out . out ( str , out ) ; }
Distance : 6

58
Tree	{ out ( out , null ) ; }
Code	{ out ( out , null ) ; }
Distance : 6

59
Tree	{ out ( out , out , String , false ) ; }
Code	{ out ( out , out , String , false ) ; }
Distance : 4

60
Tree	{ str () . out ( str , str ) ; }
Code	{ str () . out ( str , str ) ; }
Distance : 7

61
Tree	{ str . out ( str , out ) ; }
Code	{ str . out ( str , out ) ; }
Distance : 6

62
Tree	{ IOException ( out , null ) ; }
Code	{ IOException ( out , null ) ; }
Distance : 6

63
Tree	{ out ( out , str ) ; }
Code	{ out ( out , str ) ; }
Distance : 5

64
Tree	{ str . this . str ( str , out , IllegalArgumentException ) ; }
Code	{ str . this . str ( str , out , IllegalArgumentException ) ; }
Distance : 8

65
Tree	{ Writer () . str ( str , out ) ; }
Code	{ Writer () . str ( str , out ) ; }
Distance : 7

66
Tree	{ out . out ( str , out ) ; }
Code	{ out . out ( str , out ) ; }
Distance : 6

67
Tree	{ out ( out , out , IllegalArgumentException , false ) ; }
Code	{ out ( out , out , IllegalArgumentException , false ) ; }
Distance : 4

68
Tree	{ str . out ( str , str , this ) ; }
Code	{ str . out ( str , str , this ) ; }
Distance : 5

69
Tree	{ str ( out , str ) ; }
Code	{ str ( out , str ) ; }
Distance : 5

70
Tree	{ str . str () . str ( str , out ) ; }
Code	{ str . str () . str ( str , out ) ; }
Distance : 8

71
Tree	{ out ( out , out , String ) ; }
Code	{ out ( out , out , String ) ; }
Distance : 5

72
Tree	{ out . out ( str , str ) ; }
Code	{ out . out ( str , str ) ; }
Distance : 6

73
Tree	{ out ( STRING_CONSTANT , out , str , str ) ; }
Code	{ out ( STRING_CONSTANT , out , str , str ) ; }
Distance : 5

74
Tree	{ str . str () . out ( str , out ) ; }
Code	{ str . str () . out ( str , out ) ; }
Distance : 9

75
Tree	{ str . out ( str , str ) ; }
Code	{ str . out ( str , str ) ; }
Distance : 6

76
Tree	{ str . str ( str , out ) ; }
Code	{ str . str ( str , out ) ; }
Distance : 7

77
Tree	{ out . str ( str , out ) ; }
Code	{ out . str ( str , out ) ; }
Distance : 6

78
Tree	{ str ( out , null ) ; }
Code	{ str ( out , null ) ; }
Distance : 6

79
Tree	{ str . str ( NUMBER_CONSTANT ) . str ( str , out ) ; }
Code	{ str . str ( NUMBER_CONSTANT ) . str ( str , out ) ; }
Distance : 9

80
Tree	{ Writer ( out , out ) ; }
Code	{ Writer ( out , out ) ; }
Distance : 6

81
Tree	{ str () . out ( str , out ) ; }
Code	{ str () . out ( str , out ) ; }
Distance : 7

82
Tree	{ out . str () . out ( str , out ) ; }
Code	{ out . str () . out ( str , out ) ; }
Distance : 9

83
Tree	{ out . out ( str , str , this ) ; }
Code	{ out . out ( str , str , this ) ; }
Distance : 5

84
Tree	{ str ( STRING_CONSTANT , out , out , str ) ; }
Code	{ str ( STRING_CONSTANT , out , out , str ) ; }
Distance : 5

85
Tree	{ out ( out , str , false ) ; }
Code	{ out ( out , str , false ) ; }
Distance : 4

86
Tree	{ str . out ( out ) ; }
Code	{ str . out ( out ) ; }
Distance : 8

87
Tree	{ str . str ( NUMBER_CONSTANT ) . out ( str , out ) ; }
Code	{ str . str ( NUMBER_CONSTANT ) . out ( str , out ) ; }
Distance : 10

88
Tree	{ escapeJavaStyleString ( out , null ) ; }
Code	{ escapeJavaStyleString ( out , null ) ; }
Distance : 5

89
Tree	{ Writer . out ( str , out ) ; }
Code	{ Writer . out ( str , out ) ; }
Distance : 6

90
Tree	{ str . this . out ( str , out , out ) ; }
Code	{ str . this . out ( str , out , out ) ; }
Distance : 7

91
Tree	{ str . out ( str ) ; }
Code	{ str . out ( str ) ; }
Distance : 7

92
Tree	{ str ( out , out , IllegalArgumentException , str ) ; }
Code	{ str ( out , out , IllegalArgumentException , str ) ; }
Distance : 4

93
Tree	{ out . out ( str ) ; }
Code	{ out . out ( str ) ; }
Distance : 7

94
Tree	{ out . out ( out , out ) ; }
Code	{ out . out ( out , out ) ; }
Distance : 7

95
Tree	{ str . out () . out ( str , str ) ; }
Code	{ str . out () . out ( str , str ) ; }
Distance : 8

96
Tree	{ str ( STRING_CONSTANT , out , str , str ) ; }
Code	{ str ( STRING_CONSTANT , out , str , str ) ; }
Distance : 5

97
Tree	{ str . this . out ( str , out , str ) ; }
Code	{ str . this . out ( str , out , str ) ; }
Distance : 7

98
Tree	{ Writer . str ( str , out ) ; }
Code	{ Writer . str ( str , out ) ; }
Distance : 7

99
Tree	{ out . this . str ( str , out , IllegalArgumentException ) ; }
Code	{ out . this . str ( str , out , IllegalArgumentException ) ; }
Distance : 8

100
Tree	{ Writer ( out , out , false ) ; }
Code	{ Writer ( out , out , false ) ; }
Distance : 5

101
Tree	{ str () . str ( str , str ) ; }
Code	{ str () . str ( str , str ) ; }
Distance : 7

102
Tree	{ out . out () . out ( str , str ) ; }
Code	{ out . out () . out ( str , str ) ; }
Distance : 8

103
Tree	{ out . str () . str ( str , out ) ; }
Code	{ out . str () . str ( str , out ) ; }
Distance : 8

104
Tree	{ String ( out , null ) ; }
Code	{ String ( out , null ) ; }
Distance : 6

105
Tree	{ str ( out , out , str ) ; }
Code	{ str ( out , out , str ) ; }
Distance : 5

106
Tree	{ str . Writer ( str ) ; }
Code	{ str . Writer ( str ) ; }
Distance : 8

107
Tree	{ str . out ( str , out ) ; }
Code	{ str . out ( str , out ) ; }
Distance : 6

108
Tree	{ IllegalArgumentException ( out , out ) ; }
Code	{ IllegalArgumentException ( out , out ) ; }
Distance : 6

109
Tree	{ str ( out , out , str , false ) ; }
Code	{ str ( out , out , str , false ) ; }
Distance : 4

110
Tree	{ str ( out , out , IllegalArgumentException , out ) ; }
Code	{ str ( out , out , IllegalArgumentException , out ) ; }
Distance : 4

111
Tree	{ out ( out , str , IllegalArgumentException , false ) ; }
Code	{ out ( out , str , IllegalArgumentException , false ) ; }
Distance : 3

112
Tree	{ str ( out , str , false ) ; }
Code	{ str ( out , str , false ) ; }
Distance : 4

113
Tree	{ out ( out , out , out , str ) ; }
Code	{ out ( out , out , out , str ) ; }
Distance : 4

114
Tree	{ str . out ( out , out , this ) ; }
Code	{ str . out ( out , out , this ) ; }
Distance : 6

115
Tree	{ out . this . out ( str , out , out ) ; }
Code	{ out . this . out ( str , out , out ) ; }
Distance : 7

116
Tree	{ str ( str , null ) ; }
Code	{ str ( str , null ) ; }
Distance : 6

117
Tree	{ out ( out , out , out , out ) ; }
Code	{ out ( out , out , out , out ) ; }
Distance : 4

118
Tree	{ out ( out , out , IOException , false ) ; }
Code	{ out ( out , out , IOException , false ) ; }
Distance : 4

119
Tree	{ out ( STRING_CONSTANT , out , out , out ) ; }
Code	{ out ( STRING_CONSTANT , out , out , out ) ; }
Distance : 5

120
Tree	{ str . str ( str ) ; }
Code	{ str . str ( str ) ; }
Distance : 8

121
Tree	{ out ( out , str , IllegalArgumentException ) ; }
Code	{ out ( out , str , IllegalArgumentException ) ; }
Distance : 4

122
Tree	{ out ( out , out , IllegalArgumentException , out ) ; }
Code	{ out ( out , out , IllegalArgumentException , out ) ; }
Distance : 4

123
Tree	{ out ( out , out , out , false ) ; }
Code	{ out ( out , out , out , false ) ; }
Distance : 4

124
Tree	{ out . out ( out ) ; }
Code	{ out . out ( out ) ; }
Distance : 8

125
Tree	{ out . str ( str , str , this ) ; }
Code	{ out . str ( str , str , this ) ; }
Distance : 6

126
Tree	{ str ( out , out , out , false ) ; }
Code	{ str ( out , out , out , false ) ; }
Distance : 4

127
Tree	{ str . out ( NUMBER_CONSTANT ) . Writer ( str , out ) ; }
Code	{ str . out ( NUMBER_CONSTANT ) . Writer ( str , out ) ; }
Distance : 10

128
Tree	{ str ( out , out , IllegalArgumentException , false ) ; }
Code	{ str ( out , out , IllegalArgumentException , false ) ; }
Distance : 4

129
Tree	{ str ( out , out , String , false ) ; }
Code	{ str ( out , out , String , false ) ; }
Distance : 4

130
Tree	{ str . out ( str ? IllegalArgumentException : IllegalArgumentException ) ; }
Code	{ str . out ( str ? IllegalArgumentException : IllegalArgumentException ) ; }
Distance : 7

131
Tree	{ str ( STRING_CONSTANT , out , IllegalArgumentException , str ) ; }
Code	{ str ( STRING_CONSTANT , out , IllegalArgumentException , str ) ; }
Distance : 5

132
Tree	{ out . out ( str ? IllegalArgumentException : IllegalArgumentException ) ; }
Code	{ out . out ( str ? IllegalArgumentException : IllegalArgumentException ) ; }
Distance : 7

133
Tree	{ out () . str ( str , str ) ; }
Code	{ out () . str ( str , str ) ; }
Distance : 7

134
Tree	{ out ( out , out , str , str ) ; }
Code	{ out ( out , out , str , str ) ; }
Distance : 4

135
Tree	{ str . this . str ( str , out , out ) ; }
Code	{ str . this . str ( str , out , out ) ; }
Distance : 8

136
Tree	{ out ( out , out , String , str ) ; }
Code	{ out ( out , out , String , str ) ; }
Distance : 4

137
Tree	{ str . str ( str ? IllegalArgumentException : IllegalArgumentException ) ; }
Code	{ str . str ( str ? IllegalArgumentException : IllegalArgumentException ) ; }
Distance : 8

138
Tree	{ out . str ( str ? IllegalArgumentException : IllegalArgumentException ) ; }
Code	{ out . str ( str ? IllegalArgumentException : IllegalArgumentException ) ; }
Distance : 8

139
Tree	{ escapeJavaStyleString ( out , null ) ; }
Code	{ escapeJavaStyleString ( out , null ) ; }
Distance : 5

140
Tree	{ str () . out ( str , str ) ; }
Code	{ str () . out ( str , str ) ; }
Distance : 7

141
Tree	{ out . this . str ( str , out , out ) ; }
Code	{ out . this . str ( str , out , out ) ; }
Distance : 8

142
Tree	{ out . str ( str , out ) ; }
Code	{ out . str ( str , out ) ; }
Distance : 6

143
Tree	{ str . str ( out ) ; }
Code	{ str . str ( out ) ; }
Distance : 8

144
Tree	{ out () . out ( str , str ) ; }
Code	{ out () . out ( str , str ) ; }
Distance : 7

145
Tree	{ str . out ( str ? Writer : IllegalArgumentException ) ; }
Code	{ str . out ( str ? Writer : IllegalArgumentException ) ; }
Distance : 7

146
Tree	{ out . out ( out , out , this ) ; }
Code	{ out . out ( out , out , this ) ; }
Distance : 6

147
Tree	{ str . out ( null , str , out , str ) ; }
Code	{ str . out ( null , str , out , str ) ; }
Distance : 6

148
Tree	{ str . out ( str ? out : IllegalArgumentException ) ; }
Code	{ str . out ( str ? out : IllegalArgumentException ) ; }
Distance : 7

149
Tree	{ str . str ( str , out ) ; }
Code	{ str . str ( str , out ) ; }
Distance : 7

150
Tree	{ out () . str ( str , str ) ; }
Code	{ out () . str ( str , str ) ; }
Distance : 7

151
Tree	{ out . out ( null , str , out , str ) ; }
Code	{ out . out ( null , str , out , str ) ; }
Distance : 6

152
Tree	{ str ( out , out , out , out ) ; }
Code	{ str ( out , out , out , out ) ; }
Distance : 4

153
Tree	{ str ( out , out . IllegalArgumentException ( String ) , null ) ; }
Code	{ str ( out , out . IllegalArgumentException ( String ) , null ) ; }
Distance : 8

154
Tree	{ str . out ( str ? true : IllegalArgumentException ) ; }
Code	{ str . out ( str ? true : IllegalArgumentException ) ; }
Distance : 6

155
Tree	{ out ( STRING_CONSTANT , out , IllegalArgumentException , str ) ; }
Code	{ out ( STRING_CONSTANT , out , IllegalArgumentException , str ) ; }
Distance : 5

156
Tree	{ out . out () . out () . str ( str , out ) ; }
Code	{ out . out () . out () . str ( str , out ) ; }
Distance : 10

157
Tree	{ out ( out , out , IOException ) ; }
Code	{ out ( out , out , IOException ) ; }
Distance : 5

158
Tree	{ str . str ( str , str , this ) ; }
Code	{ str . str ( str , str , this ) ; }
Distance : 6

159
Tree	{ out ( out , out . out ( str ) , null ) ; }
Code	{ out ( out , out . out ( str ) , null ) ; }
Distance : 8

160
Tree	{ str ( out , out , String ) ; }
Code	{ str ( out , out , String ) ; }
Distance : 5

161
Tree	{ out ( out , out . IllegalArgumentException ( str ) , null ) ; }
Code	{ out ( out , out . IllegalArgumentException ( str ) , null ) ; }
Distance : 8

162
Tree	{ str . out () . out () . out ( str , out ) ; }
Code	{ str . out () . out () . out ( str , out ) ; }
Distance : 11

163
Tree	{ out . str ( out ) ; }
Code	{ out . str ( out ) ; }
Distance : 7

164
Tree	{ str . out () . str () . str ( str , out ) ; }
Code	{ str . out () . str () . str ( str , out ) ; }
Distance : 10

165
Tree	{ str . out ( null , str , str , str ) ; }
Code	{ str . out ( null , str , str , str ) ; }
Distance : 6

166
Tree	{ out () . out ( str , out ) ; }
Code	{ out () . out ( str , out ) ; }
Distance : 7

167
Tree	{ str . out ( null , str , IllegalArgumentException , str ) ; }
Code	{ str . out ( null , str , IllegalArgumentException , str ) ; }
Distance : 6

168
Tree	{ out . out ( str ? Writer : IllegalArgumentException ) ; }
Code	{ out . out ( str ? Writer : IllegalArgumentException ) ; }
Distance : 7

169
Tree	{ out . out ( str ? out : IllegalArgumentException ) ; }
Code	{ out . out ( str ? out : IllegalArgumentException ) ; }
Distance : 7

170
Tree	{ out . Writer ( str ) ; }
Code	{ out . Writer ( str ) ; }
Distance : 8

171
Tree	{ out ( out , out . out ( String ) , null ) ; }
Code	{ out ( out , out . out ( String ) , null ) ; }
Distance : 8

172
Tree	{ out ( out , out . IllegalArgumentException ( String ) , null ) ; }
Code	{ out ( out , out . IllegalArgumentException ( String ) , null ) ; }
Distance : 8

173
Tree	{ out . out () . out () . out ( str , out ) ; }
Code	{ out . out () . out () . out ( str , out ) ; }
Distance : 11

174
Tree	{ out ( STRING_CONSTANT , out , str , out ) ; }
Code	{ out ( STRING_CONSTANT , out , str , out ) ; }
Distance : 5

175
Tree	{ out . out () . str () . str ( str , out ) ; }
Code	{ out . out () . str () . str ( str , out ) ; }
Distance : 10

176
Tree	{ out ( out , out , str , false ) ; }
Code	{ out ( out , out , str , false ) ; }
Distance : 4

177
Tree	{ out . out ( NUMBER_CONSTANT ) . Writer ( str , out ) ; }
Code	{ out . out ( NUMBER_CONSTANT ) . Writer ( str , out ) ; }
Distance : 10

178
Tree	{ str . out ( null , out , out , str ) ; }
Code	{ str . out ( null , out , out , str ) ; }
Distance : 7

179
Tree	{ out . out ( str ? true : IllegalArgumentException ) ; }
Code	{ out . out ( str ? true : IllegalArgumentException ) ; }
Distance : 6

180
Tree	{ str ( out , out , out , str ) ; }
Code	{ str ( out , out , out , str ) ; }
Distance : 4

181
Tree	{ out . out ( null , str , str , str ) ; }
Code	{ out . out ( null , str , str , str ) ; }
Distance : 6

182
Tree	{ str ( out , out . out ( str ) , null ) ; }
Code	{ str ( out , out . out ( str ) , null ) ; }
Distance : 8

183
Tree	{ out . out ( null , str , IllegalArgumentException , str ) ; }
Code	{ out . out ( null , str , IllegalArgumentException , str ) ; }
Distance : 6

184
Tree	{ out . str ( str , str ) ; }
Code	{ out . str ( str , str ) ; }
Distance : 6

185
Tree	{ str . this . out ( str , out , String ) ; }
Code	{ str . this . out ( str , out , String ) ; }
Distance : 7

186
Tree	{ str . str ( null , str , out , str ) ; }
Code	{ str . str ( null , str , out , str ) ; }
Distance : 6

187
Tree	{ str . out () . str () . out ( str , out ) ; }
Code	{ str . out () . str () . out ( str , out ) ; }
Distance : 10

188
Tree	{ out . out () . str () . out ( str , out ) ; }
Code	{ out . out () . str () . out ( str , out ) ; }
Distance : 10

189
Tree	{ str ( out , out . IllegalArgumentException ( str ) , null ) ; }
Code	{ str ( out , out . IllegalArgumentException ( str ) , null ) ; }
Distance : 8

190
Tree	{ out ( out , out . true ( str ) , null ) ; }
Code	{ out ( out , out . true ( str ) , null ) ; }
Distance : 7

191
Tree	{ out () . out ( str , str ) ; }
Code	{ out () . out ( str , str ) ; }
Distance : 7

192
Tree	{ str . str () . out () . str ( str , out ) ; }
Code	{ str . str () . out () . str ( str , out ) ; }
Distance : 10

193
Tree	{ str . out () . out () . str ( str , out ) ; }
Code	{ str . out () . out () . str ( str , out ) ; }
Distance : 10

194
Tree	{ out . str () . out () . str ( str , out ) ; }
Code	{ out . str () . out () . str ( str , out ) ; }
Distance : 10

195
Tree	{ out () . str ( str , out ) ; }
Code	{ out () . str ( str , out ) ; }
Distance : 7

196
Tree	{ out . out ( null , out , out , str ) ; }
Code	{ out . out ( null , out , out , str ) ; }
Distance : 7

197
Tree	{ out . str ( null , str , out , str ) ; }
Code	{ out . str ( null , str , out , str ) ; }
Distance : 6

198
Tree	{ out ( out , out . Writer ( str ) , null ) ; }
Code	{ out ( out , out . Writer ( str ) , null ) ; }
Distance : 8

199
Tree	{ str ( out , out . out ( String ) , null ) ; }
Code	{ str ( out , out . out ( String ) , null ) ; }
Distance : 8

========================================================================


========================================================================
Example Number: 40
Parent Code is: 
{ return escapeJavaStyleString ( str , true ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return escapeJavaStyleString ( str , true , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=true}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ this . str = str ; this }
Code	{ this . str = str ; this }
Distance : 9

1
Tree	{ return str ( str , String ) ; }
Code	{ return str ( str , String ) ; }
Distance : 4

2
Tree	{ return str ( this , str ) ; }
Code	{ return str ( this , str ) ; }
Distance : 5

3
Tree	{ return escapeJavaStyleString ( str , true ) ; }
Code	{ return escapeJavaStyleString ( str , true ) ; }
Distance : 2

4
Tree	{ return str ( String , true ) ; }
Code	{ return str ( String , true ) ; }
Distance : 4

5
Tree	{ super . str ( String ) ; return null ; }
Code	{ super . str ( String ) ; return null ; }
Distance : 9

6
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; }
Code	{ super . escapeJavaStyleString ( str ) ; return false ; }
Distance : 7

7
Tree	{ super . escapeJavaStyleString ( str ) ; return return; ; }
Code	{ super . escapeJavaStyleString ( str ) ; return return; ; }
Distance : 7

8
Tree	{ super . String ( str ) ; return false ; }
Code	{ super . String ( str ) ; return false ; }
Distance : 8

9
Tree	{ str ( str ) ; throw }
Code	{ str ( str ) ; throw }
Distance : 7

10
Tree	{ super . str ( str ) ; return escapeJavaStyleString ; }
Code	{ super . str ( str ) ; return escapeJavaStyleString ; }
Distance : 8

11
Tree	{ this ( str , String , escapeJavaStyleString , null ) ; }
Code	{ this ( str , String , escapeJavaStyleString , null ) ; }
Distance : 6

12
Tree	{ str ( str ) ; return; }
Code	{ str ( str ) ; return; }
Distance : 7

13
Tree	{ return str ( str , str , true ) ; }
Code	{ return str ( str , str , true ) ; }
Distance : 2

14
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; }
Code	{ super . escapeJavaStyleString ( str ) ; return null ; }
Distance : 7

15
Tree	{ str ( str ) ; checkNotNull }
Code	{ str ( str ) ; checkNotNull }
Distance : 7

16
Tree	{ return this . str ( String ) ; }
Code	{ return this . str ( String ) ; }
Distance : 6

17
Tree	{ return str ( str , null , null , str ) ; }
Code	{ return str ( str , null , null , str ) ; }
Distance : 5

18
Tree	{ return escapeJavaStyleString . escapeJavaStyleString ( str ) ; }
Code	{ return escapeJavaStyleString . escapeJavaStyleString ( str ) ; }
Distance : 6

19
Tree	{ return str ( str , str , String ) ; }
Code	{ return str ( str , str , String ) ; }
Distance : 3

20
Tree	{ return str . str ( str ) ; }
Code	{ return str . str ( str ) ; }
Distance : 6

21
Tree	{ return escapeJavaStyleString ( str , str , true , str , null ) ; }
Code	{ return escapeJavaStyleString ( str , str , true , str , null ) ; }
Distance : 5

22
Tree	{ super . String ( str ) ; return null ; }
Code	{ super . String ( str ) ; return null ; }
Distance : 8

23
Tree	{ return escapeJavaStyleString . str ( str , null , null ) ; }
Code	{ return escapeJavaStyleString . str ( str , null , null ) ; }
Distance : 4

24
Tree	{ return escapeJavaStyleString ( this , escapeJavaStyleString ) ; }
Code	{ return escapeJavaStyleString ( this , escapeJavaStyleString ) ; }
Distance : 4

25
Tree	{ this ( str , String , str , null ) ; }
Code	{ this ( str , String , str , null ) ; }
Distance : 6

26
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; }
Code	{ super . escapeJavaStyleString ( str ) ; return str ; }
Distance : 7

27
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; }
Code	{ super . escapeJavaStyleString ( str ) ; return false ; }
Distance : 7

28
Tree	{ this ( str , , , String , null ) ; }
Code	{ this ( str , , , String , null ) ; }
Distance : 6

29
Tree	{ escapeJavaStyleString ( str ) ; super }
Code	{ escapeJavaStyleString ( str ) ; super }
Distance : 6

30
Tree	{ this ( str , , , str , null ) ; }
Code	{ this ( str , , , str , null ) ; }
Distance : 6

31
Tree	{ return escapeJavaStyleString . escapeJavaStyleString ( str ) ; }
Code	{ return escapeJavaStyleString . escapeJavaStyleString ( str ) ; }
Distance : 6

32
Tree	{ str ( String ) ; return false ; }
Code	{ str ( String ) ; return false ; }
Distance : 8

33
Tree	{ super . escapeJavaStyleString ( str ) ; return true ; }
Code	{ super . escapeJavaStyleString ( str ) ; return true ; }
Distance : 6

34
Tree	{ return escapeJavaStyleString ( this , String ) ; }
Code	{ return escapeJavaStyleString ( this , String ) ; }
Distance : 4

35
Tree	{ super . String ( str ) ; return str ; }
Code	{ super . String ( str ) ; return str ; }
Distance : 8

36
Tree	{ super . str ( str ) ; return escapeJavaStyleString ; }
Code	{ super . str ( str ) ; return escapeJavaStyleString ; }
Distance : 8

37
Tree	{ return super . str ( str , str , escapeJavaStyleString , new String ( str ) ) ; }
Code	{ return super . str ( str , str , escapeJavaStyleString , new String ( str ) ) ; }
Distance : 11

38
Tree	{ return str ( str , null , null , true ) ; }
Code	{ return str ( str , null , null , true ) ; }
Distance : 4

39
Tree	{ return str . escapeJavaStyleString ( str , null , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , null ) ; }
Distance : 4

40
Tree	{ return str ( str , null , null , String ) ; }
Code	{ return str ( str , null , null , String ) ; }
Distance : 5

41
Tree	{ return this . String ( str ) ; }
Code	{ return this . String ( str ) ; }
Distance : 7

42
Tree	{ return escapeJavaStyleString ( str , null ) ; }
Code	{ return escapeJavaStyleString ( str , null ) ; }
Distance : 3

43
Tree	{ return str ( str , null , null , escapeJavaStyleString ) ; }
Code	{ return str ( str , null , null , escapeJavaStyleString ) ; }
Distance : 5

44
Tree	{ this ( str , String , true , null ) ; }
Code	{ this ( str , String , true , null ) ; }
Distance : 5

45
Tree	{ return super . str ( str , str , String , new String ( str ) ) ; }
Code	{ return super . str ( str , str , String , new String ( str ) ) ; }
Distance : 11

46
Tree	{ super . String ( str ) ; return true ; }
Code	{ super . String ( str ) ; return true ; }
Distance : 7

47
Tree	{ return str . str ( str , null , null ) ; }
Code	{ return str . str ( str , null , null ) ; }
Distance : 5

48
Tree	{ str ( str ) ; return }
Code	{ str ( str ) ; return }
Distance : 7

49
Tree	{ return String ( str , false ) ; }
Code	{ return String ( str , false ) ; }
Distance : 4

50
Tree	{ this . str = str ; else }
Code	{ this . str = str ; else }
Distance : 9

51
Tree	{ return this . escapeJavaStyleString ( String ) ; }
Code	{ return this . escapeJavaStyleString ( String ) ; }
Distance : 7

52
Tree	{ return escapeJavaStyleString ( str , String ) ; }
Code	{ return escapeJavaStyleString ( str , String ) ; }
Distance : 3

53
Tree	{ super . str ( str ) ; return super(); ; }
Code	{ super . str ( str ) ; return super(); ; }
Distance : 8

54
Tree	{ return escapeJavaStyleString ( str , true ) ; }
Code	{ return escapeJavaStyleString ( str , true ) ; }
Distance : 2

55
Tree	{ this . str = str ; throw }
Code	{ this . str = str ; throw }
Distance : 9

56
Tree	{ return this . String ( String ) ; }
Code	{ return this . String ( String ) ; }
Distance : 7

57
Tree	{ return super . str ( str , str , str , new String ( str ) ) ; }
Code	{ return super . str ( str , str , str , new String ( str ) ) ; }
Distance : 11

58
Tree	{ return str . str ( str , null , return; ) ; }
Code	{ return str . str ( str , null , return; ) ; }
Distance : 5

59
Tree	{ return escapeJavaStyleString ( str , true ) ; }
Code	{ return escapeJavaStyleString ( str , true ) ; }
Distance : 2

60
Tree	{ return str ( str , super(); ) ; }
Code	{ return str ( str , super(); ) ; }
Distance : 4

61
Tree	{ return str ( String , false ) ; }
Code	{ return str ( String , false ) ; }
Distance : 5

62
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; }
Code	{ super . escapeJavaStyleString ( str ) ; return null ; }
Distance : 7

63
Tree	{ return this . escapeJavaStyleString ( str ) ; }
Code	{ return this . escapeJavaStyleString ( str ) ; }
Distance : 6

64
Tree	{ return escapeJavaStyleString . escapeJavaStyleString ( str , null , null ) ; }
Code	{ return escapeJavaStyleString . escapeJavaStyleString ( str , null , null ) ; }
Distance : 4

65
Tree	{ return escapeJavaStyleString ( str , null ) ; }
Code	{ return escapeJavaStyleString ( str , null ) ; }
Distance : 3

66
Tree	{ return escapeJavaStyleString ( str , str , String , str , null ) ; }
Code	{ return escapeJavaStyleString ( str , str , String , str , null ) ; }
Distance : 6

67
Tree	{ return String ( str , null ) ; }
Code	{ return String ( str , null ) ; }
Distance : 4

68
Tree	{ super . str ( str ) ; return break; ; }
Code	{ super . str ( str ) ; return break; ; }
Distance : 8

69
Tree	{ return escapeJavaStyleString ( str , null ) ; }
Code	{ return escapeJavaStyleString ( str , null ) ; }
Distance : 3

70
Tree	{ return escapeJavaStyleString ( this , str ) ; }
Code	{ return escapeJavaStyleString ( this , str ) ; }
Distance : 4

71
Tree	{ return escapeJavaStyleString . str ( str ) ; }
Code	{ return escapeJavaStyleString . str ( str ) ; }
Distance : 5

72
Tree	{ return str . String ( str ) ; }
Code	{ return str . String ( str ) ; }
Distance : 6

73
Tree	{ super . str ( str ) ; return continue; ; }
Code	{ super . str ( str ) ; return continue; ; }
Distance : 8

74
Tree	{ this . str = str ; fireChangeEvent }
Code	{ this . str = str ; fireChangeEvent }
Distance : 9

75
Tree	{ return escapeJavaStyleString ( str , str , String , str ) ; }
Code	{ return escapeJavaStyleString ( str , str , String , str ) ; }
Distance : 4

76
Tree	{ return str ( str , str , str , str ) ; }
Code	{ return str ( str , str , str , str ) ; }
Distance : 5

77
Tree	{ escapeJavaStyleString ( str ) ; return false ; }
Code	{ escapeJavaStyleString ( str ) ; return false ; }
Distance : 6

78
Tree	{ super . escapeJavaStyleString ( str ) ; return escapeJavaStyleString ; }
Code	{ super . escapeJavaStyleString ( str ) ; return escapeJavaStyleString ; }
Distance : 7

79
Tree	{ return this . str ( str ) ; }
Code	{ return this . str ( str ) ; }
Distance : 6

80
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; }
Distance : 4

81
Tree	{ this ( str , str , escapeJavaStyleString , null ) ; }
Code	{ this ( str , str , escapeJavaStyleString , null ) ; }
Distance : 6

82
Tree	{ return escapeJavaStyleString ( str , null , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , null , str ) ; }
Distance : 4

83
Tree	{ super . escapeJavaStyleString ( str ) ; return true ; }
Code	{ super . escapeJavaStyleString ( str ) ; return true ; }
Distance : 6

84
Tree	{ escapeJavaStyleString ( str ) ; return false ; }
Code	{ escapeJavaStyleString ( str ) ; return false ; }
Distance : 6

85
Tree	{ return escapeJavaStyleString ( str , str , String , str , null ) ; }
Code	{ return escapeJavaStyleString ( str , str , String , str , null ) ; }
Distance : 6

86
Tree	{ super . String ( str ) ; return escapeJavaStyleString ; }
Code	{ super . String ( str ) ; return escapeJavaStyleString ; }
Distance : 8

87
Tree	{ return escapeJavaStyleString ( this , str ) ; }
Code	{ return escapeJavaStyleString ( this , str ) ; }
Distance : 4

88
Tree	{ return str ( str , str , true , str ) ; }
Code	{ return str ( str , str , true , str ) ; }
Distance : 4

89
Tree	{ return escapeJavaStyleString . escapeJavaStyleString ( str , null , null ) ; }
Code	{ return escapeJavaStyleString . escapeJavaStyleString ( str , null , null ) ; }
Distance : 4

90
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; }
Distance : 6

91
Tree	{ return str ( str , str ) ; }
Code	{ return str ( str , str ) ; }
Distance : 4

92
Tree	{ return str ( str , return; ) ; }
Code	{ return str ( str , return; ) ; }
Distance : 4

93
Tree	{ super . str ( str ) ; return String ; }
Code	{ super . str ( str ) ; return String ; }
Distance : 8

94
Tree	{ return str ( this , String ) ; }
Code	{ return str ( this , String ) ; }
Distance : 5

95
Tree	{ return str . escapeJavaStyleString ( str ) ; }
Code	{ return str . escapeJavaStyleString ( str ) ; }
Distance : 6

96
Tree	{ this . str = str ; CHAR_CONS }
Code	{ this . str = str ; CHAR_CONS }
Distance : 9

97
Tree	{ str ( str ) ; return true ; }
Code	{ str ( str ) ; return true ; }
Distance : 6

98
Tree	{ return super . str ( str , str , true , new String ( str ) ) ; }
Code	{ return super . str ( str , str , true , new String ( str ) ) ; }
Distance : 10

99
Tree	{ return str . escapeJavaStyleString ( str , null , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , null ) ; }
Distance : 4

100
Tree	{ escapeJavaStyleString ( str ) ; super }
Code	{ escapeJavaStyleString ( str ) ; super }
Distance : 6

101
Tree	{ return String . str ( str ) ; }
Code	{ return String . str ( str ) ; }
Distance : 6

102
Tree	{ super . str ( str ) ; return str ; }
Code	{ super . str ( str ) ; return str ; }
Distance : 8

103
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; }
Distance : 6

104
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; }
Code	{ super . escapeJavaStyleString ( str ) ; return str ; }
Distance : 7

105
Tree	{ return String ( str , null ) ; }
Code	{ return String ( str , null ) ; }
Distance : 4

106
Tree	{ return escapeJavaStyleString ( str , null , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , null , str ) ; }
Distance : 4

107
Tree	{ this . str = str ; super }
Code	{ this . str = str ; super }
Distance : 9

108
Tree	{ return str ( str , false ) ; }
Code	{ return str ( str , false ) ; }
Distance : 4

109
Tree	{ return str ( str , str , escapeJavaStyleString , str ) ; }
Code	{ return str ( str , str , escapeJavaStyleString , str ) ; }
Distance : 5

110
Tree	{ return escapeJavaStyleString ( str , null ) ; }
Code	{ return escapeJavaStyleString ( str , null ) ; }
Distance : 3

111
Tree	{ return str ( str , escapeJavaStyleString ) ; }
Code	{ return str ( str , escapeJavaStyleString ) ; }
Distance : 4

112
Tree	{ return escapeJavaStyleString ( this , str ) ; }
Code	{ return escapeJavaStyleString ( this , str ) ; }
Distance : 4

113
Tree	{ return escapeJavaStyleString ( str , escapeJavaStyleString ) ; }
Code	{ return escapeJavaStyleString ( str , escapeJavaStyleString ) ; }
Distance : 3

114
Tree	{ super . str ( str ) ; return false ; }
Code	{ super . str ( str ) ; return false ; }
Distance : 8

115
Tree	{ return str ( str , null ) ; }
Code	{ return str ( str , null ) ; }
Distance : 4

116
Tree	{ escapeJavaStyleString ( str ) ; return true ; }
Code	{ escapeJavaStyleString ( str ) ; return true ; }
Distance : 5

117
Tree	{ return escapeJavaStyleString ( str , str , true ) ; }
Code	{ return escapeJavaStyleString ( str , str , true ) ; }
Distance : 1

118
Tree	{ return super . str ( str , str , String , new str ( str ) ) ; }
Code	{ return super . str ( str , str , String , new str ( str ) ) ; }
Distance : 11

119
Tree	{ return escapeJavaStyleString . escapeJavaStyleString ( str ) ; }
Code	{ return escapeJavaStyleString . escapeJavaStyleString ( str ) ; }
Distance : 6

120
Tree	{ return str ( str , String , true ) ; }
Code	{ return str ( str , String , true ) ; }
Distance : 2

121
Tree	{ return escapeJavaStyleString ( str , str , true , str , null ) ; }
Code	{ return escapeJavaStyleString ( str , str , true , str , null ) ; }
Distance : 5

122
Tree	{ str ( str ) ; if }
Code	{ str ( str ) ; if }
Distance : 7

123
Tree	{ this . str = str ; ++ }
Code	{ this . str = str ; ++ }
Distance : 9

124
Tree	{ return String ( this , str ) ; }
Code	{ return String ( this , str ) ; }
Distance : 5

125
Tree	{ return super . str ( str , str , str , new str ( str ) ) ; }
Code	{ return super . str ( str , str , str , new str ( str ) ) ; }
Distance : 11

126
Tree	{ super . str ( str ) ; return null ; }
Code	{ super . str ( str ) ; return null ; }
Distance : 8

127
Tree	{ super . str ( str ) ; return return; ; }
Code	{ super . str ( str ) ; return return; ; }
Distance : 8

128
Tree	{ return String ( str , true ) ; }
Code	{ return String ( str , true ) ; }
Distance : 3

129
Tree	{ return str ( str , true ) ; }
Code	{ return str ( str , true ) ; }
Distance : 3

130
Tree	{ return this . str ( escapeJavaStyleString ) ; }
Code	{ return this . str ( escapeJavaStyleString ) ; }
Distance : 6

131
Tree	{ str ( str ) ; super }
Code	{ str ( str ) ; super }
Distance : 7

132
Tree	{ this ( str , str , String , null ) ; }
Code	{ this ( str , str , String , null ) ; }
Distance : 6

133
Tree	{ String ( str ) ; super }
Code	{ String ( str ) ; super }
Distance : 7

134
Tree	{ this ( str , String , String , null ) ; }
Code	{ this ( str , String , String , null ) ; }
Distance : 6

135
Tree	{ return str ( String , null ) ; }
Code	{ return str ( String , null ) ; }
Distance : 5

136
Tree	{ this . str = str ; if }
Code	{ this . str = str ; if }
Distance : 9

137
Tree	{ return escapeJavaStyleString ( str , str , String ) ; }
Code	{ return escapeJavaStyleString ( str , str , String ) ; }
Distance : 2

138
Tree	{ return this . escapeJavaStyleString ( str ) ; }
Code	{ return this . escapeJavaStyleString ( str ) ; }
Distance : 6

139
Tree	{ return str ( str , str , escapeJavaStyleString , str , null ) ; }
Code	{ return str ( str , str , escapeJavaStyleString , str , null ) ; }
Distance : 7

140
Tree	{ return String . str ( str , null , null ) ; }
Code	{ return String . str ( str , null , null ) ; }
Distance : 5

141
Tree	{ return this . str ( str ) ; }
Code	{ return this . str ( str ) ; }
Distance : 6

142
Tree	{ return escapeJavaStyleString ( str , false ) ; }
Code	{ return escapeJavaStyleString ( str , false ) ; }
Distance : 3

143
Tree	{ str ( str ) ; return false ; }
Code	{ str ( str ) ; return false ; }
Distance : 7

144
Tree	{ String ( str ) ; return true ; }
Code	{ String ( str ) ; return true ; }
Distance : 6

145
Tree	{ super . str ( String ) ; return false ; }
Code	{ super . str ( String ) ; return false ; }
Distance : 9

146
Tree	{ return str ( str , str , escapeJavaStyleString ) ; }
Code	{ return str ( str , str , escapeJavaStyleString ) ; }
Distance : 3

147
Tree	{ return str ( str , true ) ; }
Code	{ return str ( str , true ) ; }
Distance : 3

148
Tree	{ return escapeJavaStyleString ( str , escapeJavaStyleString ) ; }
Code	{ return escapeJavaStyleString ( str , escapeJavaStyleString ) ; }
Distance : 3

149
Tree	{ super . str ( str ) ; return false ; }
Code	{ super . str ( str ) ; return false ; }
Distance : 8

150
Tree	{ this . str = str ; assert }
Code	{ this . str = str ; assert }
Distance : 9

151
Tree	{ return escapeJavaStyleString ( str , str , true , str ) ; }
Code	{ return escapeJavaStyleString ( str , str , true , str ) ; }
Distance : 3

152
Tree	{ return escapeJavaStyleString ( str , super(); ) ; }
Code	{ return escapeJavaStyleString ( str , super(); ) ; }
Distance : 3

153
Tree	{ return str ( String , null ) ; }
Code	{ return str ( String , null ) ; }
Distance : 5

154
Tree	{ str ( str ) ; assert }
Code	{ str ( str ) ; assert }
Distance : 7

155
Tree	{ this ( str , str , str , null ) ; }
Code	{ this ( str , str , str , null ) ; }
Distance : 6

156
Tree	{ return escapeJavaStyleString ( str , false ) ; }
Code	{ return escapeJavaStyleString ( str , false ) ; }
Distance : 3

157
Tree	{ return super . str ( str , str , true , new str ( str ) ) ; }
Code	{ return super . str ( str , str , true , new str ( str ) ) ; }
Distance : 10

158
Tree	{ return escapeJavaStyleString ( str , String ) ; }
Code	{ return escapeJavaStyleString ( str , String ) ; }
Distance : 3

159
Tree	{ return escapeJavaStyleString . str ( str , null , null ) ; }
Code	{ return escapeJavaStyleString . str ( str , null , null ) ; }
Distance : 4

160
Tree	{ return str ( str , str , str , str , null ) ; }
Code	{ return str ( str , str , str , str , null ) ; }
Distance : 7

161
Tree	{ return str ( escapeJavaStyleString , null ) ; }
Code	{ return str ( escapeJavaStyleString , null ) ; }
Distance : 5

162
Tree	{ escapeJavaStyleString ( str ) ; return true ; }
Code	{ escapeJavaStyleString ( str ) ; return true ; }
Distance : 5

163
Tree	{ String ( str ) ; return false ; }
Code	{ String ( str ) ; return false ; }
Distance : 7

164
Tree	{ return escapeJavaStyleString ( str , null , null , String ) ; }
Code	{ return escapeJavaStyleString ( str , null , null , String ) ; }
Distance : 4

165
Tree	{ this ( str , str , true , null ) ; }
Code	{ this ( str , str , true , null ) ; }
Distance : 5

166
Tree	{ return str ( str , null ) ; }
Code	{ return str ( str , null ) ; }
Distance : 4

167
Tree	{ return String ( str , null , null , str ) ; }
Code	{ return String ( str , null , null , str ) ; }
Distance : 5

168
Tree	{ return escapeJavaStyleString ( str , true ) ; }
Code	{ return escapeJavaStyleString ( str , true ) ; }
Distance : 2

169
Tree	{ return str ( this , escapeJavaStyleString ) ; }
Code	{ return str ( this , escapeJavaStyleString ) ; }
Distance : 5

170
Tree	{ return escapeJavaStyleString ( str , str , true ) ; }
Code	{ return escapeJavaStyleString ( str , str , true ) ; }
Distance : 1

171
Tree	{ return this . escapeJavaStyleString ( String ) ; }
Code	{ return this . escapeJavaStyleString ( String ) ; }
Distance : 7

172
Tree	{ return escapeJavaStyleString ( str , return; ) ; }
Code	{ return escapeJavaStyleString ( str , return; ) ; }
Distance : 3

173
Tree	{ return escapeJavaStyleString ( str , str , escapeJavaStyleString ) ; }
Code	{ return escapeJavaStyleString ( str , str , escapeJavaStyleString ) ; }
Distance : 2

174
Tree	{ return escapeJavaStyleString . str ( str ) ; }
Code	{ return escapeJavaStyleString . str ( str ) ; }
Distance : 5

175
Tree	{ super . escapeJavaStyleString ( str ) ; return escapeJavaStyleString ; }
Code	{ super . escapeJavaStyleString ( str ) ; return escapeJavaStyleString ; }
Distance : 7

176
Tree	{ return str ( this , str ) ; }
Code	{ return str ( this , str ) ; }
Distance : 5

177
Tree	{ return escapeJavaStyleString ( str , str , String , str ) ; }
Code	{ return escapeJavaStyleString ( str , str , String , str ) ; }
Distance : 4

178
Tree	{ super . str ( str ) ; return true ; }
Code	{ super . str ( str ) ; return true ; }
Distance : 7

179
Tree	{ return escapeJavaStyleString ( str , null , null , true ) ; }
Code	{ return escapeJavaStyleString ( str , null , null , true ) ; }
Distance : 3

180
Tree	{ return escapeJavaStyleString ( str , null , null , escapeJavaStyleString ) ; }
Code	{ return escapeJavaStyleString ( str , null , null , escapeJavaStyleString ) ; }
Distance : 4

181
Tree	{ return str ( str , str , String , str , null ) ; }
Code	{ return str ( str , str , String , str , null ) ; }
Distance : 7

182
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; }
Distance : 4

183
Tree	{ return str ( str , break; ) ; }
Code	{ return str ( str , break; ) ; }
Distance : 4

184
Tree	{ return escapeJavaStyleString ( str , str , escapeJavaStyleString ) ; }
Code	{ return escapeJavaStyleString ( str , str , escapeJavaStyleString ) ; }
Distance : 2

185
Tree	{ return escapeJavaStyleString ( escapeJavaStyleString , null ) ; }
Code	{ return escapeJavaStyleString ( escapeJavaStyleString , null ) ; }
Distance : 4

186
Tree	{ return str ( str , str , str ) ; }
Code	{ return str ( str , str , str ) ; }
Distance : 3

187
Tree	{ return super . str ( str , str , String , new true ( str ) ) ; }
Code	{ return super . str ( str , str , String , new true ( str ) ) ; }
Distance : 10

188
Tree	{ return str ( str , return; ) ; }
Code	{ return str ( str , return; ) ; }
Distance : 4

189
Tree	{ return escapeJavaStyleString ( str , null ) ; }
Code	{ return escapeJavaStyleString ( str , null ) ; }
Distance : 3

190
Tree	{ this . str = str ; checkNotNull }
Code	{ this . str = str ; checkNotNull }
Distance : 9

191
Tree	{ return super . str ( str , str , str , new true ( str ) ) ; }
Code	{ return super . str ( str , str , str , new true ( str ) ) ; }
Distance : 10

192
Tree	{ return str ( str , null ) ; }
Code	{ return str ( str , null ) ; }
Distance : 4

193
Tree	{ return str . String ( str , null , null ) ; }
Code	{ return str . String ( str , null , null ) ; }
Distance : 5

194
Tree	{ return str ( str , str , true , str , null ) ; }
Code	{ return str ( str , str , true , str , null ) ; }
Distance : 6

195
Tree	{ return escapeJavaStyleString ( str , str , true , str ) ; }
Code	{ return escapeJavaStyleString ( str , str , true , str ) ; }
Distance : 3

196
Tree	{ str ( escapeJavaStyleString ) ; return false ; }
Code	{ str ( escapeJavaStyleString ) ; return false ; }
Distance : 8

197
Tree	{ return str ( str , str , String , str ) ; }
Code	{ return str ( str , str , String , str ) ; }
Distance : 5

198
Tree	{ return super . str ( str , str , true , new true ( str ) ) ; }
Code	{ return super . str ( str , str , true , new true ( str ) ) ; }
Distance : 9

199
Tree	{ return str . escapeJavaStyleString ( str ) ; }
Code	{ return str . escapeJavaStyleString ( str ) ; }
Distance : 6

========================================================================


========================================================================
Example Number: 41
Parent Code is: 
{ escapeJavaStyleString ( out , str , false ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ escapeJavaStyleString ( out , str , false , false ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=false}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ escapeJava ( out , out , str ) ; }
Code	{ escapeJava ( out , out , str ) ; }
Distance : 5

1
Tree	{ str . str ( str , out ) ; }
Code	{ str . str ( str , out ) ; }
Distance : 7

2
Tree	{ out . str ( str , out ) ; }
Code	{ out . str ( str , out ) ; }
Distance : 6

3
Tree	{ str ( STRING_CONSTANT , out , out , str ) ; }
Code	{ str ( STRING_CONSTANT , out , out , str ) ; }
Distance : 5

4
Tree	{ str ( out , out , out , str ) ; }
Code	{ str ( out , out , out , str ) ; }
Distance : 4

5
Tree	{ out ( out , str , false ) ; }
Code	{ out ( out , str , false ) ; }
Distance : 3

6
Tree	{ str ( out , out , str , str ) ; }
Code	{ str ( out , out , str , str ) ; }
Distance : 4

7
Tree	{ str . escapeJava ( str ) ; }
Code	{ str . escapeJava ( str ) ; }
Distance : 8

8
Tree	{ out . escapeJava ( str ) ; }
Code	{ out . escapeJava ( str ) ; }
Distance : 8

9
Tree	{ str . this . str ( str , out , str ) ; }
Code	{ str . this . str ( str , out , str ) ; }
Distance : 8

10
Tree	{ out ( STRING_CONSTANT , out , str , out ) ; }
Code	{ out ( STRING_CONSTANT , out , str , out ) ; }
Distance : 5

11
Tree	{ out . out ( out ) ; }
Code	{ out . out ( out ) ; }
Distance : 8

12
Tree	{ out . this . str ( str , out , str ) ; }
Code	{ out . this . str ( str , out , str ) ; }
Distance : 8

13
Tree	{ str . str ( str , str , this ) ; }
Code	{ str . str ( str , str , this ) ; }
Distance : 6

14
Tree	{ out ( out , out , out , out ) ; }
Code	{ out ( out , out , out , out ) ; }
Distance : 4

15
Tree	{ str () . str ( str , str ) ; }
Code	{ str () . str ( str , str ) ; }
Distance : 7

16
Tree	{ str . out ( str ) ; }
Code	{ str . out ( str ) ; }
Distance : 7

17
Tree	{ out . str ( str , str , this ) ; }
Code	{ out . str ( str , str , this ) ; }
Distance : 6

18
Tree	{ escapeJavaStyleString ( out , null ) ; }
Code	{ escapeJavaStyleString ( out , null ) ; }
Distance : 5

19
Tree	{ str () . out ( str , str ) ; }
Code	{ str () . out ( str , str ) ; }
Distance : 7

20
Tree	{ out () . out ( str , out ) ; }
Code	{ out () . out ( str , out ) ; }
Distance : 7

21
Tree	{ str () . escapeJava ( str , out ) ; }
Code	{ str () . escapeJava ( str , out ) ; }
Distance : 8

22
Tree	{ out ( out , str , str , false ) ; }
Code	{ out ( out , str , str , false ) ; }
Distance : 2

23
Tree	{ str ( out , out , out , out ) ; }
Code	{ str ( out , out , out , out ) ; }
Distance : 4

24
Tree	{ str ( out , out . str ( str ) , null ) ; }
Code	{ str ( out , out . str ( str ) , null ) ; }
Distance : 7

25
Tree	{ str . Writer ( str ) ; }
Code	{ str . Writer ( str ) ; }
Distance : 8

26
Tree	{ out . str ( str ) ; }
Code	{ out . str ( str ) ; }
Distance : 7

27
Tree	{ out () . str ( str , str ) ; }
Code	{ out () . str ( str , str ) ; }
Distance : 7

28
Tree	{ out () . out ( str , str ) ; }
Code	{ out () . out ( str , str ) ; }
Distance : 7

29
Tree	{ str . out ( str , str ) ; }
Code	{ str . out ( str , str ) ; }
Distance : 6

30
Tree	{ str . out ( str , out , this ) ; }
Code	{ str . out ( str , out , this ) ; }
Distance : 5

31
Tree	{ out . Writer ( str ) ; }
Code	{ out . Writer ( str ) ; }
Distance : 8

32
Tree	{ out () . escapeJava ( str , out ) ; }
Code	{ out () . escapeJava ( str , out ) ; }
Distance : 8

33
Tree	{ out . out ( str , str ) ; }
Code	{ out . out ( str , str ) ; }
Distance : 6

34
Tree	{ str () . str ( str , out ) ; }
Code	{ str () . str ( str , out ) ; }
Distance : 7

35
Tree	{ out ( str , null ) ; }
Code	{ out ( str , null ) ; }
Distance : 6

36
Tree	{ out ( out , null ) ; }
Code	{ out ( out , null ) ; }
Distance : 6

37
Tree	{ out ( out , out . str ( str ) , null ) ; }
Code	{ out ( out , out . str ( str ) , null ) ; }
Distance : 7

38
Tree	{ out ( out , out , str , false ) ; }
Code	{ out ( out , out , str , false ) ; }
Distance : 3

39
Tree	{ str . this . out ( str , str , out ) ; }
Code	{ str . this . out ( str , str , out ) ; }
Distance : 7

40
Tree	{ out . out ( str , out , this ) ; }
Code	{ out . out ( str , out , this ) ; }
Distance : 5

41
Tree	{ out . this . out ( str , str , out ) ; }
Code	{ out . this . out ( str , str , out ) ; }
Distance : 7

42
Tree	{ escapeJava ( out , out , out , false ) ; }
Code	{ escapeJava ( out , out , out , false ) ; }
Distance : 3

43
Tree	{ Writer ( out , out , out , false ) ; }
Code	{ Writer ( out , out , out , false ) ; }
Distance : 3

44
Tree	{ out () . str ( str , out ) ; }
Code	{ out () . str ( str , out ) ; }
Distance : 7

45
Tree	{ out ( out , str , out ) ; }
Code	{ out ( out , str , out ) ; }
Distance : 4

46
Tree	{ out ( out , str ) ; }
Code	{ out ( out , str ) ; }
Distance : 5

47
Tree	{ str ( out , str , out , false ) ; }
Code	{ str ( out , str , out , false ) ; }
Distance : 2

48
Tree	{ out ( out , str . out ( str ) , null ) ; }
Code	{ out ( out , str . out ( str ) , null ) ; }
Distance : 7

49
Tree	{ str ( out , out , out , false ) ; }
Code	{ str ( out , out , out , false ) ; }
Distance : 3

50
Tree	{ str . out ( out , out , this ) ; }
Code	{ str . out ( out , out , this ) ; }
Distance : 6

51
Tree	{ str . escapeJava ( str , out , this ) ; }
Code	{ str . escapeJava ( str , out , this ) ; }
Distance : 6

52
Tree	{ IOException ( out , null ) ; }
Code	{ IOException ( out , null ) ; }
Distance : 6

53
Tree	{ out ( out , str , str ) ; }
Code	{ out ( out , str , str ) ; }
Distance : 4

54
Tree	{ out . out ( str ) ; }
Code	{ out . out ( str ) ; }
Distance : 7

55
Tree	{ escapeJava ( out , out , false ) ; }
Code	{ escapeJava ( out , out , false ) ; }
Distance : 4

56
Tree	{ Writer ( out , out , false ) ; }
Code	{ Writer ( out , out , false ) ; }
Distance : 4

57
Tree	{ str ( out , str , false ) ; }
Code	{ str ( out , str , false ) ; }
Distance : 3

58
Tree	{ IllegalArgumentException ( out , out ) ; }
Code	{ IllegalArgumentException ( out , out ) ; }
Distance : 6

59
Tree	{ out . out ( str , out ) ; }
Code	{ out . out ( str , out ) ; }
Distance : 6

60
Tree	{ str . out ( str , out ) ; }
Code	{ str . out ( str , out ) ; }
Distance : 6

61
Tree	{ str () . out ( str , out ) ; }
Code	{ str () . out ( str , out ) ; }
Distance : 7

62
Tree	{ IllegalArgumentException ( out , out , false ) ; }
Code	{ IllegalArgumentException ( out , out , false ) ; }
Distance : 4

63
Tree	{ out ( out , str , out , false ) ; }
Code	{ out ( out , str , out , false ) ; }
Distance : 2

64
Tree	{ escapeJava ( out , str ) ; }
Code	{ escapeJava ( out , str ) ; }
Distance : 5

65
Tree	{ out ( STRING_CONSTANT , out , out , str ) ; }
Code	{ out ( STRING_CONSTANT , out , out , str ) ; }
Distance : 5

66
Tree	{ escapeJava ( STRING_CONSTANT , out , str , str ) ; }
Code	{ escapeJava ( STRING_CONSTANT , out , str , str ) ; }
Distance : 5

67
Tree	{ out ( out , out , str , out ) ; }
Code	{ out ( out , out , str , out ) ; }
Distance : 4

68
Tree	{ escapeJavaStyleString ( out , out ) ; }
Code	{ escapeJavaStyleString ( out , out ) ; }
Distance : 5

69
Tree	{ out . out ( str , out ) ; }
Code	{ out . out ( str , out ) ; }
Distance : 6

70
Tree	{ str () . out ( str , out ) ; }
Code	{ str () . out ( str , out ) ; }
Distance : 7

71
Tree	{ out () . str ( str , out ) ; }
Code	{ out () . str ( str , out ) ; }
Distance : 7

72
Tree	{ out ( out , out , out , str ) ; }
Code	{ out ( out , out , out , str ) ; }
Distance : 4

73
Tree	{ out ( out , out , out ) ; }
Code	{ out ( out , out , out ) ; }
Distance : 5

74
Tree	{ out ( out , out ) ; }
Code	{ out ( out , out ) ; }
Distance : 6

75
Tree	{ out ( STRING_CONSTANT , out , out , out ) ; }
Code	{ out ( STRING_CONSTANT , out , out , out ) ; }
Distance : 5

76
Tree	{ str . out ( str , out ) ; }
Code	{ str . out ( str , out ) ; }
Distance : 6

77
Tree	{ str ( out , out , str , out ) ; }
Code	{ str ( out , out , str , out ) ; }
Distance : 4

78
Tree	{ Writer ( STRING_CONSTANT , out , str , str ) ; }
Code	{ Writer ( STRING_CONSTANT , out , str , str ) ; }
Distance : 5

79
Tree	{ escapeJava ( out , out . out ( str ) , null ) ; }
Code	{ escapeJava ( out , out . out ( str ) , null ) ; }
Distance : 8

80
Tree	{ escapeJava ( out , null ) ; }
Code	{ escapeJava ( out , null ) ; }
Distance : 6

81
Tree	{ str . str ( str , str ) ; }
Code	{ str . str ( str , str ) ; }
Distance : 7

82
Tree	{ str . out ( null , str , out , str ) ; }
Code	{ str . out ( null , str , out , str ) ; }
Distance : 6

83
Tree	{ String ( out , out ) ; }
Code	{ String ( out , out ) ; }
Distance : 6

84
Tree	{ out () . out ( str , out ) ; }
Code	{ out () . out ( str , out ) ; }
Distance : 7

85
Tree	{ out ( out , out , str ) ; }
Code	{ out ( out , out , str ) ; }
Distance : 5

86
Tree	{ Writer ( out , out . out ( str ) , null ) ; }
Code	{ Writer ( out , out . out ( str ) , null ) ; }
Distance : 8

87
Tree	{ str ( out , out , out ) ; }
Code	{ str ( out , out , out ) ; }
Distance : 5

88
Tree	{ out ( out , out . out ( out ) , null ) ; }
Code	{ out ( out , out . out ( out ) , null ) ; }
Distance : 8

89
Tree	{ out ( out , out . escapeJava ( str ) , null ) ; }
Code	{ out ( out , out . escapeJava ( str ) , null ) ; }
Distance : 8

90
Tree	{ str ( out , str . out ( str ) , null ) ; }
Code	{ str ( out , str . out ( str ) , null ) ; }
Distance : 7

91
Tree	{ str . str ( str , out , this ) ; }
Code	{ str . str ( str , out , this ) ; }
Distance : 6

92
Tree	{ str ( STRING_CONSTANT , out , str , out ) ; }
Code	{ str ( STRING_CONSTANT , out , str , out ) ; }
Distance : 5

93
Tree	{ str . out ( null , str , str , str ) ; }
Code	{ str . out ( null , str , str , str ) ; }
Distance : 6

94
Tree	{ str ( out , out ) ; }
Code	{ str ( out , out ) ; }
Distance : 6

95
Tree	{ str ( out , out , str ) ; }
Code	{ str ( out , out , str ) ; }
Distance : 5

96
Tree	{ out . out ( null , str , out , str ) ; }
Code	{ out . out ( null , str , out , str ) ; }
Distance : 6

97
Tree	{ str . out ( out , out ) ; }
Code	{ str . out ( out , out ) ; }
Distance : 7

98
Tree	{ str ( STRING_CONSTANT , out , str , str ) ; }
Code	{ str ( STRING_CONSTANT , out , str , str ) ; }
Distance : 5

99
Tree	{ out ( out , out , false ) ; }
Code	{ out ( out , out , false ) ; }
Distance : 4

100
Tree	{ escapeJava ( out , out , out ) ; }
Code	{ escapeJava ( out , out , out ) ; }
Distance : 5

101
Tree	{ str ( out , out , false ) ; }
Code	{ str ( out , out , false ) ; }
Distance : 4

102
Tree	{ str ( out , null ) ; }
Code	{ str ( out , null ) ; }
Distance : 6

103
Tree	{ Writer ( out , out , out ) ; }
Code	{ Writer ( out , out , out ) ; }
Distance : 5

104
Tree	{ str . str () . out ( str , out ) ; }
Code	{ str . str () . out ( str , out ) ; }
Distance : 9

105
Tree	{ str . str ( str ) ; }
Code	{ str . str ( str ) ; }
Distance : 8

106
Tree	{ out ( out , str , str , str ) ; }
Code	{ out ( out , str , str , str ) ; }
Distance : 3

107
Tree	{ out ( out , out , out , false ) ; }
Code	{ out ( out , out , out , false ) ; }
Distance : 3

108
Tree	{ escapeJava () . str ( str , out ) ; }
Code	{ escapeJava () . str ( str , out ) ; }
Distance : 7

109
Tree	{ str ( out , out , str , false ) ; }
Code	{ str ( out , out , str , false ) ; }
Distance : 3

110
Tree	{ out ( STRING_CONSTANT , out , str , str ) ; }
Code	{ out ( STRING_CONSTANT , out , str , str ) ; }
Distance : 5

111
Tree	{ out . str () . out ( str , out ) ; }
Code	{ out . str () . out ( str , out ) ; }
Distance : 9

112
Tree	{ str ( out , str , out ) ; }
Code	{ str ( out , str , out ) ; }
Distance : 4

113
Tree	{ str . out ( str ? out : escapeJava ) ; }
Code	{ str . out ( str ? out : escapeJava ) ; }
Distance : 7

114
Tree	{ out . out ( str ? out : escapeJava ) ; }
Code	{ out . out ( str ? out : escapeJava ) ; }
Distance : 7

115
Tree	{ escapeJava ( out , out ) ; }
Code	{ escapeJava ( out , out ) ; }
Distance : 6

116
Tree	{ out ( out , str , out , str ) ; }
Code	{ out ( out , str , out , str ) ; }
Distance : 3

117
Tree	{ Writer ( out , out ) ; }
Code	{ Writer ( out , out ) ; }
Distance : 6

118
Tree	{ Writer ( out , null ) ; }
Code	{ Writer ( out , null ) ; }
Distance : 6

119
Tree	{ escapeJava ( out , out , str , false ) ; }
Code	{ escapeJava ( out , out , str , false ) ; }
Distance : 3

120
Tree	{ str ( STRING_CONSTANT , out , out , out ) ; }
Code	{ str ( STRING_CONSTANT , out , out , out ) ; }
Distance : 5

121
Tree	{ out ( out , out , str , str ) ; }
Code	{ out ( out , out , str , str ) ; }
Distance : 4

122
Tree	{ str . escapeJava ( str , out ) ; }
Code	{ str . escapeJava ( str , out ) ; }
Distance : 7

123
Tree	{ str . out ( str ? out : Writer ) ; }
Code	{ str . out ( str ? out : Writer ) ; }
Distance : 7

124
Tree	{ out . str ( null , str , str , str ) ; }
Code	{ out . str ( null , str , str , str ) ; }
Distance : 6

125
Tree	{ str ( out , str ) ; }
Code	{ str ( out , str ) ; }
Distance : 5

126
Tree	{ str . str ( null , str , str , str ) ; }
Code	{ str . str ( null , str , str , str ) ; }
Distance : 6

127
Tree	{ str . out () . out () . str ( str , out ) ; }
Code	{ str . out () . out () . str ( str , out ) ; }
Distance : 10

128
Tree	{ str . str ( NUMBER_CONSTANT ) . out ( str , out ) ; }
Code	{ str . str ( NUMBER_CONSTANT ) . out ( str , out ) ; }
Distance : 10

129
Tree	{ str () . out ( str , str ) ; }
Code	{ str () . out ( str , str ) ; }
Distance : 7

130
Tree	{ out . this . out ( str , out , str ) ; }
Code	{ out . this . out ( str , out , str ) ; }
Distance : 7

131
Tree	{ out () . out ( str , str ) ; }
Code	{ out () . out ( str , str ) ; }
Distance : 7

132
Tree	{ out . str ( str , str ) ; }
Code	{ out . str ( str , str ) ; }
Distance : 6

133
Tree	{ String ( out , out , false ) ; }
Code	{ String ( out , out , false ) ; }
Distance : 4

134
Tree	{ str . str () . str ( str , out ) ; }
Code	{ str . str () . str ( str , out ) ; }
Distance : 8

135
Tree	{ out . str ( str , out , this ) ; }
Code	{ out . str ( str , out , this ) ; }
Distance : 6

136
Tree	{ out . out ( null , out , str , str ) ; }
Code	{ out . out ( null , out , str , str ) ; }
Distance : 7

137
Tree	{ out . this . out ( str , out , out ) ; }
Code	{ out . this . out ( str , out , out ) ; }
Distance : 7

138
Tree	{ out . out () . escapeJava ( str , out ) ; }
Code	{ out . out () . escapeJava ( str , out ) ; }
Distance : 8

139
Tree	{ str . out ( str , str , this ) ; }
Code	{ str . out ( str , str , this ) ; }
Distance : 5

140
Tree	{ str . str ( str , out ) ; }
Code	{ str . str ( str , out ) ; }
Distance : 7

141
Tree	{ str . out ( NUMBER_CONSTANT ) . str ( str , out ) ; }
Code	{ str . out ( NUMBER_CONSTANT ) . str ( str , out ) ; }
Distance : 9

142
Tree	{ str () . str ( str , str ) ; }
Code	{ str () . str ( str , str ) ; }
Distance : 7

143
Tree	{ escapeJavaStyleString ( out , out , false ) ; }
Code	{ escapeJavaStyleString ( out , out , false ) ; }
Distance : 3

144
Tree	{ out . out ( str ? out : Writer ) ; }
Code	{ out . out ( str ? out : Writer ) ; }
Distance : 7

145
Tree	{ str . this . out ( str , out , out ) ; }
Code	{ str . this . out ( str , out , out ) ; }
Distance : 7

146
Tree	{ out . out () . out () . str ( str , out ) ; }
Code	{ out . out () . out () . str ( str , out ) ; }
Distance : 10

147
Tree	{ out () . str ( str , str ) ; }
Code	{ out () . str ( str , str ) ; }
Distance : 7

148
Tree	{ IllegalArgumentException ( out , null ) ; }
Code	{ IllegalArgumentException ( out , null ) ; }
Distance : 6

149
Tree	{ out () . escapeJava ( str , out ) ; }
Code	{ out () . escapeJava ( str , out ) ; }
Distance : 8

150
Tree	{ out . str ( str , out ) ; }
Code	{ out . str ( str , out ) ; }
Distance : 6

151
Tree	{ out . out ( str , str , this ) ; }
Code	{ out . out ( str , str , this ) ; }
Distance : 5

152
Tree	{ str . this . str ( str , out , out ) ; }
Code	{ str . this . str ( str , out , out ) ; }
Distance : 8

153
Tree	{ out ( out , out . out ( str ) , null ) ; }
Code	{ out ( out , out . out ( str ) , null ) ; }
Distance : 8

154
Tree	{ str . out () . str ( str , out ) ; }
Code	{ str . out () . str ( str , out ) ; }
Distance : 7

155
Tree	{ out . str ( NUMBER_CONSTANT ) . out ( str , out ) ; }
Code	{ out . str ( NUMBER_CONSTANT ) . out ( str , out ) ; }
Distance : 10

156
Tree	{ out . out ( str , str ) ; }
Code	{ out . out ( str , str ) ; }
Distance : 6

157
Tree	{ escapeJava . out ( str , out ) ; }
Code	{ escapeJava . out ( str , out ) ; }
Distance : 6

158
Tree	{ str . str ( NUMBER_CONSTANT ) . str ( str , out ) ; }
Code	{ str . str ( NUMBER_CONSTANT ) . str ( str , out ) ; }
Distance : 9

159
Tree	{ str . out () . out ( str , out ) ; }
Code	{ str . out () . out ( str , out ) ; }
Distance : 8

160
Tree	{ out . out () . out ( str , out ) ; }
Code	{ out . out () . out ( str , out ) ; }
Distance : 8

161
Tree	{ escapeJava ( out , str , false ) ; }
Code	{ escapeJava ( out , str , false ) ; }
Distance : 3

162
Tree	{ out . this . str ( str , out , out ) ; }
Code	{ out . this . str ( str , out , out ) ; }
Distance : 8

163
Tree	{ str . str ( null , str , out , str ) ; }
Code	{ str . str ( null , str , out , str ) ; }
Distance : 6

164
Tree	{ Writer . out ( str , out ) ; }
Code	{ Writer . out ( str , out ) ; }
Distance : 6

165
Tree	{ out . str ( null , str , out , str ) ; }
Code	{ out . str ( null , str , out , str ) ; }
Distance : 6

166
Tree	{ escapeJavaStyleString ( out , null ) ; }
Code	{ escapeJavaStyleString ( out , null ) ; }
Distance : 5

167
Tree	{ str . out ( str ? out : str ) ; }
Code	{ str . out ( str ? out : str ) ; }
Distance : 7

168
Tree	{ str . str ( str ? out : escapeJava ) ; }
Code	{ str . str ( str ? out : escapeJava ) ; }
Distance : 8

169
Tree	{ out . out ( str ? out : str ) ; }
Code	{ out . out ( str ? out : str ) ; }
Distance : 7

170
Tree	{ out . str () . str ( str , out ) ; }
Code	{ out . str () . str ( str , out ) ; }
Distance : 8

171
Tree	{ str . this . out ( str , out , str ) ; }
Code	{ str . this . out ( str , out , str ) ; }
Distance : 7

172
Tree	{ str . out ( str , str ) ; }
Code	{ str . out ( str , str ) ; }
Distance : 6

173
Tree	{ str . out ( NUMBER_CONSTANT ) . escapeJava ( str , out ) ; }
Code	{ str . out ( NUMBER_CONSTANT ) . escapeJava ( str , out ) ; }
Distance : 10

174
Tree	{ out . str ( str ? out : escapeJava ) ; }
Code	{ out . str ( str ? out : escapeJava ) ; }
Distance : 8

175
Tree	{ out . out ( NUMBER_CONSTANT ) . str ( str , out ) ; }
Code	{ out . out ( NUMBER_CONSTANT ) . str ( str , out ) ; }
Distance : 9

176
Tree	{ out . out ( str ? str : escapeJava ) ; }
Code	{ out . out ( str ? str : escapeJava ) ; }
Distance : 7

177
Tree	{ out . out ( null , str , str , str ) ; }
Code	{ out . out ( null , str , str , str ) ; }
Distance : 6

178
Tree	{ out . out () . out () . out ( str , out ) ; }
Code	{ out . out () . out () . out ( str , out ) ; }
Distance : 11

179
Tree	{ str ( out , out . out ( str ) , null ) ; }
Code	{ str ( out , out . out ( str ) , null ) ; }
Distance : 8

180
Tree	{ str . out ( null , out , str , str ) ; }
Code	{ str . out ( null , out , str , str ) ; }
Distance : 7

181
Tree	{ str . out ( str ? str : escapeJava ) ; }
Code	{ str . out ( str ? str : escapeJava ) ; }
Distance : 7

182
Tree	{ String ( out , null ) ; }
Code	{ String ( out , null ) ; }
Distance : 6

183
Tree	{ str . out () . out () . out ( str , out ) ; }
Code	{ str . out () . out () . out ( str , out ) ; }
Distance : 11

184
Tree	{ str . out () . str () . str ( str , out ) ; }
Code	{ str . out () . str () . str ( str , out ) ; }
Distance : 10

185
Tree	{ str . out ( NUMBER_CONSTANT ) . out ( str , out ) ; }
Code	{ str . out ( NUMBER_CONSTANT ) . out ( str , out ) ; }
Distance : 10

186
Tree	{ str . out ( NUMBER_CONSTANT ) . Writer ( str , out ) ; }
Code	{ str . out ( NUMBER_CONSTANT ) . Writer ( str , out ) ; }
Distance : 10

187
Tree	{ out . out () . str () . str ( str , out ) ; }
Code	{ out . out () . str () . str ( str , out ) ; }
Distance : 10

188
Tree	{ out . out () . str ( str , out ) ; }
Code	{ out . out () . str ( str , out ) ; }
Distance : 7

189
Tree	{ str () . str ( str , out ) ; }
Code	{ str () . str ( str , out ) ; }
Distance : 7

190
Tree	{ str . out ( out ) ; }
Code	{ str . out ( out ) ; }
Distance : 8

191
Tree	{ out . out ( NUMBER_CONSTANT ) . out ( str , out ) ; }
Code	{ out . out ( NUMBER_CONSTANT ) . out ( str , out ) ; }
Distance : 10

192
Tree	{ str . out () . escapeJava ( str , out ) ; }
Code	{ str . out () . escapeJava ( str , out ) ; }
Distance : 8

193
Tree	{ out . str ( NUMBER_CONSTANT ) . str ( str , out ) ; }
Code	{ out . str ( NUMBER_CONSTANT ) . str ( str , out ) ; }
Distance : 9

194
Tree	{ str . out () . str () . out ( str , out ) ; }
Code	{ str . out () . str () . out ( str , out ) ; }
Distance : 10

195
Tree	{ out . str ( str , str ) ; }
Code	{ out . str ( str , str ) ; }
Distance : 6

196
Tree	{ out . out () . str () . out ( str , out ) ; }
Code	{ out . out () . str () . out ( str , out ) ; }
Distance : 10

197
Tree	{ str . str () . out () . str ( str , out ) ; }
Code	{ str . str () . out () . str ( str , out ) ; }
Distance : 10

198
Tree	{ escapeJava . str ( str , out ) ; }
Code	{ escapeJava . str ( str , out ) ; }
Distance : 7

199
Tree	{ out . str () . out () . str ( str , out ) ; }
Code	{ out . str () . out () . str ( str , out ) ; }
Distance : 10

========================================================================


========================================================================
Example Number: 42
Parent Code is: 
{ return escapeJavaStyleString ( str , false ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return escapeJavaStyleString ( str , false , false ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=false}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super . String ( str ) ; return str ; }
Code	{ super . String ( str ) ; return str ; }
Distance : 8

1
Tree	{ return escapeJava ( str , return; ) ; }
Code	{ return escapeJava ( str , return; ) ; }
Distance : 4

2
Tree	{ return String ( str , null , null , str ) ; }
Code	{ return String ( str , null , null , str ) ; }
Distance : 5

3
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; }
Distance : 6

4
Tree	{ str ( str ) ; return }
Code	{ str ( str ) ; return }
Distance : 7

5
Tree	{ return String ( str , false ) ; }
Code	{ return String ( str , false ) ; }
Distance : 3

6
Tree	{ this . str = str ; fireChangeEvent }
Code	{ this . str = str ; fireChangeEvent }
Distance : 9

7
Tree	{ return escapeJava . str ( str , null , null ) ; }
Code	{ return escapeJava . str ( str , null , null ) ; }
Distance : 5

8
Tree	{ str ( str ) ; assert }
Code	{ str ( str ) ; assert }
Distance : 7

9
Tree	{ str ( str ) ; super }
Code	{ str ( str ) ; super }
Distance : 7

10
Tree	{ this ( str , str , str , return; ) ; }
Code	{ this ( str , str , str , return; ) ; }
Distance : 6

11
Tree	{ return escapeJava ( escapeJava , null ) ; }
Code	{ return escapeJava ( escapeJava , null ) ; }
Distance : 5

12
Tree	{ return escapeJava ( str , str ) ; }
Code	{ return escapeJava ( str , str ) ; }
Distance : 4

13
Tree	{ return escapeJava ( str , null , null , str ) ; }
Code	{ return escapeJava ( str , null , null , str ) ; }
Distance : 5

14
Tree	{ return escapeJava ( this , str ) ; }
Code	{ return escapeJava ( this , str ) ; }
Distance : 5

15
Tree	{ return escapeJava ( str , str , str , str ) ; }
Code	{ return escapeJava ( str , str , str , str ) ; }
Distance : 5

16
Tree	{ return str ( str , str , escapeJava ) ; }
Code	{ return str ( str , str , escapeJava ) ; }
Distance : 3

17
Tree	{ super . str ( str ) ; return continue; ; }
Code	{ super . str ( str ) ; return continue; ; }
Distance : 8

18
Tree	{ super . escapeJava ( str ) ; return escapeJava ; }
Code	{ super . escapeJava ( str ) ; return escapeJava ; }
Distance : 8

19
Tree	{ this . str = str ; if }
Code	{ this . str = str ; if }
Distance : 9

20
Tree	{ return str . escapeJava ( str ) ; }
Code	{ return str . escapeJava ( str ) ; }
Distance : 6

21
Tree	{ return this . str ( str ) ; }
Code	{ return this . str ( str ) ; }
Distance : 6

22
Tree	{ return escapeJava ( str , null , return; , str ) ; }
Code	{ return escapeJava ( str , null , return; , str ) ; }
Distance : 5

23
Tree	{ return escapeJavaStyleString ( str , false ) ; }
Code	{ return escapeJavaStyleString ( str , false ) ; }
Distance : 2

24
Tree	{ return str . escapeJava ( str , null , null ) ; }
Code	{ return str . escapeJava ( str , null , null ) ; }
Distance : 5

25
Tree	{ return escapeJava ( str , return; ) ; }
Code	{ return escapeJava ( str , return; ) ; }
Distance : 4

26
Tree	{ this . str = str ; ++ }
Code	{ this . str = str ; ++ }
Distance : 9

27
Tree	{ return escapeJava ( String , false ) ; }
Code	{ return escapeJava ( String , false ) ; }
Distance : 4

28
Tree	{ this . str = str ; else }
Code	{ this . str = str ; else }
Distance : 9

29
Tree	{ return escapeJava . escapeJava ( str ) ; }
Code	{ return escapeJava . escapeJava ( str ) ; }
Distance : 7

30
Tree	{ escapeJava ( str ) ; return false ; }
Code	{ escapeJava ( str ) ; return false ; }
Distance : 6

31
Tree	{ return escapeJava ( str , escapeJavaStyleString ) ; }
Code	{ return escapeJava ( str , escapeJavaStyleString ) ; }
Distance : 4

32
Tree	{ return escapeJavaStyleString ( str , escapeJava ) ; }
Code	{ return escapeJavaStyleString ( str , escapeJava ) ; }
Distance : 3

33
Tree	{ return escapeJava ( str , str , str , escapeJava ) ; }
Code	{ return escapeJava ( str , str , str , escapeJava ) ; }
Distance : 5

34
Tree	{ return escapeJava ( str , str , str , str , null ) ; }
Code	{ return escapeJava ( str , str , str , str , null ) ; }
Distance : 7

35
Tree	{ return escapeJavaStyleString ( str , null ) ; }
Code	{ return escapeJavaStyleString ( str , null ) ; }
Distance : 3

36
Tree	{ return String ( this , str ) ; }
Code	{ return String ( this , str ) ; }
Distance : 5

37
Tree	{ return escapeJavaStyleString ( escapeJava , null ) ; }
Code	{ return escapeJavaStyleString ( escapeJava , null ) ; }
Distance : 4

38
Tree	{ return escapeJava ( str , escapeJava ) ; }
Code	{ return escapeJava ( str , escapeJava ) ; }
Distance : 4

39
Tree	{ return str ( str , return; ) ; }
Code	{ return str ( str , return; ) ; }
Distance : 4

40
Tree	{ escapeJava ( str ) ; super }
Code	{ escapeJava ( str ) ; super }
Distance : 7

41
Tree	{ this . str = str ; assert }
Code	{ this . str = str ; assert }
Distance : 9

42
Tree	{ return escapeJava ( escapeJava , false ) ; }
Code	{ return escapeJava ( escapeJava , false ) ; }
Distance : 4

43
Tree	{ escapeJava ( str ) ; return true ; }
Code	{ escapeJava ( str ) ; return true ; }
Distance : 7

44
Tree	{ return String ( str , null ) ; }
Code	{ return String ( str , null ) ; }
Distance : 4

45
Tree	{ escapeJava ( str ) ; return }
Code	{ escapeJava ( str ) ; return }
Distance : 7

46
Tree	{ return escapeJava ( this , escapeJavaStyleString ) ; }
Code	{ return escapeJava ( this , escapeJavaStyleString ) ; }
Distance : 5

47
Tree	{ super . str ( String ) ; return false ; }
Code	{ super . str ( String ) ; return false ; }
Distance : 8

48
Tree	{ return escapeJava ( str , str , str ) ; }
Code	{ return escapeJava ( str , str , str ) ; }
Distance : 3

49
Tree	{ this ( str , str , escapeJava , null ) ; }
Code	{ this ( str , str , escapeJava , null ) ; }
Distance : 6

50
Tree	{ this . str = str ; checkNotNull }
Code	{ this . str = str ; checkNotNull }
Distance : 9

51
Tree	{ super . str ( str ) ; return return; ; }
Code	{ super . str ( str ) ; return return; ; }
Distance : 8

52
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; }
Distance : 4

53
Tree	{ escapeJava ( escapeJava ) ; return false ; }
Code	{ escapeJava ( escapeJava ) ; return false ; }
Distance : 7

54
Tree	{ return escapeJava ( str , null ) ; }
Code	{ return escapeJava ( str , null ) ; }
Distance : 4

55
Tree	{ return escapeJava ( str , String ) ; }
Code	{ return escapeJava ( str , String ) ; }
Distance : 4

56
Tree	{ return str . escapeJava ( str , null , return; ) ; }
Code	{ return str . escapeJava ( str , null , return; ) ; }
Distance : 5

57
Tree	{ return escapeJava . escapeJavaStyleString ( str , null , null ) ; }
Code	{ return escapeJava . escapeJavaStyleString ( str , null , null ) ; }
Distance : 4

58
Tree	{ super . escapeJava ( str ) ; return return; ; }
Code	{ super . escapeJava ( str ) ; return return; ; }
Distance : 8

59
Tree	{ return escapeJava ( str , super(); ) ; }
Code	{ return escapeJava ( str , super(); ) ; }
Distance : 4

60
Tree	{ return escapeJavaStyleString ( str , null ) ; }
Code	{ return escapeJavaStyleString ( str , null ) ; }
Distance : 3

61
Tree	{ return str ( escapeJava , null ) ; }
Code	{ return str ( escapeJava , null ) ; }
Distance : 5

62
Tree	{ return escapeJavaStyleString ( String , false ) ; }
Code	{ return escapeJavaStyleString ( String , false ) ; }
Distance : 3

63
Tree	{ return escapeJava ( str , str , escapeJava , str , null ) ; }
Code	{ return escapeJava ( str , str , escapeJava , str , null ) ; }
Distance : 7

64
Tree	{ return str ( str , null ) ; }
Code	{ return str ( str , null ) ; }
Distance : 4

65
Tree	{ return str ( str , null , null , str ) ; }
Code	{ return str ( str , null , null , str ) ; }
Distance : 5

66
Tree	{ escapeJava ( String ) ; return false ; }
Code	{ escapeJava ( String ) ; return false ; }
Distance : 7

67
Tree	{ return escapeJava ( str , str , String , str ) ; }
Code	{ return escapeJava ( str , str , String , str ) ; }
Distance : 5

68
Tree	{ return escapeJava ( str , str , escapeJava ) ; }
Code	{ return escapeJava ( str , str , escapeJava ) ; }
Distance : 3

69
Tree	{ str ( str ) ; throw }
Code	{ str ( str ) ; throw }
Distance : 7

70
Tree	{ super . escapeJavaStyleString ( str ) ; return return; ; }
Code	{ super . escapeJavaStyleString ( str ) ; return return; ; }
Distance : 7

71
Tree	{ return escapeJava ( String , null ) ; }
Code	{ return escapeJava ( String , null ) ; }
Distance : 5

72
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; }
Code	{ super . escapeJavaStyleString ( str ) ; return false ; }
Distance : 6

73
Tree	{ return super . str ( str , str , str , new String ( str ) ) ; }
Code	{ return super . str ( str , str , str , new String ( str ) ) ; }
Distance : 11

74
Tree	{ return escapeJava ( str , null , null , escapeJava ) ; }
Code	{ return escapeJava ( str , null , null , escapeJava ) ; }
Distance : 5

75
Tree	{ super . escapeJava ( str ) ; return true ; }
Code	{ super . escapeJava ( str ) ; return true ; }
Distance : 8

76
Tree	{ return escapeJava . str ( str ) ; }
Code	{ return escapeJava . str ( str ) ; }
Distance : 6

77
Tree	{ return str ( str , str , str , escapeJava ) ; }
Code	{ return str ( str , str , str , escapeJava ) ; }
Distance : 5

78
Tree	{ return escapeJava ( this , escapeJava ) ; }
Code	{ return escapeJava ( this , escapeJava ) ; }
Distance : 5

79
Tree	{ return str ( str , str , String , str ) ; }
Code	{ return str ( str , str , String , str ) ; }
Distance : 5

80
Tree	{ escapeJavaStyleString ( str ) ; return false ; }
Code	{ escapeJavaStyleString ( str ) ; return false ; }
Distance : 5

81
Tree	{ this ( str , String , str , null ) ; }
Code	{ this ( str , String , str , null ) ; }
Distance : 6

82
Tree	{ return escapeJava ( escapeJava , null ) ; }
Code	{ return escapeJava ( escapeJava , null ) ; }
Distance : 5

83
Tree	{ return str . escapeJavaStyleString ( str ) ; }
Code	{ return str . escapeJavaStyleString ( str ) ; }
Distance : 6

84
Tree	{ this ( str , escapeJava , str , null ) ; }
Code	{ this ( str , escapeJava , str , null ) ; }
Distance : 6

85
Tree	{ return str ( this , str ) ; }
Code	{ return str ( this , str ) ; }
Distance : 5

86
Tree	{ return str ( str , str , escapeJava , str ) ; }
Code	{ return str ( str , str , escapeJava , str ) ; }
Distance : 5

87
Tree	{ return super . escapeJava ( str , str , str , new str ( str ) ) ; }
Code	{ return super . escapeJava ( str , str , str , new str ( str ) ) ; }
Distance : 11

88
Tree	{ return this . escapeJava ( escapeJava ) ; }
Code	{ return this . escapeJava ( escapeJava ) ; }
Distance : 7

89
Tree	{ super . String ( str ) ; return false ; }
Code	{ super . String ( str ) ; return false ; }
Distance : 7

90
Tree	{ return str ( this , escapeJava ) ; }
Code	{ return str ( this , escapeJava ) ; }
Distance : 5

91
Tree	{ return super . str ( str , str , escapeJava , new str ( str ) ) ; }
Code	{ return super . str ( str , str , escapeJava , new str ( str ) ) ; }
Distance : 11

92
Tree	{ str ( escapeJava ) ; return false ; }
Code	{ str ( escapeJava ) ; return false ; }
Distance : 7

93
Tree	{ return str ( str , str , str ) ; }
Code	{ return str ( str , str , str ) ; }
Distance : 3

94
Tree	{ return escapeJavaStyleString . str ( str , null , null ) ; }
Code	{ return escapeJavaStyleString . str ( str , null , null ) ; }
Distance : 4

95
Tree	{ return escapeJava ( str , super(); , null , str ) ; }
Code	{ return escapeJava ( str , super(); , null , str ) ; }
Distance : 5

96
Tree	{ return str ( str , str , escapeJava , str , null ) ; }
Code	{ return str ( str , str , escapeJava , str , null ) ; }
Distance : 7

97
Tree	{ super . String ( str ) ; return return; ; }
Code	{ super . String ( str ) ; return return; ; }
Distance : 8

98
Tree	{ return super . escapeJava ( str , str , escapeJava , new escapeJava ( str ) ) ; }
Code	{ return super . escapeJava ( str , str , escapeJava , new escapeJava ( str ) ) ; }
Distance : 11

99
Tree	{ return escapeJavaStyleString ( str , null , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , null , str ) ; }
Distance : 4

100
Tree	{ super . str ( str ) ; return escapeJava ; }
Code	{ super . str ( str ) ; return escapeJava ; }
Distance : 8

101
Tree	{ return escapeJavaStyleString ( this , str ) ; }
Code	{ return escapeJavaStyleString ( this , str ) ; }
Distance : 4

102
Tree	{ return super . escapeJava ( str , str , escapeJava , new String ( str ) ) ; }
Code	{ return super . escapeJava ( str , str , escapeJava , new String ( str ) ) ; }
Distance : 11

103
Tree	{ this ( str , String , escapeJava , null ) ; }
Code	{ this ( str , String , escapeJava , null ) ; }
Distance : 6

104
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; }
Code	{ super . escapeJavaStyleString ( str ) ; return null ; }
Distance : 7

105
Tree	{ return str ( this , String ) ; }
Code	{ return str ( this , String ) ; }
Distance : 5

106
Tree	{ String ( str ) ; return false ; }
Code	{ String ( str ) ; return false ; }
Distance : 6

107
Tree	{ return this . String ( str ) ; }
Code	{ return this . String ( str ) ; }
Distance : 7

108
Tree	{ super . str ( str ) ; return super(); ; }
Code	{ super . str ( str ) ; return super(); ; }
Distance : 8

109
Tree	{ return str ( str , null , return; , str ) ; }
Code	{ return str ( str , null , return; , str ) ; }
Distance : 5

110
Tree	{ return escapeJava ( str , false ) ; }
Code	{ return escapeJava ( str , false ) ; }
Distance : 3

111
Tree	{ this . str = str ; super }
Code	{ this . str = str ; super }
Distance : 9

112
Tree	{ return str . escapeJava ( str , return; , null ) ; }
Code	{ return str . escapeJava ( str , return; , null ) ; }
Distance : 5

113
Tree	{ return this . str ( escapeJava ) ; }
Code	{ return this . str ( escapeJava ) ; }
Distance : 6

114
Tree	{ return str ( escapeJava , false ) ; }
Code	{ return str ( escapeJava , false ) ; }
Distance : 4

115
Tree	{ return escapeJava ( str , str , escapeJavaStyleString ) ; }
Code	{ return escapeJava ( str , str , escapeJavaStyleString ) ; }
Distance : 3

116
Tree	{ return str ( this , escapeJavaStyleString ) ; }
Code	{ return str ( this , escapeJavaStyleString ) ; }
Distance : 5

117
Tree	{ str ( str ) ; return true ; }
Code	{ str ( str ) ; return true ; }
Distance : 7

118
Tree	{ this ( str , escapeJava , escapeJava , null ) ; }
Code	{ this ( str , escapeJava , escapeJava , null ) ; }
Distance : 6

119
Tree	{ super . String ( str ) ; return null ; }
Code	{ super . String ( str ) ; return null ; }
Distance : 8

120
Tree	{ this ( str , str , escapeJava , return; ) ; }
Code	{ this ( str , str , escapeJava , return; ) ; }
Distance : 6

121
Tree	{ return escapeJavaStyleString ( str , str , str ) ; }
Code	{ return escapeJavaStyleString ( str , str , str ) ; }
Distance : 2

122
Tree	{ return str ( str , false ) ; }
Code	{ return str ( str , false ) ; }
Distance : 3

123
Tree	{ super . escapeJava ( String ) ; return false ; }
Code	{ super . escapeJava ( String ) ; return false ; }
Distance : 8

124
Tree	{ super . String ( str ) ; return escapeJava ; }
Code	{ super . String ( str ) ; return escapeJava ; }
Distance : 8

125
Tree	{ return escapeJava . escapeJavaStyleString ( str ) ; }
Code	{ return escapeJava . escapeJavaStyleString ( str ) ; }
Distance : 6

126
Tree	{ escapeJava ( str ) ; throw }
Code	{ escapeJava ( str ) ; throw }
Distance : 7

127
Tree	{ super . str ( str ) ; return str ; }
Code	{ super . str ( str ) ; return str ; }
Distance : 8

128
Tree	{ return str ( str , str , str , escapeJava , null ) ; }
Code	{ return str ( str , str , str , escapeJava , null ) ; }
Distance : 7

129
Tree	{ return escapeJavaStyleString . str ( str ) ; }
Code	{ return escapeJavaStyleString . str ( str ) ; }
Distance : 5

130
Tree	{ return escapeJavaStyleString ( str , return; ) ; }
Code	{ return escapeJavaStyleString ( str , return; ) ; }
Distance : 3

131
Tree	{ return escapeJava ( str , str , str , String ) ; }
Code	{ return escapeJava ( str , str , str , String ) ; }
Distance : 5

132
Tree	{ return str ( str , str ) ; }
Code	{ return str ( str , str ) ; }
Distance : 4

133
Tree	{ return str ( str , str , String , str , null ) ; }
Code	{ return str ( str , str , String , str , null ) ; }
Distance : 7

134
Tree	{ return str ( str , str , str , str ) ; }
Code	{ return str ( str , str , str , str ) ; }
Distance : 5

135
Tree	{ this ( str , str , String , null ) ; }
Code	{ this ( str , str , String , null ) ; }
Distance : 6

136
Tree	{ super . str ( str ) ; return false ; }
Code	{ super . str ( str ) ; return false ; }
Distance : 7

137
Tree	{ super . str ( str ) ; return null ; }
Code	{ super . str ( str ) ; return null ; }
Distance : 8

138
Tree	{ return super . escapeJava ( str , str , escapeJava , new str ( str ) ) ; }
Code	{ return super . escapeJava ( str , str , escapeJava , new str ( str ) ) ; }
Distance : 11

139
Tree	{ return escapeJava ( this , String ) ; }
Code	{ return escapeJava ( this , String ) ; }
Distance : 5

140
Tree	{ this . escapeJava = str ; super }
Code	{ this . escapeJava = str ; super }
Distance : 10

141
Tree	{ String ( str ) ; super }
Code	{ String ( str ) ; super }
Distance : 7

142
Tree	{ return escapeJava ( str , str , str , escapeJava , null ) ; }
Code	{ return escapeJava ( str , str , str , escapeJava , null ) ; }
Distance : 7

143
Tree	{ return escapeJava ( str , null ) ; }
Code	{ return escapeJava ( str , null ) ; }
Distance : 4

144
Tree	{ super . str ( escapeJava ) ; return false ; }
Code	{ super . str ( escapeJava ) ; return false ; }
Distance : 8

145
Tree	{ return escapeJava . escapeJava ( str , null , null ) ; }
Code	{ return escapeJava . escapeJava ( str , null , null ) ; }
Distance : 5

146
Tree	{ return this . escapeJava ( str ) ; }
Code	{ return this . escapeJava ( str ) ; }
Distance : 7

147
Tree	{ return escapeJava ( str , str , String , str , null ) ; }
Code	{ return escapeJava ( str , str , String , str , null ) ; }
Distance : 7

148
Tree	{ return String . escapeJava ( str ) ; }
Code	{ return String . escapeJava ( str ) ; }
Distance : 7

149
Tree	{ return str . str ( str ) ; }
Code	{ return str . str ( str ) ; }
Distance : 6

150
Tree	{ escapeJavaStyleString ( str ) ; super }
Code	{ escapeJavaStyleString ( str ) ; super }
Distance : 6

151
Tree	{ return escapeJavaStyleString ( str , str ) ; }
Code	{ return escapeJavaStyleString ( str , str ) ; }
Distance : 3

152
Tree	{ super . escapeJava ( str ) ; return false ; }
Code	{ super . escapeJava ( str ) ; return false ; }
Distance : 7

153
Tree	{ return str ( str , null ) ; }
Code	{ return str ( str , null ) ; }
Distance : 4

154
Tree	{ escapeJava ( str ) ; assert }
Code	{ escapeJava ( str ) ; assert }
Distance : 7

155
Tree	{ return str . str ( str , null , null ) ; }
Code	{ return str . str ( str , null , null ) ; }
Distance : 5

156
Tree	{ str ( str ) ; return false ; }
Code	{ str ( str ) ; return false ; }
Distance : 6

157
Tree	{ return escapeJava ( str , str , String ) ; }
Code	{ return escapeJava ( str , str , String ) ; }
Distance : 3

158
Tree	{ return escapeJavaStyleString . escapeJava ( str ) ; }
Code	{ return escapeJavaStyleString . escapeJava ( str ) ; }
Distance : 6

159
Tree	{ return this . escapeJavaStyleString ( str ) ; }
Code	{ return this . escapeJavaStyleString ( str ) ; }
Distance : 6

160
Tree	{ return str ( String , false ) ; }
Code	{ return str ( String , false ) ; }
Distance : 4

161
Tree	{ return str ( str , String ) ; }
Code	{ return str ( str , String ) ; }
Distance : 4

162
Tree	{ return str ( str , str , escapeJavaStyleString ) ; }
Code	{ return str ( str , str , escapeJavaStyleString ) ; }
Distance : 3

163
Tree	{ super . escapeJava ( str ) ; return escapeJavaStyleString ; }
Code	{ super . escapeJava ( str ) ; return escapeJavaStyleString ; }
Distance : 8

164
Tree	{ return escapeJava ( str , str , str , String , null ) ; }
Code	{ return escapeJava ( str , str , str , String , null ) ; }
Distance : 7

165
Tree	{ return escapeJava ( str , true ) ; }
Code	{ return escapeJava ( str , true ) ; }
Distance : 4

166
Tree	{ return this . str ( String ) ; }
Code	{ return this . str ( String ) ; }
Distance : 6

167
Tree	{ return escapeJava ( escapeJavaStyleString , null ) ; }
Code	{ return escapeJava ( escapeJavaStyleString , null ) ; }
Distance : 5

168
Tree	{ super . escapeJava ( escapeJava ) ; return false ; }
Code	{ super . escapeJava ( escapeJava ) ; return false ; }
Distance : 8

169
Tree	{ super . escapeJava ( str ) ; return null ; }
Code	{ super . escapeJava ( str ) ; return null ; }
Distance : 8

170
Tree	{ super . escapeJava ( str ) ; return str ; }
Code	{ super . escapeJava ( str ) ; return str ; }
Distance : 8

171
Tree	{ return str ( str , str , str , str , null ) ; }
Code	{ return str ( str , str , str , str , null ) ; }
Distance : 7

172
Tree	{ return str ( str , return; , null , str ) ; }
Code	{ return str ( str , return; , null , str ) ; }
Distance : 5

173
Tree	{ return str ( str , return; ) ; }
Code	{ return str ( str , return; ) ; }
Distance : 4

174
Tree	{ return str . escapeJavaStyleString ( str , null , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , null ) ; }
Distance : 4

175
Tree	{ this . str = str ; throw }
Code	{ this . str = str ; throw }
Distance : 9

176
Tree	{ return str ( str , str , String ) ; }
Code	{ return str ( str , str , String ) ; }
Distance : 3

177
Tree	{ this ( str , str , escapeJavaStyleString , null ) ; }
Code	{ this ( str , str , escapeJavaStyleString , null ) ; }
Distance : 6

178
Tree	{ return str ( str , escapeJava ) ; }
Code	{ return str ( str , escapeJava ) ; }
Distance : 4

179
Tree	{ return escapeJavaStyleString ( str , str , escapeJava ) ; }
Code	{ return escapeJavaStyleString ( str , str , escapeJava ) ; }
Distance : 2

180
Tree	{ return super . str ( str , str , str , new str ( str ) ) ; }
Code	{ return super . str ( str , str , str , new str ( str ) ) ; }
Distance : 11

181
Tree	{ return super . escapeJava ( str , str , str , new escapeJava ( str ) ) ; }
Code	{ return super . escapeJava ( str , str , str , new escapeJava ( str ) ) ; }
Distance : 11

182
Tree	{ this . str = str ; CHAR_CONS }
Code	{ this . str = str ; CHAR_CONS }
Distance : 9

183
Tree	{ super . str ( str ) ; return escapeJavaStyleString ; }
Code	{ super . str ( str ) ; return escapeJavaStyleString ; }
Distance : 8

184
Tree	{ return str ( str , escapeJavaStyleString ) ; }
Code	{ return str ( str , escapeJavaStyleString ) ; }
Distance : 4

185
Tree	{ return escapeJava ( str , str , escapeJava , str ) ; }
Code	{ return escapeJava ( str , str , escapeJava , str ) ; }
Distance : 5

186
Tree	{ return this . escapeJavaStyleString ( String ) ; }
Code	{ return this . escapeJavaStyleString ( String ) ; }
Distance : 7

187
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; }
Code	{ super . escapeJavaStyleString ( str ) ; return str ; }
Distance : 7

188
Tree	{ super . str ( str ) ; return true ; }
Code	{ super . str ( str ) ; return true ; }
Distance : 8

189
Tree	{ return escapeJavaStyleString . escapeJava ( str , null , null ) ; }
Code	{ return escapeJavaStyleString . escapeJava ( str , null , null ) ; }
Distance : 4

190
Tree	{ this ( str , str , str , null ) ; }
Code	{ this ( str , str , str , null ) ; }
Distance : 6

191
Tree	{ return str ( escapeJavaStyleString , null ) ; }
Code	{ return str ( escapeJavaStyleString , null ) ; }
Distance : 5

192
Tree	{ return super . str ( str , str , str , new escapeJava ( str ) ) ; }
Code	{ return super . str ( str , str , str , new escapeJava ( str ) ) ; }
Distance : 11

193
Tree	{ return escapeJava ( str , return; , null , str ) ; }
Code	{ return escapeJava ( str , return; , null , str ) ; }
Distance : 5

194
Tree	{ return this . escapeJava ( String ) ; }
Code	{ return this . escapeJava ( String ) ; }
Distance : 7

195
Tree	{ return super . escapeJava ( str , str , str , new String ( str ) ) ; }
Code	{ return super . escapeJava ( str , str , str , new String ( str ) ) ; }
Distance : 11

196
Tree	{ str ( String ) ; return false ; }
Code	{ str ( String ) ; return false ; }
Distance : 7

197
Tree	{ return this . escapeJava ( escapeJavaStyleString ) ; }
Code	{ return this . escapeJava ( escapeJavaStyleString ) ; }
Distance : 7

198
Tree	{ super . escapeJavaStyleString ( str ) ; return escapeJava ; }
Code	{ super . escapeJavaStyleString ( str ) ; return escapeJava ; }
Distance : 7

199
Tree	{ return escapeJava . String ( str ) ; }
Code	{ return escapeJava . String ( str ) ; }
Distance : 7

========================================================================


========================================================================
Example Number: 43
Parent Code is: 
if ( element != null ) { type = element . getClass () ; } else { type = Object . class ; }
-------------------------------------------------------------------------------
Child code is: 
if ( element != null ) { type = element . getClass () ; } else { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=element}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (32 (800{val=element}) (235{val=.}) (802{val=getClass}) (216{val=()}))) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (57 (43 (800{val=Object})) (235{val=.}) (341{val=class}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=element}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (32 (800{val=element}) (235{val=.}) (802{val=getClass}) (216{val=()}))) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/35/parent/src_main_java_org_apache_commons_lang3_ArrayUtils.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = Object ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = Object ; }
Distance : 10

1
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( T ) array . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( T ) array . getClass () ; }
Distance : 8

2
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = getClass ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = getClass ; }
Distance : 10

3
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( element ) array . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( element ) array . getClass () ; }
Distance : 8

4
Tree	if ( element != null ) { type = element . getClass () ; } else { type = IllegalArgumentException ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = IllegalArgumentException ; }
Distance : 5

5
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . T ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . T ; }
Distance : 9

6
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element ; }
Distance : 6

7
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = getClass ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = getClass ; }
Distance : 8

8
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = Object ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = Object ; }
Distance : 8

9
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) type . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) type . getClass () ; }
Distance : 8

10
Tree	if ( element != null ) { type = element . getClass () ; } else { type = false ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = false ; }
Distance : 6

11
Tree	if ( element != null ) { type = false ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = Object . getClass () ; }
Distance : 10

12
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . type ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . type ; }
Distance : 9

13
Tree	if ( element != null ) { type = false ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = Object . getClass () ; }
Distance : 10

14
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 6

15
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 6

16
Tree	if ( element != null ) { type = getClass ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = getClass ; } else { type = Object . getClass () ; }
Distance : 9

17
Tree	if ( element != null ) { this . type = element . getClass () ; } else { add = getClass () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { add = getClass () ; }
Distance : 8

18
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Distance : 8

19
Tree	if ( element != null ) { this . type = element . getClass () ; } else { add = type () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { add = type () ; }
Distance : 8

20
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = getClass () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = getClass () ; }
Distance : 8

21
Tree	if ( element != null ) { type = IllegalArgumentException ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = IllegalArgumentException ; } else { type = Object . getClass () ; }
Distance : 10

22
Tree	if ( element != null ) { type = element . getClass () ; } else { SuppressWarnings = false ; }
Code	if ( element != null ) { type = element . getClass () ; } else { SuppressWarnings = false ; }
Distance : 6

23
Tree	if ( element != null ) { this . type = element . getClass () ; } else { Object = getClass () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { Object = getClass () ; }
Distance : 8

24
Tree	if ( element != null ) { this . type = element . getClass () ; } else { SuppressWarnings = getClass () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { SuppressWarnings = getClass () ; }
Distance : 8

25
Tree	if ( element != null ) { type = element . getClass () ; } else { add = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { add = Object . getClass () ; }
Distance : 6

26
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { add = T . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { add = T . getClass () ; }
Distance : 9

27
Tree	if ( element != null ) { type = element . getClass () ; } else { Class = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Class = Object . getClass () ; }
Distance : 6

28
Tree	if ( element != null ) { this . type = element . getClass () ; } else { add = add () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { add = add () ; }
Distance : 8

29
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { Object = Object . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { Object = Object . getClass () ; }
Distance : 9

30
Tree	if ( element != null ) { type = false ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = element . getClass () ; }
Distance : 10

31
Tree	if ( element != null ) { type = element . getClass () == type ; } else { type = element ; }
Code	if ( element != null ) { type = element . getClass () == type ; } else { type = element ; }
Distance : 8

32
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = type () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = type () ; }
Distance : 8

33
Tree	if ( element != null ) { type = element . getClass () ; } else { SuppressWarnings = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { SuppressWarnings = Object . getClass () ; }
Distance : 6

34
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { Class = Object . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { Class = Object . getClass () ; }
Distance : 10

35
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = T . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = T . getClass () ; }
Distance : 10

36
Tree	if ( element != null ) { type = element . getClass () == type ; } else { type = type ; }
Code	if ( element != null ) { type = element . getClass () == type ; } else { type = type ; }
Distance : 8

37
Tree	if ( element != null ) { type = element . getClass () ; } else { add = T . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { add = T . getClass () ; }
Distance : 6

38
Tree	if ( element != null ) { type = element . getClass () ; } else { type = array . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = array . getClass () ; }
Distance : 6

39
Tree	if ( element != null ) { this . type = element . getClass () ; } else { Class = getClass () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { Class = getClass () ; }
Distance : 8

40
Tree	if ( element != null ) { type = element . getClass () == type ; } else { type = getClass ; }
Code	if ( element != null ) { type = element . getClass () == type ; } else { type = getClass ; }
Distance : 8

41
Tree	if ( element != null ) { type = element . getClass () == type ; } else { type = Class ; }
Code	if ( element != null ) { type = element . getClass () == type ; } else { type = Class ; }
Distance : 8

42
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = element . getClass () ; }
Distance : 10

43
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = add () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = add () ; }
Distance : 8

44
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { add = element . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { add = element . getClass () ; }
Distance : 10

45
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = T . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = T . getClass () ; }
Distance : 9

46
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 6

47
Tree	if ( element != null ) { type = element ; } else { type = array . getClass () ; }
Code	if ( element != null ) { type = element ; } else { type = array . getClass () ; }
Distance : 9

48
Tree	if ( element != null ) { type = false ; } else { type = T . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = T . getClass () ; }
Distance : 10

49
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = SuppressWarnings ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = SuppressWarnings ; }
Distance : 10

50
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = Class ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = Class ; }
Distance : 8

51
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Distance : 8

52
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . Object ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . Object ; }
Distance : 9

53
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . SuppressWarnings ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . SuppressWarnings ; }
Distance : 9

54
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = element ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = element ; }
Distance : 8

55
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = array . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = array . getClass () ; }
Distance : 10

56
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = element ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = element ; }
Distance : 9

57
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( array ) Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( array ) Object . getClass () ; }
Distance : 8

58
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = type ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = type ; }
Distance : 9

59
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = Class ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = Class ; }
Distance : 9

60
Tree	if ( element != null ) { type = element . getClass () ; } else { add = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { add = Object . getClass () ; }
Distance : 6

61
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = SuppressWarnings ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = SuppressWarnings ; }
Distance : 8

62
Tree	if ( element != null ) { type = getClass ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = getClass ; } else { type = Object . getClass () ; }
Distance : 9

63
Tree	if ( element != null ) { type = element . getClass () == type ; } else { type = IllegalArgumentException ; }
Code	if ( element != null ) { type = element . getClass () == type ; } else { type = IllegalArgumentException ; }
Distance : 7

64
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = SuppressWarnings ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = SuppressWarnings ; }
Distance : 9

65
Tree	if ( element != null ) { type = element . getClass () ; } else { type = type . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = type . getClass () ; }
Distance : 6

66
Tree	if ( element != null ) { type = element . getClass () == type ; } else { type = SuppressWarnings ; }
Code	if ( element != null ) { type = element . getClass () == type ; } else { type = SuppressWarnings ; }
Distance : 8

67
Tree	if ( element != null ) { this . type = element . getClass () ; } else { else = getClass () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { else = getClass () ; }
Distance : 8

68
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = Object ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = Object ; }
Distance : 10

69
Tree	if ( element != null ) { type = element . getClass () == type ; } else { type = Object ; }
Code	if ( element != null ) { type = element . getClass () == type ; } else { type = Object ; }
Distance : 8

70
Tree	if ( array != null ) { type = element . getClass () ; } else { type = false ; }
Code	if ( array != null ) { type = element . getClass () ; } else { type = false ; }
Distance : 7

71
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { add = array . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { add = array . getClass () ; }
Distance : 10

72
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { Object = Object . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { Object = Object . getClass () ; }
Distance : 10

73
Tree	if ( element != null ) { type = element . getClass () == else ; } else { type = SuppressWarnings ; }
Code	if ( element != null ) { type = element . getClass () == else ; } else { type = SuppressWarnings ; }
Distance : 8

74
Tree	if ( element != null ) { type = false ; } else { type = getClass . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = getClass . getClass () ; }
Distance : 10

75
Tree	if ( element != null ) { type = false ; } else { type = SuppressWarnings . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = SuppressWarnings . getClass () ; }
Distance : 10

76
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) element . getClass () ; }
Distance : 8

77
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) T . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) T . getClass () ; }
Distance : 8

78
Tree	if ( element != null ) { type = false ; } else { type = SuppressWarnings . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = SuppressWarnings . getClass () ; }
Distance : 10

79
Tree	if ( element != null ) { type = array . getClass () ; } else { type = false ; }
Code	if ( element != null ) { type = array . getClass () ; } else { type = false ; }
Distance : 7

80
Tree	if ( element != null ) { type = element . getClass () ; } else { type = type ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = type ; }
Distance : 6

81
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( element ) Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( element ) Object . getClass () ; }
Distance : 8

82
Tree	if ( element != null ) { type = element . getClass () ; } else { type = array . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = array . getClass () ; }
Distance : 6

83
Tree	if ( element != null ) { type = false ; } else { type = getClass . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = getClass . getClass () ; }
Distance : 10

84
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { add = element . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { add = element . getClass () ; }
Distance : 9

85
Tree	if ( element != null ) { type = element . getClass () ; } else { add = array . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { add = array . getClass () ; }
Distance : 6

86
Tree	if ( element != null ) { type = element ; } else { type = type . getClass () ; }
Code	if ( element != null ) { type = element ; } else { type = type . getClass () ; }
Distance : 9

87
Tree	if ( element != null ) { type = element . getClass () ; } else { type = array . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = array . getClass () ; }
Distance : 6

88
Tree	if ( element != null ) { type = element . getClass () ; } else { Object = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Object = Object . getClass () ; }
Distance : 6

89
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( T ) Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( T ) Object . getClass () ; }
Distance : 8

90
Tree	if ( array != null ) { type = false ; } else { type = Object . getClass () ; }
Code	if ( array != null ) { type = false ; } else { type = Object . getClass () ; }
Distance : 11

91
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = SuppressWarnings . add () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = SuppressWarnings . add () ; }
Distance : 9

92
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { add = SuppressWarnings . add () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { add = SuppressWarnings . add () ; }
Distance : 9

93
Tree	if ( element != null ) { type = false ; } else { type = Class . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = Class . getClass () ; }
Distance : 10

94
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Distance : 6

95
Tree	if ( element != null ) { type = false ; } else { type = array . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = array . getClass () ; }
Distance : 10

96
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = IllegalArgumentException ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = IllegalArgumentException ; }
Distance : 9

97
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = Class . add () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = Class . add () ; }
Distance : 9

98
Tree	if ( element != null ) { type = false ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = element . getClass () ; }
Distance : 10

99
Tree	if ( element != null ) { type = element ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = element ; } else { type = Object . getClass () ; }
Distance : 9

100
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Class ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Class ; }
Distance : 6

101
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = type . add () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = type . add () ; }
Distance : 9

102
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = Class ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = Class ; }
Distance : 10

103
Tree	if ( element != null ) { type = false ; } else { type = type . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = type . getClass () ; }
Distance : 10

104
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = T ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = T ; }
Distance : 8

105
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = type ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = type ; }
Distance : 10

106
Tree	if ( element != null ) { type = false ; } else { type = T . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = T . getClass () ; }
Distance : 10

107
Tree	if ( element != null ) { type = element . getClass () ; } else { type = T . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = T . getClass () ; }
Distance : 6

108
Tree	if ( element != null ) { type = ( element ) array . getClass () ; } else { type = this . type ; }
Code	if ( element != null ) { type = ( element ) array . getClass () ; } else { type = this . type ; }
Distance : 9

109
Tree	if ( element != null ) { type = element . getClass () ; } else { type = else ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = else ; }
Distance : 6

110
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = else ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = else ; }
Distance : 9

111
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = T ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = T ; }
Distance : 10

112
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = Object ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = Object ; }
Distance : 8

113
Tree	if ( element != null ) { type = element . getClass () == type ; } else { type = Object ; }
Code	if ( element != null ) { type = element . getClass () == type ; } else { type = Object ; }
Distance : 8

114
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) array . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) array . getClass () ; }
Distance : 8

115
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { SuppressWarnings = Object . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { SuppressWarnings = Object . getClass () ; }
Distance : 9

116
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 6

117
Tree	if ( element != null ) { type = element . getClass () ; } else { type = SuppressWarnings . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = SuppressWarnings . getClass () ; }
Distance : 6

118
Tree	if ( element != null ) { type = ( array ) element . getClass () ; } else { type = this . type ; }
Code	if ( element != null ) { type = ( array ) element . getClass () ; } else { type = this . type ; }
Distance : 9

119
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) T . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) T . getClass () ; }
Distance : 8

120
Tree	if ( element != null ) { type = element . getClass () ; } else { type = T ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = T ; }
Distance : 6

121
Tree	if ( element != null ) { type = element ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = element ; } else { type = element . getClass () ; }
Distance : 9

122
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Object ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Object ; }
Distance : 6

123
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . element ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . element ; }
Distance : 9

124
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . getClass ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . getClass ; }
Distance : 9

125
Tree	if ( element != null ) { type = type . getClass () ; } else { type = false ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = false ; }
Distance : 7

126
Tree	if ( element != null ) { type = element . getClass () ; } else { type = SuppressWarnings ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = SuppressWarnings ; }
Distance : 6

127
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = Object ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = Object ; }
Distance : 9

128
Tree	if ( element != null ) { type = false ; } else { type = array . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = array . getClass () ; }
Distance : 10

129
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Object . add () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Object . add () ; }
Distance : 6

130
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( T ) Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( T ) Object . getClass () ; }
Distance : 8

131
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Distance : 6

132
Tree	if ( element != null ) { add = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { add = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

133
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = Object . getClass () ; }
Distance : 9

134
Tree	if ( element != null ) { type = element . getClass () ; } else { type = getClass . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = getClass . getClass () ; }
Distance : 6

135
Tree	if ( array != null ) { type = ( element ) element . getClass () ; } else { type = this . type ; }
Code	if ( array != null ) { type = ( element ) element . getClass () ; } else { type = this . type ; }
Distance : 10

136
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = IllegalArgumentException ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = IllegalArgumentException ; }
Distance : 8

137
Tree	if ( element != null ) { type = element . getClass () ; } else { type = add ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = add ; }
Distance : 6

138
Tree	if ( element != null ) { add = false ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { add = false ; } else { type = Object . getClass () ; }
Distance : 11

139
Tree	if ( element != null ) { type = element . getClass () ; } else { type = SuppressWarnings . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = SuppressWarnings . getClass () ; }
Distance : 6

140
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( element ) array . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( element ) array . getClass () ; }
Distance : 8

141
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Object . add () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Object . add () ; }
Distance : 6

142
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { add = Object . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { add = Object . getClass () ; }
Distance : 9

143
Tree	if ( element != null ) { type = element ; } else { type = T . getClass () ; }
Code	if ( element != null ) { type = element ; } else { type = T . getClass () ; }
Distance : 9

144
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { SuppressWarnings = Object . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { SuppressWarnings = Object . getClass () ; }
Distance : 10

145
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Distance : 6

146
Tree	if ( element != null ) { type = element . getClass () ; } else { add = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { add = element . getClass () ; }
Distance : 6

147
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Distance : 6

148
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = element . getClass () ; }
Distance : 9

149
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( element ) Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( element ) Object . getClass () ; }
Distance : 8

150
Tree	if ( element != null ) { type = true ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = true ; } else { type = Object . getClass () ; }
Distance : 10

151
Tree	if ( element != null ) { type = element . getClass () ; } else { type = type . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = type . getClass () ; }
Distance : 6

152
Tree	if ( element != null ) { type = SuppressWarnings ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = SuppressWarnings ; } else { type = Object . getClass () ; }
Distance : 10

153
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = getClass ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = getClass ; }
Distance : 9

154
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { add = Class . add () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { add = Class . add () ; }
Distance : 9

155
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) element . getClass () ; }
Distance : 8

156
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = T ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = T ; }
Distance : 9

157
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element . add () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element . add () ; }
Distance : 6

158
Tree	if ( element != null ) { type = element . getClass () ; } else { Object = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Object = Object . getClass () ; }
Distance : 6

159
Tree	if ( element != null ) { type = element . getClass () ; } else { add = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { add = element . getClass () ; }
Distance : 6

160
Tree	if ( element != null ) { type = element . getClass () ; } else { SuppressWarnings = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { SuppressWarnings = Object . getClass () ; }
Distance : 6

161
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) type . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) type . getClass () ; }
Distance : 8

162
Tree	if ( element != null ) { type = SuppressWarnings . getClass () ; } else { type = false ; }
Code	if ( element != null ) { type = SuppressWarnings . getClass () ; } else { type = false ; }
Distance : 7

163
Tree	if ( element != null ) { type = false ; } else { type = Class . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = Class . getClass () ; }
Distance : 10

164
Tree	if ( element != null ) { type = element . getClass () ; } else { type = T . add () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = T . add () ; }
Distance : 6

165
Tree	if ( element != null ) { type = element . getClass () ; } else { else = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { else = Object . getClass () ; }
Distance : 6

166
Tree	if ( element != null ) { type = element . getClass () ; } else { type = array . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = array . getClass () ; }
Distance : 6

167
Tree	if ( SuppressWarnings != null ) { type = element . getClass () ; } else { type = false ; }
Code	if ( SuppressWarnings != null ) { type = element . getClass () ; } else { type = false ; }
Distance : 7

168
Tree	if ( element != null ) { type = element . getClass () ; } else { type = T . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = T . getClass () ; }
Distance : 6

169
Tree	if ( element != null ) { type = ( char [] ) element . getClass () ; } else { type = SuppressWarnings ; }
Code	if ( element != null ) { type = ( char [] ) element . getClass () ; } else { type = SuppressWarnings ; }
Distance : 10

170
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = array . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = array . getClass () ; }
Distance : 9

171
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = Object . getClass () ; }
Distance : 10

172
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { add = type . add () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { add = type . add () ; }
Distance : 9

173
Tree	if ( element != null ) { type = element . getClass () ; } else { Class = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Class = Object . getClass () ; }
Distance : 6

174
Tree	if ( element != null ) { type = false ; } else { type = type . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = type . getClass () ; }
Distance : 10

175
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) array . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) array . getClass () ; }
Distance : 8

176
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { add = array . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { add = array . getClass () ; }
Distance : 9

177
Tree	if ( element != null ) { type = element . getClass () ; } else { type = getClass ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = getClass ; }
Distance : 6

178
Tree	if ( element != null ) { type = element . getClass () ; } else { add = array . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { add = array . getClass () ; }
Distance : 6

179
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = SuppressWarnings . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = SuppressWarnings . getClass () ; }
Distance : 9

180
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . array ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . array ; }
Distance : 9

181
Tree	if ( element != null ) { type = element . getClass () ; } else { type = getClass . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = getClass . getClass () ; }
Distance : 6

182
Tree	if ( element != null ) { type = array . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = array . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

183
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { add = SuppressWarnings . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { add = SuppressWarnings . getClass () ; }
Distance : 9

184
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = Object . add () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = Object . add () ; }
Distance : 9

185
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( T ) array . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( T ) array . getClass () ; }
Distance : 8

186
Tree	if ( element != null ) { type = array ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = array ; } else { type = Object . getClass () ; }
Distance : 10

187
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( array ) Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( array ) Object . getClass () ; }
Distance : 8

188
Tree	if ( element != null ) { type = true ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = true ; } else { type = Object . getClass () ; }
Distance : 10

189
Tree	if ( element != null ) { element = element . getClass () ; } else { type = false ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type = false ; }
Distance : 7

190
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = IllegalArgumentException ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = IllegalArgumentException ; }
Distance : 7

191
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = array ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = array ; }
Distance : 9

192
Tree	if ( element != null ) { type = element . getClass () ; } else { element = false ; }
Code	if ( element != null ) { type = element . getClass () ; } else { element = false ; }
Distance : 6

193
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { add = Object . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { add = Object . getClass () ; }
Distance : 10

194
Tree	if ( element != null ) { type = element . getClass () == type ; } else { type = T ; }
Code	if ( element != null ) { type = element . getClass () == type ; } else { type = T ; }
Distance : 8

195
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { add = Object . add () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { add = Object . add () ; }
Distance : 9

196
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = element ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = element ; }
Distance : 10

197
Tree	if ( element != null ) { type = element . getClass () ; } else { type = true ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = true ; }
Distance : 6

198
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = array ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = array ; }
Distance : 8

199
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = type ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = type ; }
Distance : 8

========================================================================


========================================================================
Example Number: 44
Parent Code is: 
return m . containsKey ( value ) ;
-------------------------------------------------------------------------------
Child code is: 
return m != null && m . containsKey ( value ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=m}) (235{val=.}) (802{val=containsKey}) (214{val=(}) (800{val=value}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (27 (27 (800{val=m}) (242{val=!=}) (500{val=null})) (249{val=&&}) (32 (800{val=m}) (235{val=.}) (802{val=containsKey}) (214{val=(}) (800{val=value}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/34/parent/src_main_java_org_apache_commons_lang3_builder_ToStringStyle.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return containsKey () . containsKey ( m ) ;
Code	return containsKey () . containsKey ( m ) ;
Distance : 6

1
Tree	return containsKey ( Map ) ;
Code	return containsKey ( Map ) ;
Distance : 7

2
Tree	return m . containsKey () . m ( value ) ;
Code	return m . containsKey () . m ( value ) ;
Distance : 5

3
Tree	return m . containsKey ( getRegistry ) - NUMBER_CONSTANT ;
Code	return m . containsKey ( getRegistry ) - NUMBER_CONSTANT ;
Distance : 7

4
Tree	return m . value ( value ) ;
Code	return m . value ( value ) ;
Distance : 5

5
Tree	return m . containsKey ( value , new Object ( value ) ) ;
Code	return m . containsKey ( value , new Object ( value ) ) ;
Distance : 8

6
Tree	return new m ( value , false ) ;
Code	return new m ( value , false ) ;
Distance : 8

7
Tree	return m . isRegistered ( value ) . containsKey ( value ) ;
Code	return m . isRegistered ( value ) . containsKey ( value ) ;
Distance : 5

8
Tree	return m . containsKey ( getRegistry , false ) ;
Code	return m . containsKey ( getRegistry , false ) ;
Distance : 7

9
Tree	return m . containsKey () . containsKey ( value ) ;
Code	return m . containsKey () . containsKey ( value ) ;
Distance : 4

10
Tree	return NUMBER_CONSTANT / m ;
Code	return NUMBER_CONSTANT / m ;
Distance : 9

11
Tree	return this . m ;
Code	return this . m ;
Distance : 9

12
Tree	return m . isRegistered ( value ) - NUMBER_CONSTANT ;
Code	return m . isRegistered ( value ) - NUMBER_CONSTANT ;
Distance : 7

13
Tree	return m . containsKey ( getRegistry ) ;
Code	return m . containsKey ( getRegistry ) ;
Distance : 5

14
Tree	return m . containsKey ( value ) ;
Code	return m . containsKey ( value ) ;
Distance : 4

15
Tree	return new value ( value , false ) ;
Code	return new value ( value , false ) ;
Distance : 9

16
Tree	return new m ( value ) ;
Code	return new m ( value ) ;
Distance : 6

17
Tree	return containsKey () . m ( value ) ;
Code	return containsKey () . m ( value ) ;
Distance : 6

18
Tree	return m . value ( value ) ;
Code	return m . value ( value ) ;
Distance : 5

19
Tree	return m . containsKey ( Map ) - NUMBER_CONSTANT ;
Code	return m . containsKey ( Map ) - NUMBER_CONSTANT ;
Distance : 7

20
Tree	return m . isRegistered () . containsKey ( value ) ;
Code	return m . isRegistered () . containsKey ( value ) ;
Distance : 4

21
Tree	return new Map ( value ) ;
Code	return new Map ( value ) ;
Distance : 7

22
Tree	return new Object ( value ) ;
Code	return new Object ( value ) ;
Distance : 7

23
Tree	return this . m . containsKey ( getRegistry ) ;
Code	return this . m . containsKey ( getRegistry ) ;
Distance : 5

24
Tree	return new containsKey ( Object ) ;
Code	return new containsKey ( Object ) ;
Distance : 7

25
Tree	return m . containsKey ( Map ) ;
Code	return m . containsKey ( Map ) ;
Distance : 5

26
Tree	return new containsKey ( m ) ;
Code	return new containsKey ( m ) ;
Distance : 7

27
Tree	return m . getRegistry ( value ) - NUMBER_CONSTANT ;
Code	return m . getRegistry ( value ) - NUMBER_CONSTANT ;
Distance : 7

28
Tree	return m . isRegistered ( value ) ;
Code	return m . isRegistered ( value ) ;
Distance : 5

29
Tree	return m . containsKey ( value , getRegistry ) ;
Code	return m . containsKey ( value , getRegistry ) ;
Distance : 6

30
Tree	return new containsKey ( value , false ) ;
Code	return new containsKey ( value , false ) ;
Distance : 8

31
Tree	return m . containsKey ( m ) ;
Code	return m . containsKey ( m ) ;
Distance : 5

32
Tree	return m . containsKey ( containsKey , false ) ;
Code	return m . containsKey ( containsKey , false ) ;
Distance : 7

33
Tree	return m . containsKey ( m , false ) ;
Code	return m . containsKey ( m , false ) ;
Distance : 7

34
Tree	return this . value ;
Code	return this . value ;
Distance : 8

35
Tree	return m . m ( STRING_CONSTANT , m ) ;
Code	return m . m ( STRING_CONSTANT , m ) ;
Distance : 7

36
Tree	return getRegistry ( value ) ;
Code	return getRegistry ( value ) ;
Distance : 7

37
Tree	return containsKey () . containsKey ( value ) ;
Code	return containsKey () . containsKey ( value ) ;
Distance : 5

38
Tree	return m . containsKey ( value , new value ( value ) ) ;
Code	return m . containsKey ( value , new value ( value ) ) ;
Distance : 8

39
Tree	return m . containsKey ( value , value ) ;
Code	return m . containsKey ( value , value ) ;
Distance : 6

40
Tree	return m . containsKey ( Object ) ;
Code	return m . containsKey ( Object ) ;
Distance : 5

41
Tree	return containsKey ( value , value , false ) ;
Code	return containsKey ( value , value , false ) ;
Distance : 9

42
Tree	return new getRegistry ( value , false ) ;
Code	return new getRegistry ( value , false ) ;
Distance : 9

43
Tree	return new Map ( value , false ) ;
Code	return new Map ( value , false ) ;
Distance : 9

44
Tree	return m . getRegistry ( value , value ) ;
Code	return m . getRegistry ( value , value ) ;
Distance : 7

45
Tree	return m . containsKey ( getRegistry ) ;
Code	return m . containsKey ( getRegistry ) ;
Distance : 5

46
Tree	return m . m ( value ) ;
Code	return m . m ( value ) ;
Distance : 5

47
Tree	return this . containsKey ;
Code	return this . containsKey ;
Distance : 8

48
Tree	return m . containsKey ( value ) . value ( value ) ;
Code	return m . containsKey ( value ) . value ( value ) ;
Distance : 6

49
Tree	return this . m . m ( value ) ;
Code	return this . m . m ( value ) ;
Distance : 5

50
Tree	return m . containsKey ( value ) ;
Code	return m . containsKey ( value ) ;
Distance : 4

51
Tree	return this . m . containsKey ( value ) ;
Code	return this . m . containsKey ( value ) ;
Distance : 4

52
Tree	return containsKey ( value , containsKey , false ) ;
Code	return containsKey ( value , containsKey , false ) ;
Distance : 8

53
Tree	return m . Map ( STRING_CONSTANT , m ) ;
Code	return m . Map ( STRING_CONSTANT , m ) ;
Distance : 8

54
Tree	return getRegistry () . containsKey ( value ) ;
Code	return getRegistry () . containsKey ( value ) ;
Distance : 5

55
Tree	return m . containsKey ( value , new value ( m ) ) ;
Code	return m . containsKey ( value , new value ( m ) ) ;
Distance : 9

56
Tree	return containsKey ( value ) ;
Code	return containsKey ( value ) ;
Distance : 6

57
Tree	return value () . containsKey ( value ) ;
Code	return value () . containsKey ( value ) ;
Distance : 5

58
Tree	return getRegistry + NUMBER_CONSTANT ;
Code	return getRegistry + NUMBER_CONSTANT ;
Distance : 10

59
Tree	return m . value ( STRING_CONSTANT , m ) ;
Code	return m . value ( STRING_CONSTANT , m ) ;
Distance : 8

60
Tree	return this . m . containsKey ( Object ) ;
Code	return this . m . containsKey ( Object ) ;
Distance : 5

61
Tree	return m . containsKey () . getRegistry ( value ) ;
Code	return m . containsKey () . getRegistry ( value ) ;
Distance : 5

62
Tree	return this . isRegistered ;
Code	return this . isRegistered ;
Distance : 9

63
Tree	return containsKey ( value , m , false ) ;
Code	return containsKey ( value , m , false ) ;
Distance : 8

64
Tree	return m . isRegistered ( value ) ;
Code	return m . isRegistered ( value ) ;
Distance : 5

65
Tree	return m . m ( value , false ) ;
Code	return m . m ( value , false ) ;
Distance : 7

66
Tree	return m . containsKey ( Map ) ;
Code	return m . containsKey ( Map ) ;
Distance : 5

67
Tree	return m . containsKey ( value . value ( value ) ) ;
Code	return m . containsKey ( value . value ( value ) ) ;
Distance : 6

68
Tree	return this . m . isRegistered ( value ) ;
Code	return this . m . isRegistered ( value ) ;
Distance : 5

69
Tree	return containsKey ( value , getRegistry , false ) ;
Code	return containsKey ( value , getRegistry , false ) ;
Distance : 9

70
Tree	return containsKey ( value , Object , false ) ;
Code	return containsKey ( value , Object , false ) ;
Distance : 9

71
Tree	return this . m . value ( value ) ;
Code	return this . m . value ( value ) ;
Distance : 5

72
Tree	return m ( value ) ;
Code	return m ( value ) ;
Distance : 6

73
Tree	return this . Map ;
Code	return this . Map ;
Distance : 9

74
Tree	return getRegistry ( value , value , false ) ;
Code	return getRegistry ( value , value , false ) ;
Distance : 9

75
Tree	return m . containsKey () . containsKey ( m ) ;
Code	return m . containsKey () . containsKey ( m ) ;
Distance : 5

76
Tree	return NUMBER_CONSTANT / isRegistered ;
Code	return NUMBER_CONSTANT / isRegistered ;
Distance : 10

77
Tree	return m . getRegistry ( STRING_CONSTANT , m ) ;
Code	return m . getRegistry ( STRING_CONSTANT , m ) ;
Distance : 8

78
Tree	return m . containsKey ( value ) . containsKey ( Object ) ;
Code	return m . containsKey ( value ) . containsKey ( Object ) ;
Distance : 6

79
Tree	return m . containsKey ( containsKey ) - NUMBER_CONSTANT ;
Code	return m . containsKey ( containsKey ) - NUMBER_CONSTANT ;
Distance : 7

80
Tree	return m . containsKey ( value , new m ( value ) ) ;
Code	return m . containsKey ( value , new m ( value ) ) ;
Distance : 8

81
Tree	return new value ( value ) ;
Code	return new value ( value ) ;
Distance : 7

82
Tree	return m . value ( value . containsKey ( value ) ) ;
Code	return m . value ( value . containsKey ( value ) ) ;
Distance : 5

83
Tree	return NUMBER_CONSTANT / getRegistry ;
Code	return NUMBER_CONSTANT / getRegistry ;
Distance : 10

84
Tree	return isRegistered ( value ) ;
Code	return isRegistered ( value ) ;
Distance : 7

85
Tree	return m . containsKey ( value . containsKey ( Object ) ) ;
Code	return m . containsKey ( value . containsKey ( Object ) ) ;
Distance : 6

86
Tree	return m . containsKey ( Object ) ;
Code	return m . containsKey ( Object ) ;
Distance : 5

87
Tree	return value ( value , value , false ) ;
Code	return value ( value , value , false ) ;
Distance : 9

88
Tree	return m . containsKey ( value , new value ( Object ) ) ;
Code	return m . containsKey ( value , new value ( Object ) ) ;
Distance : 9

89
Tree	return m + NUMBER_CONSTANT ;
Code	return m + NUMBER_CONSTANT ;
Distance : 9

90
Tree	return m . getRegistry ( value ) ;
Code	return m . getRegistry ( value ) ;
Distance : 5

91
Tree	return m . isRegistered ( STRING_CONSTANT , m ) ;
Code	return m . isRegistered ( STRING_CONSTANT , m ) ;
Distance : 8

92
Tree	return NUMBER_CONSTANT / Map ;
Code	return NUMBER_CONSTANT / Map ;
Distance : 10

93
Tree	return m . containsKey ( Object ) - NUMBER_CONSTANT ;
Code	return m . containsKey ( Object ) - NUMBER_CONSTANT ;
Distance : 7

94
Tree	return m . containsKey () . containsKey ( containsKey ) ;
Code	return m . containsKey () . containsKey ( containsKey ) ;
Distance : 5

95
Tree	return m . value ( value ) . containsKey ( value ) ;
Code	return m . value ( value ) . containsKey ( value ) ;
Distance : 5

96
Tree	return m . value ( value , new value ( value ) ) ;
Code	return m . value ( value , new value ( value ) ) ;
Distance : 8

97
Tree	return containsKey ( Object ) ;
Code	return containsKey ( Object ) ;
Distance : 7

98
Tree	return m . containsKey ( m . containsKey ( value ) ) ;
Code	return m . containsKey ( m . containsKey ( value ) ) ;
Distance : 4

99
Tree	return m . value ( value ) - NUMBER_CONSTANT ;
Code	return m . value ( value ) - NUMBER_CONSTANT ;
Distance : 7

100
Tree	return m . containsKey ( value ) . containsKey ( containsKey ) ;
Code	return m . containsKey ( value ) . containsKey ( containsKey ) ;
Distance : 6

101
Tree	return m . containsKey ( m ) . containsKey ( value ) ;
Code	return m . containsKey ( m ) . containsKey ( value ) ;
Distance : 4

102
Tree	return containsKey () . isRegistered ( value ) ;
Code	return containsKey () . isRegistered ( value ) ;
Distance : 6

103
Tree	return m . containsKey ( value , true ) ;
Code	return m . containsKey ( value , true ) ;
Distance : 6

104
Tree	return containsKey ( getRegistry ) ;
Code	return containsKey ( getRegistry ) ;
Distance : 7

105
Tree	return Map . containsKey ( STRING_CONSTANT , m ) ;
Code	return Map . containsKey ( STRING_CONSTANT , m ) ;
Distance : 8

106
Tree	return this . m ; Math
Code	return this . m ; Math
Distance : 10

107
Tree	return m . containsKey ( value , Object ) ;
Code	return m . containsKey ( value , Object ) ;
Distance : 6

108
Tree	return m . containsKey ( value . m ( value ) ) ;
Code	return m . containsKey ( value . m ( value ) ) ;
Distance : 6

109
Tree	return m . containsKey ( STRING_CONSTANT , Map ) ;
Code	return m . containsKey ( STRING_CONSTANT , Map ) ;
Distance : 7

110
Tree	return m . containsKey ( containsKey ) ;
Code	return m . containsKey ( containsKey ) ;
Distance : 5

111
Tree	return m . containsKey ( m ) ;
Code	return m . containsKey ( m ) ;
Distance : 5

112
Tree	return m . containsKey ( STRING_CONSTANT , value ) ;
Code	return m . containsKey ( STRING_CONSTANT , value ) ;
Distance : 6

113
Tree	return Map + NUMBER_CONSTANT ;
Code	return Map + NUMBER_CONSTANT ;
Distance : 10

114
Tree	return m . containsKey () . value ( value ) ;
Code	return m . containsKey () . value ( value ) ;
Distance : 5

115
Tree	return m . containsKey ( STRING_CONSTANT , m ) ;
Code	return m . containsKey ( STRING_CONSTANT , m ) ;
Distance : 7

116
Tree	return m . containsKey ( m ) - NUMBER_CONSTANT ;
Code	return m . containsKey ( m ) - NUMBER_CONSTANT ;
Distance : 7

117
Tree	return new isRegistered ( value , false ) ;
Code	return new isRegistered ( value , false ) ;
Distance : 9

118
Tree	return m . containsKey ( value . containsKey ( getRegistry ) ) ;
Code	return m . containsKey ( value . containsKey ( getRegistry ) ) ;
Distance : 6

119
Tree	return m ;
Code	return m ;
Distance : 9

120
Tree	return getRegistry ;
Code	return getRegistry ;
Distance : 10

121
Tree	return containsKey ( containsKey ) ;
Code	return containsKey ( containsKey ) ;
Distance : 7

122
Tree	return new isRegistered ( value ) ;
Code	return new isRegistered ( value ) ;
Distance : 7

123
Tree	return isRegistered ( value , value , false ) ;
Code	return isRegistered ( value , value , false ) ;
Distance : 9

124
Tree	return this . value . containsKey ( value ) ;
Code	return this . value . containsKey ( value ) ;
Distance : 5

125
Tree	return containsKey () . value ( value ) ;
Code	return containsKey () . value ( value ) ;
Distance : 6

126
Tree	return m . containsKey ( value , false ) ;
Code	return m . containsKey ( value , false ) ;
Distance : 6

127
Tree	return m . containsKey ( value , new getRegistry ( value ) ) ;
Code	return m . containsKey ( value , new getRegistry ( value ) ) ;
Distance : 8

128
Tree	return m . value () . containsKey ( value ) ;
Code	return m . value () . containsKey ( value ) ;
Distance : 4

129
Tree	return m . containsKey ( value . containsKey ( value ) ) ;
Code	return m . containsKey ( value . containsKey ( value ) ) ;
Distance : 5

130
Tree	return value ( value ) ;
Code	return value ( value ) ;
Distance : 7

131
Tree	return m . containsKey ( value . containsKey ( containsKey ) ) ;
Code	return m . containsKey ( value . containsKey ( containsKey ) ) ;
Distance : 6

132
Tree	return m . getRegistry ( value ) ;
Code	return m . getRegistry ( value ) ;
Distance : 5

133
Tree	return containsKey ( m ) ;
Code	return containsKey ( m ) ;
Distance : 7

134
Tree	return isRegistered + NUMBER_CONSTANT ;
Code	return isRegistered + NUMBER_CONSTANT ;
Distance : 10

135
Tree	return m . containsKey ( value ) . containsKey ( value ) ;
Code	return m . containsKey ( value ) . containsKey ( value ) ;
Distance : 5

136
Tree	return value + NUMBER_CONSTANT ;
Code	return value + NUMBER_CONSTANT ;
Distance : 10

137
Tree	return this . m . containsKey ( m ) ;
Code	return this . m . containsKey ( m ) ;
Distance : 5

138
Tree	return m . isRegistered ( value , new value ( value ) ) ;
Code	return m . isRegistered ( value , new value ( value ) ) ;
Distance : 8

139
Tree	return m + NUMBER_CONSTANT ; Math
Code	return m + NUMBER_CONSTANT ; Math
Distance : 10

140
Tree	return new m ( value , true ) ;
Code	return new m ( value , true ) ;
Distance : 8

141
Tree	return m . containsKey ( value , m ) ;
Code	return m . containsKey ( value , m ) ;
Distance : 6

142
Tree	return isRegistered ;
Code	return isRegistered ;
Distance : 10

143
Tree	return NUMBER_CONSTANT / value ;
Code	return NUMBER_CONSTANT / value ;
Distance : 9

144
Tree	return m . getRegistry ( value , false ) ;
Code	return m . getRegistry ( value , false ) ;
Distance : 7

145
Tree	return m . isRegistered ( value , false ) ;
Code	return m . isRegistered ( value , false ) ;
Distance : 7

146
Tree	return m . value ( value , value ) ;
Code	return m . value ( value , value ) ;
Distance : 7

147
Tree	return containsKey () . getRegistry ( value ) ;
Code	return containsKey () . getRegistry ( value ) ;
Distance : 6

148
Tree	return this . m . getRegistry ( value ) ;
Code	return this . m . getRegistry ( value ) ;
Distance : 5

149
Tree	return m . containsKey ( containsKey , value ) ;
Code	return m . containsKey ( containsKey , value ) ;
Distance : 6

150
Tree	return m . containsKey ( value ) . getRegistry ( value ) ;
Code	return m . containsKey ( value ) . getRegistry ( value ) ;
Distance : 6

151
Tree	return new Object ( value , false ) ;
Code	return new Object ( value , false ) ;
Distance : 9

152
Tree	return Map ;
Code	return Map ;
Distance : 10

153
Tree	return m . containsKey () . isRegistered ( value ) ;
Code	return m . containsKey () . isRegistered ( value ) ;
Distance : 5

154
Tree	return m ; i
Code	return m ; i
Distance : 10

155
Tree	return m () . containsKey ( value ) ;
Code	return m () . containsKey ( value ) ;
Distance : 4

156
Tree	return m . containsKey ( Object , false ) ;
Code	return m . containsKey ( Object , false ) ;
Distance : 7

157
Tree	return this . m . containsKey ( containsKey ) ;
Code	return this . m . containsKey ( containsKey ) ;
Distance : 5

158
Tree	return NUMBER_CONSTANT / m ; Math
Code	return NUMBER_CONSTANT / m ; Math
Distance : 10

159
Tree	return NUMBER_CONSTANT / Object ;
Code	return NUMBER_CONSTANT / Object ;
Distance : 10

160
Tree	return m . containsKey ( value ) . isRegistered ( value ) ;
Code	return m . containsKey ( value ) . isRegistered ( value ) ;
Distance : 6

161
Tree	return this . Object ;
Code	return this . Object ;
Distance : 9

162
Tree	return NUMBER_CONSTANT / m ; i
Code	return NUMBER_CONSTANT / m ; i
Distance : 10

163
Tree	return value ;
Code	return value ;
Distance : 9

164
Tree	return NUMBER_CONSTANT / m ; options
Code	return NUMBER_CONSTANT / m ; options
Distance : 10

165
Tree	return m . containsKey ( value , containsKey ) ;
Code	return m . containsKey ( value , containsKey ) ;
Distance : 6

166
Tree	return Object + NUMBER_CONSTANT ;
Code	return Object + NUMBER_CONSTANT ;
Distance : 10

167
Tree	return m . containsKey ( m , new value ( value ) ) ;
Code	return m . containsKey ( m , new value ( value ) ) ;
Distance : 7

168
Tree	return m . Object ( STRING_CONSTANT , m ) ;
Code	return m . Object ( STRING_CONSTANT , m ) ;
Distance : 8

169
Tree	return containsKey + NUMBER_CONSTANT ;
Code	return containsKey + NUMBER_CONSTANT ;
Distance : 9

170
Tree	return m . containsKey ( containsKey ) ;
Code	return m . containsKey ( containsKey ) ;
Distance : 5

171
Tree	return NUMBER_CONSTANT / containsKey ;
Code	return NUMBER_CONSTANT / containsKey ;
Distance : 9

172
Tree	return m + NUMBER_CONSTANT ; i
Code	return m + NUMBER_CONSTANT ; i
Distance : 10

173
Tree	return m ; options
Code	return m ; options
Distance : 10

174
Tree	return isRegistered () . containsKey ( value ) ;
Code	return isRegistered () . containsKey ( value ) ;
Distance : 5

175
Tree	return containsKey ( m , value , false ) ;
Code	return containsKey ( m , value , false ) ;
Distance : 8

176
Tree	return Object ;
Code	return Object ;
Distance : 10

177
Tree	return m + NUMBER_CONSTANT ; options
Code	return m + NUMBER_CONSTANT ; options
Distance : 10

178
Tree	return new containsKey ( value , true ) ;
Code	return new containsKey ( value , true ) ;
Distance : 8

179
Tree	return this . m ; options
Code	return this . m ; options
Distance : 10

180
Tree	return m ( value , value , false ) ;
Code	return m ( value , value , false ) ;
Distance : 8

181
Tree	return m . containsKey ( value ) - NUMBER_CONSTANT ;
Code	return m . containsKey ( value ) - NUMBER_CONSTANT ;
Distance : 6

182
Tree	return new containsKey ( m , false ) ;
Code	return new containsKey ( m , false ) ;
Distance : 8

183
Tree	return m . containsKey ( value . containsKey ( m ) ) ;
Code	return m . containsKey ( value . containsKey ( m ) ) ;
Distance : 6

184
Tree	return m . containsKey ( value ) . containsKey ( m ) ;
Code	return m . containsKey ( value ) . containsKey ( m ) ;
Distance : 6

185
Tree	return this . m ; i
Code	return this . m ; i
Distance : 10

186
Tree	return m . value ( value , false ) ;
Code	return m . value ( value , false ) ;
Distance : 7

187
Tree	return new containsKey ( value ) ;
Code	return new containsKey ( value ) ;
Distance : 6

188
Tree	return m . containsKey ( value , new containsKey ( value ) ) ;
Code	return m . containsKey ( value , new containsKey ( value ) ) ;
Distance : 7

189
Tree	return m . containsKey ( m , value ) ;
Code	return m . containsKey ( m , value ) ;
Distance : 6

190
Tree	return m . m ( value ) ;
Code	return m . m ( value ) ;
Distance : 5

191
Tree	return m . isRegistered ( value , value ) ;
Code	return m . isRegistered ( value , value ) ;
Distance : 7

192
Tree	return new getRegistry ( value ) ;
Code	return new getRegistry ( value ) ;
Distance : 7

193
Tree	return m . isRegistered ( value . containsKey ( value ) ) ;
Code	return m . isRegistered ( value . containsKey ( value ) ) ;
Distance : 5

194
Tree	return m . containsKey () . containsKey ( Object ) ;
Code	return m . containsKey () . containsKey ( Object ) ;
Distance : 5

195
Tree	return m . m ( value ) - NUMBER_CONSTANT ;
Code	return m . m ( value ) - NUMBER_CONSTANT ;
Distance : 7

196
Tree	return new m ( m ) ;
Code	return new m ( m ) ;
Distance : 7

197
Tree	return this . getRegistry ;
Code	return this . getRegistry ;
Distance : 9

198
Tree	return containsKey ;
Code	return containsKey ;
Distance : 9

199
Tree	return m ; Math
Code	return m ; Math
Distance : 10

========================================================================


========================================================================
Example Number: 45
Parent Code is: 
CharSequence cs
-------------------------------------------------------------------------------
Child code is: 
String cs
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (44 (43 (801{val=CharSequence})) (800{val=cs})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (44 (43 (801{val=String})) (800{val=cs})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/30/parent/src_main_java_org_apache_commons_lang3_StringUtils.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	cs containsAny
Code	cs containsAny
Distance : 2

1
Tree	cs . . . CharSequence
Code	cs . . . CharSequence
Distance : 5

2
Tree	toCharArray . . . cs
Code	toCharArray . . . cs
Distance : 4

3
Tree	final CharSequence [] containsAny
Code	final CharSequence [] containsAny
Distance : 4

4
Tree	final containsAny . . . cs
Code	final containsAny . . . cs
Distance : 5

5
Tree	@ CharSequence String cs
Code	@ CharSequence String cs
Distance : 2

6
Tree	final char . . . cs
Code	final char . . . cs
Distance : 5

7
Tree	abstract cs . . . cs
Code	abstract cs . . . cs
Distance : 5

8
Tree	cs < cs > cs
Code	cs < cs > cs
Distance : 4

9
Tree	final CharSequence . . . cs
Code	final CharSequence . . . cs
Distance : 5

10
Tree	CharSequence . . . cs
Code	CharSequence . . . cs
Distance : 4

11
Tree	final >= cs
Code	final >= cs
Distance : 2

12
Tree	searchChars . . . cs
Code	searchChars . . . cs
Distance : 4

13
Tree	String [] cs
Code	String [] cs
Distance : 1

14
Tree	String <> cs
Code	String <> cs
Distance : 1

15
Tree	final CharSequence cs
Code	final CharSequence cs
Distance : 2

16
Tree	byte cs
Code	byte cs
Distance : 1

17
Tree	CharSequence [] containsAny
Code	CharSequence [] containsAny
Distance : 3

18
Tree	cs < CharSequence > cs
Code	cs < CharSequence > cs
Distance : 4

19
Tree	CharSequence cs
Code	CharSequence cs
Distance : 1

20
Tree	CharSequence [] cs
Code	CharSequence [] cs
Distance : 2

21
Tree	cs cs
Code	cs cs
Distance : 1

22
Tree	cs <> cs
Code	cs <> cs
Distance : 2

23
Tree	final long . . . cs
Code	final long . . . cs
Distance : 5

24
Tree	abstract CharSequence [] cs
Code	abstract CharSequence [] cs
Distance : 3

25
Tree	final byte . . . cs
Code	final byte . . . cs
Distance : 5

26
Tree	char cs
Code	char cs
Distance : 1

27
Tree	toCharArray cs
Code	toCharArray cs
Distance : 1

28
Tree	cs . . . cs
Code	cs . . . cs
Distance : 4

29
Tree	final float . . . cs
Code	final float . . . cs
Distance : 5

30
Tree	final String < cs > cs
Code	final String < cs > cs
Distance : 4

31
Tree	final CHAR_CONS cs
Code	final CHAR_CONS cs
Distance : 2

32
Tree	CharSequence . . . toCharArray
Code	CharSequence . . . toCharArray
Distance : 5

33
Tree	cs < toCharArray > cs
Code	cs < toCharArray > cs
Distance : 4

34
Tree	containsAny cs
Code	containsAny cs
Distance : 1

35
Tree	cs cs
Code	cs cs
Distance : 1

36
Tree	final CharSequence [] toCharArray
Code	final CharSequence [] toCharArray
Distance : 4

37
Tree	final char cs
Code	final char cs
Distance : 2

38
Tree	final char cs
Code	final char cs
Distance : 2

39
Tree	CharSequence searchChars
Code	CharSequence searchChars
Distance : 2

40
Tree	rows
Code	rows
Distance : 2

41
Tree	final
Code	final
Distance : 2

42
Tree	cs . . . cs
Code	cs . . . cs
Distance : 4

43
Tree	long cs
Code	long cs
Distance : 1

44
Tree	final CharSequence . . . searchChars
Code	final CharSequence . . . searchChars
Distance : 6

45
Tree	char . . . cs
Code	char . . . cs
Distance : 4

46
Tree	boolean cs
Code	boolean cs
Distance : 1

47
Tree	final CharSequence [] cs
Code	final CharSequence [] cs
Distance : 3

48
Tree	CharSequence cs
Code	CharSequence cs
Distance : 1

49
Tree	containsAny cs
Code	containsAny cs
Distance : 1

50
Tree	final CharSequence cs
Code	final CharSequence cs
Distance : 2

51
Tree	final long cs
Code	final long cs
Distance : 2

52
Tree	toCharArray cs
Code	toCharArray cs
Distance : 1

53
Tree	final cs [] cs
Code	final cs [] cs
Distance : 3

54
Tree	final CharSequence < searchChars > cs
Code	final CharSequence < searchChars > cs
Distance : 5

55
Tree	short cs
Code	short cs
Distance : 1

56
Tree	searchChars cs
Code	searchChars cs
Distance : 1

57
Tree	double cs
Code	double cs
Distance : 1

58
Tree	cs < CharSequence , cs > cs
Code	cs < CharSequence , cs > cs
Distance : 6

59
Tree	abstract CharSequence cs
Code	abstract CharSequence cs
Distance : 2

60
Tree	CharSequence . . . containsAny
Code	CharSequence . . . containsAny
Distance : 5

61
Tree	final += cs
Code	final += cs
Distance : 2

62
Tree	CharSequence <> CharSequence
Code	CharSequence <> CharSequence
Distance : 3

63
Tree	final char . . . searchChars
Code	final char . . . searchChars
Distance : 6

64
Tree	CharSequence <> toCharArray
Code	CharSequence <> toCharArray
Distance : 3

65
Tree	@ CharSequence searchChars cs
Code	@ CharSequence searchChars cs
Distance : 3

66
Tree	String cs
Code	String cs
Distance : 0

67
Tree	cs
Code	cs
Distance : 1

68
Tree	final boolean . . . cs
Code	final boolean . . . cs
Distance : 5

69
Tree	final char searchChars
Code	final char searchChars
Distance : 3

70
Tree	final String [] cs
Code	final String [] cs
Distance : 2

71
Tree	assertContains
Code	assertContains
Distance : 2

72
Tree	final double cs
Code	final double cs
Distance : 2

73
Tree	final CharSequence . . . CharSequence
Code	final CharSequence . . . CharSequence
Distance : 6

74
Tree	final short cs
Code	final short cs
Distance : 2

75
Tree	final byte cs
Code	final byte cs
Distance : 2

76
Tree	byte
Code	byte
Distance : 2

77
Tree	final CharSequence < cs > cs
Code	final CharSequence < cs > cs
Distance : 5

78
Tree	final byte cs
Code	final byte cs
Distance : 2

79
Tree	toCharArray cs
Code	toCharArray cs
Distance : 1

80
Tree	cs < cs , CharSequence > cs
Code	cs < cs , CharSequence > cs
Distance : 6

81
Tree	cs < searchChars > cs
Code	cs < searchChars > cs
Distance : 4

82
Tree	final CharSequence . . . toCharArray
Code	final CharSequence . . . toCharArray
Distance : 6

83
Tree	final CharSequence [] searchChars
Code	final CharSequence [] searchChars
Distance : 4

84
Tree	final CharSequence < toCharArray > cs
Code	final CharSequence < toCharArray > cs
Distance : 5

85
Tree	cs < cs , searchChars > cs
Code	cs < cs , searchChars > cs
Distance : 6

86
Tree	searchChars cs
Code	searchChars cs
Distance : 1

87
Tree	byte . . . cs
Code	byte . . . cs
Distance : 4

88
Tree	containsAny cs
Code	containsAny cs
Distance : 1

89
Tree	toCharArray [] cs
Code	toCharArray [] cs
Distance : 2

90
Tree	final searchChars cs
Code	final searchChars cs
Distance : 2

91
Tree	searchChars . . . cs
Code	searchChars . . . cs
Distance : 4

92
Tree	CharSequence . . . searchChars
Code	CharSequence . . . searchChars
Distance : 5

93
Tree	toCharArray <> cs
Code	toCharArray <> cs
Distance : 2

94
Tree	String . . . cs
Code	String . . . cs
Distance : 3

95
Tree	final CharSequence [] CharSequence
Code	final CharSequence [] CharSequence
Distance : 4

96
Tree	CharSequence cs
Code	CharSequence cs
Distance : 1

97
Tree	final containsAny cs
Code	final containsAny cs
Distance : 2

98
Tree	containsAny <> cs
Code	containsAny <> cs
Distance : 2

99
Tree	cs < String > cs
Code	cs < String > cs
Distance : 3

100
Tree	@ CharSequence cs cs
Code	@ CharSequence cs cs
Distance : 3

101
Tree	CharSequence <> cs
Code	CharSequence <> cs
Distance : 2

102
Tree	double . . . cs
Code	double . . . cs
Distance : 4

103
Tree	cs [] cs
Code	cs [] cs
Distance : 2

104
Tree	cs . . . searchChars
Code	cs . . . searchChars
Distance : 5

105
Tree	final CharSequence . . . containsAny
Code	final CharSequence . . . containsAny
Distance : 6

106
Tree	int cs
Code	int cs
Distance : 1

107
Tree	cs . . . containsAny
Code	cs . . . containsAny
Distance : 5

108
Tree	final float cs
Code	final float cs
Distance : 2

109
Tree	final searchChars . . . cs
Code	final searchChars . . . cs
Distance : 5

110
Tree	CharSequence <> searchChars
Code	CharSequence <> searchChars
Distance : 3

111
Tree	final String . . . cs
Code	final String . . . cs
Distance : 4

112
Tree	cs searchChars
Code	cs searchChars
Distance : 2

113
Tree	searchChars [] cs
Code	searchChars [] cs
Distance : 2

114
Tree	printStackTrace
Code	printStackTrace
Distance : 2

115
Tree	cs < containsAny > cs
Code	cs < containsAny > cs
Distance : 4

116
Tree	final char CharSequence
Code	final char CharSequence
Distance : 3

117
Tree	append
Code	append
Distance : 2

118
Tree	searchChars <> cs
Code	searchChars <> cs
Distance : 2

119
Tree	int . . . cs
Code	int . . . cs
Distance : 4

120
Tree	final searchChars < cs > cs
Code	final searchChars < cs > cs
Distance : 5

121
Tree	final containsAny [] cs
Code	final containsAny [] cs
Distance : 3

122
Tree	final cs . . . cs
Code	final cs . . . cs
Distance : 5

123
Tree	cs < toCharArray , cs > cs
Code	cs < toCharArray , cs > cs
Distance : 6

124
Tree	cs < String , cs > cs
Code	cs < String , cs > cs
Distance : 5

125
Tree	cs <> searchChars
Code	cs <> searchChars
Distance : 3

126
Tree	CharSequence [] toCharArray
Code	CharSequence [] toCharArray
Distance : 3

127
Tree	cs < cs > searchChars
Code	cs < cs > searchChars
Distance : 4

128
Tree	final CharSequence searchChars
Code	final CharSequence searchChars
Distance : 3

129
Tree	void cs
Code	void cs
Distance : 1

130
Tree	final boolean cs
Code	final boolean cs
Distance : 2

131
Tree	char searchChars
Code	char searchChars
Distance : 2

132
Tree	final String < String > cs
Code	final String < String > cs
Distance : 4

133
Tree	final toCharArray cs
Code	final toCharArray cs
Distance : 2

134
Tree	CharSequence searchChars
Code	CharSequence searchChars
Distance : 2

135
Tree	String cs
Code	String cs
Distance : 0

136
Tree	cs searchChars
Code	cs searchChars
Distance : 2

137
Tree	cs containsAny
Code	cs containsAny
Distance : 2

138
Tree	cs toCharArray
Code	cs toCharArray
Distance : 2

139
Tree	final boolean cs
Code	final boolean cs
Distance : 2

140
Tree	cs < CharSequence , searchChars > cs
Code	cs < CharSequence , searchChars > cs
Distance : 6

141
Tree	long . . . cs
Code	long . . . cs
Distance : 4

142
Tree	final int cs
Code	final int cs
Distance : 2

143
Tree	final short . . . cs
Code	final short . . . cs
Distance : 5

144
Tree	@ cs CharSequence cs
Code	@ cs CharSequence cs
Distance : 3

145
Tree	final searchChars [] cs
Code	final searchChars [] cs
Distance : 3

146
Tree	CharSequence . . . cs
Code	CharSequence . . . cs
Distance : 4

147
Tree	final CharSequence < String > cs
Code	final CharSequence < String > cs
Distance : 4

148
Tree	@ String CharSequence cs
Code	@ String CharSequence cs
Distance : 2

149
Tree	final String cs
Code	final String cs
Distance : 1

150
Tree	final int . . . cs
Code	final int . . . cs
Distance : 5

151
Tree	int . . . searchChars
Code	int . . . searchChars
Distance : 5

152
Tree	cs < searchChars , cs > cs
Code	cs < searchChars , cs > cs
Distance : 6

153
Tree	boolean . . . cs
Code	boolean . . . cs
Distance : 4

154
Tree	final cs cs
Code	final cs cs
Distance : 2

155
Tree	cs . . . toCharArray
Code	cs . . . toCharArray
Distance : 5

156
Tree	@ searchChars CharSequence cs
Code	@ searchChars CharSequence cs
Distance : 3

157
Tree	cs [] searchChars
Code	cs [] searchChars
Distance : 3

158
Tree	float . . . cs
Code	float . . . cs
Distance : 4

159
Tree	sb
Code	sb
Distance : 2

160
Tree	CharSequence [] searchChars
Code	CharSequence [] searchChars
Distance : 3

161
Tree	final CharSequence toCharArray
Code	final CharSequence toCharArray
Distance : 3

162
Tree	@ String cs cs
Code	@ String cs cs
Distance : 2

163
Tree	final long cs
Code	final long cs
Distance : 2

164
Tree	void . . . cs
Code	void . . . cs
Distance : 4

165
Tree	char . . . searchChars
Code	char . . . searchChars
Distance : 5

166
Tree	cs . . . String
Code	cs . . . String
Distance : 5

167
Tree	final final CharSequence
Code	final final CharSequence
Distance : 3

168
Tree	@ CharSequence CharSequence cs
Code	@ CharSequence CharSequence cs
Distance : 3

169
Tree	CharSequence toCharArray
Code	CharSequence toCharArray
Distance : 2

170
Tree	String cs
Code	String cs
Distance : 0

171
Tree	containsAny [] cs
Code	containsAny [] cs
Distance : 2

172
Tree	cs searchChars
Code	cs searchChars
Distance : 2

173
Tree	final CharSequence < cs > searchChars
Code	final CharSequence < cs > searchChars
Distance : 5

174
Tree	cs < cs , toCharArray > cs
Code	cs < cs , toCharArray > cs
Distance : 6

175
Tree	CharSequence CharSequence
Code	CharSequence CharSequence
Distance : 2

176
Tree	cs < cs , cs > cs
Code	cs < cs , cs > cs
Distance : 6

177
Tree	searchChars cs
Code	searchChars cs
Distance : 1

178
Tree	cs < cs > toCharArray
Code	cs < cs > toCharArray
Distance : 4

179
Tree	final CharSequence < CharSequence > cs
Code	final CharSequence < CharSequence > cs
Distance : 5

180
Tree	final int . . . searchChars
Code	final int . . . searchChars
Distance : 6

181
Tree	indexOf
Code	indexOf
Distance : 2

182
Tree	cs cs
Code	cs cs
Distance : 1

183
Tree	float cs
Code	float cs
Distance : 1

184
Tree	final CharSequence CharSequence
Code	final CharSequence CharSequence
Distance : 3

185
Tree	containsAny . . . cs
Code	containsAny . . . cs
Distance : 4

186
Tree	CharSequence < cs > cs
Code	CharSequence < cs > cs
Distance : 4

187
Tree	final int cs
Code	final int cs
Distance : 2

188
Tree	cs CharSequence
Code	cs CharSequence
Distance : 2

189
Tree	cs . . . searchChars
Code	cs . . . searchChars
Distance : 5

190
Tree	columns
Code	columns
Distance : 2

191
Tree	toCharArray . . . cs
Code	toCharArray . . . cs
Distance : 4

192
Tree	cs < CharSequence , CharSequence > cs
Code	cs < CharSequence , CharSequence > cs
Distance : 6

193
Tree	final double . . . cs
Code	final double . . . cs
Distance : 5

194
Tree	final cs < cs > cs
Code	final cs < cs > cs
Distance : 5

195
Tree	cs < CharSequence > searchChars
Code	cs < CharSequence > searchChars
Distance : 5

196
Tree	containsAny . . . cs
Code	containsAny . . . cs
Distance : 4

197
Tree	@ CharSequence toCharArray cs
Code	@ CharSequence toCharArray cs
Distance : 3

198
Tree	@ CharSequence CharSequence searchChars
Code	@ CharSequence CharSequence searchChars
Distance : 4

199
Tree	cs toCharArray
Code	cs toCharArray
Distance : 2

========================================================================


========================================================================
Example Number: 46
Parent Code is: 
Calendar c = new GregorianCalendar ( mTimeZone ) ;
-------------------------------------------------------------------------------
Child code is: 
Calendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Calendar})) (59 (800{val=c}) (204{val==}) (14 (304{val=new}) (43 (801{val=GregorianCalendar})) (214{val=(}) (800{val=mTimeZone}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Calendar})) (59 (800{val=c}) (204{val==}) (14 (304{val=new}) (43 (801{val=GregorianCalendar})) (214{val=(}) (800{val=mTimeZone}) (234{val=,}) (800{val=mLocale}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/26/parent/src_main_java_org_apache_commons_lang3_time_FastDateFormat.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	GregorianCalendar c = new Calendar ( mTimeZone , false ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone , false ) ;
Distance : 3

1
Tree	Calendar c = new Calendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new Calendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 6

2
Tree	GregorianCalendar [] c = new GregorianCalendar ( mTimeZone ) ;
Code	GregorianCalendar [] c = new GregorianCalendar ( mTimeZone ) ;
Distance : 4

3
Tree	date c = new GregorianCalendar ( mTimeZone , false ) ;
Code	date c = new GregorianCalendar ( mTimeZone , false ) ;
Distance : 2

4
Tree	Calendar c = new GregorianCalendar ( mTimeZone , GregorianCalendar ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , GregorianCalendar ) ;
Distance : 1

5
Tree	Calendar [] c = new Calendar ( mTimeZone ) ;
Code	Calendar [] c = new Calendar ( mTimeZone ) ;
Distance : 4

6
Tree	final GregorianCalendar c = new Calendar ( mTimeZone ) ;
Code	final GregorianCalendar c = new Calendar ( mTimeZone ) ;
Distance : 5

7
Tree	Calendar c = new Calendar ( mTimeZone , mLocale ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale ) ;
Distance : 1

8
Tree	final Calendar c = new Calendar ( mTimeZone ) ;
Code	final Calendar c = new Calendar ( mTimeZone ) ;
Distance : 4

9
Tree	Calendar c = new Calendar ( mTimeZone , false ) ;
Code	Calendar c = new Calendar ( mTimeZone , false ) ;
Distance : 2

10
Tree	date c = new GregorianCalendar ( mTimeZone ) ;
Code	date c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

11
Tree	Calendar c = new date ( mTimeZone ) ;
Code	Calendar c = new date ( mTimeZone ) ;
Distance : 3

12
Tree	Calendar [] c = new GregorianCalendar ( mTimeZone ) ;
Code	Calendar [] c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

13
Tree	Calendar [] c = new GregorianCalendar ( mLocale ) ;
Code	Calendar [] c = new GregorianCalendar ( mLocale ) ;
Distance : 3

14
Tree	GregorianCalendar c = new Calendar () ;
Code	GregorianCalendar c = new Calendar () ;
Distance : 7

15
Tree	GregorianCalendar c ;
Code	GregorianCalendar c ;
Distance : 9

16
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 6

17
Tree	Calendar c = new date ( mTimeZone , false ) ;
Code	Calendar c = new date ( mTimeZone , false ) ;
Distance : 2

18
Tree	date c = new GregorianCalendar () ;
Code	date c = new GregorianCalendar () ;
Distance : 6

19
Tree	setTime c = new GregorianCalendar ( mTimeZone ) ;
Code	setTime c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

20
Tree	Calendar c = new date ( mTimeZone ) . toString () ;
Code	Calendar c = new date ( mTimeZone ) . toString () ;
Distance : 5

21
Tree	final date c = new GregorianCalendar ( mTimeZone ) ;
Code	final date c = new GregorianCalendar ( mTimeZone ) ;
Distance : 4

22
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
Distance : 0

23
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone ) . toString () ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone ) . toString () ;
Distance : 5

24
Tree	Calendar c = new date () ;
Code	Calendar c = new date () ;
Distance : 6

25
Tree	setTime c = new GregorianCalendar ( mTimeZone , false ) ;
Code	setTime c = new GregorianCalendar ( mTimeZone , false ) ;
Distance : 2

26
Tree	final GregorianCalendar c = new GregorianCalendar ( mTimeZone ) ;
Code	final GregorianCalendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 4

27
Tree	Calendar c = new Calendar ( mTimeZone , GregorianCalendar ) ;
Code	Calendar c = new Calendar ( mTimeZone , GregorianCalendar ) ;
Distance : 2

28
Tree	Calendar c = NUMBER_CONSTANT ;
Code	Calendar c = NUMBER_CONSTANT ;
Distance : 7

29
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new Date [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new Date [ NUMBER_CONSTANT ] ) ;
Distance : 5

30
Tree	setTime c = NUMBER_CONSTANT ;
Code	setTime c = NUMBER_CONSTANT ;
Distance : 8

31
Tree	Calendar c = new Calendar ( mTimeZone , Calendar ) ;
Code	Calendar c = new Calendar ( mTimeZone , Calendar ) ;
Distance : 2

32
Tree	Calendar c = new date ( mTimeZone , NUMBER_CONSTANT ) ;
Code	Calendar c = new date ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 2

33
Tree	setTime c = new GregorianCalendar ( mTimeZone ) . toString () ;
Code	setTime c = new GregorianCalendar ( mTimeZone ) . toString () ;
Distance : 5

34
Tree	GregorianCalendar c = new GregorianCalendar () ;
Code	GregorianCalendar c = new GregorianCalendar () ;
Distance : 6

35
Tree	setTime c = new GregorianCalendar ( mTimeZone , NUMBER_CONSTANT ) ;
Code	setTime c = new GregorianCalendar ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 2

36
Tree	setTime c = new GregorianCalendar () ;
Code	setTime c = new GregorianCalendar () ;
Distance : 6

37
Tree	final Calendar c = new GregorianCalendar ( mTimeZone ) ;
Code	final Calendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

38
Tree	GregorianCalendar c = NUMBER_CONSTANT ;
Code	GregorianCalendar c = NUMBER_CONSTANT ;
Distance : 8

39
Tree	GregorianCalendar c = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	GregorianCalendar c = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

40
Tree	GregorianCalendar c = Calendar . toString ( mTimeZone ) ;
Code	GregorianCalendar c = Calendar . toString ( mTimeZone ) ;
Distance : 6

41
Tree	Calendar c = new Calendar ( mLocale ) ;
Code	Calendar c = new Calendar ( mLocale ) ;
Distance : 3

42
Tree	final setTime c = new GregorianCalendar ( mTimeZone ) ;
Code	final setTime c = new GregorianCalendar ( mTimeZone ) ;
Distance : 4

43
Tree	Calendar c = new GregorianCalendar ( mLocale , false ) ;
Code	Calendar c = new GregorianCalendar ( mLocale , false ) ;
Distance : 2

44
Tree	toString [] c = new GregorianCalendar ( mTimeZone ) ;
Code	toString [] c = new GregorianCalendar ( mTimeZone ) ;
Distance : 4

45
Tree	date c = new GregorianCalendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	date c = new GregorianCalendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 6

46
Tree	Calendar c = new GregorianCalendar ( mLocale , NUMBER_CONSTANT ) ;
Code	Calendar c = new GregorianCalendar ( mLocale , NUMBER_CONSTANT ) ;
Distance : 2

47
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone , GregorianCalendar ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone , GregorianCalendar ) ;
Distance : 2

48
Tree	Calendar c = new GregorianCalendar ( mTimeZone , GregorianCalendar ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , GregorianCalendar ) ;
Distance : 1

49
Tree	setTime c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	setTime c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

50
Tree	Calendar c = new date ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new date ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 6

51
Tree	String c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	String c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

52
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
Distance : 1

53
Tree	setTime [] c = new GregorianCalendar ( mTimeZone ) ;
Code	setTime [] c = new GregorianCalendar ( mTimeZone ) ;
Distance : 4

54
Tree	setTime c = new GregorianCalendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	setTime c = new GregorianCalendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 6

55
Tree	Calendar c = new GregorianCalendar ( mTimeZone , NUMBER_CONSTANT ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 1

56
Tree	Calendar c = new GregorianCalendar ( mTimeZone . mLocale ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone . mLocale ( STRING_CONSTANT ) ) ;
Distance : 4

57
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 2

58
Tree	Calendar c = new Calendar ( mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone ) ;
Distance : 3

59
Tree	Calendar c = new GregorianCalendar () ;
Code	Calendar c = new GregorianCalendar () ;
Distance : 5

60
Tree	Calendar [] c = new date ( mTimeZone ) ;
Code	Calendar [] c = new date ( mTimeZone ) ;
Distance : 4

61
Tree	GregorianCalendar c = new Calendar ( mTimeZone , NUMBER_CONSTANT ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 3

62
Tree	GregorianCalendar c = new Calendar ( mTimeZone , mLocale ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone , mLocale ) ;
Distance : 2

63
Tree	toString c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	toString c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

64
Tree	String c = NUMBER_CONSTANT ;
Code	String c = NUMBER_CONSTANT ;
Distance : 8

65
Tree	toString c = NUMBER_CONSTANT ;
Code	toString c = NUMBER_CONSTANT ;
Distance : 8

66
Tree	Calendar c = new GregorianCalendar ( mTimeZone , applyRules ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , applyRules ) ;
Distance : 1

67
Tree	c c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	c c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

68
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone , NUMBER_CONSTANT ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 2

69
Tree	Calendar c = new Calendar ( mTimeZone ) . toString () ;
Code	Calendar c = new Calendar ( mTimeZone ) . toString () ;
Distance : 5

70
Tree	Calendar c = new GregorianCalendar ( mTimeZone . toString ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone . toString ( STRING_CONSTANT ) ) ;
Distance : 5

71
Tree	Calendar c = new GregorianCalendar ( date , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( date , mLocale ) ;
Distance : 1

72
Tree	String c = new GregorianCalendar ( mTimeZone ) ;
Code	String c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

73
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone , false ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone , false ) ;
Distance : 2

74
Tree	Calendar c = new GregorianCalendar ( mLocale , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( mLocale , mLocale ) ;
Distance : 1

75
Tree	Calendar c = toString () ;
Code	Calendar c = toString () ;
Distance : 7

76
Tree	Calendar c = new Calendar ( mTimeZone ) . Calendar () ;
Code	Calendar c = new Calendar ( mTimeZone ) . Calendar () ;
Distance : 5

77
Tree	Calendar [] c = new Date ( mTimeZone ) ;
Code	Calendar [] c = new Date ( mTimeZone ) ;
Distance : 4

78
Tree	Calendar c = Calendar . setTime ( mTimeZone ) ;
Code	Calendar c = Calendar . setTime ( mTimeZone ) ;
Distance : 5

79
Tree	Calendar c = new Calendar ( mTimeZone , mLocale ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale ) ;
Distance : 1

80
Tree	Calendar c = GregorianCalendar () ;
Code	Calendar c = GregorianCalendar () ;
Distance : 6

81
Tree	date c ;
Code	date c ;
Distance : 9

82
Tree	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 2

83
Tree	date c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	date c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

84
Tree	String c ;
Code	String c ;
Distance : 9

85
Tree	Calendar c = new GregorianCalendar ( date , mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( date , mTimeZone ) ;
Distance : 2

86
Tree	Calendar c = new GregorianCalendar ( mLocale ) . toString () ;
Code	Calendar c = new GregorianCalendar ( mLocale ) . toString () ;
Distance : 5

87
Tree	Calendar c = Calendar . GregorianCalendar ( mTimeZone ) ;
Code	Calendar c = Calendar . GregorianCalendar ( mTimeZone ) ;
Distance : 4

88
Tree	Calendar c = Calendar . date ( mTimeZone ) ;
Code	Calendar c = Calendar . date ( mTimeZone ) ;
Distance : 5

89
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

90
Tree	Calendar c = new GregorianCalendar ( mTimeZone , false ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , false ) ;
Distance : 1

91
Tree	Calendar c = Calendar . toString ( mTimeZone , mLocale ) ;
Code	Calendar c = Calendar . toString ( mTimeZone , mLocale ) ;
Distance : 3

92
Tree	GregorianCalendar c = applyRules () ;
Code	GregorianCalendar c = applyRules () ;
Distance : 8

93
Tree	Calendar c = new Calendar ( mTimeZone . toString ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone . toString ( STRING_CONSTANT ) ) ;
Distance : 6

94
Tree	final String c = new GregorianCalendar ( mTimeZone ) ;
Code	final String c = new GregorianCalendar ( mTimeZone ) ;
Distance : 4

95
Tree	Calendar c = new Calendar () ;
Code	Calendar c = new Calendar () ;
Distance : 6

96
Tree	applyRules c ;
Code	applyRules c ;
Distance : 9

97
Tree	setTime c = new GregorianCalendar ( mTimeZone . toString ( STRING_CONSTANT ) ) ;
Code	setTime c = new GregorianCalendar ( mTimeZone . toString ( STRING_CONSTANT ) ) ;
Distance : 6

98
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
Distance : 0

99
Tree	c c = NUMBER_CONSTANT ;
Code	c c = NUMBER_CONSTANT ;
Distance : 8

100
Tree	String c = new GregorianCalendar ( mTimeZone , NUMBER_CONSTANT ) ;
Code	String c = new GregorianCalendar ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 2

101
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ StringBuffer ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ StringBuffer ] ) ;
Distance : 5

102
Tree	setTime c = Calendar . toString ( mTimeZone ) ;
Code	setTime c = Calendar . toString ( mTimeZone ) ;
Distance : 6

103
Tree	Calendar c = new GregorianCalendar ( mLocale , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new GregorianCalendar ( mLocale , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 6

104
Tree	Calendar c ;
Code	Calendar c ;
Distance : 8

105
Tree	Calendar c = new GregorianCalendar ( mTimeZone , Calendar ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , Calendar ) ;
Distance : 1

106
Tree	GregorianCalendar c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	GregorianCalendar c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

107
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone . toString ( STRING_CONSTANT ) ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone . toString ( STRING_CONSTANT ) ) ;
Distance : 6

108
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 5

109
Tree	toString c ;
Code	toString c ;
Distance : 9

110
Tree	Calendar c = new GregorianCalendar ( mTimeZone , date ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , date ) ;
Distance : 1

111
Tree	date c = Calendar . toString ( mTimeZone ) ;
Code	date c = Calendar . toString ( mTimeZone ) ;
Distance : 6

112
Tree	Calendar c = new Calendar ( mLocale , NUMBER_CONSTANT ) ;
Code	Calendar c = new Calendar ( mLocale , NUMBER_CONSTANT ) ;
Distance : 3

113
Tree	Calendar c = Calendar . toString ( mTimeZone ) ;
Code	Calendar c = Calendar . toString ( mTimeZone ) ;
Distance : 5

114
Tree	Calendar c = new Calendar ( mTimeZone , mLocale . mLocale ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale . mLocale ( STRING_CONSTANT ) ) ;
Distance : 6

115
Tree	final Calendar c = new GregorianCalendar ( mLocale ) ;
Code	final Calendar c = new GregorianCalendar ( mLocale ) ;
Distance : 3

116
Tree	date [] c = new GregorianCalendar ( mTimeZone ) ;
Code	date [] c = new GregorianCalendar ( mTimeZone ) ;
Distance : 4

117
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
Distance : 1

118
Tree	GregorianCalendar c = new Calendar ( mTimeZone ) . toString () ;
Code	GregorianCalendar c = new Calendar ( mTimeZone ) . toString () ;
Distance : 6

119
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . Calendar () ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . Calendar () ;
Distance : 4

120
Tree	Calendar c = new Calendar ( mLocale , false ) ;
Code	Calendar c = new Calendar ( mLocale , false ) ;
Distance : 3

121
Tree	Calendar c = new Calendar ( GregorianCalendar , mLocale ) ;
Code	Calendar c = new Calendar ( GregorianCalendar , mLocale ) ;
Distance : 2

122
Tree	Calendar c = Calendar . applyRules ( mTimeZone , mLocale ) ;
Code	Calendar c = Calendar . applyRules ( mTimeZone , mLocale ) ;
Distance : 3

123
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mMaxLengthEstimate ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mMaxLengthEstimate ) ;
Distance : 1

124
Tree	GregorianCalendar c = toString () ;
Code	GregorianCalendar c = toString () ;
Distance : 8

125
Tree	GregorianCalendar c = new Calendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 7

126
Tree	Calendar c = new Calendar ( mTimeZone , new int [ applyRules ] ) ;
Code	Calendar c = new Calendar ( mTimeZone , new int [ applyRules ] ) ;
Distance : 6

127
Tree	Calendar c = Calendar . setTime ( mTimeZone , mLocale ) ;
Code	Calendar c = Calendar . setTime ( mTimeZone , mLocale ) ;
Distance : 3

128
Tree	final GregorianCalendar c = new date ( mTimeZone ) ;
Code	final GregorianCalendar c = new date ( mTimeZone ) ;
Distance : 5

129
Tree	setTime c ;
Code	setTime c ;
Distance : 9

130
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ format ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ format ] ) ;
Distance : 5

131
Tree	Calendar c = Calendar () ;
Code	Calendar c = Calendar () ;
Distance : 7

132
Tree	Calendar c = new GregorianCalendar ( mLocale , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( mLocale , mLocale ) ;
Distance : 1

133
Tree	date c = NUMBER_CONSTANT ;
Code	date c = NUMBER_CONSTANT ;
Distance : 8

134
Tree	Calendar c = Calendar . toString ( mTimeZone , Calendar ) ;
Code	Calendar c = Calendar . toString ( mTimeZone , Calendar ) ;
Distance : 4

135
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . toString ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . toString ( STRING_CONSTANT ) ) ;
Distance : 5

136
Tree	Calendar c = GregorianCalendar . toString ( mTimeZone ) ;
Code	Calendar c = GregorianCalendar . toString ( mTimeZone ) ;
Distance : 5

137
Tree	Calendar c = new Calendar ( mTimeZone , new int [ GregorianCalendar ] ) ;
Code	Calendar c = new Calendar ( mTimeZone , new int [ GregorianCalendar ] ) ;
Distance : 6

138
Tree	Calendar c = new GregorianCalendar ( GregorianCalendar , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( GregorianCalendar , mLocale ) ;
Distance : 1

139
Tree	Calendar c = applyRules () ;
Code	Calendar c = applyRules () ;
Distance : 7

140
Tree	Calendar c = new Calendar ( mTimeZone . mLocale ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone . mLocale ( STRING_CONSTANT ) ) ;
Distance : 5

141
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . mLocale ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . mLocale ( STRING_CONSTANT ) ) ;
Distance : 5

142
Tree	applyRules c = NUMBER_CONSTANT ;
Code	applyRules c = NUMBER_CONSTANT ;
Distance : 8

143
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ mLocale ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ mLocale ] ) ;
Distance : 4

144
Tree	Calendar c = new Calendar ( GregorianCalendar , mTimeZone ) ;
Code	Calendar c = new Calendar ( GregorianCalendar , mTimeZone ) ;
Distance : 3

145
Tree	Calendar c = Calendar . mTimeZone ( mTimeZone ) ;
Code	Calendar c = Calendar . mTimeZone ( mTimeZone ) ;
Distance : 5

146
Tree	Calendar c = new GregorianCalendar ( mLocale ) ;
Code	Calendar c = new GregorianCalendar ( mLocale ) ;
Distance : 2

147
Tree	Calendar c = new Calendar ( mTimeZone , new Date [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new Calendar ( mTimeZone , new Date [ NUMBER_CONSTANT ] ) ;
Distance : 6

148
Tree	Calendar c = new Calendar ( mTimeZone , date ) ;
Code	Calendar c = new Calendar ( mTimeZone , date ) ;
Distance : 2

149
Tree	String c = new GregorianCalendar () ;
Code	String c = new GregorianCalendar () ;
Distance : 6

150
Tree	Calendar c = new Calendar ( mTimeZone , NUMBER_CONSTANT ) ;
Code	Calendar c = new Calendar ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 2

151
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mTimeZone ) ;
Distance : 1

152
Tree	mLocale c ;
Code	mLocale c ;
Distance : 9

153
Tree	date c = Calendar . toString ( mTimeZone , mLocale ) ;
Code	date c = Calendar . toString ( mTimeZone , mLocale ) ;
Distance : 4

154
Tree	String c = new GregorianCalendar ( mTimeZone , false ) ;
Code	String c = new GregorianCalendar ( mTimeZone , false ) ;
Distance : 2

155
Tree	String [] c = new GregorianCalendar ( mTimeZone ) ;
Code	String [] c = new GregorianCalendar ( mTimeZone ) ;
Distance : 4

156
Tree	Calendar c = new GregorianCalendar ( applyRules , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( applyRules , mLocale ) ;
Distance : 1

157
Tree	date c = new GregorianCalendar ( mTimeZone ) . toString () ;
Code	date c = new GregorianCalendar ( mTimeZone ) . toString () ;
Distance : 5

158
Tree	c c ;
Code	c c ;
Distance : 9

159
Tree	Calendar c = new GregorianCalendar ( applyRules , mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( applyRules , mTimeZone ) ;
Distance : 2

160
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ GregorianCalendar ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ GregorianCalendar ] ) ;
Distance : 5

161
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ applyRules ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ applyRules ] ) ;
Distance : 5

162
Tree	Calendar c = new GregorianCalendar ( mLocale . toString ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mLocale . toString ( STRING_CONSTANT ) ) ;
Distance : 6

163
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ mMaxLengthEstimate ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ mMaxLengthEstimate ] ) ;
Distance : 5

164
Tree	Calendar c = Calendar . applyRules ( mTimeZone ) ;
Code	Calendar c = Calendar . applyRules ( mTimeZone ) ;
Distance : 5

165
Tree	mLocale c = NUMBER_CONSTANT ;
Code	mLocale c = NUMBER_CONSTANT ;
Distance : 8

166
Tree	Calendar c = new GregorianCalendar ( GregorianCalendar , mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( GregorianCalendar , mTimeZone ) ;
Distance : 2

167
Tree	GregorianCalendar c = Calendar . toString ( mTimeZone , mLocale ) ;
Code	GregorianCalendar c = Calendar . toString ( mTimeZone , mLocale ) ;
Distance : 4

168
Tree	Date c ;
Code	Date c ;
Distance : 9

169
Tree	Calendar c = format () ;
Code	Calendar c = format () ;
Distance : 7

170
Tree	GregorianCalendar c = new Calendar ( mTimeZone ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone ) ;
Distance : 4

171
Tree	toString c = new GregorianCalendar () ;
Code	toString c = new GregorianCalendar () ;
Distance : 6

172
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
Distance : 0

173
Tree	Calendar c = new date ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Calendar c = new date ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

174
Tree	Calendar c = Calendar . GregorianCalendar ( mTimeZone , mLocale ) ;
Code	Calendar c = Calendar . GregorianCalendar ( mTimeZone , mLocale ) ;
Distance : 2

175
Tree	date c = toString () ;
Code	date c = toString () ;
Distance : 8

176
Tree	Calendar c = Calendar . date ( mTimeZone , mLocale ) ;
Code	Calendar c = Calendar . date ( mTimeZone , mLocale ) ;
Distance : 3

177
Tree	Calendar c = new Calendar ( mTimeZone , mLocale . toString ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale . toString ( STRING_CONSTANT ) ) ;
Distance : 6

178
Tree	Calendar c = date () ;
Code	Calendar c = date () ;
Distance : 7

179
Tree	GregorianCalendar c = new Calendar ( mTimeZone . toString ( STRING_CONSTANT ) ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone . toString ( STRING_CONSTANT ) ) ;
Distance : 7

180
Tree	Calendar c = new Calendar ( mTimeZone , applyRules ) ;
Code	Calendar c = new Calendar ( mTimeZone , applyRules ) ;
Distance : 2

181
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . toString () ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . toString () ;
Distance : 4

182
Tree	c c = new GregorianCalendar () ;
Code	c c = new GregorianCalendar () ;
Distance : 6

183
Tree	Calendar c = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Calendar c = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

184
Tree	GregorianCalendar c = GregorianCalendar () ;
Code	GregorianCalendar c = GregorianCalendar () ;
Distance : 7

185
Tree	Calendar c = new Calendar ( mTimeZone , new int [ mLocale ] ) ;
Code	Calendar c = new Calendar ( mTimeZone , new int [ mLocale ] ) ;
Distance : 5

186
Tree	final GregorianCalendar c = new GregorianCalendar ( mLocale ) ;
Code	final GregorianCalendar c = new GregorianCalendar ( mLocale ) ;
Distance : 4

187
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone , new int [ GregorianCalendar ] ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone , new int [ GregorianCalendar ] ) ;
Distance : 6

188
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . mMaxLengthEstimate ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . mMaxLengthEstimate ( STRING_CONSTANT ) ) ;
Distance : 5

189
Tree	Date c = NUMBER_CONSTANT ;
Code	Date c = NUMBER_CONSTANT ;
Distance : 8

190
Tree	Calendar c = Calendar . toString ( mTimeZone , GregorianCalendar ) ;
Code	Calendar c = Calendar . toString ( mTimeZone , GregorianCalendar ) ;
Distance : 4

191
Tree	Calendar c = new GregorianCalendar ( mTimeZone , Calendar . mLocale ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , Calendar . mLocale ( STRING_CONSTANT ) ) ;
Distance : 5

192
Tree	Calendar c = new GregorianCalendar ( mTimeZone , date . mLocale ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , date . mLocale ( STRING_CONSTANT ) ) ;
Distance : 5

193
Tree	date c = new GregorianCalendar ( mTimeZone , NUMBER_CONSTANT ) ;
Code	date c = new GregorianCalendar ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 2

194
Tree	date c = new GregorianCalendar ( mTimeZone . toString ( STRING_CONSTANT ) ) ;
Code	date c = new GregorianCalendar ( mTimeZone . toString ( STRING_CONSTANT ) ) ;
Distance : 6

195
Tree	Calendar c = Calendar . toString ( mTimeZone , date ) ;
Code	Calendar c = Calendar . toString ( mTimeZone , date ) ;
Distance : 4

196
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone , mLocale . mLocale ( STRING_CONSTANT ) ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone , mLocale . mLocale ( STRING_CONSTANT ) ) ;
Distance : 6

197
Tree	Calendar c = new date ( mTimeZone . toString ( STRING_CONSTANT ) ) ;
Code	Calendar c = new date ( mTimeZone . toString ( STRING_CONSTANT ) ) ;
Distance : 6

198
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . applyRules ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . applyRules ( STRING_CONSTANT ) ) ;
Distance : 5

199
Tree	Calendar c = new GregorianCalendar ( mTimeZone , Calendar . toString ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , Calendar . toString ( STRING_CONSTANT ) ) ;
Distance : 6

========================================================================


========================================================================
Example Number: 47
Parent Code is: 
if ( chars [ i ] == CHAR_CONS  chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
-------------------------------------------------------------------------------
Child code is: 
if ( chars [ i ] == CHAR_CONS  chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp && ! hasDecPoint ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS})) (250{val=||}) (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (27 (800{val=foundDigit}) (249{val=&&}) (38 (207{val=!}) (800{val=hasExp}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS})) (250{val=||}) (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (27 (800{val=foundDigit}) (249{val=&&}) (38 (207{val=!}) (800{val=hasExp})) (249{val=&&}) (38 (207{val=!}) (800{val=hasDecPoint}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/24/parent/src_main_java_org_apache_commons_lang3_math_NumberUtils.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 10
Wrong
========================================================================
False

0
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return isNumber && ! isNumber ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return isNumber && ! isNumber ; }
Distance : 6

1
Tree	if ( chars [ i ] == CHAR_CONS chars isEmpty [ i ] == CHAR_CONS ) { return isNumber && ! isNumber ; }
Code	if ( chars [ i ] == CHAR_CONS chars isEmpty [ i ] == CHAR_CONS ) { return isNumber && ! isNumber ; }
Distance : 6

2
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return chars.length && ! isNumber ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return chars.length && ! isNumber ; }
Distance : 6

3
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! isNumber ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! isNumber ; }
Distance : 5

4
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return isNumber && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return isNumber && ! hasExp ; }
Distance : 5

5
Tree	if ( chars [ i ] == CHAR_CONS chars String [ i ] == CHAR_CONS ) { return isNumber && ! isNumber ; }
Code	if ( chars [ i ] == CHAR_CONS chars String [ i ] == CHAR_CONS ) { return isNumber && ! isNumber ; }
Distance : 6

6
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return chars && ! isNumber ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return chars && ! isNumber ; }
Distance : 6

7
Tree	if ( chars [ i ] == CHAR_CONS chars i [ i ] == CHAR_CONS ) { return isNumber && ! isNumber ; }
Code	if ( chars [ i ] == CHAR_CONS chars i [ i ] == CHAR_CONS ) { return isNumber && ! isNumber ; }
Distance : 6

8
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return sz && ! isNumber ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return sz && ! isNumber ; }
Distance : 6

9
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return toCharArray && ! isNumber ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return toCharArray && ! isNumber ; }
Distance : 6

========================================================================


========================================================================
Example Number: 48
Parent Code is: 
cal1 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR )
-------------------------------------------------------------------------------
Child code is: 
cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=cal1}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR}) (215{val=)})) (236{val===}) (32 (800{val=cal2}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR}) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=cal1}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR_OF_DAY}) (215{val=)})) (236{val===}) (32 (800{val=cal2}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR_OF_DAY}) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/21/parent/src_main_java_org_apache_commons_lang3_time_DateUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) cal2 get get get
Code	Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) cal2 get get get
Distance : 9

1
Tree	isSameLocalTime . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) cal2 get get get
Code	isSameLocalTime . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) cal2 get get get
Distance : 9

2
Tree	Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.HOUR_OF_DAY ) cal2 get ( get
Code	Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.HOUR_OF_DAY ) cal2 get ( get
Distance : 8

3
Tree	Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) cal2 get get get
Code	Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) cal2 get get get
Distance : 9

4
Tree	isSameLocalTime . get ( Calendar.SECOND ) . get ( Calendar.HOUR_OF_DAY ) cal2 get get get
Code	isSameLocalTime . get ( Calendar.SECOND ) . get ( Calendar.HOUR_OF_DAY ) cal2 get get get
Distance : 8

5
Tree	Calendar.SECOND . get ( Calendar.MINUTE ) . get ( Calendar.SECOND ) cal2 get get get
Code	Calendar.SECOND . get ( Calendar.MINUTE ) . get ( Calendar.SECOND ) cal2 get get get
Distance : 9

6
Tree	Calendar.MILLISECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) cal2 get Calendar.HOUR get
Code	Calendar.MILLISECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) cal2 get Calendar.HOUR get
Distance : 9

7
Tree	cal1 . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) cal2 get get get
Code	cal1 . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) cal2 get get get
Distance : 8

8
Tree	Calendar.SECOND . get ( isSameLocalTime ) . get ( Calendar.SECOND ) cal2 get ( get
Code	Calendar.SECOND . get ( isSameLocalTime ) . get ( Calendar.SECOND ) cal2 get ( get
Distance : 9

9
Tree	Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) . get ( Calendar.HOUR_OF_DAY ) cal2 get get get
Code	Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) . get ( Calendar.HOUR_OF_DAY ) cal2 get get get
Distance : 8

10
Tree	Calendar.SECOND . get ( Calendar.SECOND ) - Calendar.SECOND . get ( Calendar.SECOND )
Code	Calendar.SECOND . get ( Calendar.SECOND ) - Calendar.SECOND . get ( Calendar.SECOND )
Distance : 5

11
Tree	isSameLocalTime . get ( Calendar.SECOND ) - Calendar.SECOND . get ( Calendar.SECOND )
Code	isSameLocalTime . get ( Calendar.SECOND ) - Calendar.SECOND . get ( Calendar.SECOND )
Distance : 5

12
Tree	Calendar.SECOND . get ( Calendar.SECOND ) - Calendar.SECOND . get ( isSameLocalTime )
Code	Calendar.SECOND . get ( Calendar.SECOND ) - Calendar.SECOND . get ( isSameLocalTime )
Distance : 5

13
Tree	Calendar.SECOND . get ( Calendar.SECOND ) - Calendar.SECOND . get ( Calendar.HOUR_OF_DAY )
Code	Calendar.SECOND . get ( Calendar.SECOND ) - Calendar.SECOND . get ( Calendar.HOUR_OF_DAY )
Distance : 4

14
Tree	Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) - Calendar.SECOND . get ( Calendar.SECOND )
Code	Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) - Calendar.SECOND . get ( Calendar.SECOND )
Distance : 5

15
Tree	isSameLocalTime . get ( Calendar.SECOND ) - Calendar.SECOND . get ( isSameLocalTime )
Code	isSameLocalTime . get ( Calendar.SECOND ) - Calendar.SECOND . get ( isSameLocalTime )
Distance : 5

16
Tree	isSameLocalTime . get ( Calendar.SECOND ) - Calendar.SECOND . get ( Calendar.HOUR_OF_DAY )
Code	isSameLocalTime . get ( Calendar.SECOND ) - Calendar.SECOND . get ( Calendar.HOUR_OF_DAY )
Distance : 4

17
Tree	Calendar.SECOND . get ( Calendar.SECOND ) * Calendar.SECOND . get ( Calendar.SECOND )
Code	Calendar.SECOND . get ( Calendar.SECOND ) * Calendar.SECOND . get ( Calendar.SECOND )
Distance : 5

18
Tree	Calendar.SECOND && Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) && super
Code	Calendar.SECOND && Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) && super
Distance : 9

19
Tree	isSameLocalTime . get ( Calendar.SECOND ) * Calendar.SECOND . get ( Calendar.SECOND )
Code	isSameLocalTime . get ( Calendar.SECOND ) * Calendar.SECOND . get ( Calendar.SECOND )
Distance : 5

20
Tree	isSameLocalTime && Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) && super
Code	isSameLocalTime && Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) && super
Distance : 9

21
Tree	Calendar.SECOND . get ( Calendar.SECOND ) * Calendar.DAY_OF_YEAR . get ( Calendar.SECOND )
Code	Calendar.SECOND . get ( Calendar.SECOND ) * Calendar.DAY_OF_YEAR . get ( Calendar.SECOND )
Distance : 5

22
Tree	Calendar.SECOND . get ( Calendar.MINUTE ) - Calendar.SECOND . get ( Calendar.SECOND )
Code	Calendar.SECOND . get ( Calendar.MINUTE ) - Calendar.SECOND . get ( Calendar.SECOND )
Distance : 5

23
Tree	Calendar.SECOND . get ( Calendar.SECOND ) * Calendar.SECOND . get ( isSameLocalTime )
Code	Calendar.SECOND . get ( Calendar.SECOND ) * Calendar.SECOND . get ( isSameLocalTime )
Distance : 5

24
Tree	Calendar.SECOND && Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.HOUR_OF_DAY ) && super
Code	Calendar.SECOND && Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.HOUR_OF_DAY ) && super
Distance : 8

25
Tree	Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) * Calendar.SECOND . get ( Calendar.SECOND )
Code	Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) * Calendar.SECOND . get ( Calendar.SECOND )
Distance : 5

26
Tree	Calendar.MILLISECOND . get ( Calendar.SECOND ) - Calendar.SECOND . get ( Calendar.SECOND )
Code	Calendar.MILLISECOND . get ( Calendar.SECOND ) - Calendar.SECOND . get ( Calendar.SECOND )
Distance : 5

27
Tree	cal1 . get ( Calendar.SECOND ) - Calendar.SECOND . get ( Calendar.SECOND )
Code	cal1 . get ( Calendar.SECOND ) - Calendar.SECOND . get ( Calendar.SECOND )
Distance : 4

28
Tree	isSameLocalTime . get ( Calendar.SECOND ) * Calendar.DAY_OF_YEAR . get ( Calendar.SECOND )
Code	isSameLocalTime . get ( Calendar.SECOND ) * Calendar.DAY_OF_YEAR . get ( Calendar.SECOND )
Distance : 5

29
Tree	Calendar.DAY_OF_YEAR && Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) && super
Code	Calendar.DAY_OF_YEAR && Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) && super
Distance : 9

30
Tree	Calendar.SECOND . get ( Calendar.MINUTE ) < NUMBER_CONSTANT
Code	Calendar.SECOND . get ( Calendar.MINUTE ) < NUMBER_CONSTANT
Distance : 9

31
Tree	Calendar.MILLISECOND . get ( Calendar.SECOND ) < NUMBER_CONSTANT
Code	Calendar.MILLISECOND . get ( Calendar.SECOND ) < NUMBER_CONSTANT
Distance : 9

32
Tree	cal1 . get ( Calendar.SECOND ) < NUMBER_CONSTANT
Code	cal1 . get ( Calendar.SECOND ) < NUMBER_CONSTANT
Distance : 8

33
Tree	isSameLocalTime . get ( Calendar.MINUTE ) - NUMBER_CONSTANT
Code	isSameLocalTime . get ( Calendar.MINUTE ) - NUMBER_CONSTANT
Distance : 9

34
Tree	Calendar.SECOND . get ( Calendar.SECOND ) == get ( Calendar.DAY_OF_YEAR )
Code	Calendar.SECOND . get ( Calendar.SECOND ) == get ( Calendar.DAY_OF_YEAR )
Distance : 5

35
Tree	Calendar.SECOND . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT
Code	Calendar.SECOND . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT
Distance : 8

36
Tree	Calendar.SECOND . get ( Calendar.MINUTE ) != Calendar.SECOND
Code	Calendar.SECOND . get ( Calendar.MINUTE ) != Calendar.SECOND
Distance : 9

37
Tree	Calendar.SECOND . get ( isSameLocalTime ) < NUMBER_CONSTANT
Code	Calendar.SECOND . get ( isSameLocalTime ) < NUMBER_CONSTANT
Distance : 9

38
Tree	Calendar.MILLISECOND . get ( Calendar.SECOND ) != Calendar.SECOND
Code	Calendar.MILLISECOND . get ( Calendar.SECOND ) != Calendar.SECOND
Distance : 9

39
Tree	Calendar.DAY_OF_YEAR && Calendar.SECOND . get ( Calendar.SECOND ) && super
Code	Calendar.DAY_OF_YEAR && Calendar.SECOND . get ( Calendar.SECOND ) && super
Distance : 11

40
Tree	isSameLocalTime . get ( isSameLocalTime ) - NUMBER_CONSTANT
Code	isSameLocalTime . get ( isSameLocalTime ) - NUMBER_CONSTANT
Distance : 9

41
Tree	isSameLocalTime . get ( Calendar.SECOND ) == get ( isSameLocalTime )
Code	isSameLocalTime . get ( Calendar.SECOND ) == get ( isSameLocalTime )
Distance : 5

42
Tree	isSameLocalTime . get ( Calendar.SECOND ) == get ( Calendar.HOUR )
Code	isSameLocalTime . get ( Calendar.SECOND ) == get ( Calendar.HOUR )
Distance : 5

43
Tree	isSameLocalTime . get ( Calendar.MINUTE ) < NUMBER_CONSTANT
Code	isSameLocalTime . get ( Calendar.MINUTE ) < NUMBER_CONSTANT
Distance : 9

44
Tree	cal1 . get ( Calendar.SECOND ) != Calendar.SECOND
Code	cal1 . get ( Calendar.SECOND ) != Calendar.SECOND
Distance : 8

45
Tree	Calendar.SECOND . get ( isSameLocalTime ) != Calendar.SECOND
Code	Calendar.SECOND . get ( isSameLocalTime ) != Calendar.SECOND
Distance : 9

46
Tree	Calendar.SECOND . get ( Calendar.HOUR_OF_DAY ) < NUMBER_CONSTANT
Code	Calendar.SECOND . get ( Calendar.HOUR_OF_DAY ) < NUMBER_CONSTANT
Distance : 8

47
Tree	Calendar.SECOND . get ( Calendar.SECOND ) * get ( Calendar.DAY_OF_YEAR )
Code	Calendar.SECOND . get ( Calendar.SECOND ) * get ( Calendar.DAY_OF_YEAR )
Distance : 6

48
Tree	isSameLocalTime . get ( isSameLocalTime ) < NUMBER_CONSTANT
Code	isSameLocalTime . get ( isSameLocalTime ) < NUMBER_CONSTANT
Distance : 9

49
Tree	Calendar.SECOND . get ( Calendar.SECOND ) * get ( Calendar.HOUR )
Code	Calendar.SECOND . get ( Calendar.SECOND ) * get ( Calendar.HOUR )
Distance : 6

50
Tree	cal1 && Calendar.SECOND . get ( Calendar.SECOND ) && super
Code	cal1 && Calendar.SECOND . get ( Calendar.SECOND ) && super
Distance : 10

51
Tree	Calendar.MILLISECOND && Calendar.SECOND . get ( Calendar.SECOND ) && super
Code	Calendar.MILLISECOND && Calendar.SECOND . get ( Calendar.SECOND ) && super
Distance : 11

52
Tree	isSameLocalTime . get ( Calendar.SECOND ) == get ( get )
Code	isSameLocalTime . get ( Calendar.SECOND ) == get ( get )
Distance : 5

53
Tree	Calendar.SECOND . get ( Calendar.SECOND ) == get ( Calendar.HOUR_OF_DAY )
Code	Calendar.SECOND . get ( Calendar.SECOND ) == get ( Calendar.HOUR_OF_DAY )
Distance : 4

54
Tree	isSameLocalTime && Calendar.SECOND . get ( isSameLocalTime ) && super
Code	isSameLocalTime && Calendar.SECOND . get ( isSameLocalTime ) && super
Distance : 11

55
Tree	Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) == get ( isSameLocalTime )
Code	Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) == get ( isSameLocalTime )
Distance : 5

56
Tree	Calendar.SECOND . get ( Calendar.SECOND ) * get ( Calendar.HOUR_OF_DAY )
Code	Calendar.SECOND . get ( Calendar.SECOND ) * get ( Calendar.HOUR_OF_DAY )
Distance : 5

57
Tree	Calendar.SECOND . get ( Calendar.MINUTE ) * get ( isSameLocalTime )
Code	Calendar.SECOND . get ( Calendar.MINUTE ) * get ( isSameLocalTime )
Distance : 6

58
Tree	Calendar.SECOND && Calendar.SECOND . get ( Calendar.MINUTE ) && super
Code	Calendar.SECOND && Calendar.SECOND . get ( Calendar.MINUTE ) && super
Distance : 11

59
Tree	boolean isSameLocalTime = NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.SECOND ) ;
Code	boolean isSameLocalTime = NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.SECOND ) ;
Distance : 10

60
Tree	Calendar.SECOND && Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) && super
Code	Calendar.SECOND && Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) && super
Distance : 11

61
Tree	Calendar.SECOND && Calendar.SECOND . get ( Calendar.HOUR_OF_DAY ) && super
Code	Calendar.SECOND && Calendar.SECOND . get ( Calendar.HOUR_OF_DAY ) && super
Distance : 10

62
Tree	boolean Calendar.DAY_OF_YEAR = NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.SECOND ) ;
Code	boolean Calendar.DAY_OF_YEAR = NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.SECOND ) ;
Distance : 10

63
Tree	boolean Calendar.SECOND = NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.MINUTE ) ;
Code	boolean Calendar.SECOND = NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.MINUTE ) ;
Distance : 10

64
Tree	boolean Calendar.SECOND = NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.HOUR_OF_DAY ) ;
Code	boolean Calendar.SECOND = NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.HOUR_OF_DAY ) ;
Distance : 9

65
Tree	boolean isSameLocalTime = NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.MINUTE ) ;
Code	boolean isSameLocalTime = NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.MINUTE ) ;
Distance : 10

66
Tree	boolean Calendar.SECOND = NUMBER_CONSTANT / Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) ;
Code	boolean Calendar.SECOND = NUMBER_CONSTANT / Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) ;
Distance : 10

67
Tree	boolean isSameLocalTime = NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.HOUR_OF_DAY ) ;
Code	boolean isSameLocalTime = NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.HOUR_OF_DAY ) ;
Distance : 9

68
Tree	STRING_CONSTANT + Calendar.SECOND . get ( Calendar.MILLISECOND ) . get ( Calendar.SECOND )
Code	STRING_CONSTANT + Calendar.SECOND . get ( Calendar.MILLISECOND ) . get ( Calendar.SECOND )
Distance : 7

69
Tree	STRING_CONSTANT + Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.MINUTE )
Code	STRING_CONSTANT + Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.MINUTE )
Distance : 7

70
Tree	boolean cal1 = NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.SECOND ) ;
Code	boolean cal1 = NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.SECOND ) ;
Distance : 10

71
Tree	STRING_CONSTANT + Calendar.SECOND . get ( isSameLocalTime ) . get ( Calendar.HOUR_OF_DAY )
Code	STRING_CONSTANT + Calendar.SECOND . get ( isSameLocalTime ) . get ( Calendar.HOUR_OF_DAY )
Distance : 6

72
Tree	STRING_CONSTANT + Calendar.SECOND + STRING_CONSTANT + Calendar.SECOND . get ( Calendar.SECOND )
Code	STRING_CONSTANT + Calendar.SECOND + STRING_CONSTANT + Calendar.SECOND . get ( Calendar.SECOND )
Distance : 9

73
Tree	STRING_CONSTANT + Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND )
Code	STRING_CONSTANT + Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND )
Distance : 7

74
Tree	isSameLocalTime . get ( Calendar.SECOND ) < NUMBER_CONSTANT
Code	isSameLocalTime . get ( Calendar.SECOND ) < NUMBER_CONSTANT
Distance : 9

75
Tree	STRING_CONSTANT + Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) . get ( Calendar.HOUR_OF_DAY )
Code	STRING_CONSTANT + Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) . get ( Calendar.HOUR_OF_DAY )
Distance : 6

76
Tree	NUMBER_CONSTANT / Calendar.DAY_OF_YEAR . get ( isSameLocalTime )
Code	NUMBER_CONSTANT / Calendar.DAY_OF_YEAR . get ( isSameLocalTime )
Distance : 9

77
Tree	NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.YEAR )
Code	NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.YEAR )
Distance : 9

78
Tree	isSameLocalTime < Calendar.SECOND . get ( isSameLocalTime )
Code	isSameLocalTime < Calendar.SECOND . get ( isSameLocalTime )
Distance : 9

79
Tree	Calendar.SECOND . get ( Calendar.SECOND ) != Calendar.SECOND
Code	Calendar.SECOND . get ( Calendar.SECOND ) != Calendar.SECOND
Distance : 9

80
Tree	boolean Calendar.SECOND = NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.YEAR ) ;
Code	boolean Calendar.SECOND = NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.YEAR ) ;
Distance : 10

81
Tree	STRING_CONSTANT + Calendar.SECOND + STRING_CONSTANT + Calendar.DAY_OF_YEAR . get ( Calendar.SECOND )
Code	STRING_CONSTANT + Calendar.SECOND + STRING_CONSTANT + Calendar.DAY_OF_YEAR . get ( Calendar.SECOND )
Distance : 9

82
Tree	Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) < ^
Code	Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) < ^
Distance : 7

83
Tree	Calendar.SECOND < Calendar.SECOND . get ( Calendar.SECOND )
Code	Calendar.SECOND < Calendar.SECOND . get ( Calendar.SECOND )
Distance : 9

84
Tree	Calendar.MILLISECOND < Calendar.SECOND . get ( Calendar.SECOND )
Code	Calendar.MILLISECOND < Calendar.SECOND . get ( Calendar.SECOND )
Distance : 9

85
Tree	Calendar.SECOND . get ( Calendar.SECOND ) < /
Code	Calendar.SECOND . get ( Calendar.SECOND ) < /
Distance : 9

86
Tree	NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.MILLISECOND )
Code	NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.MILLISECOND )
Distance : 9

87
Tree	Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) < <=
Code	Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) < <=
Distance : 7

88
Tree	Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) - NUMBER_CONSTANT
Code	Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) - NUMBER_CONSTANT
Distance : 9

89
Tree	isSameLocalTime . get ( Calendar.SECOND ) < &
Code	isSameLocalTime . get ( Calendar.SECOND ) < &
Distance : 9

90
Tree	isSameLocalTime . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) < ^
Code	isSameLocalTime . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) < ^
Distance : 7

91
Tree	Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) < &
Code	Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) < &
Distance : 7

92
Tree	NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.HOUR_OF_DAY )
Code	NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.HOUR_OF_DAY )
Distance : 8

93
Tree	NUMBER_CONSTANT / Calendar.DAY_OF_YEAR . get ( Calendar.SECOND )
Code	NUMBER_CONSTANT / Calendar.DAY_OF_YEAR . get ( Calendar.SECOND )
Distance : 9

94
Tree	Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) < NUMBER_CONSTANT
Code	Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) < NUMBER_CONSTANT
Distance : 9

95
Tree	Calendar.SECOND . get ( Calendar.MINUTE ) - NUMBER_CONSTANT
Code	Calendar.SECOND . get ( Calendar.MINUTE ) - NUMBER_CONSTANT
Distance : 9

96
Tree	Calendar.SECOND < Calendar.SECOND . get ( Calendar.MINUTE )
Code	Calendar.SECOND < Calendar.SECOND . get ( Calendar.MINUTE )
Distance : 9

97
Tree	NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.MINUTE )
Code	NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.MINUTE )
Distance : 9

98
Tree	Calendar.SECOND . get ( Calendar.SECOND ) - NUMBER_CONSTANT
Code	Calendar.SECOND . get ( Calendar.SECOND ) - NUMBER_CONSTANT
Distance : 9

99
Tree	Calendar.MILLISECOND . get ( Calendar.SECOND ) - NUMBER_CONSTANT
Code	Calendar.MILLISECOND . get ( Calendar.SECOND ) - NUMBER_CONSTANT
Distance : 9

100
Tree	Calendar.SECOND . get ( Calendar.SECOND ) < NUMBER_CONSTANT
Code	Calendar.SECOND . get ( Calendar.SECOND ) < NUMBER_CONSTANT
Distance : 9

101
Tree	cal1 . get ( Calendar.SECOND ) - NUMBER_CONSTANT
Code	cal1 . get ( Calendar.SECOND ) - NUMBER_CONSTANT
Distance : 8

102
Tree	Calendar.SECOND . get ( isSameLocalTime ) - NUMBER_CONSTANT
Code	Calendar.SECOND . get ( isSameLocalTime ) - NUMBER_CONSTANT
Distance : 9

103
Tree	STRING_CONSTANT + Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.HOUR_OF_DAY )
Code	STRING_CONSTANT + Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.HOUR_OF_DAY )
Distance : 6

104
Tree	Calendar.SECOND . get ( Calendar.SECOND ) * get ( isSameLocalTime )
Code	Calendar.SECOND . get ( Calendar.SECOND ) * get ( isSameLocalTime )
Distance : 6

105
Tree	isSameLocalTime && Calendar.SECOND . get ( Calendar.SECOND ) && super
Code	isSameLocalTime && Calendar.SECOND . get ( Calendar.SECOND ) && super
Distance : 11

106
Tree	NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.HOUR )
Code	NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.HOUR )
Distance : 9

107
Tree	Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.HOUR_OF_DAY ) - &
Code	Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.HOUR_OF_DAY ) - &
Distance : 6

108
Tree	Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) - &
Code	Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) - &
Distance : 7

109
Tree	STRING_CONSTANT + Calendar.SECOND + STRING_CONSTANT + Calendar.SECOND . get ( Calendar.HOUR_OF_DAY )
Code	STRING_CONSTANT + Calendar.SECOND + STRING_CONSTANT + Calendar.SECOND . get ( Calendar.HOUR_OF_DAY )
Distance : 8

110
Tree	Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) != Calendar.SECOND
Code	Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) != Calendar.SECOND
Distance : 9

111
Tree	cal1 < Calendar.SECOND . get ( Calendar.SECOND )
Code	cal1 < Calendar.SECOND . get ( Calendar.SECOND )
Distance : 8

112
Tree	Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.HOUR_OF_DAY ) - extends
Code	Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.HOUR_OF_DAY ) - extends
Distance : 6

113
Tree	Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) - &
Code	Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) - &
Distance : 7

114
Tree	isSameLocalTime . get ( Calendar.SECOND ) * get ( isSameLocalTime )
Code	isSameLocalTime . get ( Calendar.SECOND ) * get ( isSameLocalTime )
Distance : 6

115
Tree	NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.DAY_OF_YEAR )
Code	NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.DAY_OF_YEAR )
Distance : 9

116
Tree	isSameLocalTime . get ( Calendar.SECOND ) != Calendar.DAY_OF_YEAR
Code	isSameLocalTime . get ( Calendar.SECOND ) != Calendar.DAY_OF_YEAR
Distance : 9

117
Tree	Calendar.SECOND . get ( Calendar.SECOND ) == get ( isSameLocalTime )
Code	Calendar.SECOND . get ( Calendar.SECOND ) == get ( isSameLocalTime )
Distance : 5

118
Tree	Calendar.SECOND . get ( Calendar.SECOND ) == get ( Calendar.HOUR )
Code	Calendar.SECOND . get ( Calendar.SECOND ) == get ( Calendar.HOUR )
Distance : 5

119
Tree	isSameLocalTime . get ( Calendar.SECOND ) == get ( Calendar.DAY_OF_YEAR )
Code	isSameLocalTime . get ( Calendar.SECOND ) == get ( Calendar.DAY_OF_YEAR )
Distance : 5

120
Tree	Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) * get ( isSameLocalTime )
Code	Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) * get ( isSameLocalTime )
Distance : 6

121
Tree	Calendar.SECOND . get ( Calendar.SECOND ) != Calendar.DAY_OF_YEAR
Code	Calendar.SECOND . get ( Calendar.SECOND ) != Calendar.DAY_OF_YEAR
Distance : 9

122
Tree	Calendar.SECOND . get ( Calendar.SECOND ) == get ( get )
Code	Calendar.SECOND . get ( Calendar.SECOND ) == get ( get )
Distance : 5

123
Tree	isSameLocalTime . get ( Calendar.MINUTE ) != Calendar.SECOND
Code	isSameLocalTime . get ( Calendar.MINUTE ) != Calendar.SECOND
Distance : 9

124
Tree	isSameLocalTime . get ( Calendar.SECOND ) - NUMBER_CONSTANT
Code	isSameLocalTime . get ( Calendar.SECOND ) - NUMBER_CONSTANT
Distance : 9

125
Tree	Calendar.SECOND && Calendar.SECOND . get ( isSameLocalTime ) && super
Code	Calendar.SECOND && Calendar.SECOND . get ( isSameLocalTime ) && super
Distance : 11

126
Tree	STRING_CONSTANT + Calendar.SECOND + STRING_CONSTANT + Calendar.DAY_OF_YEAR . get ( Calendar.HOUR_OF_DAY )
Code	STRING_CONSTANT + Calendar.SECOND + STRING_CONSTANT + Calendar.DAY_OF_YEAR . get ( Calendar.HOUR_OF_DAY )
Distance : 8

127
Tree	Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.HOUR_OF_DAY ) < ^
Code	Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.HOUR_OF_DAY ) < ^
Distance : 6

128
Tree	STRING_CONSTANT + Calendar.SECOND . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.SECOND )
Code	STRING_CONSTANT + Calendar.SECOND . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.SECOND )
Distance : 6

129
Tree	isSameLocalTime . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) < /
Code	isSameLocalTime . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) < /
Distance : 7

130
Tree	isSameLocalTime . get ( Calendar.SECOND ) * get ( Calendar.DAY_OF_YEAR )
Code	isSameLocalTime . get ( Calendar.SECOND ) * get ( Calendar.DAY_OF_YEAR )
Distance : 6

131
Tree	Calendar.SECOND < Calendar.SECOND . get ( Calendar.HOUR_OF_DAY )
Code	Calendar.SECOND < Calendar.SECOND . get ( Calendar.HOUR_OF_DAY )
Distance : 8

132
Tree	Calendar.SECOND . get ( Calendar.SECOND ) * get ( Calendar.SECOND )
Code	Calendar.SECOND . get ( Calendar.SECOND ) * get ( Calendar.SECOND )
Distance : 6

133
Tree	Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) - extends
Code	Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) - extends
Distance : 7

134
Tree	Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) - CHAR_CONS
Code	Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) - CHAR_CONS
Distance : 7

135
Tree	Calendar.SECOND < Calendar.DAY_OF_YEAR . get ( Calendar.SECOND )
Code	Calendar.SECOND < Calendar.DAY_OF_YEAR . get ( Calendar.SECOND )
Distance : 9

136
Tree	Calendar.SECOND . get ( Calendar.SECOND ) * Calendar.SECOND . get ( Calendar.HOUR_OF_DAY )
Code	Calendar.SECOND . get ( Calendar.SECOND ) * Calendar.SECOND . get ( Calendar.HOUR_OF_DAY )
Distance : 4

137
Tree	STRING_CONSTANT + Calendar.SECOND + STRING_CONSTANT + Calendar.SECOND . get ( Calendar.YEAR )
Code	STRING_CONSTANT + Calendar.SECOND + STRING_CONSTANT + Calendar.SECOND . get ( Calendar.YEAR )
Distance : 9

138
Tree	isSameLocalTime . get ( Calendar.SECOND ) * Calendar.SECOND . get ( isSameLocalTime )
Code	isSameLocalTime . get ( Calendar.SECOND ) * Calendar.SECOND . get ( isSameLocalTime )
Distance : 5

139
Tree	isSameLocalTime . get ( Calendar.SECOND ) != Calendar.SECOND
Code	isSameLocalTime . get ( Calendar.SECOND ) != Calendar.SECOND
Distance : 9

140
Tree	STRING_CONSTANT + Calendar.SECOND + STRING_CONSTANT + Calendar.DAY_OF_YEAR . get ( Calendar.MINUTE )
Code	STRING_CONSTANT + Calendar.SECOND + STRING_CONSTANT + Calendar.DAY_OF_YEAR . get ( Calendar.MINUTE )
Distance : 9

141
Tree	STRING_CONSTANT + Calendar.DAY_OF_YEAR + STRING_CONSTANT + Calendar.DAY_OF_YEAR . get ( Calendar.SECOND )
Code	STRING_CONSTANT + Calendar.DAY_OF_YEAR + STRING_CONSTANT + Calendar.DAY_OF_YEAR . get ( Calendar.SECOND )
Distance : 9

142
Tree	Calendar.DAY_OF_YEAR < Calendar.SECOND . get ( Calendar.SECOND )
Code	Calendar.DAY_OF_YEAR < Calendar.SECOND . get ( Calendar.SECOND )
Distance : 9

143
Tree	isSameLocalTime . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) - &
Code	isSameLocalTime . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) - &
Distance : 7

144
Tree	isSameLocalTime . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) - extends
Code	isSameLocalTime . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) - extends
Distance : 7

145
Tree	isSameLocalTime && Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.HOUR_OF_DAY ) && super
Code	isSameLocalTime && Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.HOUR_OF_DAY ) && super
Distance : 8

146
Tree	isSameLocalTime . get ( Calendar.SECOND ) * Calendar.SECOND . get ( Calendar.HOUR_OF_DAY )
Code	isSameLocalTime . get ( Calendar.SECOND ) * Calendar.SECOND . get ( Calendar.HOUR_OF_DAY )
Distance : 4

147
Tree	Calendar.SECOND && Calendar.SECOND . get ( isSameLocalTime ) . get ( Calendar.SECOND ) && super
Code	Calendar.SECOND && Calendar.SECOND . get ( isSameLocalTime ) . get ( Calendar.SECOND ) && super
Distance : 9

148
Tree	Calendar.SECOND . get ( Calendar.SECOND ) * Calendar.DAY_OF_YEAR . get ( isSameLocalTime )
Code	Calendar.SECOND . get ( Calendar.SECOND ) * Calendar.DAY_OF_YEAR . get ( isSameLocalTime )
Distance : 5

149
Tree	isSameLocalTime . get ( Calendar.SECOND ) * get ( Calendar.HOUR )
Code	isSameLocalTime . get ( Calendar.SECOND ) * get ( Calendar.HOUR )
Distance : 6

150
Tree	isSameLocalTime . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) - CHAR_CONS
Code	isSameLocalTime . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) - CHAR_CONS
Distance : 7

151
Tree	STRING_CONSTANT + Calendar.SECOND + STRING_CONSTANT + Calendar.DAY_OF_YEAR . get ( Calendar.YEAR )
Code	STRING_CONSTANT + Calendar.SECOND + STRING_CONSTANT + Calendar.DAY_OF_YEAR . get ( Calendar.YEAR )
Distance : 9

152
Tree	cal1 && Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) && super
Code	cal1 && Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) && super
Distance : 8

153
Tree	Calendar.MILLISECOND && Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) && super
Code	Calendar.MILLISECOND && Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) && super
Distance : 9

154
Tree	isSameLocalTime && Calendar.SECOND . get ( isSameLocalTime ) . get ( Calendar.SECOND ) && super
Code	isSameLocalTime && Calendar.SECOND . get ( isSameLocalTime ) . get ( Calendar.SECOND ) && super
Distance : 9

155
Tree	boolean Calendar.SECOND = NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.SECOND ) ;
Code	boolean Calendar.SECOND = NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.SECOND ) ;
Distance : 10

156
Tree	Calendar.DAY_OF_YEAR && Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.HOUR_OF_DAY ) && super
Code	Calendar.DAY_OF_YEAR && Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.HOUR_OF_DAY ) && super
Distance : 8

157
Tree	Calendar.SECOND && Calendar.SECOND . get ( Calendar.SECOND ) && super
Code	Calendar.SECOND && Calendar.SECOND . get ( Calendar.SECOND ) && super
Distance : 11

158
Tree	Calendar.SECOND < Calendar.SECOND . get ( isSameLocalTime )
Code	Calendar.SECOND < Calendar.SECOND . get ( isSameLocalTime )
Distance : 9

159
Tree	Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) - ++
Code	Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) - ++
Distance : 7

160
Tree	NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.SECOND )
Code	NUMBER_CONSTANT / Calendar.SECOND . get ( Calendar.SECOND )
Distance : 9

161
Tree	Calendar.SECOND . get ( Calendar.SECOND ) < CHAR_CONS
Code	Calendar.SECOND . get ( Calendar.SECOND ) < CHAR_CONS
Distance : 9

162
Tree	Calendar.SECOND . get ( Calendar.SECOND ) < <=
Code	Calendar.SECOND . get ( Calendar.SECOND ) < <=
Distance : 9

163
Tree	isSameLocalTime < Calendar.SECOND . get ( Calendar.SECOND )
Code	isSameLocalTime < Calendar.SECOND . get ( Calendar.SECOND )
Distance : 9

164
Tree	isSameLocalTime . get ( Calendar.SECOND ) < CHAR_CONS
Code	isSameLocalTime . get ( Calendar.SECOND ) < CHAR_CONS
Distance : 9

165
Tree	isSameLocalTime . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) < <=
Code	isSameLocalTime . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) < <=
Distance : 7

166
Tree	Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) < /
Code	Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) < /
Distance : 7

167
Tree	isSameLocalTime . get ( Calendar.SECOND ) < <=
Code	isSameLocalTime . get ( Calendar.SECOND ) < <=
Distance : 9

168
Tree	Calendar.SECOND . get ( Calendar.SECOND ) < ^
Code	Calendar.SECOND . get ( Calendar.SECOND ) < ^
Distance : 9

169
Tree	Calendar.SECOND . get ( Calendar.SECOND ) < &
Code	Calendar.SECOND . get ( Calendar.SECOND ) < &
Distance : 9

170
Tree	Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) < CHAR_CONS
Code	Calendar.SECOND . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) < CHAR_CONS
Distance : 7

171
Tree	isSameLocalTime . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) < &
Code	isSameLocalTime . get ( Calendar.SECOND ) . get ( Calendar.SECOND ) < &
Distance : 7

172
Tree	STRING_CONSTANT + Calendar.SECOND + STRING_CONSTANT + Calendar.SECOND . get ( Calendar.MINUTE )
Code	STRING_CONSTANT + Calendar.SECOND + STRING_CONSTANT + Calendar.SECOND . get ( Calendar.MINUTE )
Distance : 9

173
Tree	STRING_CONSTANT + Calendar.DAY_OF_YEAR + STRING_CONSTANT + Calendar.SECOND . get ( Calendar.SECOND )
Code	STRING_CONSTANT + Calendar.DAY_OF_YEAR + STRING_CONSTANT + Calendar.SECOND . get ( Calendar.SECOND )
Distance : 9

174
Tree	Calendar.SECOND . get ( Calendar.SECOND ) < extends
Code	Calendar.SECOND . get ( Calendar.SECOND ) < extends
Distance : 9

175
Tree	STRING_CONSTANT + Calendar.SECOND . get ( isSameLocalTime ) . get ( Calendar.SECOND )
Code	STRING_CONSTANT + Calendar.SECOND . get ( isSameLocalTime ) . get ( Calendar.SECOND )
Distance : 7

176
Tree	isSameLocalTime . get ( Calendar.MINUTE ) cal2 get cal2 get
Code	isSameLocalTime . get ( Calendar.MINUTE ) cal2 get cal2 get
Distance : 7

177
Tree	Calendar.SECOND . get ( Calendar.HOUR_OF_DAY ) cal2 get cal2 get
Code	Calendar.SECOND . get ( Calendar.HOUR_OF_DAY ) cal2 get cal2 get
Distance : 6

178
Tree	isSameLocalTime . get ( isSameLocalTime ) cal2 get cal2 get
Code	isSameLocalTime . get ( isSameLocalTime ) cal2 get cal2 get
Distance : 7

179
Tree	NUMBER_CONSTANT / Calendar.SECOND . get ( isSameLocalTime )
Code	NUMBER_CONSTANT / Calendar.SECOND . get ( isSameLocalTime )
Distance : 9

180
Tree	STRING_CONSTANT + Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) . get ( Calendar.SECOND )
Code	STRING_CONSTANT + Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) . get ( Calendar.SECOND )
Distance : 7

181
Tree	Calendar.SECOND . get ( Calendar.MINUTE ) cal2 get cal2 get + super
Code	Calendar.SECOND . get ( Calendar.MINUTE ) cal2 get cal2 get + super
Distance : 8

182
Tree	Calendar.MILLISECOND . get ( Calendar.SECOND ) cal2 get cal2 get + super
Code	Calendar.MILLISECOND . get ( Calendar.SECOND ) cal2 get cal2 get + super
Distance : 8

183
Tree	isSameLocalTime . get ( Calendar.SECOND ) < ^
Code	isSameLocalTime . get ( Calendar.SECOND ) < ^
Distance : 9

184
Tree	STRING_CONSTANT + Calendar.SECOND . get ( Calendar.MINUTE ) . get ( Calendar.SECOND )
Code	STRING_CONSTANT + Calendar.SECOND . get ( Calendar.MINUTE ) . get ( Calendar.SECOND )
Distance : 7

185
Tree	get . get ( Calendar.SECOND ) cal2 get cal2 get + super
Code	get . get ( Calendar.SECOND ) cal2 get cal2 get + super
Distance : 8

186
Tree	Calendar.SECOND . get ( isSameLocalTime ) cal2 get cal2 get + super
Code	Calendar.SECOND . get ( isSameLocalTime ) cal2 get cal2 get + super
Distance : 8

187
Tree	isSameLocalTime . get ( Calendar.MINUTE ) cal2 get cal2 get + super
Code	isSameLocalTime . get ( Calendar.MINUTE ) cal2 get cal2 get + super
Distance : 8

188
Tree	Calendar.SECOND . get ( Calendar.SECOND ) cal2 get cal2 get
Code	Calendar.SECOND . get ( Calendar.SECOND ) cal2 get cal2 get
Distance : 7

189
Tree	isSameLocalTime . get ( Calendar.SECOND ) cal2 get cal2 get
Code	isSameLocalTime . get ( Calendar.SECOND ) cal2 get cal2 get
Distance : 7

190
Tree	Calendar.SECOND . get ( Calendar.SECOND ) cal2 get cal2 get + super
Code	Calendar.SECOND . get ( Calendar.SECOND ) cal2 get cal2 get + super
Distance : 8

191
Tree	Calendar.SECOND . get ( Calendar.HOUR_OF_DAY ) cal2 get cal2 get + super
Code	Calendar.SECOND . get ( Calendar.HOUR_OF_DAY ) cal2 get cal2 get + super
Distance : 7

192
Tree	isSameLocalTime . get ( Calendar.SECOND ) cal2 get cal2 get + super
Code	isSameLocalTime . get ( Calendar.SECOND ) cal2 get cal2 get + super
Distance : 8

193
Tree	Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) cal2 get cal2 get
Code	Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) cal2 get cal2 get
Distance : 7

194
Tree	Calendar.SECOND . get ( Calendar.MINUTE ) cal2 get cal2 get
Code	Calendar.SECOND . get ( Calendar.MINUTE ) cal2 get cal2 get
Distance : 7

195
Tree	Calendar.MILLISECOND . get ( Calendar.SECOND ) cal2 get cal2 get
Code	Calendar.MILLISECOND . get ( Calendar.SECOND ) cal2 get cal2 get
Distance : 7

196
Tree	Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) cal2 get cal2 get + super
Code	Calendar.DAY_OF_YEAR . get ( Calendar.SECOND ) cal2 get cal2 get + super
Distance : 8

197
Tree	cal1 . get ( Calendar.SECOND ) cal2 get cal2 get
Code	cal1 . get ( Calendar.SECOND ) cal2 get cal2 get
Distance : 6

198
Tree	Calendar.SECOND . get ( isSameLocalTime ) cal2 get cal2 get
Code	Calendar.SECOND . get ( isSameLocalTime ) cal2 get cal2 get
Distance : 7

199
Tree	isSameLocalTime . get ( isSameLocalTime ) cal2 get cal2 get + super
Code	isSameLocalTime . get ( isSameLocalTime ) cal2 get cal2 get + super
Distance : 8

========================================================================


========================================================================
Example Number: 49
Parent Code is: 
{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ pos += Character . charCount ( Character . codePointAt ( input , pt ) ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (800{val=pos}) (237{val=+=}) (32 (800{val=Character}) (235{val=.}) (802{val=charCount}) (214{val=(}) (32 (800{val=Character}) (235{val=.}) (802{val=codePointAt}) (214{val=(}) (800{val=input}) (234{val=,}) (800{val=pos}) (215{val=)})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (800{val=pos}) (237{val=+=}) (32 (800{val=Character}) (235{val=.}) (802{val=charCount}) (214{val=(}) (32 (800{val=Character}) (235{val=.}) (802{val=codePointAt}) (214{val=(}) (800{val=input}) (234{val=,}) (800{val=pt}) (215{val=)})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/6/parent/src_main_java_org_apache_commons_lang3_text_translate_CharSequenceTranslator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ throw new pos ( Character . codePointAt ( Character , pos . codePointAt ( input ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( Character , pos . codePointAt ( input ) ) , false ) ; }
Distance : 10

1
Tree	{ throw new len ( Character , false ) ; }
Code	{ throw new len ( Character , false ) ; }
Distance : 11

2
Tree	{ len . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ len . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 4

3
Tree	{ throw new pos ( Character * pt ) ; }
Code	{ throw new pos ( Character * pt ) ; }
Distance : 11

4
Tree	{ pt = Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pt = Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

5
Tree	{ super(); pos += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ super(); pos += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 3

6
Tree	{ throw new pos ( Character , pos . charCount ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Code	{ throw new pos ( Character , pos . charCount ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Distance : 12

7
Tree	{ throw new IOException () ; }
Code	{ throw new IOException () ; }
Distance : 15

8
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; else }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; else }
Distance : 3

9
Tree	{ pos += Character . translate ( Character . codePointAt ( input , pos ) ) ; return; }
Code	{ pos += Character . translate ( Character . codePointAt ( input , pos ) ) ; return; }
Distance : 3

10
Tree	{ throw new pos ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , super ) ; }
Code	{ throw new pos ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , super ) ; }
Distance : 11

11
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

12
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; len . charCount ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; len . charCount ( Character , pos ) ; }
Distance : 10

13
Tree	{ continue; pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ continue; pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

14
Tree	{ throw pos . charCount ( Character , pos . charCount ( input , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , pos . charCount ( input , pos ) , Character ) ; }
Distance : 9

15
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; fireChangeEvent }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; fireChangeEvent }
Distance : 3

16
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; length . charCount ( input ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; length . charCount ( input ) ; }
Distance : 8

17
Tree	{ pos = Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos = Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

18
Tree	{ super(); len += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ super(); len += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

19
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Distance : 9

20
Tree	{ throw new pos ( Character * pos ) ; }
Code	{ throw new pos ( Character * pos ) ; }
Distance : 12

21
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; super }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; super }
Distance : 3

22
Tree	{ throw pos . charCount ( Character [ pos ] ) ; }
Code	{ throw pos . charCount ( Character [ pos ] ) ; }
Distance : 10

23
Tree	{ pos += len . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += len . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

24
Tree	{ throw new pos ( Character . translate ( input . codePointAt ( input ) ) , false ) ; }
Code	{ throw new pos ( Character . translate ( input . codePointAt ( input ) ) , false ) ; }
Distance : 9

25
Tree	{ throw new pos ( Character , pos . codePointAt ( input . codePointAt ( input , pos ) ) , length , false ) ; }
Code	{ throw new pos ( Character , pos . codePointAt ( input . codePointAt ( input , pos ) ) , length , false ) ; }
Distance : 13

26
Tree	{ throw IOException ; }
Code	{ throw IOException ; }
Distance : 15

27
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; CHAR_CONS }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; CHAR_CONS }
Distance : 3

28
Tree	{ throw new pos ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , ! ) ; }
Code	{ throw new pos ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , ! ) ; }
Distance : 11

29
Tree	{ throw new len ( Character * pos ) ; }
Code	{ throw new len ( Character * pos ) ; }
Distance : 12

30
Tree	{ throw new length ( Character , false ) ; }
Code	{ throw new length ( Character , false ) ; }
Distance : 11

31
Tree	{ pos += Character . charCount ( len . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( len . codePointAt ( input , pos ) ) ; }
Distance : 2

32
Tree	{ pos = Character . translate ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos = Character . translate ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

33
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Distance : 9

34
Tree	{ throw new pos ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , false ) ; }
Distance : 11

35
Tree	{ throw new pos ( Character , true ) ; }
Code	{ throw new pos ( Character , true ) ; }
Distance : 11

36
Tree	{ throw length ; }
Code	{ throw length ; }
Distance : 15

37
Tree	{ pos += Character . charCount ( Character . translate ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . translate ( input , pos ) ) ; }
Distance : 2

38
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; return; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; return; }
Distance : 2

39
Tree	{ throw new CharSequence ( STRING_CONSTANT ) ; }
Code	{ throw new CharSequence ( STRING_CONSTANT ) ; }
Distance : 13

40
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; null }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; null }
Distance : 2

41
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; array }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; array }
Distance : 3

42
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , ! ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , ! ) ; }
Distance : 9

43
Tree	{ throw new pos ( Character . codePointAt ( input , pos . charCount ( input ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( input , pos . charCount ( input ) ) , false ) ; }
Distance : 12

44
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( Character ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( Character ) ; }
Distance : 8

45
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( Character , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( Character , pos ) , Character ) ; }
Distance : 9

46
Tree	{ throw new len () ; }
Code	{ throw new len () ; }
Distance : 15

47
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 1

48
Tree	{ throw pos . charCount ( Character [ Character ] ) ; }
Code	{ throw pos . charCount ( Character [ Character ] ) ; }
Distance : 10

49
Tree	{ throw pos . charCount ( Character [ c ] ) ; }
Code	{ throw pos . charCount ( Character [ c ] ) ; }
Distance : 10

50
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 9

51
Tree	{ break; pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ break; pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

52
Tree	{ throw new pt ( Character * pos ) ; }
Code	{ throw new pt ( Character * pos ) ; }
Distance : 12

53
Tree	{ throw new pos ( Character , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Code	{ throw new pos ( Character , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Distance : 13

54
Tree	{ throw pos . charCount ( Character [ input ] ) ; }
Code	{ throw pos . charCount ( Character [ input ] ) ; }
Distance : 9

55
Tree	{ throw new pos ( Character . charCount ( input . codePointAt ( input ) ) , false ) ; }
Code	{ throw new pos ( Character . charCount ( input . codePointAt ( input ) ) , false ) ; }
Distance : 8

56
Tree	{ throw new CharSequence ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new CharSequence ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 10

57
Tree	{ throw pos ; }
Code	{ throw pos ; }
Distance : 15

58
Tree	{ return; pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ return; pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

59
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; charAt }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; charAt }
Distance : 3

60
Tree	{ super(); pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ super(); pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

61
Tree	{ throw new pos ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new pos ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 11

62
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; if }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; if }
Distance : 3

63
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; length . charCount ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; length . charCount ( Character , pos ) ; }
Distance : 10

64
Tree	{ pt += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pt += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

65
Tree	{ pos = Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos = Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 3

66
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Distance : 8

67
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; return; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; return; }
Distance : 3

68
Tree	{ throw new pos ( Character , pos . codePointAt ( input . codePointAt ( input , pos ) ) , len , false ) ; }
Code	{ throw new pos ( Character , pos . codePointAt ( input . codePointAt ( input , pos ) ) , len , false ) ; }
Distance : 13

69
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; assertNull }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; assertNull }
Distance : 3

70
Tree	{ throw pos . translate ( Character [ input ] ) ; }
Code	{ throw pos . translate ( Character [ input ] ) ; }
Distance : 10

71
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input ) ) , ? ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input ) ) , ? ) ; }
Distance : 9

72
Tree	{ throw new pos ( STRING_CONSTANT ) ; }
Code	{ throw new pos ( STRING_CONSTANT ) ; }
Distance : 13

73
Tree	{ throw new pos ( len * pos ) ; }
Code	{ throw new pos ( len * pos ) ; }
Distance : 13

74
Tree	{ throw new CharSequence ( Character , false ) ; }
Code	{ throw new CharSequence ( Character , false ) ; }
Distance : 11

75
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , super ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , super ) ; }
Distance : 9

76
Tree	{ throw new pos ( Character . codePointAt ( Character . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( Character . codePointAt ( input , pos ) ) , false ) ; }
Distance : 8

77
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 9

78
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input ) ) , super ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input ) ) , super ) ; }
Distance : 9

79
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 3

80
Tree	{ throw new pos ( Character , pos . codePointAt ( input . codePointAt ( Character , pos ) ) , pos , false ) ; }
Code	{ throw new pos ( Character , pos . codePointAt ( input . codePointAt ( Character , pos ) ) , pos , false ) ; }
Distance : 14

81
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , length ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , length ) ; }
Distance : 8

82
Tree	{ pos = Character . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ pos = Character . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 3

83
Tree	{ throw new pt ( STRING_CONSTANT ) ; }
Code	{ throw new pt ( STRING_CONSTANT ) ; }
Distance : 13

84
Tree	{ pos += Character . translate ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . translate ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

85
Tree	{ throw new c.length ( STRING_CONSTANT ) ; }
Code	{ throw new c.length ( STRING_CONSTANT ) ; }
Distance : 13

86
Tree	{ throw new pos ( Character ) ; }
Code	{ throw new pos ( Character ) ; }
Distance : 12

87
Tree	{ pos = len . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos = len . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

88
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; len . charCount ( Character ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; len . charCount ( Character ) ; }
Distance : 8

89
Tree	{ throw new pos ( Character . codePointAt ( Character . codePointAt ( input ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( Character . codePointAt ( input ) ) , false ) ; }
Distance : 8

90
Tree	{ throw new CharSequence ( Character ) ; }
Code	{ throw new CharSequence ( Character ) ; }
Distance : 12

91
Tree	{ throw new pos ( Character * len ) ; }
Code	{ throw new pos ( Character * len ) ; }
Distance : 12

92
Tree	{ throw new CharSequence ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , false ) ; }
Code	{ throw new CharSequence ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , false ) ; }
Distance : 12

93
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( Character ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( Character ) ) , false ) ; }
Distance : 10

94
Tree	{ throw new pt () ; }
Code	{ throw new pt () ; }
Distance : 14

95
Tree	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; null }
Code	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; null }
Distance : 3

96
Tree	{ throw pos . pt ( Character [ input ] ) ; }
Code	{ throw pos . pt ( Character [ input ] ) ; }
Distance : 10

97
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

98
Tree	{ throw new pos ( Character , pos . codePointAt ( input . codePointAt ( Character , pos ) ) , len , false ) ; }
Code	{ throw new pos ( Character , pos . codePointAt ( input . codePointAt ( Character , pos ) ) , len , false ) ; }
Distance : 14

99
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input ) ) , ! ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input ) ) , ! ) ; }
Distance : 9

100
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( Character , pos ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( Character , pos ) ) , false ) ; }
Distance : 10

101
Tree	{ throw pos . codePointAt ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Code	{ throw pos . codePointAt ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Distance : 9

102
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( input , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( input , pos ) ; }
Distance : 10

103
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; continue; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; continue; }
Distance : 2

104
Tree	{ throw new pt ( Character ) ; }
Code	{ throw new pt ( Character ) ; }
Distance : 12

105
Tree	{ throw pos . translate ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Code	{ throw pos . translate ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Distance : 9

106
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; super(); }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; super(); }
Distance : 2

107
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; length . charCount ( Character ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; length . charCount ( Character ) ; }
Distance : 8

108
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( input ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( input ) ; }
Distance : 8

109
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , return; ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , return; ) ; }
Distance : 9

110
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; fireAnnotationChanged }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; fireAnnotationChanged }
Distance : 3

111
Tree	{ throw new pos ( input ) ; }
Code	{ throw new pos ( input ) ; }
Distance : 12

112
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; input . charCount ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; input . charCount ( Character , pos ) ; }
Distance : 10

113
Tree	{ throw new len ( STRING_CONSTANT ) ; }
Code	{ throw new len ( STRING_CONSTANT ) ; }
Distance : 13

114
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; len . charCount ( input ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; len . charCount ( input ) ; }
Distance : 8

115
Tree	{ pt += Character . charCount ( Character . codePointAt ( input , pos ) ) ; return; }
Code	{ pt += Character . charCount ( Character . codePointAt ( input , pos ) ) ; return; }
Distance : 3

116
Tree	{ throw new pos ( Character , pos . charCount ( input . codePointAt ( input , pos ) ) , len , false ) ; }
Code	{ throw new pos ( Character , pos . charCount ( input . codePointAt ( input , pos ) ) , len , false ) ; }
Distance : 12

117
Tree	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 2

118
Tree	{ throw new length ( STRING_CONSTANT ) ; }
Code	{ throw new length ( STRING_CONSTANT ) ; }
Distance : 13

119
Tree	{ throw new pt ( Character , false ) ; }
Code	{ throw new pt ( Character , false ) ; }
Distance : 11

120
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; len . charCount ( input , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; len . charCount ( input , pos ) ; }
Distance : 10

121
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( input ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( input ) ; }
Distance : 8

122
Tree	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 2

123
Tree	{ throw new IOException ( STRING_CONSTANT ) ; }
Code	{ throw new IOException ( STRING_CONSTANT ) ; }
Distance : 13

124
Tree	{ throw len ; }
Code	{ throw len ; }
Distance : 15

125
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; break; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; break; }
Distance : 2

126
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , len ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , len ) ; }
Distance : 8

127
Tree	{ throw new pos ( Character , pos . codePointAt ( Character . codePointAt ( input , pos ) ) , len , false ) ; }
Code	{ throw new pos ( Character , pos . codePointAt ( Character . codePointAt ( input , pos ) ) , len , false ) ; }
Distance : 12

128
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character ) ; }
Distance : 8

129
Tree	{ throw pos . pt ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Code	{ throw pos . pt ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Distance : 9

130
Tree	{ throw new pos () ; }
Code	{ throw new pos () ; }
Distance : 15

131
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character , pos ) ; }
Distance : 10

132
Tree	{ throw new pos ( Character . charCount ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new pos ( Character . charCount ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 8

133
Tree	{ length . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ length . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 4

134
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( input , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( input , pos ) ; }
Distance : 10

135
Tree	{ throw new pos ( input , false ) ; }
Code	{ throw new pos ( input , false ) ; }
Distance : 11

136
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( Character , pos ) ; }
Distance : 10

137
Tree	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; return; }
Code	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; return; }
Distance : 3

138
Tree	{ throw Character ; }
Code	{ throw Character ; }
Distance : 14

139
Tree	{ throw new pos ( Character . codePointAt ( input , pos . codePointAt ( Character ) ) , CHAR_CONS ) ; }
Code	{ throw new pos ( Character . codePointAt ( input , pos . codePointAt ( Character ) ) , CHAR_CONS ) ; }
Distance : 12

140
Tree	{ throw new IOException ( Character , false ) ; }
Code	{ throw new IOException ( Character , false ) ; }
Distance : 11

141
Tree	{ pt . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pt . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 4

142
Tree	{ throw new c.length ( Character ) ; }
Code	{ throw new c.length ( Character ) ; }
Distance : 12

143
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; length . charCount ( input , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; length . charCount ( input , pos ) ; }
Distance : 10

144
Tree	{ throw new length ( Character ) ; }
Code	{ throw new length ( Character ) ; }
Distance : 12

145
Tree	{ throw new CharSequence () ; }
Code	{ throw new CharSequence () ; }
Distance : 15

146
Tree	{ throw new length ( Character * pos ) ; }
Code	{ throw new length ( Character * pos ) ; }
Distance : 12

147
Tree	{ throw new pos ( Character . charCount ( input , pos . codePointAt ( input ) ) , false ) ; }
Code	{ throw new pos ( Character . charCount ( input , pos . codePointAt ( input ) ) , false ) ; }
Distance : 10

148
Tree	{ throw new len ( Character ) ; }
Code	{ throw new len ( Character ) ; }
Distance : 12

149
Tree	{ throw new pos ( Character , pos . codePointAt ( input . codePointAt ( input , pos ) ) , Character , false ) ; }
Code	{ throw new pos ( Character , pos . codePointAt ( input . codePointAt ( input , pos ) ) , Character , false ) ; }
Distance : 13

150
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; write . charCount ( Character ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; write . charCount ( Character ) ; }
Distance : 8

151
Tree	{ pos . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 4

152
Tree	{ throw new IOException ( Character ) ; }
Code	{ throw new IOException ( Character ) ; }
Distance : 12

153
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; input . charCount ( Character ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; input . charCount ( Character ) ; }
Distance : 8

154
Tree	{ pos . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

155
Tree	{ throw new CharSequence ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Code	{ throw new CharSequence ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Distance : 10

156
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , ? ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , ? ) ; }
Distance : 9

157
Tree	{ throw new CharSequence ( Character * pos ) ; }
Code	{ throw new CharSequence ( Character * pos ) ; }
Distance : 12

158
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; write . charCount ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; write . charCount ( Character , pos ) ; }
Distance : 10

159
Tree	{ super(); pos += Character . translate ( Character . codePointAt ( input , pos ) ) ; }
Code	{ super(); pos += Character . translate ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

160
Tree	{ throw pos . codePointAt ( Character [ input ] ) ; }
Code	{ throw pos . codePointAt ( Character [ input ] ) ; }
Distance : 10

161
Tree	{ pos . pt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos . pt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 4

162
Tree	{ throw CharSequence ; }
Code	{ throw CharSequence ; }
Distance : 15

163
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , pos ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , pos ) ; }
Distance : 8

164
Tree	{ throw new pos ( len ) ; }
Code	{ throw new pos ( len ) ; }
Distance : 13

165
Tree	{ pos = Character . charCount ( len . codePointAt ( input , pos ) ) ; }
Code	{ pos = Character . charCount ( len . codePointAt ( input , pos ) ) ; }
Distance : 3

166
Tree	{ throw new pos ( Character , false ) ; }
Code	{ throw new pos ( Character , false ) ; }
Distance : 11

167
Tree	{ throw CharSequence . charCount ( Character [ input ] ) ; }
Code	{ throw CharSequence . charCount ( Character [ input ] ) ; }
Distance : 9

168
Tree	{ pos . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ pos . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 4

169
Tree	{ throw new pos ( Character . codePointAt ( input , pos . codePointAt ( Character ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( input , pos . codePointAt ( Character ) ) , false ) ; }
Distance : 12

170
Tree	{ throw new length () ; }
Code	{ throw new length () ; }
Distance : 15

171
Tree	{ throw new pos ( Character , pos . codePointAt ( Character . codePointAt ( input , pos ) ) , pos , false ) ; }
Code	{ throw new pos ( Character , pos . codePointAt ( Character . codePointAt ( input , pos ) ) , pos , false ) ; }
Distance : 12

172
Tree	{ pos . translate ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos . translate ( Character . codePointAt ( input , pos ) ) ; }
Distance : 4

173
Tree	{ pos . Writer ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos . Writer ( Character . codePointAt ( input , pos ) ) ; }
Distance : 4

174
Tree	{ throw new pos ( out ) ; }
Code	{ throw new pos ( out ) ; }
Distance : 13

175
Tree	{ null pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ null pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

176
Tree	{ throw new pos ( Character * CharSequence ) ; }
Code	{ throw new pos ( Character * CharSequence ) ; }
Distance : 12

177
Tree	{ throw new c.length ( Character , false ) ; }
Code	{ throw new c.length ( Character , false ) ; }
Distance : 11

178
Tree	{ throw charCount ; }
Code	{ throw charCount ; }
Distance : 14

179
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; final }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; final }
Distance : 3

180
Tree	{ throw new charCount ( STRING_CONSTANT ) ; }
Code	{ throw new charCount ( STRING_CONSTANT ) ; }
Distance : 12

181
Tree	{ throw new charCount () ; }
Code	{ throw new charCount () ; }
Distance : 14

182
Tree	{ throw new Writer ( STRING_CONSTANT ) ; }
Code	{ throw new Writer ( STRING_CONSTANT ) ; }
Distance : 13

183
Tree	{ throw input ; }
Code	{ throw input ; }
Distance : 14

184
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( Character , pos ) , len ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( Character , pos ) , len ) ; }
Distance : 9

185
Tree	{ throw pt ; }
Code	{ throw pt ; }
Distance : 14

186
Tree	{ pos = Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos = Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

187
Tree	{ len += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ len += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

188
Tree	{ throw pt . charCount ( Character [ input ] ) ; }
Code	{ throw pt . charCount ( Character [ input ] ) ; }
Distance : 9

189
Tree	{ throw new Writer () ; }
Code	{ throw new Writer () ; }
Distance : 15

190
Tree	{ pos . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 4

191
Tree	{ throw c.length ; }
Code	{ throw c.length ; }
Distance : 15

192
Tree	{ throw new pos ( len , false ) ; }
Code	{ throw new pos ( len , false ) ; }
Distance : 12

193
Tree	{ throw new Character ( STRING_CONSTANT ) ; }
Code	{ throw new Character ( STRING_CONSTANT ) ; }
Distance : 12

194
Tree	{ pos = Character . pt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos = Character . pt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

195
Tree	{ throw len . charCount ( Character [ input ] ) ; }
Code	{ throw len . charCount ( Character [ input ] ) ; }
Distance : 9

196
Tree	{ throw new pos ( input * pos ) ; }
Code	{ throw new pos ( input * pos ) ; }
Distance : 12

197
Tree	{ len = Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ len = Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

198
Tree	{ throw new c.length () ; }
Code	{ throw new c.length () ; }
Distance : 15

199
Tree	{ throw new Character () ; }
Code	{ throw new Character () ; }
Distance : 14

========================================================================


========================================================================
Example Number: 50
Parent Code is: 
final CharSequence result = lookupMap . get ( subSeq ) ;
-------------------------------------------------------------------------------
Child code is: 
final CharSequence result = lookupMap . get ( subSeq . toString () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (43 (801{val=CharSequence})) (59 (800{val=result}) (204{val==}) (32 (800{val=lookupMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=subSeq}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (43 (801{val=CharSequence})) (59 (800{val=result}) (204{val==}) (32 (800{val=lookupMap}) (235{val=.}) (802{val=get}) (214{val=(}) (32 (800{val=subSeq}) (235{val=.}) (802{val=toString}) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/4/parent/src_main_java_org_apache_commons_lang3_text_translate_LookupTranslator.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	final CharSequence result = Writer . get ( ( Writer < CharSequence > ) Writer ) ;
Code	final CharSequence result = Writer . get ( ( Writer < CharSequence > ) Writer ) ;
Distance : 8

1
Tree	final CharSequence result = CharSequence . get ( Writer . get ( Writer ) ) ;
Code	final CharSequence result = CharSequence . get ( Writer . get ( Writer ) ) ;
Distance : 6

2
Tree	final CharSequence result = toString . get ( Writer ) ;
Code	final CharSequence result = toString . get ( Writer ) ;
Distance : 5

3
Tree	final CharSequence result = Writer . get ( Writer , result . get () ) ;
Code	final CharSequence result = Writer . get ( Writer , result . get () ) ;
Distance : 5

4
Tree	final CharSequence result = this . subSeq . get ( Writer ) ;
Code	final CharSequence result = this . subSeq . get ( Writer ) ;
Distance : 6

5
Tree	final toString result = get () . get ( Writer ) ;
Code	final toString result = get () . get ( Writer ) ;
Distance : 7

6
Tree	final CharSequence result = Writer . get ( ( Writer < CharSequence > ) result ) ;
Code	final CharSequence result = Writer . get ( ( Writer < CharSequence > ) result ) ;
Distance : 8

7
Tree	final input result = this . Writer . get ( Writer ) ;
Code	final input result = this . Writer . get ( Writer ) ;
Distance : 8

8
Tree	CharSequence result = Writer . get ( Writer ) ;
Code	CharSequence result = Writer . get ( Writer ) ;
Distance : 6

9
Tree	final CharSequence result = new lookupMap ( Writer ) ;
Code	final CharSequence result = new lookupMap ( Writer ) ;
Distance : 7

10
Tree	final CharSequence result = Writer . get ( Writer . get () . get () ) ;
Code	final CharSequence result = Writer . get ( Writer . get () . get () ) ;
Distance : 6

11
Tree	input result = get ( Writer ) ;
Code	input result = get ( Writer ) ;
Distance : 8

12
Tree	final CharSequence result = result . get ( Writer ) ;
Code	final CharSequence result = result . get ( Writer ) ;
Distance : 5

13
Tree	final CharSequence result = Writer . get ( Writer , get ) ;
Code	final CharSequence result = Writer . get ( Writer , get ) ;
Distance : 5

14
Tree	CharSequence result = result . get ( Writer ) ;
Code	CharSequence result = result . get ( Writer ) ;
Distance : 6

15
Tree	final CharSequence result = this . translate . get ( Writer ) ;
Code	final CharSequence result = this . translate . get ( Writer ) ;
Distance : 7

16
Tree	final CharSequence result = this . get . get ( subSeq ) ;
Code	final CharSequence result = this . get . get ( subSeq ) ;
Distance : 6

17
Tree	final CharSequence result = translate . get ( Writer . get () ) ;
Code	final CharSequence result = translate . get ( Writer . get () ) ;
Distance : 3

18
Tree	final CharSequence result = new CharSequence ( Writer ) ;
Code	final CharSequence result = new CharSequence ( Writer ) ;
Distance : 7

19
Tree	CharSequence result = get ( i ) ;
Code	CharSequence result = get ( i ) ;
Distance : 7

20
Tree	final CharSequence result = Writer . get ( subSeq . get () ) ;
Code	final CharSequence result = Writer . get ( subSeq . get () ) ;
Distance : 2

21
Tree	get result = get ( Writer ) ;
Code	get result = get ( Writer ) ;
Distance : 8

22
Tree	CharSequence result = toString ( Writer ) ;
Code	CharSequence result = toString ( Writer ) ;
Distance : 8

23
Tree	final CharSequence result = translate . get ( Writer , Writer ) ;
Code	final CharSequence result = translate . get ( Writer , Writer ) ;
Distance : 5

24
Tree	final CharSequence result = Writer . get ( get () ) ;
Code	final CharSequence result = Writer . get ( get () ) ;
Distance : 4

25
Tree	final CharSequence result = this . get . get ( Writer ) ;
Code	final CharSequence result = this . get . get ( Writer ) ;
Distance : 6

26
Tree	final CharSequence result = lookupMap . get ( ( Writer < Writer > ) Writer ) ;
Code	final CharSequence result = lookupMap . get ( ( Writer < Writer > ) Writer ) ;
Distance : 7

27
Tree	final CharSequence result = CharSequence . get ( Writer ) ;
Code	final CharSequence result = CharSequence . get ( Writer ) ;
Distance : 5

28
Tree	final CharSequence result = Writer . get ( subSeq . get ( Writer ) ) ;
Code	final CharSequence result = Writer . get ( subSeq . get ( Writer ) ) ;
Distance : 5

29
Tree	final CharSequence result = Writer . get ( Writer , lookupMap ) ;
Code	final CharSequence result = Writer . get ( Writer , lookupMap ) ;
Distance : 5

30
Tree	final CharSequence result = Writer . get ( ( Writer < Writer > ) result ) ;
Code	final CharSequence result = Writer . get ( ( Writer < Writer > ) result ) ;
Distance : 8

31
Tree	CharSequence i = get ( Writer ) ;
Code	CharSequence i = get ( Writer ) ;
Distance : 8

32
Tree	final CharSequence result = toString . get ( Writer . get () . get () ) ;
Code	final CharSequence result = toString . get ( Writer . get () . get () ) ;
Distance : 6

33
Tree	final CharSequence result = lookupMap . get ( get ( Writer ) ) ;
Code	final CharSequence result = lookupMap . get ( get ( Writer ) ) ;
Distance : 4

34
Tree	final CharSequence result = Writer . get ( Writer . get ( i ) ) ;
Code	final CharSequence result = Writer . get ( Writer . get ( i ) ) ;
Distance : 6

35
Tree	max result = get ( Writer ) ;
Code	max result = get ( Writer ) ;
Distance : 8

36
Tree	final CharSequence result = Writer . get ( Writer , get ) ;
Code	final CharSequence result = Writer . get ( Writer , get ) ;
Distance : 5

37
Tree	final CharSequence result = this . Writer . get ( get ) ;
Code	final CharSequence result = this . Writer . get ( get ) ;
Distance : 7

38
Tree	final CharSequence result = Writer . get ( subSeq , Writer ) ;
Code	final CharSequence result = Writer . get ( subSeq , Writer ) ;
Distance : 4

39
Tree	final CharSequence result = toString . get ( Writer . get ( Writer ) ) ;
Code	final CharSequence result = toString . get ( Writer . get ( Writer ) ) ;
Distance : 6

40
Tree	final CharSequence result = Writer . get ( Writer ( Writer ) ) ;
Code	final CharSequence result = Writer . get ( Writer ( Writer ) ) ;
Distance : 5

41
Tree	final CharSequence result = Writer . get ( Writer . get ( get ) ) ;
Code	final CharSequence result = Writer . get ( Writer . get ( get ) ) ;
Distance : 6

42
Tree	final CharSequence result = Writer . get ( Writer , get . get () ) ;
Code	final CharSequence result = Writer . get ( Writer , get . get () ) ;
Distance : 5

43
Tree	final CharSequence result = new result ( Writer ) ;
Code	final CharSequence result = new result ( Writer ) ;
Distance : 7

44
Tree	final CharSequence result = this . subSequence . get ( Writer ) ;
Code	final CharSequence result = this . subSequence . get ( Writer ) ;
Distance : 7

45
Tree	final CharSequence result = new get ( Writer ) ;
Code	final CharSequence result = new get ( Writer ) ;
Distance : 6

46
Tree	CharSequence result = toString . get ( Writer ) ;
Code	CharSequence result = toString . get ( Writer ) ;
Distance : 6

47
Tree	final CharSequence result = new CharSequence ( this , Writer ) ;
Code	final CharSequence result = new CharSequence ( this , Writer ) ;
Distance : 7

48
Tree	CharSequence result = translate . get ( Writer ) ;
Code	CharSequence result = translate . get ( Writer ) ;
Distance : 6

49
Tree	final CharSequence result = translate . get ( Writer () ) ;
Code	final CharSequence result = translate . get ( Writer () ) ;
Distance : 4

50
Tree	final CharSequence result = new lookupMap ( this , Writer ) ;
Code	final CharSequence result = new lookupMap ( this , Writer ) ;
Distance : 7

51
Tree	final CharSequence result = new IOException ( Writer ) ;
Code	final CharSequence result = new IOException ( Writer ) ;
Distance : 7

52
Tree	final CharSequence result = lookupMap . get ( Writer , input ) ;
Code	final CharSequence result = lookupMap . get ( Writer , input ) ;
Distance : 4

53
Tree	final CharSequence result = this . Writer . get ( i ) ;
Code	final CharSequence result = this . Writer . get ( i ) ;
Distance : 7

54
Tree	final CharSequence result = Writer . get ( Writer , result ) ;
Code	final CharSequence result = Writer . get ( Writer , result ) ;
Distance : 5

55
Tree	final CharSequence result = new result ( this , Writer ) ;
Code	final CharSequence result = new result ( this , Writer ) ;
Distance : 7

56
Tree	final CharSequence result = Writer . get ( Writer () ) ;
Code	final CharSequence result = Writer . get ( Writer () ) ;
Distance : 4

57
Tree	index result = get ( Writer ) ;
Code	index result = get ( Writer ) ;
Distance : 8

58
Tree	final CharSequence result = Writer . get ( Writer , Writer ) ;
Code	final CharSequence result = Writer . get ( Writer , Writer ) ;
Distance : 5

59
Tree	final CharSequence i = get ( Writer ) ;
Code	final CharSequence i = get ( Writer ) ;
Distance : 7

60
Tree	final CharSequence result = i . get () ;
Code	final CharSequence result = i . get () ;
Distance : 6

61
Tree	final CharSequence result = Writer . get ( Writer ( i ) ) ;
Code	final CharSequence result = Writer . get ( Writer ( i ) ) ;
Distance : 5

62
Tree	final CharSequence result = get . get () ;
Code	final CharSequence result = get . get () ;
Distance : 6

63
Tree	final CharSequence result = get ( result ) ;
Code	final CharSequence result = get ( result ) ;
Distance : 6

64
Tree	final CharSequence result = new translate ( Writer ) ;
Code	final CharSequence result = new translate ( Writer ) ;
Distance : 7

65
Tree	final CharSequence result = lookupMap . get ( Writer , Writer ) ;
Code	final CharSequence result = lookupMap . get ( Writer , Writer ) ;
Distance : 4

66
Tree	final max result = get ( Writer ) ;
Code	final max result = get ( Writer ) ;
Distance : 7

67
Tree	final CharSequence result = toString . get ( null ) ;
Code	final CharSequence result = toString . get ( null ) ;
Distance : 5

68
Tree	final CharSequence result = toString () . get ( Writer ) ;
Code	final CharSequence result = toString () . get ( Writer ) ;
Distance : 6

69
Tree	final CharSequence result = Writer . get ( Writer , input . get () ) ;
Code	final CharSequence result = Writer . get ( Writer , input . get () ) ;
Distance : 5

70
Tree	final CharSequence result = Writer . get ( Writer , Writer . get () ) ;
Code	final CharSequence result = Writer . get ( Writer , Writer . get () ) ;
Distance : 5

71
Tree	final CharSequence result = lookupMap . get ( Writer ) ;
Code	final CharSequence result = lookupMap . get ( Writer ) ;
Distance : 4

72
Tree	final CharSequence result = get () . get ( i ) ;
Code	final CharSequence result = get () . get ( i ) ;
Distance : 6

73
Tree	final CharSequence result = input . get ( null ) ;
Code	final CharSequence result = input . get ( null ) ;
Distance : 5

74
Tree	final input result = Writer . get ( null ) ;
Code	final input result = Writer . get ( null ) ;
Distance : 6

75
Tree	final CharSequence result = CharSequence . get ( Writer ) ;
Code	final CharSequence result = CharSequence . get ( Writer ) ;
Distance : 5

76
Tree	final CharSequence result = toString . get ( Writer ( Writer ) ) ;
Code	final CharSequence result = toString . get ( Writer ( Writer ) ) ;
Distance : 5

77
Tree	final CharSequence result = toString . get ( Writer ) ;
Code	final CharSequence result = toString . get ( Writer ) ;
Distance : 5

78
Tree	final CharSequence result = Writer . get ( get ) ;
Code	final CharSequence result = Writer . get ( get ) ;
Distance : 5

79
Tree	CharSequence result = get ( subSeq ) ;
Code	CharSequence result = get ( subSeq ) ;
Distance : 6

80
Tree	final CharSequence result = new Writer ( Writer ) ;
Code	final CharSequence result = new Writer ( Writer ) ;
Distance : 7

81
Tree	final CharSequence result = toString . get ( Writer . get () ) ;
Code	final CharSequence result = toString . get ( Writer . get () ) ;
Distance : 3

82
Tree	final CharSequence result = new Writer ( this , get ) ;
Code	final CharSequence result = new Writer ( this , get ) ;
Distance : 7

83
Tree	final CharSequence result = result . get ( Writer ( Writer ) ) ;
Code	final CharSequence result = result . get ( Writer ( Writer ) ) ;
Distance : 5

84
Tree	final CharSequence result = input . get () ;
Code	final CharSequence result = input . get () ;
Distance : 6

85
Tree	final CharSequence result = CharSequence . get ( null ) ;
Code	final CharSequence result = CharSequence . get ( null ) ;
Distance : 5

86
Tree	final toString result = get ( Writer ) ;
Code	final toString result = get ( Writer ) ;
Distance : 7

87
Tree	final CharSequence result = result . get ( Writer . get ( Writer ) ) ;
Code	final CharSequence result = result . get ( Writer . get ( Writer ) ) ;
Distance : 6

88
Tree	final CharSequence result = lookupMap . get ( Writer . get () ) ;
Code	final CharSequence result = lookupMap . get ( Writer . get () ) ;
Distance : 2

89
Tree	final CharSequence i = get () . get ( Writer ) ;
Code	final CharSequence i = get () . get ( Writer ) ;
Distance : 7

90
Tree	final CharSequence result = this . Writer . get ( Writer ) ;
Code	final CharSequence result = this . Writer . get ( Writer ) ;
Distance : 7

91
Tree	final CharSequence result = new Writer ( this , subSeq ) ;
Code	final CharSequence result = new Writer ( this , subSeq ) ;
Distance : 7

92
Tree	final CharSequence result = translate ( Writer ) ;
Code	final CharSequence result = translate ( Writer ) ;
Distance : 7

93
Tree	final CharSequence result = get () . get ( get ) ;
Code	final CharSequence result = get () . get ( get ) ;
Distance : 6

94
Tree	CharSequence result = lookupMap . get ( Writer ) ;
Code	CharSequence result = lookupMap . get ( Writer ) ;
Distance : 5

95
Tree	final CharSequence result = Writer . get ( Writer . get ( subSeq ) ) ;
Code	final CharSequence result = Writer . get ( Writer . get ( subSeq ) ) ;
Distance : 6

96
Tree	final CharSequence result = lookupMap . get ( Writer () ) ;
Code	final CharSequence result = lookupMap . get ( Writer () ) ;
Distance : 3

97
Tree	final CharSequence result = result . get ( Writer . get () ) ;
Code	final CharSequence result = result . get ( Writer . get () ) ;
Distance : 3

98
Tree	final CharSequence result = new Writer ( this , input ) ;
Code	final CharSequence result = new Writer ( this , input ) ;
Distance : 7

99
Tree	final CharSequence result = Writer . get ( Writer ) ;
Code	final CharSequence result = Writer . get ( Writer ) ;
Distance : 5

100
Tree	final CharSequence result = toString . get ( Writer () ) ;
Code	final CharSequence result = toString . get ( Writer () ) ;
Distance : 4

101
Tree	final CharSequence result = lookupMap . get ( Writer . get () . get () ) ;
Code	final CharSequence result = lookupMap . get ( Writer . get () . get () ) ;
Distance : 5

102
Tree	final CharSequence result = new Writer ( this , Writer ) ;
Code	final CharSequence result = new Writer ( this , Writer ) ;
Distance : 7

103
Tree	final CharSequence result = result . get ( Writer () ) ;
Code	final CharSequence result = result . get ( Writer () ) ;
Distance : 4

104
Tree	final CharSequence result = CharSequence . get ( Writer . get () ) ;
Code	final CharSequence result = CharSequence . get ( Writer . get () ) ;
Distance : 3

105
Tree	final CharSequence result = i . get ( Writer . get () ) ;
Code	final CharSequence result = i . get ( Writer . get () ) ;
Distance : 3

106
Tree	final CharSequence result = Writer . get ( Writer , CharSequence ) ;
Code	final CharSequence result = Writer . get ( Writer , CharSequence ) ;
Distance : 5

107
Tree	final CharSequence result = CharSequence . get ( Writer () ) ;
Code	final CharSequence result = CharSequence . get ( Writer () ) ;
Distance : 4

108
Tree	final CharSequence result = result . get ( null ) ;
Code	final CharSequence result = result . get ( null ) ;
Distance : 5

109
Tree	final CharSequence result = new Writer ( subSeq ) ;
Code	final CharSequence result = new Writer ( subSeq ) ;
Distance : 6

110
Tree	final CharSequence result = Writer . get ( Writer , CharSequence ) ;
Code	final CharSequence result = Writer . get ( Writer , CharSequence ) ;
Distance : 5

111
Tree	final CharSequence result = lookupMap . get ( Writer , Writer ) ;
Code	final CharSequence result = lookupMap . get ( Writer , Writer ) ;
Distance : 4

112
Tree	final CharSequence result = get () . get ( subSequence ) ;
Code	final CharSequence result = get () . get ( subSequence ) ;
Distance : 6

113
Tree	final CharSequence result = Writer . get ( Writer , lookupMap . get () ) ;
Code	final CharSequence result = Writer . get ( Writer , lookupMap . get () ) ;
Distance : 5

114
Tree	final CharSequence result = lookupMap . get ( Writer , input . get () ) ;
Code	final CharSequence result = lookupMap . get ( Writer , input . get () ) ;
Distance : 4

115
Tree	final CharSequence result = translate . get ( Writer . get ( Writer ) ) ;
Code	final CharSequence result = translate . get ( Writer . get ( Writer ) ) ;
Distance : 6

116
Tree	final CharSequence result = translate . get ( Writer ) ;
Code	final CharSequence result = translate . get ( Writer ) ;
Distance : 5

117
Tree	final CharSequence result = i . get ( null ) ;
Code	final CharSequence result = i . get ( null ) ;
Distance : 5

118
Tree	final CharSequence result = lookupMap . get ( Writer , Writer . get () ) ;
Code	final CharSequence result = lookupMap . get ( Writer , Writer . get () ) ;
Distance : 4

119
Tree	final CharSequence result = result . get ( Writer ) ;
Code	final CharSequence result = result . get ( Writer ) ;
Distance : 5

120
Tree	final input result = Writer . get () ;
Code	final input result = Writer . get () ;
Distance : 7

121
Tree	final CharSequence result = lookupMap . get ( get () ) ;
Code	final CharSequence result = lookupMap . get ( get () ) ;
Distance : 3

122
Tree	final CharSequence result = get ( Writer ) ;
Code	final CharSequence result = get ( Writer ) ;
Distance : 6

123
Tree	final CharSequence result = get () . get ( Writer ) ;
Code	final CharSequence result = get () . get ( Writer ) ;
Distance : 6

124
Tree	final CharSequence result = Writer . get () ;
Code	final CharSequence result = Writer . get () ;
Distance : 6

125
Tree	final CharSequence result = Writer . get ( ( Writer < Writer > ) lookupMap ) ;
Code	final CharSequence result = Writer . get ( ( Writer < Writer > ) lookupMap ) ;
Distance : 8

126
Tree	final CharSequence result = Writer . get ( null ) ;
Code	final CharSequence result = Writer . get ( null ) ;
Distance : 5

127
Tree	final CharSequence result = Writer . get ( Writer , CharSequence . get () ) ;
Code	final CharSequence result = Writer . get ( Writer , CharSequence . get () ) ;
Distance : 5

128
Tree	final CharSequence result = this . Writer . get ( subSeq ) ;
Code	final CharSequence result = this . Writer . get ( subSeq ) ;
Distance : 6

129
Tree	final CharSequence result = i . get ( Writer ) ;
Code	final CharSequence result = i . get ( Writer ) ;
Distance : 5

130
Tree	CharSequence result = get ( Writer ) ;
Code	CharSequence result = get ( Writer ) ;
Distance : 7

131
Tree	final CharSequence result = Writer . get ( subSeq ) ;
Code	final CharSequence result = Writer . get ( subSeq ) ;
Distance : 4

132
Tree	final CharSequence result = get () . get ( CharSequence ) ;
Code	final CharSequence result = get () . get ( CharSequence ) ;
Distance : 6

133
Tree	final CharSequence result = new Writer ( this , i ) ;
Code	final CharSequence result = new Writer ( this , i ) ;
Distance : 7

134
Tree	final CharSequence result = Writer . get ( Writer ) ;
Code	final CharSequence result = Writer . get ( Writer ) ;
Distance : 5

135
Tree	final CharSequence result = Writer . get ( get . get () ) ;
Code	final CharSequence result = Writer . get ( get . get () ) ;
Distance : 3

136
Tree	final CharSequence result = lookupMap . get () ;
Code	final CharSequence result = lookupMap . get () ;
Distance : 5

137
Tree	final input result = get () . get ( Writer ) ;
Code	final input result = get () . get ( Writer ) ;
Distance : 7

138
Tree	final CharSequence result = CharSequence . get ( Writer ( Writer ) ) ;
Code	final CharSequence result = CharSequence . get ( Writer ( Writer ) ) ;
Distance : 5

139
Tree	final input result = get ( Writer ) ;
Code	final input result = get ( Writer ) ;
Distance : 7

140
Tree	final CharSequence result = Writer . get ( Writer , toString ) ;
Code	final CharSequence result = Writer . get ( Writer , toString ) ;
Distance : 4

141
Tree	final CharSequence result = lookupMap . get ( Writer ) ;
Code	final CharSequence result = lookupMap . get ( Writer ) ;
Distance : 4

142
Tree	final CharSequence result = result . get ( Writer , Writer ) ;
Code	final CharSequence result = result . get ( Writer , Writer ) ;
Distance : 5

143
Tree	final CharSequence result = get () . get ( subSeq ) ;
Code	final CharSequence result = get () . get ( subSeq ) ;
Distance : 5

144
Tree	toString result = get ( Writer ) ;
Code	toString result = get ( Writer ) ;
Distance : 8

145
Tree	final CharSequence result = i . get ( Writer () ) ;
Code	final CharSequence result = i . get ( Writer () ) ;
Distance : 4

146
Tree	final CharSequence result = toString ( Writer ) ;
Code	final CharSequence result = toString ( Writer ) ;
Distance : 7

147
Tree	final CharSequence result = Writer . get ( Writer , toString . get () ) ;
Code	final CharSequence result = Writer . get ( Writer , toString . get () ) ;
Distance : 5

148
Tree	final CharSequence result = lookupMap . get ( ( Writer < Writer > ) result ) ;
Code	final CharSequence result = lookupMap . get ( ( Writer < Writer > ) result ) ;
Distance : 7

149
Tree	final CharSequence result = translate . get ( Writer ) ;
Code	final CharSequence result = translate . get ( Writer ) ;
Distance : 5

150
Tree	final CharSequence result = lookupMap . get ( null ) ;
Code	final CharSequence result = lookupMap . get ( null ) ;
Distance : 4

151
Tree	final CharSequence result = CharSequence . get ( Writer , Writer ) ;
Code	final CharSequence result = CharSequence . get ( Writer , Writer ) ;
Distance : 5

152
Tree	final CharSequence result = Writer . get ( Writer . get () ) ;
Code	final CharSequence result = Writer . get ( Writer . get () ) ;
Distance : 3

153
Tree	final CharSequence result = Writer . get ( Writer , lookupMap ) ;
Code	final CharSequence result = Writer . get ( Writer , lookupMap ) ;
Distance : 5

154
Tree	final CharSequence result = get ( subSeq ) ;
Code	final CharSequence result = get ( subSeq ) ;
Distance : 5

155
Tree	final CharSequence result = Writer . get ( Writer , i ) ;
Code	final CharSequence result = Writer . get ( Writer , i ) ;
Distance : 5

156
Tree	final CharSequence result = Writer . get ( subSeq ) ;
Code	final CharSequence result = Writer . get ( subSeq ) ;
Distance : 4

157
Tree	final CharSequence result = toString . get () ;
Code	final CharSequence result = toString . get () ;
Distance : 6

158
Tree	CharSequence result = Writer . get ( get ) ;
Code	CharSequence result = Writer . get ( get ) ;
Distance : 6

159
Tree	final CharSequence result = i . get ( Writer ) ;
Code	final CharSequence result = i . get ( Writer ) ;
Distance : 5

160
Tree	final CharSequence result = Writer . get ( Writer . get ( Writer ) ) ;
Code	final CharSequence result = Writer . get ( Writer . get ( Writer ) ) ;
Distance : 6

161
Tree	final CharSequence result = Writer . get ( ( Writer < Writer > ) i ) ;
Code	final CharSequence result = Writer . get ( ( Writer < Writer > ) i ) ;
Distance : 8

162
Tree	final CharSequence result = Writer . get ( Writer . toString () . get () ) ;
Code	final CharSequence result = Writer . get ( Writer . toString () . get () ) ;
Distance : 5

163
Tree	final CharSequence result = new IOException ( this , Writer ) ;
Code	final CharSequence result = new IOException ( this , Writer ) ;
Distance : 7

164
Tree	final CharSequence result = Writer . get ( Writer , i . get () ) ;
Code	final CharSequence result = Writer . get ( Writer , i . get () ) ;
Distance : 5

165
Tree	final CharSequence result = get . get ( null ) ;
Code	final CharSequence result = get . get ( null ) ;
Distance : 5

166
Tree	final CharSequence result = result . get ( Writer . get () . get () ) ;
Code	final CharSequence result = result . get ( Writer . get () . get () ) ;
Distance : 6

167
Tree	final CharSequence result = Writer . get ( i ) ;
Code	final CharSequence result = Writer . get ( i ) ;
Distance : 5

168
Tree	final CharSequence result = Writer . get ( get ) ;
Code	final CharSequence result = Writer . get ( get ) ;
Distance : 5

169
Tree	final CharSequence result = new translate ( this , Writer ) ;
Code	final CharSequence result = new translate ( this , Writer ) ;
Distance : 7

170
Tree	final CharSequence result = translate . get ( null ) ;
Code	final CharSequence result = translate . get ( null ) ;
Distance : 5

171
Tree	final CharSequence result = translate . get ( Writer . get () . get () ) ;
Code	final CharSequence result = translate . get ( Writer . get () . get () ) ;
Distance : 6

172
Tree	toString result = Writer . get ( Writer ) ;
Code	toString result = Writer . get ( Writer ) ;
Distance : 7

173
Tree	final CharSequence result = Writer . get ( Writer . toString () ) ;
Code	final CharSequence result = Writer . get ( Writer . toString () ) ;
Distance : 2

174
Tree	final CharSequence result = result . get () ;
Code	final CharSequence result = result . get () ;
Distance : 6

175
Tree	CharSequence result = Writer . get ( subSeq ) ;
Code	CharSequence result = Writer . get ( subSeq ) ;
Distance : 5

176
Tree	final CharSequence result = Writer . get ( Writer , Writer ) ;
Code	final CharSequence result = Writer . get ( Writer , Writer ) ;
Distance : 5

177
Tree	final CharSequence result = i . get ( Writer . get () . get () ) ;
Code	final CharSequence result = i . get ( Writer . get () . get () ) ;
Distance : 6

178
Tree	CharSequence result = CharSequence . get ( Writer ) ;
Code	CharSequence result = CharSequence . get ( Writer ) ;
Distance : 6

179
Tree	final CharSequence result = get . get ( Writer () ) ;
Code	final CharSequence result = get . get ( Writer () ) ;
Distance : 4

180
Tree	final CharSequence result = Writer . get ( get ( Writer ) ) ;
Code	final CharSequence result = Writer . get ( get ( Writer ) ) ;
Distance : 5

181
Tree	final CharSequence result = lookupMap . get ( Writer ( Writer ) ) ;
Code	final CharSequence result = lookupMap . get ( Writer ( Writer ) ) ;
Distance : 4

182
Tree	final CharSequence result = lookupMap . get ( Writer . get ( Writer ) ) ;
Code	final CharSequence result = lookupMap . get ( Writer . get ( Writer ) ) ;
Distance : 5

183
Tree	final input result = new Writer ( Writer ) ;
Code	final input result = new Writer ( Writer ) ;
Distance : 8

184
Tree	final CharSequence result = translate . get ( Writer ( Writer ) ) ;
Code	final CharSequence result = translate . get ( Writer ( Writer ) ) ;
Distance : 5

185
Tree	final CharSequence result = toString . get ( Writer , Writer ) ;
Code	final CharSequence result = toString . get ( Writer , Writer ) ;
Distance : 5

186
Tree	final CharSequence result = get . get ( Writer ) ;
Code	final CharSequence result = get . get ( Writer ) ;
Distance : 5

187
Tree	final CharSequence result = get ( i ) ;
Code	final CharSequence result = get ( i ) ;
Distance : 6

188
Tree	final CharSequence result = lookupMap . get ( ( Writer < CharSequence > ) Writer ) ;
Code	final CharSequence result = lookupMap . get ( ( Writer < CharSequence > ) Writer ) ;
Distance : 7

189
Tree	final CharSequence result = CharSequence . get ( Writer . get () . get () ) ;
Code	final CharSequence result = CharSequence . get ( Writer . get () . get () ) ;
Distance : 6

190
Tree	final CharSequence result = Writer . get ( ( Writer < Writer > ) Writer ) ;
Code	final CharSequence result = Writer . get ( ( Writer < Writer > ) Writer ) ;
Distance : 8

191
Tree	CharSequence result = get . get ( Writer ) ;
Code	CharSequence result = get . get ( Writer ) ;
Distance : 6

192
Tree	final CharSequence result = new toString ( Writer ) ;
Code	final CharSequence result = new toString ( Writer ) ;
Distance : 7

193
Tree	final CharSequence result = Writer . get ( Writer ( subSeq ) ) ;
Code	final CharSequence result = Writer . get ( Writer ( subSeq ) ) ;
Distance : 5

194
Tree	final CharSequence result = translate . get ( ( Writer < Writer > ) Writer ) ;
Code	final CharSequence result = translate . get ( ( Writer < Writer > ) Writer ) ;
Distance : 8

195
Tree	final CharSequence result = translate . get () ;
Code	final CharSequence result = translate . get () ;
Distance : 6

196
Tree	final CharSequence result = Writer . get ( subSeq . get () . get () ) ;
Code	final CharSequence result = Writer . get ( subSeq . get () . get () ) ;
Distance : 5

197
Tree	final CharSequence result = Writer . get ( Writer , input ) ;
Code	final CharSequence result = Writer . get ( Writer , input ) ;
Distance : 5

198
Tree	final CharSequence result = CharSequence . get () ;
Code	final CharSequence result = CharSequence . get () ;
Distance : 6

199
Tree	final CharSequence result = Writer . get ( get . get () . get () ) ;
Code	final CharSequence result = Writer . get ( get . get () . get () ) ;
Distance : 6

========================================================================


========================================================================
Example Number: 51
Parent Code is: 
final int cols = problem . getAllParameters () . length ;
-------------------------------------------------------------------------------
Child code is: 
final int cols = problem . getUnboundParameters () . length ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=cols}) (204{val==}) (22 (32 (800{val=problem}) (235{val=.}) (802{val=getAllParameters}) (216{val=()})) (235{val=.}) (800{val=length}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=cols}) (204{val==}) (22 (32 (800{val=problem}) (235{val=.}) (802{val=getUnboundParameters}) (216{val=()})) (235{val=.}) (800{val=length}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/100/parent/src_java_org_apache_commons_math_estimation_AbstractEstimator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	int cols = problem . jTj () ;
Code	int cols = problem . jTj () ;
Distance : 4

1
Tree	final int [] [] cols = problem . getCovariances ( getCovariances ) ;
Code	final int [] [] cols = problem . getCovariances ( getCovariances ) ;
Distance : 6

2
Tree	double inverse = ( problem ) length ;
Code	double inverse = ( problem ) length ;
Distance : 8

3
Tree	final int cols = problem . cols ( false , length ) ;
Code	final int cols = problem . cols ( false , length ) ;
Distance : 5

4
Tree	double [] [] cols = problem . getCovariances () ;
Code	double [] [] cols = problem . getCovariances () ;
Distance : 6

5
Tree	int getCovariances = ( problem ) length ;
Code	int getCovariances = ( problem ) length ;
Distance : 7

6
Tree	final int [] [] cols = problem . inverse () ;
Code	final int [] [] cols = problem . inverse () ;
Distance : 5

7
Tree	final int [] cols = problem . jTj () ;
Code	final int [] cols = problem . jTj () ;
Distance : 4

8
Tree	final int [] [] getCovariances = problem . getCovariances () ;
Code	final int [] [] getCovariances = problem . getCovariances () ;
Distance : 6

9
Tree	final int cols = problem . getCovariances ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int cols = problem . getCovariances ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

10
Tree	final int problem = ( problem ) length ;
Code	final int problem = ( problem ) length ;
Distance : 6

11
Tree	final int [] [] cols = problem . cols () ;
Code	final int [] [] cols = problem . cols () ;
Distance : 5

12
Tree	int cols = problem . cols () ;
Code	int cols = problem . cols () ;
Distance : 4

13
Tree	final double cols = ( problem ) length ;
Code	final double cols = ( problem ) length ;
Distance : 6

14
Tree	final int getCovariances = problem ;
Code	final int getCovariances = problem ;
Distance : 6

15
Tree	final int [] inverse = problem . getCovariances () ;
Code	final int [] inverse = problem . getCovariances () ;
Distance : 5

16
Tree	long cols = ( problem ) length ;
Code	long cols = ( problem ) length ;
Distance : 7

17
Tree	final int [] [] inverse = problem . getCovariances () ;
Code	final int [] [] inverse = problem . getCovariances () ;
Distance : 6

18
Tree	final Object cols = problem . getCovariances () ;
Code	final Object cols = problem . getCovariances () ;
Distance : 4

19
Tree	final int [] cols = problem . cols () ;
Code	final int [] cols = problem . cols () ;
Distance : 4

20
Tree	final int [] getCovariances = problem . getCovariances () ;
Code	final int [] getCovariances = problem . getCovariances () ;
Distance : 5

21
Tree	final double cols = problem ;
Code	final double cols = problem ;
Distance : 6

22
Tree	final int cols = problem . getCovariances () ;
Code	final int cols = problem . getCovariances () ;
Distance : 3

23
Tree	final int cols = ( problem ) length ;
Code	final int cols = ( problem ) length ;
Distance : 5

24
Tree	final int inverse = problem . getCovariances () ;
Code	final int inverse = problem . getCovariances () ;
Distance : 4

25
Tree	int problem = problem . getCovariances () ;
Code	int problem = problem . getCovariances () ;
Distance : 5

26
Tree	int [] [] cols = problem . cols () ;
Code	int [] [] cols = problem . cols () ;
Distance : 6

27
Tree	final int cols = problem . getCovariances ( jTj ) ;
Code	final int cols = problem . getCovariances ( jTj ) ;
Distance : 4

28
Tree	boolean cols = ( problem ) length ;
Code	boolean cols = ( problem ) length ;
Distance : 7

29
Tree	long [] problem = problem . getCovariances () ;
Code	long [] problem = problem . getCovariances () ;
Distance : 6

30
Tree	final int [] [] cols = problem . getCovariances () ;
Code	final int [] [] cols = problem . getCovariances () ;
Distance : 5

31
Tree	final int [] [] cols = problem . getCovariances ( jTj ) ;
Code	final int [] [] cols = problem . getCovariances ( jTj ) ;
Distance : 6

32
Tree	final int i = ( problem ) length ;
Code	final int i = ( problem ) length ;
Distance : 6

33
Tree	final int [] cols = problem . getAllParameters () ;
Code	final int [] cols = problem . getAllParameters () ;
Distance : 4

34
Tree	final int inverse = problem . getCovariances () . length ;
Code	final int inverse = problem . getCovariances () . length ;
Distance : 2

35
Tree	final int rows = problem . getCovariances () . length ;
Code	final int rows = problem . getCovariances () . length ;
Distance : 2

36
Tree	int [] [] cols = problem . jTj () ;
Code	int [] [] cols = problem . jTj () ;
Distance : 6

37
Tree	final Object inverse = problem . getCovariances () ;
Code	final Object inverse = problem . getCovariances () ;
Distance : 5

38
Tree	char [] [] cols = problem . getCovariances () ;
Code	char [] [] cols = problem . getCovariances () ;
Distance : 6

39
Tree	int cols = ( problem ) length ;
Code	int cols = ( problem ) length ;
Distance : 6

40
Tree	long [] [] cols = problem . getCovariances () ;
Code	long [] [] cols = problem . getCovariances () ;
Distance : 6

41
Tree	final int problem = problem . getCovariances () - NUMBER_CONSTANT ;
Code	final int problem = problem . getCovariances () - NUMBER_CONSTANT ;
Distance : 4

42
Tree	final int getCovariances = problem . getCovariances () . length ;
Code	final int getCovariances = problem . getCovariances () . length ;
Distance : 2

43
Tree	final int cols = problem . cols () ;
Code	final int cols = problem . cols () ;
Distance : 3

44
Tree	final int cols = problem . cols () - NUMBER_CONSTANT ;
Code	final int cols = problem . cols () - NUMBER_CONSTANT ;
Distance : 3

45
Tree	int [] [] problem = problem . getCovariances () ;
Code	int [] [] problem = problem . getCovariances () ;
Distance : 7

46
Tree	final int cols = problem . inverse () . length ;
Code	final int cols = problem . inverse () . length ;
Distance : 1

47
Tree	int [] problem = problem . getCovariances () ;
Code	int [] problem = problem . getCovariances () ;
Distance : 6

48
Tree	char [] problem = problem . getCovariances () ;
Code	char [] problem = problem . getCovariances () ;
Distance : 6

49
Tree	final int problem = problem . getCovariances () ;
Code	final int problem = problem . getCovariances () ;
Distance : 4

50
Tree	long cols = problem . getCovariances () ;
Code	long cols = problem . getCovariances () ;
Distance : 5

51
Tree	final int rows = problem . getCovariances ( new Object [ NUMBER_CONSTANT ] ) ;
Code	final int rows = problem . getCovariances ( new Object [ NUMBER_CONSTANT ] ) ;
Distance : 9

52
Tree	final int [] [] rows = problem . getCovariances () ;
Code	final int [] [] rows = problem . getCovariances () ;
Distance : 6

53
Tree	boolean cols = problem . getCovariances () ;
Code	boolean cols = problem . getCovariances () ;
Distance : 5

54
Tree	final double cols = problem . getCovariances () ;
Code	final double cols = problem . getCovariances () ;
Distance : 4

55
Tree	final int rows = problem ;
Code	final int rows = problem ;
Distance : 6

56
Tree	final int problem = problem . getCovariances ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int problem = problem . getCovariances ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

57
Tree	final int [] [] cols = problem . getCovariances ( problem , NUMBER_CONSTANT ) ;
Code	final int [] [] cols = problem . getCovariances ( problem , NUMBER_CONSTANT ) ;
Distance : 8

58
Tree	final int inverse = ( problem ) length ;
Code	final int inverse = ( problem ) length ;
Distance : 6

59
Tree	final int cols = problem . getCovariances ( true , length ) ;
Code	final int cols = problem . getCovariances ( true , length ) ;
Distance : 5

60
Tree	boolean [] [] cols = problem . getCovariances () ;
Code	boolean [] [] cols = problem . getCovariances () ;
Distance : 6

61
Tree	final double cols = problem . getCovariances () - NUMBER_CONSTANT ;
Code	final double cols = problem . getCovariances () - NUMBER_CONSTANT ;
Distance : 4

62
Tree	int [] inverse = problem . getCovariances () ;
Code	int [] inverse = problem . getCovariances () ;
Distance : 6

63
Tree	final int [] [] cols = problem . jTj () ;
Code	final int [] [] cols = problem . jTj () ;
Distance : 5

64
Tree	int cols = problem . getCovariances () ;
Code	int cols = problem . getCovariances () ;
Distance : 4

65
Tree	final int problem = problem . getCovariances ( false , length ) ;
Code	final int problem = problem . getCovariances ( false , length ) ;
Distance : 6

66
Tree	final int cols = problem . getCovariances ( false , jacobian ) ;
Code	final int cols = problem . getCovariances ( false , jacobian ) ;
Distance : 6

67
Tree	final int rows = ( problem ) length ;
Code	final int rows = ( problem ) length ;
Distance : 6

68
Tree	final int i = problem ;
Code	final int i = problem ;
Distance : 6

69
Tree	final int ime = problem . getCovariances () . length ;
Code	final int ime = problem . getCovariances () . length ;
Distance : 2

70
Tree	final int cols = problem . jTj () ;
Code	final int cols = problem . jTj () ;
Distance : 3

71
Tree	final int [] cols = problem . getCovariances () ;
Code	final int [] cols = problem . getCovariances () ;
Distance : 4

72
Tree	final max cols = problem . getCovariances () ;
Code	final max cols = problem . getCovariances () ;
Distance : 4

73
Tree	final int [] [] cols = problem . getCovariances ( rows , NUMBER_CONSTANT ) ;
Code	final int [] [] cols = problem . getCovariances ( rows , NUMBER_CONSTANT ) ;
Distance : 8

74
Tree	double [] problem = problem . getCovariances () ;
Code	double [] problem = problem . getCovariances () ;
Distance : 6

75
Tree	final int cols = problem . getCovariances () . length ;
Code	final int cols = problem . getCovariances () . length ;
Distance : 1

76
Tree	final int getCovariances = problem . getCovariances () ;
Code	final int getCovariances = problem . getCovariances () ;
Distance : 4

77
Tree	int [] [] cols = problem . getCovariances () ;
Code	int [] [] cols = problem . getCovariances () ;
Distance : 6

78
Tree	final int [] rows = problem . getCovariances () ;
Code	final int [] rows = problem . getCovariances () ;
Distance : 5

79
Tree	int inverse = problem . getCovariances () ;
Code	int inverse = problem . getCovariances () ;
Distance : 5

80
Tree	char cols = ( problem ) length ;
Code	char cols = ( problem ) length ;
Distance : 7

81
Tree	final int inverse = problem . getCovariances ( false , length ) ;
Code	final int inverse = problem . getCovariances ( false , length ) ;
Distance : 6

82
Tree	final int inverse = problem . getCovariances ( true , length ) ;
Code	final int inverse = problem . getCovariances ( true , length ) ;
Distance : 6

83
Tree	final int cols = problem . jTj () . length ;
Code	final int cols = problem . jTj () . length ;
Distance : 1

84
Tree	final int cols = problem ;
Code	final int cols = problem ;
Distance : 5

85
Tree	final int [] [] cols = problem . getCovariances ( jTj , NUMBER_CONSTANT ) ;
Code	final int [] [] cols = problem . getCovariances ( jTj , NUMBER_CONSTANT ) ;
Distance : 8

86
Tree	boolean [] problem = problem . getCovariances () ;
Code	boolean [] problem = problem . getCovariances () ;
Distance : 6

87
Tree	final int inverse = problem . getCovariances ( getCovariances ) ;
Code	final int inverse = problem . getCovariances ( getCovariances ) ;
Distance : 5

88
Tree	double cols = ( problem ) length ;
Code	double cols = ( problem ) length ;
Distance : 7

89
Tree	final int [] problem = problem . getCovariances () ;
Code	final int [] problem = problem . getCovariances () ;
Distance : 5

90
Tree	final int cols = problem . getCovariances ( false , length ) ;
Code	final int cols = problem . getCovariances ( false , length ) ;
Distance : 5

91
Tree	final int getCovariances = ( problem ) length ;
Code	final int getCovariances = ( problem ) length ;
Distance : 6

92
Tree	int [] [] rows = problem . getCovariances () ;
Code	int [] [] rows = problem . getCovariances () ;
Distance : 7

93
Tree	final Object cols = problem . cols () ;
Code	final Object cols = problem . cols () ;
Distance : 4

94
Tree	final int problem = problem . getCovariances () . length ;
Code	final int problem = problem . getCovariances () . length ;
Distance : 2

95
Tree	final int cols = problem . inverse ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int cols = problem . inverse ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

96
Tree	final int cols = problem . getCovariances ( getCovariances ) ;
Code	final int cols = problem . getCovariances ( getCovariances ) ;
Distance : 4

97
Tree	final int [] [] cols = problem . cols ( getCovariances ) ;
Code	final int [] [] cols = problem . cols ( getCovariances ) ;
Distance : 6

98
Tree	final int ime = problem . getCovariances ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int ime = problem . getCovariances ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

99
Tree	int [] problem = problem . getAllParameters () ;
Code	int [] problem = problem . getAllParameters () ;
Distance : 6

100
Tree	final int cols = problem . inverse () ;
Code	final int cols = problem . inverse () ;
Distance : 3

101
Tree	int problem = ( problem ) length ;
Code	int problem = ( problem ) length ;
Distance : 7

102
Tree	final int inverse = problem . getCovariances ( new Object [ NUMBER_CONSTANT ] ) ;
Code	final int inverse = problem . getCovariances ( new Object [ NUMBER_CONSTANT ] ) ;
Distance : 9

103
Tree	final double [] [] cols = problem . getCovariances () ;
Code	final double [] [] cols = problem . getCovariances () ;
Distance : 6

104
Tree	final int inverse = problem ;
Code	final int inverse = problem ;
Distance : 6

105
Tree	final int cols = problem . cols ( new Object [ NUMBER_CONSTANT ] ) ;
Code	final int cols = problem . cols ( new Object [ NUMBER_CONSTANT ] ) ;
Distance : 8

106
Tree	int [] problem = problem . inverse () ;
Code	int [] problem = problem . inverse () ;
Distance : 6

107
Tree	final double cols = problem . getCovariances ( new Object [ NUMBER_CONSTANT ] ) ;
Code	final double cols = problem . getCovariances ( new Object [ NUMBER_CONSTANT ] ) ;
Distance : 9

108
Tree	double cols = problem . getCovariances () ;
Code	double cols = problem . getCovariances () ;
Distance : 5

109
Tree	final sum cols = problem . getCovariances () ;
Code	final sum cols = problem . getCovariances () ;
Distance : 4

110
Tree	final int [] [] cols = problem . getCovariances ( getAllParameters ) ;
Code	final int [] [] cols = problem . getCovariances ( getAllParameters ) ;
Distance : 6

111
Tree	int rows = ( problem ) length ;
Code	int rows = ( problem ) length ;
Distance : 7

112
Tree	int [] problem = problem . cols () ;
Code	int [] problem = problem . cols () ;
Distance : 6

113
Tree	int [] problem = problem . jTj () ;
Code	int [] problem = problem . jTj () ;
Distance : 6

114
Tree	final int ime = problem . getCovariances () ;
Code	final int ime = problem . getCovariances () ;
Distance : 4

115
Tree	final int cols = problem . jTj () - NUMBER_CONSTANT ;
Code	final int cols = problem . jTj () - NUMBER_CONSTANT ;
Distance : 3

116
Tree	final int [] [] cols = problem . getCovariances ( j , NUMBER_CONSTANT ) ;
Code	final int [] [] cols = problem . getCovariances ( j , NUMBER_CONSTANT ) ;
Distance : 8

117
Tree	final int rows = problem . getCovariances ( getCovariances ) ;
Code	final int rows = problem . getCovariances ( getCovariances ) ;
Distance : 5

118
Tree	final Object cols = problem . jTj () ;
Code	final Object cols = problem . jTj () ;
Distance : 4

119
Tree	final int ime = ( problem ) length ;
Code	final int ime = ( problem ) length ;
Distance : 6

120
Tree	final int problem = problem ;
Code	final int problem = problem ;
Distance : 6

121
Tree	final int [] [] cols = problem . getCovariances ( jacobian , NUMBER_CONSTANT ) ;
Code	final int [] [] cols = problem . getCovariances ( jacobian , NUMBER_CONSTANT ) ;
Distance : 8

122
Tree	final int cols = problem . getCovariances ( cols ) ;
Code	final int cols = problem . getCovariances ( cols ) ;
Distance : 4

123
Tree	final double cols = problem . getCovariances ( getCovariances ) ;
Code	final double cols = problem . getCovariances ( getCovariances ) ;
Distance : 5

124
Tree	final int inverse = problem . getCovariances () - NUMBER_CONSTANT ;
Code	final int inverse = problem . getCovariances () - NUMBER_CONSTANT ;
Distance : 4

125
Tree	final int cols = problem . getCovariances () - NUMBER_CONSTANT ;
Code	final int cols = problem . getCovariances () - NUMBER_CONSTANT ;
Distance : 3

126
Tree	final int [] [] cols = problem . getCovariances ( inverse ) ;
Code	final int [] [] cols = problem . getCovariances ( inverse ) ;
Distance : 6

127
Tree	final int rows = problem . getCovariances ( false , length ) ;
Code	final int rows = problem . getCovariances ( false , length ) ;
Distance : 6

128
Tree	final int cols = problem . cols ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int cols = problem . cols ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

129
Tree	final int cols = problem . getCovariances ( rows . getCovariances () , length () ) ;
Code	final int cols = problem . getCovariances ( rows . getCovariances () , length () ) ;
Distance : 8

130
Tree	final rows cols = problem . getCovariances () ;
Code	final rows cols = problem . getCovariances () ;
Distance : 4

131
Tree	final int [] [] rows = problem . getCovariances ( getCovariances ) ;
Code	final int [] [] rows = problem . getCovariances ( getCovariances ) ;
Distance : 7

132
Tree	final double [] [] cols = problem . getCovariances ( getCovariances ) ;
Code	final double [] [] cols = problem . getCovariances ( getCovariances ) ;
Distance : 7

133
Tree	final int cols = problem . getCovariances ( jTj . getCovariances () , length () ) ;
Code	final int cols = problem . getCovariances ( jTj . getCovariances () , length () ) ;
Distance : 8

134
Tree	final int rows = problem . getCovariances () - NUMBER_CONSTANT ;
Code	final int rows = problem . getCovariances () - NUMBER_CONSTANT ;
Distance : 4

135
Tree	final int cols = problem . jTj ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int cols = problem . jTj ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

136
Tree	final Object rows = problem . getCovariances () ;
Code	final Object rows = problem . getCovariances () ;
Distance : 5

137
Tree	final int cols = problem . getCovariances ( false , Object ) ;
Code	final int cols = problem . getCovariances ( false , Object ) ;
Distance : 6

138
Tree	final int cols = problem . getCovariances ( problem . getCovariances () , length () ) ;
Code	final int cols = problem . getCovariances ( problem . getCovariances () , length () ) ;
Distance : 8

139
Tree	final int cols = problem . getCovariances ( false , rows ) ;
Code	final int cols = problem . getCovariances ( false , rows ) ;
Distance : 6

140
Tree	final int [] [] cols = problem . getCovariances ( max , NUMBER_CONSTANT ) ;
Code	final int [] [] cols = problem . getCovariances ( max , NUMBER_CONSTANT ) ;
Distance : 8

141
Tree	final int cols = problem . getCovariances ( rows . jTj () , length () ) ;
Code	final int cols = problem . getCovariances ( rows . jTj () , length () ) ;
Distance : 8

142
Tree	final int [] [] cols = problem . getCovariances ( i , NUMBER_CONSTANT ) ;
Code	final int [] [] cols = problem . getCovariances ( i , NUMBER_CONSTANT ) ;
Distance : 8

143
Tree	final int cols = problem . cols ( getCovariances ) ;
Code	final int cols = problem . cols ( getCovariances ) ;
Distance : 4

144
Tree	final int problem = problem . getCovariances ( new Object [ NUMBER_CONSTANT ] ) ;
Code	final int problem = problem . getCovariances ( new Object [ NUMBER_CONSTANT ] ) ;
Distance : 9

145
Tree	final int cols = ( problem ) rows ;
Code	final int cols = ( problem ) rows ;
Distance : 6

146
Tree	final double cols = problem . getCovariances () . length ;
Code	final double cols = problem . getCovariances () . length ;
Distance : 2

147
Tree	final int [] [] cols = problem . getAllParameters () ;
Code	final int [] [] cols = problem . getAllParameters () ;
Distance : 5

148
Tree	final int cols = problem . getCovariances ( getAllParameters ) ;
Code	final int cols = problem . getCovariances ( getAllParameters ) ;
Distance : 4

149
Tree	final int cols = ( problem ) k ;
Code	final int cols = ( problem ) k ;
Distance : 6

150
Tree	final int rows = problem . getCovariances () ;
Code	final int rows = problem . getCovariances () ;
Distance : 4

151
Tree	final Object problem = problem . getCovariances () ;
Code	final Object problem = problem . getCovariances () ;
Distance : 5

152
Tree	final int getCovariances = problem . getCovariances ( new Object [ NUMBER_CONSTANT ] ) ;
Code	final int getCovariances = problem . getCovariances ( new Object [ NUMBER_CONSTANT ] ) ;
Distance : 9

153
Tree	final int getCovariances = problem . getCovariances () - NUMBER_CONSTANT ;
Code	final int getCovariances = problem . getCovariances () - NUMBER_CONSTANT ;
Distance : 4

154
Tree	final int [] [] cols = problem . getCovariances ( cols ) ;
Code	final int [] [] cols = problem . getCovariances ( cols ) ;
Distance : 6

155
Tree	final int jTj = problem ;
Code	final int jTj = problem ;
Distance : 6

156
Tree	final InvalidMatrixException cols = problem . getCovariances () ;
Code	final InvalidMatrixException cols = problem . getCovariances () ;
Distance : 4

157
Tree	final double [] cols = problem . getCovariances () ;
Code	final double [] cols = problem . getCovariances () ;
Distance : 5

158
Tree	final int cols = problem . inverse ( new Object [ NUMBER_CONSTANT ] ) ;
Code	final int cols = problem . inverse ( new Object [ NUMBER_CONSTANT ] ) ;
Distance : 8

159
Tree	final int cols = problem . getCovariances ( cols . getCovariances () , length () ) ;
Code	final int cols = problem . getCovariances ( cols . getCovariances () , length () ) ;
Distance : 8

160
Tree	final int [] [] cols = problem . getCovariances ( cols , NUMBER_CONSTANT ) ;
Code	final int [] [] cols = problem . getCovariances ( cols , NUMBER_CONSTANT ) ;
Distance : 8

161
Tree	final double cols = problem . getCovariances ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double cols = problem . getCovariances ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

162
Tree	final int ime = problem . getCovariances ( new Object [ NUMBER_CONSTANT ] ) ;
Code	final int ime = problem . getCovariances ( new Object [ NUMBER_CONSTANT ] ) ;
Distance : 9

163
Tree	final int inverse = problem . getCovariances ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int inverse = problem . getCovariances ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

164
Tree	final int problem = problem . getCovariances ( getCovariances ) ;
Code	final int problem = problem . getCovariances ( getCovariances ) ;
Distance : 5

165
Tree	final int getCovariances = problem . getCovariances ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int getCovariances = problem . getCovariances ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

166
Tree	final int cols = problem . getCovariances ( rows , cols ) ;
Code	final int cols = problem . getCovariances ( rows , cols ) ;
Distance : 6

167
Tree	final int [] [] cols = problem . getCovariances ( inverse , NUMBER_CONSTANT ) ;
Code	final int [] [] cols = problem . getCovariances ( inverse , NUMBER_CONSTANT ) ;
Distance : 8

168
Tree	final int [] [] cols = problem . getCovariances ( getCovariances , NUMBER_CONSTANT ) ;
Code	final int [] [] cols = problem . getCovariances ( getCovariances , NUMBER_CONSTANT ) ;
Distance : 8

169
Tree	int inverse = ( problem ) length ;
Code	int inverse = ( problem ) length ;
Distance : 7

170
Tree	final int cols = problem . getCovariances ( rows . cols () , length () ) ;
Code	final int cols = problem . getCovariances ( rows . cols () , length () ) ;
Distance : 8

171
Tree	final int cols = problem . getCovariances ( new Object [ NUMBER_CONSTANT ] ) ;
Code	final int cols = problem . getCovariances ( new Object [ NUMBER_CONSTANT ] ) ;
Distance : 8

172
Tree	final int cols = problem . cols () . length ;
Code	final int cols = problem . cols () . length ;
Distance : 1

173
Tree	final int inverse = problem . getCovariances ( rows . getCovariances () , length () ) ;
Code	final int inverse = problem . getCovariances ( rows . getCovariances () , length () ) ;
Distance : 9

174
Tree	char cols = problem . getCovariances () ;
Code	char cols = problem . getCovariances () ;
Distance : 5

175
Tree	final int ime = problem ;
Code	final int ime = problem ;
Distance : 6

176
Tree	final int cols = problem . getCovariances ( max . getCovariances () , length () ) ;
Code	final int cols = problem . getCovariances ( max . getCovariances () , length () ) ;
Distance : 8

177
Tree	int rows = problem . getCovariances () ;
Code	int rows = problem . getCovariances () ;
Distance : 5

178
Tree	final int rows = problem . getCovariances ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int rows = problem . getCovariances ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

179
Tree	final int cols = problem . inverse () - NUMBER_CONSTANT ;
Code	final int cols = problem . inverse () - NUMBER_CONSTANT ;
Distance : 3

180
Tree	int [] [] inverse = problem . getCovariances () ;
Code	int [] [] inverse = problem . getCovariances () ;
Distance : 7

181
Tree	final int cols = problem . getCovariances ( i . getCovariances () , length () ) ;
Code	final int cols = problem . getCovariances ( i . getCovariances () , length () ) ;
Distance : 8

182
Tree	final int cols = problem . getCovariances ( rows , getCovariances ) ;
Code	final int cols = problem . getCovariances ( rows , getCovariances ) ;
Distance : 6

183
Tree	final int [] [] inverse = problem . getCovariances ( getCovariances ) ;
Code	final int [] [] inverse = problem . getCovariances ( getCovariances ) ;
Distance : 7

184
Tree	final int cols = problem . getCovariances ( rows , problem ) ;
Code	final int cols = problem . getCovariances ( rows , problem ) ;
Distance : 6

185
Tree	final int cols = problem . getCovariances ( jTj , cols ) ;
Code	final int cols = problem . getCovariances ( jTj , cols ) ;
Distance : 6

186
Tree	final int cols = problem . getCovariances ( inverse ) ;
Code	final int cols = problem . getCovariances ( inverse ) ;
Distance : 4

187
Tree	final int cols = problem . getCovariances ( rows , getData ) ;
Code	final int cols = problem . getCovariances ( rows , getData ) ;
Distance : 6

188
Tree	final int cols = problem . getCovariances ( rows , jTj ) ;
Code	final int cols = problem . getCovariances ( rows , jTj ) ;
Distance : 6

189
Tree	final double inverse = problem ;
Code	final double inverse = problem ;
Distance : 7

190
Tree	final int cols = problem . getCovariances ( jTj , getCovariances ) ;
Code	final int cols = problem . getCovariances ( jTj , getCovariances ) ;
Distance : 6

191
Tree	final int [] [] problem = problem . getCovariances () ;
Code	final int [] [] problem = problem . getCovariances () ;
Distance : 6

192
Tree	final int cols = problem . jTj ( new Object [ NUMBER_CONSTANT ] ) ;
Code	final int cols = problem . jTj ( new Object [ NUMBER_CONSTANT ] ) ;
Distance : 8

193
Tree	final int cols = problem . getCovariances ( jTj . jTj () , length () ) ;
Code	final int cols = problem . getCovariances ( jTj . jTj () , length () ) ;
Distance : 8

194
Tree	final int cols = problem . getCovariances ( rows , inverse ) ;
Code	final int cols = problem . getCovariances ( rows , inverse ) ;
Distance : 6

195
Tree	final int [] cols = problem . inverse () ;
Code	final int [] cols = problem . inverse () ;
Distance : 4

196
Tree	final int [] [] problem = problem . getCovariances ( getCovariances ) ;
Code	final int [] [] problem = problem . getCovariances ( getCovariances ) ;
Distance : 7

197
Tree	final int cols = problem . getCovariances ( problem , cols ) ;
Code	final int cols = problem . getCovariances ( problem , cols ) ;
Distance : 6

198
Tree	final int ime = problem . getCovariances () - NUMBER_CONSTANT ;
Code	final int ime = problem . getCovariances () - NUMBER_CONSTANT ;
Distance : 4

199
Tree	final int cols = problem . getCovariances ( rows , jacobian ) ;
Code	final int cols = problem . getCovariances ( rows , jacobian ) ;
Distance : 6

========================================================================


========================================================================
Example Number: 52
Parent Code is: 
final BigDecimal [] out = new BigDecimal [ v.length ] ;
-------------------------------------------------------------------------------
Child code is: 
final BigDecimal [] out = new BigDecimal [ nRows ] ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (43 (801{val=BigDecimal})) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (43 (801{val=BigDecimal})) (221{val=[})) (40{val=v.length}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (43 (801{val=BigDecimal})) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (43 (801{val=BigDecimal})) (221{val=[})) (800{val=nRows}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/98/parent/src_java_org_apache_commons_math_linear_BigMatrixImpl.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 90
Correct
========================================================================
True

0
Tree	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 1

1
Tree	final BigDecimal [] out = new BigDecimal [] out ] ;
Code	final BigDecimal [] out = new BigDecimal [] out ] ;
Distance : 2

2
Tree	final BigDecimal [] out = new BigDecimal [] CHAR_CONS ;
Code	final BigDecimal [] out = new BigDecimal [] CHAR_CONS ;
Distance : 3

3
Tree	final BigDecimal [] out = new BigDecimal [] ^ ;
Code	final BigDecimal [] out = new BigDecimal [] ^ ;
Distance : 3

4
Tree	final BigDecimal [] out = new BigDecimal [] >= ;
Code	final BigDecimal [] out = new BigDecimal [] >= ;
Distance : 3

5
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 1

6
Tree	final BigDecimal [] out = new BigDecimal [] % ;
Code	final BigDecimal [] out = new BigDecimal [] % ;
Distance : 3

7
Tree	final BigDecimal [] out = new BigDecimal [] / ;
Code	final BigDecimal [] out = new BigDecimal [] / ;
Distance : 3

8
Tree	final BigDecimal [] out = new BigDecimal [] <> ;
Code	final BigDecimal [] out = new BigDecimal [] <> ;
Distance : 3

9
Tree	final BigDecimal [] out = new BigDecimal [] ++ ;
Code	final BigDecimal [] out = new BigDecimal [] ++ ;
Distance : 3

10
Tree	final BigDecimal [] out = new BigDecimal [] % ] ;
Code	final BigDecimal [] out = new BigDecimal [] % ] ;
Distance : 2

11
Tree	final BigDecimal [] out = new BigDecimal [] ^ ] ;
Code	final BigDecimal [] out = new BigDecimal [] ^ ] ;
Distance : 2

12
Tree	final BigDecimal [] out = new BigDecimal [] sum ] ;
Code	final BigDecimal [] out = new BigDecimal [] sum ] ;
Distance : 2

13
Tree	final BigDecimal [] out = new BigDecimal [] super ] ;
Code	final BigDecimal [] out = new BigDecimal [] super ] ;
Distance : 2

14
Tree	final BigDecimal [] out = new getRowDimension [ v.length ] ;
Code	final BigDecimal [] out = new getRowDimension [ v.length ] ;
Distance : 2

15
Tree	final BigDecimal [] out = BigDecimal . getRowDimension ( i , null ) ;
Code	final BigDecimal [] out = BigDecimal . getRowDimension ( i , null ) ;
Distance : 8

16
Tree	final BigDecimal [] out = BigDecimal . getColumnDimension ( new BigDecimal [ NUMBER_CONSTANT ] , true ) ;
Code	final BigDecimal [] out = BigDecimal . getColumnDimension ( new BigDecimal [ NUMBER_CONSTANT ] , true ) ;
Distance : 8

17
Tree	final BigDecimal [] out = new BigDecimal [] += ] ;
Code	final BigDecimal [] out = new BigDecimal [] += ] ;
Distance : 2

18
Tree	final BigDecimal [] out = new BigDecimal [ i ] ;
Code	final BigDecimal [] out = new BigDecimal [ i ] ;
Distance : 1

19
Tree	final BigDecimal [] out = BigDecimal . getRowDimension ( BigDecimal , null ) ;
Code	final BigDecimal [] out = BigDecimal . getRowDimension ( BigDecimal , null ) ;
Distance : 7

20
Tree	final BigDecimal [] out = BigDecimal . BigDecimal ( new BigDecimal [ NUMBER_CONSTANT ] , true ) ;
Code	final BigDecimal [] out = BigDecimal . BigDecimal ( new BigDecimal [ NUMBER_CONSTANT ] , true ) ;
Distance : 8

21
Tree	final BigDecimal [] out = new sum [ v.length ] ;
Code	final BigDecimal [] out = new sum [ v.length ] ;
Distance : 2

22
Tree	final BigDecimal [] out = BigDecimal . getColumnDimension ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Code	final BigDecimal [] out = BigDecimal . getColumnDimension ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Distance : 8

23
Tree	final BigDecimal [] out = new getRowDimension < BigDecimal > [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new getRowDimension < BigDecimal > [ NUMBER_CONSTANT ] ;
Distance : 4

24
Tree	final BigDecimal [] out = new IllegalArgumentException < BigDecimal > [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new IllegalArgumentException < BigDecimal > [ NUMBER_CONSTANT ] ;
Distance : 4

25
Tree	final BigDecimal [] out = new BigDecimal [ getColumnDimension ] ;
Code	final BigDecimal [] out = new BigDecimal [ getColumnDimension ] ;
Distance : 1

26
Tree	final IllegalArgumentException [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	final IllegalArgumentException [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 2

27
Tree	final BigDecimal [] out = new BigDecimal [] *= ] ;
Code	final BigDecimal [] out = new BigDecimal [] *= ] ;
Distance : 2

28
Tree	final BigDecimal [] out = BigDecimal . sum ( new BigDecimal [ NUMBER_CONSTANT ] , true ) ;
Code	final BigDecimal [] out = BigDecimal . sum ( new BigDecimal [ NUMBER_CONSTANT ] , true ) ;
Distance : 8

29
Tree	final BigDecimal [] out = new BigDecimal [] & ] ;
Code	final BigDecimal [] out = new BigDecimal [] & ] ;
Distance : 2

30
Tree	final BigDecimal [] out = new BigDecimal [ v ] ;
Code	final BigDecimal [] out = new BigDecimal [ v ] ;
Distance : 1

31
Tree	final BigDecimal [] out = new BigDecimal [ getColumnDimension ] ;
Code	final BigDecimal [] out = new BigDecimal [ getColumnDimension ] ;
Distance : 1

32
Tree	final BigDecimal [] out = new BigDecimal [ nRows ] ;
Code	final BigDecimal [] out = new BigDecimal [ nRows ] ;
Distance : 0

33
Tree	final BigDecimal [] out = new BigDecimal [ nCols ] ;
Code	final BigDecimal [] out = new BigDecimal [ nCols ] ;
Distance : 1

34
Tree	final BigDecimal [] out = new v.length [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new v.length [ NUMBER_CONSTANT ] ;
Distance : 2

35
Tree	final BigDecimal [] out = BigDecimal . getRowDimension ( nRows , null ) ;
Code	final BigDecimal [] out = BigDecimal . getRowDimension ( nRows , null ) ;
Distance : 7

36
Tree	final BigDecimal [] out = BigDecimal . getRowDimension ( out , null ) ;
Code	final BigDecimal [] out = BigDecimal . getRowDimension ( out , null ) ;
Distance : 8

37
Tree	final BigDecimal [] out = BigDecimal . getRowDimension ( new BigDecimal [ NUMBER_CONSTANT ] , true ) ;
Code	final BigDecimal [] out = BigDecimal . getRowDimension ( new BigDecimal [ NUMBER_CONSTANT ] , true ) ;
Distance : 8

38
Tree	final BigDecimal [] out = new BigDecimal < v.length > [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new BigDecimal < v.length > [ NUMBER_CONSTANT ] ;
Distance : 4

39
Tree	final BigDecimal [] out = new IllegalArgumentException [ v.length ] ;
Code	final BigDecimal [] out = new IllegalArgumentException [ v.length ] ;
Distance : 2

40
Tree	final BigDecimal [] out = new BigDecimal < getRowDimension > [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new BigDecimal < getRowDimension > [ NUMBER_CONSTANT ] ;
Distance : 4

41
Tree	final BigDecimal [] out = new BigDecimal [ sum ] ;
Code	final BigDecimal [] out = new BigDecimal [ sum ] ;
Distance : 1

42
Tree	final BigDecimal [] out = BigDecimal . BigDecimal ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Code	final BigDecimal [] out = BigDecimal . BigDecimal ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Distance : 8

43
Tree	final BigDecimal [] out = new BigDecimal [ v ] ;
Code	final BigDecimal [] out = new BigDecimal [ v ] ;
Distance : 1

44
Tree	final BigDecimal [] out = new BigDecimal < IllegalArgumentException > [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new BigDecimal < IllegalArgumentException > [ NUMBER_CONSTANT ] ;
Distance : 4

45
Tree	final BigDecimal [] out = BigDecimal . sum ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Code	final BigDecimal [] out = BigDecimal . sum ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Distance : 8

46
Tree	final BigDecimal [] out = new BigDecimal [] getColumnDimension ] ;
Code	final BigDecimal [] out = new BigDecimal [] getColumnDimension ] ;
Distance : 2

47
Tree	final BigDecimal [] out = new BigDecimal [ getRowDimension ] ;
Code	final BigDecimal [] out = new BigDecimal [ getRowDimension ] ;
Distance : 1

48
Tree	final BigDecimal [] out = new ZERO [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new ZERO [ NUMBER_CONSTANT ] ;
Distance : 2

49
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 1

50
Tree	final BigDecimal [] out = BigDecimal . nCols ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Code	final BigDecimal [] out = BigDecimal . nCols ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Distance : 8

51
Tree	final BigDecimal [] out = new sum < BigDecimal > [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new sum < BigDecimal > [ NUMBER_CONSTANT ] ;
Distance : 4

52
Tree	final BigDecimal [] out = new v [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new v [ NUMBER_CONSTANT ] ;
Distance : 2

53
Tree	final BigDecimal [] out = new BigDecimal < sum > [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new BigDecimal < sum > [ NUMBER_CONSTANT ] ;
Distance : 4

54
Tree	final BigDecimal [] out = new v [ v.length ] ;
Code	final BigDecimal [] out = new v [ v.length ] ;
Distance : 2

55
Tree	final BigDecimal [] out = new BigDecimal [] data ] ;
Code	final BigDecimal [] out = new BigDecimal [] data ] ;
Distance : 2

56
Tree	final BigDecimal [] out = new BigDecimal < v > [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new BigDecimal < v > [ NUMBER_CONSTANT ] ;
Distance : 4

57
Tree	final BigDecimal [] out = new IllegalArgumentException [ v.length ] ;
Code	final BigDecimal [] out = new IllegalArgumentException [ v.length ] ;
Distance : 2

58
Tree	final BigDecimal [] out = new sum [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new sum [ NUMBER_CONSTANT ] ;
Distance : 2

59
Tree	final BigDecimal [] out = BigDecimal . getColumnDimension ( getRowDimension , null ) ;
Code	final BigDecimal [] out = BigDecimal . getColumnDimension ( getRowDimension , null ) ;
Distance : 8

60
Tree	final BigDecimal [] out = BigDecimal . getRowDimension ( nCols , null ) ;
Code	final BigDecimal [] out = BigDecimal . getRowDimension ( nCols , null ) ;
Distance : 8

61
Tree	final BigDecimal [] out = new getRowDimension [ v.length ] ;
Code	final BigDecimal [] out = new getRowDimension [ v.length ] ;
Distance : 2

62
Tree	final BigDecimal [] out = new BigDecimal < BigDecimal > [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new BigDecimal < BigDecimal > [ NUMBER_CONSTANT ] ;
Distance : 4

63
Tree	final BigDecimal [] out = new BigDecimal [] += ;
Code	final BigDecimal [] out = new BigDecimal [] += ;
Distance : 3

64
Tree	final v.length [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	final v.length [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 2

65
Tree	final BigDecimal [] out = new BigDecimal [] super ;
Code	final BigDecimal [] out = new BigDecimal [] super ;
Distance : 3

66
Tree	final BigDecimal [] out = new BigDecimal [] & ;
Code	final BigDecimal [] out = new BigDecimal [] & ;
Distance : 3

67
Tree	final BigDecimal [] out = BigDecimal . getRowDimension ( sum , null ) ;
Code	final BigDecimal [] out = BigDecimal . getRowDimension ( sum , null ) ;
Distance : 8

68
Tree	final BigDecimal [] out = new BigDecimal [] / ] ;
Code	final BigDecimal [] out = new BigDecimal [] / ] ;
Distance : 2

69
Tree	final BigDecimal [] out = new BigDecimal [] ++ ] ;
Code	final BigDecimal [] out = new BigDecimal [] ++ ] ;
Distance : 2

70
Tree	final BigDecimal [] out = BigDecimal . nRows ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Code	final BigDecimal [] out = BigDecimal . nRows ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Distance : 8

71
Tree	final BigDecimal [] out = new BigDecimal [ nRows ] ;
Code	final BigDecimal [] out = new BigDecimal [ nRows ] ;
Distance : 0

72
Tree	final BigDecimal [] out = new BigDecimal [] <> ] ;
Code	final BigDecimal [] out = new BigDecimal [] <> ] ;
Distance : 2

73
Tree	final BigDecimal [] out = BigDecimal . getColumnDimension ( i , null ) ;
Code	final BigDecimal [] out = BigDecimal . getColumnDimension ( i , null ) ;
Distance : 8

74
Tree	final BigDecimal [] out = new BigDecimal [] >= ] ;
Code	final BigDecimal [] out = new BigDecimal [] >= ] ;
Distance : 2

75
Tree	final BigDecimal [] out = new BigDecimal [ nCols ] ;
Code	final BigDecimal [] out = new BigDecimal [ nCols ] ;
Distance : 1

76
Tree	final BigDecimal [] out = new BigDecimal [] getRowDimension ] ;
Code	final BigDecimal [] out = new BigDecimal [] getRowDimension ] ;
Distance : 2

77
Tree	final BigDecimal [] out = BigDecimal . getRowDimension ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Code	final BigDecimal [] out = BigDecimal . getRowDimension ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Distance : 8

78
Tree	final BigDecimal [] out = new BigDecimal [] v ] ;
Code	final BigDecimal [] out = new BigDecimal [] v ] ;
Distance : 2

79
Tree	final BigDecimal [] out = new BigDecimal [] nRows ] ;
Code	final BigDecimal [] out = new BigDecimal [] nRows ] ;
Distance : 1

80
Tree	final BigDecimal [] out = BigDecimal . getRowDimension ( v , null ) ;
Code	final BigDecimal [] out = BigDecimal . getRowDimension ( v , null ) ;
Distance : 8

81
Tree	final BigDecimal [] out = new BigDecimal [ getRowDimension ] ;
Code	final BigDecimal [] out = new BigDecimal [ getRowDimension ] ;
Distance : 1

82
Tree	final BigDecimal [] out = new BigDecimal [] BigDecimal ] ;
Code	final BigDecimal [] out = new BigDecimal [] BigDecimal ] ;
Distance : 2

83
Tree	final BigDecimal [] out = BigDecimal . getRowDimension ( getRowDimension , null ) ;
Code	final BigDecimal [] out = BigDecimal . getRowDimension ( getRowDimension , null ) ;
Distance : 8

84
Tree	final BigDecimal [] out = new IllegalArgumentException [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new IllegalArgumentException [ NUMBER_CONSTANT ] ;
Distance : 2

85
Tree	static BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	static BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 2

86
Tree	final BigDecimal [] out = new BigDecimal [] nCols ] ;
Code	final BigDecimal [] out = new BigDecimal [] nCols ] ;
Distance : 2

87
Tree	final BigDecimal [] out = new getRowDimension [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new getRowDimension [ NUMBER_CONSTANT ] ;
Distance : 2

88
Tree	final BigDecimal [] out = new BigDecimal [] i ] ;
Code	final BigDecimal [] out = new BigDecimal [] i ] ;
Distance : 2

89
Tree	final BigDecimal [] out = new v < BigDecimal > [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new v < BigDecimal > [ NUMBER_CONSTANT ] ;
Distance : 4

========================================================================


========================================================================
Example Number: 53
Parent Code is: 
final double [] out = new double [ v.length ] ;
-------------------------------------------------------------------------------
Child code is: 
final double [] out = new double [ nRows ] ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (39{val=double}) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (39{val=double}) (221{val=[})) (40{val=v.length}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (39{val=double}) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (39{val=double}) (221{val=[})) (800{val=nRows}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/98/parent/src_java_org_apache_commons_math_linear_RealMatrixImpl.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	final int [] out = new double [ v.length ] ;
Code	final int [] out = new double [ v.length ] ;
Distance : 2

1
Tree	final double [] out = data ;
Code	final double [] out = data ;
Distance : 5

2
Tree	final double [] out = getColumnDimension ( out ) ;
Code	final double [] out = getColumnDimension ( out ) ;
Distance : 5

3
Tree	final double [] out = getColumnDimension ( sum ) ;
Code	final double [] out = getColumnDimension ( sum ) ;
Distance : 5

4
Tree	final double [] out = new double [ nRows . getColumnDimension ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ nRows . getColumnDimension ( NUMBER_CONSTANT ) ] ;
Distance : 5

5
Tree	double [] out = sum . getColumnDimension () ;
Code	double [] out = sum . getColumnDimension () ;
Distance : 6

6
Tree	final float [] out = null ;
Code	final float [] out = null ;
Distance : 6

7
Tree	final double [] out = getColumnDimension ( sum , NUMBER_CONSTANT ) ;
Code	final double [] out = getColumnDimension ( sum , NUMBER_CONSTANT ) ;
Distance : 6

8
Tree	final double [] out = new double [ nCols . getRowDimension ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ nCols . getRowDimension ( NUMBER_CONSTANT ) ] ;
Distance : 6

9
Tree	final double [] out = getColumnDimension ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = getColumnDimension ( out , NUMBER_CONSTANT ) ;
Distance : 6

10
Tree	final double [] out = IllegalArgumentException [ v.length ] ;
Code	final double [] out = IllegalArgumentException [ v.length ] ;
Distance : 3

11
Tree	final double [] out = IllegalArgumentException ;
Code	final double [] out = IllegalArgumentException ;
Distance : 5

12
Tree	final byte [] out = null ;
Code	final byte [] out = null ;
Distance : 6

13
Tree	double [] out = getColumnDimension . getRowDimension () ;
Code	double [] out = getColumnDimension . getRowDimension () ;
Distance : 6

14
Tree	final int [] out = new double [ v.length () ] ;
Code	final int [] out = new double [ v.length () ] ;
Distance : 3

15
Tree	final double [] out = nCols . getColumnDimension () ;
Code	final double [] out = nCols . getColumnDimension () ;
Distance : 5

16
Tree	final double [] out = new double [ v.length ] ;
Code	final double [] out = new double [ v.length ] ;
Distance : 1

17
Tree	final double [] out = sum . getColumnDimension () ;
Code	final double [] out = sum . getColumnDimension () ;
Distance : 5

18
Tree	final double [] out = new double [ v.length ] ;
Code	final double [] out = new double [ v.length ] ;
Distance : 1

19
Tree	final double [] out = nCols [ v.length ] . getColumnDimension () ;
Code	final double [] out = nCols [ v.length ] . getColumnDimension () ;
Distance : 6

20
Tree	final double [] out = getColumnDimension [ nCols ] . getColumnDimension () ;
Code	final double [] out = getColumnDimension [ nCols ] . getColumnDimension () ;
Distance : 6

21
Tree	final double [] out = getColumnDimension [ nRows ] . getColumnDimension () ;
Code	final double [] out = getColumnDimension [ nRows ] . getColumnDimension () ;
Distance : 5

22
Tree	final long [] out = new double [ v.length ] ;
Code	final long [] out = new double [ v.length ] ;
Distance : 2

23
Tree	final double [] out = new double [ getColumnDimension ] ;
Code	final double [] out = new double [ getColumnDimension ] ;
Distance : 1

24
Tree	final double [] out = getColumnDimension [ getColumnDimension ] . getColumnDimension () ;
Code	final double [] out = getColumnDimension [ getColumnDimension ] . getColumnDimension () ;
Distance : 6

25
Tree	final double [] out = v . getColumnDimension ( NUMBER_CONSTANT ) ;
Code	final double [] out = v . getColumnDimension ( NUMBER_CONSTANT ) ;
Distance : 6

26
Tree	final double [] out = getColumnDimension . getRowDimension ( nRows , NUMBER_CONSTANT ) ;
Code	final double [] out = getColumnDimension . getRowDimension ( nRows , NUMBER_CONSTANT ) ;
Distance : 7

27
Tree	final double [] out = getColumnDimension . getRowDimension ( getRowDimension , NUMBER_CONSTANT ) ;
Code	final double [] out = getColumnDimension . getRowDimension ( getRowDimension , NUMBER_CONSTANT ) ;
Distance : 8

28
Tree	final double [] out = STRING_CONSTANT + IllegalArgumentException ;
Code	final double [] out = STRING_CONSTANT + IllegalArgumentException ;
Distance : 5

29
Tree	final double [] out = data [ v.length ] . getColumnDimension () ;
Code	final double [] out = data [ v.length ] . getColumnDimension () ;
Distance : 6

30
Tree	final double [] out = new double [ sum ] ;
Code	final double [] out = new double [ sum ] ;
Distance : 1

31
Tree	final int [] out = null ;
Code	final int [] out = null ;
Distance : 6

32
Tree	final double [] out = new double [ nCols () ] ;
Code	final double [] out = new double [ nCols () ] ;
Distance : 2

33
Tree	final double [] out = new double [ v.length () ] ;
Code	final double [] out = new double [ v.length () ] ;
Distance : 2

34
Tree	final float [] out = {} ;
Code	final float [] out = {} ;
Distance : 6

35
Tree	final double [] out = sum [ v.length ] . getColumnDimension () ;
Code	final double [] out = sum [ v.length ] . getColumnDimension () ;
Distance : 6

36
Tree	final double [] out = getColumnDimension . getRowDimension ( NUMBER_CONSTANT ) ;
Code	final double [] out = getColumnDimension . getRowDimension ( NUMBER_CONSTANT ) ;
Distance : 6

37
Tree	final double [] out = new double [ v.length . getColumnDimension ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ v.length . getColumnDimension ( NUMBER_CONSTANT ) ] ;
Distance : 6

38
Tree	final double [] out = v . getRowDimension ( NUMBER_CONSTANT ) ;
Code	final double [] out = v . getRowDimension ( NUMBER_CONSTANT ) ;
Distance : 6

39
Tree	final double [] out = getColumnDimension . getColumnDimension ( NUMBER_CONSTANT ) ;
Code	final double [] out = getColumnDimension . getColumnDimension ( NUMBER_CONSTANT ) ;
Distance : 6

40
Tree	final double [] out = new double [ getRowDimension ] ;
Code	final double [] out = new double [ getRowDimension ] ;
Distance : 1

41
Tree	final double [] out = data . getColumnDimension () ;
Code	final double [] out = data . getColumnDimension () ;
Distance : 5

42
Tree	final double [] out = null ;
Code	final double [] out = null ;
Distance : 5

43
Tree	final double [] out = new double [ v.length . getRowDimension ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ v.length . getRowDimension ( NUMBER_CONSTANT ) ] ;
Distance : 6

44
Tree	final double [] out = new double [ nRows () ] ;
Code	final double [] out = new double [ nRows () ] ;
Distance : 1

45
Tree	final double [] out = nCols ;
Code	final double [] out = nCols ;
Distance : 5

46
Tree	final double [] out = sum ;
Code	final double [] out = sum ;
Distance : 5

47
Tree	final double [] out = data . getRowDimension ( NUMBER_CONSTANT ) ;
Code	final double [] out = data . getRowDimension ( NUMBER_CONSTANT ) ;
Distance : 6

48
Tree	final double [] out = v . getColumnDimension ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = v . getColumnDimension ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

49
Tree	final double [] out = v.length ;
Code	final double [] out = v.length ;
Distance : 5

50
Tree	final double [] out = new double [ getColumnDimension () ] ;
Code	final double [] out = new double [ getColumnDimension () ] ;
Distance : 2

51
Tree	final double [] out = new int [ v.length ] ;
Code	final double [] out = new int [ v.length ] ;
Distance : 2

52
Tree	final int [] out = new double [ v.length ] ;
Code	final int [] out = new double [ v.length ] ;
Distance : 2

53
Tree	final double [] out = data . getColumnDimension ( NUMBER_CONSTANT ) ;
Code	final double [] out = data . getColumnDimension ( NUMBER_CONSTANT ) ;
Distance : 6

54
Tree	final double [] out = getColumnDimension [ nCols ] ;
Code	final double [] out = getColumnDimension [ nCols ] ;
Distance : 3

55
Tree	final double [] out = {} ;
Code	final double [] out = {} ;
Distance : 5

56
Tree	final int [] out = new double [ getColumnDimension () ] ;
Code	final int [] out = new double [ getColumnDimension () ] ;
Distance : 3

57
Tree	final double [] out = nCols . getRowDimension ( NUMBER_CONSTANT ) ;
Code	final double [] out = nCols . getRowDimension ( NUMBER_CONSTANT ) ;
Distance : 6

58
Tree	final double [] out = getColumnDimension [ v.length ] ;
Code	final double [] out = getColumnDimension [ v.length ] ;
Distance : 3

59
Tree	final double [] out = getColumnDimension ( data ) ;
Code	final double [] out = getColumnDimension ( data ) ;
Distance : 5

60
Tree	final double [] out = STRING_CONSTANT + out ;
Code	final double [] out = STRING_CONSTANT + out ;
Distance : 5

61
Tree	final double [] out = new double [ getColumnDimension . getColumnDimension ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ getColumnDimension . getColumnDimension ( NUMBER_CONSTANT ) ] ;
Distance : 6

62
Tree	final double [] out = sum . getRowDimension ( NUMBER_CONSTANT ) ;
Code	final double [] out = sum . getRowDimension ( NUMBER_CONSTANT ) ;
Distance : 6

63
Tree	final double [] out = super(); ;
Code	final double [] out = super(); ;
Distance : 5

64
Tree	final double [] out = getColumnDimension [ nRows ] ;
Code	final double [] out = getColumnDimension [ nRows ] ;
Distance : 2

65
Tree	final double [] out = new double [ getColumnDimension ] ;
Code	final double [] out = new double [ getColumnDimension ] ;
Distance : 1

66
Tree	final double [] out = new double [ nCols ] ;
Code	final double [] out = new double [ nCols ] ;
Distance : 1

67
Tree	final long [] out = new double [ v.length ] ;
Code	final long [] out = new double [ v.length ] ;
Distance : 2

68
Tree	final double [] out = new double [ nCols ] ;
Code	final double [] out = new double [ nCols ] ;
Distance : 1

69
Tree	final double [] out = nCols . getColumnDimension ( NUMBER_CONSTANT ) ;
Code	final double [] out = nCols . getColumnDimension ( NUMBER_CONSTANT ) ;
Distance : 6

70
Tree	final double [] out = new double [ nRows ] ;
Code	final double [] out = new double [ nRows ] ;
Distance : 0

71
Tree	final double [] out = getColumnDimension . getRowDimension () ;
Code	final double [] out = getColumnDimension . getRowDimension () ;
Distance : 5

72
Tree	final double [] out = new double [ v () ] ;
Code	final double [] out = new double [ v () ] ;
Distance : 2

73
Tree	final double [] out = v [ v.length ] ;
Code	final double [] out = v [ v.length ] ;
Distance : 3

74
Tree	final double [] out = v . getRowDimension () ;
Code	final double [] out = v . getRowDimension () ;
Distance : 5

75
Tree	final double [] out = new double [ nCols . getColumnDimension ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ nCols . getColumnDimension ( NUMBER_CONSTANT ) ] ;
Distance : 6

76
Tree	final double [] out = getColumnDimension ( data , NUMBER_CONSTANT ) ;
Code	final double [] out = getColumnDimension ( data , NUMBER_CONSTANT ) ;
Distance : 6

77
Tree	final double [] out = new double [ getRowDimension () ] ;
Code	final double [] out = new double [ getRowDimension () ] ;
Distance : 2

78
Tree	final double [] out = sum . getRowDimension ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = sum . getRowDimension ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

79
Tree	final double [] out = data . getRowDimension () ;
Code	final double [] out = data . getRowDimension () ;
Distance : 5

80
Tree	final double [] out = data [ v.length ] ;
Code	final double [] out = data [ v.length ] ;
Distance : 3

81
Tree	final double [] out = v.length [ v.length ] ;
Code	final double [] out = v.length [ v.length ] ;
Distance : 3

82
Tree	final double [] out = getColumnDimension ( nRows ) ;
Code	final double [] out = getColumnDimension ( nRows ) ;
Distance : 4

83
Tree	final double [] out = getColumnDimension . getColumnDimension () ;
Code	final double [] out = getColumnDimension . getColumnDimension () ;
Distance : 5

84
Tree	final double [] v.length ( final double . . . out ) { return out ; }
Code	final double [] v.length ( final double . . . out ) { return out ; }
Distance : 12

85
Tree	long [] out = v . getRowDimension () ;
Code	long [] out = v . getRowDimension () ;
Distance : 7

86
Tree	double [] out = nCols . getRowDimension () ;
Code	double [] out = nCols . getRowDimension () ;
Distance : 6

87
Tree	final double [] out = sum . getColumnDimension ( NUMBER_CONSTANT ) ;
Code	final double [] out = sum . getColumnDimension ( NUMBER_CONSTANT ) ;
Distance : 6

88
Tree	final double [] out = new double [ sum () ] ;
Code	final double [] out = new double [ sum () ] ;
Distance : 2

89
Tree	final double [] out = getColumnDimension . getRowDimension ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = getColumnDimension . getRowDimension ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

90
Tree	double [] out = getColumnDimension . getColumnDimension () ;
Code	double [] out = getColumnDimension . getColumnDimension () ;
Distance : 6

91
Tree	final double [] out = new byte [ v.length ] ;
Code	final double [] out = new byte [ v.length ] ;
Distance : 2

92
Tree	final double [] out = getColumnDimension ( row ) ;
Code	final double [] out = getColumnDimension ( row ) ;
Distance : 5

93
Tree	final double [] out = getColumnDimension ( v , NUMBER_CONSTANT ) ;
Code	final double [] out = getColumnDimension ( v , NUMBER_CONSTANT ) ;
Distance : 6

94
Tree	final double [] out = return; ;
Code	final double [] out = return; ;
Distance : 5

95
Tree	final double [] out = new double [ getRowDimension ] ;
Code	final double [] out = new double [ getRowDimension ] ;
Distance : 1

96
Tree	final float [] out = new double [ v.length ] ;
Code	final float [] out = new double [ v.length ] ;
Distance : 2

97
Tree	final double [] out = getColumnDimension ( nRows , NUMBER_CONSTANT ) ;
Code	final double [] out = getColumnDimension ( nRows , NUMBER_CONSTANT ) ;
Distance : 6

98
Tree	final double [] out = continue; ;
Code	final double [] out = continue; ;
Distance : 5

99
Tree	final long [] out = new double [ v.length () ] ;
Code	final long [] out = new double [ v.length () ] ;
Distance : 3

100
Tree	double [] out = nCols . getColumnDimension () ;
Code	double [] out = nCols . getColumnDimension () ;
Distance : 6

101
Tree	final double [] out = sum [ v.length ] ;
Code	final double [] out = sum [ v.length ] ;
Distance : 3

102
Tree	final byte [] out = new double [ v.length ] ;
Code	final byte [] out = new double [ v.length ] ;
Distance : 2

103
Tree	final double [] out = getColumnDimension ;
Code	final double [] out = getColumnDimension ;
Distance : 5

104
Tree	final double [] out = sum . nCols ( NUMBER_CONSTANT ) ;
Code	final double [] out = sum . nCols ( NUMBER_CONSTANT ) ;
Distance : 6

105
Tree	final double [] out = getColumnDimension . getRowDimension ( NUMBER_CONSTANT ) ;
Code	final double [] out = getColumnDimension . getRowDimension ( NUMBER_CONSTANT ) ;
Distance : 6

106
Tree	final double [] out = getColumnDimension [ v.length ] . getColumnDimension () ;
Code	final double [] out = getColumnDimension [ v.length ] . getColumnDimension () ;
Distance : 6

107
Tree	final double [] getColumnDimension ( final double . . . out ) { return out ; }
Code	final double [] getColumnDimension ( final double . . . out ) { return out ; }
Distance : 12

108
Tree	final double [] out = row ;
Code	final double [] out = row ;
Distance : 5

109
Tree	final double [] out = new double [ v.length . v.length ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ v.length . v.length ( NUMBER_CONSTANT ) ] ;
Distance : 6

110
Tree	final double [] out = new double [ v.length . i ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ v.length . i ( NUMBER_CONSTANT ) ] ;
Distance : 6

111
Tree	final double [] out = getColumnDimension . getColumnDimension ( NUMBER_CONSTANT ) ;
Code	final double [] out = getColumnDimension . getColumnDimension ( NUMBER_CONSTANT ) ;
Distance : 6

112
Tree	long [] out = v . getColumnDimension () ;
Code	long [] out = v . getColumnDimension () ;
Distance : 7

113
Tree	final double [] out = v . getRowDimension ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = v . getRowDimension ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

114
Tree	final double [] out = data . getColumnDimension ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = data . getColumnDimension ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

115
Tree	final double [] out = STRING_CONSTANT + data ;
Code	final double [] out = STRING_CONSTANT + data ;
Distance : 5

116
Tree	final double [] out = getColumnDimension . getColumnDimension ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = getColumnDimension . getColumnDimension ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

117
Tree	final double [] out = new double [ v.length . nRows ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ v.length . nRows ( NUMBER_CONSTANT ) ] ;
Distance : 5

118
Tree	final double [] getColumnDimension ( final int . . . out ) { return out ; }
Code	final double [] getColumnDimension ( final int . . . out ) { return out ; }
Distance : 13

119
Tree	final double [] getRowDimension ( final double . . . out ) { return out ; }
Code	final double [] getRowDimension ( final double . . . out ) { return out ; }
Distance : 12

120
Tree	final double [] out = getRowDimension ( out ) ;
Code	final double [] out = getRowDimension ( out ) ;
Distance : 5

121
Tree	final double [] out = data . getRowDimension ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = data . getRowDimension ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

122
Tree	final double [] out = nCols [ v.length ] ;
Code	final double [] out = nCols [ v.length ] ;
Distance : 3

123
Tree	final double [] out = nCols . getColumnDimension ( NUMBER_CONSTANT ) ;
Code	final double [] out = nCols . getColumnDimension ( NUMBER_CONSTANT ) ;
Distance : 6

124
Tree	final double [] out = nCols . getColumnDimension ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = nCols . getColumnDimension ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

125
Tree	final double [] out = sum . getColumnDimension ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = sum . getColumnDimension ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

126
Tree	final long [] out = {} ;
Code	final long [] out = {} ;
Distance : 6

127
Tree	final double [] out = v ;
Code	final double [] out = v ;
Distance : 5

128
Tree	final double [] out = v . getColumnDimension () ;
Code	final double [] out = v . getColumnDimension () ;
Distance : 5

129
Tree	double [] out = sum . getRowDimension () ;
Code	double [] out = sum . getRowDimension () ;
Distance : 6

130
Tree	final double [] out = sum . getColumnDimension ( NUMBER_CONSTANT ) ;
Code	final double [] out = sum . getColumnDimension ( NUMBER_CONSTANT ) ;
Distance : 6

131
Tree	final long [] out = null ;
Code	final long [] out = null ;
Distance : 6

132
Tree	final double [] out = getColumnDimension [ getColumnDimension ] ;
Code	final double [] out = getColumnDimension [ getColumnDimension ] ;
Distance : 3

133
Tree	final double [] operate ( final double . . . out ) { return out ; }
Code	final double [] operate ( final double . . . out ) { return out ; }
Distance : 12

134
Tree	final double [] out = getColumnDimension . nCols ( NUMBER_CONSTANT ) ;
Code	final double [] out = getColumnDimension . nCols ( NUMBER_CONSTANT ) ;
Distance : 6

135
Tree	final double [] out = nCols . getRowDimension () ;
Code	final double [] out = nCols . getRowDimension () ;
Distance : 5

136
Tree	final double [] out = getColumnDimension . sum ( NUMBER_CONSTANT ) ;
Code	final double [] out = getColumnDimension . sum ( NUMBER_CONSTANT ) ;
Distance : 6

137
Tree	final double [] out ( final double . . . out ) { return out ; }
Code	final double [] out ( final double . . . out ) { return out ; }
Distance : 11

138
Tree	double [] out = v . getColumnDimension () ;
Code	double [] out = v . getColumnDimension () ;
Distance : 6

139
Tree	final double [] out = getColumnDimension ( v ) ;
Code	final double [] out = getColumnDimension ( v ) ;
Distance : 5

140
Tree	final double [] out = getColumnDimension ( row , NUMBER_CONSTANT ) ;
Code	final double [] out = getColumnDimension ( row , NUMBER_CONSTANT ) ;
Distance : 6

141
Tree	double [] out = v . getRowDimension () ;
Code	double [] out = v . getRowDimension () ;
Distance : 6

142
Tree	final int [] out = STRING_CONSTANT + out ;
Code	final int [] out = STRING_CONSTANT + out ;
Distance : 6

143
Tree	final double [] out = nRows ;
Code	final double [] out = nRows ;
Distance : 4

144
Tree	final double [] out = getColumnDimension ( getRowDimension ) ;
Code	final double [] out = getColumnDimension ( getRowDimension ) ;
Distance : 5

145
Tree	final double [] out = getColumnDimension ( nCols , NUMBER_CONSTANT ) ;
Code	final double [] out = getColumnDimension ( nCols , NUMBER_CONSTANT ) ;
Distance : 6

146
Tree	final double [] out = sum . getRowDimension () ;
Code	final double [] out = sum . getRowDimension () ;
Distance : 5

147
Tree	final double [] out = new double [ getColumnDimension . getRowDimension ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ getColumnDimension . getRowDimension ( NUMBER_CONSTANT ) ] ;
Distance : 6

148
Tree	final double [] row = null ;
Code	final double [] row = null ;
Distance : 6

149
Tree	final double [] out = getRowDimension ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = getRowDimension ( out , NUMBER_CONSTANT ) ;
Distance : 6

150
Tree	final int [] out = {} ;
Code	final int [] out = {} ;
Distance : 6

151
Tree	final double [] out = STRING_CONSTANT + v ;
Code	final double [] out = STRING_CONSTANT + v ;
Distance : 5

152
Tree	final double [] out = new int [ v.length ] ;
Code	final double [] out = new int [ v.length ] ;
Distance : 2

153
Tree	final double [] out = v . getRowDimension ( nRows , NUMBER_CONSTANT ) ;
Code	final double [] out = v . getRowDimension ( nRows , NUMBER_CONSTANT ) ;
Distance : 7

154
Tree	final double [] out = v . getColumnDimension ( getRowDimension , NUMBER_CONSTANT ) ;
Code	final double [] out = v . getColumnDimension ( getRowDimension , NUMBER_CONSTANT ) ;
Distance : 8

155
Tree	final double [] out = v . getRowDimension ( getRowDimension , NUMBER_CONSTANT ) ;
Code	final double [] out = v . getRowDimension ( getRowDimension , NUMBER_CONSTANT ) ;
Distance : 8

156
Tree	final double [] out = v . getColumnDimension ( NUMBER_CONSTANT ) ;
Code	final double [] out = v . getColumnDimension ( NUMBER_CONSTANT ) ;
Distance : 6

157
Tree	final double [] out = v [ v.length ] . getColumnDimension () ;
Code	final double [] out = v [ v.length ] . getColumnDimension () ;
Distance : 6

158
Tree	final boolean [] out = null ;
Code	final boolean [] out = null ;
Distance : 6

159
Tree	final double [] getRowDimension ( final int . . . out ) { return out ; }
Code	final double [] getRowDimension ( final int . . . out ) { return out ; }
Distance : 13

160
Tree	final double [] out = nCols . nCols ( NUMBER_CONSTANT ) ;
Code	final double [] out = nCols . nCols ( NUMBER_CONSTANT ) ;
Distance : 6

161
Tree	final long [] out = STRING_CONSTANT + out ;
Code	final long [] out = STRING_CONSTANT + out ;
Distance : 6

162
Tree	final double [] out = getColumnDimension . getColumnDimension ( nRows , NUMBER_CONSTANT ) ;
Code	final double [] out = getColumnDimension . getColumnDimension ( nRows , NUMBER_CONSTANT ) ;
Distance : 7

163
Tree	final double [] out = getColumnDimension . getRowDimension ( nCols , NUMBER_CONSTANT ) ;
Code	final double [] out = getColumnDimension . getRowDimension ( nCols , NUMBER_CONSTANT ) ;
Distance : 8

164
Tree	final byte [] out = STRING_CONSTANT + out ;
Code	final byte [] out = STRING_CONSTANT + out ;
Distance : 6

165
Tree	final double [] v.length ( final int . . . out ) { return out ; }
Code	final double [] v.length ( final int . . . out ) { return out ; }
Distance : 13

166
Tree	final double [] out = getColumnDimension . getColumnDimension ( getRowDimension , NUMBER_CONSTANT ) ;
Code	final double [] out = getColumnDimension . getColumnDimension ( getRowDimension , NUMBER_CONSTANT ) ;
Distance : 8

167
Tree	final double [] row = {} ;
Code	final double [] row = {} ;
Distance : 6

168
Tree	final double [] out = getColumnDimension ( nCols ) ;
Code	final double [] out = getColumnDimension ( nCols ) ;
Distance : 5

169
Tree	final float [] out = STRING_CONSTANT + out ;
Code	final float [] out = STRING_CONSTANT + out ;
Distance : 6

170
Tree	final double [] out = getColumnDimension . getColumnDimension ( nRows , v.length ) ;
Code	final double [] out = getColumnDimension . getColumnDimension ( nRows , v.length ) ;
Distance : 7

171
Tree	final double [] out = IllegalArgumentException [ v.length ] . getColumnDimension () ;
Code	final double [] out = IllegalArgumentException [ v.length ] . getColumnDimension () ;
Distance : 6

172
Tree	final byte [] out = {} ;
Code	final byte [] out = {} ;
Distance : 6

173
Tree	final double [] out = v . getRowDimension ( nCols , NUMBER_CONSTANT ) ;
Code	final double [] out = v . getRowDimension ( nCols , NUMBER_CONSTANT ) ;
Distance : 8

174
Tree	final double [] nRows ( final double . . . out ) { return out ; }
Code	final double [] nRows ( final double . . . out ) { return out ; }
Distance : 12

175
Tree	final double [] out = v . getColumnDimension ( nRows , NUMBER_CONSTANT ) ;
Code	final double [] out = v . getColumnDimension ( nRows , NUMBER_CONSTANT ) ;
Distance : 7

176
Tree	final double [] out = getRowDimension ( data ) ;
Code	final double [] out = getRowDimension ( data ) ;
Distance : 5

177
Tree	final double [] out = STRING_CONSTANT + nRows ;
Code	final double [] out = STRING_CONSTANT + nRows ;
Distance : 4

178
Tree	final double [] out = getColumnDimension . getRowDimension ( nCols , v.length ) ;
Code	final double [] out = getColumnDimension . getRowDimension ( nCols , v.length ) ;
Distance : 8

179
Tree	final double [] out = getColumnDimension . getColumnDimension ( getRowDimension , v.length ) ;
Code	final double [] out = getColumnDimension . getColumnDimension ( getRowDimension , v.length ) ;
Distance : 8

180
Tree	final double [] out = v . getRowDimension ( nCols , v.length ) ;
Code	final double [] out = v . getRowDimension ( nCols , v.length ) ;
Distance : 8

181
Tree	final double [] out = v . getColumnDimension ( nRows , v.length ) ;
Code	final double [] out = v . getColumnDimension ( nRows , v.length ) ;
Distance : 7

182
Tree	final double [] out = v . getColumnDimension ( getRowDimension , v.length ) ;
Code	final double [] out = v . getColumnDimension ( getRowDimension , v.length ) ;
Distance : 8

183
Tree	final double [] out = v.length [ v.length ] . getColumnDimension () ;
Code	final double [] out = v.length [ v.length ] . getColumnDimension () ;
Distance : 6

184
Tree	static double [] out = {} ;
Code	static double [] out = {} ;
Distance : 6

185
Tree	final short [] out = {} ;
Code	final short [] out = {} ;
Distance : 6

186
Tree	final char [] out = {} ;
Code	final char [] out = {} ;
Distance : 6

187
Tree	final double [] out = getColumnDimension ( getRowDimension , NUMBER_CONSTANT ) ;
Code	final double [] out = getColumnDimension ( getRowDimension , NUMBER_CONSTANT ) ;
Distance : 6

188
Tree	final double [] out = new double [ v ] ;
Code	final double [] out = new double [ v ] ;
Distance : 1

189
Tree	final double [] out = out ;
Code	final double [] out = out ;
Distance : 5

190
Tree	final boolean [] out = {} ;
Code	final boolean [] out = {} ;
Distance : 6

191
Tree	final double [] row ( final double . . . out ) { return out ; }
Code	final double [] row ( final double . . . out ) { return out ; }
Distance : 12

192
Tree	final double [] out = getColumnDimension . getRowDimension ( nRows , v.length ) ;
Code	final double [] out = getColumnDimension . getRowDimension ( nRows , v.length ) ;
Distance : 7

193
Tree	final double [] out = getColumnDimension . getRowDimension ( getRowDimension , v.length ) ;
Code	final double [] out = getColumnDimension . getRowDimension ( getRowDimension , v.length ) ;
Distance : 8

194
Tree	final double [] out = v . nCols ( NUMBER_CONSTANT ) ;
Code	final double [] out = v . nCols ( NUMBER_CONSTANT ) ;
Distance : 6

195
Tree	final double [] out = nCols . getRowDimension ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = nCols . getRowDimension ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

196
Tree	final double [] out = getRowDimension ( data , NUMBER_CONSTANT ) ;
Code	final double [] out = getRowDimension ( data , NUMBER_CONSTANT ) ;
Distance : 6

197
Tree	final double [] out = v . getRowDimension ( nRows , v.length ) ;
Code	final double [] out = v . getRowDimension ( nRows , v.length ) ;
Distance : 7

198
Tree	final double [] out = STRING_CONSTANT + row ;
Code	final double [] out = STRING_CONSTANT + row ;
Distance : 5

199
Tree	final double [] out = v . getRowDimension ( getRowDimension , v.length ) ;
Code	final double [] out = v . getRowDimension ( getRowDimension , v.length ) ;
Distance : 8

========================================================================


========================================================================
Example Number: 54
Parent Code is: 
int start = getNumObjectiveFunctions () ;
-------------------------------------------------------------------------------
Child code is: 
int start = ignoreObjectiveRows ? getNumObjectiveFunctions () : NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=start}) (204{val==}) (32 (802{val=getNumObjectiveFunctions}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=start}) (204{val==}) (16 (800{val=ignoreObjectiveRows}) (233{val=?}) (32 (802{val=getNumObjectiveFunctions}) (216{val=()})) (226{val=:}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/83/parent/src_main_java_org_apache_commons_math_optimization_linear_SimplexTableau.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	int [] start = getNumObjectiveFunctions () ;
Code	int [] start = getNumObjectiveFunctions () ;
Distance : 5

1
Tree	final equals [] start ;
Code	final equals [] start ;
Distance : 9

2
Tree	long start = getHeight () ;
Code	long start = getHeight () ;
Distance : 6

3
Tree	int Integer = NUMBER_CONSTANT ;
Code	int Integer = NUMBER_CONSTANT ;
Distance : 6

4
Tree	int [] start = getEntry () ;
Code	int [] start = getEntry () ;
Distance : 6

5
Tree	boolean start = getHeight () ;
Code	boolean start = getHeight () ;
Distance : 6

6
Tree	final i [] start ;
Code	final i [] start ;
Distance : 9

7
Tree	double start = getHeight () ;
Code	double start = getHeight () ;
Distance : 6

8
Tree	int start = i + NUMBER_CONSTANT ;
Code	int start = i + NUMBER_CONSTANT ;
Distance : 5

9
Tree	final int start = Integer ;
Code	final int start = Integer ;
Distance : 7

10
Tree	final float start ;
Code	final float start ;
Distance : 9

11
Tree	final short start ;
Code	final short start ;
Distance : 9

12
Tree	start start = getHeight () ;
Code	start start = getHeight () ;
Distance : 6

13
Tree	final char start ;
Code	final char start ;
Distance : 9

14
Tree	int start = getHeight + NUMBER_CONSTANT ;
Code	int start = getHeight + NUMBER_CONSTANT ;
Distance : 5

15
Tree	boolean start = null ;
Code	boolean start = null ;
Distance : 7

16
Tree	final int start = epsilon ;
Code	final int start = epsilon ;
Distance : 7

17
Tree	float start = NUMBER_CONSTANT ;
Code	float start = NUMBER_CONSTANT ;
Distance : 6

18
Tree	int start = start + NUMBER_CONSTANT ;
Code	int start = start + NUMBER_CONSTANT ;
Distance : 5

19
Tree	int [] start = getHeight () ;
Code	int [] start = getHeight () ;
Distance : 6

20
Tree	short start ;
Code	short start ;
Distance : 8

21
Tree	final Integer [] start = getEntry () ;
Code	final Integer [] start = getEntry () ;
Distance : 8

22
Tree	final MathUtils [] start ;
Code	final MathUtils [] start ;
Distance : 9

23
Tree	double start = i + NUMBER_CONSTANT ;
Code	double start = i + NUMBER_CONSTANT ;
Distance : 6

24
Tree	int start = i () - NUMBER_CONSTANT ;
Code	int start = i () - NUMBER_CONSTANT ;
Distance : 4

25
Tree	double start = getHeight + NUMBER_CONSTANT ;
Code	double start = getHeight + NUMBER_CONSTANT ;
Distance : 6

26
Tree	double [] start = getHeight () ;
Code	double [] start = getHeight () ;
Distance : 7

27
Tree	int start = i ;
Code	int start = i ;
Distance : 6

28
Tree	int start = Integer + NUMBER_CONSTANT ;
Code	int start = Integer + NUMBER_CONSTANT ;
Distance : 5

29
Tree	int start = getHeight ;
Code	int start = getHeight ;
Distance : 6

30
Tree	final int start = col ;
Code	final int start = col ;
Distance : 7

31
Tree	abstract int start ;
Code	abstract int start ;
Distance : 8

32
Tree	int start = getNumObjectiveFunctions + NUMBER_CONSTANT ;
Code	int start = getNumObjectiveFunctions + NUMBER_CONSTANT ;
Distance : 4

33
Tree	final Integer [] start = getNumObjectiveFunctions () ;
Code	final Integer [] start = getNumObjectiveFunctions () ;
Distance : 7

34
Tree	long start ;
Code	long start ;
Distance : 8

35
Tree	double start = getEntry () - NUMBER_CONSTANT ;
Code	double start = getEntry () - NUMBER_CONSTANT ;
Distance : 5

36
Tree	char start = NUMBER_CONSTANT ;
Code	char start = NUMBER_CONSTANT ;
Distance : 6

37
Tree	int start = start () - NUMBER_CONSTANT ;
Code	int start = start () - NUMBER_CONSTANT ;
Distance : 4

38
Tree	double start = null ;
Code	double start = null ;
Distance : 7

39
Tree	long start = this . start ;
Code	long start = this . start ;
Distance : 7

40
Tree	int *= ;
Code	int *= ;
Distance : 8

41
Tree	boolean start = this . start ;
Code	boolean start = this . start ;
Distance : 7

42
Tree	final Integer [] start ;
Code	final Integer [] start ;
Distance : 9

43
Tree	float start ;
Code	float start ;
Distance : 8

44
Tree	double start = getHeight ;
Code	double start = getHeight ;
Distance : 7

45
Tree	final int start = MathUtils ;
Code	final int start = MathUtils ;
Distance : 7

46
Tree	int start = break; ;
Code	int start = break; ;
Distance : 6

47
Tree	double start = continue; ;
Code	double start = continue; ;
Distance : 7

48
Tree	byte start = NUMBER_CONSTANT ;
Code	byte start = NUMBER_CONSTANT ;
Distance : 6

49
Tree	int start = epsilon ;
Code	int start = epsilon ;
Distance : 6

50
Tree	Integer [] start = getHeight () ;
Code	Integer [] start = getHeight () ;
Distance : 7

51
Tree	final double start = getNumObjectiveFunctions () ;
Code	final double start = getNumObjectiveFunctions () ;
Distance : 6

52
Tree	final int start = getHeight () ;
Code	final int start = getHeight () ;
Distance : 6

53
Tree	char start = this . start ;
Code	char start = this . start ;
Distance : 7

54
Tree	long [] ;
Code	long [] ;
Distance : 9

55
Tree	boolean [] ;
Code	boolean [] ;
Distance : 9

56
Tree	final getHeight [] start ;
Code	final getHeight [] start ;
Distance : 9

57
Tree	int start = getEntry () - NUMBER_CONSTANT ;
Code	int start = getEntry () - NUMBER_CONSTANT ;
Distance : 4

58
Tree	int start = i ;
Code	int start = i ;
Distance : 6

59
Tree	final epsilon [] start ;
Code	final epsilon [] start ;
Distance : 9

60
Tree	byte start = this . start ;
Code	byte start = this . start ;
Distance : 7

61
Tree	int start = i () ;
Code	int start = i () ;
Distance : 5

62
Tree	start start = getEntry () ;
Code	start start = getEntry () ;
Distance : 6

63
Tree	int start = getNumObjectiveFunctions ;
Code	int start = getNumObjectiveFunctions ;
Distance : 5

64
Tree	int Integer ;
Code	int Integer ;
Distance : 8

65
Tree	final getEntry [] start ;
Code	final getEntry [] start ;
Distance : 9

66
Tree	final int start = getEntry ;
Code	final int start = getEntry ;
Distance : 7

67
Tree	double start = getEntry () ;
Code	double start = getEntry () ;
Distance : 6

68
Tree	double start = epsilon ;
Code	double start = epsilon ;
Distance : 7

69
Tree	double start = this . start ;
Code	double start = this . start ;
Distance : 7

70
Tree	final int start = start () ;
Code	final int start = start () ;
Distance : 6

71
Tree	double start = getNumObjectiveFunctions + NUMBER_CONSTANT ;
Code	double start = getNumObjectiveFunctions + NUMBER_CONSTANT ;
Distance : 5

72
Tree	int start = default: ;
Code	int start = default: ;
Distance : 6

73
Tree	short start = NUMBER_CONSTANT ;
Code	short start = NUMBER_CONSTANT ;
Distance : 6

74
Tree	double start = super(); ;
Code	double start = super(); ;
Distance : 7

75
Tree	void start = NUMBER_CONSTANT ;
Code	void start = NUMBER_CONSTANT ;
Distance : 6

76
Tree	int start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	int start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 3

77
Tree	int start ;
Code	int start ;
Distance : 7

78
Tree	double start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	double start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 4

79
Tree	float start = this . start ;
Code	float start = this . start ;
Distance : 7

80
Tree	final long start ;
Code	final long start ;
Distance : 9

81
Tree	double start = i ;
Code	double start = i ;
Distance : 7

82
Tree	int start = start ;
Code	int start = start ;
Distance : 6

83
Tree	double start = getHeight () - NUMBER_CONSTANT ;
Code	double start = getHeight () - NUMBER_CONSTANT ;
Distance : 5

84
Tree	start start = start () ;
Code	start start = start () ;
Distance : 6

85
Tree	int start = getHeight ;
Code	int start = getHeight ;
Distance : 6

86
Tree	start start = epsilon () ;
Code	start start = epsilon () ;
Distance : 6

87
Tree	int start = getEntry ;
Code	int start = getEntry ;
Distance : 6

88
Tree	int start = NUMBER_CONSTANT ;
Code	int start = NUMBER_CONSTANT ;
Distance : 5

89
Tree	long start = null ;
Code	long start = null ;
Distance : 7

90
Tree	final double start ;
Code	final double start ;
Distance : 9

91
Tree	int [] ;
Code	int [] ;
Distance : 8

92
Tree	double [] start = getNumObjectiveFunctions () ;
Code	double [] start = getNumObjectiveFunctions () ;
Distance : 6

93
Tree	double [] start = getEntry () ;
Code	double [] start = getEntry () ;
Distance : 7

94
Tree	boolean start ;
Code	boolean start ;
Distance : 8

95
Tree	final Integer [] start = getHeight () ;
Code	final Integer [] start = getHeight () ;
Distance : 8

96
Tree	final Integer [] start = i () ;
Code	final Integer [] start = i () ;
Distance : 8

97
Tree	char [] ;
Code	char [] ;
Distance : 9

98
Tree	final int start = getEntry () ;
Code	final int start = getEntry () ;
Distance : 6

99
Tree	final Integer < Integer > start = getEntry () ;
Code	final Integer < Integer > start = getEntry () ;
Distance : 9

100
Tree	int start = getHeight () . epsilon ;
Code	int start = getHeight () . epsilon ;
Distance : 5

101
Tree	void start = this . start ;
Code	void start = this . start ;
Distance : 7

102
Tree	final start [] start ;
Code	final start [] start ;
Distance : 8

103
Tree	public int start ;
Code	public int start ;
Distance : 8

104
Tree	int start = epsilon + NUMBER_CONSTANT ;
Code	int start = epsilon + NUMBER_CONSTANT ;
Distance : 5

105
Tree	double start ;
Code	double start ;
Distance : 8

106
Tree	int start = getHeight () . i ;
Code	int start = getHeight () . i ;
Distance : 5

107
Tree	Integer [] start = getNumObjectiveFunctions () ;
Code	Integer [] start = getNumObjectiveFunctions () ;
Distance : 6

108
Tree	final int start = start ;
Code	final int start = start ;
Distance : 7

109
Tree	double start = NUMBER_CONSTANT ;
Code	double start = NUMBER_CONSTANT ;
Distance : 6

110
Tree	int start = getEntry () ;
Code	int start = getEntry () ;
Distance : 5

111
Tree	int % ;
Code	int % ;
Distance : 8

112
Tree	int start = getNumObjectiveFunctions ;
Code	int start = getNumObjectiveFunctions ;
Distance : 5

113
Tree	int start = start () ;
Code	int start = start () ;
Distance : 5

114
Tree	int start = getHeight () - NUMBER_CONSTANT ;
Code	int start = getHeight () - NUMBER_CONSTANT ;
Distance : 4

115
Tree	void start ;
Code	void start ;
Distance : 8

116
Tree	final int start = getNumObjectiveFunctions () ;
Code	final int start = getNumObjectiveFunctions () ;
Distance : 5

117
Tree	final int start = i ;
Code	final int start = i ;
Distance : 7

118
Tree	int [] start = equals () ;
Code	int [] start = equals () ;
Distance : 6

119
Tree	int += ;
Code	int += ;
Distance : 8

120
Tree	char start ;
Code	char start ;
Distance : 8

121
Tree	double start = getNumObjectiveFunctions () ;
Code	double start = getNumObjectiveFunctions () ;
Distance : 5

122
Tree	int start = getHeight () . getNumObjectiveFunctions ;
Code	int start = getHeight () . getNumObjectiveFunctions ;
Distance : 5

123
Tree	int start = getHeight () . equals ;
Code	int start = getHeight () . equals ;
Distance : 5

124
Tree	final Integer < getHeight > start = getHeight () ;
Code	final Integer < getHeight > start = getHeight () ;
Distance : 9

125
Tree	int start = null ;
Code	int start = null ;
Distance : 6

126
Tree	long [] start = getHeight () ;
Code	long [] start = getHeight () ;
Distance : 7

127
Tree	final int [] start ;
Code	final int [] start ;
Distance : 9

128
Tree	int start = getHeight () ;
Code	int start = getHeight () ;
Distance : 5

129
Tree	double start = getHeight ;
Code	double start = getHeight ;
Distance : 7

130
Tree	start start = getNumObjectiveFunctions () ;
Code	start start = getNumObjectiveFunctions () ;
Distance : 5

131
Tree	final double start = getEntry () ;
Code	final double start = getEntry () ;
Distance : 7

132
Tree	start start = equals () ;
Code	start start = equals () ;
Distance : 6

133
Tree	final int start ;
Code	final int start ;
Distance : 8

134
Tree	final int start = i () ;
Code	final int start = i () ;
Distance : 6

135
Tree	int /= ;
Code	int /= ;
Distance : 8

136
Tree	boolean start = getHeight ;
Code	boolean start = getHeight ;
Distance : 7

137
Tree	final Integer < col > start = getHeight () ;
Code	final Integer < col > start = getHeight () ;
Distance : 9

138
Tree	int start = getEntry () . start ;
Code	int start = getEntry () . start ;
Distance : 5

139
Tree	double [] ;
Code	double [] ;
Distance : 9

140
Tree	start [] start = getHeight () ;
Code	start [] start = getHeight () ;
Distance : 7

141
Tree	start start = col () ;
Code	start start = col () ;
Distance : 6

142
Tree	final Integer < Integer > start = getNumObjectiveFunctions () ;
Code	final Integer < Integer > start = getNumObjectiveFunctions () ;
Distance : 9

143
Tree	int start = getEntry () . i ;
Code	int start = getEntry () . i ;
Distance : 5

144
Tree	long start = getHeight ;
Code	long start = getHeight ;
Distance : 7

145
Tree	final row [] start = getHeight () ;
Code	final row [] start = getHeight () ;
Distance : 8

146
Tree	start start = MathUtils () ;
Code	start start = MathUtils () ;
Distance : 6

147
Tree	int start = getNumObjectiveFunctions () . start ;
Code	int start = getNumObjectiveFunctions () . start ;
Distance : 4

148
Tree	final Integer [] start = start () ;
Code	final Integer [] start = start () ;
Distance : 8

149
Tree	int start = continue; ;
Code	int start = continue; ;
Distance : 6

150
Tree	final Integer < getNumObjectiveFunctions > start = getHeight () ;
Code	final Integer < getNumObjectiveFunctions > start = getHeight () ;
Distance : 9

151
Tree	final Integer < i > start = getEntry () ;
Code	final Integer < i > start = getEntry () ;
Distance : 9

152
Tree	double start = getNumObjectiveFunctions ;
Code	double start = getNumObjectiveFunctions ;
Distance : 6

153
Tree	byte start ;
Code	byte start ;
Distance : 8

154
Tree	int start = getHeight () . getHeight ;
Code	int start = getHeight () . getHeight ;
Distance : 5

155
Tree	int start = super(); ;
Code	int start = super(); ;
Distance : 6

156
Tree	double += ;
Code	double += ;
Distance : 9

157
Tree	final Integer [] start = epsilon () ;
Code	final Integer [] start = epsilon () ;
Distance : 8

158
Tree	char start = getHeight ;
Code	char start = getHeight ;
Distance : 7

159
Tree	final byte start ;
Code	final byte start ;
Distance : 9

160
Tree	int start = getNumObjectiveFunctions () . i ;
Code	int start = getNumObjectiveFunctions () . i ;
Distance : 4

161
Tree	final boolean start ;
Code	final boolean start ;
Distance : 9

162
Tree	final Integer < i > start = getHeight () ;
Code	final Integer < i > start = getHeight () ;
Distance : 9

163
Tree	final int start = getHeight ;
Code	final int start = getHeight ;
Distance : 7

164
Tree	final Integer < epsilon > start = getHeight () ;
Code	final Integer < epsilon > start = getHeight () ;
Distance : 9

165
Tree	final Integer < epsilon > start = getEntry () ;
Code	final Integer < epsilon > start = getEntry () ;
Distance : 9

166
Tree	int start = getNumObjectiveFunctions () ;
Code	int start = getNumObjectiveFunctions () ;
Distance : 4

167
Tree	final row [] start ;
Code	final row [] start ;
Distance : 9

168
Tree	Integer [] start = i () ;
Code	Integer [] start = i () ;
Distance : 7

169
Tree	int start = this . start ;
Code	int start = this . start ;
Distance : 6

170
Tree	double start = epsilon + NUMBER_CONSTANT ;
Code	double start = epsilon + NUMBER_CONSTANT ;
Distance : 6

171
Tree	int [] start = i () ;
Code	int [] start = i () ;
Distance : 6

172
Tree	final int start = equals () ;
Code	final int start = equals () ;
Distance : 6

173
Tree	long start = NUMBER_CONSTANT ;
Code	long start = NUMBER_CONSTANT ;
Distance : 6

174
Tree	long start = getHeight () - NUMBER_CONSTANT ;
Code	long start = getHeight () - NUMBER_CONSTANT ;
Distance : 5

175
Tree	boolean start = getHeight () - NUMBER_CONSTANT ;
Code	boolean start = getHeight () - NUMBER_CONSTANT ;
Distance : 5

176
Tree	final epsilon [] start = getHeight () ;
Code	final epsilon [] start = getHeight () ;
Distance : 8

177
Tree	double start = getNumObjectiveFunctions ;
Code	double start = getNumObjectiveFunctions ;
Distance : 6

178
Tree	final double start = getHeight () ;
Code	final double start = getHeight () ;
Distance : 7

179
Tree	int Integer = this . start ;
Code	int Integer = this . start ;
Distance : 7

180
Tree	final start [] start = getHeight () ;
Code	final start [] start = getHeight () ;
Distance : 7

181
Tree	int start = getHeight () . start ;
Code	int start = getHeight () . start ;
Distance : 5

182
Tree	int start = epsilon ;
Code	int start = epsilon ;
Distance : 6

183
Tree	final int start = epsilon () ;
Code	final int start = epsilon () ;
Distance : 6

184
Tree	i [] start = getHeight () ;
Code	i [] start = getHeight () ;
Distance : 7

185
Tree	final int start = getNumObjectiveFunctions ;
Code	final int start = getNumObjectiveFunctions ;
Distance : 6

186
Tree	start start = i () ;
Code	start start = i () ;
Distance : 6

187
Tree	Integer [] start = start () ;
Code	Integer [] start = start () ;
Distance : 7

188
Tree	final Integer < Integer > start = getHeight () ;
Code	final Integer < Integer > start = getHeight () ;
Distance : 9

189
Tree	row [] start = getHeight () ;
Code	row [] start = getHeight () ;
Distance : 7

190
Tree	boolean start = NUMBER_CONSTANT ;
Code	boolean start = NUMBER_CONSTANT ;
Distance : 6

191
Tree	int [] start = start () ;
Code	int [] start = start () ;
Distance : 6

192
Tree	int start = Integer ;
Code	int start = Integer ;
Distance : 6

193
Tree	short start = this . start ;
Code	short start = this . start ;
Distance : 7

194
Tree	final int start = equals ;
Code	final int start = equals ;
Distance : 7

195
Tree	epsilon [] start = getHeight () ;
Code	epsilon [] start = getHeight () ;
Distance : 7

196
Tree	epsilon [] start = getEntry () ;
Code	epsilon [] start = getEntry () ;
Distance : 7

197
Tree	Integer [] start = getEntry () ;
Code	Integer [] start = getEntry () ;
Distance : 7

198
Tree	final Integer [] start = equals () ;
Code	final Integer [] start = equals () ;
Distance : 8

199
Tree	start start = Integer () ;
Code	start start = Integer () ;
Distance : 6

========================================================================


========================================================================
Example Number: 55
Parent Code is: 
int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Child code is: 
int j = NUMBER_CONSTANT * ( n - NUMBER_CONSTANT ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=j}) (204{val==}) (27 (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (800{val=n})) (201{val=-}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=j}) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (36 (214{val=(}) (27 (800{val=n}) (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/80/parent/src_main_java_org_apache_commons_math_linear_EigenDecompositionImpl.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	int j = n + n . j ( j , n , NUMBER_CONSTANT ) - k ;
Code	int j = n + n . j ( j , n , NUMBER_CONSTANT ) - k ;
Distance : 10

1
Tree	int j = n + n . j ( n , n , n ) + n - j ;
Code	int j = n + n . j ( n , n , n ) + n - j ;
Distance : 13

2
Tree	int j = n + j . j ( n , n , n ) + n - j ;
Code	int j = n + j . j ( n , n , n ) + n - j ;
Distance : 13

3
Tree	int j = n + j . j ( j , n , NUMBER_CONSTANT ) - k ;
Code	int j = n + j . j ( j , n , NUMBER_CONSTANT ) - k ;
Distance : 10

4
Tree	int j = n < = - j ;
Code	int j = n < = - j ;
Distance : 6

5
Tree	int j = n + n . j ( j , n , n ) + n - n ;
Code	int j = n + n . j ( j , n , n ) + n - n ;
Distance : 13

6
Tree	int j = n + j . j ( j , n , n ) + n - n ;
Code	int j = n + j . j ( j , n , n ) + n - n ;
Distance : 13

7
Tree	int j = flipIfWarranted ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = flipIfWarranted ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

8
Tree	int j = = ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = = ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

9
Tree	int j = n + n . j ( j , n , j ) + n - j ;
Code	int j = n + n . j ( j , n , j ) + n - j ;
Distance : 13

10
Tree	int j = NUMBER_CONSTANT * k - n ;
Code	int j = NUMBER_CONSTANT * k - n ;
Distance : 4

11
Tree	int j = n / k - n ;
Code	int j = n / k - n ;
Distance : 6

12
Tree	int j = n + j - j ;
Code	int j = n + j - j ;
Distance : 6

13
Tree	int j = n + n - j ;
Code	int j = n + n - j ;
Distance : 5

14
Tree	int j = NUMBER_CONSTANT * k - NUMBER_CONSTANT ;
Code	int j = NUMBER_CONSTANT * k - NUMBER_CONSTANT ;
Distance : 3

15
Tree	int j = NUMBER_CONSTANT * n - i ;
Code	int j = NUMBER_CONSTANT * n - i ;
Distance : 3

16
Tree	int j = ( int ) n * throws ;
Code	int j = ( int ) n * throws ;
Distance : 6

17
Tree	double j = ( int ) n * / ;
Code	double j = ( int ) n * / ;
Distance : 7

18
Tree	int j = ( n < < NUMBER_CONSTANT ) + n - n ;
Code	int j = ( n < < NUMBER_CONSTANT ) + n - n ;
Distance : 8

19
Tree	int j = n == NUMBER_CONSTANT - n ;
Code	int j = n == NUMBER_CONSTANT - n ;
Distance : 6

20
Tree	long j = ( n < < NUMBER_CONSTANT ) + n - j ;
Code	long j = ( n < < NUMBER_CONSTANT ) + n - j ;
Distance : 9

21
Tree	int j = n - j - n ;
Code	int j = n - j - n ;
Distance : 6

22
Tree	double j = n + j - j ;
Code	double j = n + j - j ;
Distance : 7

23
Tree	double j = n + n - j ;
Code	double j = n + n - j ;
Distance : 6

24
Tree	double j = NUMBER_CONSTANT * k - NUMBER_CONSTANT ;
Code	double j = NUMBER_CONSTANT * k - NUMBER_CONSTANT ;
Distance : 4

25
Tree	double j = ( n < < NUMBER_CONSTANT ) + n - n ;
Code	double j = ( n < < NUMBER_CONSTANT ) + n - n ;
Distance : 9

26
Tree	int i = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	int i = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

27
Tree	long j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	long j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

28
Tree	int j = n == NUMBER_CONSTANT - j ;
Code	int j = n == NUMBER_CONSTANT - j ;
Distance : 6

29
Tree	int j = n - j - j ;
Code	int j = n - j - j ;
Distance : 6

30
Tree	int j = ( n < < NUMBER_CONSTANT ) + n - k ;
Code	int j = ( n < < NUMBER_CONSTANT ) + n - k ;
Distance : 8

31
Tree	double j = n == NUMBER_CONSTANT - n ;
Code	double j = n == NUMBER_CONSTANT - n ;
Distance : 7

32
Tree	double j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Code	double j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Distance : 6

33
Tree	int j = n + n - n ;
Code	int j = n + n - n ;
Distance : 5

34
Tree	int j = n + j - n ;
Code	int j = n + j - n ;
Distance : 6

35
Tree	double j = n ^ j - j ;
Code	double j = n ^ j - j ;
Distance : 7

36
Tree	long j = n + j - j ;
Code	long j = n + j - j ;
Distance : 7

37
Tree	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - j ;
Code	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - j ;
Distance : 5

38
Tree	int j = n + k - j ;
Code	int j = n + k - j ;
Distance : 6

39
Tree	int k = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	int k = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

40
Tree	int j = n < j - n ;
Code	int j = n < j - n ;
Distance : 6

41
Tree	int j = n / j - n ;
Code	int j = n / j - n ;
Distance : 6

42
Tree	int j = ( n < < NUMBER_CONSTANT ) + k - n ;
Code	int j = ( n < < NUMBER_CONSTANT ) + k - n ;
Distance : 8

43
Tree	int j = n - k - j ;
Code	int j = n - k - j ;
Distance : 6

44
Tree	long j = NUMBER_CONSTANT * k - NUMBER_CONSTANT ;
Code	long j = NUMBER_CONSTANT * k - NUMBER_CONSTANT ;
Distance : 4

45
Tree	int j = n < i - j ;
Code	int j = n < i - j ;
Distance : 6

46
Tree	int j = NUMBER_CONSTANT * k - j ;
Code	int j = NUMBER_CONSTANT * k - j ;
Distance : 4

47
Tree	long j = ( n < < NUMBER_CONSTANT ) + n - n ;
Code	long j = ( n < < NUMBER_CONSTANT ) + n - n ;
Distance : 9

48
Tree	int j = n - n - n ;
Code	int j = n - n - n ;
Distance : 5

49
Tree	int j = n / n - n ;
Code	int j = n / n - n ;
Distance : 5

50
Tree	int j = n + n . j ( j , n , NUMBER_CONSTANT ) - j ;
Code	int j = n + n . j ( j , n , NUMBER_CONSTANT ) - j ;
Distance : 10

51
Tree	int j = n / k - j ;
Code	int j = n / k - j ;
Distance : 6

52
Tree	int j = n - n - j ;
Code	int j = n - n - j ;
Distance : 5

53
Tree	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - k ;
Code	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - k ;
Distance : 5

54
Tree	int j = n + j . j ( j , n , NUMBER_CONSTANT ) - j ;
Code	int j = n + j . j ( j , n , NUMBER_CONSTANT ) - j ;
Distance : 10

55
Tree	double j = NUMBER_CONSTANT * n - j ;
Code	double j = NUMBER_CONSTANT * n - j ;
Distance : 4

56
Tree	int j = n * j - n ;
Code	int j = n * j - n ;
Distance : 5

57
Tree	int j = NUMBER_CONSTANT * n - j ;
Code	int j = NUMBER_CONSTANT * n - j ;
Distance : 3

58
Tree	int j = n / j - j ;
Code	int j = n / j - j ;
Distance : 6

59
Tree	int j = n / n - j ;
Code	int j = n / n - j ;
Distance : 5

60
Tree	int j = n * k - j ;
Code	int j = n * k - j ;
Distance : 5

61
Tree	int j = ( n < < NUMBER_CONSTANT ) + j - j ;
Code	int j = ( n < < NUMBER_CONSTANT ) + j - j ;
Distance : 8

62
Tree	int j = n * n - n ;
Code	int j = n * n - n ;
Distance : 4

63
Tree	long j = n == NUMBER_CONSTANT - n ;
Code	long j = n == NUMBER_CONSTANT - n ;
Distance : 7

64
Tree	int j = n < k - j ;
Code	int j = n < k - j ;
Distance : 6

65
Tree	long j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Code	long j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Distance : 6

66
Tree	int j = n - j - k ;
Code	int j = n - j - k ;
Distance : 6

67
Tree	int j = n + n . j ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + n . j ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

68
Tree	int j = flipIfWarranted ( n , n , n ) / j ;
Code	int j = flipIfWarranted ( n , n , n ) / j ;
Distance : 8

69
Tree	int j = ( int ) n * / ;
Code	int j = ( int ) n * / ;
Distance : 6

70
Tree	int j = n + j . j ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + j . j ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

71
Tree	int j = i ( n , n , n ) / n ;
Code	int j = i ( n , n , n ) / n ;
Distance : 8

72
Tree	int j = = ( n , n , n ) / j ;
Code	int j = = ( n , n , n ) / j ;
Distance : 8

73
Tree	int j = NUMBER_CONSTANT * n - n ;
Code	int j = NUMBER_CONSTANT * n - n ;
Distance : 3

74
Tree	int j = n / j - k ;
Code	int j = n / j - k ;
Distance : 6

75
Tree	double j = NUMBER_CONSTANT + NUMBER_CONSTANT - k ;
Code	double j = NUMBER_CONSTANT + NUMBER_CONSTANT - k ;
Distance : 6

76
Tree	double j = n == NUMBER_CONSTANT - k ;
Code	double j = n == NUMBER_CONSTANT - k ;
Distance : 7

77
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 2

78
Tree	int j = n * j - j ;
Code	int j = n * j - j ;
Distance : 5

79
Tree	long j = NUMBER_CONSTANT * n - j ;
Code	long j = NUMBER_CONSTANT * n - j ;
Distance : 4

80
Tree	int j = n + n . j ( n , n , NUMBER_CONSTANT ) - j ;
Code	int j = n + n . j ( n , n , NUMBER_CONSTANT ) - j ;
Distance : 10

81
Tree	int j = n == NUMBER_CONSTANT - step ;
Code	int j = n == NUMBER_CONSTANT - step ;
Distance : 6

82
Tree	int j = n + j . j ( n , n , NUMBER_CONSTANT ) - j ;
Code	int j = n + j . j ( n , n , NUMBER_CONSTANT ) - j ;
Distance : 10

83
Tree	int j = ( long ) n * / ;
Code	int j = ( long ) n * / ;
Distance : 6

84
Tree	int j = k ( n , n , n ) / j ;
Code	int j = k ( n , n , n ) / j ;
Distance : 8

85
Tree	boolean j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Code	boolean j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Distance : 6

86
Tree	int j = n + n - k ;
Code	int j = n + n - k ;
Distance : 5

87
Tree	int j = NUMBER_CONSTANT * k - k ;
Code	int j = NUMBER_CONSTANT * k - k ;
Distance : 4

88
Tree	int j = ( long ) n * % ;
Code	int j = ( long ) n * % ;
Distance : 6

89
Tree	int j = n + j - k ;
Code	int j = n + j - k ;
Distance : 6

90
Tree	int j = n == NUMBER_CONSTANT - k ;
Code	int j = n == NUMBER_CONSTANT - k ;
Distance : 6

91
Tree	int j = n < = - n ;
Code	int j = n < = - n ;
Distance : 6

92
Tree	double j = NUMBER_CONSTANT * n - j - j ;
Code	double j = NUMBER_CONSTANT * n - j - j ;
Distance : 5

93
Tree	int j = n * n - j ;
Code	int j = n * n - j ;
Distance : 4

94
Tree	int j = n + n . j ( n , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + n . j ( n , n , NUMBER_CONSTANT ) - n ;
Distance : 10

95
Tree	byte j = n & NUMBER_CONSTANT ;
Code	byte j = n & NUMBER_CONSTANT ;
Distance : 6

96
Tree	int j = n ^ j - n ;
Code	int j = n ^ j - n ;
Distance : 6

97
Tree	int j = n == NUMBER_CONSTANT - i ;
Code	int j = n == NUMBER_CONSTANT - i ;
Distance : 6

98
Tree	double j = n & NUMBER_CONSTANT ;
Code	double j = n & NUMBER_CONSTANT ;
Distance : 6

99
Tree	double j = n == NUMBER_CONSTANT - j ;
Code	double j = n == NUMBER_CONSTANT - j ;
Distance : 7

100
Tree	int j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Code	int j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Distance : 3

101
Tree	int j = n + j . j ( n , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + j . j ( n , n , NUMBER_CONSTANT ) - n ;
Distance : 10

102
Tree	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Code	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Distance : 5

103
Tree	int j = k & NUMBER_CONSTANT ;
Code	int j = k & NUMBER_CONSTANT ;
Distance : 6

104
Tree	int j = n ^ j - j ;
Code	int j = n ^ j - j ;
Distance : 6

105
Tree	int j = NUMBER_CONSTANT * n - n - j ;
Code	int j = NUMBER_CONSTANT * n - n - j ;
Distance : 4

106
Tree	long j = NUMBER_CONSTANT * n - j - j ;
Code	long j = NUMBER_CONSTANT * n - j - j ;
Distance : 5

107
Tree	int j = NUMBER_CONSTANT * n - k ;
Code	int j = NUMBER_CONSTANT * n - k ;
Distance : 3

108
Tree	int j = n * k - n ;
Code	int j = n * k - n ;
Distance : 5

109
Tree	int j = ( long ) n * throws ;
Code	int j = ( long ) n * throws ;
Distance : 6

110
Tree	double j = n - j - j ;
Code	double j = n - j - j ;
Distance : 7

111
Tree	double j = ( n < < NUMBER_CONSTANT ) + n - j ;
Code	double j = ( n < < NUMBER_CONSTANT ) + n - j ;
Distance : 9

112
Tree	double j = NUMBER_CONSTANT * n - n ;
Code	double j = NUMBER_CONSTANT * n - n ;
Distance : 4

113
Tree	long j = n - j - j ;
Code	long j = n - j - j ;
Distance : 7

114
Tree	int j = n - n - k ;
Code	int j = n - n - k ;
Distance : 5

115
Tree	double j = NUMBER_CONSTANT + NUMBER_CONSTANT - j ;
Code	double j = NUMBER_CONSTANT + NUMBER_CONSTANT - j ;
Distance : 6

116
Tree	int j = n & NUMBER_CONSTANT ;
Code	int j = n & NUMBER_CONSTANT ;
Distance : 5

117
Tree	int j = NUMBER_CONSTANT * n - k - j ;
Code	int j = NUMBER_CONSTANT * n - k - j ;
Distance : 4

118
Tree	int j = ( int ) n * ^ ;
Code	int j = ( int ) n * ^ ;
Distance : 6

119
Tree	int j = j ( n , n , n ) / j ;
Code	int j = j ( n , n , n ) / j ;
Distance : 8

120
Tree	int j = n - k - n ;
Code	int j = n - k - n ;
Distance : 6

121
Tree	int j = NUMBER_CONSTANT * n - j - j ;
Code	int j = NUMBER_CONSTANT * n - j - j ;
Distance : 4

122
Tree	double j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	double j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

123
Tree	int j = n / n - k ;
Code	int j = n / n - k ;
Distance : 5

124
Tree	int j = NUMBER_CONSTANT * k - j - j ;
Code	int j = NUMBER_CONSTANT * k - j - j ;
Distance : 5

125
Tree	double j = n / j - j ;
Code	double j = n / j - j ;
Distance : 7

126
Tree	int j = n ^ k - j ;
Code	int j = n ^ k - j ;
Distance : 6

127
Tree	int j = n ^ j - k ;
Code	int j = n ^ j - k ;
Distance : 6

128
Tree	long j = n == NUMBER_CONSTANT - j ;
Code	long j = n == NUMBER_CONSTANT - j ;
Distance : 7

129
Tree	int j = NUMBER_CONSTANT * n - j - k ;
Code	int j = NUMBER_CONSTANT * n - j - k ;
Distance : 4

130
Tree	int j = j ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = j ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

131
Tree	int j = n * j - k ;
Code	int j = n * j - k ;
Distance : 5

132
Tree	int i = n & NUMBER_CONSTANT ;
Code	int i = n & NUMBER_CONSTANT ;
Distance : 6

133
Tree	int j = i & NUMBER_CONSTANT ;
Code	int j = i & NUMBER_CONSTANT ;
Distance : 6

134
Tree	int j = n ^ n - j ;
Code	int j = n ^ n - j ;
Distance : 5

135
Tree	int j = ( n < < NUMBER_CONSTANT ) + n - j ;
Code	int j = ( n < < NUMBER_CONSTANT ) + n - j ;
Distance : 8

136
Tree	int j = j ( n , n , j ) / j ;
Code	int j = j ( n , n , j ) / j ;
Distance : 8

137
Tree	double j = n * j - j ;
Code	double j = n * j - j ;
Distance : 6

138
Tree	int j = NUMBER_CONSTANT * n - n - k ;
Code	int j = NUMBER_CONSTANT * n - n - k ;
Distance : 4

139
Tree	int j = NUMBER_CONSTANT * n - j - i ;
Code	int j = NUMBER_CONSTANT * n - j - i ;
Distance : 4

140
Tree	int j = ( n < < NUMBER_CONSTANT ) + k - j ;
Code	int j = ( n < < NUMBER_CONSTANT ) + k - j ;
Distance : 8

141
Tree	boolean j = n & NUMBER_CONSTANT ;
Code	boolean j = n & NUMBER_CONSTANT ;
Distance : 6

142
Tree	int j = j ( n , n , n ) / n ;
Code	int j = j ( n , n , n ) / n ;
Distance : 8

143
Tree	boolean j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	boolean j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

144
Tree	int j = n ^ n - n ;
Code	int j = n ^ n - n ;
Distance : 5

145
Tree	int j = n < i - n ;
Code	int j = n < i - n ;
Distance : 6

146
Tree	int j = NUMBER_CONSTANT * n - j - n ;
Code	int j = NUMBER_CONSTANT * n - j - n ;
Distance : 4

147
Tree	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - i ;
Code	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - i ;
Distance : 5

148
Tree	double j = ( long ) n * / ;
Code	double j = ( long ) n * / ;
Distance : 7

149
Tree	int j = n * n - k ;
Code	int j = n * n - k ;
Distance : 4

150
Tree	int j = n + j . j ( j , n , j ) + n - j ;
Code	int j = n + j . j ( j , n , j ) + n - j ;
Distance : 13

151
Tree	int j = n ^ n - k ;
Code	int j = n ^ n - k ;
Distance : 5

152
Tree	int j = n + k . j ( j , n , n ) + n - j ;
Code	int j = n + k . j ( j , n , n ) + n - j ;
Distance : 13

153
Tree	int j = n / i - j ;
Code	int j = n / i - j ;
Distance : 6

154
Tree	int j = j n j - n ;
Code	int j = j n j - n ;
Distance : 6

155
Tree	int j = n ^ i - j ;
Code	int j = n ^ i - j ;
Distance : 6

156
Tree	int j = n + n . k ( j , n , n ) + n - j ;
Code	int j = n + n . k ( j , n , n ) + n - j ;
Distance : 13

157
Tree	long j = n & NUMBER_CONSTANT ;
Code	long j = n & NUMBER_CONSTANT ;
Distance : 6

158
Tree	long j = n ^ j - j ;
Code	long j = n ^ j - j ;
Distance : 7

159
Tree	int j = j n j - j ;
Code	int j = j n j - j ;
Distance : 6

160
Tree	double j = n * n - j ;
Code	double j = n * n - j ;
Distance : 5

161
Tree	int k = n & NUMBER_CONSTANT ;
Code	int k = n & NUMBER_CONSTANT ;
Distance : 6

162
Tree	int j = flipIfWarranted ( n , n , n ) / n ;
Code	int j = flipIfWarranted ( n , n , n ) / n ;
Distance : 8

163
Tree	int j = = ( n , n , n ) / n ;
Code	int j = = ( n , n , n ) / n ;
Distance : 8

164
Tree	int j = flipIfWarranted n j - n ;
Code	int j = flipIfWarranted n j - n ;
Distance : 6

165
Tree	int j = ( long ) n * ^ ;
Code	int j = ( long ) n * ^ ;
Distance : 6

166
Tree	char j = n & NUMBER_CONSTANT ;
Code	char j = n & NUMBER_CONSTANT ;
Distance : 6

167
Tree	int j = n < k - n ;
Code	int j = n < k - n ;
Distance : 6

168
Tree	int j = ( int ) j * j - j ;
Code	int j = ( int ) j * j - j ;
Distance : 8

169
Tree	int j = i n j - n ;
Code	int j = i n j - n ;
Distance : 6

170
Tree	int j = n < j - j ;
Code	int j = n < j - j ;
Distance : 6

171
Tree	int j = n + n . j ( j , n , n ) + n - j ;
Code	int j = n + n . j ( j , n , n ) + n - j ;
Distance : 13

172
Tree	int j = ( long ) j * j - j ;
Code	int j = ( long ) j * j - j ;
Distance : 8

173
Tree	int j = i ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = i ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

174
Tree	long j = NUMBER_CONSTANT + NUMBER_CONSTANT - j ;
Code	long j = NUMBER_CONSTANT + NUMBER_CONSTANT - j ;
Distance : 6

175
Tree	int j = k ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = k ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

176
Tree	int j = ( int ) k * j - j ;
Code	int j = ( int ) k * j - j ;
Distance : 8

177
Tree	int j = ( int ) j * j - n ;
Code	int j = ( int ) j * j - n ;
Distance : 8

178
Tree	int j = n + j . j ( j , n , n ) + n - j ;
Code	int j = n + j . j ( j , n , n ) + n - j ;
Distance : 13

179
Tree	int j = n < flipIfWarranted - j ;
Code	int j = n < flipIfWarranted - j ;
Distance : 6

180
Tree	int j = flipIfWarranted n j - j ;
Code	int j = flipIfWarranted n j - j ;
Distance : 6

181
Tree	int j = ( long ) j * j - n ;
Code	int j = ( long ) j * j - n ;
Distance : 8

182
Tree	int j = j ( n , n , j ) >= NUMBER_CONSTANT ;
Code	int j = j ( n , n , j ) >= NUMBER_CONSTANT ;
Distance : 8

183
Tree	int j = flipIfWarranted ( n , n , j ) >= NUMBER_CONSTANT ;
Code	int j = flipIfWarranted ( n , n , j ) >= NUMBER_CONSTANT ;
Distance : 8

184
Tree	int j = = ( n , n , j ) >= NUMBER_CONSTANT ;
Code	int j = = ( n , n , j ) >= NUMBER_CONSTANT ;
Distance : 8

185
Tree	int j = NUMBER_CONSTANT n j - n ;
Code	int j = NUMBER_CONSTANT n j - n ;
Distance : 5

186
Tree	int j = ( int ) n * j - j ;
Code	int j = ( int ) n * j - j ;
Distance : 7

187
Tree	int j = ( int ) k * j - n ;
Code	int j = ( int ) k * j - n ;
Distance : 8

188
Tree	int j = i n j - j ;
Code	int j = i n j - j ;
Distance : 6

189
Tree	int j = ( long ) k * j - j ;
Code	int j = ( long ) k * j - j ;
Distance : 8

190
Tree	int j = NUMBER_CONSTANT n j - j ;
Code	int j = NUMBER_CONSTANT n j - j ;
Distance : 5

191
Tree	double j = j ( n , n , n ) >= NUMBER_CONSTANT ;
Code	double j = j ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

192
Tree	int j = i ( n , n , n ) / j ;
Code	int j = i ( n , n , n ) / j ;
Distance : 8

193
Tree	int j = j ( n , n , k ) >= NUMBER_CONSTANT ;
Code	int j = j ( n , n , k ) >= NUMBER_CONSTANT ;
Distance : 8

194
Tree	int j = ( int ) n * % ;
Code	int j = ( int ) n * % ;
Distance : 6

195
Tree	int j = k * j - n ;
Code	int j = k * j - n ;
Distance : 5

196
Tree	int j = n < flipIfWarranted - n ;
Code	int j = n < flipIfWarranted - n ;
Distance : 6

197
Tree	int j = ( int ) n * j - n ;
Code	int j = ( int ) n * j - n ;
Distance : 7

198
Tree	int j = ( long ) k * j - n ;
Code	int j = ( long ) k * j - n ;
Distance : 8

199
Tree	int j = k n j - j ;
Code	int j = k n j - j ;
Distance : 6

========================================================================


========================================================================
Example Number: 56
Parent Code is: 
{ return getCumPct ( ( Comparable < > ) v ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return getPct ( ( Comparable < > ) v ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=getCumPct}) (214{val=(}) (11 (214{val=(}) (74 (43 (800{val=Comparable})) (230{val=<}) (76{val=?}) (231{val=>})) (215{val=)}) (800{val=v})) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=getPct}) (214{val=(}) (11 (214{val=(}) (74 (43 (800{val=Comparable})) (230{val=<}) (76{val=?}) (231{val=>})) (215{val=)}) (800{val=v})) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/75/parent/src_main_java_org_apache_commons_math_stat_Frequency.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return getPct ( ( ( Comparable ) v . v ( v ) ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v . v ( v ) ) . v ) ; }
Distance : 9

1
Tree	{ return getCumPct ( ( ( Comparable ) v ) . Deprecated ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v ) . Deprecated ) ; }
Distance : 6

2
Tree	{ return getCumPct ( ( Comparable < Object > ) ^ ) ; }
Code	{ return getCumPct ( ( Comparable < Object > ) ^ ) ; }
Distance : 3

3
Tree	{ return getPct ( ( Object ) v ( ( Object ) v , v ) ) ; }
Code	{ return getPct ( ( Object ) v ( ( Object ) v , v ) ) ; }
Distance : 9

4
Tree	{ return getCumPct ( ( Comparable < Object > ) {} ) ; }
Code	{ return getCumPct ( ( Comparable < Object > ) {} ) ; }
Distance : 3

5
Tree	{ return getCumPct ( ( Comparable < Comparable > ) *= ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) *= ) ; }
Distance : 3

6
Tree	{ return getCumPct ( ( Object ) Comparable ( ( Object ) v , v ) ) ; }
Code	{ return getCumPct ( ( Object ) Comparable ( ( Object ) v , v ) ) ; }
Distance : 9

7
Tree	{ return getCumPct ( ( ( v ) v . v ( v ) ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . v ( v ) ) . v ) ; }
Distance : 11

8
Tree	{ return getPct ( ( Comparable ) v . v ( null ) ) ; }
Code	{ return getPct ( ( Comparable ) v . v ( null ) ) ; }
Distance : 6

9
Tree	{ return getCumPct ( ( Object < ? super v > ) <= ) ; }
Code	{ return getCumPct ( ( Object < ? super v > ) <= ) ; }
Distance : 6

10
Tree	{ return getCumPct ( ( Comparable < Comparable > ) <= ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) <= ) ; }
Distance : 3

11
Tree	{ return getCumPct ( ( Object < Object > ) / ) ; }
Code	{ return getCumPct ( ( Object < Object > ) / ) ; }
Distance : 4

12
Tree	{ return getPct ( ( Object ) v . v ( v , ( Object [] ) null ) ) ; }
Code	{ return getPct ( ( Object ) v . v ( v , ( Object [] ) null ) ) ; }
Distance : 13

13
Tree	{ return getPct ( ( ( Object ) v . v () ) . v ) ; }
Code	{ return getPct ( ( ( Object ) v . v () ) . v ) ; }
Distance : 8

14
Tree	{ return getCumPct ( ( Comparable < ? super v > ) / ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) / ) ; }
Distance : 5

15
Tree	{ return getCumPct ( v ) . < v > Comparable () ; }
Code	{ return getCumPct ( v ) . < v > Comparable () ; }
Distance : 8

16
Tree	{ return getCumPct ( v , v . Comparable () , getCumPct ) ; }
Code	{ return getCumPct ( v , v . Comparable () , getCumPct ) ; }
Distance : 9

17
Tree	{ return getCumPct . getCumPct ( Comparable ) . < extends > getCumPct () ; }
Code	{ return getCumPct . getCumPct ( Comparable ) . < extends > getCumPct () ; }
Distance : 9

18
Tree	{ return getCumPct . getCumPct ( ( ( Object ) v ) . v ) ; }
Code	{ return getCumPct . getCumPct ( ( ( Object ) v ) . v ) ; }
Distance : 8

19
Tree	{ return getCumPct . getCumPct ( Object ) . v ( this ) ; }
Code	{ return getCumPct . getCumPct ( Object ) . v ( this ) ; }
Distance : 9

20
Tree	{ return getCumPct ( ( ( Comparable ) v . Comparable ( v ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . Comparable ( v ) ) . v ) ; }
Distance : 10

21
Tree	{ return getCumPct ( Comparable , v . getPct () , getCumPct ) ; }
Code	{ return getCumPct ( Comparable , v . getPct () , getCumPct ) ; }
Distance : 9

22
Tree	{ return getCumPct . getCumPct ( Comparable ) . < ? > getCumPct () ; }
Code	{ return getCumPct . getCumPct ( Comparable ) . < ? > getCumPct () ; }
Distance : 9

23
Tree	{ return getPct ( ( Comparable ) Comparable ( v ) ) ; }
Code	{ return getPct ( ( Comparable ) Comparable ( v ) ) ; }
Distance : 4

24
Tree	{ return getCumPct . getCumPct ( Comparable ) . < v > getCumPct () ; }
Code	{ return getCumPct . getCumPct ( Comparable ) . < v > getCumPct () ; }
Distance : 9

25
Tree	{ return getCumPct ( ( Comparable ) Comparable . v ( null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) Comparable . v ( null ) ) ; }
Distance : 7

26
Tree	{ return getPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 4

27
Tree	{ return getCumPct . getCumPct ( Comparable ) . < / > getCumPct () ; }
Code	{ return getCumPct . getCumPct ( Comparable ) . < / > getCumPct () ; }
Distance : 9

28
Tree	{ return getCumPct ( ( Comparable < ? super v > ) & ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) & ) ; }
Distance : 5

29
Tree	{ return getCumPct ( ( Comparable ) v . v ( super(); ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . v ( super(); ) ) ; }
Distance : 7

30
Tree	{ return getCumPct . getCumPct ( v ) . < & > getCumPct () ; }
Code	{ return getCumPct . getCumPct ( v ) . < & > getCumPct () ; }
Distance : 10

31
Tree	{ return getCumPct ( ( Object ) v . Comparable ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( Object ) v . Comparable ( NUMBER_CONSTANT ) ) ; }
Distance : 8

32
Tree	{ return getCumPct ( ( Comparable < ? super v > ) ++ ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) ++ ) ; }
Distance : 5

33
Tree	{ return getPct ( ( ( Object ) v . v ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getPct ( ( ( Object ) v . v ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 10

34
Tree	{ return getPct ( ( Comparable < ? super v > ) <= ) ; }
Code	{ return getPct ( ( Comparable < ? super v > ) <= ) ; }
Distance : 4

35
Tree	{ return getCumPct ( v , v . v () , getPct ) ; }
Code	{ return getCumPct ( v , v . v () , getPct ) ; }
Distance : 9

36
Tree	{ return getPct ( ( ( v ) v . v ( v ) ) . v ) ; }
Code	{ return getPct ( ( ( v ) v . v ( v ) ) . v ) ; }
Distance : 10

37
Tree	{ return getCumPct ( ( ( Object ) v . v ( v ) ) . Deprecated ) ; }
Code	{ return getCumPct ( ( ( Object ) v . v ( v ) ) . Deprecated ) ; }
Distance : 12

38
Tree	{ return getCumPct ( ( ( Comparable ) v . v ( v ) ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . v ( v ) ) . Comparable ) ; }
Distance : 11

39
Tree	{ return getCumPct ( ( Object ) v . Comparable ( v ) ) ; }
Code	{ return getCumPct ( ( Object ) v . Comparable ( v ) ) ; }
Distance : 8

40
Tree	{ return getCumPct . getPct ( ( ( Object ) v ) . v ) ; }
Code	{ return getCumPct . getPct ( ( ( Object ) v ) . v ) ; }
Distance : 7

41
Tree	{ return getCumPct ( ( Object ) v . Comparable ( null ) ) ; }
Code	{ return getCumPct ( ( Object ) v . Comparable ( null ) ) ; }
Distance : 8

42
Tree	{ return getPct . getCumPct ( ( ( Object ) v ) . v ) ; }
Code	{ return getPct . getCumPct ( ( ( Object ) v ) . v ) ; }
Distance : 7

43
Tree	{ return getCumPct ( ( ( Comparable ) v . Comparable () ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . Comparable () ) . v ) ; }
Distance : 8

44
Tree	{ return getCumPct ( ( ( Deprecated ) v ) . v ) ; }
Code	{ return getCumPct ( ( ( Deprecated ) v ) . v ) ; }
Distance : 6

45
Tree	{ return getCumPct ( ( Comparable ) v . Comparable ( v , ( Object [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . Comparable ( v , ( Object [] ) null ) ) ; }
Distance : 13

46
Tree	{ return getPct ( ( ( v ) v . v () ) . v ) ; }
Code	{ return getPct ( ( ( v ) v . v () ) . v ) ; }
Distance : 8

47
Tree	{ return getCumPct ( ( ( Comparable ) v . Comparable ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . Comparable ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 10

48
Tree	{ return getCumPct ( ( Comparable ) v . v ( Object ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . v ( Object ) ) ; }
Distance : 7

49
Tree	{ return getPct ( ( Object ) v ( v ) ) ; }
Code	{ return getPct ( ( Object ) v ( v ) ) ; }
Distance : 5

50
Tree	{ return getCumPct ( ( Comparable < Comparable > ) *= ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) *= ) ; }
Distance : 3

51
Tree	{ return getCumPct ( ( ( Comparable ) v . v ( NUMBER_CONSTANT ) ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . v ( NUMBER_CONSTANT ) ) . Comparable ) ; }
Distance : 11

52
Tree	{ return getPct ( ( Comparable ) v ( ( Object ) v , v ) ) ; }
Code	{ return getPct ( ( Comparable ) v ( ( Object ) v , v ) ) ; }
Distance : 8

53
Tree	{ return getCumPct ( ( v ) v . v ( v , ( Object [] ) null ) ) ; }
Code	{ return getCumPct ( ( v ) v . v ( v , ( Object [] ) null ) ) ; }
Distance : 14

54
Tree	{ return getCumPct . getCumPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return getCumPct . getCumPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 7

55
Tree	{ return getCumPct ( ( Comparable ) v ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v ( v ) ) ; }
Distance : 5

56
Tree	{ return getCumPct ( ( ( Object ) v . v ( v ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Object ) v . v ( v ) ) . v ) ; }
Distance : 11

57
Tree	{ return getCumPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 5

58
Tree	{ return getCumPct ( super , false ) ; }
Code	{ return getCumPct ( super , false ) ; }
Distance : 7

59
Tree	{ return getCumPct ( ( Comparable ) v . v ( Comparable ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . v ( Comparable ) ) ; }
Distance : 7

60
Tree	{ return getCumPct ( false , super ) ; }
Code	{ return getCumPct ( false , super ) ; }
Distance : 7

61
Tree	{ return getCumPct ( ( ( Comparable ) v . v ( v ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . v ( v ) ) . v ) ; }
Distance : 10

62
Tree	{ return getCumPct ( ( ( v ) v . v () ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . v () ) . v ) ; }
Distance : 9

63
Tree	{ return getCumPct ( ( Object < Object > ) / ) ; }
Code	{ return getCumPct ( ( Object < Object > ) / ) ; }
Distance : 4

64
Tree	{ return getCumPct ( ( Object ) v ( ( Comparable ) v , v ) ) ; }
Code	{ return getCumPct ( ( Object ) v ( ( Comparable ) v , v ) ) ; }
Distance : 10

65
Tree	{ return getCumPct ( Comparable , v . v () , getCumPct ) ; }
Code	{ return getCumPct ( Comparable , v . v () , getCumPct ) ; }
Distance : 8

66
Tree	{ return getPct ( ( ( v ) v . v ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getPct ( ( ( v ) v . v ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 10

67
Tree	{ return getCumPct ( ( ( Object ) v . v ( NUMBER_CONSTANT ) ) . Deprecated ) ; }
Code	{ return getCumPct ( ( ( Object ) v . v ( NUMBER_CONSTANT ) ) . Deprecated ) ; }
Distance : 12

68
Tree	{ return getCumPct ( ( Object ) v ( v ) ) ; }
Code	{ return getCumPct ( ( Object ) v ( v ) ) ; }
Distance : 6

69
Tree	{ return getCumPct ( ( ( Comparable ) v . v () ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . v () ) . v ) ; }
Distance : 8

70
Tree	{ return getCumPct ( ( Object ) v ( ( Object ) v , v ) ) ; }
Code	{ return getCumPct ( ( Object ) v ( ( Object ) v , v ) ) ; }
Distance : 10

71
Tree	{ return getCumPct ( Comparable , v . v () , getPct ) ; }
Code	{ return getCumPct ( Comparable , v . v () , getPct ) ; }
Distance : 8

72
Tree	{ return getCumPct ( ( Comparable ) v ( ( Object ) v , v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v ( ( Object ) v , v ) ) ; }
Distance : 9

73
Tree	{ return getPct ( ( Comparable ) v ( v ) ) ; }
Code	{ return getPct ( ( Comparable ) v ( v ) ) ; }
Distance : 4

74
Tree	{ return getCumPct ( false , class ) ; }
Code	{ return getCumPct ( false , class ) ; }
Distance : 7

75
Tree	{ return getCumPct ( ( ( Comparable ) v . v ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . v ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 10

76
Tree	{ return getCumPct ( ( Comparable ) Comparable ( ( Object ) v , v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) Comparable ( ( Object ) v , v ) ) ; }
Distance : 9

77
Tree	{ return getCumPct ( ( Comparable < Object > ) <= ) ; }
Code	{ return getCumPct ( ( Comparable < Object > ) <= ) ; }
Distance : 3

78
Tree	{ return getCumPct ( false , false ) ; }
Code	{ return getCumPct ( false , false ) ; }
Distance : 7

79
Tree	{ return getPct ( ( Comparable ) v . Comparable ( NUMBER_CONSTANT ) ) ; }
Code	{ return getPct ( ( Comparable ) v . Comparable ( NUMBER_CONSTANT ) ) ; }
Distance : 7

80
Tree	{ return getCumPct ( CHAR_CONS , false ) ; }
Code	{ return getCumPct ( CHAR_CONS , false ) ; }
Distance : 7

81
Tree	{ return getCumPct ( ( Comparable < ? super v > ) <= ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) <= ) ; }
Distance : 5

82
Tree	{ return getCumPct ( ( Comparable < Object > ) / ) ; }
Code	{ return getCumPct ( ( Comparable < Object > ) / ) ; }
Distance : 3

83
Tree	{ return getPct . getCumPct ( ( ( v ) v ) . v ) ; }
Code	{ return getPct . getCumPct ( ( ( v ) v ) . v ) ; }
Distance : 7

84
Tree	{ return getCumPct ( Comparable ) . < Object > v () ; }
Code	{ return getCumPct ( Comparable ) . < Object > v () ; }
Distance : 7

85
Tree	{ return getPct ( ( Comparable ) v . Comparable ( null ) ) ; }
Code	{ return getPct ( ( Comparable ) v . Comparable ( null ) ) ; }
Distance : 7

86
Tree	{ return getCumPct ( ( Object < Comparable > ) / ) ; }
Code	{ return getCumPct ( ( Object < Comparable > ) / ) ; }
Distance : 4

87
Tree	{ return getCumPct ( ( Object ) v . v ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( Object ) v . v ( NUMBER_CONSTANT ) ) ; }
Distance : 8

88
Tree	{ return getCumPct ( ( Comparable < Comparable > ) / ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) / ) ; }
Distance : 3

89
Tree	{ return getCumPct ( ( Object ) v . v ( v ) ) ; }
Code	{ return getCumPct ( ( Object ) v . v ( v ) ) ; }
Distance : 8

90
Tree	{ return getCumPct ( ( Object ) v . v ( null ) ) ; }
Code	{ return getCumPct ( ( Object ) v . v ( null ) ) ; }
Distance : 8

91
Tree	{ return getCumPct ( ( Comparable ) v . v ( v , ( Object [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . v ( v , ( Object [] ) null ) ) ; }
Distance : 13

92
Tree	{ return getCumPct ( super , super ) ; }
Code	{ return getCumPct ( super , super ) ; }
Distance : 7

93
Tree	{ return getCumPct ( v ) . < v > v () ; }
Code	{ return getCumPct ( v ) . < v > v () ; }
Distance : 7

94
Tree	{ return getCumPct ( ( Comparable < Object > ) <= ) ; }
Code	{ return getCumPct ( ( Comparable < Object > ) <= ) ; }
Distance : 3

95
Tree	{ return getCumPct ( Comparable ) . < v > v () ; }
Code	{ return getCumPct ( Comparable ) . < v > v () ; }
Distance : 7

96
Tree	{ return getCumPct ( ( v ) v ( ( Object ) v , v ) ) ; }
Code	{ return getCumPct ( ( v ) v ( ( Object ) v , v ) ) ; }
Distance : 10

97
Tree	{ return getCumPct . getPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return getCumPct . getPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 6

98
Tree	{ return getCumPct ( ! , super ) ; }
Code	{ return getCumPct ( ! , super ) ; }
Distance : 7

99
Tree	{ return getCumPct ( v ) . < v > getPct () ; }
Code	{ return getCumPct ( v ) . < v > getPct () ; }
Distance : 8

100
Tree	{ return getCumPct ( Comparable ) . < v > getPct () ; }
Code	{ return getCumPct ( Comparable ) . < v > getPct () ; }
Distance : 8

101
Tree	{ return getCumPct ( ( ( v ) v . v ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . v ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 11

102
Tree	{ return getPct ( ( ( Comparable ) v . v () ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v . v () ) . v ) ; }
Distance : 7

103
Tree	{ return getCumPct ( ( v ) v . v ( v ) ) ; }
Code	{ return getCumPct ( ( v ) v . v ( v ) ) ; }
Distance : 8

104
Tree	{ return getPct ( ( ( v ) v ) . v ) ; }
Code	{ return getPct ( ( ( v ) v ) . v ) ; }
Distance : 5

105
Tree	{ return getPct ( ( ( Comparable ) v . v ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v . v ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 9

106
Tree	{ return getCumPct ( ( v ) v . v ( null ) ) ; }
Code	{ return getCumPct ( ( v ) v . v ( null ) ) ; }
Distance : 8

107
Tree	{ return getCumPct ( ( ( Comparable ) v . v ( v ) ) . Deprecated ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . v ( v ) ) . Deprecated ) ; }
Distance : 11

108
Tree	{ return getCumPct . getCumPct ( Comparable ) . < final > getCumPct () ; }
Code	{ return getCumPct . getCumPct ( Comparable ) . < final > getCumPct () ; }
Distance : 9

109
Tree	{ return getPct . getCumPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return getPct . getCumPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 6

110
Tree	{ return getCumPct . getCumPct ( Comparable ) . < v > getPct () ; }
Code	{ return getCumPct . getCumPct ( Comparable ) . < v > getPct () ; }
Distance : 9

111
Tree	{ return getPct ( Comparable , v . v () , getCumPct ) ; }
Code	{ return getPct ( Comparable , v . v () , getCumPct ) ; }
Distance : 7

112
Tree	{ return getCumPct ( ( Comparable ) v . v ( v , ( Object [] ) return; ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . v ( v , ( Object [] ) return; ) ) ; }
Distance : 13

113
Tree	{ return getCumPct ( ( Object ) Comparable ( v ) ) ; }
Code	{ return getCumPct ( ( Object ) Comparable ( v ) ) ; }
Distance : 6

114
Tree	{ return getCumPct ( ( Comparable ) v . v ( v , ( Object [] ) super(); ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . v ( v , ( Object [] ) super(); ) ) ; }
Distance : 13

115
Tree	{ return getPct . getCumPct ( v ) . v ( this ) ; }
Code	{ return getPct . getCumPct ( v ) . v ( this ) ; }
Distance : 8

116
Tree	{ return getCumPct ( ( Comparable ) v ( Comparable ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v ( Comparable ) ) ; }
Distance : 6

117
Tree	{ return getCumPct ( ( Comparable < Object > ) *= ) ; }
Code	{ return getCumPct ( ( Comparable < Object > ) *= ) ; }
Distance : 3

118
Tree	{ return getCumPct ( ! , false ) ; }
Code	{ return getCumPct ( ! , false ) ; }
Distance : 7

119
Tree	{ return getCumPct ( ( Comparable < Object > ) / ) ; }
Code	{ return getCumPct ( ( Comparable < Object > ) / ) ; }
Distance : 3

120
Tree	{ return getPct ( ( Comparable ) v . v ( v , ( Object [] ) null ) ) ; }
Code	{ return getPct ( ( Comparable ) v . v ( v , ( Object [] ) null ) ) ; }
Distance : 12

121
Tree	{ return getCumPct . getCumPct ( getCumPct ) . v ( this ) ; }
Code	{ return getCumPct . getCumPct ( getCumPct ) . v ( this ) ; }
Distance : 9

122
Tree	{ return getCumPct . getCumPct ( ( ( Object ) v ) . Deprecated ) ; }
Code	{ return getCumPct . getCumPct ( ( ( Object ) v ) . Deprecated ) ; }
Distance : 9

123
Tree	{ return getCumPct ( ( Object < Comparable > ) / ) ; }
Code	{ return getCumPct ( ( Object < Comparable > ) / ) ; }
Distance : 4

124
Tree	{ return getPct ( ( Object ) v . v ( NUMBER_CONSTANT ) ) ; }
Code	{ return getPct ( ( Object ) v . v ( NUMBER_CONSTANT ) ) ; }
Distance : 7

125
Tree	{ return getCumPct ( ( ( Comparable ) v . v () ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . v () ) . Comparable ) ; }
Distance : 9

126
Tree	{ return getCumPct ( ( Comparable ) v . Comparable ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . Comparable ( NUMBER_CONSTANT ) ) ; }
Distance : 8

127
Tree	{ return getCumPct . getCumPct ( Comparable ) . < <= > getCumPct () ; }
Code	{ return getCumPct . getCumPct ( Comparable ) . < <= > getCumPct () ; }
Distance : 9

128
Tree	{ return getCumPct . getCumPct ( Comparable ) . v ( this ) ; }
Code	{ return getCumPct . getCumPct ( Comparable ) . v ( this ) ; }
Distance : 8

129
Tree	{ return getCumPct . getCumPct ( v ) . < v > getPct () ; }
Code	{ return getCumPct . getCumPct ( v ) . < v > getPct () ; }
Distance : 10

130
Tree	{ return getCumPct . getCumPct ( Comparable ) . Comparable ( this ) ; }
Code	{ return getCumPct . getCumPct ( Comparable ) . Comparable ( this ) ; }
Distance : 8

131
Tree	{ return getCumPct . getCumPct ( v ) . < extends > getCumPct () ; }
Code	{ return getCumPct . getCumPct ( v ) . < extends > getCumPct () ; }
Distance : 10

132
Tree	{ return getCumPct ( ( Comparable ) v . v ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . v ( NUMBER_CONSTANT ) ) ; }
Distance : 7

133
Tree	{ return getCumPct ( ( Comparable ) v ( ( Comparable ) v , v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v ( ( Comparable ) v , v ) ) ; }
Distance : 9

134
Tree	{ return getCumPct ( ( Comparable ) v . v ( v , ( Comparable [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . v ( v , ( Comparable [] ) null ) ) ; }
Distance : 13

135
Tree	{ return getCumPct ( ( v ) v ( v ) ) ; }
Code	{ return getCumPct ( ( v ) v ( v ) ) ; }
Distance : 6

136
Tree	{ return getCumPct . getCumPct ( Comparable ) . < /= > getCumPct () ; }
Code	{ return getCumPct . getCumPct ( Comparable ) . < /= > getCumPct () ; }
Distance : 9

137
Tree	{ return getCumPct ( T , false ) ; }
Code	{ return getCumPct ( T , false ) ; }
Distance : 7

138
Tree	{ return getCumPct ( ( ( Comparable ) v . v () ) . Deprecated ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . v () ) . Deprecated ) ; }
Distance : 9

139
Tree	{ return getCumPct . getCumPct ( Comparable ) . < -- > getCumPct () ; }
Code	{ return getCumPct . getCumPct ( Comparable ) . < -- > getCumPct () ; }
Distance : 9

140
Tree	{ return getCumPct ( ( Comparable ) v . Comparable ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . Comparable ( v ) ) ; }
Distance : 7

141
Tree	{ return getCumPct . getCumPct ( Comparable ) . < v > v () ; }
Code	{ return getCumPct . getCumPct ( Comparable ) . < v > v () ; }
Distance : 8

142
Tree	{ return getCumPct ( Comparable ) . < Comparable > getCumPct () ; }
Code	{ return getCumPct ( Comparable ) . < Comparable > getCumPct () ; }
Distance : 8

143
Tree	{ return getCumPct ( ( v ) v . v ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( v ) v . v ( NUMBER_CONSTANT ) ) ; }
Distance : 8

144
Tree	{ return getPct ( false , false ) ; }
Code	{ return getPct ( false , false ) ; }
Distance : 6

145
Tree	{ return getCumPct . getCumPct ( Comparable ) . < Object > getCumPct () ; }
Code	{ return getCumPct . getCumPct ( Comparable ) . < Object > getCumPct () ; }
Distance : 9

146
Tree	{ return getCumPct . getPct ( Comparable ) . v ( this ) ; }
Code	{ return getCumPct . getPct ( Comparable ) . v ( this ) ; }
Distance : 8

147
Tree	{ return getCumPct ( ( ( Comparable ) v ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v ) . Comparable ) ; }
Distance : 6

148
Tree	{ return getCumPct ( ( Comparable ) v . v ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . v ( v ) ) ; }
Distance : 7

149
Tree	{ return getCumPct ( ( Comparable ) v . Object ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . Object ( NUMBER_CONSTANT ) ) ; }
Distance : 8

150
Tree	{ return getCumPct ( ( Object ) v . v ( v , ( Object [] ) null ) ) ; }
Code	{ return getCumPct ( ( Object ) v . v ( v , ( Object [] ) null ) ) ; }
Distance : 14

151
Tree	{ return getCumPct ( ( Comparable < Comparable > ) / ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) / ) ; }
Distance : 3

152
Tree	{ return getPct ( ( Comparable ) v . v ( NUMBER_CONSTANT ) ) ; }
Code	{ return getPct ( ( Comparable ) v . v ( NUMBER_CONSTANT ) ) ; }
Distance : 6

153
Tree	{ return getCumPct ( v , v . v () , getCumPct ) ; }
Code	{ return getCumPct ( v , v . v () , getCumPct ) ; }
Distance : 9

154
Tree	{ return getCumPct ( ( Comparable ) v . Comparable ( null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . Comparable ( null ) ) ; }
Distance : 8

155
Tree	{ return getPct ( ( Object ) v . v ( v ) ) ; }
Code	{ return getPct ( ( Object ) v . v ( v ) ) ; }
Distance : 7

156
Tree	{ return getCumPct ( ( Comparable < Comparable > ) <= ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) <= ) ; }
Distance : 3

157
Tree	{ return getCumPct ( ( Comparable < Object > ) *= ) ; }
Code	{ return getCumPct ( ( Comparable < Object > ) *= ) ; }
Distance : 3

158
Tree	{ return getCumPct ( Comparable ) . < v > getCumPct () ; }
Code	{ return getCumPct ( Comparable ) . < v > getCumPct () ; }
Distance : 8

159
Tree	{ return getCumPct . getCumPct ( ( ( v ) v ) . v ) ; }
Code	{ return getCumPct . getCumPct ( ( ( v ) v ) . v ) ; }
Distance : 8

160
Tree	{ return getPct . getCumPct ( Comparable ) . v ( this ) ; }
Code	{ return getPct . getCumPct ( Comparable ) . v ( this ) ; }
Distance : 7

161
Tree	{ return getCumPct ( ( Object < ? super v > ) / ) ; }
Code	{ return getCumPct ( ( Object < ? super v > ) / ) ; }
Distance : 6

162
Tree	{ return getCumPct . getCumPct ( v ) . < v > v () ; }
Code	{ return getCumPct . getCumPct ( v ) . < v > v () ; }
Distance : 9

163
Tree	{ return getCumPct ( ( Comparable ) v . v ( null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . v ( null ) ) ; }
Distance : 7

164
Tree	{ return getCumPct ( ( Comparable ) Comparable ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) Comparable ( v ) ) ; }
Distance : 5

165
Tree	{ return getPct ( ( Object ) v . v ( null ) ) ; }
Code	{ return getPct ( ( Object ) v . v ( null ) ) ; }
Distance : 7

166
Tree	{ return getCumPct ( ( ( Object ) v . v ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Object ) v . v ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 11

167
Tree	{ return getCumPct . getCumPct ( v ) . < v > getCumPct () ; }
Code	{ return getCumPct . getCumPct ( v ) . < v > getCumPct () ; }
Distance : 10

168
Tree	{ return getCumPct ( ( ( Object ) v ) . v ) ; }
Code	{ return getCumPct ( ( ( Object ) v ) . v ) ; }
Distance : 6

169
Tree	{ return getCumPct ( ( Comparable < ? super v > ) *= ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) *= ) ; }
Distance : 5

170
Tree	{ return getCumPct ( Comparable , v . Object () , getCumPct ) ; }
Code	{ return getCumPct ( Comparable , v . Object () , getCumPct ) ; }
Distance : 9

171
Tree	{ return getCumPct . getCumPct ( v ) . v ( this ) ; }
Code	{ return getCumPct . getCumPct ( v ) . v ( this ) ; }
Distance : 9

172
Tree	{ return getCumPct ( ( Comparable < Object > ) ^ ) ; }
Code	{ return getCumPct ( ( Comparable < Object > ) ^ ) ; }
Distance : 3

173
Tree	{ return getCumPct ( ( Comparable ) v ( ( v ) v , v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v ( ( v ) v , v ) ) ; }
Distance : 9

174
Tree	{ return getCumPct ( ( Comparable < ? super v > ) private ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) private ) ; }
Distance : 5

175
Tree	{ return getCumPct ( ( Comparable < ? super v > ) ^ ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) ^ ) ; }
Distance : 5

176
Tree	{ return getCumPct ( ( Comparable ) Comparable . v ( v , ( Object [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) Comparable . v ( v , ( Object [] ) null ) ) ; }
Distance : 13

177
Tree	{ return getCumPct ( Comparable ) . < v > Comparable () ; }
Code	{ return getCumPct ( Comparable ) . < v > Comparable () ; }
Distance : 8

178
Tree	{ return getPct ( ( ( Object ) v ) . v ) ; }
Code	{ return getPct ( ( ( Object ) v ) . v ) ; }
Distance : 5

179
Tree	{ return getCumPct . getPct ( ( ( v ) v ) . v ) ; }
Code	{ return getCumPct . getPct ( ( ( v ) v ) . v ) ; }
Distance : 7

180
Tree	{ return getCumPct ( Comparable , v . getCumPct () , getCumPct ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , getCumPct ) ; }
Distance : 9

181
Tree	{ return getCumPct . getCumPct ( v ) . Comparable ( this ) ; }
Code	{ return getCumPct . getCumPct ( v ) . Comparable ( this ) ; }
Distance : 9

182
Tree	{ return getPct ( ( ( Object ) v . v ( v ) ) . v ) ; }
Code	{ return getPct ( ( ( Object ) v . v ( v ) ) . v ) ; }
Distance : 10

183
Tree	{ return getCumPct ( ( ( Object ) v ) . Deprecated ) ; }
Code	{ return getCumPct ( ( ( Object ) v ) . Deprecated ) ; }
Distance : 7

184
Tree	{ return getCumPct . getPct ( v ) . v ( this ) ; }
Code	{ return getCumPct . getPct ( v ) . v ( this ) ; }
Distance : 8

185
Tree	{ return getCumPct ( Comparable , v . Comparable () , getCumPct ) ; }
Code	{ return getCumPct ( Comparable , v . Comparable () , getCumPct ) ; }
Distance : 9

186
Tree	{ return getCumPct . getCumPct ( Object ) . < v > getCumPct () ; }
Code	{ return getCumPct . getCumPct ( Object ) . < v > getCumPct () ; }
Distance : 10

187
Tree	{ return getCumPct ( ( Comparable ) Object ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) Object ( v ) ) ; }
Distance : 5

188
Tree	{ return getCumPct ( ( ( Comparable ) v . v ( NUMBER_CONSTANT ) ) . Deprecated ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . v ( NUMBER_CONSTANT ) ) . Deprecated ) ; }
Distance : 11

189
Tree	{ return getCumPct . getCumPct ( Comparable ) . < & > getCumPct () ; }
Code	{ return getCumPct . getCumPct ( Comparable ) . < & > getCumPct () ; }
Distance : 9

190
Tree	{ return getCumPct . getCumPct ( Comparable ) . < v > Comparable () ; }
Code	{ return getCumPct . getCumPct ( Comparable ) . < v > Comparable () ; }
Distance : 9

191
Tree	{ return getCumPct ( ( ( Object ) v . v () ) . v ) ; }
Code	{ return getCumPct ( ( ( Object ) v . v () ) . v ) ; }
Distance : 9

192
Tree	{ return getCumPct ( ( ( v ) v ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v ) . v ) ; }
Distance : 6

193
Tree	{ return getPct ( ( Comparable ) v . v ( v ) ) ; }
Code	{ return getPct ( ( Comparable ) v . v ( v ) ) ; }
Distance : 6

194
Tree	{ return getCumPct ( ( Comparable ) Comparable . v ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( Comparable ) Comparable . v ( NUMBER_CONSTANT ) ) ; }
Distance : 7

195
Tree	{ return getCumPct ( ( Comparable < Object > ) {} ) ; }
Code	{ return getCumPct ( ( Comparable < Object > ) {} ) ; }
Distance : 3

196
Tree	{ return getCumPct ( ( Comparable ) Comparable . v ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) Comparable . v ( v ) ) ; }
Distance : 7

197
Tree	{ return getCumPct ( ( ( Object ) v . Comparable () ) . v ) ; }
Code	{ return getCumPct ( ( ( Object ) v . Comparable () ) . v ) ; }
Distance : 9

198
Tree	{ return getCumPct . getCumPct ( v ) . < Object > getCumPct () ; }
Code	{ return getCumPct . getCumPct ( v ) . < Object > getCumPct () ; }
Distance : 10

199
Tree	{ return getCumPct ( v ) . < v > getCumPct () ; }
Code	{ return getCumPct ( v ) . < v > getCumPct () ; }
Distance : 8

========================================================================


========================================================================
Example Number: 57
Parent Code is: 
{ return solve ( min , max ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return solve ( f , min , max ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=solve}) (214{val=(}) (800{val=min}) (234{val=,}) (800{val=max}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=solve}) (214{val=(}) (800{val=f}) (234{val=,}) (800{val=min}) (234{val=,}) (800{val=max}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/70/parent/src_main_java_org_apache_commons_math_analysis_solvers_BisectionSolver.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return solve ( min , max ) ; }
Code	{ return solve ( min , max ) ; }
Distance : 2

1
Tree	{ return solve ( min , null ) ; }
Code	{ return solve ( min , null ) ; }
Distance : 3

2
Tree	{ return solve ( min . max () , max ) ; }
Code	{ return solve ( min . max () , max ) ; }
Distance : 4

3
Tree	{ return solve ( min , min ) ; }
Code	{ return solve ( min , min ) ; }
Distance : 3

4
Tree	{ return solve ( min . min ( min ) ) ; }
Code	{ return solve ( min . min ( min ) ) ; }
Distance : 5

5
Tree	{ return f . solve ( min , null , max ) ; }
Code	{ return f . solve ( min , null , max ) ; }
Distance : 4

6
Tree	{ return solve . solve () . solve ( min , max ) ; }
Code	{ return solve . solve () . solve ( min , max ) ; }
Distance : 6

7
Tree	{ return solve . solve ( this , f ) ; }
Code	{ return solve . solve ( this , f ) ; }
Distance : 5

8
Tree	{ return solve ( solve , max ) ; }
Code	{ return solve ( solve , max ) ; }
Distance : 3

9
Tree	{ return solve ( min , max , min , false ) ; }
Code	{ return solve ( min , max , min , false ) ; }
Distance : 4

10
Tree	{ return solve ( min . max ( max ) , max ) ; }
Code	{ return solve ( min . max ( max ) , max ) ; }
Distance : 6

11
Tree	{ return solve ( max () , max ( min ) ) ; }
Code	{ return solve ( max () , max ( min ) ) ; }
Distance : 6

12
Tree	{ return solve ( min () , max ( max ) ) ; }
Code	{ return solve ( min () , max ( max ) ) ; }
Distance : 5

13
Tree	{ return solve ( min . max ( min ) , max ) ; }
Code	{ return solve ( min . max ( min ) , max ) ; }
Distance : 5

14
Tree	{ return solve ( min . min ( max ) ) ; }
Code	{ return solve ( min . min ( max ) ) ; }
Distance : 4

15
Tree	{ return solve . solve ( max , max , max ) ; }
Code	{ return solve . solve ( max , max , max ) ; }
Distance : 4

16
Tree	{ return solve ( min , max - NUMBER_CONSTANT ) ; }
Code	{ return solve ( min , max - NUMBER_CONSTANT ) ; }
Distance : 4

17
Tree	{ return solve ( min . min ( f ) ) ; }
Code	{ return solve ( min . min ( f ) ) ; }
Distance : 5

18
Tree	{ return max ( min , null ) ; }
Code	{ return max ( min , null ) ; }
Distance : 4

19
Tree	{ return solve . solve ( min , max , max ) ; }
Code	{ return solve . solve ( min , max , max ) ; }
Distance : 4

20
Tree	{ return solve ( f , max , max , false ) ; }
Code	{ return solve ( f , max , max , false ) ; }
Distance : 3

21
Tree	{ return f . solve ( this , min ) ; }
Code	{ return f . solve ( this , min ) ; }
Distance : 5

22
Tree	{ return ( ( min ) this ) . solve ( min , max ) ; }
Code	{ return ( ( min ) this ) . solve ( min , max ) ; }
Distance : 8

23
Tree	{ return solve . solve ( f , max , max ) ; }
Code	{ return solve . solve ( f , max , max ) ; }
Distance : 3

24
Tree	{ return solve . solve ( this , solve ) ; }
Code	{ return solve . solve ( this , solve ) ; }
Distance : 5

25
Tree	{ return f . solve ( min , null , min ) ; }
Code	{ return f . solve ( min , null , min ) ; }
Distance : 5

26
Tree	{ return f . solve ( this , max ) ; }
Code	{ return f . solve ( this , max ) ; }
Distance : 5

27
Tree	{ return solve . solve ( f ) ; }
Code	{ return solve . solve ( f ) ; }
Distance : 6

28
Tree	{ return solve ( solve , max , max , false ) ; }
Code	{ return solve ( solve , max , max , false ) ; }
Distance : 4

29
Tree	{ return f ( min . max () , max ) ; }
Code	{ return f ( min . max () , max ) ; }
Distance : 5

30
Tree	{ return solve . solve () . solve ( max , max ) ; }
Code	{ return solve . solve () . solve ( max , max ) ; }
Distance : 7

31
Tree	{ return min . solve ( min ) ; }
Code	{ return min . solve ( min ) ; }
Distance : 6

32
Tree	{ return solve ( f , max , min , false ) ; }
Code	{ return solve ( f , max , min , false ) ; }
Distance : 3

33
Tree	{ return solve . min ( min ) ; }
Code	{ return solve . min ( min ) ; }
Distance : 5

34
Tree	{ return solve ( min , null , max ) ; }
Code	{ return solve ( min , null , max ) ; }
Distance : 2

35
Tree	{ return solve ( max , min - NUMBER_CONSTANT ) ; }
Code	{ return solve ( max , min - NUMBER_CONSTANT ) ; }
Distance : 3

36
Tree	{ return solve ( f . min () , max ) ; }
Code	{ return solve ( f . min () , max ) ; }
Distance : 2

37
Tree	{ return solve . min ( this , min ) ; }
Code	{ return solve . min ( this , min ) ; }
Distance : 5

38
Tree	{ return solve ( min , min , min ) ; }
Code	{ return solve ( min , min , min ) ; }
Distance : 2

39
Tree	{ return solve ( max , max , max , null ) ; }
Code	{ return solve ( max , max , max , null ) ; }
Distance : 4

40
Tree	{ return solve . solve ( min , min ) ; }
Code	{ return solve . solve ( min , min ) ; }
Distance : 4

41
Tree	{ return solve . solve ( min , max ) ; }
Code	{ return solve . solve ( min , max ) ; }
Distance : 3

42
Tree	{ return solve ( f - NUMBER_CONSTANT , max ) ; }
Code	{ return solve ( f - NUMBER_CONSTANT , max ) ; }
Distance : 2

43
Tree	{ return solve ( min () , solve ( max ) ) ; }
Code	{ return solve ( min () , solve ( max ) ) ; }
Distance : 5

44
Tree	{ return solve ( solve , null ) ; }
Code	{ return solve ( solve , null ) ; }
Distance : 4

45
Tree	{ return f ( min , max ) ; }
Code	{ return f ( min , max ) ; }
Distance : 3

46
Tree	{ return solve ( f , null , max ) ; }
Code	{ return solve ( f , null , max ) ; }
Distance : 1

47
Tree	{ return solve ( min , max , min , null ) ; }
Code	{ return solve ( min , max , min , null ) ; }
Distance : 4

48
Tree	{ return solve ( max . max ( min ) , max ) ; }
Code	{ return solve ( max . max ( min ) , max ) ; }
Distance : 5

49
Tree	{ return solve . solve ( this , min ) ; }
Code	{ return solve . solve ( this , min ) ; }
Distance : 5

50
Tree	{ return solve . f () . solve ( min , max ) ; }
Code	{ return solve . f () . solve ( min , max ) ; }
Distance : 5

51
Tree	{ return solve ( f , max , max ) ; }
Code	{ return solve ( f , max , max ) ; }
Distance : 1

52
Tree	{ return solve . solve () . solve ( min , min ) ; }
Code	{ return solve . solve () . solve ( min , min ) ; }
Distance : 7

53
Tree	{ return solve . solve ( max ) ; }
Code	{ return solve . solve ( max ) ; }
Distance : 5

54
Tree	{ return ( ( f ) this ) . solve ( min , max ) ; }
Code	{ return ( ( f ) this ) . solve ( min , max ) ; }
Distance : 7

55
Tree	{ return f ( min - NUMBER_CONSTANT , max ) ; }
Code	{ return f ( min - NUMBER_CONSTANT , max ) ; }
Distance : 4

56
Tree	{ return solve ( min . max ( max ) ) ; }
Code	{ return solve ( min . max ( max ) ) ; }
Distance : 5

57
Tree	{ return f . solve ( min , max , max ) ; }
Code	{ return f . solve ( min , max , max ) ; }
Distance : 4

58
Tree	{ return f ( min , max - NUMBER_CONSTANT ) ; }
Code	{ return f ( min , max - NUMBER_CONSTANT ) ; }
Distance : 5

59
Tree	{ return ( ( min ) this ) . solve ( f , max ) ; }
Code	{ return ( ( min ) this ) . solve ( f , max ) ; }
Distance : 9

60
Tree	{ return solve ( min . max ( min ) ) ; }
Code	{ return solve ( min . max ( min ) ) ; }
Distance : 6

61
Tree	{ return f . solve ( min ) ; }
Code	{ return f . solve ( min ) ; }
Distance : 6

62
Tree	{ return solve . solve ( solve ) ; }
Code	{ return solve . solve ( solve ) ; }
Distance : 6

63
Tree	{ return ( ( min ) this ) . solve ( min , min ) ; }
Code	{ return ( ( min ) this ) . solve ( min , min ) ; }
Distance : 9

64
Tree	{ return solve ( min , min , min , false ) ; }
Code	{ return solve ( min , min , min , false ) ; }
Distance : 4

65
Tree	{ return solve ( max , max ) ; }
Code	{ return solve ( max , max ) ; }
Distance : 3

66
Tree	{ return solve . solve ( min ) ; }
Code	{ return solve . solve ( min ) ; }
Distance : 5

67
Tree	{ return solve ( min , null , f ) ; }
Code	{ return solve ( min , null , f ) ; }
Distance : 3

68
Tree	{ return solve ( max , null ) ; }
Code	{ return solve ( max , null ) ; }
Distance : 4

69
Tree	{ return solve . solve ( f , null , max ) ; }
Code	{ return solve . solve ( f , null , max ) ; }
Distance : 3

70
Tree	{ return solve . f ( min , max , max ) ; }
Code	{ return solve . f ( min , max , max ) ; }
Distance : 4

71
Tree	{ return solve ( min , max , max , null ) ; }
Code	{ return solve ( min , max , max , null ) ; }
Distance : 4

72
Tree	{ return solve ( max . max () , max ) ; }
Code	{ return solve ( max . max () , max ) ; }
Distance : 4

73
Tree	{ return solve ( min . min () , max ) ; }
Code	{ return solve ( min . min () , max ) ; }
Distance : 3

74
Tree	{ return solve ( min , null , min ) ; }
Code	{ return solve ( min , null , min ) ; }
Distance : 3

75
Tree	{ return solve . min ( min ) ; }
Code	{ return solve . min ( min ) ; }
Distance : 5

76
Tree	{ return solve ( max , null , min ) ; }
Code	{ return solve ( max , null , min ) ; }
Distance : 3

77
Tree	{ return solve ( min . max ( f ) , max ) ; }
Code	{ return solve ( min . max ( f ) , max ) ; }
Distance : 6

78
Tree	{ return solve . solve ( solve , max ) ; }
Code	{ return solve . solve ( solve , max ) ; }
Distance : 4

79
Tree	{ return solve ( min . min ( f ) , max ) ; }
Code	{ return solve ( min . min ( f ) , max ) ; }
Distance : 5

80
Tree	{ return solve . min ( min , null , max ) ; }
Code	{ return solve . min ( min , null , max ) ; }
Distance : 4

81
Tree	{ return solve ( min , f ) ; }
Code	{ return solve ( min , f ) ; }
Distance : 3

82
Tree	{ return solve . solve ( max ) ; }
Code	{ return solve . solve ( max ) ; }
Distance : 5

83
Tree	{ return solve ( max , max - NUMBER_CONSTANT ) ; }
Code	{ return solve ( max , max - NUMBER_CONSTANT ) ; }
Distance : 4

84
Tree	{ return min ( min , null , max ) ; }
Code	{ return min ( min , null , max ) ; }
Distance : 3

85
Tree	{ return solve ( solve , max , max ) ; }
Code	{ return solve ( solve , max , max ) ; }
Distance : 2

86
Tree	{ return solve ( max - NUMBER_CONSTANT , min ) ; }
Code	{ return solve ( max - NUMBER_CONSTANT , min ) ; }
Distance : 4

87
Tree	{ return solve ( min . max ( solve ) , max ) ; }
Code	{ return solve ( min . max ( solve ) , max ) ; }
Distance : 6

88
Tree	{ return solve . solve ( f , max ) ; }
Code	{ return solve . solve ( f , max ) ; }
Distance : 4

89
Tree	{ return solve . f ( min ) ; }
Code	{ return solve . f ( min ) ; }
Distance : 4

90
Tree	{ return ( ( min ) this ) . f ( min , max ) ; }
Code	{ return ( ( min ) this ) . f ( min , max ) ; }
Distance : 7

91
Tree	{ return solve ( f . max ( min ) ) ; }
Code	{ return solve ( f . max ( min ) ) ; }
Distance : 5

92
Tree	{ return solve ( min , max , max ) ; }
Code	{ return solve ( min , max , max ) ; }
Distance : 2

93
Tree	{ return f ( min , max , max , false ) ; }
Code	{ return f ( min , max , max , false ) ; }
Distance : 5

94
Tree	{ return solve . solve ( min , null , max ) ; }
Code	{ return solve . solve ( min , null , max ) ; }
Distance : 4

95
Tree	{ return solve ( f , min - NUMBER_CONSTANT ) ; }
Code	{ return solve ( f , min - NUMBER_CONSTANT ) ; }
Distance : 2

96
Tree	{ return solve . solve ( f ) ; }
Code	{ return solve . solve ( f ) ; }
Distance : 6

97
Tree	{ return solve ( f , max ) ; }
Code	{ return solve ( f , max ) ; }
Distance : 2

98
Tree	{ return solve ( min , min , max , null ) ; }
Code	{ return solve ( min , min , max , null ) ; }
Distance : 3

99
Tree	{ return solve . solve ( min , null , min ) ; }
Code	{ return solve . solve ( min , null , min ) ; }
Distance : 5

100
Tree	{ return f ( min , null ) ; }
Code	{ return f ( min , null ) ; }
Distance : 4

101
Tree	{ return solve ( f , null ) ; }
Code	{ return solve ( f , null ) ; }
Distance : 3

102
Tree	{ return solve ( min , min - NUMBER_CONSTANT ) ; }
Code	{ return solve ( min , min - NUMBER_CONSTANT ) ; }
Distance : 3

103
Tree	{ return solve . solve ( solve , null , max ) ; }
Code	{ return solve . solve ( solve , null , max ) ; }
Distance : 4

104
Tree	{ return solve ( max . min () , max ) ; }
Code	{ return solve ( max . min () , max ) ; }
Distance : 3

105
Tree	{ return solve . solve () . min ( min , max ) ; }
Code	{ return solve . solve () . min ( min , max ) ; }
Distance : 6

106
Tree	{ return ( ( min ) this ) . solve ( solve , max ) ; }
Code	{ return ( ( min ) this ) . solve ( solve , max ) ; }
Distance : 9

107
Tree	{ return solve ( min , min , max , false ) ; }
Code	{ return solve ( min , min , max , false ) ; }
Distance : 3

108
Tree	{ return solve ( min , max , min ) ; }
Code	{ return solve ( min , max , min ) ; }
Distance : 3

109
Tree	{ return min . solve ( min , null , max ) ; }
Code	{ return min . solve ( min , null , max ) ; }
Distance : 4

110
Tree	{ return ( ( max ) this ) . solve ( min , max ) ; }
Code	{ return ( ( max ) this ) . solve ( min , max ) ; }
Distance : 8

111
Tree	{ return solve ( max , min ) ; }
Code	{ return solve ( max , min ) ; }
Distance : 3

112
Tree	{ return solve ( solve () , max ( max ) ) ; }
Code	{ return solve ( solve () , max ( max ) ) ; }
Distance : 5

113
Tree	{ return solve . solve ( min , max , min ) ; }
Code	{ return solve . solve ( min , max , min ) ; }
Distance : 5

114
Tree	{ return solve ( solve , max , max , null ) ; }
Code	{ return solve ( solve , max , max , null ) ; }
Distance : 4

115
Tree	{ return solve . solve ( min , min , min ) ; }
Code	{ return solve . solve ( min , min , min ) ; }
Distance : 4

116
Tree	{ return f . solve () . solve ( min , max ) ; }
Code	{ return f . solve () . solve ( min , max ) ; }
Distance : 6

117
Tree	{ return min ( min , max ) ; }
Code	{ return min ( min , max ) ; }
Distance : 3

118
Tree	{ return solve ( f . max ( min ) , max ) ; }
Code	{ return solve ( f . max ( min ) , max ) ; }
Distance : 4

119
Tree	{ return solve ( max . min ( min ) ) ; }
Code	{ return solve ( max . min ( min ) ) ; }
Distance : 5

120
Tree	{ return f . solve ( min ) ; }
Code	{ return f . solve ( min ) ; }
Distance : 6

121
Tree	{ return solve ( min - NUMBER_CONSTANT , max ) ; }
Code	{ return solve ( min - NUMBER_CONSTANT , max ) ; }
Distance : 3

122
Tree	{ return solve ( max , null , max ) ; }
Code	{ return solve ( max , null , max ) ; }
Distance : 2

123
Tree	{ return solve ( max , max , min ) ; }
Code	{ return solve ( max , max , min ) ; }
Distance : 3

124
Tree	{ return solve ( solve - NUMBER_CONSTANT , max ) ; }
Code	{ return solve ( solve - NUMBER_CONSTANT , max ) ; }
Distance : 3

125
Tree	{ return solve ( min - NUMBER_CONSTANT , min ) ; }
Code	{ return solve ( min - NUMBER_CONSTANT , min ) ; }
Distance : 4

126
Tree	{ return f . solve ( this , f ) ; }
Code	{ return f . solve ( this , f ) ; }
Distance : 6

127
Tree	{ return ( ( solve ) this ) . solve ( min , max ) ; }
Code	{ return ( ( solve ) this ) . solve ( min , max ) ; }
Distance : 8

128
Tree	{ return solve . solve ( this , initial ) ; }
Code	{ return solve . solve ( this , initial ) ; }
Distance : 5

129
Tree	{ return solve . solve () . solve ( solve , max ) ; }
Code	{ return solve . solve () . solve ( solve , max ) ; }
Distance : 7

130
Tree	{ return solve . solve ( min ) ; }
Code	{ return solve . solve ( min ) ; }
Distance : 5

131
Tree	{ return ( ( min ) this ) . min ( min , max ) ; }
Code	{ return ( ( min ) this ) . min ( min , max ) ; }
Distance : 8

132
Tree	{ return solve . solve ( solve ) ; }
Code	{ return solve . solve ( solve ) ; }
Distance : 6

133
Tree	{ return solve ( min . min ( max ) , max ) ; }
Code	{ return solve ( min . min ( max ) , max ) ; }
Distance : 5

134
Tree	{ return f . solve ( f ) ; }
Code	{ return f . solve ( f ) ; }
Distance : 6

135
Tree	{ return solve ( max , max , min , null ) ; }
Code	{ return solve ( max , max , min , null ) ; }
Distance : 4

136
Tree	{ return min . solve ( min , max ) ; }
Code	{ return min . solve ( min , max ) ; }
Distance : 4

137
Tree	{ return solve . solve ( min , min , max ) ; }
Code	{ return solve . solve ( min , min , max ) ; }
Distance : 3

138
Tree	{ return solve ( max , max , max ) ; }
Code	{ return solve ( max , max , max ) ; }
Distance : 2

139
Tree	{ return solve ( min () , max ( f ) ) ; }
Code	{ return solve ( min () , max ( f ) ) ; }
Distance : 6

140
Tree	{ return solve ( f , min ) ; }
Code	{ return solve ( f , min ) ; }
Distance : 2

141
Tree	{ return min ( min , max - NUMBER_CONSTANT ) ; }
Code	{ return min ( min , max - NUMBER_CONSTANT ) ; }
Distance : 5

142
Tree	{ return solve ( initial , null ) ; }
Code	{ return solve ( initial , null ) ; }
Distance : 4

143
Tree	{ return solve ( max - NUMBER_CONSTANT , max ) ; }
Code	{ return solve ( max - NUMBER_CONSTANT , max ) ; }
Distance : 3

144
Tree	{ return solve ( min . max () , min ) ; }
Code	{ return solve ( min . max () , min ) ; }
Distance : 5

145
Tree	{ return solve ( min , super(); ) ; }
Code	{ return solve ( min , super(); ) ; }
Distance : 3

146
Tree	{ return solve . min ( min , max ) ; }
Code	{ return solve . min ( min , max ) ; }
Distance : 3

147
Tree	{ return solve . solve ( this , max ) ; }
Code	{ return solve . solve ( this , max ) ; }
Distance : 4

148
Tree	{ return solve ( f , null , min ) ; }
Code	{ return solve ( f , null , min ) ; }
Distance : 2

149
Tree	{ return solve ( solve . max () , max ) ; }
Code	{ return solve ( solve . max () , max ) ; }
Distance : 4

150
Tree	{ return solve ( f , max , min ) ; }
Code	{ return solve ( f , max , min ) ; }
Distance : 2

151
Tree	{ return solve ( f , max - NUMBER_CONSTANT ) ; }
Code	{ return solve ( f , max - NUMBER_CONSTANT ) ; }
Distance : 3

152
Tree	{ return solve ( min . min () , min ) ; }
Code	{ return solve ( min . min () , min ) ; }
Distance : 4

153
Tree	{ return solve ( solve , max - NUMBER_CONSTANT ) ; }
Code	{ return solve ( solve , max - NUMBER_CONSTANT ) ; }
Distance : 4

154
Tree	{ return solve . solve () . initial ( min , max ) ; }
Code	{ return solve . solve () . initial ( min , max ) ; }
Distance : 6

155
Tree	{ return solve . solve ( max , max ) ; }
Code	{ return solve . solve ( max , max ) ; }
Distance : 4

156
Tree	{ return solve ( max . max ( min ) ) ; }
Code	{ return solve ( max . max ( min ) ) ; }
Distance : 6

157
Tree	{ return min ( min - NUMBER_CONSTANT , max ) ; }
Code	{ return min ( min - NUMBER_CONSTANT , max ) ; }
Distance : 4

158
Tree	{ return solve ( max , max , max , false ) ; }
Code	{ return solve ( max , max , max , false ) ; }
Distance : 4

159
Tree	{ return solve ( f , max , max , null ) ; }
Code	{ return solve ( f , max , max , null ) ; }
Distance : 3

160
Tree	{ return solve ( solve , null , max ) ; }
Code	{ return solve ( solve , null , max ) ; }
Distance : 2

161
Tree	{ return solve ( min () , max ( min ) ) ; }
Code	{ return solve ( min () , max ( min ) ) ; }
Distance : 6

162
Tree	{ return solve ( max () , min ( max ) ) ; }
Code	{ return solve ( max () , min ( max ) ) ; }
Distance : 4

163
Tree	{ return solve ( max () , max ( max ) ) ; }
Code	{ return solve ( max () , max ( max ) ) ; }
Distance : 5

164
Tree	{ return solve ( f , max , min , null ) ; }
Code	{ return solve ( f , max , min , null ) ; }
Distance : 3

165
Tree	{ return solve ( min , return; ) ; }
Code	{ return solve ( min , return; ) ; }
Distance : 3

166
Tree	{ return solve . f ( this , min ) ; }
Code	{ return solve . f ( this , min ) ; }
Distance : 4

167
Tree	{ return solve . solve () . max ( min , max ) ; }
Code	{ return solve . solve () . max ( min , max ) ; }
Distance : 6

168
Tree	{ return solve . solve ( solve , max , max ) ; }
Code	{ return solve . solve ( solve , max , max ) ; }
Distance : 4

169
Tree	{ return solve ( min . min ( min ) , max ) ; }
Code	{ return solve ( min . min ( min ) , max ) ; }
Distance : 5

170
Tree	{ return solve . f ( min ) ; }
Code	{ return solve . f ( min ) ; }
Distance : 4

171
Tree	{ return f ( min , null , max ) ; }
Code	{ return f ( min , null , max ) ; }
Distance : 3

172
Tree	{ return solve ( min , f - NUMBER_CONSTANT ) ; }
Code	{ return solve ( min , f - NUMBER_CONSTANT ) ; }
Distance : 4

173
Tree	{ return solve ( f - NUMBER_CONSTANT , min ) ; }
Code	{ return solve ( f - NUMBER_CONSTANT , min ) ; }
Distance : 3

174
Tree	{ return min . solve ( min ) ; }
Code	{ return min . solve ( min ) ; }
Distance : 6

175
Tree	{ return solve . solve () . solve ( f , max ) ; }
Code	{ return solve . solve () . solve ( f , max ) ; }
Distance : 7

176
Tree	{ return solve . f ( min , null , max ) ; }
Code	{ return solve . f ( min , null , max ) ; }
Distance : 4

177
Tree	{ return solve ( min . max ( solve ) ) ; }
Code	{ return solve ( min . max ( solve ) ) ; }
Distance : 6

178
Tree	{ return f ( min , max , max ) ; }
Code	{ return f ( min , max , max ) ; }
Distance : 3

179
Tree	{ return solve . solve ( initial ) ; }
Code	{ return solve . solve ( initial ) ; }
Distance : 6

180
Tree	{ return f ( min , max , max , null ) ; }
Code	{ return f ( min , max , max , null ) ; }
Distance : 5

181
Tree	{ return solve ( min , max , max , false ) ; }
Code	{ return solve ( min , max , max , false ) ; }
Distance : 4

182
Tree	{ return f . solve ( min , max ) ; }
Code	{ return f . solve ( min , max ) ; }
Distance : 4

183
Tree	{ return solve ( min , min , max ) ; }
Code	{ return solve ( min , min , max ) ; }
Distance : 1

184
Tree	{ return solve . f ( min , max ) ; }
Code	{ return solve . f ( min , max ) ; }
Distance : 2

185
Tree	{ return solve ( min . max ( min ) , min ) ; }
Code	{ return solve ( min . max ( min ) , min ) ; }
Distance : 6

186
Tree	{ return solve ( f . max () , max ) ; }
Code	{ return solve ( f . max () , max ) ; }
Distance : 3

187
Tree	{ return solve ( min () , min ( max ) ) ; }
Code	{ return solve ( min () , min ( max ) ) ; }
Distance : 4

188
Tree	{ return solve ( min . max ( f ) ) ; }
Code	{ return solve ( min . max ( f ) ) ; }
Distance : 6

189
Tree	{ return solve ( min () , min ( min ) ) ; }
Code	{ return solve ( min () , min ( min ) ) ; }
Distance : 5

190
Tree	{ return solve . solve ( max , null , max ) ; }
Code	{ return solve . solve ( max , null , max ) ; }
Distance : 4

191
Tree	{ return ( ( min ) this ) . solve ( max , max ) ; }
Code	{ return ( ( min ) this ) . solve ( max , max ) ; }
Distance : 9

192
Tree	{ return f . solve ( min , min ) ; }
Code	{ return f . solve ( min , min ) ; }
Distance : 5

193
Tree	{ return solve . min ( min , max , max ) ; }
Code	{ return solve . min ( min , max , max ) ; }
Distance : 4

194
Tree	{ return min ( min , null ) ; }
Code	{ return min ( min , null ) ; }
Distance : 4

195
Tree	{ return solve ( min , min , min , null ) ; }
Code	{ return solve ( min , min , min , null ) ; }
Distance : 4

196
Tree	{ return solve . max ( min ) ; }
Code	{ return solve . max ( min ) ; }
Distance : 5

197
Tree	{ return solve ( max , max , min , false ) ; }
Code	{ return solve ( max , max , min , false ) ; }
Distance : 4

198
Tree	{ return solve ( min - NUMBER_CONSTANT , f ) ; }
Code	{ return solve ( min - NUMBER_CONSTANT , f ) ; }
Distance : 4

199
Tree	{ return solve . max ( min ) ; }
Code	{ return solve . max ( min ) ; }
Distance : 5

========================================================================


========================================================================
Example Number: 58
Parent Code is: 
out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - tDistribution . cumulativeProbability ( t ) ) ;
-------------------------------------------------------------------------------
Child code is: 
out [ i ] [ j ] = NUMBER_CONSTANT * tDistribution . cumulativeProbability ( - t ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (2 (2 (801{val=out}) (221{val=[}) (800{val=i}) (222{val=]})) (221{val=[}) (800{val=j}) (222{val=]})) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (36 (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (201{val=-}) (32 (800{val=tDistribution}) (235{val=.}) (802{val=cumulativeProbability}) (214{val=(}) (800{val=t}) (215{val=)}))) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (2 (2 (801{val=out}) (221{val=[}) (800{val=i}) (222{val=]})) (221{val=[}) (800{val=j}) (222{val=]})) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (32 (800{val=tDistribution}) (235{val=.}) (802{val=cumulativeProbability}) (214{val=(}) (38 (201{val=-}) (800{val=t})) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/69/parent/src_main_java_org_apache_commons_math_stat_correlation_PearsonsCorrelation.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	out = ( out & ( j . getEntry ( t ) / j ) ) ;
Code	out = ( out & ( j . getEntry ( t ) / j ) ) ;
Distance : 15

1
Tree	out = ( ( out . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Code	out = ( ( out . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Distance : 17

2
Tree	out = ( ( out . abs ( t ) - tDistribution ) * / * / * tDistribution ) ;
Code	out = ( ( out . abs ( t ) - tDistribution ) * / * / * tDistribution ) ;
Distance : 17

3
Tree	out = ( ( out . getEntry ( t ) - tDistribution ) * / * / * tDistribution ) ;
Code	out = ( ( out . getEntry ( t ) - tDistribution ) * / * / * tDistribution ) ;
Distance : 17

4
Tree	out = ( ( i . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Code	out = ( ( i . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Distance : 17

5
Tree	out = ( ( MathException == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	out = ( ( MathException == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 17

6
Tree	out = ( ( getEntry == nVars ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	out = ( ( getEntry == nVars ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 17

7
Tree	out = ( ( getEntry == correlationMatrix ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	out = ( ( getEntry == correlationMatrix ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 17

8
Tree	out = ( ( i . abs ( t ) - tDistribution ) * / * / * tDistribution ) ;
Code	out = ( ( i . abs ( t ) - tDistribution ) * / * / * tDistribution ) ;
Distance : 17

9
Tree	out = ( ( i . getEntry ( t ) - tDistribution ) * / * / * tDistribution ) ;
Code	out = ( ( i . getEntry ( t ) - tDistribution ) * / * / * tDistribution ) ;
Distance : 17

10
Tree	out += i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	out += i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 9

11
Tree	out += i / ( t . getColumnDimension ( t ) > > > NUMBER_CONSTANT ) ;
Code	out += i / ( t . getColumnDimension ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 14

12
Tree	out += i / ( t . getEntry ( t ) > > > NUMBER_CONSTANT ) ;
Code	out += i / ( t . getEntry ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 14

13
Tree	out += i / ( t != t . out ( t ) ) ;
Code	out += i / ( t != t . out ( t ) ) ;
Distance : 12

14
Tree	out += j / ( t != t . getEntry ( t ) ) ;
Code	out += j / ( t != t . getEntry ( t ) ) ;
Distance : 12

15
Tree	out += i / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Code	out += i / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Distance : 12

16
Tree	out += i / ( t . cumulativeProbability ( j ) > > > NUMBER_CONSTANT ) ;
Code	out += i / ( t . cumulativeProbability ( j ) > > > NUMBER_CONSTANT ) ;
Distance : 14

17
Tree	out += getEntry / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	out += getEntry / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

18
Tree	out += i / ( t . j ( t ) > > > NUMBER_CONSTANT ) ;
Code	out += i / ( t . j ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 14

19
Tree	out += i && ( t != j . cumulativeProbability ( t ) ) ;
Code	out += i && ( t != j . cumulativeProbability ( t ) ) ;
Distance : 11

20
Tree	out += j && ( t != j . cumulativeProbability ( t ) ) ;
Code	out += j && ( t != j . cumulativeProbability ( t ) ) ;
Distance : 11

21
Tree	out += i / ( t . cumulativeProbability ( t ) - TDistributionImpl ) ;
Code	out += i / ( t . cumulativeProbability ( t ) - TDistributionImpl ) ;
Distance : 12

22
Tree	out += i / ( NUMBER_CONSTANT + getColumnDimension . cumulativeProbability ( t ) ) ;
Code	out += i / ( NUMBER_CONSTANT + getColumnDimension . cumulativeProbability ( t ) ) ;
Distance : 10

23
Tree	out = ( out != i . cumulativeProbability ( t . abs ( t ) - j ) ) ;
Code	out = ( out != i . cumulativeProbability ( t . abs ( t ) - j ) ) ;
Distance : 15

24
Tree	out += i / ( t . cumulativeProbability ( t ) - cumulativeProbability ) ;
Code	out += i / ( t . cumulativeProbability ( t ) - cumulativeProbability ) ;
Distance : 12

25
Tree	out = ( MathException != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Code	out = ( MathException != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Distance : 14

26
Tree	out = ( ( i != i . cumulativeProbability ( t ) ) * % * / * tDistribution ) ;
Code	out = ( ( i != i . cumulativeProbability ( t ) ) * % * / * tDistribution ) ;
Distance : 17

27
Tree	out += i && ( t . cumulativeProbability ( j ) > > > NUMBER_CONSTANT ) ;
Code	out += i && ( t . cumulativeProbability ( j ) > > > NUMBER_CONSTANT ) ;
Distance : 14

28
Tree	out += getEntry && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	out += getEntry && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

29
Tree	out += i && ( t != MathException . cumulativeProbability ( t ) ) ;
Code	out += i && ( t != MathException . cumulativeProbability ( t ) ) ;
Distance : 11

30
Tree	out = ( ( out != i . cumulativeProbability ( t ) ) * & * / * tDistribution ) ;
Code	out = ( ( out != i . cumulativeProbability ( t ) ) * & * / * tDistribution ) ;
Distance : 17

31
Tree	out += i && ( t . cumulativeProbability ( getColumnDimension ) > > > NUMBER_CONSTANT ) ;
Code	out += i && ( t . cumulativeProbability ( getColumnDimension ) > > > NUMBER_CONSTANT ) ;
Distance : 14

32
Tree	out += i / ( t . getColumnDimension ( t ) - tDistribution ) ;
Code	out += i / ( t . getColumnDimension ( t ) - tDistribution ) ;
Distance : 13

33
Tree	out = ( ( out . abs ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Code	out = ( ( out . abs ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Distance : 19

34
Tree	out += i / ( t . abs ( t ) > > > NUMBER_CONSTANT ) ;
Code	out += i / ( t . abs ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 14

35
Tree	out += abs / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	out += abs / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

36
Tree	out = ( ( out . getEntry ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Code	out = ( ( out . getEntry ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Distance : 19

37
Tree	out += i / ( t . cumulativeProbability ( getColumnDimension ) > > > NUMBER_CONSTANT ) ;
Code	out += i / ( t . cumulativeProbability ( getColumnDimension ) > > > NUMBER_CONSTANT ) ;
Distance : 14

38
Tree	out += i && ( NUMBER_CONSTANT + TDistributionImpl . cumulativeProbability ( t ) ) ;
Code	out += i && ( NUMBER_CONSTANT + TDistributionImpl . cumulativeProbability ( t ) ) ;
Distance : 10

39
Tree	out += j / ( t != t . i ( t ) ) ;
Code	out += j / ( t != t . i ( t ) ) ;
Distance : 12

40
Tree	out = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Code	out = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Distance : 18

41
Tree	out += i / ( t != t . getColumnDimension ( t ) ) ;
Code	out += i / ( t != t . getColumnDimension ( t ) ) ;
Distance : 12

42
Tree	out += i && ( NUMBER_CONSTANT + nVars . cumulativeProbability ( t ) ) ;
Code	out += i && ( NUMBER_CONSTANT + nVars . cumulativeProbability ( t ) ) ;
Distance : 10

43
Tree	out += i / ( NUMBER_CONSTANT + j . cumulativeProbability ( t ) ) ;
Code	out += i / ( NUMBER_CONSTANT + j . cumulativeProbability ( t ) ) ;
Distance : 10

44
Tree	out += i / ( NUMBER_CONSTANT + TDistributionImpl . cumulativeProbability ( t ) ) ;
Code	out += i / ( NUMBER_CONSTANT + TDistributionImpl . cumulativeProbability ( t ) ) ;
Distance : 10

45
Tree	out += i / ( NUMBER_CONSTANT + cumulativeProbability . cumulativeProbability ( t ) ) ;
Code	out += i / ( NUMBER_CONSTANT + cumulativeProbability . cumulativeProbability ( t ) ) ;
Distance : 10

46
Tree	out += i && ( NUMBER_CONSTANT + j . cumulativeProbability ( t ) ) ;
Code	out += i && ( NUMBER_CONSTANT + j . cumulativeProbability ( t ) ) ;
Distance : 10

47
Tree	out += i / ( t . cumulativeProbability ( t ) - j ) ;
Code	out += i / ( t . cumulativeProbability ( t ) - j ) ;
Distance : 12

48
Tree	out = ( out != i . cumulativeProbability ( t . cumulativeProbability ( t ) - getColumnDimension ) ) ;
Code	out = ( out != i . cumulativeProbability ( t . cumulativeProbability ( t ) - getColumnDimension ) ) ;
Distance : 14

49
Tree	out += i / ( NUMBER_CONSTANT + nVars . cumulativeProbability ( t ) ) ;
Code	out += i / ( NUMBER_CONSTANT + nVars . cumulativeProbability ( t ) ) ;
Distance : 10

50
Tree	out += i / ( t . cumulativeProbability ( t ) - getColumnDimension ) ;
Code	out += i / ( t . cumulativeProbability ( t ) - getColumnDimension ) ;
Distance : 12

51
Tree	out += i / ( NUMBER_CONSTANT + correlationMatrix . cumulativeProbability ( t ) ) ;
Code	out += i / ( NUMBER_CONSTANT + correlationMatrix . cumulativeProbability ( t ) ) ;
Distance : 10

52
Tree	out += i / ( t . cumulativeProbability ( t ) - correlationMatrix ) ;
Code	out += i / ( t . cumulativeProbability ( t ) - correlationMatrix ) ;
Distance : 12

53
Tree	out = ( ( out != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Code	out = ( ( out != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Distance : 17

54
Tree	out = ( ( getEntry == tDistribution ) * ( TDistributionImpl == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	out = ( ( getEntry == tDistribution ) * ( TDistributionImpl == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

55
Tree	out = ( ( MathException == tDistribution ) * ( TDistributionImpl == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	out = ( ( MathException == tDistribution ) * ( TDistributionImpl == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

56
Tree	out += j && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	out += j && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

57
Tree	out = ( ( getEntry == nVars ) * ( TDistributionImpl == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	out = ( ( getEntry == nVars ) * ( TDistributionImpl == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

58
Tree	out += i && ( t != Math . cumulativeProbability ( t ) ) ;
Code	out += i && ( t != Math . cumulativeProbability ( t ) ) ;
Distance : 11

59
Tree	out += i && ( t != t . cumulativeProbability ( t ) ) ;
Code	out += i && ( t != t . cumulativeProbability ( t ) ) ;
Distance : 11

60
Tree	out = ( ( getEntry == tDistribution ) * ( MathException == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	out = ( ( getEntry == tDistribution ) * ( MathException == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

61
Tree	out = ( ( getEntry == correlationMatrix ) * ( TDistributionImpl == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	out = ( ( getEntry == correlationMatrix ) * ( TDistributionImpl == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

62
Tree	out = ( ( getEntry == tDistribution ) * ( TDistributionImpl == correlationMatrix ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	out = ( ( getEntry == tDistribution ) * ( TDistributionImpl == correlationMatrix ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

63
Tree	out = ( out & ( j . cumulativeProbability ( t ) / tDistribution ) ) ;
Code	out = ( out & ( j . cumulativeProbability ( t ) / tDistribution ) ) ;
Distance : 15

64
Tree	out += i && ( t != getEntry . cumulativeProbability ( t ) ) ;
Code	out += i && ( t != getEntry . cumulativeProbability ( t ) ) ;
Distance : 11

65
Tree	out = ( ( getEntry == cumulativeProbability ) * ( TDistributionImpl == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	out = ( ( getEntry == cumulativeProbability ) * ( TDistributionImpl == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

66
Tree	out = ( ( getEntry == j ) * ( TDistributionImpl == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	out = ( ( getEntry == j ) * ( TDistributionImpl == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 16

67
Tree	out = ( ( nObs == tDistribution ) * ( TDistributionImpl == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	out = ( ( nObs == tDistribution ) * ( TDistributionImpl == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

68
Tree	out = ( out != i . cumulativeProbability ( t . cumulativeProbability ( t ) - tDistribution ) ) ;
Code	out = ( out != i . cumulativeProbability ( t . cumulativeProbability ( t ) - tDistribution ) ) ;
Distance : 14

69
Tree	out = ( ( getEntry == tDistribution ) * ( TDistributionImpl == tDistribution ) * tDistribution . cumulativeProbability ( t ) * correlationMatrix ) ;
Code	out = ( ( getEntry == tDistribution ) * ( TDistributionImpl == tDistribution ) * tDistribution . cumulativeProbability ( t ) * correlationMatrix ) ;
Distance : 17

70
Tree	out = ( ( getEntry == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	out = ( ( getEntry == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

71
Tree	out = ( ( out . cumulativeProbability ( t ) - getColumnDimension ) * / * / * tDistribution ) ;
Code	out = ( ( out . cumulativeProbability ( t ) - getColumnDimension ) * / * / * tDistribution ) ;
Distance : 18

72
Tree	out = ( ( MathException == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	out = ( ( MathException == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

73
Tree	out = ( ( getEntry == cumulativeProbability ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	out = ( ( getEntry == cumulativeProbability ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 17

74
Tree	out = ( ( getEntry == nVars ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	out = ( ( getEntry == nVars ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

75
Tree	out = ( ( getEntry == j ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	out = ( ( getEntry == j ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 16

76
Tree	out = ( ( getEntry == correlationMatrix ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	out = ( ( getEntry == correlationMatrix ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

77
Tree	out = ( ( getEntry == cumulativeProbability ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	out = ( ( getEntry == cumulativeProbability ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

78
Tree	out = ( ( getEntry == j ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	out = ( ( getEntry == j ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 16

79
Tree	out = ( ( nObs == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	out = ( ( nObs == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 17

80
Tree	out = ( ( j . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Code	out = ( ( j . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Distance : 17

81
Tree	out = ( ( BlockRealMatrix == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	out = ( ( BlockRealMatrix == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 17

82
Tree	out = ( ( nObs == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	out = ( ( nObs == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

83
Tree	out = ( ( getEntry == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * correlationMatrix ) ;
Code	out = ( ( getEntry == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * correlationMatrix ) ;
Distance : 17

84
Tree	out = ( ( BlockRealMatrix == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	out = ( ( BlockRealMatrix == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

85
Tree	out = ( ( out . cumulativeProbability ( t ) - tDistribution ) * -= * / * tDistribution ) ;
Code	out = ( ( out . cumulativeProbability ( t ) - tDistribution ) * -= * / * tDistribution ) ;
Distance : 17

86
Tree	out = ( ( out == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	out = ( ( out == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 17

87
Tree	out = ( ( out . cumulativeProbability ( t ) - tDistribution ) * % * / * tDistribution ) ;
Code	out = ( ( out . cumulativeProbability ( t ) - tDistribution ) * % * / * tDistribution ) ;
Distance : 17

88
Tree	out = ( ( getEntry == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * getColumnDimension ) ;
Code	out = ( ( getEntry == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * getColumnDimension ) ;
Distance : 17

89
Tree	out += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	out += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 14

90
Tree	out += i / ( t != t . j ( t ) ) ;
Code	out += i / ( t != t . j ( t ) ) ;
Distance : 12

91
Tree	out = ( ( getEntry == tDistribution ) * ( t + tDistribution ) * correlationMatrix . cumulativeProbability ( t ) * tDistribution ) ;
Code	out = ( ( getEntry == tDistribution ) * ( t + tDistribution ) * correlationMatrix . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

92
Tree	out += i / ( t != t . getEntry ( t ) ) ;
Code	out += i / ( t != t . getEntry ( t ) ) ;
Distance : 12

93
Tree	out += i / ( t != t . i ( t ) ) ;
Code	out += i / ( t != t . i ( t ) ) ;
Distance : 12

94
Tree	out += j / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	out += j / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

95
Tree	out += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	out += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 14

96
Tree	out = ( ( getEntry == cumulativeProbability ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	out = ( ( getEntry == cumulativeProbability ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 15

97
Tree	out += j / ( t != t . j ( t ) ) ;
Code	out += j / ( t != t . j ( t ) ) ;
Distance : 12

98
Tree	out = ( ( getEntry == j ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	out = ( ( getEntry == j ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 14

99
Tree	out += i / ( t != t . abs ( t ) ) ;
Code	out += i / ( t != t . abs ( t ) ) ;
Distance : 12

100
Tree	out += i / ( NUMBER_CONSTANT + nObs . cumulativeProbability ( t ) ) ;
Code	out += i / ( NUMBER_CONSTANT + nObs . cumulativeProbability ( t ) ) ;
Distance : 10

101
Tree	out += i && ( t != getColumnDimension . cumulativeProbability ( t ) ) ;
Code	out += i && ( t != getColumnDimension . cumulativeProbability ( t ) ) ;
Distance : 11

102
Tree	out = ( out != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Code	out = ( out != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Distance : 14

103
Tree	out += j / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	out += j / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 9

104
Tree	out = ( ( nObs == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	out = ( ( nObs == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 15

105
Tree	out = ( out != i . cumulativeProbability ( t . getColumnDimension ( t ) - j ) ) ;
Code	out = ( out != i . cumulativeProbability ( t . getColumnDimension ( t ) - j ) ) ;
Distance : 15

106
Tree	out = ( ( MathException == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	out = ( ( MathException == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 16

107
Tree	out = ( ( out != i . cumulativeProbability ( t ) ) * % * / * tDistribution ) ;
Code	out = ( ( out != i . cumulativeProbability ( t ) ) * % * / * tDistribution ) ;
Distance : 17

108
Tree	out += getEntry () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Code	out += getEntry () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Distance : 13

109
Tree	out = ( ( BlockRealMatrix == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	out = ( ( BlockRealMatrix == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 15

110
Tree	out += i / ( t != t . cumulativeProbability ( t ) ) ;
Code	out += i / ( t != t . cumulativeProbability ( t ) ) ;
Distance : 11

111
Tree	out += i && ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	out += i && ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 9

112
Tree	out = ( out != i . cumulativeProbability ( t . getEntry ( t ) - j ) ) ;
Code	out = ( out != i . cumulativeProbability ( t . getEntry ( t ) - j ) ) ;
Distance : 15

113
Tree	out = ( ( out == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	out = ( ( out == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 15

114
Tree	out += i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	out += i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 9

115
Tree	out = ( ( getEntry == nVars ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	out = ( ( getEntry == nVars ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 16

116
Tree	out += i () out ( t . j ( t ) / tDistribution ) ;
Code	out += i () out ( t . j ( t ) / tDistribution ) ;
Distance : 14

117
Tree	out = ( ( i . abs ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Code	out = ( ( i . abs ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Distance : 18

118
Tree	out = ( out & ( j . cumulativeProbability ( t ) / TDistributionImpl ) ) ;
Code	out = ( out & ( j . cumulativeProbability ( t ) / TDistributionImpl ) ) ;
Distance : 15

119
Tree	out = ( ( getEntry == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	out = ( ( getEntry == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 16

120
Tree	out = ( ( j . abs ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Code	out = ( ( j . abs ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Distance : 19

121
Tree	out += i && ( t . getEntry ( t ) > > > NUMBER_CONSTANT ) ;
Code	out += i && ( t . getEntry ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 14

122
Tree	out = ( ( getEntry == correlationMatrix ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	out = ( ( getEntry == correlationMatrix ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 16

123
Tree	out = ( ( getEntry == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	out = ( ( getEntry == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 15

124
Tree	out = ( out & ( j . cumulativeProbability ( t ) / getColumnDimension ) ) ;
Code	out = ( out & ( j . cumulativeProbability ( t ) / getColumnDimension ) ) ;
Distance : 15

125
Tree	out = ( ( i . getEntry ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Code	out = ( ( i . getEntry ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Distance : 18

126
Tree	out = ( ( MathException == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	out = ( ( MathException == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 16

127
Tree	out = ( ( i != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Code	out = ( ( i != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Distance : 17

128
Tree	out += i && ( NUMBER_CONSTANT + correlationMatrix . cumulativeProbability ( t ) ) ;
Code	out += i && ( NUMBER_CONSTANT + correlationMatrix . cumulativeProbability ( t ) ) ;
Distance : 10

129
Tree	out = ( ( out != i . cumulativeProbability ( t ) ) * * * / * tDistribution ) ;
Code	out = ( ( out != i . cumulativeProbability ( t ) ) * * * / * tDistribution ) ;
Distance : 17

130
Tree	out += getEntry () [ ( t . getEntry ( t ) / tDistribution ) ;
Code	out += getEntry () [ ( t . getEntry ( t ) / tDistribution ) ;
Distance : 14

131
Tree	out = ( ( getEntry == nVars ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	out = ( ( getEntry == nVars ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 16

132
Tree	out = ( ( MathException . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Code	out = ( ( MathException . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Distance : 19

133
Tree	out = ( ( getEntry == correlationMatrix ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	out = ( ( getEntry == correlationMatrix ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 16

134
Tree	out = ( out & ( j . cumulativeProbability ( t ) / correlationMatrix ) ) ;
Code	out = ( out & ( j . cumulativeProbability ( t ) / correlationMatrix ) ) ;
Distance : 15

135
Tree	out = ( ( MathException == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	out = ( ( MathException == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 15

136
Tree	out += i && ( t != i . cumulativeProbability ( t ) ) ;
Code	out += i && ( t != i . cumulativeProbability ( t ) ) ;
Distance : 11

137
Tree	out = ( ( BlockRealMatrix == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	out = ( ( BlockRealMatrix == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 16

138
Tree	out += getEntry () [ ( t . j ( t ) / tDistribution ) ;
Code	out += getEntry () [ ( t . j ( t ) / tDistribution ) ;
Distance : 14

139
Tree	out = ( out & ( j . cumulativeProbability ( t ) / cumulativeProbability ) ) ;
Code	out = ( out & ( j . cumulativeProbability ( t ) / cumulativeProbability ) ) ;
Distance : 14

140
Tree	out += abs () [ ( t . j ( t ) / tDistribution ) ;
Code	out += abs () [ ( t . j ( t ) / tDistribution ) ;
Distance : 14

141
Tree	out = ( out & ( j . getEntry ( t ) / tDistribution ) ) ;
Code	out = ( out & ( j . getEntry ( t ) / tDistribution ) ) ;
Distance : 15

142
Tree	out = ( out & ( j . cumulativeProbability ( t ) / t ) ) ;
Code	out = ( out & ( j . cumulativeProbability ( t ) / t ) ) ;
Distance : 14

143
Tree	out = ( ( getEntry == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	out = ( ( getEntry == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 16

144
Tree	out = ( BlockRealMatrix != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Code	out = ( BlockRealMatrix != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Distance : 14

145
Tree	out = ( ( j . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Code	out = ( ( j . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Distance : 19

146
Tree	out += i && ( t != cumulativeProbability . cumulativeProbability ( t ) ) ;
Code	out += i && ( t != cumulativeProbability . cumulativeProbability ( t ) ) ;
Distance : 11

147
Tree	out = ( out != i . abs ( t . cumulativeProbability ( t ) - j ) ) ;
Code	out = ( out != i . abs ( t . cumulativeProbability ( t ) - j ) ) ;
Distance : 14

148
Tree	out += i && ( NUMBER_CONSTANT + nObs . cumulativeProbability ( t ) ) ;
Code	out += i && ( NUMBER_CONSTANT + nObs . cumulativeProbability ( t ) ) ;
Distance : 10

149
Tree	out = ( ( out == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	out = ( ( out == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 16

150
Tree	out = ( ( out . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * getColumnDimension ) ;
Code	out = ( ( out . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * getColumnDimension ) ;
Distance : 19

151
Tree	out = ( ( getEntry == cumulativeProbability ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	out = ( ( getEntry == cumulativeProbability ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 16

152
Tree	out += i / ( t . cumulativeProbability ( t ) - nObs ) ;
Code	out += i / ( t . cumulativeProbability ( t ) - nObs ) ;
Distance : 12

153
Tree	out += abs && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	out += abs && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

154
Tree	out += j / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Code	out += j / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Distance : 12

155
Tree	out = ( ( getEntry == j ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	out = ( ( getEntry == j ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 15

156
Tree	out = ( ( j != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Code	out = ( ( j != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Distance : 17

157
Tree	out += i && ( NUMBER_CONSTANT + cumulativeProbability . cumulativeProbability ( t ) ) ;
Code	out += i && ( NUMBER_CONSTANT + cumulativeProbability . cumulativeProbability ( t ) ) ;
Distance : 10

158
Tree	out = ( ( getEntry == tDistribution ) * ( t + tDistribution ) * -= * tDistribution ) ;
Code	out = ( ( getEntry == tDistribution ) * ( t + tDistribution ) * -= * tDistribution ) ;
Distance : 16

159
Tree	out = ( ( out != i . cumulativeProbability ( t ) ) * -= * / * tDistribution ) ;
Code	out = ( ( out != i . cumulativeProbability ( t ) ) * -= * / * tDistribution ) ;
Distance : 17

160
Tree	out += i && ( t . abs ( t ) > > > NUMBER_CONSTANT ) ;
Code	out += i && ( t . abs ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 14

161
Tree	out = ( ( getEntry == nVars ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	out = ( ( getEntry == nVars ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 15

162
Tree	out = ( ( nObs == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	out = ( ( nObs == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 16

163
Tree	out += j && ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	out += j && ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 9

164
Tree	out += i / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Code	out += i / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Distance : 12

165
Tree	out += i && ( t . getColumnDimension ( t ) > > > NUMBER_CONSTANT ) ;
Code	out += i && ( t . getColumnDimension ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 14

166
Tree	out = ( ( out != i . cumulativeProbability ( t ) ) * throws * / * tDistribution ) ;
Code	out = ( ( out != i . cumulativeProbability ( t ) ) * throws * / * tDistribution ) ;
Distance : 17

167
Tree	out = ( out & ( j . cumulativeProbability ( t ) / j ) ) ;
Code	out = ( out & ( j . cumulativeProbability ( t ) / j ) ) ;
Distance : 15

168
Tree	out = ( ( out != i . cumulativeProbability ( t ) ) * *= * / * tDistribution ) ;
Code	out = ( ( out != i . cumulativeProbability ( t ) ) * *= * / * tDistribution ) ;
Distance : 17

169
Tree	out = ( ( out . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Code	out = ( ( out . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Distance : 19

170
Tree	out = ( ( getEntry == correlationMatrix ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	out = ( ( getEntry == correlationMatrix ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 15

171
Tree	out = ( ( getEntry == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * % * tDistribution ) ;
Code	out = ( ( getEntry == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * % * tDistribution ) ;
Distance : 15

172
Tree	out = ( ( getEntry == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	out = ( ( getEntry == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 17

173
Tree	out += i && ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	out += i && ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 9

174
Tree	out = ( out != i . cumulativeProbability ( t . j ( t ) - j ) ) ;
Code	out = ( out != i . cumulativeProbability ( t . j ( t ) - j ) ) ;
Distance : 15

175
Tree	out += getEntry () [ ( t . j ( t ) / j ) ;
Code	out += getEntry () [ ( t . j ( t ) / j ) ;
Distance : 14

176
Tree	out = ( ( getEntry == cumulativeProbability ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	out = ( ( getEntry == cumulativeProbability ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 16

177
Tree	out /= out () [ ( t . j ( t ) / tDistribution ) ;
Code	out /= out () [ ( t . j ( t ) / tDistribution ) ;
Distance : 14

178
Tree	out /= out () [ ( t . getEntry ( t ) / tDistribution ) ;
Code	out /= out () [ ( t . getEntry ( t ) / tDistribution ) ;
Distance : 14

179
Tree	out /= out () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Code	out /= out () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Distance : 13

180
Tree	out += abs () [ ( t . getEntry ( t ) / tDistribution ) ;
Code	out += abs () [ ( t . getEntry ( t ) / tDistribution ) ;
Distance : 14

181
Tree	out /= out () [ ( t . j ( t ) / j ) ;
Code	out /= out () [ ( t . j ( t ) / j ) ;
Distance : 14

182
Tree	out /= abs () [ ( t . j ( t ) / tDistribution ) ;
Code	out /= abs () [ ( t . j ( t ) / tDistribution ) ;
Distance : 14

183
Tree	out /= out () [ ( t . getEntry ( t ) / j ) ;
Code	out /= out () [ ( t . getEntry ( t ) / j ) ;
Distance : 14

184
Tree	out += i && ( NUMBER_CONSTANT + getColumnDimension . cumulativeProbability ( t ) ) ;
Code	out += i && ( NUMBER_CONSTANT + getColumnDimension . cumulativeProbability ( t ) ) ;
Distance : 10

185
Tree	out += i () [ ( t . getEntry ( t ) / tDistribution ) ;
Code	out += i () [ ( t . getEntry ( t ) / tDistribution ) ;
Distance : 13

186
Tree	out = ( ( getEntry == j ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	out = ( ( getEntry == j ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 15

187
Tree	out /= abs () [ ( t . getEntry ( t ) / tDistribution ) ;
Code	out /= abs () [ ( t . getEntry ( t ) / tDistribution ) ;
Distance : 14

188
Tree	out /= out () [ ( t . j ( t ) / getColumnDimension ) ;
Code	out /= out () [ ( t . j ( t ) / getColumnDimension ) ;
Distance : 14

189
Tree	out += i && ( t . cumulativeProbability ( Math ) > > > NUMBER_CONSTANT ) ;
Code	out += i && ( t . cumulativeProbability ( Math ) > > > NUMBER_CONSTANT ) ;
Distance : 14

190
Tree	out += getEntry () [ ( t . getEntry ( t ) / j ) ;
Code	out += getEntry () [ ( t . getEntry ( t ) / j ) ;
Distance : 14

191
Tree	out += i && ( t != TDistribution . cumulativeProbability ( t ) ) ;
Code	out += i && ( t != TDistribution . cumulativeProbability ( t ) ) ;
Distance : 11

192
Tree	out += getEntry () [ ( t . abs ( t ) / tDistribution ) ;
Code	out += getEntry () [ ( t . abs ( t ) / tDistribution ) ;
Distance : 14

193
Tree	out = ( ( nObs == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	out = ( ( nObs == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 16

194
Tree	out = ( out & ( j . j ( t ) / tDistribution ) ) ;
Code	out = ( out & ( j . j ( t ) / tDistribution ) ) ;
Distance : 15

195
Tree	out /= out () [ ( t . cumulativeProbability ( t ) / j ) ;
Code	out /= out () [ ( t . cumulativeProbability ( t ) / j ) ;
Distance : 13

196
Tree	out = ( ( getEntry == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * correlationMatrix ) ;
Code	out = ( ( getEntry == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * correlationMatrix ) ;
Distance : 16

197
Tree	out = ( ( BlockRealMatrix == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	out = ( ( BlockRealMatrix == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 16

198
Tree	out = ( ( getEntry == tDistribution ) * ( t - NUMBER_CONSTANT ) * TDistributionImpl . cumulativeProbability ( t ) * tDistribution ) ;
Code	out = ( ( getEntry == tDistribution ) * ( t - NUMBER_CONSTANT ) * TDistributionImpl . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

199
Tree	out /= abs () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Code	out /= abs () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Distance : 13

========================================================================


========================================================================
Example Number: 59
Parent Code is: 
if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.MEAN , p ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=p}) (252{val=<=}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (32 (800{val=MathRuntimeException}) (235{val=.}) (802{val=createIllegalArgumentException}) (214{val=(}) (40{val=LocalizedFormats.NOT_POSITIVE_POISSON_MEAN}) (234{val=,}) (800{val=p}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=p}) (252{val=<=}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=NotStrictlyPositiveException})) (214{val=(}) (40{val=LocalizedFormats.MEAN}) (234{val=,}) (800{val=p}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/61/parent/src_main_java_org_apache_commons_math_distribution_PoissonDistributionImpl.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 4

1
Tree	if ( p <= NUMBER_CONSTANT ) { throw new PoissonDistributionImpl ( p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new PoissonDistributionImpl ( p , STRING_CONSTANT ) ; }
Distance : 3

2
Tree	if ( p <= NUMBER_CONSTANT ) { throw new FastMath ( p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new FastMath ( p , STRING_CONSTANT ) ; }
Distance : 3

3
Tree	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 2

4
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( NotStrictlyPositiveException , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( NotStrictlyPositiveException , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

5
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < mean > ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < mean > ( p ) ; }
Distance : 4

6
Tree	if ( p <= NUMBER_CONSTANT ) { throw new LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ( p ) ; }
Distance : 3

7
Tree	if ( p <= NUMBER_CONSTANT ) { throw new p ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new p ( p ) ; }
Distance : 3

8
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 4

9
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 2

10
Tree	if ( p <= NUMBER_CONSTANT ) { throw new mean ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new mean ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 4

11
Tree	if ( p <= NUMBER_CONSTANT ) { throw new mean ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new mean ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 2

12
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( p , p ) ; }
Distance : 2

13
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( mean , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( mean , p ) ; }
Distance : 1

14
Tree	if ( p <= NUMBER_CONSTANT ) { throw new LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ( p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ( p , STRING_CONSTANT ) ; }
Distance : 3

15
Tree	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( p , p ) ; }
Distance : 2

16
Tree	if ( p <= NUMBER_CONSTANT ) { throw new p ( p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new p ( p , STRING_CONSTANT ) ; }
Distance : 3

17
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( mean ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( mean ) ; }
Distance : 3

18
Tree	if ( p <= NUMBER_CONSTANT ) { throw new mean ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new mean ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 4

19
Tree	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( p , false , false , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( p , false , false , false ) ; }
Distance : 7

20
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , false ) ; }
Distance : 5

21
Tree	if ( p <= NUMBER_CONSTANT ) { throw new mean < NotStrictlyPositiveException > ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new mean < NotStrictlyPositiveException > ( p ) ; }
Distance : 5

22
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( p ) ; }
Distance : 4

23
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException < p > ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException < p > ( p ) ; }
Distance : 5

24
Tree	if ( p <= NUMBER_CONSTANT ) { throw new LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ( p , false , false , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ( p , false , false , false ) ; }
Distance : 7

25
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( NotStrictlyPositiveException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( NotStrictlyPositiveException , p ) ; }
Distance : 1

26
Tree	if ( p <= NUMBER_CONSTANT ) { throw new p ( p , false , false , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new p ( p , false , false , false ) ; }
Distance : 7

27
Tree	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( p , false ) ; }
Distance : 3

28
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException ) ; }
Distance : 3

29
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false ) ; }
Distance : 2

30
Tree	if ( p <= NUMBER_CONSTANT ) { throw new mean ( p , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new mean ( p , NUMBER_CONSTANT , false ) ; }
Distance : 5

31
Tree	if ( p <= NUMBER_CONSTANT ) { throw new PoissonDistributionImpl ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new PoissonDistributionImpl ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Distance : 4

32
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Distance : 3

33
Tree	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Distance : 4

34
Tree	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( p , STRING_CONSTANT ) ; }
Distance : 3

35
Tree	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( p ) ; }
Distance : 3

36
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( p , false , false , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( p , false , false , false ) ; }
Distance : 7

37
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( p , false ) ; }
Distance : 3

38
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ; }
Distance : 4

39
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( NotStrictlyPositiveException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( NotStrictlyPositiveException , p ) ; }
Distance : 2

40
Tree	if ( p <= NUMBER_CONSTANT ) { throw new mean ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new mean ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Distance : 3

41
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( NotStrictlyPositiveException , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( NotStrictlyPositiveException , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

42
Tree	if ( p <= NUMBER_CONSTANT ) { throw new FastMath ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new FastMath ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Distance : 4

43
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( mean , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( mean , STRING_CONSTANT ) ; }
Distance : 2

44
Tree	if ( p <= NUMBER_CONSTANT ) { throw new mean ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new mean ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , false ) ; }
Distance : 6

45
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( NotStrictlyPositiveException , p , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( NotStrictlyPositiveException , p , p , false ) ; }
Distance : 5

46
Tree	if ( p <= NUMBER_CONSTANT ) { throw new mean ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new mean ( p , p ) ; }
Distance : 2

47
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( NotStrictlyPositiveException , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( NotStrictlyPositiveException , p , p ) ; }
Distance : 3

48
Tree	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 4

49
Tree	if ( p <= NUMBER_CONSTANT ) { throw new LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ( p , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ( p , NUMBER_CONSTANT , false ) ; }
Distance : 5

50
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( mean ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( mean ) ; }
Distance : 3

51
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( p , STRING_CONSTANT ) ; }
Distance : 3

52
Tree	if ( p <= NUMBER_CONSTANT ) { throw new LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ( p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ( p , false ) ; }
Distance : 3

53
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , MathRuntimeException , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , MathRuntimeException , MathRuntimeException ) ; }
Distance : 7

54
Tree	if ( p <= NUMBER_CONSTANT ) { throw new mean ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new mean ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 3

55
Tree	if ( p <= NUMBER_CONSTANT ) { throw new mean ( p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new mean ( p , STRING_CONSTANT ) ; }
Distance : 3

56
Tree	if ( p <= NUMBER_CONSTANT ) { throw new p ( p , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new p ( p , NUMBER_CONSTANT , false ) ; }
Distance : 5

57
Tree	if ( p <= NUMBER_CONSTANT ) { throw new mean ( NotStrictlyPositiveException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new mean ( NotStrictlyPositiveException ) ; }
Distance : 4

58
Tree	if ( p <= NUMBER_CONSTANT ) { throw new mean ( p , false , false , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new mean ( p , false , false , false ) ; }
Distance : 7

59
Tree	if ( p <= NUMBER_CONSTANT ) { throw new mean ( NotStrictlyPositiveException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new mean ( NotStrictlyPositiveException , p ) ; }
Distance : 2

60
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , mean ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , mean ) ; }
Distance : 4

61
Tree	if ( p <= NUMBER_CONSTANT ) { throw new p ( p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new p ( p , false ) ; }
Distance : 3

62
Tree	if ( p <= NUMBER_CONSTANT ) { throw new mean ( p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new mean ( p , false ) ; }
Distance : 3

63
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Distance : 4

64
Tree	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Distance : 3

65
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( mean , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( mean , p , p ) ; }
Distance : 3

66
Tree	if ( p <= NUMBER_CONSTANT ) { throw new mean ( NotStrictlyPositiveException , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new mean ( NotStrictlyPositiveException , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

67
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( NotStrictlyPositiveException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( NotStrictlyPositiveException ) ; }
Distance : 3

68
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( p , NotStrictlyPositiveException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( p , NotStrictlyPositiveException ) ; }
Distance : 3

69
Tree	if ( p <= NUMBER_CONSTANT ) { throw new FastMath ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new FastMath ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

70
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Distance : 4

71
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , mean ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , mean ) ; }
Distance : 2

72
Tree	if ( p <= NUMBER_CONSTANT ) { throw new mean ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new mean ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Distance : 4

73
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 2

74
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 3

75
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < NotStrictlyPositiveException > ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < NotStrictlyPositiveException > ( p ) ; }
Distance : 4

76
Tree	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , false ) ; }
Distance : 6

77
Tree	if ( p <= NUMBER_CONSTANT ) { throw new FastMath ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new FastMath ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 4

78
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

79
Tree	if ( p <= NUMBER_CONSTANT ) { throw new PoissonDistributionImpl ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new PoissonDistributionImpl ( p ) ; }
Distance : 3

80
Tree	if ( p <= NUMBER_CONSTANT ) { throw new FastMath ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new FastMath ( p ) ; }
Distance : 3

81
Tree	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Distance : 4

82
Tree	if ( p <= NUMBER_CONSTANT ) { throw new PoissonDistributionImpl ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new PoissonDistributionImpl ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

83
Tree	if ( p <= NUMBER_CONSTANT ) { throw new PoissonDistributionImpl ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new PoissonDistributionImpl ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , false ) ; }
Distance : 6

84
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , p , p ) ; }
Distance : 7

85
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , FastMath , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , FastMath , MathRuntimeException ) ; }
Distance : 7

86
Tree	p = new PoissonDistributionImpl <> ( p , p , p ) ;
Code	p = new PoissonDistributionImpl <> ( p , p , p ) ;
Distance : 12

87
Tree	if ( p <= NUMBER_CONSTANT ) { throw new mean ( NotStrictlyPositiveException , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new mean ( NotStrictlyPositiveException , p , p ) ; }
Distance : 4

88
Tree	p = new createIllegalArgumentException <> ( p , p , p ) ;
Code	p = new createIllegalArgumentException <> ( p , p , p ) ;
Distance : 12

89
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( NotStrictlyPositiveException , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( NotStrictlyPositiveException , STRING_CONSTANT ) ; }
Distance : 2

90
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Distance : 2

91
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Distance : 1

92
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

93
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p ) ; }
Distance : 4

94
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , STRING_CONSTANT ) ; }
Distance : 2

95
Tree	if ( p <= NUMBER_CONSTANT ) { throw new PoissonDistributionImpl ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new PoissonDistributionImpl ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 4

96
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ; }
Distance : 4

97
Tree	if ( p <= NUMBER_CONSTANT ) { throw new FastMath ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new FastMath ( p , p ) ; }
Distance : 2

98
Tree	if ( p <= NUMBER_CONSTANT ) { throw new PoissonDistributionImpl ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new PoissonDistributionImpl ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 4

99
Tree	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Distance : 4

100
Tree	if ( p <= NUMBER_CONSTANT ) { throw new PoissonDistributionImpl ( p , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new PoissonDistributionImpl ( p , NUMBER_CONSTANT , false ) ; }
Distance : 5

101
Tree	if ( p <= NUMBER_CONSTANT ) { throw new FastMath ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new FastMath ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 4

102
Tree	if ( p <= NUMBER_CONSTANT ) { throw new FastMath ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new FastMath ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 2

103
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Distance : 3

104
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true , false , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true , false , false ) ; }
Distance : 6

105
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 4

106
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException < NotStrictlyPositiveException > ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException < NotStrictlyPositiveException > ( p ) ; }
Distance : 5

107
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Distance : 2

108
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( p ) ; }
Distance : 3

109
Tree	p = new NotStrictlyPositiveException <> ( p , p , p ) ;
Code	p = new NotStrictlyPositiveException <> ( p , p , p ) ;
Distance : 12

110
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( p , true , false , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( p , true , false , false ) ; }
Distance : 7

111
Tree	if ( p <= NUMBER_CONSTANT ) { throw new mean < p > ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new mean < p > ( p ) ; }
Distance : 5

112
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , MathRuntimeException , p ) ; }
Distance : 7

113
Tree	if ( p <= NUMBER_CONSTANT ) { throw new PoissonDistributionImpl ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new PoissonDistributionImpl ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 2

114
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NotStrictlyPositiveException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NotStrictlyPositiveException ) ; }
Distance : 2

115
Tree	if ( p <= NUMBER_CONSTANT ) { throw new PoissonDistributionImpl ( p , false , false , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new PoissonDistributionImpl ( p , false , false , false ) ; }
Distance : 7

116
Tree	if ( p <= NUMBER_CONSTANT ) { throw new FastMath ( p , false , false , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new FastMath ( p , false , false , false ) ; }
Distance : 7

117
Tree	if ( p <= NUMBER_CONSTANT ) { throw new mean ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new mean ( p ) ; }
Distance : 3

118
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( mean , p , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( mean , p , p , false ) ; }
Distance : 5

119
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( p , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( p , true ) ; }
Distance : 3

120
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Distance : 3

121
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , mean , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , mean , NUMBER_CONSTANT , false ) ; }
Distance : 6

122
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( mean , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( mean , p ) ; }
Distance : 1

123
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( mean , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( mean , STRING_CONSTANT ) ; }
Distance : 2

124
Tree	MathRuntimeException = new NotStrictlyPositiveException <> ( p , p , p ) ;
Code	MathRuntimeException = new NotStrictlyPositiveException <> ( p , p , p ) ;
Distance : 13

125
Tree	if ( p <= NUMBER_CONSTANT ) { throw new FastMath ( p , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new FastMath ( p , NUMBER_CONSTANT , false ) ; }
Distance : 5

126
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NotStrictlyPositiveException , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NotStrictlyPositiveException , NUMBER_CONSTANT , false ) ; }
Distance : 7

127
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , false ) ; }
Distance : 5

128
Tree	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 4

129
Tree	if ( p <= NUMBER_CONSTANT ) { throw new sqrt ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new sqrt ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 4

130
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , PoissonDistributionImpl , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , PoissonDistributionImpl , NUMBER_CONSTANT , false ) ; }
Distance : 6

131
Tree	if ( p <= NUMBER_CONSTANT ) { throw new mean ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NotStrictlyPositiveException , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new mean ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NotStrictlyPositiveException , NUMBER_CONSTANT , false ) ; }
Distance : 7

132
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , p , MathRuntimeException ) ; }
Distance : 7

133
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < FastMath > ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < FastMath > ( p ) ; }
Distance : 4

134
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , p , FastMath ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , p , FastMath ) ; }
Distance : 7

135
Tree	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

136
Tree	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( p , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( p , NUMBER_CONSTANT , false ) ; }
Distance : 5

137
Tree	if ( p <= NUMBER_CONSTANT ) { throw new PoissonDistributionImpl ( p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new PoissonDistributionImpl ( p , false ) ; }
Distance : 3

138
Tree	createIllegalArgumentException = new PoissonDistributionImpl <> ( p , p , p ) ;
Code	createIllegalArgumentException = new PoissonDistributionImpl <> ( p , p , p ) ;
Distance : 13

139
Tree	if ( p <= NUMBER_CONSTANT ) { throw new LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Distance : 4

140
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 3

141
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( NotStrictlyPositiveException , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( NotStrictlyPositiveException , STRING_CONSTANT ) ; }
Distance : 3

142
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , false ) ; }
Distance : 6

143
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , FastMath ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , FastMath ) ; }
Distance : 8

144
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 1

145
Tree	p = new FastMath <> ( p , p , p ) ;
Code	p = new FastMath <> ( p , p , p ) ;
Distance : 12

146
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , mean , NUMBER_CONSTANT , FastMath ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , mean , NUMBER_CONSTANT , FastMath ) ; }
Distance : 8

147
Tree	if ( p <= NUMBER_CONSTANT ) { throw new FastMath ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new FastMath ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Distance : 4

148
Tree	if ( p <= NUMBER_CONSTANT ) { throw new PoissonDistributionImpl ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new PoissonDistributionImpl ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Distance : 4

149
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p ) ; }
Distance : 1

150
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , false ) ; }
Distance : 6

151
Tree	if ( p <= NUMBER_CONSTANT ) { throw new LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 4

152
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p ) ; }
Distance : 7

153
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Distance : 1

154
Tree	if ( p <= NUMBER_CONSTANT ) { throw new FastMath ( p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new FastMath ( p , false ) ; }
Distance : 3

155
Tree	if ( p <= NUMBER_CONSTANT ) { throw new mean ( p , NotStrictlyPositiveException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new mean ( p , NotStrictlyPositiveException ) ; }
Distance : 3

156
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( p , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( p , NUMBER_CONSTANT , false ) ; }
Distance : 5

157
Tree	p = new p <> ( p , p , p ) ;
Code	p = new p <> ( p , p , p ) ;
Distance : 12

158
Tree	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( p , NotStrictlyPositiveException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new createIllegalArgumentException ( p , NotStrictlyPositiveException ) ; }
Distance : 3

159
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , PoissonDistributionImpl ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , PoissonDistributionImpl ) ; }
Distance : 2

160
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( NotStrictlyPositiveException , p , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( NotStrictlyPositiveException , p , p , false ) ; }
Distance : 6

161
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NotStrictlyPositiveException , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NotStrictlyPositiveException , NUMBER_CONSTANT , false ) ; }
Distance : 6

162
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false , false , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false , false , false ) ; }
Distance : 6

163
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( NotStrictlyPositiveException , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( NotStrictlyPositiveException , p , p ) ; }
Distance : 4

164
Tree	if ( p <= NUMBER_CONSTANT ) { throw new mean ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new mean ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

165
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true ) ; }
Distance : 2

166
Tree	if ( p <= NUMBER_CONSTANT ) { throw new p ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new p ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 4

167
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( mean , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( mean , NUMBER_CONSTANT , false ) ; }
Distance : 4

168
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( mean , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( mean , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

169
Tree	if ( p <= NUMBER_CONSTANT ) { throw new LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ( p , p ) ; }
Distance : 2

170
Tree	if ( p <= NUMBER_CONSTANT ) { throw new p ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new p ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Distance : 4

171
Tree	if ( p <= NUMBER_CONSTANT ) { throw new mean ( NotStrictlyPositiveException , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new mean ( NotStrictlyPositiveException , STRING_CONSTANT ) ; }
Distance : 3

172
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , NotStrictlyPositiveException , NUMBER_CONSTANT , FastMath ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , NotStrictlyPositiveException , NUMBER_CONSTANT , FastMath ) ; }
Distance : 8

173
Tree	if ( p <= NUMBER_CONSTANT ) { throw new mean ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new mean ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Distance : 4

174
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , PoissonDistributionImpl , NUMBER_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , PoissonDistributionImpl , NUMBER_CONSTANT , p ) ; }
Distance : 7

175
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 3

176
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p ) ; }
Distance : 8

177
Tree	p = new MathRuntimeException <> ( p , p , p ) ;
Code	p = new MathRuntimeException <> ( p , p , p ) ;
Distance : 12

178
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , FastMath , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , FastMath , p ) ; }
Distance : 7

179
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , NotStrictlyPositiveException , NUMBER_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , NotStrictlyPositiveException , NUMBER_CONSTANT , p ) ; }
Distance : 7

180
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , MathRuntimeException , FastMath ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , MathRuntimeException , FastMath ) ; }
Distance : 7

181
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , mean , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , mean , MathRuntimeException ) ; }
Distance : 7

182
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , mean , NUMBER_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , mean , NUMBER_CONSTANT , p ) ; }
Distance : 7

183
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , MathRuntimeException , mean ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , MathRuntimeException , mean ) ; }
Distance : 7

184
Tree	MathRuntimeException = new PoissonDistributionImpl <> ( p , p , p ) ;
Code	MathRuntimeException = new PoissonDistributionImpl <> ( p , p , p ) ;
Distance : 13

185
Tree	if ( p <= NUMBER_CONSTANT ) { throw new FastMath ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new FastMath ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Distance : 3

186
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p , NUMBER_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p , NUMBER_CONSTANT , p ) ; }
Distance : 7

187
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Distance : 2

188
Tree	if ( p <= NUMBER_CONSTANT ) { throw new mean ( NotStrictlyPositiveException , p , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new mean ( NotStrictlyPositiveException , p , p , false ) ; }
Distance : 6

189
Tree	if ( p <= NUMBER_CONSTANT ) { throw new PoissonDistributionImpl ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new PoissonDistributionImpl ( p , p ) ; }
Distance : 2

190
Tree	if ( p <= NUMBER_CONSTANT ) { throw new p ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new p ( p , p ) ; }
Distance : 2

191
Tree	MathRuntimeException = new MathRuntimeException <> ( p , p , p ) ;
Code	MathRuntimeException = new MathRuntimeException <> ( p , p , p ) ;
Distance : 13

192
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException < FastMath > ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException < FastMath > ( p ) ; }
Distance : 5

193
Tree	if ( p <= NUMBER_CONSTANT ) { throw new mean ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new mean ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p ) ; }
Distance : 8

194
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( NotStrictlyPositiveException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( NotStrictlyPositiveException ) ; }
Distance : 4

195
Tree	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new MathRuntimeException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , false ) ; }
Distance : 7

196
Tree	if ( p <= NUMBER_CONSTANT ) { throw new mean ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new mean ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , false ) ; }
Distance : 7

197
Tree	if ( p <= NUMBER_CONSTANT ) { throw new PoissonDistributionImpl ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new PoissonDistributionImpl ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Distance : 3

198
Tree	if ( p <= NUMBER_CONSTANT ) { throw new FastMath ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new FastMath ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , false ) ; }
Distance : 6

199
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( NotStrictlyPositiveException , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( NotStrictlyPositiveException , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , false ) ; }
Distance : 6

========================================================================


========================================================================
Example Number: 60
Parent Code is: 
{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (36 (214{val=(}) (27 (800{val=a}) (252{val=<=}) (800{val=b})) (215{val=)})) (233{val=?}) (800{val=b}) (226{val=:}) (36 (214{val=(}) (16 (32 (800{val=Float}) (235{val=.}) (802{val=isNaN}) (214{val=(}) (27 (800{val=a}) (200{val=+}) (800{val=b})) (215{val=)})) (233{val=?}) (40{val=Float.NaN}) (226{val=:}) (800{val=b})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (36 (214{val=(}) (27 (800{val=a}) (252{val=<=}) (800{val=b})) (215{val=)})) (233{val=?}) (800{val=b}) (226{val=:}) (36 (214{val=(}) (16 (32 (800{val=Float}) (235{val=.}) (802{val=isNaN}) (214{val=(}) (27 (800{val=a}) (200{val=+}) (800{val=b})) (215{val=)})) (233{val=?}) (40{val=Float.NaN}) (226{val=:}) (800{val=a})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/59/parent/src_main_java_org_apache_commons_math_util_FastMath.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 30
Correct
========================================================================
True

0
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : b ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : b ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

1
Tree	{ return a == NUMBER_CONSTANT ? false : max ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : max ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

2
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : b ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : b ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

3
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : b ( ( int ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : b ( ( int ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 17

4
Tree	{ return a == NUMBER_CONSTANT ? false : a ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : a ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

5
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : b ( ( int ) b ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : b ( ( int ) b ( ( a ) b , b ) , b ) ; }
Distance : 17

6
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

7
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : a ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : a ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

8
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

9
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : max ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : max ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

10
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Distance : 2

11
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Distance : 1

12
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : b ( ( double ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : b ( ( double ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

13
Tree	{ return ( a <= a ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= a ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 2

14
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? isNaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? isNaN : b ) ; }
Distance : 2

15
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 1

16
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + isNaN ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + isNaN ) ? Float.NaN : b ) ; }
Distance : 2

17
Tree	{ return a == NUMBER_CONSTANT ? false : max ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : max ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

18
Tree	{ return ( a <= b ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 2

19
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : b ( ( char ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : b ( ( char ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

20
Tree	{ return a == NUMBER_CONSTANT ? false : b ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : b ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

21
Tree	{ return a == NUMBER_CONSTANT ? false : max ( ( int ) b ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : max ( ( int ) b ( ( a ) b , b ) , b ) ; }
Distance : 17

22
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

23
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) b ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) b ( ( a ) b , b ) , b ) ; }
Distance : 17

24
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 0

25
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : b ( ( int ) isNaN ( ( a ) b , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : b ( ( int ) isNaN ( ( a ) b , a ) , b ) ; }
Distance : 16

26
Tree	{ return a == NUMBER_CONSTANT ? false : max ( ( double ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : max ( ( double ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

27
Tree	{ return ( a <= b ) ? b : ( Float . b ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( Float . b ( a + b ) ? Float.NaN : b ) ; }
Distance : 2

28
Tree	{ return ( a <= b ) ? a : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? a : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Distance : 3

29
Tree	{ return a == NUMBER_CONSTANT ? false : max ( ( int ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : max ( ( int ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 17

========================================================================


========================================================================
Example Number: 61
Parent Code is: 
return fit ( new Gaussian.Parametric () , guess ) ;
-------------------------------------------------------------------------------
Child code is: 
return fit ( guess ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=fit}) (214{val=(}) (14 (304{val=new}) (43 (40{val=Gaussian.Parametric})) (216{val=()})) (234{val=,}) (800{val=guess}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=fit}) (214{val=(}) (800{val=guess}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/58/parent/src_main_java_org_apache_commons_math_optimization_fitting_GaussianFitter.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return fit . fit ( NUMBER_CONSTANT , fit . fit () , fit ) ;
Code	return fit . fit ( NUMBER_CONSTANT , fit . fit () , fit ) ;
Distance : 10

1
Tree	return fit ( STRING_CONSTANT , fit . fit () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit ( STRING_CONSTANT , fit . fit () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 11

2
Tree	return fit ( STRING_CONSTANT , fit . fit () , return ( NUMBER_CONSTANT ) ) ;
Code	return fit ( STRING_CONSTANT , fit . fit () , return ( NUMBER_CONSTANT ) ) ;
Distance : 11

3
Tree	return fit ( new fit < guess > ( fit ) , fit ) ;
Code	return fit ( new fit < guess > ( fit ) , fit ) ;
Distance : 9

4
Tree	return fit . fit ( NUMBER_CONSTANT , fit [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , fit [ NUMBER_CONSTANT ] ) ;
Distance : 8

5
Tree	return fit . fit ( NUMBER_CONSTANT , fit [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , fit [ NUMBER_CONSTANT ] ) ;
Distance : 8

6
Tree	return fit ( super(); ) ;
Code	return fit ( super(); ) ;
Distance : 1

7
Tree	return fit ( default: ) ;
Code	return fit ( default: ) ;
Distance : 1

8
Tree	return fit . fit ( NUMBER_CONSTANT , guess [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , guess [ NUMBER_CONSTANT ] ) ;
Distance : 7

9
Tree	return fit . fit ( NUMBER_CONSTANT , guess [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , guess [ NUMBER_CONSTANT ] ) ;
Distance : 7

10
Tree	return fit . fit ( this . guess ) ;
Code	return fit . fit ( this . guess ) ;
Distance : 4

11
Tree	return fit . fit ( this . guess ) ;
Code	return fit . fit ( this . guess ) ;
Distance : 4

12
Tree	return fit ( return; ) ;
Code	return fit ( return; ) ;
Distance : 1

13
Tree	return fit . fit ( this . fit ) ;
Code	return fit . fit ( this . fit ) ;
Distance : 5

14
Tree	return fit . fit ( this . fit ) ;
Code	return fit . fit ( this . fit ) ;
Distance : 5

15
Tree	return fit . fit () . fit . fit ( CHAR_CONS ) ;
Code	return fit . fit () . fit . fit ( CHAR_CONS ) ;
Distance : 8

16
Tree	return fit . fit () . guess . fit ( CHAR_CONS ) ;
Code	return fit . fit () . guess . fit ( CHAR_CONS ) ;
Distance : 8

17
Tree	return fit . fit ( this . guess . fit ) ;
Code	return fit . fit ( this . guess . fit ) ;
Distance : 6

18
Tree	return fit . fit () . fit ( fit , false , fit ) ;
Code	return fit . fit () . fit ( fit , false , fit ) ;
Distance : 10

19
Tree	return fit . fit () . fit . ( ( CHAR_CONS ) ;
Code	return fit . fit () . fit . ( ( CHAR_CONS ) ;
Distance : 8

20
Tree	return fit . fit ( this . guess . guess ) ;
Code	return fit . fit ( this . guess . guess ) ;
Distance : 6

21
Tree	return fit ( break; ) ;
Code	return fit ( break; ) ;
Distance : 1

22
Tree	return fit . fit ( fit . fit () . fit ) ;
Code	return fit . fit ( fit . fit () . fit ) ;
Distance : 8

23
Tree	return fit ( fit . Gaussian.Parametric () , STRING_CONSTANT , fit ) ;
Code	return fit ( fit . Gaussian.Parametric () , STRING_CONSTANT , fit ) ;
Distance : 8

24
Tree	return fit . fit ( this . fit . fit ) ;
Code	return fit . fit ( this . fit . fit ) ;
Distance : 7

25
Tree	return fit ( fit . Gaussian.Parametric () , STRING_CONSTANT , guess ) ;
Code	return fit ( fit . Gaussian.Parametric () , STRING_CONSTANT , guess ) ;
Distance : 7

26
Tree	return fit ( new Gaussian.Parametric <> ( guess ) , fit ) ;
Code	return fit ( new Gaussian.Parametric <> ( guess ) , fit ) ;
Distance : 7

27
Tree	return fit . fit () . guess . ( ( CHAR_CONS ) ;
Code	return fit . fit () . guess . ( ( CHAR_CONS ) ;
Distance : 8

28
Tree	return fit . fit ( fit . Gaussian.Parametric () . fit ) ;
Code	return fit . fit ( fit . Gaussian.Parametric () . fit ) ;
Distance : 8

29
Tree	return fit . fit ( NUMBER_CONSTANT , fit . fit () , guess ) ;
Code	return fit . fit ( NUMBER_CONSTANT , fit . fit () , guess ) ;
Distance : 9

30
Tree	return fit ( new Gaussian.Parametric < fit > ( fit ) , fit ) ;
Code	return fit ( new Gaussian.Parametric < fit > ( fit ) , fit ) ;
Distance : 10

31
Tree	return fit . fit ( NUMBER_CONSTANT , guess [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , guess [ NUMBER_CONSTANT ] ) ;
Distance : 7

32
Tree	return fit ( new fit < fit > ( fit ) , guess ) ;
Code	return fit ( new fit < fit > ( fit ) , guess ) ;
Distance : 9

33
Tree	return fit ( new fit < guess > ( guess ) , fit ) ;
Code	return fit ( new fit < guess > ( guess ) , fit ) ;
Distance : 9

34
Tree	return fit . fit ( this . guess ) ;
Code	return fit . fit ( this . guess ) ;
Distance : 4

35
Tree	return fit ( fit . fit () , STRING_CONSTANT , fit ) ;
Code	return fit ( fit . fit () , STRING_CONSTANT , fit ) ;
Distance : 8

36
Tree	return fit ( fit . fit () , STRING_CONSTANT , guess ) ;
Code	return fit ( fit . fit () , STRING_CONSTANT , guess ) ;
Distance : 7

37
Tree	return fit . fit () . fit ( fit , false , fit ) ;
Code	return fit . fit () . fit ( fit , false , fit ) ;
Distance : 10

38
Tree	return fit ( new fit <> ( fit ) , guess ) ;
Code	return fit ( new fit <> ( fit ) , guess ) ;
Distance : 7

39
Tree	return fit ( null ) ;
Code	return fit ( null ) ;
Distance : 1

40
Tree	return fit ( null ) ;
Code	return fit ( null ) ;
Distance : 1

41
Tree	return fit . fit ( Gaussian.Parametric , fit , ) , new fit < fit > ( fit ) ) ;
Code	return fit . fit ( Gaussian.Parametric , fit , ) , new fit < fit > ( fit ) ) ;
Distance : 16

42
Tree	return fit ( new Gaussian.Parametric < fit > ( new ) , fit ) ;
Code	return fit ( new Gaussian.Parametric < fit > ( new ) , fit ) ;
Distance : 10

43
Tree	return fit . fit ( fit , fit , fit , new fit < fit > ( guess ) ) ;
Code	return fit . fit ( fit , fit , fit , new fit < fit > ( guess ) ) ;
Distance : 15

44
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ;
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ;
Distance : 9

45
Tree	return fit ( Gaussian.Parametric . fit () , STRING_CONSTANT , fit ) ;
Code	return fit ( Gaussian.Parametric . fit () , STRING_CONSTANT , fit ) ;
Distance : 8

46
Tree	return fit . fit ( fit , guess , ; , new fit < fit > ( fit ) ) ;
Code	return fit . fit ( fit , guess , ; , new fit < fit > ( fit ) ) ;
Distance : 15

47
Tree	return fit . fit ( fit . fit () . fit ) ;
Code	return fit . fit ( fit . fit () . fit ) ;
Distance : 8

48
Tree	return fit . fit ( fit , fit , fit , new fit < guess > ( fit ) ) ;
Code	return fit . fit ( fit , fit , fit , new fit < guess > ( fit ) ) ;
Distance : 15

49
Tree	return fit . fit ( Gaussian.Parametric , fit , fit , new fit < fit > ( fit ) ) ;
Code	return fit . fit ( Gaussian.Parametric , fit , fit , new fit < fit > ( fit ) ) ;
Distance : 16

50
Tree	return fit ( new Gaussian.Parametric < guess > ( guess ) , fit ) ;
Code	return fit ( new Gaussian.Parametric < guess > ( guess ) , fit ) ;
Distance : 9

51
Tree	return fit . fit ( fit , fit , ; , new fit < guess > ( guess ) ) ;
Code	return fit . fit ( fit , fit , ; , new fit < guess > ( guess ) ) ;
Distance : 15

52
Tree	return fit . fit ( fit . fit () . fit ) ;
Code	return fit . fit ( fit . fit () . fit ) ;
Distance : 8

53
Tree	return fit . fit ( fit . fit () . guess ) ;
Code	return fit . fit ( fit . fit () . guess ) ;
Distance : 7

54
Tree	return fit ( Gaussian.Parametric . fit () , STRING_CONSTANT , guess ) ;
Code	return fit ( Gaussian.Parametric . fit () , STRING_CONSTANT , guess ) ;
Distance : 7

55
Tree	return fit . fit ( NUMBER_CONSTANT , fit [ NUMBER_CONSTANT ] ) ; Math
Code	return fit . fit ( NUMBER_CONSTANT , fit [ NUMBER_CONSTANT ] ) ; Math
Distance : 9

56
Tree	return fit . fit ( Gaussian.Parametric , fit . fit () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( Gaussian.Parametric , fit . fit () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 13

57
Tree	return fit . fit ( this . guess ) ; Math
Code	return fit . fit ( this . guess ) ; Math
Distance : 5

58
Tree	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 12

59
Tree	return fit . fit ( this . guess ) ; wanted
Code	return fit . fit ( this . guess ) ; wanted
Distance : 5

60
Tree	return fit . fit ( NUMBER_CONSTANT , fit [ NUMBER_CONSTANT ] ) ; wanted
Code	return fit . fit ( NUMBER_CONSTANT , fit [ NUMBER_CONSTANT ] ) ; wanted
Distance : 9

61
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , fit . ; () ) ;
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , fit . ; () ) ;
Distance : 11

62
Tree	return fit . fit ( fit , STRING_CONSTANT , fit , guess . ; () ) ;
Code	return fit . fit ( fit , STRING_CONSTANT , fit , guess . ; () ) ;
Distance : 11

63
Tree	return fit ( new fit < fit > ( new ) , guess ) ;
Code	return fit ( new fit < fit > ( new ) , guess ) ;
Distance : 9

64
Tree	return fit . fit ( fit , fit . fit () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( fit , fit . fit () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 13

65
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , guess . ) () ) ;
Code	return fit . fit ( fit , STRING_CONSTANT , guess , guess . ) () ) ;
Distance : 11

66
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , fit . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , fit . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Distance : 15

67
Tree	return fit ( new Gaussian.Parametric < guess > ( fit ) , fit ) ;
Code	return fit ( new Gaussian.Parametric < guess > ( fit ) , fit ) ;
Distance : 9

68
Tree	return fit ( new fit < fit > ( fit ) , guess ) ;
Code	return fit ( new fit < fit > ( fit ) , guess ) ;
Distance : 9

69
Tree	return fit . fit ( STRING_CONSTANT , fit . return () , guess , ) ) ;
Code	return fit . fit ( STRING_CONSTANT , fit . return () , guess , ) ) ;
Distance : 11

70
Tree	return fit . fit ( STRING_CONSTANT , guess . return () , guess , ) ) ;
Code	return fit . fit ( STRING_CONSTANT , guess . return () , guess , ) ) ;
Distance : 11

71
Tree	return fit ( fit , guess , ; . return () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit ( fit , guess , ; . return () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 12

72
Tree	return fit . fit ( this . fit ) ;
Code	return fit . fit ( this . fit ) ;
Distance : 5

73
Tree	return fit ( fit , fit , ) . ; () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit ( fit , fit , ) . ; () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 13

74
Tree	return fit . fit ( this . fit . guess ) ;
Code	return fit . fit ( this . fit . guess ) ;
Distance : 6

75
Tree	return fit . fit () . fit ( Gaussian.Parametric , false , fit ) ;
Code	return fit . fit () . fit ( Gaussian.Parametric , false , fit ) ;
Distance : 10

76
Tree	return fit . fit ( fit , STRING_CONSTANT , fit , fit . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( fit , STRING_CONSTANT , fit , fit . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Distance : 16

77
Tree	return fit . fit ( STRING_CONSTANT , fit . ) () , fit , ) ) ;
Code	return fit . fit ( STRING_CONSTANT , fit . ) () , fit , ) ) ;
Distance : 12

78
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , fit , fit . fit () ) ;
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , fit , fit . fit () ) ;
Distance : 12

79
Tree	return fit . fit ( fit . Gaussian.Parametric () . guess ) ;
Code	return fit . fit ( fit . Gaussian.Parametric () . guess ) ;
Distance : 7

80
Tree	return fit ( Gaussian.Parametric , fit , ) . fit () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit ( Gaussian.Parametric , fit , ) . fit () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 13

81
Tree	return fit . fit ( NUMBER_CONSTANT , guess . ; () , fit ) ;
Code	return fit . fit ( NUMBER_CONSTANT , guess . ; () , fit ) ;
Distance : 9

82
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , fit . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( fit , STRING_CONSTANT , guess , fit . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Distance : 15

83
Tree	return fit ( Gaussian.Parametric , fit , fit . ; () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit ( Gaussian.Parametric , fit , fit . ; () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 13

84
Tree	return fit . fit ( NUMBER_CONSTANT , fit [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , fit [ NUMBER_CONSTANT ] ) ;
Distance : 8

85
Tree	return fit ( super(); ) ;
Code	return fit ( super(); ) ;
Distance : 1

86
Tree	return fit . fit ( Gaussian.Parametric , guess . ; () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( Gaussian.Parametric , guess . ; () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 12

87
Tree	return fit ( new Gaussian.Parametric < guess > ( guess ) , fit ) ;
Code	return fit ( new Gaussian.Parametric < guess > ( guess ) , fit ) ;
Distance : 9

88
Tree	return fit . fit ( NUMBER_CONSTANT , guess [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , guess [ NUMBER_CONSTANT ] ) ;
Distance : 7

89
Tree	return fit . fit ( this . guess ) ;
Code	return fit . fit ( this . guess ) ;
Distance : 4

90
Tree	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ;
Code	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ;
Distance : 9

91
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , fit . fit () ) ;
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , fit . fit () ) ;
Distance : 11

92
Tree	return fit . fit ( STRING_CONSTANT , guess . return () , fit , ) ) ;
Code	return fit . fit ( STRING_CONSTANT , guess . return () , fit , ) ) ;
Distance : 11

93
Tree	return fit ( fit , guess , ) . fit () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit ( fit , guess , ) . fit () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 12

94
Tree	return fit . fit ( Gaussian.Parametric . fit () . fit ) ;
Code	return fit . fit ( Gaussian.Parametric . fit () . fit ) ;
Distance : 8

95
Tree	return fit ( new fit < fit > ( guess ) , guess ) ;
Code	return fit ( new fit < fit > ( guess ) , guess ) ;
Distance : 9

96
Tree	return fit ( new fit <> ( guess ) , guess ) ;
Code	return fit ( new fit <> ( guess ) , guess ) ;
Distance : 7

97
Tree	return fit ( STRING_CONSTANT , fit . ) () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit ( STRING_CONSTANT , fit . ) () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 11

98
Tree	return fit ( fit , guess , fit . ) () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit ( fit , guess , fit . ) () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 12

99
Tree	return fit ( new . Gaussian.Parametric () , STRING_CONSTANT , fit ) ;
Code	return fit ( new . Gaussian.Parametric () , STRING_CONSTANT , fit ) ;
Distance : 8

100
Tree	return fit . fit ( STRING_CONSTANT , fit . return () , fit , fit ) ;
Code	return fit . fit ( STRING_CONSTANT , fit . return () , fit , fit ) ;
Distance : 12

101
Tree	return fit ( Gaussian.Parametric . Gaussian.Parametric () , STRING_CONSTANT , guess ) ;
Code	return fit ( Gaussian.Parametric . Gaussian.Parametric () , STRING_CONSTANT , guess ) ;
Distance : 7

102
Tree	return fit ( return; ) ;
Code	return fit ( return; ) ;
Distance : 1

103
Tree	return fit . fit ( this . fit ) ;
Code	return fit . fit ( this . fit ) ;
Distance : 5

104
Tree	return fit ( break; ) ;
Code	return fit ( break; ) ;
Distance : 1

105
Tree	return fit . fit ( STRING_CONSTANT , guess . ) () , fit , fit ) ;
Code	return fit . fit ( STRING_CONSTANT , guess . ) () , fit , fit ) ;
Distance : 11

106
Tree	return fit ( continue; ) ;
Code	return fit ( continue; ) ;
Distance : 1

107
Tree	return fit . fit ( fit , STRING_CONSTANT , fit , fit . ; () ) ;
Code	return fit . fit ( fit , STRING_CONSTANT , fit , fit . ; () ) ;
Distance : 12

108
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , fit . ) () ) ;
Code	return fit . fit ( fit , STRING_CONSTANT , guess , fit . ) () ) ;
Distance : 11

109
Tree	return fit . fit ( Gaussian.Parametric . Gaussian.Parametric () . fit ) ;
Code	return fit . fit ( Gaussian.Parametric . Gaussian.Parametric () . fit ) ;
Distance : 8

110
Tree	return fit ( STRING_CONSTANT , guess . ( () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit ( STRING_CONSTANT , guess . ( () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 10

111
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 12

112
Tree	return fit . fit ( this . guess . fit ) ;
Code	return fit . fit ( this . guess . fit ) ;
Distance : 6

113
Tree	return fit ( fit , fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit ( fit , fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 12

114
Tree	return fit . fit () . fit ( fit , false , fit ) ;
Code	return fit . fit () . fit ( fit , false , fit ) ;
Distance : 10

115
Tree	return fit . fit ( NUMBER_CONSTANT , fit . ( () , fit ) ;
Code	return fit . fit ( NUMBER_CONSTANT , fit . ( () , fit ) ;
Distance : 10

116
Tree	return fit . fit ( this . guess . guess ) ;
Code	return fit . fit ( this . guess . guess ) ;
Distance : 6

117
Tree	return fit . fit () . ( ( Gaussian.Parametric , false , fit ) ;
Code	return fit . fit () . ( ( Gaussian.Parametric , false , fit ) ;
Distance : 10

118
Tree	return fit . fit ( fit , STRING_CONSTANT , fit , fit . fit () ) ;
Code	return fit . fit ( fit , STRING_CONSTANT , fit , fit . fit () ) ;
Distance : 12

119
Tree	return fit . fit ( this . guess . guess ) ;
Code	return fit . fit ( this . guess . guess ) ;
Distance : 6

120
Tree	return fit ( fit , fit , fit . ) () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit ( fit , fit , fit . ) () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 13

121
Tree	return fit . fit ( this . fit . fit ) ;
Code	return fit . fit ( this . fit . fit ) ;
Distance : 7

122
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , fit , fit . ; ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , fit , fit . ; ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Distance : 16

123
Tree	return fit . fit ( fit , fit . ; () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( fit , fit . ; () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 13

124
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , fit . ; ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , fit . ; ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Distance : 15

125
Tree	return fit ( fit , fit , fit . fit () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit ( fit , fit , fit . fit () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 13

126
Tree	return fit . fit ( STRING_CONSTANT , fit . fit () , fit , ) ) ;
Code	return fit . fit ( STRING_CONSTANT , fit . fit () , fit , ) ) ;
Distance : 12

127
Tree	return fit . fit ( fit , fit . ; () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( fit , fit . ; () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 13

128
Tree	return fit . fit ( STRING_CONSTANT , fit . ) () , guess , fit ) ;
Code	return fit . fit ( STRING_CONSTANT , fit . ) () , guess , fit ) ;
Distance : 11

129
Tree	return fit ( STRING_CONSTANT , fit . ) () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit ( STRING_CONSTANT , fit . ) () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 11

130
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , fit . fit () ) ;
Code	return fit . fit ( fit , STRING_CONSTANT , guess , fit . fit () ) ;
Distance : 11

131
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , fit , ) ) ;
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , fit , ) ) ;
Distance : 11

132
Tree	return this . fit . fit ( new . fit () ) ;
Code	return this . fit . fit ( new . fit () ) ;
Distance : 8

133
Tree	return this . fit . fit ( new . Gaussian.Parametric () ) ;
Code	return this . fit . fit ( new . Gaussian.Parametric () ) ;
Distance : 8

134
Tree	return fit ( new fit < fit > ( fit ) , fit ) ;
Code	return fit ( new fit < fit > ( fit ) , fit ) ;
Distance : 10

135
Tree	return fit . fit ( STRING_CONSTANT , guess . ) () , guess , fit ) ;
Code	return fit . fit ( STRING_CONSTANT , guess . ) () , guess , fit ) ;
Distance : 11

136
Tree	return fit . fit ( fit , fit , ; , new fit < fit > ( fit ) ) ;
Code	return fit . fit ( fit , fit , ; , new fit < fit > ( fit ) ) ;
Distance : 16

137
Tree	return fit . fit ( Gaussian.Parametric , fit . ) () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( Gaussian.Parametric , fit . ) () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 13

138
Tree	return fit . fit () . fit ( fit , false , guess ) ;
Code	return fit . fit () . fit ( fit , false , guess ) ;
Distance : 9

139
Tree	return fit . fit ( fit , fit , fit , new fit < fit > ( fit ) ) ;
Code	return fit . fit ( fit , fit , fit , new fit < fit > ( fit ) ) ;
Distance : 16

140
Tree	return fit . fit () . fit . fit ( false ) ;
Code	return fit . fit () . fit . fit ( false ) ;
Distance : 8

141
Tree	return fit ( STRING_CONSTANT , fit . return () , return ( NUMBER_CONSTANT ) ) ;
Code	return fit ( STRING_CONSTANT , fit . return () , return ( NUMBER_CONSTANT ) ) ;
Distance : 11

142
Tree	return fit . fit ( NUMBER_CONSTANT , fit . ; () , fit ) ;
Code	return fit . fit ( NUMBER_CONSTANT , fit . ; () , fit ) ;
Distance : 10

143
Tree	return fit . fit ( fit , guess . ) () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( fit , guess . ) () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 12

144
Tree	return fit ( new fit < fit > ( fit ) , fit ) ;
Code	return fit ( new fit < fit > ( fit ) , fit ) ;
Distance : 10

145
Tree	return fit . fit ( fit , fit , ) , new fit < fit > ( guess ) ) ;
Code	return fit . fit ( fit , fit , ) , new fit < fit > ( guess ) ) ;
Distance : 15

146
Tree	return fit ( STRING_CONSTANT , guess . ( () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit ( STRING_CONSTANT , guess . ( () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 10

147
Tree	return fit . fit () . fit . fit ( super ) ;
Code	return fit . fit () . fit . fit ( super ) ;
Distance : 8

148
Tree	return fit ( new fit <> ( fit ) , fit ) ;
Code	return fit ( new fit <> ( fit ) , fit ) ;
Distance : 8

149
Tree	return fit . fit ( fit , fit , ) , new fit < guess > ( fit ) ) ;
Code	return fit . fit ( fit , fit , ) , new fit < guess > ( fit ) ) ;
Distance : 15

150
Tree	return fit ( STRING_CONSTANT , guess . return () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit ( STRING_CONSTANT , guess . return () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 10

151
Tree	return fit . fit () . guess . fit ( false ) ;
Code	return fit . fit () . guess . fit ( false ) ;
Distance : 8

152
Tree	return fit . fit ( NUMBER_CONSTANT , fit [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , fit [ NUMBER_CONSTANT ] ) ;
Distance : 8

153
Tree	return fit . fit ( NUMBER_CONSTANT , fit . ) () , fit ) ;
Code	return fit . fit ( NUMBER_CONSTANT , fit . ) () , fit ) ;
Distance : 10

154
Tree	return fit ( new Gaussian.Parametric <> ( fit ) , guess ) ;
Code	return fit ( new Gaussian.Parametric <> ( fit ) , guess ) ;
Distance : 7

155
Tree	return fit . fit ( NUMBER_CONSTANT , fit . ; () , guess ) ;
Code	return fit . fit ( NUMBER_CONSTANT , fit . ; () , guess ) ;
Distance : 9

156
Tree	return fit . fit ( Gaussian.Parametric . fit () . guess ) ;
Code	return fit . fit ( Gaussian.Parametric . fit () . guess ) ;
Distance : 7

157
Tree	return fit . fit ( fit , STRING_CONSTANT , fit , guess . ) ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( fit , STRING_CONSTANT , fit , guess . ) ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Distance : 15

158
Tree	return fit . fit () . fit ( fit , false , guess ) ;
Code	return fit . fit () . fit ( fit , false , guess ) ;
Distance : 9

159
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , ; . ; ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( fit , STRING_CONSTANT , guess , ; . ; ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Distance : 15

160
Tree	return fit . fit ( NUMBER_CONSTANT , guess . ) () , guess ) ;
Code	return fit . fit ( NUMBER_CONSTANT , guess . ) () , guess ) ;
Distance : 9

161
Tree	return fit . fit ( Gaussian.Parametric . Gaussian.Parametric () . guess ) ;
Code	return fit . fit ( Gaussian.Parametric . Gaussian.Parametric () . guess ) ;
Distance : 7

162
Tree	return fit ( new fit < fit > ( guess ) , fit ) ;
Code	return fit ( new fit < fit > ( guess ) , fit ) ;
Distance : 9

163
Tree	return this . fit . fit ( new . fit () ) ;
Code	return this . fit . fit ( new . fit () ) ;
Distance : 8

164
Tree	return this . fit . fit ( Gaussian.Parametric . Gaussian.Parametric () ) ;
Code	return this . fit . fit ( Gaussian.Parametric . Gaussian.Parametric () ) ;
Distance : 8

165
Tree	return fit . fit ( fit , STRING_CONSTANT , fit , fit . ; ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( fit , STRING_CONSTANT , fit , fit . ; ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Distance : 16

166
Tree	return fit ( Gaussian.Parametric , fit , ) . ; () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit ( Gaussian.Parametric , fit , ) . ; () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 13

167
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , fit , fit . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , fit , fit . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Distance : 16

168
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , fit , fit . ; () ) ;
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , fit , fit . ; () ) ;
Distance : 12

169
Tree	return this . fit . fit ( fit . fit () ) ;
Code	return this . fit . fit ( fit . fit () ) ;
Distance : 8

170
Tree	return fit ( new Gaussian.Parametric <> ( guess ) , guess ) ;
Code	return fit ( new Gaussian.Parametric <> ( guess ) , guess ) ;
Distance : 7

171
Tree	return fit . fit ( this . fit . fit ) ;
Code	return fit . fit ( this . fit . fit ) ;
Distance : 7

172
Tree	return this . fit . fit ( fit . fit () ) ;
Code	return this . fit . fit ( fit . fit () ) ;
Distance : 8

173
Tree	return fit . fit () . fit ( fit , false , fit ) ;
Code	return fit . fit () . fit ( fit , false , fit ) ;
Distance : 10

174
Tree	return this . fit . fit ( new . fit () ) ;
Code	return this . fit . fit ( new . fit () ) ;
Distance : 8

175
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , fit . ; ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( fit , STRING_CONSTANT , guess , fit . ; ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Distance : 15

176
Tree	return this . fit . fit ( fit . Gaussian.Parametric () ) ;
Code	return this . fit . fit ( fit . Gaussian.Parametric () ) ;
Distance : 8

177
Tree	return fit . fit ( this . guess . fit ) ;
Code	return fit . fit ( this . guess . fit ) ;
Distance : 6

178
Tree	return this . fit . fit ( new . Gaussian.Parametric () ) ;
Code	return this . fit . fit ( new . Gaussian.Parametric () ) ;
Distance : 8

179
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 10

180
Tree	return fit ( STRING_CONSTANT , guess . fit () , return ( NUMBER_CONSTANT ) ) ;
Code	return fit ( STRING_CONSTANT , guess . fit () , return ( NUMBER_CONSTANT ) ) ;
Distance : 10

181
Tree	return fit . fit () . guess . fit ( super ) ;
Code	return fit . fit () . guess . fit ( super ) ;
Distance : 8

182
Tree	return fit ( new Gaussian.Parametric < fit > ( guess ) , fit ) ;
Code	return fit ( new Gaussian.Parametric < fit > ( guess ) , fit ) ;
Distance : 9

183
Tree	return fit ( new fit < guess > ( fit ) , fit ) ;
Code	return fit ( new fit < guess > ( fit ) , fit ) ;
Distance : 9

184
Tree	return fit . fit ( fit , fit . fit () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( fit , fit . fit () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 13

185
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , fit ) ;
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , fit ) ;
Distance : 9

186
Tree	return this . fit . fit ( fit . Gaussian.Parametric () ) ;
Code	return this . fit . fit ( fit . Gaussian.Parametric () ) ;
Distance : 8

187
Tree	return fit . fit () . fit . fit ( true ) ;
Code	return fit . fit () . fit . fit ( true ) ;
Distance : 8

188
Tree	return fit ( new Gaussian.Parametric < fit > ( fit ) , fit ) ;
Code	return fit ( new Gaussian.Parametric < fit > ( fit ) , fit ) ;
Distance : 10

189
Tree	return fit ( new fit < guess > ( guess ) , fit ) ;
Code	return fit ( new fit < guess > ( guess ) , fit ) ;
Distance : 9

190
Tree	return fit ( new fit <> ( guess ) , fit ) ;
Code	return fit ( new fit <> ( guess ) , fit ) ;
Distance : 7

191
Tree	return fit . fit () . fit . fit ( ClassFileVersion.JAVA_V8 ) ;
Code	return fit . fit () . fit . fit ( ClassFileVersion.JAVA_V8 ) ;
Distance : 8

192
Tree	return fit ( new fit <> ( guess ) , fit ) ;
Code	return fit ( new fit <> ( guess ) , fit ) ;
Distance : 7

193
Tree	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ;
Code	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ;
Distance : 9

194
Tree	return fit ( new Gaussian.Parametric < guess > ( fit ) , fit ) ;
Code	return fit ( new Gaussian.Parametric < guess > ( fit ) , fit ) ;
Distance : 9

195
Tree	return fit ( new fit < fit > ( guess ) , fit ) ;
Code	return fit ( new fit < fit > ( guess ) , fit ) ;
Distance : 9

196
Tree	return fit ( fit . fit () , STRING_CONSTANT , fit ) ;
Code	return fit ( fit . fit () , STRING_CONSTANT , fit ) ;
Distance : 8

197
Tree	return fit ( new fit <> ( fit ) , fit ) ;
Code	return fit ( new fit <> ( fit ) , fit ) ;
Distance : 8

198
Tree	return fit ( fit . fit () , STRING_CONSTANT , guess ) ;
Code	return fit ( fit . fit () , STRING_CONSTANT , guess ) ;
Distance : 7

199
Tree	return fit ( new Gaussian.Parametric <> ( fit ) , fit ) ;
Code	return fit ( new Gaussian.Parametric <> ( fit ) , fit ) ;
Distance : 8

========================================================================


========================================================================
Example Number: 62
Parent Code is: 
int sum = NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Child code is: 
double sum = NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=sum}) (204{val==}) (34{val=NUMBER_CONSTANT})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=double}) (59 (800{val=sum}) (204{val==}) (34{val=NUMBER_CONSTANT})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/57/parent/src_main_java_org_apache_commons_math_stat_clustering_KMeansPlusPlusClusterer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	int /= ;
Code	int /= ;
Distance : 4

1
Tree	int sum = += ;
Code	int sum = += ;
Distance : 2

2
Tree	char sum = NUMBER_CONSTANT ;
Code	char sum = NUMBER_CONSTANT ;
Distance : 1

3
Tree	int d = NUMBER_CONSTANT ;
Code	int d = NUMBER_CONSTANT ;
Distance : 2

4
Tree	int k = NUMBER_CONSTANT ;
Code	int k = NUMBER_CONSTANT ;
Distance : 2

5
Tree	int sum = k ;
Code	int sum = k ;
Distance : 2

6
Tree	int [] ;
Code	int [] ;
Distance : 4

7
Tree	int sum = sum ;
Code	int sum = sum ;
Distance : 2

8
Tree	int sum = ? ;
Code	int sum = ? ;
Distance : 2

9
Tree	int sum = else ;
Code	int sum = else ;
Distance : 2

10
Tree	double sum = true ;
Code	double sum = true ;
Distance : 1

11
Tree	double sum = this . sum ;
Code	double sum = this . sum ;
Distance : 3

12
Tree	byte sum = NUMBER_CONSTANT ;
Code	byte sum = NUMBER_CONSTANT ;
Distance : 1

13
Tree	double sum = null ;
Code	double sum = null ;
Distance : 1

14
Tree	int *= ;
Code	int *= ;
Distance : 4

15
Tree	double sum = / ;
Code	double sum = / ;
Distance : 1

16
Tree	int sum = SinFunction ;
Code	int sum = SinFunction ;
Distance : 2

17
Tree	byte sum = true ;
Code	byte sum = true ;
Distance : 2

18
Tree	protected int sum ;
Code	protected int sum ;
Distance : 4

19
Tree	long sum = new ArrayList () ;
Code	long sum = new ArrayList () ;
Distance : 4

20
Tree	boolean sum = new ArrayList () ;
Code	boolean sum = new ArrayList () ;
Distance : 4

21
Tree	int sum = points + NUMBER_CONSTANT ;
Code	int sum = points + NUMBER_CONSTANT ;
Distance : 3

22
Tree	double sum = sum ;
Code	double sum = sum ;
Distance : 1

23
Tree	static int sum ;
Code	static int sum ;
Distance : 4

24
Tree	int sum [] = i ;
Code	int sum [] = i ;
Distance : 3

25
Tree	int sum [] = nextDouble () ;
Code	int sum [] = nextDouble () ;
Distance : 4

26
Tree	int sum = this . d ;
Code	int sum = this . d ;
Distance : 4

27
Tree	int sum ;
Code	int sum ;
Distance : 3

28
Tree	double k ;
Code	double k ;
Distance : 3

29
Tree	int sum = NUMBER_CONSTANT ;
Code	int sum = NUMBER_CONSTANT ;
Distance : 1

30
Tree	int sum = this . sum ;
Code	int sum = this . sum ;
Distance : 4

31
Tree	int sum = size () ;
Code	int sum = size () ;
Distance : 3

32
Tree	int sum = p ;
Code	int sum = p ;
Distance : 2

33
Tree	int sum = <= ;
Code	int sum = <= ;
Distance : 2

34
Tree	double sum = / ;
Code	double sum = / ;
Distance : 1

35
Tree	int sum = {} ;
Code	int sum = {} ;
Distance : 2

36
Tree	int sum = sum + NUMBER_CONSTANT ;
Code	int sum = sum + NUMBER_CONSTANT ;
Distance : 3

37
Tree	int sum = size + NUMBER_CONSTANT ;
Code	int sum = size + NUMBER_CONSTANT ;
Distance : 3

38
Tree	int sum = null ;
Code	int sum = null ;
Distance : 2

39
Tree	int sum = false ;
Code	int sum = false ;
Distance : 2

40
Tree	synchronized int sum ;
Code	synchronized int sum ;
Distance : 4

41
Tree	int sum = sum ;
Code	int sum = sum ;
Distance : 2

42
Tree	int sum = SinFunction ;
Code	int sum = SinFunction ;
Distance : 2

43
Tree	int sum = ? ;
Code	int sum = ? ;
Distance : 2

44
Tree	int sum = i ;
Code	int sum = i ;
Distance : 2

45
Tree	int sum = nextInt () ;
Code	int sum = nextInt () ;
Distance : 3

46
Tree	final int d ;
Code	final int d ;
Distance : 4

47
Tree	int k = new ArrayList () ;
Code	int k = new ArrayList () ;
Distance : 5

48
Tree	double k = NUMBER_CONSTANT ;
Code	double k = NUMBER_CONSTANT ;
Distance : 1

49
Tree	final double sum ;
Code	final double sum ;
Distance : 3

50
Tree	public int sum = NUMBER_CONSTANT ;
Code	public int sum = NUMBER_CONSTANT ;
Distance : 2

51
Tree	char sum = true ;
Code	char sum = true ;
Distance : 2

52
Tree	byte sum = new ArrayList () ;
Code	byte sum = new ArrayList () ;
Distance : 4

53
Tree	double sum = false ;
Code	double sum = false ;
Distance : 1

54
Tree	double sum [] = sum ;
Code	double sum [] = sum ;
Distance : 2

55
Tree	int sum = points ;
Code	int sum = points ;
Distance : 2

56
Tree	int sum = += ;
Code	int sum = += ;
Distance : 2

57
Tree	int sum = sum () . points ;
Code	int sum = sum () . points ;
Distance : 5

58
Tree	byte sum = null ;
Code	byte sum = null ;
Distance : 2

59
Tree	int d = true ;
Code	int d = true ;
Distance : 3

60
Tree	protected int sum = NUMBER_CONSTANT ;
Code	protected int sum = NUMBER_CONSTANT ;
Distance : 2

61
Tree	int sum = STRING_CONSTANT + sum ;
Code	int sum = STRING_CONSTANT + sum ;
Distance : 4

62
Tree	boolean sum = true ;
Code	boolean sum = true ;
Distance : 2

63
Tree	char sum = this . sum ;
Code	char sum = this . sum ;
Distance : 4

64
Tree	char sum ;
Code	char sum ;
Distance : 3

65
Tree	double sum ;
Code	double sum ;
Distance : 2

66
Tree	int sum = k + NUMBER_CONSTANT ;
Code	int sum = k + NUMBER_CONSTANT ;
Distance : 3

67
Tree	static int sum = NUMBER_CONSTANT ;
Code	static int sum = NUMBER_CONSTANT ;
Distance : 2

68
Tree	int sum = new Random () ;
Code	int sum = new Random () ;
Distance : 4

69
Tree	int sum = ^ ;
Code	int sum = ^ ;
Distance : 2

70
Tree	int d ;
Code	int d ;
Distance : 4

71
Tree	int += ;
Code	int += ;
Distance : 4

72
Tree	int d = this . sum ;
Code	int d = this . sum ;
Distance : 5

73
Tree	public int sum ;
Code	public int sum ;
Distance : 4

74
Tree	int sum = d + NUMBER_CONSTANT ;
Code	int sum = d + NUMBER_CONSTANT ;
Distance : 3

75
Tree	final int sum = NUMBER_CONSTANT ;
Code	final int sum = NUMBER_CONSTANT ;
Distance : 2

76
Tree	double sum [] = d ;
Code	double sum [] = d ;
Distance : 2

77
Tree	int sum = size ;
Code	int sum = size ;
Distance : 2

78
Tree	int sum [] = ArrayList () ;
Code	int sum [] = ArrayList () ;
Distance : 4

79
Tree	double sum = sum ;
Code	double sum = sum ;
Distance : 1

80
Tree	private int sum ;
Code	private int sum ;
Distance : 4

81
Tree	float sum = null ;
Code	float sum = null ;
Distance : 2

82
Tree	int sum = nextDouble () ;
Code	int sum = nextDouble () ;
Distance : 3

83
Tree	final int sum ;
Code	final int sum ;
Distance : 4

84
Tree	int sum = distanceFrom ;
Code	int sum = distanceFrom ;
Distance : 2

85
Tree	int sum = CHAR_CONS ;
Code	int sum = CHAR_CONS ;
Distance : 2

86
Tree	int sum = sum () ;
Code	int sum = sum () ;
Distance : 3

87
Tree	int sum = ^ ;
Code	int sum = ^ ;
Distance : 2

88
Tree	int sum = d ;
Code	int sum = d ;
Distance : 2

89
Tree	int sum = AllowedSolution.ANY_SIDE ;
Code	int sum = AllowedSolution.ANY_SIDE ;
Distance : 2

90
Tree	char sum = null ;
Code	char sum = null ;
Distance : 2

91
Tree	int sum = i + NUMBER_CONSTANT ;
Code	int sum = i + NUMBER_CONSTANT ;
Distance : 3

92
Tree	int sum = points () ;
Code	int sum = points () ;
Distance : 3

93
Tree	long sum = this . sum ;
Code	long sum = this . sum ;
Distance : 4

94
Tree	int sum = nextDouble ;
Code	int sum = nextDouble ;
Distance : 2

95
Tree	abstract int sum ;
Code	abstract int sum ;
Distance : 4

96
Tree	int sum [] = Cluster () ;
Code	int sum [] = Cluster () ;
Distance : 4

97
Tree	int sum [] = get () ;
Code	int sum [] = get () ;
Distance : 4

98
Tree	int sum = d () ;
Code	int sum = d () ;
Distance : 3

99
Tree	boolean sum = this . sum ;
Code	boolean sum = this . sum ;
Distance : 4

100
Tree	int sum = Cluster ;
Code	int sum = Cluster ;
Distance : 2

101
Tree	long sum = NUMBER_CONSTANT ;
Code	long sum = NUMBER_CONSTANT ;
Distance : 1

102
Tree	int sum [] = add () ;
Code	int sum [] = add () ;
Distance : 4

103
Tree	int sum [] = Random () ;
Code	int sum [] = Random () ;
Distance : 4

104
Tree	int sum = AllowedSolution.ANY_SIDE ;
Code	int sum = AllowedSolution.ANY_SIDE ;
Distance : 2

105
Tree	int sum = Cluster ;
Code	int sum = Cluster ;
Distance : 2

106
Tree	int createIllegalArgumentException ;
Code	int createIllegalArgumentException ;
Distance : 4

107
Tree	long += ;
Code	long += ;
Distance : 4

108
Tree	int sum [] = p ;
Code	int sum [] = p ;
Distance : 3

109
Tree	int sum = d ;
Code	int sum = d ;
Distance : 2

110
Tree	int sum = true ;
Code	int sum = true ;
Distance : 2

111
Tree	int k = true ;
Code	int k = true ;
Distance : 3

112
Tree	synchronized int sum = NUMBER_CONSTANT ;
Code	synchronized int sum = NUMBER_CONSTANT ;
Distance : 2

113
Tree	int sum [] = points ;
Code	int sum [] = points ;
Distance : 3

114
Tree	private int sum = NUMBER_CONSTANT ;
Code	private int sum = NUMBER_CONSTANT ;
Distance : 2

115
Tree	final int d = NUMBER_CONSTANT ;
Code	final int d = NUMBER_CONSTANT ;
Distance : 3

116
Tree	long sum ;
Code	long sum ;
Distance : 3

117
Tree	int sum = new ArrayList () ;
Code	int sum = new ArrayList () ;
Distance : 4

118
Tree	double sum [] = nextInt () ;
Code	double sum [] = nextInt () ;
Distance : 3

119
Tree	boolean sum = STRING_CONSTANT + sum ;
Code	boolean sum = STRING_CONSTANT + sum ;
Distance : 4

120
Tree	char sum = new ArrayList () ;
Code	char sum = new ArrayList () ;
Distance : 4

121
Tree	int sum [] = d ;
Code	int sum [] = d ;
Distance : 3

122
Tree	int sum = this . k ;
Code	int sum = this . k ;
Distance : 4

123
Tree	final double sum = NUMBER_CONSTANT ;
Code	final double sum = NUMBER_CONSTANT ;
Distance : 1

124
Tree	boolean sum ;
Code	boolean sum ;
Distance : 3

125
Tree	int d = new ArrayList () ;
Code	int d = new ArrayList () ;
Distance : 5

126
Tree	int sum = Cluster () . points ;
Code	int sum = Cluster () . points ;
Distance : 5

127
Tree	int d = null ;
Code	int d = null ;
Distance : 3

128
Tree	int sum = new points () ;
Code	int sum = new points () ;
Distance : 4

129
Tree	int sum = / ;
Code	int sum = / ;
Distance : 2

130
Tree	int sum = Cluster + NUMBER_CONSTANT ;
Code	int sum = Cluster + NUMBER_CONSTANT ;
Distance : 3

131
Tree	boolean += ;
Code	boolean += ;
Distance : 4

132
Tree	double sum = d + NUMBER_CONSTANT ;
Code	double sum = d + NUMBER_CONSTANT ;
Distance : 2

133
Tree	int sum = sum () . d ;
Code	int sum = sum () . d ;
Distance : 5

134
Tree	int sum = = () ;
Code	int sum = = () ;
Distance : 3

135
Tree	int sum = p () ;
Code	int sum = p () ;
Distance : 3

136
Tree	int sum [] = sum ;
Code	int sum [] = sum ;
Distance : 3

137
Tree	int sum = / ;
Code	int sum = / ;
Distance : 2

138
Tree	float sum ;
Code	float sum ;
Distance : 3

139
Tree	long sum = null ;
Code	long sum = null ;
Distance : 2

140
Tree	int sum [] = points () ;
Code	int sum [] = points () ;
Distance : 4

141
Tree	final int k ;
Code	final int k ;
Distance : 4

142
Tree	int sum = p + NUMBER_CONSTANT ;
Code	int sum = p + NUMBER_CONSTANT ;
Distance : 3

143
Tree	int <= ;
Code	int <= ;
Distance : 4

144
Tree	double sum = d ;
Code	double sum = d ;
Distance : 1

145
Tree	double sum = NUMBER_CONSTANT ;
Code	double sum = NUMBER_CONSTANT ;
Distance : 0

146
Tree	final int k = NUMBER_CONSTANT ;
Code	final int k = NUMBER_CONSTANT ;
Distance : 3

147
Tree	int sum = size () . i ;
Code	int sum = size () . i ;
Distance : 5

148
Tree	int sum [] = nextDouble ;
Code	int sum [] = nextDouble ;
Distance : 3

149
Tree	int sum = sum () . i ;
Code	int sum = sum () . i ;
Distance : 5

150
Tree	int -= ;
Code	int -= ;
Distance : 4

151
Tree	int sum = STRING_CONSTANT + d ;
Code	int sum = STRING_CONSTANT + d ;
Distance : 4

152
Tree	int sum = i ;
Code	int sum = i ;
Distance : 2

153
Tree	int k = this . sum ;
Code	int k = this . sum ;
Distance : 5

154
Tree	int sum [] = Cluster ;
Code	int sum [] = Cluster ;
Distance : 3

155
Tree	double sum = STRING_CONSTANT + sum ;
Code	double sum = STRING_CONSTANT + sum ;
Distance : 3

156
Tree	int sum [] = size () ;
Code	int sum [] = size () ;
Distance : 4

157
Tree	int k ;
Code	int k ;
Distance : 4

158
Tree	int sum = STRING_CONSTANT + k ;
Code	int sum = STRING_CONSTANT + k ;
Distance : 4

159
Tree	int sum = else ;
Code	int sum = else ;
Distance : 2

160
Tree	int sum [] = k ;
Code	int sum [] = k ;
Distance : 3

161
Tree	long sum = CHAR_CONS ;
Code	long sum = CHAR_CONS ;
Distance : 2

162
Tree	int sum = Cluster () ;
Code	int sum = Cluster () ;
Distance : 3

163
Tree	int sum = p ;
Code	int sum = p ;
Distance : 2

164
Tree	int sum = size () . points ;
Code	int sum = size () . points ;
Distance : 5

165
Tree	int sum = super(); ;
Code	int sum = super(); ;
Distance : 2

166
Tree	float sum = NUMBER_CONSTANT ;
Code	float sum = NUMBER_CONSTANT ;
Distance : 1

167
Tree	int sum = nextInt () . points ;
Code	int sum = nextInt () . points ;
Distance : 5

168
Tree	int k = null ;
Code	int k = null ;
Distance : 3

169
Tree	abstract int sum = NUMBER_CONSTANT ;
Code	abstract int sum = NUMBER_CONSTANT ;
Distance : 2

170
Tree	int sum = nextDouble () . points ;
Code	int sum = nextDouble () . points ;
Distance : 5

171
Tree	double sum = CHAR_CONS ;
Code	double sum = CHAR_CONS ;
Distance : 1

172
Tree	boolean sum = NUMBER_CONSTANT ;
Code	boolean sum = NUMBER_CONSTANT ;
Distance : 1

173
Tree	int k = STRING_CONSTANT + sum ;
Code	int k = STRING_CONSTANT + sum ;
Distance : 5

174
Tree	int d = CHAR_CONS ;
Code	int d = CHAR_CONS ;
Distance : 3

175
Tree	boolean sum = CHAR_CONS ;
Code	boolean sum = CHAR_CONS ;
Distance : 2

176
Tree	double sum = sum + NUMBER_CONSTANT ;
Code	double sum = sum + NUMBER_CONSTANT ;
Distance : 2

177
Tree	int sum = <= ;
Code	int sum = <= ;
Distance : 2

178
Tree	byte sum ;
Code	byte sum ;
Distance : 3

179
Tree	int k = CHAR_CONS ;
Code	int k = CHAR_CONS ;
Distance : 3

180
Tree	double sum = new ArrayList () ;
Code	double sum = new ArrayList () ;
Distance : 3

181
Tree	byte sum = STRING_CONSTANT + sum ;
Code	byte sum = STRING_CONSTANT + sum ;
Distance : 4

182
Tree	int sum [] = nextInt () ;
Code	int sum [] = nextInt () ;
Distance : 4

183
Tree	char sum = CHAR_CONS ;
Code	char sum = CHAR_CONS ;
Distance : 2

184
Tree	int sum = sum () . p ;
Code	int sum = sum () . p ;
Distance : 5

185
Tree	int sum = {} ;
Code	int sum = {} ;
Distance : 2

186
Tree	int d = STRING_CONSTANT + sum ;
Code	int d = STRING_CONSTANT + sum ;
Distance : 5

187
Tree	double += ;
Code	double += ;
Distance : 3

188
Tree	char sum = STRING_CONSTANT + sum ;
Code	char sum = STRING_CONSTANT + sum ;
Distance : 4

189
Tree	byte sum = CHAR_CONS ;
Code	byte sum = CHAR_CONS ;
Distance : 2

190
Tree	byte sum = this . sum ;
Code	byte sum = this . sum ;
Distance : 4

191
Tree	boolean sum = null ;
Code	boolean sum = null ;
Distance : 2

192
Tree	int sum = size ;
Code	int sum = size ;
Distance : 2

193
Tree	long sum = true ;
Code	long sum = true ;
Distance : 2

194
Tree	float sum = CHAR_CONS ;
Code	float sum = CHAR_CONS ;
Distance : 2

195
Tree	long sum = STRING_CONSTANT + sum ;
Code	long sum = STRING_CONSTANT + sum ;
Distance : 4

196
Tree	double sum = sum () ;
Code	double sum = sum () ;
Distance : 2

197
Tree	int sum = = ;
Code	int sum = = ;
Distance : 2

198
Tree	int sum = sum () . size ;
Code	int sum = sum () . size ;
Distance : 5

199
Tree	double k = CHAR_CONS ;
Code	double k = CHAR_CONS ;
Distance : 2

========================================================================


========================================================================
Example Number: 63
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Iterator iter = ebeMultiply . iterator ( null ) ;
Code	Iterator iter = ebeMultiply . iterator ( null ) ;
Distance : 4

1
Tree	Iterator iter = hasNext ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = hasNext ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

2
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

3
Tree	Iterator iter = iter ( this . advance ) ;
Code	Iterator iter = iter ( this . advance ) ;
Distance : 5

4
Tree	Iterator iter = res . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = res . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

5
Tree	Iterator iter = key . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = key . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

6
Tree	Iterator iter = iter . iterator ( iter , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( iter , NUMBER_CONSTANT ) ;
Distance : 6

7
Tree	Iterator iter = iter ( iter . class ) ;
Code	Iterator iter = iter ( iter . class ) ;
Distance : 5

8
Tree	Iterator iter = res.entries () ;
Code	Iterator iter = res.entries () ;
Distance : 3

9
Tree	Iterator iter = hasNext ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = hasNext ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

10
Tree	Iterator iter = advance . iterator ( iter . class ) ;
Code	Iterator iter = advance . iterator ( iter . class ) ;
Distance : 6

11
Tree	Iterator iter = res ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = res ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

12
Tree	Iterator iter = res.entries . iterator ( iter . class ) ;
Code	Iterator iter = res.entries . iterator ( iter . class ) ;
Distance : 6

13
Tree	Iterator iter = iter . iterator ( advance , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( advance , NUMBER_CONSTANT ) ;
Distance : 6

14
Tree	Iterator iter = res.entries ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries ( NUMBER_CONSTANT ) ;
Distance : 4

15
Tree	Iterator iter = OpenMapRealVector . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = OpenMapRealVector . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

16
Tree	Iterator iter = iter . advance ( null ) ;
Code	Iterator iter = iter . advance ( null ) ;
Distance : 5

17
Tree	Iterator iter = key ( NUMBER_CONSTANT ) ;
Code	Iterator iter = key ( NUMBER_CONSTANT ) ;
Distance : 4

18
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , advance ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , advance ) ;
Distance : 6

19
Tree	Iterator iter = key ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = key ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

20
Tree	Iterator iter = iter ( iterator ) ;
Code	Iterator iter = iter ( iterator ) ;
Distance : 3

21
Tree	Iterator iter = key ( this . iterator ) ;
Code	Iterator iter = key ( this . iterator ) ;
Distance : 4

22
Tree	Iterator iter = iter () ;
Code	Iterator iter = iter () ;
Distance : 3

23
Tree	Iterator iter = ebeMultiply ( this . advance ) ;
Code	Iterator iter = ebeMultiply ( this . advance ) ;
Distance : 5

24
Tree	Iterator iter = iter ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter ( NUMBER_CONSTANT ) ;
Distance : 4

25
Tree	Iterator iter = iter ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

26
Tree	Iterator iter = iter . iterator ( hasNext , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( hasNext , NUMBER_CONSTANT ) ;
Distance : 6

27
Tree	Iterator iter = res . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

28
Tree	Iterator iter = iter ( this . iterator ) ;
Code	Iterator iter = iter ( this . iterator ) ;
Distance : 4

29
Tree	Iterator iter = hasNext ( iter . class ) ;
Code	Iterator iter = hasNext ( iter . class ) ;
Distance : 5

30
Tree	Iterator iter = key . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = key . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

31
Tree	Iterator iter = ebeMultiply ( iter ) . iterator () ;
Code	Iterator iter = ebeMultiply ( iter ) . iterator () ;
Distance : 4

32
Tree	Iterator iter = res . iterator () ;
Code	Iterator iter = res . iterator () ;
Distance : 1

33
Tree	Iterator iter = this . key . iterator () ;
Code	Iterator iter = this . key . iterator () ;
Distance : 3

34
Tree	Iterator iter = iter ( iter , iter ) ;
Code	Iterator iter = iter ( iter , iter ) ;
Distance : 6

35
Tree	Iterator iter = res.entries ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = res.entries ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

36
Tree	Iterator hasNext = this . iterator . iterator () ;
Code	Iterator hasNext = this . iterator . iterator () ;
Distance : 4

37
Tree	Iterator iter = ebeMultiply ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = ebeMultiply ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

38
Tree	Iterator iter = this . iterator . iterator () ;
Code	Iterator iter = this . iterator . iterator () ;
Distance : 3

39
Tree	Iterator iter = advance ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = advance ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

40
Tree	Iterator iter = advance ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = advance ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

41
Tree	Iterator iter = ebeMultiply ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = ebeMultiply ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

42
Tree	Iterator iter = ebeMultiply . advance ( NUMBER_CONSTANT ) ;
Code	Iterator iter = ebeMultiply . advance ( NUMBER_CONSTANT ) ;
Distance : 5

43
Tree	Iterator iter = res.entries ( this . iterator ) ;
Code	Iterator iter = res.entries ( this . iterator ) ;
Distance : 4

44
Tree	Iterator iter = ebeMultiply ( iter , iter ) ;
Code	Iterator iter = ebeMultiply ( iter , iter ) ;
Distance : 6

45
Tree	Iterator iter = advance ( iter , iter ) ;
Code	Iterator iter = advance ( iter , iter ) ;
Distance : 6

46
Tree	Iterator iter = res . iterator ( null ) ;
Code	Iterator iter = res . iterator ( null ) ;
Distance : 4

47
Tree	Iterator iter = iterator . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

48
Tree	Iterator iter = iterator ( iter , iter ) ;
Code	Iterator iter = iterator ( iter , iter ) ;
Distance : 6

49
Tree	Iterator iter = iter . advance () ;
Code	Iterator iter = iter . advance () ;
Distance : 2

50
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

51
Tree	Iterator iter = this . advance . iterator () ;
Code	Iterator iter = this . advance . iterator () ;
Distance : 3

52
Tree	Iterator iter = ebeMultiply ( iter . class ) ;
Code	Iterator iter = ebeMultiply ( iter . class ) ;
Distance : 5

53
Tree	Iterator iter = key . iterator ( null ) ;
Code	Iterator iter = key . iterator ( null ) ;
Distance : 4

54
Tree	Iterator iter = advance ( this . iterator ) ;
Code	Iterator iter = advance ( this . iterator ) ;
Distance : 4

55
Tree	Iterator iter = advance . iterator ( null ) ;
Code	Iterator iter = advance . iterator ( null ) ;
Distance : 4

56
Tree	advance iter = this . iterator . iterator () ;
Code	advance iter = this . iterator . iterator () ;
Distance : 4

57
Tree	Iterator iter = iter ( res.entries ) ;
Code	Iterator iter = iter ( res.entries ) ;
Distance : 4

58
Tree	Iterator iter = OpenMapRealVector . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = OpenMapRealVector . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

59
Tree	Iterator iter = iter ( iter , ebeMultiply ) ;
Code	Iterator iter = iter ( iter , ebeMultiply ) ;
Distance : 6

60
Tree	Iterator iter = iter ( iter , hasNext ) ;
Code	Iterator iter = iter ( iter , hasNext ) ;
Distance : 6

61
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 6

62
Tree	Iterator iter = iterator . iterator () ;
Code	Iterator iter = iterator . iterator () ;
Distance : 1

63
Tree	Iterator iter = iter . iterator ( iterator . class ) ;
Code	Iterator iter = iter . iterator ( iterator . class ) ;
Distance : 6

64
Tree	Iterator iter = this . iterator . advance () ;
Code	Iterator iter = this . iterator . advance () ;
Distance : 3

65
Tree	Iterator iter = iterator () ;
Code	Iterator iter = iterator () ;
Distance : 2

66
Tree	Iterator iter = res.entries ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = res.entries ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

67
Tree	Iterator iter = advance ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = advance ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

68
Tree	Iterator iter = iter ( hasNext ) ;
Code	Iterator iter = iter ( hasNext ) ;
Distance : 4

69
Tree	Iterator iter = advance ( this . advance ) ;
Code	Iterator iter = advance ( this . advance ) ;
Distance : 5

70
Tree	Iterator iter = iter . iterator ( iter . class ) ;
Code	Iterator iter = iter . iterator ( iter . class ) ;
Distance : 6

71
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , iterator ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , iterator ) ;
Distance : 6

72
Tree	Iterator iter = advance ( iter . class ) ;
Code	Iterator iter = advance ( iter . class ) ;
Distance : 5

73
Tree	Iterator iter = iter ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

74
Tree	Iterator iter = iter ( iter ) . iterator () ;
Code	Iterator iter = iter ( iter ) . iterator () ;
Distance : 4

75
Tree	Iterator iter = advance ( iter ) . iterator () ;
Code	Iterator iter = advance ( iter ) . iterator () ;
Distance : 4

76
Tree	Iterator iter = this . advance . advance () ;
Code	Iterator iter = this . advance . advance () ;
Distance : 4

77
Tree	Iterator iter = ebeMultiply . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = ebeMultiply . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

78
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

79
Tree	Iterator iter = advance . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = advance . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

80
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

81
Tree	Iterator iter = iter ( iter , advance ) ;
Code	Iterator iter = iter ( iter , advance ) ;
Distance : 6

82
Tree	Iterator iter = iter ( iter , OpenMapRealVector ) ;
Code	Iterator iter = iter ( iter , OpenMapRealVector ) ;
Distance : 6

83
Tree	Iterator iter = res ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = res ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

84
Tree	Iterator iter = iter ( iter , res.entries ) ;
Code	Iterator iter = iter ( iter , res.entries ) ;
Distance : 6

85
Tree	Iterator iter = iter . iterator ( ebeMultiply , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( ebeMultiply , NUMBER_CONSTANT ) ;
Distance : 6

86
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

87
Tree	Iterator iter = iter . iterator ( res.entries . class ) ;
Code	Iterator iter = iter . iterator ( res.entries . class ) ;
Distance : 6

88
Tree	Iterator iter = ebeMultiply . iterator () ;
Code	Iterator iter = ebeMultiply . iterator () ;
Distance : 1

89
Tree	Iterator iter = advance . iterator () ;
Code	Iterator iter = advance . iterator () ;
Distance : 1

90
Tree	Iterator iter = iter . advance ( iter , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . advance ( iter , NUMBER_CONSTANT ) ;
Distance : 7

91
Tree	Iterator iter = OpenMapRealVector . iterator () ;
Code	Iterator iter = OpenMapRealVector . iterator () ;
Distance : 1

92
Tree	Iterator iter = iter ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

93
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

94
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , hasNext ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , hasNext ) ;
Distance : 6

95
Tree	Iterator iter = hasNext . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = hasNext . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

96
Tree	Iterator iter = ebeMultiply () ;
Code	Iterator iter = ebeMultiply () ;
Distance : 3

97
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Distance : 4

98
Tree	Iterator iter = res.entries . iterator ( null ) ;
Code	Iterator iter = res.entries . iterator ( null ) ;
Distance : 4

99
Tree	Iterator iter = iterator ( iter . class ) ;
Code	Iterator iter = iterator ( iter . class ) ;
Distance : 5

100
Tree	Iterator iter = ebeMultiply ( NUMBER_CONSTANT ) ;
Code	Iterator iter = ebeMultiply ( NUMBER_CONSTANT ) ;
Distance : 4

101
Tree	Iterator iter = iter . advance () ;
Code	Iterator iter = iter . advance () ;
Distance : 2

102
Tree	Iterator iter = ebeMultiply . iterator () ;
Code	Iterator iter = ebeMultiply . iterator () ;
Distance : 1

103
Tree	Iterator iter = OpenMapRealVector . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = OpenMapRealVector . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

104
Tree	Iterator iter = hasNext () ;
Code	Iterator iter = hasNext () ;
Distance : 3

105
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , OpenMapRealVector ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , OpenMapRealVector ) ;
Distance : 6

106
Tree	Iterator iter = setEntry ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = setEntry ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

107
Tree	Iterator iter = OpenMapRealVector . iterator ( null ) ;
Code	Iterator iter = OpenMapRealVector . iterator ( null ) ;
Distance : 4

108
Tree	Iterator iter = ebeMultiply ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = ebeMultiply ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

109
Tree	Iterator iter = iterator ( iter ) . iterator () ;
Code	Iterator iter = iterator ( iter ) . iterator () ;
Distance : 4

110
Tree	Iterator iter = hasNext ( NUMBER_CONSTANT ) ;
Code	Iterator iter = hasNext ( NUMBER_CONSTANT ) ;
Distance : 4

111
Tree	Iterator iter = iter . iterator ( iterator , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( iterator , NUMBER_CONSTANT ) ;
Distance : 6

112
Tree	iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

113
Tree	Iterator iter = hasNext . iterator () ;
Code	Iterator iter = hasNext . iterator () ;
Distance : 1

114
Tree	iterator iter = this . iterator . iterator () ;
Code	iterator iter = this . iterator . iterator () ;
Distance : 4

115
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

116
Tree	Iterator iter = OpenMapRealVector . iterator () ;
Code	Iterator iter = OpenMapRealVector . iterator () ;
Distance : 1

117
Tree	Iterator iter = hasNext . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = hasNext . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

118
Tree	Iterator iter = iter . iterator ( key . class ) ;
Code	Iterator iter = iter . iterator ( key . class ) ;
Distance : 6

119
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

120
Tree	Iterator iter = setEntry () ;
Code	Iterator iter = setEntry () ;
Distance : 3

121
Tree	Iterator iter = iter ( iter ) ;
Code	Iterator iter = iter ( iter ) ;
Distance : 4

122
Tree	Iterator iter = iter . iterator ( advance . class ) ;
Code	Iterator iter = iter . iterator ( advance . class ) ;
Distance : 6

123
Tree	Iterator iter = this . res . iterator () ;
Code	Iterator iter = this . res . iterator () ;
Distance : 3

124
Tree	Iterator iter = OpenMapRealVector () ;
Code	Iterator iter = OpenMapRealVector () ;
Distance : 3

125
Tree	Iterator iter = OpenMapRealVector ( NUMBER_CONSTANT ) ;
Code	Iterator iter = OpenMapRealVector ( NUMBER_CONSTANT ) ;
Distance : 4

126
Tree	Iterator iter = iter . advance ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . advance ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

127
Tree	Iterator iter = ebeMultiply ( this . iterator ) ;
Code	Iterator iter = ebeMultiply ( this . iterator ) ;
Distance : 4

128
Tree	Iterator iter = hasNext ( iter ) ;
Code	Iterator iter = hasNext ( iter ) ;
Distance : 4

129
Tree	iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

130
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

131
Tree	Iterator iter = key ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = key ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

132
Tree	Iterator iter = iter ( res.entries . class ) ;
Code	Iterator iter = iter ( res.entries . class ) ;
Distance : 5

133
Tree	Iterator iter = OpenMapRealVector ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = OpenMapRealVector ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

134
Tree	Iterator iter = res.entries ( iter , iter ) ;
Code	Iterator iter = res.entries ( iter , iter ) ;
Distance : 6

135
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , iter ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , iter ) ;
Distance : 6

136
Tree	Iterator iter = hasNext ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = hasNext ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

137
Tree	Iterator iter = setEntry ( NUMBER_CONSTANT ) ;
Code	Iterator iter = setEntry ( NUMBER_CONSTANT ) ;
Distance : 4

138
Tree	iterator iter = iter . iterator ( null ) ;
Code	iterator iter = iter . iterator ( null ) ;
Distance : 5

139
Tree	Iterator iter = iter ( res.entries ) . iterator () ;
Code	Iterator iter = iter ( res.entries ) . iterator () ;
Distance : 4

140
Tree	Iterator iter = hasNext ( this . iterator ) ;
Code	Iterator iter = hasNext ( this . iterator ) ;
Distance : 4

141
Tree	Iterator iter = setEntry ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = setEntry ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

142
Tree	Iterator iter = iter ( ebeMultiply ) ;
Code	Iterator iter = iter ( ebeMultiply ) ;
Distance : 4

143
Tree	Iterator iter = advance . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = advance . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

144
Tree	Iterator iter = iter . iterator ( null ) ;
Code	Iterator iter = iter . iterator ( null ) ;
Distance : 4

145
Tree	Iterator iter = iterator ( this . iterator ) ;
Code	Iterator iter = iterator ( this . iterator ) ;
Distance : 4

146
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , ebeMultiply ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , ebeMultiply ) ;
Distance : 6

147
Tree	Iterator iter = ebeMultiply . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = ebeMultiply . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

148
Tree	Iterator iter = iter . advance ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . advance ( NUMBER_CONSTANT ) ;
Distance : 5

149
Tree	Iterator iter = iter . iterator () ;
Code	Iterator iter = iter . iterator () ;
Distance : 1

150
Tree	Iterator iter = res.entries ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = res.entries ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

151
Tree	Iterator iter = res . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

152
Tree	Iterator iter = iter . iterator ( key , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( key , NUMBER_CONSTANT ) ;
Distance : 6

153
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

154
Tree	Iterator iter = this . Iterator . iterator () ;
Code	Iterator iter = this . Iterator . iterator () ;
Distance : 3

155
Tree	Iterator iter = key ( iter . class ) ;
Code	Iterator iter = key ( iter . class ) ;
Distance : 5

156
Tree	Iterator iter = res.entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

157
Tree	Iterator iter = ebeMultiply . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = ebeMultiply . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

158
Tree	Iterator iter = iter . iterator ( OpenMapRealVector , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( OpenMapRealVector , NUMBER_CONSTANT ) ;
Distance : 6

159
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 6

160
Tree	Iterator iter = OpenMapRealVector ( iter . class ) ;
Code	Iterator iter = OpenMapRealVector ( iter . class ) ;
Distance : 5

161
Tree	Iterator iter = iter ( hasNext . class ) ;
Code	Iterator iter = iter ( hasNext . class ) ;
Distance : 5

162
Tree	Iterator iter = hasNext . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = hasNext . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

163
Tree	Iterator iter = res.entries ( iter . class ) ;
Code	Iterator iter = res.entries ( iter . class ) ;
Distance : 5

164
Tree	Iterator iter = advance . iterator ( iter , NUMBER_CONSTANT ) ;
Code	Iterator iter = advance . iterator ( iter , NUMBER_CONSTANT ) ;
Distance : 6

165
Tree	Iterator iter = iter . advance ( NUMBER_CONSTANT , iter ) ;
Code	Iterator iter = iter . advance ( NUMBER_CONSTANT , iter ) ;
Distance : 7

166
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , key ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , key ) ;
Distance : 6

167
Tree	Iterator iter = setEntry ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = setEntry ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

168
Tree	Iterator iter = res () ;
Code	Iterator iter = res () ;
Distance : 3

169
Tree	Iterator iter = iter . iterator ( res . class ) ;
Code	Iterator iter = iter . iterator ( res . class ) ;
Distance : 6

170
Tree	iterator iter = iter . iterator () ;
Code	iterator iter = iter . iterator () ;
Distance : 2

171
Tree	Iterator iter = iter . advance ( iter . class ) ;
Code	Iterator iter = iter . advance ( iter . class ) ;
Distance : 7

172
Tree	Iterator iter = advance () ;
Code	Iterator iter = advance () ;
Distance : 3

173
Tree	Iterator iter = OpenMapRealVector ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = OpenMapRealVector ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

174
Tree	Iterator iter = hasNext . iterator () ;
Code	Iterator iter = hasNext . iterator () ;
Distance : 1

175
Tree	Iterator iter = iter . advance ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . advance ( NUMBER_CONSTANT ) ;
Distance : 5

176
Tree	Iterator iter = iter . iterator () ;
Code	Iterator iter = iter . iterator () ;
Distance : 1

177
Tree	Iterator iter = advance . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = advance . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

178
Tree	Iterator iter = advance . iterator () ;
Code	Iterator iter = advance . iterator () ;
Distance : 1

179
Tree	Iterator iter = res . iterator () ;
Code	Iterator iter = res . iterator () ;
Distance : 1

180
Tree	Iterator iter = hasNext . iterator ( null ) ;
Code	Iterator iter = hasNext . iterator ( null ) ;
Distance : 4

181
Tree	Iterator iter = iter . advance ( NUMBER_CONSTANT , ebeMultiply ) ;
Code	Iterator iter = iter . advance ( NUMBER_CONSTANT , ebeMultiply ) ;
Distance : 7

182
Tree	Iterator iter = iter ( hasNext ) . iterator () ;
Code	Iterator iter = iter ( hasNext ) . iterator () ;
Distance : 4

183
Tree	Iterator iter = hasNext ( iter ) . iterator () ;
Code	Iterator iter = hasNext ( iter ) . iterator () ;
Distance : 4

184
Tree	Iterator iter = res ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = res ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

185
Tree	Iterator iter = ebeMultiply . advance () ;
Code	Iterator iter = ebeMultiply . advance () ;
Distance : 2

186
Tree	Iterator iter = iter . iterator ( hasNext . class ) ;
Code	Iterator iter = iter . iterator ( hasNext . class ) ;
Distance : 6

187
Tree	Iterator iter = iter ( ebeMultiply ) . iterator () ;
Code	Iterator iter = iter ( ebeMultiply ) . iterator () ;
Distance : 4

188
Tree	Iterator iter = ebeMultiply ( iter ) ;
Code	Iterator iter = ebeMultiply ( iter ) ;
Distance : 4

189
Tree	Iterator iter = res ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res ( NUMBER_CONSTANT ) ;
Distance : 4

190
Tree	Iterator iter = res.entries ( iter ) . iterator () ;
Code	Iterator iter = res.entries ( iter ) . iterator () ;
Distance : 4

191
Tree	Iterator iter = OpenMapRealVector ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = OpenMapRealVector ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

192
Tree	Iterator iter = advance ( NUMBER_CONSTANT ) ;
Code	Iterator iter = advance ( NUMBER_CONSTANT ) ;
Distance : 4

193
Tree	Iterator iter = key . iterator () ;
Code	Iterator iter = key . iterator () ;
Distance : 1

194
Tree	Iterator iter = key ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = key ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

195
Tree	Iterator iter = res.entries ( iter ) ;
Code	Iterator iter = res.entries ( iter ) ;
Distance : 4

196
Tree	Iterator iter = iter ( iterator ) . iterator () ;
Code	Iterator iter = iter ( iterator ) . iterator () ;
Distance : 4

197
Tree	Iterator iter = advance ( iter ) ;
Code	Iterator iter = advance ( iter ) ;
Distance : 4

198
Tree	Iterator iter = iterator ( iter ) ;
Code	Iterator iter = iterator ( iter ) ;
Distance : 4

199
Tree	Iterator iter = key () ;
Code	Iterator iter = key () ;
Distance : 3

========================================================================


========================================================================
Example Number: 64
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

1
Tree	Iterator iter = getDimension ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getDimension ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

2
Tree	Iterator iter = getDimension ( this . iterator ) ;
Code	Iterator iter = getDimension ( this . iterator ) ;
Distance : 4

3
Tree	Iterator iter = res.entries . iterator ( null ) ;
Code	Iterator iter = res.entries . iterator ( null ) ;
Distance : 4

4
Tree	Iterator iter = iter ( iter ) ;
Code	Iterator iter = iter ( iter ) ;
Distance : 4

5
Tree	Iterator iter = ebeMultiply . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = ebeMultiply . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

6
Tree	Iterator iter = getEntry () ;
Code	Iterator iter = getEntry () ;
Distance : 3

7
Tree	Iterator iter = getEntry ( NUMBER_CONSTANT ) ;
Code	Iterator iter = getEntry ( NUMBER_CONSTANT ) ;
Distance : 4

8
Tree	Iterator iter = getEntry ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getEntry ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

9
Tree	Iterator iter = getEntry ( this . iterator ) ;
Code	Iterator iter = getEntry ( this . iterator ) ;
Distance : 4

10
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , hasNext ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , hasNext ) ;
Distance : 6

11
Tree	Iterator iter = hasNext ( iter ) ;
Code	Iterator iter = hasNext ( iter ) ;
Distance : 4

12
Tree	Iterator iter = ebeMultiply . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = ebeMultiply . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

13
Tree	Iterator iter = iter . advance ( NUMBER_CONSTANT , iter ) ;
Code	Iterator iter = iter . advance ( NUMBER_CONSTANT , iter ) ;
Distance : 7

14
Tree	Iterator iter = iter . iterator ( res . class ) ;
Code	Iterator iter = iter . iterator ( res . class ) ;
Distance : 6

15
Tree	Iterator iter = hasNext ( this . iterator ) ;
Code	Iterator iter = hasNext ( this . iterator ) ;
Distance : 4

16
Tree	Iterator iter = iter . advance ( null ) ;
Code	Iterator iter = iter . advance ( null ) ;
Distance : 5

17
Tree	Iterator iter = iter () ;
Code	Iterator iter = iter () ;
Distance : 3

18
Tree	Iterator iter = hasNext . iterator ( null ) ;
Code	Iterator iter = hasNext . iterator ( null ) ;
Distance : 4

19
Tree	Iterator iter = iter ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter ( NUMBER_CONSTANT ) ;
Distance : 4

20
Tree	Iterator iter = advance . iterator ( iter . class ) ;
Code	Iterator iter = advance . iterator ( iter . class ) ;
Distance : 6

21
Tree	Iterator iter = res.entries . iterator ( iter . class ) ;
Code	Iterator iter = res.entries . iterator ( iter . class ) ;
Distance : 6

22
Tree	Iterator iter = iter ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

23
Tree	Iterator iter = advance . iterator () ;
Code	Iterator iter = advance . iterator () ;
Distance : 1

24
Tree	Iterator iter = iter . iterator ( advance , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( advance , NUMBER_CONSTANT ) ;
Distance : 6

25
Tree	Iterator iter = ebeMultiply . iterator ( null ) ;
Code	Iterator iter = ebeMultiply . iterator ( null ) ;
Distance : 4

26
Tree	Iterator iter = iter ( this . iterator ) ;
Code	Iterator iter = iter ( this . iterator ) ;
Distance : 4

27
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , advance ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , advance ) ;
Distance : 6

28
Tree	Iterator iter = hasNext ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = hasNext ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

29
Tree	Iterator iter = iter . iterator ( hasNext , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( hasNext , NUMBER_CONSTANT ) ;
Distance : 6

30
Tree	Iterator iter = key ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = key ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

31
Tree	Iterator iter = this . key . iterator () ;
Code	Iterator iter = this . key . iterator () ;
Distance : 3

32
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

33
Tree	Iterator hasNext = this . iterator . iterator () ;
Code	Iterator hasNext = this . iterator . iterator () ;
Distance : 4

34
Tree	Iterator iter = ebeMultiply ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = ebeMultiply ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

35
Tree	Iterator iter = advance ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = advance ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

36
Tree	Iterator iter = ebeMultiply ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = ebeMultiply ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

37
Tree	Iterator iter = iter ( this . advance ) ;
Code	Iterator iter = iter ( this . advance ) ;
Distance : 5

38
Tree	Iterator iter = iter ( iter , iter ) ;
Code	Iterator iter = iter ( iter , iter ) ;
Distance : 6

39
Tree	Iterator iter = res . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = res . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

40
Tree	Iterator iter = iterator . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

41
Tree	Iterator iter = ebeMultiply ( iter , iter ) ;
Code	Iterator iter = ebeMultiply ( iter , iter ) ;
Distance : 6

42
Tree	Iterator iter = iter . advance () ;
Code	Iterator iter = iter . advance () ;
Distance : 2

43
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

44
Tree	iterator iter = iter . iterator () ;
Code	iterator iter = iter . iterator () ;
Distance : 2

45
Tree	Iterator iter = key . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = key . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

46
Tree	advance iter = this . iterator . iterator () ;
Code	advance iter = this . iterator . iterator () ;
Distance : 4

47
Tree	Iterator iter = OpenMapRealVector . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = OpenMapRealVector . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

48
Tree	Iterator iter = iter . advance ( iter . class ) ;
Code	Iterator iter = iter . advance ( iter . class ) ;
Distance : 7

49
Tree	Iterator iter = advance ( iter , iter ) ;
Code	Iterator iter = advance ( iter , iter ) ;
Distance : 6

50
Tree	Iterator iter = iterator ( iter , iter ) ;
Code	Iterator iter = iterator ( iter , iter ) ;
Distance : 6

51
Tree	Iterator iter = iter . iterator ( iter , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( iter , NUMBER_CONSTANT ) ;
Distance : 6

52
Tree	Iterator iter = OpenMapRealVector ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = OpenMapRealVector ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

53
Tree	Iterator iter = this . iterator . iterator () ;
Code	Iterator iter = this . iterator . iterator () ;
Distance : 3

54
Tree	Iterator iter = iter ( iter , ebeMultiply ) ;
Code	Iterator iter = iter ( iter , ebeMultiply ) ;
Distance : 6

55
Tree	Iterator iter = ebeMultiply ( this . iterator ) ;
Code	Iterator iter = ebeMultiply ( this . iterator ) ;
Distance : 4

56
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

57
Tree	Iterator iter = advance ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = advance ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

58
Tree	Iterator iter = hasNext . iterator () ;
Code	Iterator iter = hasNext . iterator () ;
Distance : 1

59
Tree	Iterator iter = iter . iterator ( iter . class ) ;
Code	Iterator iter = iter . iterator ( iter . class ) ;
Distance : 6

60
Tree	Iterator iter = hasNext ( iter . class ) ;
Code	Iterator iter = hasNext ( iter . class ) ;
Distance : 5

61
Tree	Iterator iter = iter ( iter , hasNext ) ;
Code	Iterator iter = iter ( iter , hasNext ) ;
Distance : 6

62
Tree	Iterator iter = ebeMultiply . advance () ;
Code	Iterator iter = ebeMultiply . advance () ;
Distance : 2

63
Tree	Iterator iter = ebeMultiply ( iter ) ;
Code	Iterator iter = ebeMultiply ( iter ) ;
Distance : 4

64
Tree	Iterator iter = iter ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

65
Tree	Iterator iter = this . advance . iterator () ;
Code	Iterator iter = this . advance . iterator () ;
Distance : 3

66
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

67
Tree	Iterator iter = iterator ( this . iterator ) ;
Code	Iterator iter = iterator ( this . iterator ) ;
Distance : 4

68
Tree	Iterator iter = getDimension ( iter , iter ) ;
Code	Iterator iter = getDimension ( iter , iter ) ;
Distance : 6

69
Tree	Iterator iter = iter ( iter , advance ) ;
Code	Iterator iter = iter ( iter , advance ) ;
Distance : 6

70
Tree	Iterator iter = iter . iterator ( advance . class ) ;
Code	Iterator iter = iter . iterator ( advance . class ) ;
Distance : 6

71
Tree	Iterator iter = iter ( iter , OpenMapRealVector ) ;
Code	Iterator iter = iter ( iter , OpenMapRealVector ) ;
Distance : 6

72
Tree	Iterator iter = ebeMultiply ( iter ) . iterator () ;
Code	Iterator iter = ebeMultiply ( iter ) . iterator () ;
Distance : 4

73
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

74
Tree	Iterator iter = iter ( res.entries ) ;
Code	Iterator iter = iter ( res.entries ) ;
Distance : 4

75
Tree	Iterator iter = ebeMultiply . iterator () ;
Code	Iterator iter = ebeMultiply . iterator () ;
Distance : 1

76
Tree	Iterator iter = getDimension ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getDimension ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

77
Tree	Iterator iter = iterator ( iter . class ) ;
Code	Iterator iter = iterator ( iter . class ) ;
Distance : 5

78
Tree	Iterator iter = res.entries () ;
Code	Iterator iter = res.entries () ;
Distance : 3

79
Tree	Iterator iter = this . advance . advance () ;
Code	Iterator iter = this . advance . advance () ;
Distance : 4

80
Tree	Iterator iter = this . iterator . advance () ;
Code	Iterator iter = this . iterator . advance () ;
Distance : 3

81
Tree	Iterator iter = getEntry ( iter . class ) ;
Code	Iterator iter = getEntry ( iter . class ) ;
Distance : 5

82
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , iterator ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , iterator ) ;
Distance : 6

83
Tree	Iterator iter = iterator . iterator () ;
Code	Iterator iter = iterator . iterator () ;
Distance : 1

84
Tree	Iterator iter = getDimension ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getDimension ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

85
Tree	Iterator iter = advance () ;
Code	Iterator iter = advance () ;
Distance : 3

86
Tree	Iterator iter = res.entries ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = res.entries ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

87
Tree	Iterator iter = advance ( iter ) ;
Code	Iterator iter = advance ( iter ) ;
Distance : 4

88
Tree	Iterator iter = getEntry . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = getEntry . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

89
Tree	Iterator iter = advance . iterator () ;
Code	Iterator iter = advance . iterator () ;
Distance : 1

90
Tree	Iterator iter = hasNext ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = hasNext ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

91
Tree	Iterator iter = iter ( iter . class ) ;
Code	Iterator iter = iter ( iter . class ) ;
Distance : 5

92
Tree	Iterator iter = OpenMapRealVector . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = OpenMapRealVector . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

93
Tree	Iterator iter = advance ( iter ) . iterator () ;
Code	Iterator iter = advance ( iter ) . iterator () ;
Distance : 4

94
Tree	Iterator iter = iterator ( iter ) ;
Code	Iterator iter = iterator ( iter ) ;
Distance : 4

95
Tree	Iterator iter = res.entries ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries ( NUMBER_CONSTANT ) ;
Distance : 4

96
Tree	Iterator iter = getEntry ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getEntry ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

97
Tree	Iterator iter = iter . iterator ( ebeMultiply , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( ebeMultiply , NUMBER_CONSTANT ) ;
Distance : 6

98
Tree	Iterator iter = OpenMapRealVector . iterator () ;
Code	Iterator iter = OpenMapRealVector . iterator () ;
Distance : 1

99
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , OpenMapRealVector ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , OpenMapRealVector ) ;
Distance : 6

100
Tree	Iterator iter = OpenMapRealVector . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = OpenMapRealVector . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

101
Tree	Iterator iter = res . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

102
Tree	Iterator iter = ebeMultiply . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = ebeMultiply . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

103
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

104
Tree	Iterator iter = ebeMultiply . iterator () ;
Code	Iterator iter = ebeMultiply . iterator () ;
Distance : 1

105
Tree	Iterator iter = OpenMapRealVector . iterator ( null ) ;
Code	Iterator iter = OpenMapRealVector . iterator ( null ) ;
Distance : 4

106
Tree	Iterator iter = key () ;
Code	Iterator iter = key () ;
Distance : 3

107
Tree	Iterator iter = advance ( NUMBER_CONSTANT ) ;
Code	Iterator iter = advance ( NUMBER_CONSTANT ) ;
Distance : 4

108
Tree	Iterator iter = iter . iterator ( key . class ) ;
Code	Iterator iter = iter . iterator ( key . class ) ;
Distance : 6

109
Tree	Iterator iter = res.entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

110
Tree	Iterator iter = OpenMapRealVector ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = OpenMapRealVector ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

111
Tree	Iterator iter = this . res . iterator () ;
Code	Iterator iter = this . res . iterator () ;
Distance : 3

112
Tree	Iterator iter = key ( NUMBER_CONSTANT ) ;
Code	Iterator iter = key ( NUMBER_CONSTANT ) ;
Distance : 4

113
Tree	Iterator iter = key ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = key ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

114
Tree	Iterator iter = iter ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

115
Tree	Iterator iter = ebeMultiply () ;
Code	Iterator iter = ebeMultiply () ;
Distance : 3

116
Tree	Iterator iter = iter . iterator ( iterator . class ) ;
Code	Iterator iter = iter . iterator ( iterator . class ) ;
Distance : 6

117
Tree	Iterator iter = key . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = key . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

118
Tree	Iterator iter = ebeMultiply ( NUMBER_CONSTANT ) ;
Code	Iterator iter = ebeMultiply ( NUMBER_CONSTANT ) ;
Distance : 4

119
Tree	iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

120
Tree	iterator iter = this . iterator . iterator () ;
Code	iterator iter = this . iterator . iterator () ;
Distance : 4

121
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

122
Tree	Iterator iter = getEntry ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getEntry ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

123
Tree	Iterator iter = advance . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = advance . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

124
Tree	Iterator iter = key ( this . iterator ) ;
Code	Iterator iter = key ( this . iterator ) ;
Distance : 4

125
Tree	Iterator iter = getEntry ( iter , iter ) ;
Code	Iterator iter = getEntry ( iter , iter ) ;
Distance : 6

126
Tree	Iterator iter = res.entries ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = res.entries ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

127
Tree	Iterator iter = iter . advance ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . advance ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

128
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

129
Tree	Iterator iter = hasNext . iterator () ;
Code	Iterator iter = hasNext . iterator () ;
Distance : 1

130
Tree	Iterator iter = advance ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = advance ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

131
Tree	Iterator iter = OpenMapRealVector () ;
Code	Iterator iter = OpenMapRealVector () ;
Distance : 3

132
Tree	Iterator iter = ebeMultiply . advance ( NUMBER_CONSTANT ) ;
Code	Iterator iter = ebeMultiply . advance ( NUMBER_CONSTANT ) ;
Distance : 5

133
Tree	Iterator iter = res.entries ( this . iterator ) ;
Code	Iterator iter = res.entries ( this . iterator ) ;
Distance : 4

134
Tree	Iterator iter = iter . iterator ( key , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( key , NUMBER_CONSTANT ) ;
Distance : 6

135
Tree	iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

136
Tree	Iterator iter = ebeMultiply ( iter . class ) ;
Code	Iterator iter = ebeMultiply ( iter . class ) ;
Distance : 5

137
Tree	Iterator iter = iter . advance ( iter , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . advance ( iter , NUMBER_CONSTANT ) ;
Distance : 7

138
Tree	Iterator iter = advance . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = advance . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

139
Tree	Iterator iter = iter . iterator ( null ) ;
Code	Iterator iter = iter . iterator ( null ) ;
Distance : 4

140
Tree	Iterator iter = advance ( this . iterator ) ;
Code	Iterator iter = advance ( this . iterator ) ;
Distance : 4

141
Tree	Iterator iter = advance ( iter . class ) ;
Code	Iterator iter = advance ( iter . class ) ;
Distance : 5

142
Tree	Iterator iter = advance . iterator ( null ) ;
Code	Iterator iter = advance . iterator ( null ) ;
Distance : 4

143
Tree	Iterator iter = iter . advance ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . advance ( NUMBER_CONSTANT ) ;
Distance : 5

144
Tree	Iterator iter = iter . iterator () ;
Code	Iterator iter = iter . iterator () ;
Distance : 1

145
Tree	Iterator iter = OpenMapRealVector ( NUMBER_CONSTANT ) ;
Code	Iterator iter = OpenMapRealVector ( NUMBER_CONSTANT ) ;
Distance : 4

146
Tree	Iterator iter = iterator () ;
Code	Iterator iter = iterator () ;
Distance : 2

147
Tree	Iterator iter = getDimension () ;
Code	Iterator iter = getDimension () ;
Distance : 3

148
Tree	Iterator iter = iterator ( iter ) . iterator () ;
Code	Iterator iter = iterator ( iter ) . iterator () ;
Distance : 4

149
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

150
Tree	Iterator iter = this . Iterator . iterator () ;
Code	Iterator iter = this . Iterator . iterator () ;
Distance : 3

151
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , getEntry ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , getEntry ) ;
Distance : 6

152
Tree	Iterator iter = advance . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = advance . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

153
Tree	Iterator iter = res.entries ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = res.entries ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

154
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 6

155
Tree	Iterator iter = iter . iterator ( iterator , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( iterator , NUMBER_CONSTANT ) ;
Distance : 6

156
Tree	Iterator iter = key ( iter . class ) ;
Code	Iterator iter = key ( iter . class ) ;
Distance : 5

157
Tree	Iterator iter = getEntry ( iter ) ;
Code	Iterator iter = getEntry ( iter ) ;
Distance : 4

158
Tree	Iterator iter = res.entries ( iter . class ) ;
Code	Iterator iter = res.entries ( iter . class ) ;
Distance : 5

159
Tree	Iterator iter = OpenMapRealVector ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = OpenMapRealVector ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

160
Tree	Iterator iter = iter . iterator ( getEntry , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( getEntry , NUMBER_CONSTANT ) ;
Distance : 6

161
Tree	Iterator iter = getDimension ( iter ) . iterator () ;
Code	Iterator iter = getDimension ( iter ) . iterator () ;
Distance : 4

162
Tree	Iterator iter = hasNext . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = hasNext . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

163
Tree	Iterator iter = getDimension ( iter . class ) ;
Code	Iterator iter = getDimension ( iter . class ) ;
Distance : 5

164
Tree	Iterator iter = iter . iterator ( OpenMapRealVector , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( OpenMapRealVector , NUMBER_CONSTANT ) ;
Distance : 6

165
Tree	Iterator iter = iter . iterator ( hasNext . class ) ;
Code	Iterator iter = iter . iterator ( hasNext . class ) ;
Distance : 6

166
Tree	Iterator iter = iter ( hasNext . class ) ;
Code	Iterator iter = iter ( hasNext . class ) ;
Distance : 5

167
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , ebeMultiply ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , ebeMultiply ) ;
Distance : 6

168
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 6

169
Tree	Iterator iter = iter ( hasNext ) ;
Code	Iterator iter = iter ( hasNext ) ;
Distance : 4

170
Tree	Iterator iter = res . iterator () ;
Code	Iterator iter = res . iterator () ;
Distance : 1

171
Tree	Iterator iter = key . iterator () ;
Code	Iterator iter = key . iterator () ;
Distance : 1

172
Tree	Iterator iter = iter . advance () ;
Code	Iterator iter = iter . advance () ;
Distance : 2

173
Tree	Iterator iter = hasNext . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = hasNext . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

174
Tree	Iterator iter = hasNext () ;
Code	Iterator iter = hasNext () ;
Distance : 3

175
Tree	Iterator iter = iter . advance ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . advance ( NUMBER_CONSTANT ) ;
Distance : 5

176
Tree	Iterator iter = iter . iterator () ;
Code	Iterator iter = iter . iterator () ;
Distance : 1

177
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Distance : 4

178
Tree	Iterator iter = getDimension ( NUMBER_CONSTANT ) ;
Code	Iterator iter = getDimension ( NUMBER_CONSTANT ) ;
Distance : 4

179
Tree	Iterator iter = res . iterator ( null ) ;
Code	Iterator iter = res . iterator ( null ) ;
Distance : 4

180
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , iter ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , iter ) ;
Distance : 6

181
Tree	Iterator iter = res.entries ( iter ) . iterator () ;
Code	Iterator iter = res.entries ( iter ) . iterator () ;
Distance : 4

182
Tree	Iterator iter = iter ( res.entries ) . iterator () ;
Code	Iterator iter = iter ( res.entries ) . iterator () ;
Distance : 4

183
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , key ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , key ) ;
Distance : 6

184
Tree	Iterator iter = getDimension ( iter ) ;
Code	Iterator iter = getDimension ( iter ) ;
Distance : 4

185
Tree	Iterator iter = hasNext ( NUMBER_CONSTANT ) ;
Code	Iterator iter = hasNext ( NUMBER_CONSTANT ) ;
Distance : 4

186
Tree	Iterator iter = res.entries ( iter ) ;
Code	Iterator iter = res.entries ( iter ) ;
Distance : 4

187
Tree	Iterator iter = iter ( hasNext ) . iterator () ;
Code	Iterator iter = iter ( hasNext ) . iterator () ;
Distance : 4

188
Tree	Iterator iter = OpenMapRealVector . iterator () ;
Code	Iterator iter = OpenMapRealVector . iterator () ;
Distance : 1

189
Tree	Iterator iter = iter . iterator ( res.entries . class ) ;
Code	Iterator iter = iter . iterator ( res.entries . class ) ;
Distance : 6

190
Tree	Iterator iter = getEntry ( iter ) . iterator () ;
Code	Iterator iter = getEntry ( iter ) . iterator () ;
Distance : 4

191
Tree	Iterator iter = hasNext . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = hasNext . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

192
Tree	Iterator iter = ebeMultiply ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = ebeMultiply ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

193
Tree	Iterator iter = key . iterator ( null ) ;
Code	Iterator iter = key . iterator ( null ) ;
Distance : 4

194
Tree	iterator iter = iter . iterator ( null ) ;
Code	iterator iter = iter . iterator ( null ) ;
Distance : 5

195
Tree	Iterator iter = iter ( iter ) . iterator () ;
Code	Iterator iter = iter ( iter ) . iterator () ;
Distance : 4

196
Tree	Iterator iter = hasNext ( iter ) . iterator () ;
Code	Iterator iter = hasNext ( iter ) . iterator () ;
Distance : 4

197
Tree	Iterator iter = getEntry . iterator () ;
Code	Iterator iter = getEntry . iterator () ;
Distance : 1

198
Tree	Iterator iter = key ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = key ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

199
Tree	Iterator iter = hasNext ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = hasNext ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

========================================================================


========================================================================
Example Number: 65
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Iterator iter = iter ( this . advance ) ;
Code	Iterator iter = iter ( this . advance ) ;
Distance : 5

1
Tree	Iterator iter = res . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = res . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

2
Tree	Iterator iter = key . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = key . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

3
Tree	Iterator iter = iter . iterator ( iter , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( iter , NUMBER_CONSTANT ) ;
Distance : 6

4
Tree	Iterator iter = iter ( iter . class ) ;
Code	Iterator iter = iter ( iter . class ) ;
Distance : 5

5
Tree	Iterator iter = res.entries () ;
Code	Iterator iter = res.entries () ;
Distance : 3

6
Tree	Iterator iter = hasNext ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = hasNext ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

7
Tree	Iterator iter = res.entries ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries ( NUMBER_CONSTANT ) ;
Distance : 4

8
Tree	Iterator iter = OpenMapRealVector . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = OpenMapRealVector . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

9
Tree	Iterator iter = res . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

10
Tree	Iterator iter = res ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = res ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

11
Tree	Iterator iter = res.entries . iterator ( iter . class ) ;
Code	Iterator iter = res.entries . iterator ( iter . class ) ;
Distance : 6

12
Tree	Iterator iter = iter . iterator ( advance , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( advance , NUMBER_CONSTANT ) ;
Distance : 6

13
Tree	Iterator iter = key . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = key . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

14
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , advance ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , advance ) ;
Distance : 6

15
Tree	Iterator iter = res.entries ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = res.entries ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

16
Tree	Iterator iter = iter () ;
Code	Iterator iter = iter () ;
Distance : 3

17
Tree	Iterator iter = key ( this . iterator ) ;
Code	Iterator iter = key ( this . iterator ) ;
Distance : 4

18
Tree	Iterator iter = iter ( iterator ) ;
Code	Iterator iter = iter ( iterator ) ;
Distance : 3

19
Tree	Iterator iter = res . iterator () ;
Code	Iterator iter = res . iterator () ;
Distance : 1

20
Tree	Iterator iter = iter . iterator ( hasNext , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( hasNext , NUMBER_CONSTANT ) ;
Distance : 6

21
Tree	Iterator iter = advance . advance () ;
Code	Iterator iter = advance . advance () ;
Distance : 2

22
Tree	Iterator iter = iter ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter ( NUMBER_CONSTANT ) ;
Distance : 4

23
Tree	Iterator iter = advance ( this . advance ) ;
Code	Iterator iter = advance ( this . advance ) ;
Distance : 5

24
Tree	Iterator iter = ebeDivide . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = ebeDivide . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

25
Tree	Iterator iter = iter ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

26
Tree	Iterator iter = hasNext ( iter . class ) ;
Code	Iterator iter = hasNext ( iter . class ) ;
Distance : 5

27
Tree	Iterator iter = iter ( this . iterator ) ;
Code	Iterator iter = iter ( this . iterator ) ;
Distance : 4

28
Tree	Iterator iter = iter ( iter , iter ) ;
Code	Iterator iter = iter ( iter , iter ) ;
Distance : 6

29
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , iterator ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , iterator ) ;
Distance : 6

30
Tree	Iterator iter = res.entries ( this . iterator ) ;
Code	Iterator iter = res.entries ( this . iterator ) ;
Distance : 4

31
Tree	Iterator iter = advance ( iter ) . iterator () ;
Code	Iterator iter = advance ( iter ) . iterator () ;
Distance : 4

32
Tree	Iterator iter = res . iterator ( null ) ;
Code	Iterator iter = res . iterator ( null ) ;
Distance : 4

33
Tree	Iterator iter = advance ( iter . class ) ;
Code	Iterator iter = advance ( iter . class ) ;
Distance : 5

34
Tree	Iterator iter = this . key . iterator () ;
Code	Iterator iter = this . key . iterator () ;
Distance : 3

35
Tree	Iterator iter = advance ( iter , iter ) ;
Code	Iterator iter = advance ( iter , iter ) ;
Distance : 6

36
Tree	Iterator iter = key . iterator ( null ) ;
Code	Iterator iter = key . iterator ( null ) ;
Distance : 4

37
Tree	Iterator hasNext = this . iterator . iterator () ;
Code	Iterator hasNext = this . iterator . iterator () ;
Distance : 4

38
Tree	Iterator iter = advance ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = advance ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

39
Tree	Iterator iter = this . iterator . iterator () ;
Code	Iterator iter = this . iterator . iterator () ;
Distance : 3

40
Tree	Iterator iter = iterator . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

41
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Distance : 4

42
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

43
Tree	Iterator iter = ebeDivide () ;
Code	Iterator iter = ebeDivide () ;
Distance : 3

44
Tree	Iterator iter = iterator . iterator () ;
Code	Iterator iter = iterator . iterator () ;
Distance : 1

45
Tree	Iterator iter = iterator ( iter , iter ) ;
Code	Iterator iter = iterator ( iter , iter ) ;
Distance : 6

46
Tree	Iterator iter = OpenMapRealVector . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = OpenMapRealVector . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

47
Tree	Iterator iter = OpenMapRealVector . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = OpenMapRealVector . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

48
Tree	Iterator iter = OpenMapRealVector . iterator () ;
Code	Iterator iter = OpenMapRealVector . iterator () ;
Distance : 1

49
Tree	Iterator iter = iter ( iter , hasNext ) ;
Code	Iterator iter = iter ( iter , hasNext ) ;
Distance : 6

50
Tree	Iterator iter = iter . advance () ;
Code	Iterator iter = iter . advance () ;
Distance : 2

51
Tree	Iterator iter = advance ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = advance ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

52
Tree	Iterator iter = this . advance . iterator () ;
Code	Iterator iter = this . advance . iterator () ;
Distance : 3

53
Tree	Iterator iter = iter ( iter ) . iterator () ;
Code	Iterator iter = iter ( iter ) . iterator () ;
Distance : 4

54
Tree	Iterator iter = OpenMapRealVector . iterator ( null ) ;
Code	Iterator iter = OpenMapRealVector . iterator ( null ) ;
Distance : 4

55
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

56
Tree	Iterator iter = ebeDivide ( NUMBER_CONSTANT ) ;
Code	Iterator iter = ebeDivide ( NUMBER_CONSTANT ) ;
Distance : 4

57
Tree	advance iter = this . iterator . iterator () ;
Code	advance iter = this . iterator . iterator () ;
Distance : 4

58
Tree	Iterator iter = iter . iterator ( iterator . class ) ;
Code	Iterator iter = iter . iterator ( iterator . class ) ;
Distance : 6

59
Tree	Iterator iter = iter . iterator ( iter . class ) ;
Code	Iterator iter = iter . iterator ( iter . class ) ;
Distance : 6

60
Tree	Iterator iter = ebeDivide ( iter , iter ) ;
Code	Iterator iter = ebeDivide ( iter , iter ) ;
Distance : 6

61
Tree	Iterator iter = iter ( iter , advance ) ;
Code	Iterator iter = iter ( iter , advance ) ;
Distance : 6

62
Tree	Iterator iter = iter ( hasNext ) ;
Code	Iterator iter = iter ( hasNext ) ;
Distance : 4

63
Tree	Iterator iter = iter . iterator ( advance . class ) ;
Code	Iterator iter = iter . iterator ( advance . class ) ;
Distance : 6

64
Tree	Iterator iter = res ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = res ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

65
Tree	Iterator iter = this . iterator . advance () ;
Code	Iterator iter = this . iterator . advance () ;
Distance : 3

66
Tree	Iterator iter = iterator ( this . iterator ) ;
Code	Iterator iter = iterator ( this . iterator ) ;
Distance : 4

67
Tree	Iterator iter = ebeDivide ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = ebeDivide ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

68
Tree	Iterator iter = hasNext . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = hasNext . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

69
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , ebeDivide ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , ebeDivide ) ;
Distance : 6

70
Tree	Iterator iter = iter ( iter , OpenMapRealVector ) ;
Code	Iterator iter = iter ( iter , OpenMapRealVector ) ;
Distance : 6

71
Tree	Iterator iter = iterator ( this . advance ) ;
Code	Iterator iter = iterator ( this . advance ) ;
Distance : 5

72
Tree	Iterator iter = iter ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

73
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

74
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , OpenMapRealVector ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , OpenMapRealVector ) ;
Distance : 6

75
Tree	Iterator iter = iterator ( iter . class ) ;
Code	Iterator iter = iterator ( iter . class ) ;
Distance : 5

76
Tree	Iterator iter = this . advance . advance () ;
Code	Iterator iter = this . advance . advance () ;
Distance : 4

77
Tree	Iterator iter = iterator ( iter ) . iterator () ;
Code	Iterator iter = iterator ( iter ) . iterator () ;
Distance : 4

78
Tree	Iterator iter = iter ( ebeDivide ) ;
Code	Iterator iter = iter ( ebeDivide ) ;
Distance : 4

79
Tree	Iterator iter = iter ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

80
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

81
Tree	Iterator iter = res.entries ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = res.entries ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

82
Tree	Iterator iter = ebeDivide ( this . iterator ) ;
Code	Iterator iter = ebeDivide ( this . iterator ) ;
Distance : 4

83
Tree	Iterator iter = iter ( iter , res.entries ) ;
Code	Iterator iter = iter ( iter , res.entries ) ;
Distance : 6

84
Tree	Iterator iter = iter ( iter , ebeDivide ) ;
Code	Iterator iter = iter ( iter , ebeDivide ) ;
Distance : 6

85
Tree	Iterator iter = iter . advance ( iter , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . advance ( iter , NUMBER_CONSTANT ) ;
Distance : 7

86
Tree	Iterator iter = advance . iterator () ;
Code	Iterator iter = advance . iterator () ;
Distance : 1

87
Tree	Iterator iter = iter . iterator ( res.entries . class ) ;
Code	Iterator iter = iter . iterator ( res.entries . class ) ;
Distance : 6

88
Tree	Iterator iter = ebeDivide ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = ebeDivide ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

89
Tree	Iterator iter = iter . advance () ;
Code	Iterator iter = iter . advance () ;
Distance : 2

90
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

91
Tree	Iterator iter = setEntry () ;
Code	Iterator iter = setEntry () ;
Distance : 3

92
Tree	Iterator iter = ebeDivide . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = ebeDivide . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

93
Tree	iterator iter = this . iterator . iterator () ;
Code	iterator iter = this . iterator . iterator () ;
Distance : 4

94
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

95
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , hasNext ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , hasNext ) ;
Distance : 6

96
Tree	Iterator iter = hasNext () ;
Code	Iterator iter = hasNext () ;
Distance : 3

97
Tree	Iterator iter = advance () ;
Code	Iterator iter = advance () ;
Distance : 3

98
Tree	Iterator iter = res.entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

99
Tree	Iterator iter = iter ( iter ) ;
Code	Iterator iter = iter ( iter ) ;
Distance : 4

100
Tree	Iterator iter = hasNext . iterator () ;
Code	Iterator iter = hasNext . iterator () ;
Distance : 1

101
Tree	Iterator iter = setEntry ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = setEntry ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

102
Tree	Iterator iter = advance ( NUMBER_CONSTANT ) ;
Code	Iterator iter = advance ( NUMBER_CONSTANT ) ;
Distance : 4

103
Tree	Iterator iter = advance ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = advance ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

104
Tree	iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

105
Tree	Iterator iter = hasNext ( NUMBER_CONSTANT ) ;
Code	Iterator iter = hasNext ( NUMBER_CONSTANT ) ;
Distance : 4

106
Tree	iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

107
Tree	Iterator iter = OpenMapRealVector . iterator () ;
Code	Iterator iter = OpenMapRealVector . iterator () ;
Distance : 1

108
Tree	Iterator iter = iter . iterator ( iterator , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( iterator , NUMBER_CONSTANT ) ;
Distance : 6

109
Tree	Iterator iter = iter . iterator ( key . class ) ;
Code	Iterator iter = iter . iterator ( key . class ) ;
Distance : 6

110
Tree	Iterator iter = OpenMapRealVector () ;
Code	Iterator iter = OpenMapRealVector () ;
Distance : 3

111
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , iter ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , iter ) ;
Distance : 6

112
Tree	Iterator iter = ebeDivide ( iter ) . iterator () ;
Code	Iterator iter = ebeDivide ( iter ) . iterator () ;
Distance : 4

113
Tree	Iterator iter = hasNext . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = hasNext . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

114
Tree	Iterator iter = iter . iterator ( ebeDivide , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( ebeDivide , NUMBER_CONSTANT ) ;
Distance : 6

115
Tree	Iterator iter = ebeDivide . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = ebeDivide . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

116
Tree	iterator iter = iter . iterator ( null ) ;
Code	iterator iter = iter . iterator ( null ) ;
Distance : 5

117
Tree	Iterator iter = iter . advance ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . advance ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

118
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

119
Tree	Iterator iter = key ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = key ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

120
Tree	Iterator iter = hasNext ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = hasNext ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

121
Tree	Iterator iter = OpenMapRealVector ( NUMBER_CONSTANT ) ;
Code	Iterator iter = OpenMapRealVector ( NUMBER_CONSTANT ) ;
Distance : 4

122
Tree	Iterator iter = advance . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = advance . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

123
Tree	Iterator iter = setEntry ( NUMBER_CONSTANT ) ;
Code	Iterator iter = setEntry ( NUMBER_CONSTANT ) ;
Distance : 4

124
Tree	Iterator iter = res . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

125
Tree	Iterator iter = ebeDivide ( iter ) ;
Code	Iterator iter = ebeDivide ( iter ) ;
Distance : 4

126
Tree	Iterator iter = this . res . iterator () ;
Code	Iterator iter = this . res . iterator () ;
Distance : 3

127
Tree	Iterator iter = OpenMapRealVector ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = OpenMapRealVector ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

128
Tree	Iterator iter = setEntry ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = setEntry ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

129
Tree	Iterator iter = advance . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = advance . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

130
Tree	Iterator iter = advance ( this . iterator ) ;
Code	Iterator iter = advance ( this . iterator ) ;
Distance : 4

131
Tree	Iterator iter = hasNext ( iter ) ;
Code	Iterator iter = hasNext ( iter ) ;
Distance : 4

132
Tree	Iterator iter = iter ( res.entries . class ) ;
Code	Iterator iter = iter ( res.entries . class ) ;
Distance : 5

133
Tree	Iterator iter = iterator () ;
Code	Iterator iter = iterator () ;
Distance : 2

134
Tree	Iterator iter = iter ( res.entries ) . iterator () ;
Code	Iterator iter = iter ( res.entries ) . iterator () ;
Distance : 4

135
Tree	Iterator iter = res.entries ( iter , iter ) ;
Code	Iterator iter = res.entries ( iter , iter ) ;
Distance : 6

136
Tree	Iterator iter = iter . advance ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . advance ( NUMBER_CONSTANT ) ;
Distance : 5

137
Tree	Iterator iter = iter . iterator ( null ) ;
Code	Iterator iter = iter . iterator ( null ) ;
Distance : 4

138
Tree	Iterator iter = advance . iterator ( null ) ;
Code	Iterator iter = advance . iterator ( null ) ;
Distance : 4

139
Tree	Iterator iter = advance . iterator () ;
Code	Iterator iter = advance . iterator () ;
Distance : 1

140
Tree	Iterator iter = res . iterator () ;
Code	Iterator iter = res . iterator () ;
Distance : 1

141
Tree	Iterator iter = hasNext ( this . iterator ) ;
Code	Iterator iter = hasNext ( this . iterator ) ;
Distance : 4

142
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 6

143
Tree	Iterator iter = key . iterator () ;
Code	Iterator iter = key . iterator () ;
Distance : 1

144
Tree	Iterator iter = hasNext . iterator ( null ) ;
Code	Iterator iter = hasNext . iterator ( null ) ;
Distance : 4

145
Tree	Iterator iter = ebeDivide ( iter . class ) ;
Code	Iterator iter = ebeDivide ( iter . class ) ;
Distance : 5

146
Tree	Iterator iter = iter . advance ( NUMBER_CONSTANT , iter ) ;
Code	Iterator iter = iter . advance ( NUMBER_CONSTANT , iter ) ;
Distance : 7

147
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

148
Tree	Iterator iter = iter . iterator () ;
Code	Iterator iter = iter . iterator () ;
Distance : 1

149
Tree	Iterator iter = res.entries ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = res.entries ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

150
Tree	Iterator iter = res ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = res ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

151
Tree	Iterator iter = iter . iterator ( key , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( key , NUMBER_CONSTANT ) ;
Distance : 6

152
Tree	Iterator iter = advance . advance ( NUMBER_CONSTANT ) ;
Code	Iterator iter = advance . advance ( NUMBER_CONSTANT ) ;
Distance : 5

153
Tree	Iterator iter = iter . advance ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . advance ( NUMBER_CONSTANT ) ;
Distance : 5

154
Tree	Iterator iter = this . Iterator . iterator () ;
Code	Iterator iter = this . Iterator . iterator () ;
Distance : 3

155
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

156
Tree	Iterator iter = hasNext ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = hasNext ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

157
Tree	Iterator iter = key ( iter . class ) ;
Code	Iterator iter = key ( iter . class ) ;
Distance : 5

158
Tree	Iterator iter = iter . iterator ( OpenMapRealVector , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( OpenMapRealVector , NUMBER_CONSTANT ) ;
Distance : 6

159
Tree	Iterator iter = iter ( hasNext . class ) ;
Code	Iterator iter = iter ( hasNext . class ) ;
Distance : 5

160
Tree	Iterator iter = res.entries ( iter . class ) ;
Code	Iterator iter = res.entries ( iter . class ) ;
Distance : 5

161
Tree	Iterator iter = res () ;
Code	Iterator iter = res () ;
Distance : 3

162
Tree	Iterator iter = setEntry ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = setEntry ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

163
Tree	Iterator iter = OpenMapRealVector ( iter . class ) ;
Code	Iterator iter = OpenMapRealVector ( iter . class ) ;
Distance : 5

164
Tree	Iterator iter = ebeDivide ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = ebeDivide ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

165
Tree	Iterator iter = iter . iterator ( hasNext . class ) ;
Code	Iterator iter = iter . iterator ( hasNext . class ) ;
Distance : 6

166
Tree	Iterator iter = advance . iterator ( iter , NUMBER_CONSTANT ) ;
Code	Iterator iter = advance . iterator ( iter , NUMBER_CONSTANT ) ;
Distance : 6

167
Tree	Iterator iter = iter . iterator ( res . class ) ;
Code	Iterator iter = iter . iterator ( res . class ) ;
Distance : 6

168
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , key ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , key ) ;
Distance : 6

169
Tree	Iterator iter = res ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res ( NUMBER_CONSTANT ) ;
Distance : 4

170
Tree	Iterator iter = ebeDivide . iterator () ;
Code	Iterator iter = ebeDivide . iterator () ;
Distance : 1

171
Tree	Iterator iter = iter . advance ( iter . class ) ;
Code	Iterator iter = iter . advance ( iter . class ) ;
Distance : 7

172
Tree	Iterator iter = ebeDivide . iterator () ;
Code	Iterator iter = ebeDivide . iterator () ;
Distance : 1

173
Tree	Iterator iter = OpenMapRealVector ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = OpenMapRealVector ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

174
Tree	Iterator iter = hasNext . iterator () ;
Code	Iterator iter = hasNext . iterator () ;
Distance : 1

175
Tree	Iterator iter = iter . advance ( null ) ;
Code	Iterator iter = iter . advance ( null ) ;
Distance : 5

176
Tree	Iterator iter = iter . iterator () ;
Code	Iterator iter = iter . iterator () ;
Distance : 1

177
Tree	Iterator iter = iter ( hasNext ) . iterator () ;
Code	Iterator iter = iter ( hasNext ) . iterator () ;
Distance : 4

178
Tree	Iterator iter = res.entries . iterator ( null ) ;
Code	Iterator iter = res.entries . iterator ( null ) ;
Distance : 4

179
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

180
Tree	Iterator iter = hasNext . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = hasNext . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

181
Tree	Iterator iter = key ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = key ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

182
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , setEntry ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , setEntry ) ;
Distance : 6

183
Tree	Iterator iter = hasNext ( iter ) . iterator () ;
Code	Iterator iter = hasNext ( iter ) . iterator () ;
Distance : 4

184
Tree	Iterator iter = iter ( iterator ) . iterator () ;
Code	Iterator iter = iter ( iterator ) . iterator () ;
Distance : 4

185
Tree	Iterator iter = res.entries ( iter ) ;
Code	Iterator iter = res.entries ( iter ) ;
Distance : 4

186
Tree	Iterator iter = OpenMapRealVector ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = OpenMapRealVector ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

187
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 6

188
Tree	Iterator iter = advance ( iter ) ;
Code	Iterator iter = advance ( iter ) ;
Distance : 4

189
Tree	Iterator iter = advance . iterator ( iter . class ) ;
Code	Iterator iter = advance . iterator ( iter . class ) ;
Distance : 6

190
Tree	Iterator iter = res.entries ( iter ) . iterator () ;
Code	Iterator iter = res.entries ( iter ) . iterator () ;
Distance : 4

191
Tree	Iterator iter = iterator ( iter ) ;
Code	Iterator iter = iterator ( iter ) ;
Distance : 4

192
Tree	Iterator iter = advance . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = advance . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

193
Tree	Iterator iter = ebeDivide . iterator ( null ) ;
Code	Iterator iter = ebeDivide . iterator ( null ) ;
Distance : 4

194
Tree	iterator iter = iter . iterator () ;
Code	iterator iter = iter . iterator () ;
Distance : 2

195
Tree	Iterator iter = iter ( res.entries ) ;
Code	Iterator iter = iter ( res.entries ) ;
Distance : 4

196
Tree	Iterator iter = iter ( ebeDivide ) . iterator () ;
Code	Iterator iter = iter ( ebeDivide ) . iterator () ;
Distance : 4

197
Tree	Iterator iter = key () ;
Code	Iterator iter = key () ;
Distance : 3

198
Tree	Iterator iter = key ( NUMBER_CONSTANT ) ;
Code	Iterator iter = key ( NUMBER_CONSTANT ) ;
Distance : 4

199
Tree	Iterator iter = key ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = key ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

========================================================================


========================================================================
Example Number: 66
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Iterator iter = ebeDivide () ;
Code	Iterator iter = ebeDivide () ;
Distance : 3

1
Tree	Iterator iter = ebeDivide ( NUMBER_CONSTANT ) ;
Code	Iterator iter = ebeDivide ( NUMBER_CONSTANT ) ;
Distance : 4

2
Tree	Iterator iter = ebeDivide ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = ebeDivide ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

3
Tree	Iterator iter = ebeDivide ( this . iterator ) ;
Code	Iterator iter = ebeDivide ( this . iterator ) ;
Distance : 4

4
Tree	Iterator iter = iter ( iter ) ;
Code	Iterator iter = iter ( iter ) ;
Distance : 4

5
Tree	Iterator iter = getEntry () ;
Code	Iterator iter = getEntry () ;
Distance : 3

6
Tree	Iterator iter = getEntry ( NUMBER_CONSTANT ) ;
Code	Iterator iter = getEntry ( NUMBER_CONSTANT ) ;
Distance : 4

7
Tree	Iterator iter = getEntry ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getEntry ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

8
Tree	Iterator iter = getEntry ( this . iterator ) ;
Code	Iterator iter = getEntry ( this . iterator ) ;
Distance : 4

9
Tree	Iterator iter = advance . iterator () ;
Code	Iterator iter = advance . iterator () ;
Distance : 1

10
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , hasNext ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , hasNext ) ;
Distance : 6

11
Tree	Iterator iter = hasNext ( iter ) ;
Code	Iterator iter = hasNext ( iter ) ;
Distance : 4

12
Tree	Iterator iter = hasNext ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = hasNext ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

13
Tree	Iterator iter = iter . advance ( NUMBER_CONSTANT , iter ) ;
Code	Iterator iter = iter . advance ( NUMBER_CONSTANT , iter ) ;
Distance : 7

14
Tree	Iterator iter = iter . iterator ( res . class ) ;
Code	Iterator iter = iter . iterator ( res . class ) ;
Distance : 6

15
Tree	Iterator iter = hasNext . iterator ( null ) ;
Code	Iterator iter = hasNext . iterator ( null ) ;
Distance : 4

16
Tree	Iterator iter = iter () ;
Code	Iterator iter = iter () ;
Distance : 3

17
Tree	Iterator iter = iter ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter ( NUMBER_CONSTANT ) ;
Distance : 4

18
Tree	Iterator iter = key ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = key ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

19
Tree	Iterator iter = ebeDivide . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = ebeDivide . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

20
Tree	Iterator iter = advance . iterator ( iter . class ) ;
Code	Iterator iter = advance . iterator ( iter . class ) ;
Distance : 6

21
Tree	Iterator iter = iter ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

22
Tree	Iterator iter = res.entries . iterator ( iter . class ) ;
Code	Iterator iter = res.entries . iterator ( iter . class ) ;
Distance : 6

23
Tree	Iterator iter = iter . iterator ( advance , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( advance , NUMBER_CONSTANT ) ;
Distance : 6

24
Tree	Iterator iter = iter ( this . iterator ) ;
Code	Iterator iter = iter ( this . iterator ) ;
Distance : 4

25
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

26
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , advance ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , advance ) ;
Distance : 6

27
Tree	Iterator iter = iter ( this . advance ) ;
Code	Iterator iter = iter ( this . advance ) ;
Distance : 5

28
Tree	Iterator iter = iter . iterator ( hasNext , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( hasNext , NUMBER_CONSTANT ) ;
Distance : 6

29
Tree	Iterator iter = res . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = res . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

30
Tree	iterator iter = iter . iterator () ;
Code	iterator iter = iter . iterator () ;
Distance : 2

31
Tree	Iterator iter = this . key . iterator () ;
Code	Iterator iter = this . key . iterator () ;
Distance : 3

32
Tree	Iterator iter = key . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = key . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

33
Tree	Iterator hasNext = this . iterator . iterator () ;
Code	Iterator hasNext = this . iterator . iterator () ;
Distance : 4

34
Tree	Iterator iter = advance ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = advance ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

35
Tree	Iterator iter = iterator . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

36
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

37
Tree	Iterator iter = iter . iterator ( iter , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( iter , NUMBER_CONSTANT ) ;
Distance : 6

38
Tree	Iterator iter = iter ( iter , iter ) ;
Code	Iterator iter = iter ( iter , iter ) ;
Distance : 6

39
Tree	Iterator iter = iter ( iter . class ) ;
Code	Iterator iter = iter ( iter . class ) ;
Distance : 5

40
Tree	Iterator iter = OpenMapRealVector . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = OpenMapRealVector . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

41
Tree	Iterator iter = res.entries () ;
Code	Iterator iter = res.entries () ;
Distance : 3

42
Tree	Iterator iter = advance ( iter , iter ) ;
Code	Iterator iter = advance ( iter , iter ) ;
Distance : 6

43
Tree	Iterator iter = iter . advance () ;
Code	Iterator iter = iter . advance () ;
Distance : 2

44
Tree	Iterator iter = advance ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = advance ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

45
Tree	Iterator iter = ebeDivide . iterator () ;
Code	Iterator iter = ebeDivide . iterator () ;
Distance : 1

46
Tree	Iterator iter = hasNext ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = hasNext ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

47
Tree	advance iter = this . iterator . iterator () ;
Code	advance iter = this . iterator . iterator () ;
Distance : 4

48
Tree	Iterator iter = iter . iterator ( iter . class ) ;
Code	Iterator iter = iter . iterator ( iter . class ) ;
Distance : 6

49
Tree	Iterator iter = iter . advance ( iter . class ) ;
Code	Iterator iter = iter . advance ( iter . class ) ;
Distance : 7

50
Tree	Iterator iter = iterator ( iter , iter ) ;
Code	Iterator iter = iterator ( iter , iter ) ;
Distance : 6

51
Tree	Iterator iter = iter ( iter , hasNext ) ;
Code	Iterator iter = iter ( iter , hasNext ) ;
Distance : 6

52
Tree	Iterator iter = OpenMapRealVector ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = OpenMapRealVector ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

53
Tree	Iterator iter = hasNext . iterator () ;
Code	Iterator iter = hasNext . iterator () ;
Distance : 1

54
Tree	Iterator iter = this . iterator . iterator () ;
Code	Iterator iter = this . iterator . iterator () ;
Distance : 3

55
Tree	Iterator iter = getDimension ( iter , iter ) ;
Code	Iterator iter = getDimension ( iter , iter ) ;
Distance : 6

56
Tree	Iterator iter = advance ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = advance ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

57
Tree	Iterator iter = advance . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = advance . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

58
Tree	Iterator iter = hasNext . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = hasNext . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

59
Tree	Iterator iter = ebeDivide ( iter , iter ) ;
Code	Iterator iter = ebeDivide ( iter , iter ) ;
Distance : 6

60
Tree	Iterator iter = getDimension . iterator () ;
Code	Iterator iter = getDimension . iterator () ;
Distance : 1

61
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

62
Tree	Iterator iter = hasNext ( iter . class ) ;
Code	Iterator iter = hasNext ( iter . class ) ;
Distance : 5

63
Tree	Iterator iter = iter ( iter , advance ) ;
Code	Iterator iter = iter ( iter , advance ) ;
Distance : 6

64
Tree	Iterator iter = OpenMapRealVector ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = OpenMapRealVector ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

65
Tree	Iterator iter = iter ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

66
Tree	Iterator iter = this . advance . iterator () ;
Code	Iterator iter = this . advance . iterator () ;
Distance : 3

67
Tree	Iterator iter = advance ( this . iterator ) ;
Code	Iterator iter = advance ( this . iterator ) ;
Distance : 4

68
Tree	Iterator iter = advance . iterator ( null ) ;
Code	Iterator iter = advance . iterator ( null ) ;
Distance : 4

69
Tree	Iterator iter = iter ( iter , OpenMapRealVector ) ;
Code	Iterator iter = iter ( iter , OpenMapRealVector ) ;
Distance : 6

70
Tree	Iterator iter = getEntry ( iter , iter ) ;
Code	Iterator iter = getEntry ( iter , iter ) ;
Distance : 6

71
Tree	Iterator iter = ebeDivide ( iter ) ;
Code	Iterator iter = ebeDivide ( iter ) ;
Distance : 4

72
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , iterator ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , iterator ) ;
Distance : 6

73
Tree	Iterator iter = getDimension ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getDimension ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

74
Tree	Iterator iter = getEntry ( iter . class ) ;
Code	Iterator iter = getEntry ( iter . class ) ;
Distance : 5

75
Tree	Iterator iter = getDimension ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getDimension ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

76
Tree	Iterator iter = getEntry . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = getEntry . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

77
Tree	Iterator iter = ebeDivide ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = ebeDivide ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

78
Tree	Iterator iter = iter . iterator ( key . class ) ;
Code	Iterator iter = iter . iterator ( key . class ) ;
Distance : 6

79
Tree	Iterator iter = OpenMapRealVector . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = OpenMapRealVector . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

80
Tree	Iterator iter = this . advance . advance () ;
Code	Iterator iter = this . advance . advance () ;
Distance : 4

81
Tree	Iterator iter = this . iterator . advance () ;
Code	Iterator iter = this . iterator . advance () ;
Distance : 3

82
Tree	Iterator iter = iter . iterator ( iterator . class ) ;
Code	Iterator iter = iter . iterator ( iterator . class ) ;
Distance : 6

83
Tree	Iterator iter = advance ( iter ) . iterator () ;
Code	Iterator iter = advance ( iter ) . iterator () ;
Distance : 4

84
Tree	Iterator iter = OpenMapRealVector . iterator ( null ) ;
Code	Iterator iter = OpenMapRealVector . iterator ( null ) ;
Distance : 4

85
Tree	Iterator iter = advance . iterator () ;
Code	Iterator iter = advance . iterator () ;
Distance : 1

86
Tree	Iterator iter = iterator () ;
Code	Iterator iter = iterator () ;
Distance : 2

87
Tree	Iterator iter = getDimension () ;
Code	Iterator iter = getDimension () ;
Distance : 3

88
Tree	Iterator iter = res . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

89
Tree	Iterator iter = iterator ( iter ) ;
Code	Iterator iter = iterator ( iter ) ;
Distance : 4

90
Tree	Iterator iter = getEntry ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getEntry ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

91
Tree	Iterator iter = iter . advance () ;
Code	Iterator iter = iter . advance () ;
Distance : 2

92
Tree	Iterator iter = key . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = key . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

93
Tree	iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

94
Tree	Iterator iter = res.entries ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries ( NUMBER_CONSTANT ) ;
Distance : 4

95
Tree	Iterator iter = ebeDivide . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = ebeDivide . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

96
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , OpenMapRealVector ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , OpenMapRealVector ) ;
Distance : 6

97
Tree	Iterator iter = key () ;
Code	Iterator iter = key () ;
Distance : 3

98
Tree	Iterator iter = key ( NUMBER_CONSTANT ) ;
Code	Iterator iter = key ( NUMBER_CONSTANT ) ;
Distance : 4

99
Tree	Iterator iter = res.entries ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = res.entries ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

100
Tree	Iterator iter = iterator ( iter ) . iterator () ;
Code	Iterator iter = iterator ( iter ) . iterator () ;
Distance : 4

101
Tree	Iterator iter = hasNext . iterator () ;
Code	Iterator iter = hasNext . iterator () ;
Distance : 1

102
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , getEntry ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , getEntry ) ;
Distance : 6

103
Tree	Iterator iter = res.entries ( this . iterator ) ;
Code	Iterator iter = res.entries ( this . iterator ) ;
Distance : 4

104
Tree	Iterator iter = res . iterator ( null ) ;
Code	Iterator iter = res . iterator ( null ) ;
Distance : 4

105
Tree	Iterator iter = iter ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

106
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

107
Tree	iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

108
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , iter ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , iter ) ;
Distance : 6

109
Tree	Iterator iter = key ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = key ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

110
Tree	Iterator iter = ebeDivide . iterator () ;
Code	Iterator iter = ebeDivide . iterator () ;
Distance : 1

111
Tree	Iterator iter = OpenMapRealVector () ;
Code	Iterator iter = OpenMapRealVector () ;
Distance : 3

112
Tree	Iterator iter = res.entries ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = res.entries ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

113
Tree	Iterator iter = advance ( iter ) ;
Code	Iterator iter = advance ( iter ) ;
Distance : 4

114
Tree	Iterator iter = this . res . iterator () ;
Code	Iterator iter = this . res . iterator () ;
Distance : 3

115
Tree	Iterator iter = key ( this . iterator ) ;
Code	Iterator iter = key ( this . iterator ) ;
Distance : 4

116
Tree	Iterator iter = advance ( iter . class ) ;
Code	Iterator iter = advance ( iter . class ) ;
Distance : 5

117
Tree	iterator iter = this . iterator . iterator () ;
Code	iterator iter = this . iterator . iterator () ;
Distance : 4

118
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

119
Tree	Iterator iter = iter . advance ( iter , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . advance ( iter , NUMBER_CONSTANT ) ;
Distance : 7

120
Tree	Iterator iter = advance () ;
Code	Iterator iter = advance () ;
Distance : 3

121
Tree	Iterator iter = iter . advance ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . advance ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

122
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

123
Tree	Iterator iter = advance . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = advance . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

124
Tree	Iterator iter = getDimension ( NUMBER_CONSTANT ) ;
Code	Iterator iter = getDimension ( NUMBER_CONSTANT ) ;
Distance : 4

125
Tree	Iterator iter = iter ( iter , res.entries ) ;
Code	Iterator iter = iter ( iter , res.entries ) ;
Distance : 6

126
Tree	Iterator iter = advance . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = advance . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

127
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

128
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Distance : 4

129
Tree	Iterator iter = getDimension . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = getDimension . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

130
Tree	Iterator iter = key . iterator ( null ) ;
Code	Iterator iter = key . iterator ( null ) ;
Distance : 4

131
Tree	Iterator iter = iter . advance ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . advance ( NUMBER_CONSTANT ) ;
Distance : 5

132
Tree	Iterator iter = iter . iterator ( null ) ;
Code	Iterator iter = iter . iterator ( null ) ;
Distance : 4

133
Tree	Iterator iter = ebeDivide . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = ebeDivide . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

134
Tree	Iterator iter = iter . iterator ( key , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( key , NUMBER_CONSTANT ) ;
Distance : 6

135
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

136
Tree	Iterator iter = OpenMapRealVector ( NUMBER_CONSTANT ) ;
Code	Iterator iter = OpenMapRealVector ( NUMBER_CONSTANT ) ;
Distance : 4

137
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

138
Tree	Iterator iter = iterator . iterator () ;
Code	Iterator iter = iterator . iterator () ;
Distance : 1

139
Tree	iterator iter = iter . iterator ( null ) ;
Code	iterator iter = iter . iterator ( null ) ;
Distance : 5

140
Tree	Iterator iter = getDimension ( iter ) ;
Code	Iterator iter = getDimension ( iter ) ;
Distance : 4

141
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 6

142
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

143
Tree	Iterator iter = iter . iterator () ;
Code	Iterator iter = iter . iterator () ;
Distance : 1

144
Tree	Iterator iter = iterator ( this . iterator ) ;
Code	Iterator iter = iterator ( this . iterator ) ;
Distance : 4

145
Tree	Iterator iter = iter ( iter ) . iterator () ;
Code	Iterator iter = iter ( iter ) . iterator () ;
Distance : 4

146
Tree	Iterator iter = iter . iterator ( iterator , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( iterator , NUMBER_CONSTANT ) ;
Distance : 6

147
Tree	Iterator iter = getDimension ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getDimension ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

148
Tree	Iterator iter = iter . advance ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . advance ( NUMBER_CONSTANT ) ;
Distance : 5

149
Tree	Iterator iter = this . Iterator . iterator () ;
Code	Iterator iter = this . Iterator . iterator () ;
Distance : 3

150
Tree	Iterator iter = getEntry ( iter ) ;
Code	Iterator iter = getEntry ( iter ) ;
Distance : 4

151
Tree	Iterator iter = res.entries ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = res.entries ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

152
Tree	Iterator iter = getDimension ( this . iterator ) ;
Code	Iterator iter = getDimension ( this . iterator ) ;
Distance : 4

153
Tree	Iterator iter = getDimension ( iter ) . iterator () ;
Code	Iterator iter = getDimension ( iter ) . iterator () ;
Distance : 4

154
Tree	Iterator iter = ebeDivide ( iter ) . iterator () ;
Code	Iterator iter = ebeDivide ( iter ) . iterator () ;
Distance : 4

155
Tree	Iterator iter = res.entries ( iter . class ) ;
Code	Iterator iter = res.entries ( iter . class ) ;
Distance : 5

156
Tree	Iterator iter = iter . iterator ( ebeDivide , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( ebeDivide , NUMBER_CONSTANT ) ;
Distance : 6

157
Tree	Iterator iter = OpenMapRealVector ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = OpenMapRealVector ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

158
Tree	Iterator iter = key ( iter . class ) ;
Code	Iterator iter = key ( iter . class ) ;
Distance : 5

159
Tree	Iterator iter = getDimension ( iter . class ) ;
Code	Iterator iter = getDimension ( iter . class ) ;
Distance : 5

160
Tree	Iterator iter = iter . iterator ( hasNext . class ) ;
Code	Iterator iter = iter . iterator ( hasNext . class ) ;
Distance : 6

161
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 6

162
Tree	Iterator iter = ebeDivide ( iter . class ) ;
Code	Iterator iter = ebeDivide ( iter . class ) ;
Distance : 5

163
Tree	Iterator iter = iter . iterator ( getEntry , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( getEntry , NUMBER_CONSTANT ) ;
Distance : 6

164
Tree	Iterator iter = ebeDivide ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = ebeDivide ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

165
Tree	Iterator iter = res.entries ( iter ) ;
Code	Iterator iter = res.entries ( iter ) ;
Distance : 4

166
Tree	Iterator iter = iter . iterator ( OpenMapRealVector , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( OpenMapRealVector , NUMBER_CONSTANT ) ;
Distance : 6

167
Tree	Iterator iter = iter ( hasNext ) ;
Code	Iterator iter = iter ( hasNext ) ;
Distance : 4

168
Tree	Iterator iter = iter ( hasNext . class ) ;
Code	Iterator iter = iter ( hasNext . class ) ;
Distance : 5

169
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , ebeDivide ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , ebeDivide ) ;
Distance : 6

170
Tree	Iterator iter = hasNext . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = hasNext . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

171
Tree	Iterator iter = ebeDivide . iterator ( null ) ;
Code	Iterator iter = ebeDivide . iterator ( null ) ;
Distance : 4

172
Tree	Iterator iter = advance ( NUMBER_CONSTANT ) ;
Code	Iterator iter = advance ( NUMBER_CONSTANT ) ;
Distance : 4

173
Tree	Iterator iter = hasNext () ;
Code	Iterator iter = hasNext () ;
Distance : 3

174
Tree	Iterator iter = hasNext ( NUMBER_CONSTANT ) ;
Code	Iterator iter = hasNext ( NUMBER_CONSTANT ) ;
Distance : 4

175
Tree	Iterator iter = iter . advance ( null ) ;
Code	Iterator iter = iter . advance ( null ) ;
Distance : 5

176
Tree	Iterator iter = iter . iterator () ;
Code	Iterator iter = iter . iterator () ;
Distance : 1

177
Tree	Iterator iter = res.entries ( iter ) . iterator () ;
Code	Iterator iter = res.entries ( iter ) . iterator () ;
Distance : 4

178
Tree	Iterator iter = res.entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

179
Tree	Iterator iter = res.entries . iterator ( null ) ;
Code	Iterator iter = res.entries . iterator ( null ) ;
Distance : 4

180
Tree	Iterator iter = OpenMapRealVector . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = OpenMapRealVector . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

181
Tree	Iterator iter = res . iterator () ;
Code	Iterator iter = res . iterator () ;
Distance : 1

182
Tree	Iterator iter = iter ( res.entries ) . iterator () ;
Code	Iterator iter = iter ( res.entries ) . iterator () ;
Distance : 4

183
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , key ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , key ) ;
Distance : 6

184
Tree	Iterator iter = iter ( hasNext ) . iterator () ;
Code	Iterator iter = iter ( hasNext ) . iterator () ;
Distance : 4

185
Tree	Iterator iter = iter . iterator ( advance . class ) ;
Code	Iterator iter = iter . iterator ( advance . class ) ;
Distance : 6

186
Tree	Iterator iter = OpenMapRealVector . iterator () ;
Code	Iterator iter = OpenMapRealVector . iterator () ;
Distance : 1

187
Tree	Iterator iter = iter ( res.entries ) ;
Code	Iterator iter = iter ( res.entries ) ;
Distance : 4

188
Tree	Iterator iter = hasNext . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = hasNext . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

189
Tree	Iterator iter = iter . iterator ( res.entries . class ) ;
Code	Iterator iter = iter . iterator ( res.entries . class ) ;
Distance : 6

190
Tree	Iterator iter = getEntry ( iter ) . iterator () ;
Code	Iterator iter = getEntry ( iter ) . iterator () ;
Distance : 4

191
Tree	Iterator iter = getEntry . iterator () ;
Code	Iterator iter = getEntry . iterator () ;
Distance : 1

192
Tree	Iterator iter = getEntry ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getEntry ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

193
Tree	Iterator iter = OpenMapRealVector . iterator () ;
Code	Iterator iter = OpenMapRealVector . iterator () ;
Distance : 1

194
Tree	Iterator iter = key . iterator () ;
Code	Iterator iter = key . iterator () ;
Distance : 1

195
Tree	Iterator iter = iterator ( iter . class ) ;
Code	Iterator iter = iterator ( iter . class ) ;
Distance : 5

196
Tree	Iterator iter = hasNext ( iter ) . iterator () ;
Code	Iterator iter = hasNext ( iter ) . iterator () ;
Distance : 4

197
Tree	Iterator iter = key ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = key ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

198
Tree	Iterator iter = hasNext ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = hasNext ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

199
Tree	Iterator iter = hasNext ( this . iterator ) ;
Code	Iterator iter = hasNext ( this . iterator ) ;
Distance : 4

========================================================================


========================================================================
Example Number: 67
Parent Code is: 
if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/47/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( divisor ( divisor ) ) { return NaN ; }
Code	if ( divisor ( divisor ) ) { return NaN ; }
Distance : 7

1
Tree	if ( divisor . ZERO () ) { return NaN ; }
Code	if ( divisor . ZERO () ) { return NaN ; }
Distance : 7

2
Tree	if ( ZERO ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( ZERO ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

3
Tree	if ( divisor . NaN ( divisor ) ) { return NaN ; }
Code	if ( divisor . NaN ( divisor ) ) { return NaN ; }
Distance : 9

4
Tree	if ( divisor . isZero ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . isZero ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

5
Tree	if ( divisor . isZero ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . isZero ( divisor , false ) ) { return NaN ; }
Distance : 11

6
Tree	if ( divisor . isInfinite () ) { return NaN ; }
Code	if ( divisor . isInfinite () ) { return NaN ; }
Distance : 7

7
Tree	if ( this . divisor . isNaN () ) { return NaN ; }
Code	if ( this . divisor . isNaN () ) { return NaN ; }
Distance : 9

8
Tree	if ( createComplex ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( createComplex ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

9
Tree	if ( new isZero ( NUMBER_CONSTANT ) . NaN ( NaN ) ) { return NaN ; }
Code	if ( new isZero ( NUMBER_CONSTANT ) . NaN ( NaN ) ) { return NaN ; }
Distance : 12

10
Tree	if ( createComplex ( divisor ) ) { return NaN ; }
Code	if ( createComplex ( divisor ) ) { return NaN ; }
Distance : 8

11
Tree	if ( divisor . isInfinite ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . isInfinite ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

12
Tree	if ( new divisor () . isNaN ( divisor ) ) { return NaN ; }
Code	if ( new divisor () . isNaN ( divisor ) ) { return NaN ; }
Distance : 11

13
Tree	if ( divisor . == ( divisor ) ) { return NaN ; }
Code	if ( divisor . == ( divisor ) ) { return NaN ; }
Distance : 8

14
Tree	if ( divisor . NaN () ) { return NaN ; }
Code	if ( divisor . NaN () ) { return NaN ; }
Distance : 7

15
Tree	if ( isZero ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

16
Tree	if ( divisor . isInfinite ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . isInfinite ( divisor , false ) ) { return NaN ; }
Distance : 11

17
Tree	if ( divisor () ) { return ZERO ; }
Code	if ( divisor () ) { return ZERO ; }
Distance : 7

18
Tree	if ( divisor ) { return ZERO ; }
Code	if ( divisor ) { return ZERO ; }
Distance : 7

19
Tree	if ( NaN ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( NaN ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

20
Tree	if ( divide ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divide ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

21
Tree	if ( divisor ( STRING_CONSTANT ) ) { return ZERO ; }
Code	if ( divisor ( STRING_CONSTANT ) ) { return ZERO ; }
Distance : 8

22
Tree	if ( this . NaN () ) { return NaN ; }
Code	if ( this . NaN () ) { return NaN ; }
Distance : 8

23
Tree	if ( ZERO ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( ZERO ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

24
Tree	if ( divisor . isZero ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . isZero ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

25
Tree	if ( divisor . ZERO ( divisor ) ) { return NaN ; }
Code	if ( divisor . ZERO ( divisor ) ) { return NaN ; }
Distance : 9

26
Tree	if ( STRING_CONSTANT . NaN ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . NaN ( divisor ) ) { return NaN ; }
Distance : 10

27
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

28
Tree	if ( divisor . isNaN ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . isNaN ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

29
Tree	if ( STRING_CONSTANT . isZero ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . isZero ( divisor ) ) { return NaN ; }
Distance : 10

30
Tree	if ( divisor . createComplex ( divisor ) ) { return NaN ; }
Code	if ( divisor . createComplex ( divisor ) ) { return NaN ; }
Distance : 9

31
Tree	if ( NaN ( divisor ) ) { return NaN ; }
Code	if ( NaN ( divisor ) ) { return NaN ; }
Distance : 8

32
Tree	if ( ZERO () ) { return NaN ; }
Code	if ( ZERO () ) { return NaN ; }
Distance : 7

33
Tree	if ( divisor ( STRING_CONSTANT ) ) { return isNaN ; }
Code	if ( divisor ( STRING_CONSTANT ) ) { return isNaN ; }
Distance : 8

34
Tree	if ( divide ( divisor ) ) { return NaN ; }
Code	if ( divide ( divisor ) ) { return NaN ; }
Distance : 8

35
Tree	if ( divisor ( divisor ) ) { return NaN ; }
Code	if ( divisor ( divisor ) ) { return NaN ; }
Distance : 7

36
Tree	if ( divisor () ) { return NaN ; }
Code	if ( divisor () ) { return NaN ; }
Distance : 6

37
Tree	if ( divisor . isNaN () ) { return NaN ; }
Code	if ( divisor . isNaN () ) { return NaN ; }
Distance : 7

38
Tree	if ( divisor ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

39
Tree	if ( divisor ( isZero () ) ) { return NaN ; }
Code	if ( divisor ( isZero () ) ) { return NaN ; }
Distance : 8

40
Tree	if ( createComplex ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( createComplex ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

41
Tree	if ( divisor . isInfinite ( divisor ) ) { return NaN ; }
Code	if ( divisor . isInfinite ( divisor ) ) { return NaN ; }
Distance : 9

42
Tree	if ( new divisor ( NUMBER_CONSTANT ) . NaN ( NaN ) ) { return NaN ; }
Code	if ( new divisor ( NUMBER_CONSTANT ) . NaN ( NaN ) ) { return NaN ; }
Distance : 11

43
Tree	if ( divisor ) { return NaN ; }
Code	if ( divisor ) { return NaN ; }
Distance : 6

44
Tree	if ( this . divisor . isInfinite () ) { return NaN ; }
Code	if ( this . divisor . isInfinite () ) { return NaN ; }
Distance : 9

45
Tree	if ( divisor . divisor ( divisor ) ) { return NaN ; }
Code	if ( divisor . divisor ( divisor ) ) { return NaN ; }
Distance : 9

46
Tree	if ( divisor ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 7

47
Tree	if ( this . isZero () ) { return NaN ; }
Code	if ( this . isZero () ) { return NaN ; }
Distance : 8

48
Tree	if ( this . ZERO () ) { return NaN ; }
Code	if ( this . ZERO () ) { return NaN ; }
Distance : 8

49
Tree	if ( isZero ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

50
Tree	if ( isZero ) { return NaN ; }
Code	if ( isZero ) { return NaN ; }
Distance : 7

51
Tree	if ( this . divisor . divisor () ) { return NaN ; }
Code	if ( this . divisor . divisor () ) { return NaN ; }
Distance : 9

52
Tree	if ( divisor . divisor ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . divisor ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

53
Tree	if ( divisor . isZero ( divisor ) ) { return NaN ; }
Code	if ( divisor . isZero ( divisor ) ) { return NaN ; }
Distance : 9

54
Tree	if ( STRING_CONSTANT . == ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . == ( divisor ) ) { return NaN ; }
Distance : 9

55
Tree	if ( divide () ) { return NaN ; }
Code	if ( divide () ) { return NaN ; }
Distance : 7

56
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ; }
Distance : 5

57
Tree	if ( createComplex ( isZero () ) ) { return NaN ; }
Code	if ( createComplex ( isZero () ) ) { return NaN ; }
Distance : 9

58
Tree	if ( divisor . divide ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . divide ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

59
Tree	if ( divisor . ZERO ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . ZERO ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

60
Tree	if ( divisor . divide ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . divide ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

61
Tree	if ( divisor . divide ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . divide ( divisor , false ) ) { return NaN ; }
Distance : 11

62
Tree	if ( divisor . ZERO ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . ZERO ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

63
Tree	if ( divisor . divisor ( divisor ) ) { return NaN ; }
Code	if ( divisor . divisor ( divisor ) ) { return NaN ; }
Distance : 9

64
Tree	if ( ZERO . isNaN ( divisor ) ) { return NaN ; }
Code	if ( ZERO . isNaN ( divisor ) ) { return NaN ; }
Distance : 10

65
Tree	if ( divisor ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

66
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

67
Tree	if ( this . divisor () ) { return NaN ; }
Code	if ( this . divisor () ) { return NaN ; }
Distance : 8

68
Tree	if ( new divide () . isNaN ( divisor ) ) { return NaN ; }
Code	if ( new divide () . isNaN ( divisor ) ) { return NaN ; }
Distance : 12

69
Tree	if ( isZero ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

70
Tree	if ( divisor . createComplex ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . createComplex ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

71
Tree	if ( divisor ( ZERO ) ) { return NaN ; }
Code	if ( divisor ( ZERO ) ) { return NaN ; }
Distance : 7

72
Tree	if ( divisor . createComplex ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . createComplex ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

73
Tree	if ( STRING_CONSTANT . createComplex ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . createComplex ( divisor ) ) { return NaN ; }
Distance : 10

74
Tree	if ( divisor . == ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . == ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

75
Tree	if ( new createComplex ( NUMBER_CONSTANT ) . NaN ( NaN ) ) { return NaN ; }
Code	if ( new createComplex ( NUMBER_CONSTANT ) . NaN ( NaN ) ) { return NaN ; }
Distance : 12

76
Tree	if ( divisor () ) { return createComplex ; }
Code	if ( divisor () ) { return createComplex ; }
Distance : 7

77
Tree	if ( divisor ( STRING_CONSTANT , STRING_CONSTANT ) ) { return isNaN ; }
Code	if ( divisor ( STRING_CONSTANT , STRING_CONSTANT ) ) { return isNaN ; }
Distance : 10

78
Tree	if ( divisor . isNaN ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . isNaN ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

79
Tree	if ( divisor . createComplex ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . createComplex ( divisor , false ) ) { return NaN ; }
Distance : 11

80
Tree	if ( STRING_CONSTANT . ZERO ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . ZERO ( divisor ) ) { return NaN ; }
Distance : 10

81
Tree	if ( divisor () ) { return NaN ; }
Code	if ( divisor () ) { return NaN ; }
Distance : 6

82
Tree	if ( divisor ( divide () ) ) { return NaN ; }
Code	if ( divisor ( divide () ) ) { return NaN ; }
Distance : 8

83
Tree	if ( divisor . isNaN ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . isNaN ( divisor , false ) ) { return NaN ; }
Distance : 11

84
Tree	if ( divisor . divisor () ) { return NaN ; }
Code	if ( divisor . divisor () ) { return NaN ; }
Distance : 7

85
Tree	if ( divisor . isZero () ) { return NaN ; }
Code	if ( divisor . isZero () ) { return NaN ; }
Distance : 7

86
Tree	if ( ZERO ) { return NaN ; }
Code	if ( ZERO ) { return NaN ; }
Distance : 7

87
Tree	if ( ZERO ( divisor ) ) { return NaN ; }
Code	if ( ZERO ( divisor ) ) { return NaN ; }
Distance : 8

88
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ; }
Distance : 5

89
Tree	if ( ZERO . isNaN () ) { return NaN ; }
Code	if ( ZERO . isNaN () ) { return NaN ; }
Distance : 8

90
Tree	if ( new isZero ( NUMBER_CONSTANT ) . createComplex ( NaN ) ) { return NaN ; }
Code	if ( new isZero ( NUMBER_CONSTANT ) . createComplex ( NaN ) ) { return NaN ; }
Distance : 12

91
Tree	if ( this . NaN () ) { return NaN ; }
Code	if ( this . NaN () ) { return NaN ; }
Distance : 8

92
Tree	if ( divisor ( divisor ) ) { return ZERO ; }
Code	if ( divisor ( divisor ) ) { return ZERO ; }
Distance : 8

93
Tree	if ( divisor . createComplex ( divisor ) ) { return NaN ; }
Code	if ( divisor . createComplex ( divisor ) ) { return NaN ; }
Distance : 9

94
Tree	if ( divisor . divide ( divisor ) ) { return NaN ; }
Code	if ( divisor . divide ( divisor ) ) { return NaN ; }
Distance : 9

95
Tree	if ( divisor ( STRING_CONSTANT , STRING_CONSTANT ) ) { return createComplex ; }
Code	if ( divisor ( STRING_CONSTANT , STRING_CONSTANT ) ) { return createComplex ; }
Distance : 10

96
Tree	if ( STRING_CONSTANT . divide ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . divide ( divisor ) ) { return NaN ; }
Distance : 10

97
Tree	if ( STRING_CONSTANT . isInfinite ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . isInfinite ( divisor ) ) { return NaN ; }
Distance : 10

98
Tree	if ( == ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( == ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

99
Tree	if ( divisor . ZERO ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . ZERO ( divisor , false ) ) { return NaN ; }
Distance : 11

100
Tree	if ( divisor . NaN ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . NaN ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

101
Tree	if ( divisor . createComplex () ) { return NaN ; }
Code	if ( divisor . createComplex () ) { return NaN ; }
Distance : 7

102
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

103
Tree	if ( divisor ( STRING_CONSTANT ) ) { return createComplex ; }
Code	if ( divisor ( STRING_CONSTANT ) ) { return createComplex ; }
Distance : 8

104
Tree	if ( this . isNaN () ) { return NaN ; }
Code	if ( this . isNaN () ) { return NaN ; }
Distance : 8

105
Tree	if ( createComplex () ) { return NaN ; }
Code	if ( createComplex () ) { return NaN ; }
Distance : 7

106
Tree	if ( new NaN ( NUMBER_CONSTANT ) . NaN ( NaN ) ) { return NaN ; }
Code	if ( new NaN ( NUMBER_CONSTANT ) . NaN ( NaN ) ) { return NaN ; }
Distance : 12

107
Tree	if ( this . divisor . divide () ) { return NaN ; }
Code	if ( this . divisor . divide () ) { return NaN ; }
Distance : 9

108
Tree	if ( createComplex == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( createComplex == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

109
Tree	if ( NaN ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( NaN ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

110
Tree	if ( new isZero ( NUMBER_CONSTANT ) . isNaN ( NaN ) ) { return NaN ; }
Code	if ( new isZero ( NUMBER_CONSTANT ) . isNaN ( NaN ) ) { return NaN ; }
Distance : 12

111
Tree	if ( divisor ( ZERO () ) ) { return NaN ; }
Code	if ( divisor ( ZERO () ) ) { return NaN ; }
Distance : 8

112
Tree	if ( new divide ( NUMBER_CONSTANT ) . NaN ( NaN ) ) { return NaN ; }
Code	if ( new divide ( NUMBER_CONSTANT ) . NaN ( NaN ) ) { return NaN ; }
Distance : 12

113
Tree	if ( divisor ( divisor () ) ) { return NaN ; }
Code	if ( divisor ( divisor () ) ) { return NaN ; }
Distance : 8

114
Tree	if ( divisor . NaN ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . NaN ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

115
Tree	if ( this . divide () ) { return NaN ; }
Code	if ( this . divide () ) { return NaN ; }
Distance : 8

116
Tree	if ( this . divisor . createComplex () ) { return NaN ; }
Code	if ( this . divisor . createComplex () ) { return NaN ; }
Distance : 9

117
Tree	if ( ZERO ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( ZERO ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

118
Tree	if ( isZero ( divisor ) ) { return NaN ; }
Code	if ( isZero ( divisor ) ) { return NaN ; }
Distance : 8

119
Tree	if ( new isZero () . Double ( divisor ) ) { return NaN ; }
Code	if ( new isZero () . Double ( divisor ) ) { return NaN ; }
Distance : 12

120
Tree	if ( this . divisor () ) { return isNaN ; }
Code	if ( this . divisor () ) { return isNaN ; }
Distance : 9

121
Tree	if ( this . divisor () ) { return ZERO ; }
Code	if ( this . divisor () ) { return ZERO ; }
Distance : 9

122
Tree	if ( divisor . divide () ) { return NaN ; }
Code	if ( divisor . divide () ) { return NaN ; }
Distance : 7

123
Tree	if ( divisor . NaN ( divisor ) ) { return NaN ; }
Code	if ( divisor . NaN ( divisor ) ) { return NaN ; }
Distance : 9

124
Tree	if ( divisor . divisor ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . divisor ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

125
Tree	if ( divisor ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

126
Tree	if ( new divisor ( NUMBER_CONSTANT ) . createComplex ( NaN ) ) { return NaN ; }
Code	if ( new divisor ( NUMBER_CONSTANT ) . createComplex ( NaN ) ) { return NaN ; }
Distance : 11

127
Tree	if ( divisor ) { return createComplex ; }
Code	if ( divisor ) { return createComplex ; }
Distance : 7

128
Tree	if ( this . divisor . if () ) { return NaN ; }
Code	if ( this . divisor . if () ) { return NaN ; }
Distance : 9

129
Tree	if ( divisor ( == () ) ) { return NaN ; }
Code	if ( divisor ( == () ) ) { return NaN ; }
Distance : 7

130
Tree	if ( NaN ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( NaN ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

131
Tree	if ( divisor . isNaN ( isZero () , createComplex ( divisor ) ) ) { return NaN ; }
Code	if ( divisor . isNaN ( isZero () , createComplex ( divisor ) ) ) { return NaN ; }
Distance : 15

132
Tree	if ( divisor . divide ( divisor ) ) { return NaN ; }
Code	if ( divisor . divide ( divisor ) ) { return NaN ; }
Distance : 9

133
Tree	if ( divisor ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

134
Tree	if ( divisor . isNaN ( isZero () , isZero ( divisor ) ) ) { return NaN ; }
Code	if ( divisor . isNaN ( isZero () , isZero ( divisor ) ) ) { return NaN ; }
Distance : 14

135
Tree	if ( divisor . isNaN ( isZero () , divisor ( divisor ) ) ) { return NaN ; }
Code	if ( divisor . isNaN ( isZero () , divisor ( divisor ) ) ) { return NaN ; }
Distance : 15

136
Tree	if ( this . divisor . ZERO () ) { return NaN ; }
Code	if ( this . divisor . ZERO () ) { return NaN ; }
Distance : 9

137
Tree	if ( STRING_CONSTANT . isNaN ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . isNaN ( divisor ) ) { return NaN ; }
Distance : 10

138
Tree	if ( ZERO == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( ZERO == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

139
Tree	if ( new divisor ( NUMBER_CONSTANT ) . isNaN ( NaN ) ) { return NaN ; }
Code	if ( new divisor ( NUMBER_CONSTANT ) . isNaN ( NaN ) ) { return NaN ; }
Distance : 11

140
Tree	if ( STRING_CONSTANT . divisor ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . divisor ( divisor ) ) { return NaN ; }
Distance : 9

141
Tree	if ( this . divisor . isZero () ) { return NaN ; }
Code	if ( this . divisor . isZero () ) { return NaN ; }
Distance : 9

142
Tree	if ( divisor . NaN ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . NaN ( divisor , false ) ) { return NaN ; }
Distance : 11

143
Tree	if ( divisor ( ZERO , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor ( ZERO , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

144
Tree	if ( divisor . == () ) { return NaN ; }
Code	if ( divisor . == () ) { return NaN ; }
Distance : 6

145
Tree	if ( divisor . isNaN ( divisor ) ) { return NaN ; }
Code	if ( divisor . isNaN ( divisor ) ) { return NaN ; }
Distance : 9

146
Tree	if ( new divisor () . Double ( divisor ) ) { return NaN ; }
Code	if ( new divisor () . Double ( divisor ) ) { return NaN ; }
Distance : 11

147
Tree	if ( isZero ( isZero () ) ) { return NaN ; }
Code	if ( isZero ( isZero () ) ) { return NaN ; }
Distance : 9

148
Tree	if ( divisor ( divisor , STRING_CONSTANT ) ) { return ZERO ; }
Code	if ( divisor ( divisor , STRING_CONSTANT ) ) { return ZERO ; }
Distance : 10

149
Tree	if ( isZero ( divisor () ) ) { return NaN ; }
Code	if ( isZero ( divisor () ) ) { return NaN ; }
Distance : 8

150
Tree	if ( divisor ( isZero ) ) { return NaN ; }
Code	if ( divisor ( isZero ) ) { return NaN ; }
Distance : 7

151
Tree	if ( divisor . divisor ( isZero () , createComplex ( divisor ) ) ) { return NaN ; }
Code	if ( divisor . divisor ( isZero () , createComplex ( divisor ) ) ) { return NaN ; }
Distance : 15

152
Tree	if ( divisor == NUMBER_CONSTANT ) { return createComplex ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return createComplex ; }
Distance : 5

153
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

154
Tree	if ( divisor ( STRING_CONSTANT , STRING_CONSTANT ) ) { return ZERO ; }
Code	if ( divisor ( STRING_CONSTANT , STRING_CONSTANT ) ) { return ZERO ; }
Distance : 10

155
Tree	if ( this . divisor . real () ) { return NaN ; }
Code	if ( this . divisor . real () ) { return NaN ; }
Distance : 9

156
Tree	if ( divisor . divisor ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . divisor ( divisor , false ) ) { return NaN ; }
Distance : 11

157
Tree	if ( divisor == NUMBER_CONSTANT ) { return isNaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isNaN ; }
Distance : 5

158
Tree	if ( divisor . == ( divisor ) ) { return NaN ; }
Code	if ( divisor . == ( divisor ) ) { return NaN ; }
Distance : 8

159
Tree	if ( divisor () ) { return isNaN ; }
Code	if ( divisor () ) { return isNaN ; }
Distance : 7

160
Tree	if ( new ZERO ( NUMBER_CONSTANT ) . NaN ( NaN ) ) { return NaN ; }
Code	if ( new ZERO ( NUMBER_CONSTANT ) . NaN ( NaN ) ) { return NaN ; }
Distance : 12

161
Tree	if ( divisor . isZero ( isZero () , createComplex ( divisor ) ) ) { return NaN ; }
Code	if ( divisor . isZero ( isZero () , createComplex ( divisor ) ) ) { return NaN ; }
Distance : 15

162
Tree	if ( divisor . isNaN ( isZero () , createComplex ( NaN ) ) ) { return NaN ; }
Code	if ( divisor . isNaN ( isZero () , createComplex ( NaN ) ) ) { return NaN ; }
Distance : 14

163
Tree	if ( divisor . isInfinite ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . isInfinite ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

164
Tree	if ( createComplex ) { return NaN ; }
Code	if ( createComplex ) { return NaN ; }
Distance : 7

165
Tree	if ( NaN () ) { return NaN ; }
Code	if ( NaN () ) { return NaN ; }
Distance : 7

166
Tree	if ( this . createComplex () ) { return NaN ; }
Code	if ( this . createComplex () ) { return NaN ; }
Distance : 8

167
Tree	if ( divisor . isNaN ( divisor ) ) { return NaN ; }
Code	if ( divisor . isNaN ( divisor ) ) { return NaN ; }
Distance : 9

168
Tree	if ( divide ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divide ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

169
Tree	if ( ZERO ( isZero () ) ) { return NaN ; }
Code	if ( ZERO ( isZero () ) ) { return NaN ; }
Distance : 9

170
Tree	if ( ZERO . isNaN ( CHAR_CONS ) ) { return NaN ; }
Code	if ( ZERO . isNaN ( CHAR_CONS ) ) { return NaN ; }
Distance : 10

171
Tree	if ( divide ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divide ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

172
Tree	if ( this . divisor . NaN () ) { return NaN ; }
Code	if ( this . divisor . NaN () ) { return NaN ; }
Distance : 9

173
Tree	if ( divisor . isNaN ( isZero () , divide ( divisor ) ) ) { return NaN ; }
Code	if ( divisor . isNaN ( isZero () , divide ( divisor ) ) ) { return NaN ; }
Distance : 15

174
Tree	if ( divisor . divisor ( isZero () , isZero ( divisor ) ) ) { return NaN ; }
Code	if ( divisor . divisor ( isZero () , isZero ( divisor ) ) ) { return NaN ; }
Distance : 14

175
Tree	if ( divisor . == ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . == ( CHAR_CONS ) ) { return NaN ; }
Distance : 8

176
Tree	if ( ZERO . isNaN ( divisor , false ) ) { return NaN ; }
Code	if ( ZERO . isNaN ( divisor , false ) ) { return NaN ; }
Distance : 11

177
Tree	if ( divisor ) { return isNaN ; }
Code	if ( divisor ) { return isNaN ; }
Distance : 7

178
Tree	if ( divisor . isZero ( divisor ) ) { return NaN ; }
Code	if ( divisor . isZero ( divisor ) ) { return NaN ; }
Distance : 9

179
Tree	if ( STRING_CONSTANT . divisor ( ZERO ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . divisor ( ZERO ) ) { return NaN ; }
Distance : 9

180
Tree	if ( createComplex ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( createComplex ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

181
Tree	if ( divisor . divisor ( isZero () , divisor ( divisor ) ) ) { return NaN ; }
Code	if ( divisor . divisor ( isZero () , divisor ( divisor ) ) ) { return NaN ; }
Distance : 15

182
Tree	if ( new ZERO () . isNaN ( divisor ) ) { return NaN ; }
Code	if ( new ZERO () . isNaN ( divisor ) ) { return NaN ; }
Distance : 12

183
Tree	if ( divisor . ZERO ( divisor ) ) { return NaN ; }
Code	if ( divisor . ZERO ( divisor ) ) { return NaN ; }
Distance : 9

184
Tree	if ( divisor ) { return NaN ; }
Code	if ( divisor ) { return NaN ; }
Distance : 6

185
Tree	if ( new NUMBER_CONSTANT () . isNaN ( divisor ) ) { return NaN ; }
Code	if ( new NUMBER_CONSTANT () . isNaN ( divisor ) ) { return NaN ; }
Distance : 12

186
Tree	if ( divisor ) { return divisor ; }
Code	if ( divisor ) { return divisor ; }
Distance : 7

187
Tree	if ( new Double () . isNaN ( divisor ) ) { return NaN ; }
Code	if ( new Double () . isNaN ( divisor ) ) { return NaN ; }
Distance : 12

188
Tree	if ( isZero () ) { return NaN ; }
Code	if ( isZero () ) { return NaN ; }
Distance : 7

189
Tree	if ( divisor . isInfinite ( divisor ) ) { return NaN ; }
Code	if ( divisor . isInfinite ( divisor ) ) { return NaN ; }
Distance : 9

190
Tree	if ( divisor ( createComplex () ) ) { return NaN ; }
Code	if ( divisor ( createComplex () ) ) { return NaN ; }
Distance : 8

191
Tree	if ( divisor . isNaN ( isZero ) ) { return NaN ; }
Code	if ( divisor . isNaN ( isZero ) ) { return NaN ; }
Distance : 9

192
Tree	if ( new isZero () . isNaN ( divisor ) ) { return NaN ; }
Code	if ( new isZero () . isNaN ( divisor ) ) { return NaN ; }
Distance : 12

193
Tree	if ( ZERO . isNaN ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( ZERO . isNaN ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

194
Tree	if ( NaN ) { return NaN ; }
Code	if ( NaN ) { return NaN ; }
Distance : 7

195
Tree	if ( new NaN () . isNaN ( divisor ) ) { return NaN ; }
Code	if ( new NaN () . isNaN ( divisor ) ) { return NaN ; }
Distance : 12

196
Tree	if ( divisor ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 7

197
Tree	if ( divisor . NUMBER_CONSTANT ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . NUMBER_CONSTANT ( divisor , false ) ) { return NaN ; }
Distance : 10

198
Tree	if ( new createComplex () . isNaN ( divisor ) ) { return NaN ; }
Code	if ( new createComplex () . isNaN ( divisor ) ) { return NaN ; }
Distance : 12

199
Tree	if ( divisor . isNaN ( isZero () , isZero ( NaN ) ) ) { return NaN ; }
Code	if ( divisor . isNaN ( isZero () , isZero ( NaN ) ) ) { return NaN ; }
Distance : 13

========================================================================


========================================================================
Example Number: 68
Parent Code is: 
if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/46/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	if ( divisor == NUMBER_CONSTANT ) { return null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return null ; }
Distance : 1

1
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 4

2
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

3
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ; }
Distance : 1

4
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 4

5
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Distance : 0

6
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 5

7
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ; }
Distance : 1

8
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Distance : 1

9
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

10
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . isZero () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . isZero () : NaN ; }
Distance : 7

11
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Distance : 1

12
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . imaginary () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . imaginary () : NaN ; }
Distance : 7

13
Tree	if ( ZERO == NUMBER_CONSTANT ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( ZERO == NUMBER_CONSTANT ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 5

14
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 5

15
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . ZERO () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . ZERO () : NaN ; }
Distance : 7

16
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? this . isZero () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? this . isZero () : NaN ; }
Distance : 7

17
Tree	if ( divisor == NUMBER_CONSTANT ) { return isNaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isNaN ; }
Distance : 1

18
Tree	if ( ZERO == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( ZERO == NUMBER_CONSTANT ) { return NaN ; }
Distance : 1

19
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . isInfinite () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . isInfinite () : NaN ; }
Distance : 7

20
Tree	if ( divisor == NUMBER_CONSTANT ) { return isInfinite ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isInfinite ; }
Distance : 1

21
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Distance : 1

22
Tree	if ( ZERO == NUMBER_CONSTANT ) { return ZERO ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( ZERO == NUMBER_CONSTANT ) { return ZERO ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 6

23
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? this . imaginary () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? this . imaginary () : NaN ; }
Distance : 7

24
Tree	if ( ZERO == NUMBER_CONSTANT ) { return ZERO ; }
Code	if ( ZERO == NUMBER_CONSTANT ) { return ZERO ; }
Distance : 2

25
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . real () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . real () : NaN ; }
Distance : 7

26
Tree	if ( isZero == NUMBER_CONSTANT ) { return ZERO ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return ZERO ; }
Distance : 2

27
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? this . isInfinite () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? this . isInfinite () : NaN ; }
Distance : 7

28
Tree	if ( isZero == NUMBER_CONSTANT ) { return ZERO ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return ZERO ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 6

29
Tree	if ( isZero == NUMBER_CONSTANT ) { return ZERO ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return ZERO ; }
Distance : 2

30
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Distance : 1

31
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? createComplex () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? createComplex () : divisor ; }
Distance : 5

32
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . createComplex () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . createComplex () : divisor ; }
Distance : 7

33
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isNaN () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isNaN () ? CHAR_CONS : null ; }
Distance : 7

34
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? createComplex () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? createComplex () : divisor ; }
Distance : 6

35
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN . createComplex () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN . createComplex () : divisor ; }
Distance : 7

36
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO . isNaN () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO . isNaN () ? CHAR_CONS : null ; }
Distance : 8

37
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isInfinite () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isInfinite () : divisor ; }
Distance : 7

38
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isNaN ( CHAR_CONS ) : ZERO ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isNaN ( CHAR_CONS ) : ZERO ; }
Distance : 9

39
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . createComplex () : ZERO ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . createComplex () : ZERO ; }
Distance : 7

40
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN . isNaN ( CHAR_CONS ) : ZERO ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN . isNaN ( CHAR_CONS ) : ZERO ; }
Distance : 9

41
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isNaN ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isNaN ( CHAR_CONS ) : divisor ; }
Distance : 9

42
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isInfinite () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isInfinite () ? CHAR_CONS : null ; }
Distance : 7

43
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN . isNaN ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN . isNaN ( CHAR_CONS ) : divisor ; }
Distance : 9

44
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . isNaN () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . isNaN () : divisor ; }
Distance : 9

45
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? this . NaN . isNaN () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? this . NaN . isNaN () : divisor ; }
Distance : 9

46
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . createComplex ( CHAR_CONS ) : ZERO ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . createComplex ( CHAR_CONS ) : ZERO ; }
Distance : 9

47
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . isNaN () : ZERO ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . isNaN () : ZERO ; }
Distance : 9

48
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? createComplex . createComplex () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? createComplex . createComplex () : divisor ; }
Distance : 7

49
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN . createComplex ( CHAR_CONS ) : ZERO ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN . createComplex ( CHAR_CONS ) : ZERO ; }
Distance : 9

50
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isInfinite () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isInfinite () : divisor ; }
Distance : 7

51
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? createComplex . isInfinite () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? createComplex . isInfinite () : divisor ; }
Distance : 7

52
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN : isNaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN : isNaN ; }
Distance : 4

53
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? createComplex . NaN () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? createComplex . NaN () : divisor ; }
Distance : 7

54
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? createComplex : isNaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? createComplex : isNaN ; }
Distance : 5

55
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . isInfinite () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . isInfinite () : divisor ; }
Distance : 9

56
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . createComplex () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . createComplex () : divisor ; }
Distance : 7

57
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . NaN ( this . isNaN () , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . NaN ( this . isNaN () , divisor , divisor ) ; }
Distance : 12

58
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? this . NaN . isNaN () : ZERO ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? this . NaN . isNaN () : ZERO ; }
Distance : 9

59
Tree	if ( ZERO == NUMBER_CONSTANT ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( ZERO == NUMBER_CONSTANT ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 6

60
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . createComplex ( this . isNaN () , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . createComplex ( this . isNaN () , divisor , divisor ) ; }
Distance : 12

61
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO . NaN ( this . isNaN () , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO . NaN ( this . isNaN () , divisor , divisor ) ; }
Distance : 12

62
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN () : divisor ; }
Distance : 5

63
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . NaN ( divisor . isNaN () , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . NaN ( divisor . isNaN () , divisor , divisor ) ; }
Distance : 12

64
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO . createComplex ( this . isNaN () , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO . createComplex ( this . isNaN () , divisor , divisor ) ; }
Distance : 13

65
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . createComplex ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . createComplex ( CHAR_CONS ) : divisor ; }
Distance : 9

66
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . createComplex () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . createComplex () : NaN ; }
Distance : 7

67
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isNaN ( this . isNaN () , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isNaN ( this . isNaN () , divisor , divisor ) ; }
Distance : 12

68
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO . isNaN ( this . isNaN () , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO . isNaN ( this . isNaN () , divisor , divisor ) ; }
Distance : 13

69
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? createComplex . createComplex () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? createComplex . createComplex () : divisor ; }
Distance : 8

70
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . NaN ( isZero () , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . NaN ( isZero () , divisor , divisor ) ; }
Distance : 10

71
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . createComplex ( divisor . isNaN () , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . createComplex ( divisor . isNaN () , divisor , divisor ) ; }
Distance : 12

72
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . createComplex ( isZero () , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . createComplex ( isZero () , divisor , divisor ) ; }
Distance : 10

73
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

74
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? divisor () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? divisor () : NaN ; }
Distance : 5

75
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? this . NaN . createComplex () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? this . NaN . createComplex () : divisor ; }
Distance : 9

76
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . NaN () ? divisor : isNaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . NaN () ? divisor : isNaN ; }
Distance : 7

77
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? createComplex . divisor () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? createComplex . divisor () : divisor ; }
Distance : 7

78
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . createComplex () ? divisor : isNaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . createComplex () ? divisor : isNaN ; }
Distance : 7

79
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO . NaN ( isZero () , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO . NaN ( isZero () , divisor , divisor ) ; }
Distance : 10

80
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO . NaN () ? divisor : isNaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO . NaN () ? divisor : isNaN ; }
Distance : 7

81
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? this . createComplex () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? this . createComplex () : NaN ; }
Distance : 7

82
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . NaN ( divisor , isZero ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . NaN ( divisor , isZero ) ; }
Distance : 7

83
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN . isInfinite () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN . isInfinite () : divisor ; }
Distance : 7

84
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isInfinite ( CHAR_CONS ) : ZERO ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isInfinite ( CHAR_CONS ) : ZERO ; }
Distance : 9

85
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN . createComplex () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN . createComplex () : divisor ; }
Distance : 7

86
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . createComplex () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . createComplex () ? CHAR_CONS : null ; }
Distance : 7

87
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isInfinite ( this . isNaN () , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isInfinite ( this . isNaN () , divisor , divisor ) ; }
Distance : 12

88
Tree	if ( divisor == NUMBER_CONSTANT ) { return createComplex ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return createComplex ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 5

89
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . NaN ( divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . NaN ( divisor , divisor ) ; }
Distance : 7

90
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ( NaN , NaN , ZERO , ZERO , ZERO ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ( NaN , NaN , ZERO , ZERO , ZERO ) ; }
Distance : 11

91
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO . NaN ( divisor . isNaN () , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO . NaN ( divisor . isNaN () , divisor , divisor ) ; }
Distance : 12

92
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO . createComplex ( isZero () , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO . createComplex ( isZero () , divisor , divisor ) ; }
Distance : 11

93
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO . NaN () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO . NaN () ? CHAR_CONS : null ; }
Distance : 7

94
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . NaN ( this . isNaN () , divisor , ZERO ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . NaN ( this . isNaN () , divisor , ZERO ) ; }
Distance : 12

95
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO . createComplex () ? divisor : isNaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO . createComplex () ? divisor : isNaN ; }
Distance : 8

96
Tree	if ( divisor == NUMBER_CONSTANT ) { return createComplex ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return createComplex ; }
Distance : 1

97
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . createComplex ( this . isNaN () , divisor , ZERO ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . createComplex ( this . isNaN () , divisor , ZERO ) ; }
Distance : 12

98
Tree	if ( isZero == NUMBER_CONSTANT ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 6

99
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . NaN ( createComplex () , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . NaN ( createComplex () , divisor , divisor ) ; }
Distance : 10

100
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO . createComplex () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO . createComplex () ? CHAR_CONS : null ; }
Distance : 8

101
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . createComplex ( createComplex () , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . createComplex ( createComplex () , divisor , divisor ) ; }
Distance : 10

102
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? divisor () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? divisor () : NaN ; }
Distance : 5

103
Tree	if ( divisor == NUMBER_CONSTANT ) { return super(); ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return super(); ; }
Distance : 1

104
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 5

105
Tree	if ( ZERO == NUMBER_CONSTANT ) { return ZERO ; }
Code	if ( ZERO == NUMBER_CONSTANT ) { return ZERO ; }
Distance : 2

106
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? createComplex () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? createComplex () : NaN ; }
Distance : 5

107
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? createComplex () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? createComplex () : NaN ; }
Distance : 5

108
Tree	if ( divisor == NUMBER_CONSTANT ) { return null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return null ; }
Distance : 1

109
Tree	if ( createComplex == NUMBER_CONSTANT ) { return null ; }
Code	if ( createComplex == NUMBER_CONSTANT ) { return null ; }
Distance : 2

110
Tree	if ( divisor == NUMBER_CONSTANT ) { return continue; ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return continue; ; }
Distance : 1

111
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN () : NaN ; }
Distance : 5

112
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . NaN () ? divisor : Double ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . NaN () ? divisor : Double ; }
Distance : 7

113
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . createComplex () ? divisor : Double ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . createComplex () ? divisor : Double ; }
Distance : 7

114
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ; }
Distance : 1

115
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . createComplex ( divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . createComplex ( divisor , divisor ) ; }
Distance : 7

116
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN . createComplex ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN . createComplex ( CHAR_CONS ) : divisor ; }
Distance : 9

117
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO . NaN ( createComplex () , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO . NaN ( createComplex () , divisor , divisor ) ; }
Distance : 10

118
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . NaN () ? & : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . NaN () ? & : null ; }
Distance : 7

119
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO . NaN () ? divisor : Double ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO . NaN () ? divisor : Double ; }
Distance : 7

120
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO . createComplex ( createComplex () , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO . createComplex ( createComplex () , divisor , divisor ) ; }
Distance : 11

121
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO . createComplex ( divisor . isNaN () , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO . createComplex ( divisor . isNaN () , divisor , divisor ) ; }
Distance : 13

122
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN . isNaN () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN . isNaN () : divisor ; }
Distance : 7

123
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN . isInfinite () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN . isInfinite () : divisor ; }
Distance : 7

124
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . NaN ( isZero () , divisor , ZERO ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . NaN ( isZero () , divisor , ZERO ) ; }
Distance : 10

125
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 5

126
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO . createComplex () ? divisor : Double ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO . createComplex () ? divisor : Double ; }
Distance : 8

127
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

128
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Distance : 1

129
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isNaN ( isZero () , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isNaN ( isZero () , divisor , divisor ) ; }
Distance : 10

130
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN . isInfinite ( CHAR_CONS ) : ZERO ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN . isInfinite ( CHAR_CONS ) : ZERO ; }
Distance : 9

131
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN () : NaN ; }
Distance : 5

132
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . createComplex () : ZERO ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . createComplex () : ZERO ; }
Distance : 9

133
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . createComplex ( divisor , isZero ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . createComplex ( divisor , isZero ) ; }
Distance : 7

134
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . NaN () ? isZero : isNaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . NaN () ? isZero : isNaN ; }
Distance : 7

135
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isNaN ( divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isNaN ( divisor , divisor ) ; }
Distance : 7

136
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . NaN ( divisor . isNaN () , divisor , ZERO ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . NaN ( divisor . isNaN () , divisor , ZERO ) ; }
Distance : 12

137
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . createComplex () ? isZero : isNaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . createComplex () ? isZero : isNaN ; }
Distance : 7

138
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO . isNaN ( divisor . isNaN () , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO . isNaN ( divisor . isNaN () , divisor , divisor ) ; }
Distance : 13

139
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . createComplex ( divisor . isNaN () , divisor , ZERO ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . createComplex ( divisor . isNaN () , divisor , ZERO ) ; }
Distance : 12

140
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO . isNaN ( divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO . isNaN ( divisor , divisor ) ; }
Distance : 8

141
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? this . NaN . isInfinite () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? this . NaN . isInfinite () : divisor ; }
Distance : 9

142
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ; }
Distance : 1

143
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Distance : 0

144
Tree	if ( divisor == NUMBER_CONSTANT ) { throw ZERO . isNaN ( divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw ZERO . isNaN ( divisor , divisor ) ; }
Distance : 9

145
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? createComplex : isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? createComplex : isZero ; }
Distance : 4

146
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO . NaN ( divisor , isZero ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO . NaN ( divisor , isZero ) ; }
Distance : 7

147
Tree	if ( divisor == NUMBER_CONSTANT ) { throw ZERO . isNaN ( divisor , isZero ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw ZERO . isNaN ( divisor , isZero ) ; }
Distance : 9

148
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

149
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? ZERO : isNaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? ZERO : isNaN ; }
Distance : 4

150
Tree	if ( divisor == NUMBER_CONSTANT ) { return return; ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return return; ; }
Distance : 1

151
Tree	if ( divisor == NUMBER_CONSTANT ) { throw ZERO . NaN ( divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw ZERO . NaN ( divisor , divisor ) ; }
Distance : 8

152
Tree	if ( divisor == NUMBER_CONSTANT ) { throw NaN . isNaN ( divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw NaN . isNaN ( divisor , divisor ) ; }
Distance : 8

153
Tree	if ( ZERO == NUMBER_CONSTANT ) { return null ; }
Code	if ( ZERO == NUMBER_CONSTANT ) { return null ; }
Distance : 2

154
Tree	if ( divisor == NUMBER_CONSTANT ) { throw ZERO . ZERO ( divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw ZERO . ZERO ( divisor , divisor ) ; }
Distance : 9

155
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN : isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN : isZero ; }
Distance : 4

156
Tree	if ( divisor == NUMBER_CONSTANT ) { return createComplex ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return createComplex ; }
Distance : 1

157
Tree	if ( divisor == NUMBER_CONSTANT ) { throw ZERO . NaN ( divisor , isZero ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw ZERO . NaN ( divisor , isZero ) ; }
Distance : 8

158
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? createComplex : isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? createComplex : isZero ; }
Distance : 5

159
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO . NaN ( divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO . NaN ( divisor , divisor ) ; }
Distance : 7

160
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ( NaN , NaN , ZERO , ZERO , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ( NaN , NaN , ZERO , ZERO , divisor ) ; }
Distance : 11

161
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO . isInfinite ( this . isNaN () , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO . isInfinite ( this . isNaN () , divisor , divisor ) ; }
Distance : 13

162
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? divisor : isNaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? divisor : isNaN ; }
Distance : 4

163
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? ZERO : isNaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? ZERO : isNaN ; }
Distance : 5

164
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ( NaN , NaN , ZERO , divisor , ZERO ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ( NaN , NaN , ZERO , divisor , ZERO ) ; }
Distance : 11

165
Tree	if ( isZero == NUMBER_CONSTANT ) { return null ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return null ; }
Distance : 2

166
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isNaN () : ZERO ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isNaN () : ZERO ; }
Distance : 7

167
Tree	if ( divisor == NUMBER_CONSTANT ) { return createComplex ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return createComplex ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

168
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN . createComplex () : ZERO ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN . createComplex () : ZERO ; }
Distance : 7

169
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 5

170
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isNaN () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isNaN () : divisor ; }
Distance : 7

171
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ( NaN , NaN , ZERO , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ( NaN , NaN , ZERO , divisor , divisor ) ; }
Distance : 11

172
Tree	if ( divisor == NUMBER_CONSTANT ) { throw NaN . isNaN ( divisor , isZero ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw NaN . isNaN ( divisor , isZero ) ; }
Distance : 8

173
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ( NaN , NaN , ZERO , ZERO , ZERO ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ( NaN , NaN , ZERO , ZERO , ZERO ) ; }
Distance : 11

174
Tree	if ( divisor == NUMBER_CONSTANT ) { throw ZERO . createComplex ( divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw ZERO . createComplex ( divisor , divisor ) ; }
Distance : 9

175
Tree	if ( divisor == NUMBER_CONSTANT ) { return break; ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return break; ; }
Distance : 1

176
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO . isInfinite () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO . isInfinite () ? CHAR_CONS : null ; }
Distance : 8

177
Tree	if ( divisor == NUMBER_CONSTANT ) { throw NaN . NaN ( divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw NaN . NaN ( divisor , divisor ) ; }
Distance : 8

178
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN . isNaN () : ZERO ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ? NaN . isNaN () : ZERO ; }
Distance : 7

179
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ( NaN , NaN , divisor , ZERO , ZERO ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ( NaN , NaN , divisor , ZERO , ZERO ) ; }
Distance : 11

180
Tree	if ( divisor == NUMBER_CONSTANT ) { throw ZERO . isNaN ( divisor , createComplex ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw ZERO . isNaN ( divisor , createComplex ) ; }
Distance : 9

181
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . createComplex () ? & : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . createComplex () ? & : null ; }
Distance : 7

182
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO . NaN ( divisor . isNaN () , divisor , ZERO ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO . NaN ( divisor . isNaN () , divisor , ZERO ) ; }
Distance : 12

183
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ( NaN , NaN , ZERO , ZERO , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ( NaN , NaN , ZERO , ZERO , divisor ) ; }
Distance : 11

184
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO . createComplex ( divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO . createComplex ( divisor , divisor ) ; }
Distance : 8

185
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ( NaN , NaN , divisor , ZERO , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ( NaN , NaN , divisor , ZERO , divisor ) ; }
Distance : 11

186
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ( NaN , NaN , ZERO , divisor , ZERO ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ( NaN , NaN , ZERO , divisor , ZERO ) ; }
Distance : 11

187
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO . createComplex ( divisor , isZero ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO . createComplex ( divisor , isZero ) ; }
Distance : 8

188
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? createComplex : isNaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? createComplex : isNaN ; }
Distance : 4

189
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN : isNaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN : isNaN ; }
Distance : 4

190
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . divisor . isNaN () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . divisor . isNaN () : divisor ; }
Distance : 9

191
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . createComplex () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . createComplex () : divisor ; }
Distance : 9

192
Tree	if ( NaN == NUMBER_CONSTANT ) { return null ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return null ; }
Distance : 2

193
Tree	if ( ZERO == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( ZERO == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

194
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . NaN () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . NaN () ? CHAR_CONS : null ; }
Distance : 7

195
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN () : divisor ; }
Distance : 5

196
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? createComplex . NaN () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? createComplex . NaN () : divisor ; }
Distance : 7

197
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isNaN ( divisor . isNaN () , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isNaN ( divisor . isNaN () , divisor , divisor ) ; }
Distance : 12

198
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO . createComplex ( divisor . isNaN () , divisor , ZERO ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO . createComplex ( divisor . isNaN () , divisor , ZERO ) ; }
Distance : 13

199
Tree	if ( divisor == NUMBER_CONSTANT ) { return ZERO ( NaN , NaN , divisor , divisor , ZERO ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ZERO ( NaN , NaN , divisor , divisor , ZERO ) ; }
Distance : 11

========================================================================


========================================================================
Example Number: 69
Parent Code is: 
if ( divisor.isZero ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor.isZero ) { return NaN ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (40{val=divisor.isZero}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (40{val=divisor.isZero}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/46/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( this . divisor () ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . divisor () ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

1
Tree	if ( this . divisor () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . divisor () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

2
Tree	if ( this . NaN () ) { return false ; }
Code	if ( this . NaN () ) { return false ; }
Distance : 5

3
Tree	if ( this . divisor . abs () ) { return null ; }
Code	if ( this . divisor . abs () ) { return null ; }
Distance : 7

4
Tree	if ( this . ZERO . isNaN () ) { return null ; }
Code	if ( this . ZERO . isNaN () ) { return null ; }
Distance : 7

5
Tree	if ( this . isZero . isNaN () ) { return null ; }
Code	if ( this . isZero . isNaN () ) { return null ; }
Distance : 7

6
Tree	if ( this . divisor . abs () ) { return false ; }
Code	if ( this . divisor . abs () ) { return false ; }
Distance : 7

7
Tree	if ( this . ZERO . isNaN () ) { return false ; }
Code	if ( this . ZERO . isNaN () ) { return false ; }
Distance : 7

8
Tree	if ( this . isZero . isNaN () ) { return false ; }
Code	if ( this . isZero . isNaN () ) { return false ; }
Distance : 7

9
Tree	if ( this . ZERO () ) { return ZERO ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . ZERO () ) { return ZERO ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

10
Tree	if ( isZero . ZERO ( divisor ) ) { return false ; }
Code	if ( isZero . ZERO ( divisor ) ) { return false ; }
Distance : 7

11
Tree	if ( isZero . isZero ( divisor ) ) { return false ; }
Code	if ( isZero . isZero ( divisor ) ) { return false ; }
Distance : 7

12
Tree	if ( isZero . divisor ( divisor ) ) { return false ; }
Code	if ( isZero . divisor ( divisor ) ) { return false ; }
Distance : 7

13
Tree	if ( ZERO . ZERO ( divisor ) ) { return false ; }
Code	if ( ZERO . ZERO ( divisor ) ) { return false ; }
Distance : 7

14
Tree	if ( ZERO . isZero ( divisor ) ) { return false ; }
Code	if ( ZERO . isZero ( divisor ) ) { return false ; }
Distance : 7

15
Tree	if ( ZERO . divisor ( divisor ) ) { return false ; }
Code	if ( ZERO . divisor ( divisor ) ) { return false ; }
Distance : 7

16
Tree	if ( divisor . ZERO ( divisor ) ) { return false ; }
Code	if ( divisor . ZERO ( divisor ) ) { return false ; }
Distance : 7

17
Tree	if ( divisor . isZero ( divisor ) ) { return false ; }
Code	if ( divisor . isZero ( divisor ) ) { return false ; }
Distance : 7

18
Tree	if ( divisor . divisor ( divisor ) ) { return false ; }
Code	if ( divisor . divisor ( divisor ) ) { return false ; }
Distance : 7

19
Tree	if ( isZero . isInfinite ( divisor ) ) { return false ; }
Code	if ( isZero . isInfinite ( divisor ) ) { return false ; }
Distance : 7

20
Tree	if ( this . abs () ) { return null ; }
Code	if ( this . abs () ) { return null ; }
Distance : 5

21
Tree	if ( this . NullArgumentException . isNaN () ) { return false ; }
Code	if ( this . NullArgumentException . isNaN () ) { return false ; }
Distance : 7

22
Tree	if ( STRING_CONSTANT . divisor ( ZERO ) ) { return null ; }
Code	if ( STRING_CONSTANT . divisor ( ZERO ) ) { return null ; }
Distance : 7

23
Tree	if ( this . createComplex () ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . createComplex () ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

24
Tree	if ( this . ZERO . getReal () ) { return null ; }
Code	if ( this . ZERO . getReal () ) { return null ; }
Distance : 7

25
Tree	if ( this . createComplex () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . createComplex () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

26
Tree	if ( this . isZero . getReal () ) { return null ; }
Code	if ( this . isZero . getReal () ) { return null ; }
Distance : 7

27
Tree	if ( STRING_CONSTANT . isZero ( divisor ) ) { return null ; }
Code	if ( STRING_CONSTANT . isZero ( divisor ) ) { return null ; }
Distance : 7

28
Tree	if ( this . ZERO () ) { return isZero ; }
Code	if ( this . ZERO () ) { return isZero ; }
Distance : 5

29
Tree	if ( this . isZero () ) { return isZero ; }
Code	if ( this . isZero () ) { return isZero ; }
Distance : 5

30
Tree	if ( this . isZero . abs () ) { return null ; }
Code	if ( this . isZero . abs () ) { return null ; }
Distance : 7

31
Tree	if ( STRING_CONSTANT . ZERO ( ZERO ) ) { return false ; }
Code	if ( STRING_CONSTANT . ZERO ( ZERO ) ) { return false ; }
Distance : 7

32
Tree	if ( this . ZERO () ) { return ZERO ; }
Code	if ( this . ZERO () ) { return ZERO ; }
Distance : 5

33
Tree	if ( this . isZero () ) { return ZERO ; }
Code	if ( this . isZero () ) { return ZERO ; }
Distance : 5

34
Tree	if ( STRING_CONSTANT . divisor ( divisor ) ) { return false ; }
Code	if ( STRING_CONSTANT . divisor ( divisor ) ) { return false ; }
Distance : 7

35
Tree	if ( this . imaginary () ) { return false ; }
Code	if ( this . imaginary () ) { return false ; }
Distance : 5

36
Tree	if ( this . divisor () ) { return ZERO ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . divisor () ) { return ZERO ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

37
Tree	if ( this . divisor . getReal () ) { return false ; }
Code	if ( this . divisor . getReal () ) { return false ; }
Distance : 7

38
Tree	if ( this . ZERO . abs () ) { return false ; }
Code	if ( this . ZERO . abs () ) { return false ; }
Distance : 7

39
Tree	if ( STRING_CONSTANT . divisor ( ZERO ) ) { return false ; }
Code	if ( STRING_CONSTANT . divisor ( ZERO ) ) { return false ; }
Distance : 7

40
Tree	if ( isZero . ZERO ( divisor ) ) { return ZERO ? NaN : isZero ; }
Code	if ( isZero . ZERO ( divisor ) ) { return ZERO ? NaN : isZero ; }
Distance : 10

41
Tree	if ( isZero . isZero ( divisor ) ) { return ZERO ? NaN : isZero ; }
Code	if ( isZero . isZero ( divisor ) ) { return ZERO ? NaN : isZero ; }
Distance : 10

42
Tree	if ( isZero . ZERO ( divisor ) ) { return ZERO ? NaN : divisor ; }
Code	if ( isZero . ZERO ( divisor ) ) { return ZERO ? NaN : divisor ; }
Distance : 10

43
Tree	if ( isZero . isZero ( divisor ) ) { return ZERO ? NaN : divisor ; }
Code	if ( isZero . isZero ( divisor ) ) { return ZERO ? NaN : divisor ; }
Distance : 10

44
Tree	if ( isZero . divisor ( divisor ) ) { return ZERO ? NaN : isZero ; }
Code	if ( isZero . divisor ( divisor ) ) { return ZERO ? NaN : isZero ; }
Distance : 10

45
Tree	if ( isZero . divisor ( divisor ) ) { return ZERO ? NaN : divisor ; }
Code	if ( isZero . divisor ( divisor ) ) { return ZERO ? NaN : divisor ; }
Distance : 10

46
Tree	if ( ZERO . ZERO ( divisor ) ) { return ZERO ? NaN : isZero ; }
Code	if ( ZERO . ZERO ( divisor ) ) { return ZERO ? NaN : isZero ; }
Distance : 10

47
Tree	if ( ZERO . isZero ( divisor ) ) { return ZERO ? NaN : isZero ; }
Code	if ( ZERO . isZero ( divisor ) ) { return ZERO ? NaN : isZero ; }
Distance : 10

48
Tree	if ( ZERO . ZERO ( divisor ) ) { return ZERO ? NaN : divisor ; }
Code	if ( ZERO . ZERO ( divisor ) ) { return ZERO ? NaN : divisor ; }
Distance : 10

49
Tree	if ( ZERO . isZero ( divisor ) ) { return ZERO ? NaN : divisor ; }
Code	if ( ZERO . isZero ( divisor ) ) { return ZERO ? NaN : divisor ; }
Distance : 10

50
Tree	if ( isZero . ZERO ( divisor ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . ZERO ( divisor ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

51
Tree	if ( isZero . isZero ( divisor ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isZero ( divisor ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

52
Tree	if ( isZero . divisor ( divisor ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . divisor ( divisor ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

53
Tree	if ( ZERO . ZERO ( divisor ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( ZERO . ZERO ( divisor ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

54
Tree	if ( ZERO . isZero ( divisor ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( ZERO . isZero ( divisor ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

55
Tree	if ( isZero . ZERO ( divisor ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . ZERO ( divisor ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

56
Tree	if ( isZero . isZero ( divisor ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isZero ( divisor ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

57
Tree	if ( ZERO . divisor ( divisor ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( ZERO . divisor ( divisor ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

58
Tree	if ( this . imaginary () ) { return null ; }
Code	if ( this . imaginary () ) { return null ; }
Distance : 5

59
Tree	if ( STRING_CONSTANT . isZero ( ZERO ) ) { return null ; }
Code	if ( STRING_CONSTANT . isZero ( ZERO ) ) { return null ; }
Distance : 7

60
Tree	if ( isZero . divisor ( divisor ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . divisor ( divisor ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

61
Tree	if ( this . ZERO . getReal () ) { return false ; }
Code	if ( this . ZERO . getReal () ) { return false ; }
Distance : 7

62
Tree	if ( ZERO . ZERO ( divisor ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( ZERO . ZERO ( divisor ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

63
Tree	if ( this . isZero . getReal () ) { return false ; }
Code	if ( this . isZero . getReal () ) { return false ; }
Distance : 7

64
Tree	if ( this . isInfinite () ) { return ZERO ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . isInfinite () ) { return ZERO ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

65
Tree	if ( ZERO . isZero ( divisor ) ) { return null ; }
Code	if ( ZERO . isZero ( divisor ) ) { return null ; }
Distance : 7

66
Tree	if ( divisor . ZERO ( divisor ) ) { return false ; }
Code	if ( divisor . ZERO ( divisor ) ) { return false ; }
Distance : 7

67
Tree	if ( divisor . isZero ( divisor ) ) { return false ; }
Code	if ( divisor . isZero ( divisor ) ) { return false ; }
Distance : 7

68
Tree	if ( isZero . ZERO ( isZero ) ) { return false ; }
Code	if ( isZero . ZERO ( isZero ) ) { return false ; }
Distance : 7

69
Tree	if ( STRING_CONSTANT . createComplex ( divisor ) ) { return false ; }
Code	if ( STRING_CONSTANT . createComplex ( divisor ) ) { return false ; }
Distance : 7

70
Tree	if ( this . isInfinite () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . isInfinite () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

71
Tree	if ( this . divisor () ) { return isZero ; }
Code	if ( this . divisor () ) { return isZero ; }
Distance : 5

72
Tree	if ( STRING_CONSTANT . createComplex ( ZERO ) ) { return false ; }
Code	if ( STRING_CONSTANT . createComplex ( ZERO ) ) { return false ; }
Distance : 7

73
Tree	if ( this . isInfinite () ) { return ZERO ; }
Code	if ( this . isInfinite () ) { return ZERO ; }
Distance : 5

74
Tree	if ( isZero . isZero ( isZero ) ) { return false ; }
Code	if ( isZero . isZero ( isZero ) ) { return false ; }
Distance : 7

75
Tree	if ( ZERO . divisor ( divisor ) ) { return null ; }
Code	if ( ZERO . divisor ( divisor ) ) { return null ; }
Distance : 7

76
Tree	if ( divisor . ZERO ( divisor ) ) { return null ; }
Code	if ( divisor . ZERO ( divisor ) ) { return null ; }
Distance : 7

77
Tree	if ( isZero . ZERO ( divisor ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . ZERO ( divisor ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

78
Tree	if ( divisor . isZero ( divisor ) ) { return null ; }
Code	if ( divisor . isZero ( divisor ) ) { return null ; }
Distance : 7

79
Tree	if ( isZero . isZero ( divisor ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isZero ( divisor ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

80
Tree	if ( this . ZERO () ) { return divisor ; }
Code	if ( this . ZERO () ) { return divisor ; }
Distance : 5

81
Tree	if ( this . isZero () ) { return divisor ; }
Code	if ( this . isZero () ) { return divisor ; }
Distance : 5

82
Tree	if ( divisor . isInfinite ( CHAR_CONS ) ) { return false ; }
Code	if ( divisor . isInfinite ( CHAR_CONS ) ) { return false ; }
Distance : 7

83
Tree	if ( STRING_CONSTANT . getImaginary ( ZERO ) ) { return null ; }
Code	if ( STRING_CONSTANT . getImaginary ( ZERO ) ) { return null ; }
Distance : 7

84
Tree	if ( this . createComplex () ) { return ZERO ; }
Code	if ( this . createComplex () ) { return ZERO ; }
Distance : 5

85
Tree	if ( ZERO . abs ( CHAR_CONS ) ) { return false ; }
Code	if ( ZERO . abs ( CHAR_CONS ) ) { return false ; }
Distance : 7

86
Tree	if ( ZERO . isZero ( CHAR_CONS ) ) { return false ; }
Code	if ( ZERO . isZero ( CHAR_CONS ) ) { return false ; }
Distance : 7

87
Tree	if ( divisor . createComplex ( CHAR_CONS ) ) { return false ; }
Code	if ( divisor . createComplex ( CHAR_CONS ) ) { return false ; }
Distance : 7

88
Tree	if ( STRING_CONSTANT . ZERO ( divisor ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . ZERO ( divisor ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

89
Tree	if ( isZero . isNaN ( CHAR_CONS ) ) { return false ; }
Code	if ( isZero . isNaN ( CHAR_CONS ) ) { return false ; }
Distance : 7

90
Tree	if ( this . ZERO () ) { return ZERO ? NaN : isZero ; }
Code	if ( this . ZERO () ) { return ZERO ? NaN : isZero ; }
Distance : 8

91
Tree	if ( this . ZERO () ) { return ZERO ? NaN : divisor ; }
Code	if ( this . ZERO () ) { return ZERO ? NaN : divisor ; }
Distance : 8

92
Tree	if ( this . isZero () ) { return ZERO ? NaN : divisor ; }
Code	if ( this . isZero () ) { return ZERO ? NaN : divisor ; }
Distance : 8

93
Tree	if ( this . isZero () ) { return ZERO ? NaN : isZero ; }
Code	if ( this . isZero () ) { return ZERO ? NaN : isZero ; }
Distance : 8

94
Tree	if ( this . ZERO () ) { return NaN ? NaN : divisor ; }
Code	if ( this . ZERO () ) { return NaN ? NaN : divisor ; }
Distance : 8

95
Tree	if ( this . ZERO () ) { return NaN ? NaN : isZero ; }
Code	if ( this . ZERO () ) { return NaN ? NaN : isZero ; }
Distance : 8

96
Tree	if ( this . isZero () ) { return NaN ? NaN : divisor ; }
Code	if ( this . isZero () ) { return NaN ? NaN : divisor ; }
Distance : 8

97
Tree	if ( this . isZero () ) { return NaN ? NaN : isZero ; }
Code	if ( this . isZero () ) { return NaN ? NaN : isZero ; }
Distance : 8

98
Tree	if ( this . createComplex () ) { return null ; }
Code	if ( this . createComplex () ) { return null ; }
Distance : 5

99
Tree	if ( this . ZERO () ) { return ZERO ? createComplex : isZero ; }
Code	if ( this . ZERO () ) { return ZERO ? createComplex : isZero ; }
Distance : 9

100
Tree	if ( this . divisor.isZero () ) { return false ; }
Code	if ( this . divisor.isZero () ) { return false ; }
Distance : 4

101
Tree	if ( this . isZero () ) { return ZERO ? createComplex : isZero ; }
Code	if ( this . isZero () ) { return ZERO ? createComplex : isZero ; }
Distance : 9

102
Tree	if ( this . getImaginary () ) { return null ; }
Code	if ( this . getImaginary () ) { return null ; }
Distance : 5

103
Tree	if ( this . divisor . isNaN () ) { return null ; }
Code	if ( this . divisor . isNaN () ) { return null ; }
Distance : 7

104
Tree	if ( this . ZERO () ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . ZERO () ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

105
Tree	if ( this . ZERO () ) { return false ; }
Code	if ( this . ZERO () ) { return false ; }
Distance : 5

106
Tree	if ( this . isZero () ) { return ZERO ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . isZero () ) { return ZERO ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

107
Tree	if ( this . isZero () ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isZero () ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

108
Tree	if ( this . isZero () ) { return false ; }
Code	if ( this . isZero () ) { return false ; }
Distance : 5

109
Tree	if ( this . divisor () ) { return false ; }
Code	if ( this . divisor () ) { return false ; }
Distance : 5

110
Tree	if ( this . ZERO () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . ZERO () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

111
Tree	if ( this . divisor () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . divisor () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

112
Tree	if ( this . isZero . abs () ) { return false ; }
Code	if ( this . isZero . abs () ) { return false ; }
Distance : 7

113
Tree	if ( this . ZERO () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . ZERO () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

114
Tree	if ( this . abs () ) { return false ; }
Code	if ( this . abs () ) { return false ; }
Distance : 5

115
Tree	if ( STRING_CONSTANT . ZERO ( ZERO ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . ZERO ( ZERO ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

116
Tree	if ( this . isZero () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isZero () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

117
Tree	if ( this . NaN () ) { return null ; }
Code	if ( this . NaN () ) { return null ; }
Distance : 5

118
Tree	if ( this . divisor . isNaN () ) { return false ; }
Code	if ( this . divisor . isNaN () ) { return false ; }
Distance : 7

119
Tree	if ( divisor . ZERO ( CHAR_CONS ) ) { return false ; }
Code	if ( divisor . ZERO ( CHAR_CONS ) ) { return false ; }
Distance : 7

120
Tree	if ( this . ZERO () ) { return null ; }
Code	if ( this . ZERO () ) { return null ; }
Distance : 5

121
Tree	if ( STRING_CONSTANT . divisor ( divisor ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . divisor ( divisor ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

122
Tree	if ( this . isZero () ) { return null ; }
Code	if ( this . isZero () ) { return null ; }
Distance : 5

123
Tree	if ( this . NullArgumentException . isNaN () ) { return null ; }
Code	if ( this . NullArgumentException . isNaN () ) { return null ; }
Distance : 7

124
Tree	if ( STRING_CONSTANT . ZERO ( divisor ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . ZERO ( divisor ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

125
Tree	if ( STRING_CONSTANT . ZERO ( divisor ) ) { return null ; }
Code	if ( STRING_CONSTANT . ZERO ( divisor ) ) { return null ; }
Distance : 7

126
Tree	if ( STRING_CONSTANT . getImaginary ( divisor ) ) { return false ; }
Code	if ( STRING_CONSTANT . getImaginary ( divisor ) ) { return false ; }
Distance : 7

127
Tree	if ( divisor . abs ( CHAR_CONS ) ) { return false ; }
Code	if ( divisor . abs ( CHAR_CONS ) ) { return false ; }
Distance : 7

128
Tree	if ( this . isZero () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . isZero () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

129
Tree	if ( isZero . ZERO ( isZero ) ) { return null ; }
Code	if ( isZero . ZERO ( isZero ) ) { return null ; }
Distance : 7

130
Tree	if ( this . divisor () ) { return null ; }
Code	if ( this . divisor () ) { return null ; }
Distance : 5

131
Tree	if ( this . isInfinite () ) { return false ; }
Code	if ( this . isInfinite () ) { return false ; }
Distance : 5

132
Tree	if ( STRING_CONSTANT . ZERO ( divisor ) ) { return false ; }
Code	if ( STRING_CONSTANT . ZERO ( divisor ) ) { return false ; }
Distance : 7

133
Tree	if ( isZero . ZERO ( divisor ) ) { return false ; }
Code	if ( isZero . ZERO ( divisor ) ) { return false ; }
Distance : 7

134
Tree	if ( isZero . ZERO ( divisor ) ) { return ZERO ? NaN : isZero ; }
Code	if ( isZero . ZERO ( divisor ) ) { return ZERO ? NaN : isZero ; }
Distance : 10

135
Tree	if ( isZero . isZero ( divisor ) ) { return false ; }
Code	if ( isZero . isZero ( divisor ) ) { return false ; }
Distance : 7

136
Tree	if ( isZero . isZero ( divisor ) ) { return ZERO ? NaN : isZero ; }
Code	if ( isZero . isZero ( divisor ) ) { return ZERO ? NaN : isZero ; }
Distance : 10

137
Tree	if ( this . divisor . getReal () ) { return null ; }
Code	if ( this . divisor . getReal () ) { return null ; }
Distance : 7

138
Tree	if ( STRING_CONSTANT . createComplex ( divisor ) ) { return null ; }
Code	if ( STRING_CONSTANT . createComplex ( divisor ) ) { return null ; }
Distance : 7

139
Tree	if ( isZero . isZero ( isZero ) ) { return null ; }
Code	if ( isZero . isZero ( isZero ) ) { return null ; }
Distance : 7

140
Tree	if ( STRING_CONSTANT . divisor ( ZERO ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . divisor ( ZERO ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

141
Tree	if ( this . isInfinite () ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isInfinite () ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

142
Tree	if ( this . ZERO . abs () ) { return null ; }
Code	if ( this . ZERO . abs () ) { return null ; }
Distance : 7

143
Tree	if ( this . isInfinite () ) { return null ; }
Code	if ( this . isInfinite () ) { return null ; }
Distance : 5

144
Tree	if ( STRING_CONSTANT . ZERO ( ZERO ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . ZERO ( ZERO ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

145
Tree	if ( this . divisor.isZero () ) { return null ; }
Code	if ( this . divisor.isZero () ) { return null ; }
Distance : 4

146
Tree	if ( this . isInfinite () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isInfinite () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

147
Tree	if ( isZero . divisor ( divisor ) ) { return false ; }
Code	if ( isZero . divisor ( divisor ) ) { return false ; }
Distance : 7

148
Tree	if ( ZERO . isNaN ( CHAR_CONS ) ) { return false ; }
Code	if ( ZERO . isNaN ( CHAR_CONS ) ) { return false ; }
Distance : 7

149
Tree	if ( divisor . isNaN ( CHAR_CONS ) ) { return false ; }
Code	if ( divisor . isNaN ( CHAR_CONS ) ) { return false ; }
Distance : 7

150
Tree	if ( STRING_CONSTANT . divisor ( divisor ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . divisor ( divisor ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

151
Tree	if ( STRING_CONSTANT . getImaginary ( ZERO ) ) { return false ; }
Code	if ( STRING_CONSTANT . getImaginary ( ZERO ) ) { return false ; }
Distance : 7

152
Tree	if ( STRING_CONSTANT . createComplex ( ZERO ) ) { return null ; }
Code	if ( STRING_CONSTANT . createComplex ( ZERO ) ) { return null ; }
Distance : 7

153
Tree	if ( STRING_CONSTANT . isZero ( divisor ) ) { return false ; }
Code	if ( STRING_CONSTANT . isZero ( divisor ) ) { return false ; }
Distance : 7

154
Tree	if ( STRING_CONSTANT . ZERO ( divisor ) ) { return ZERO ? NaN : isZero ; }
Code	if ( STRING_CONSTANT . ZERO ( divisor ) ) { return ZERO ? NaN : isZero ; }
Distance : 10

155
Tree	if ( STRING_CONSTANT . isZero ( divisor ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isZero ( divisor ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

156
Tree	if ( this . createComplex () ) { return false ; }
Code	if ( this . createComplex () ) { return false ; }
Distance : 5

157
Tree	if ( this . getImaginary () ) { return false ; }
Code	if ( this . getImaginary () ) { return false ; }
Distance : 5

158
Tree	if ( STRING_CONSTANT . divisor ( ZERO ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . divisor ( ZERO ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

159
Tree	if ( ZERO . ZERO ( divisor ) ) { return false ; }
Code	if ( ZERO . ZERO ( divisor ) ) { return false ; }
Distance : 7

160
Tree	if ( isZero . divisor ( divisor ) ) { return ZERO ? NaN : isZero ; }
Code	if ( isZero . divisor ( divisor ) ) { return ZERO ? NaN : isZero ; }
Distance : 10

161
Tree	if ( ZERO . isZero ( divisor ) ) { return false ; }
Code	if ( ZERO . isZero ( divisor ) ) { return false ; }
Distance : 7

162
Tree	if ( isZero . ZERO ( divisor ) ) { return NaN ? NaN : isZero ; }
Code	if ( isZero . ZERO ( divisor ) ) { return NaN ? NaN : isZero ; }
Distance : 10

163
Tree	if ( ZERO . divisor ( divisor ) ) { return false ; }
Code	if ( ZERO . divisor ( divisor ) ) { return false ; }
Distance : 7

164
Tree	if ( STRING_CONSTANT . isZero ( ZERO ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isZero ( ZERO ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

165
Tree	if ( this . divisor () ) { return ZERO ; }
Code	if ( this . divisor () ) { return ZERO ; }
Distance : 5

166
Tree	if ( isZero . ZERO ( divisor ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . ZERO ( divisor ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

167
Tree	if ( STRING_CONSTANT . ZERO ( divisor ) ) { return ZERO ? NaN : divisor ; }
Code	if ( STRING_CONSTANT . ZERO ( divisor ) ) { return ZERO ? NaN : divisor ; }
Distance : 10

168
Tree	if ( STRING_CONSTANT . ZERO ( ZERO ) ) { return null ; }
Code	if ( STRING_CONSTANT . ZERO ( ZERO ) ) { return null ; }
Distance : 7

169
Tree	if ( STRING_CONSTANT . divisor ( divisor ) ) { return null ; }
Code	if ( STRING_CONSTANT . divisor ( divisor ) ) { return null ; }
Distance : 7

170
Tree	if ( STRING_CONSTANT . isZero ( ZERO ) ) { return false ; }
Code	if ( STRING_CONSTANT . isZero ( ZERO ) ) { return false ; }
Distance : 7

171
Tree	if ( divisor . isZero ( CHAR_CONS ) ) { return false ; }
Code	if ( divisor . isZero ( CHAR_CONS ) ) { return false ; }
Distance : 7

172
Tree	if ( this . createComplex () ) { return ZERO ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . createComplex () ) { return ZERO ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

173
Tree	if ( this . createComplex () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . createComplex () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

174
Tree	if ( isZero . ZERO ( divisor ) ) { return null ; }
Code	if ( isZero . ZERO ( divisor ) ) { return null ; }
Distance : 7

175
Tree	if ( isZero . isZero ( divisor ) ) { return null ; }
Code	if ( isZero . isZero ( divisor ) ) { return null ; }
Distance : 7

176
Tree	if ( isZero . divisor ( divisor ) ) { return null ; }
Code	if ( isZero . divisor ( divisor ) ) { return null ; }
Distance : 7

177
Tree	if ( STRING_CONSTANT . ZERO ( ZERO ) ) { return ZERO ? NaN : isZero ; }
Code	if ( STRING_CONSTANT . ZERO ( ZERO ) ) { return ZERO ? NaN : isZero ; }
Distance : 10

178
Tree	if ( isZero . isZero ( divisor ) ) { return NaN ? NaN : isZero ; }
Code	if ( isZero . isZero ( divisor ) ) { return NaN ? NaN : isZero ; }
Distance : 10

179
Tree	if ( isZero . ZERO ( divisor ) ) { return ZERO ? NaN : divisor ; }
Code	if ( isZero . ZERO ( divisor ) ) { return ZERO ? NaN : divisor ; }
Distance : 10

180
Tree	if ( isZero . isZero ( divisor ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isZero ( divisor ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

181
Tree	if ( STRING_CONSTANT . getImaginary ( divisor ) ) { return null ; }
Code	if ( STRING_CONSTANT . getImaginary ( divisor ) ) { return null ; }
Distance : 7

182
Tree	if ( ZERO . ZERO ( divisor ) ) { return ZERO ? NaN : isZero ; }
Code	if ( ZERO . ZERO ( divisor ) ) { return ZERO ? NaN : isZero ; }
Distance : 10

183
Tree	if ( isZero . isZero ( divisor ) ) { return ZERO ? NaN : divisor ; }
Code	if ( isZero . isZero ( divisor ) ) { return ZERO ? NaN : divisor ; }
Distance : 10

184
Tree	if ( ZERO . isZero ( divisor ) ) { return ZERO ? NaN : isZero ; }
Code	if ( ZERO . isZero ( divisor ) ) { return ZERO ? NaN : isZero ; }
Distance : 10

185
Tree	if ( isZero . divisor ( divisor ) ) { return NaN ? NaN : isZero ; }
Code	if ( isZero . divisor ( divisor ) ) { return NaN ? NaN : isZero ; }
Distance : 10

186
Tree	if ( ZERO . ZERO ( divisor ) ) { return null ; }
Code	if ( ZERO . ZERO ( divisor ) ) { return null ; }
Distance : 7

187
Tree	if ( isZero . divisor ( divisor ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . divisor ( divisor ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

188
Tree	if ( STRING_CONSTANT . ZERO ( ZERO ) ) { return ZERO ? NaN : divisor ; }
Code	if ( STRING_CONSTANT . ZERO ( ZERO ) ) { return ZERO ? NaN : divisor ; }
Distance : 10

189
Tree	if ( ZERO . ZERO ( divisor ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( ZERO . ZERO ( divisor ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

190
Tree	if ( STRING_CONSTANT . divisor ( divisor ) ) { return ZERO ? NaN : isZero ; }
Code	if ( STRING_CONSTANT . divisor ( divisor ) ) { return ZERO ? NaN : isZero ; }
Distance : 10

191
Tree	if ( STRING_CONSTANT . divisor ( divisor ) ) { return ZERO ? NaN : divisor ; }
Code	if ( STRING_CONSTANT . divisor ( divisor ) ) { return ZERO ? NaN : divisor ; }
Distance : 10

192
Tree	if ( isZero . divisor ( divisor ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . divisor ( divisor ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

193
Tree	if ( STRING_CONSTANT . ZERO ( divisor ) ) { return NaN ? NaN : isZero ; }
Code	if ( STRING_CONSTANT . ZERO ( divisor ) ) { return NaN ? NaN : isZero ; }
Distance : 10

194
Tree	if ( ZERO . isZero ( divisor ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( ZERO . isZero ( divisor ) ) { return ZERO ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

195
Tree	if ( ZERO . ZERO ( divisor ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( ZERO . ZERO ( divisor ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

196
Tree	if ( ZERO . isZero ( divisor ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( ZERO . isZero ( divisor ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

197
Tree	if ( STRING_CONSTANT . ZERO ( divisor ) ) { return NaN ? NaN : divisor ; }
Code	if ( STRING_CONSTANT . ZERO ( divisor ) ) { return NaN ? NaN : divisor ; }
Distance : 10

198
Tree	if ( STRING_CONSTANT . divisor ( ZERO ) ) { return ZERO ? NaN : isZero ; }
Code	if ( STRING_CONSTANT . divisor ( ZERO ) ) { return ZERO ? NaN : isZero ; }
Distance : 10

199
Tree	if ( STRING_CONSTANT . divisor ( ZERO ) ) { return ZERO ? NaN : divisor ; }
Code	if ( STRING_CONSTANT . divisor ( ZERO ) ) { return ZERO ? NaN : divisor ; }
Distance : 10

========================================================================


========================================================================
Example Number: 70
Parent Code is: 
{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( populationLimit ) ; setElitismRate ( elitismRate ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=elitismRate})) (204{val==}) (800{val=elitismRate})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (32 (802{val=setElitismRate}) (214{val=(}) (800{val=elitismRate}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/35/parent/src_main_java_org_apache_commons_math3_genetics_ElitisticListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ this ( populationLimit , ( populationLimit ) null ) ; }
Code	{ this ( populationLimit , ( populationLimit ) null ) ; }
Distance : 6

1
Tree	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] <> ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] <> ; }
Distance : 7

2
Tree	{ this ( elitismRate , false ) ; }
Code	{ this ( elitismRate , false ) ; }
Distance : 7

3
Tree	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] [] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] [] ; }
Distance : 7

4
Tree	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] extends ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] extends ; }
Distance : 7

5
Tree	{ super ( OutOfRangeException ) ; this . elitismRate = elitismRate ; }
Code	{ super ( OutOfRangeException ) ; this . elitismRate = elitismRate ; }
Distance : 5

6
Tree	{ super(); this . populationLimit = this ( OutOfRangeException ) ; super }
Code	{ super(); this . populationLimit = this ( OutOfRangeException ) ; super }
Distance : 8

7
Tree	{ this . OutOfRangeException = this ( populationLimit ) ; }
Code	{ this . OutOfRangeException = this ( populationLimit ) ; }
Distance : 7

8
Tree	{ super ( OutOfRangeException ) ; this . OutOfRangeException = elitismRate ; }
Code	{ super ( OutOfRangeException ) ; this . OutOfRangeException = elitismRate ; }
Distance : 6

9
Tree	{ super ( OutOfRangeException , populationLimit ) ; }
Code	{ super ( OutOfRangeException , populationLimit ) ; }
Distance : 6

10
Tree	{ this . populationLimit = populationLimit ( populationLimit ) ; }
Code	{ this . populationLimit = populationLimit ( populationLimit ) ; }
Distance : 6

11
Tree	{ super ( populationLimit ) ; this . elitismRate = new populationLimit [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new populationLimit [] { elitismRate } ; }
Distance : 9

12
Tree	{ super ( OutOfRangeException ) ; this . elitismRate = new ( [] { elitismRate } ; }
Code	{ super ( OutOfRangeException ) ; this . elitismRate = new ( [] { elitismRate } ; }
Distance : 9

13
Tree	{ super ( populationLimit ) ; this . elitismRate = new long [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new long [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

14
Tree	{ this ( OutOfRangeException , true ) ; }
Code	{ this ( OutOfRangeException , true ) ; }
Distance : 7

15
Tree	{ super ( OutOfRangeException ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( OutOfRangeException ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

16
Tree	{ super ( populationLimit ) ; this . elitismRate = OutOfRangeException ; }
Code	{ super ( populationLimit ) ; this . elitismRate = OutOfRangeException ; }
Distance : 4

17
Tree	{ this . OutOfRangeException = elitismRate ; }
Code	{ this . OutOfRangeException = elitismRate ; }
Distance : 8

18
Tree	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] { OutOfRangeException } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] { OutOfRangeException } ; }
Distance : 9

19
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; assertFalse }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; assertFalse }
Distance : 10

20
Tree	{ super ( populationLimit , OutOfRangeException ) ; }
Code	{ super ( populationLimit , OutOfRangeException ) ; }
Distance : 5

21
Tree	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] ? ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] ? ; super }
Distance : 8

22
Tree	{ super ( populationLimit , elitismRate ) ; }
Code	{ super ( populationLimit , elitismRate ) ; }
Distance : 4

23
Tree	{ super ( OutOfRangeException ) ; this . elitismRate = OutOfRangeException ; }
Code	{ super ( OutOfRangeException ) ; this . elitismRate = OutOfRangeException ; }
Distance : 5

24
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; else }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; else }
Distance : 10

25
Tree	{ continue; this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ continue; this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 14

26
Tree	{ super ( populationLimit ) ; this . elitismRate = new byte [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new byte [] { populationLimit } ; }
Distance : 9

27
Tree	{ super(); this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ super(); this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 9

28
Tree	{ this . populationLimit = elitismRate ; this . elitismRate = OutOfRangeException ; }
Code	{ this . populationLimit = elitismRate ; this . elitismRate = OutOfRangeException ; }
Distance : 8

29
Tree	{ this . populationLimit = elitismRate ; this . OutOfRangeException = elitismRate ; }
Code	{ this . populationLimit = elitismRate ; this . OutOfRangeException = elitismRate ; }
Distance : 9

30
Tree	{ super ( populationLimit , elitismRate ) ; }
Code	{ super ( populationLimit , elitismRate ) ; }
Distance : 4

31
Tree	{ super(); this . populationLimit = elitismRate ; this . elitismRate = OutOfRangeException ; }
Code	{ super(); this . populationLimit = elitismRate ; this . elitismRate = OutOfRangeException ; }
Distance : 9

32
Tree	{ this . OutOfRangeException = elitismRate ; }
Code	{ this . OutOfRangeException = elitismRate ; }
Distance : 8

33
Tree	{ super ( populationLimit ) ; this . elitismRate = new elitismRate [] {} ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new elitismRate [] {} ; }
Distance : 7

34
Tree	{ super(); this . OutOfRangeException = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ super(); this . OutOfRangeException = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 10

35
Tree	{ super ( populationLimit ) ; this . OutOfRangeException = elitismRate . elitismRate () ; }
Code	{ super ( populationLimit ) ; this . OutOfRangeException = elitismRate . elitismRate () ; }
Distance : 7

36
Tree	{ super ( populationLimit ) ; this . OutOfRangeException = elitismRate ; }
Code	{ super ( populationLimit ) ; this . OutOfRangeException = elitismRate ; }
Distance : 5

37
Tree	{ this ( populationLimit , false ) ; }
Code	{ this ( populationLimit , false ) ; }
Distance : 6

38
Tree	{ this ( OutOfRangeException , ( OutOfRangeException ) null ) ; }
Code	{ this ( OutOfRangeException , ( OutOfRangeException ) null ) ; }
Distance : 7

39
Tree	{ super ( populationLimit ) ; this . elitismRate = new short [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new short [] { populationLimit } ; }
Distance : 9

40
Tree	{ this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 8

41
Tree	{ super ( OutOfRangeException ) ; this . elitismRate = elitismRate ; }
Code	{ super ( OutOfRangeException ) ; this . elitismRate = elitismRate ; }
Distance : 5

42
Tree	{ super(); this . populationLimit = elitismRate ; this . OutOfRangeException = elitismRate ; }
Code	{ super(); this . populationLimit = elitismRate ; this . OutOfRangeException = elitismRate ; }
Distance : 10

43
Tree	{ super ( populationLimit ) ; this . elitismRate = new super [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new super [ NUMBER_CONSTANT ] ; }
Distance : 8

44
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; checkNotNull }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; checkNotNull }
Distance : 10

45
Tree	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] CHAR_CONS ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] CHAR_CONS ; super }
Distance : 8

46
Tree	{ super(); this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ super(); this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 9

47
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 4

48
Tree	{ super ( populationLimit ) ; this . elitismRate = new float [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new float [] { populationLimit } ; }
Distance : 9

49
Tree	{ super ( populationLimit , elitismRate ) ; }
Code	{ super ( populationLimit , elitismRate ) ; }
Distance : 4

50
Tree	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new byte [] { populationLimit } ; }
Code	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new byte [] { populationLimit } ; }
Distance : 14

51
Tree	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] ? ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] ? ; }
Distance : 7

52
Tree	{ this . populationLimit = elitismRate ; }
Code	{ this . populationLimit = elitismRate ; }
Distance : 7

53
Tree	{ super ( OutOfRangeException , OutOfRangeException ) ; }
Code	{ super ( OutOfRangeException , OutOfRangeException ) ; }
Distance : 6

54
Tree	{ this ( populationLimit , false ) ; }
Code	{ this ( populationLimit , false ) ; }
Distance : 6

55
Tree	{ ; }
Code	{ ; }
Distance : 9

56
Tree	{ super ( populationLimit ) ; this . elitismRate = new float [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new float [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

57
Tree	{ super ( populationLimit ) ; this . OutOfRangeException = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . OutOfRangeException = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

58
Tree	{ super ( populationLimit ) ; }
Code	{ super ( populationLimit ) ; }
Distance : 5

59
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 9

60
Tree	{ continue; this . populationLimit = OutOfRangeException ( populationLimit ) ; super }
Code	{ continue; this . populationLimit = OutOfRangeException ( populationLimit ) ; super }
Distance : 8

61
Tree	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] {} ; if }
Code	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] {} ; if }
Distance : 8

62
Tree	{ super(); this . OutOfRangeException = elitismRate ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ super(); this . OutOfRangeException = elitismRate ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 15

63
Tree	{ super ( populationLimit ) ; this . elitismRate = new elitismRate [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new elitismRate [] { elitismRate } ; }
Distance : 9

64
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate . OutOfRangeException () ; }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate . OutOfRangeException () ; }
Distance : 7

65
Tree	{ super ( OutOfRangeException , elitismRate ) ; }
Code	{ super ( OutOfRangeException , elitismRate ) ; }
Distance : 5

66
Tree	{ super ( populationLimit ) ; this . elitismRate = new elitismRate [] {} ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new elitismRate [] {} ; super }
Distance : 8

67
Tree	{ this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 8

68
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate . elitismRate () ; }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate . elitismRate () ; }
Distance : 7

69
Tree	{ this . populationLimit = elitismRate ( populationLimit ) ; }
Code	{ this . populationLimit = elitismRate ( populationLimit ) ; }
Distance : 6

70
Tree	{ this . populationLimit = OutOfRangeException ; }
Code	{ this . populationLimit = OutOfRangeException ; }
Distance : 8

71
Tree	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [ NUMBER_CONSTANT ] ; }
Distance : 8

72
Tree	{ this . elitismRate = elitismRate ; }
Code	{ this . elitismRate = elitismRate ; }
Distance : 8

73
Tree	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] {} ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] {} ; }
Distance : 7

74
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

75
Tree	{ super ( populationLimit ) ; this . elitismRate = new ( [] {} ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ( [] {} ; }
Distance : 7

76
Tree	{ super ( populationLimit ) ; this . elitismRate = new elitismRate [] <> ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new elitismRate [] <> ; }
Distance : 7

77
Tree	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new int [] { populationLimit } ; }
Code	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new int [] { populationLimit } ; }
Distance : 14

78
Tree	{ super ( OutOfRangeException ) ; this . elitismRate = new elitismRate [ NUMBER_CONSTANT ] ; }
Code	{ super ( OutOfRangeException ) ; this . elitismRate = new elitismRate [ NUMBER_CONSTANT ] ; }
Distance : 9

79
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

80
Tree	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new short [] { populationLimit } ; }
Code	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new short [] { populationLimit } ; }
Distance : 14

81
Tree	{ super ( populationLimit ) ; this . elitismRate = new int [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new int [] { populationLimit } ; }
Distance : 9

82
Tree	{ super ( OutOfRangeException ) ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ super ( OutOfRangeException ) ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 10

83
Tree	{ super ( populationLimit ) ; this . elitismRate = new elitismRate [] <> ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new elitismRate [] <> ; super }
Distance : 8

84
Tree	{ this ( OutOfRangeException , ( populationLimit ) null ) ; }
Code	{ this ( OutOfRangeException , ( populationLimit ) null ) ; }
Distance : 7

85
Tree	{ this ( populationLimit , ( OutOfRangeException ) null ) ; }
Code	{ this ( populationLimit , ( OutOfRangeException ) null ) ; }
Distance : 6

86
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; super }
Distance : 10

87
Tree	{ super ( populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

88
Tree	{ super ( OutOfRangeException , elitismRate ) ; }
Code	{ super ( OutOfRangeException , elitismRate ) ; }
Distance : 5

89
Tree	{ super(); this . populationLimit = OutOfRangeException ( populationLimit ) ; super }
Code	{ super(); this . populationLimit = OutOfRangeException ( populationLimit ) ; super }
Distance : 8

90
Tree	{ super ( elitismRate , elitismRate ) ; }
Code	{ super ( elitismRate , elitismRate ) ; }
Distance : 5

91
Tree	{ super ( OutOfRangeException ) ; this . elitismRate = new OutOfRangeException [ NUMBER_CONSTANT ] ; }
Code	{ super ( OutOfRangeException ) ; this . elitismRate = new OutOfRangeException [ NUMBER_CONSTANT ] ; }
Distance : 9

92
Tree	{ super ( populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

93
Tree	{ super ( populationLimit ) ; this . OutOfRangeException = new double [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . OutOfRangeException = new double [] { populationLimit } ; }
Distance : 10

94
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; if }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; if }
Distance : 10

95
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 4

96
Tree	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 14

97
Tree	{ super ( populationLimit ) ; this . elitismRate = new short [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new short [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

98
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { OutOfRangeException } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { OutOfRangeException } ; }
Distance : 9

99
Tree	{ this ( populationLimit , ( populationLimit ) null ) ; }
Code	{ this ( populationLimit , ( populationLimit ) null ) ; }
Distance : 6

100
Tree	{ this . populationLimit = this ( populationLimit ) ; }
Code	{ this . populationLimit = this ( populationLimit ) ; }
Distance : 6

101
Tree	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] {} ; static }
Code	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] {} ; static }
Distance : 8

102
Tree	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] super ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] super ; }
Distance : 7

103
Tree	{ this ( populationLimit , ( populationLimit ) null ) ; }
Code	{ this ( populationLimit , ( populationLimit ) null ) ; }
Distance : 6

104
Tree	{ super ( populationLimit ) ; this . elitismRate = new elitismRate [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new elitismRate [] { elitismRate } ; }
Distance : 9

105
Tree	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new float [] { populationLimit } ; }
Code	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new float [] { populationLimit } ; }
Distance : 14

106
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 9

107
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 4

108
Tree	{ this . OutOfRangeException = OutOfRangeException ( populationLimit ) ; }
Code	{ this . OutOfRangeException = OutOfRangeException ( populationLimit ) ; }
Distance : 7

109
Tree	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 14

110
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; static }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; static }
Distance : 10

111
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate . elitismRate () ; }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate . elitismRate () ; }
Distance : 7

112
Tree	{ this ( populationLimit , ( populationLimit ) super(); ) ; }
Code	{ this ( populationLimit , ( populationLimit ) super(); ) ; }
Distance : 6

113
Tree	{ super ( populationLimit ) ; this . OutOfRangeException = new OutOfRangeException [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . OutOfRangeException = new OutOfRangeException [ NUMBER_CONSTANT ] ; }
Distance : 9

114
Tree	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [ NUMBER_CONSTANT ] ; }
Distance : 8

115
Tree	{ this . populationLimit = elitismRate ; this . populationLimit = elitismRate ; }
Code	{ this . populationLimit = elitismRate ; this . populationLimit = elitismRate ; }
Distance : 9

116
Tree	{ super(); this . populationLimit = elitismRate ; this . OutOfRangeException = new double [] { populationLimit } ; }
Code	{ super(); this . populationLimit = elitismRate ; this . OutOfRangeException = new double [] { populationLimit } ; }
Distance : 15

117
Tree	{ super ( OutOfRangeException ) ; this . elitismRate = elitismRate . elitismRate () ; }
Code	{ super ( OutOfRangeException ) ; this . elitismRate = elitismRate . elitismRate () ; }
Distance : 8

118
Tree	{ this . populationLimit = OutOfRangeException ( OutOfRangeException ) ; }
Code	{ this . populationLimit = OutOfRangeException ( OutOfRangeException ) ; }
Distance : 6

119
Tree	{ this ( populationLimit , true ) ; }
Code	{ this ( populationLimit , true ) ; }
Distance : 6

120
Tree	{ super ( elitismRate ) ; }
Code	{ super ( elitismRate ) ; }
Distance : 5

121
Tree	{ this ( OutOfRangeException , false ) ; }
Code	{ this ( OutOfRangeException , false ) ; }
Distance : 7

122
Tree	{ this . OutOfRangeException = elitismRate ( populationLimit ) ; }
Code	{ this . OutOfRangeException = elitismRate ( populationLimit ) ; }
Distance : 7

123
Tree	{ this ( elitismRate , true ) ; }
Code	{ this ( elitismRate , true ) ; }
Distance : 7

124
Tree	{ super ( OutOfRangeException ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( OutOfRangeException ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

125
Tree	{ this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 8

126
Tree	{ this . populationLimit = elitismRate ; }
Code	{ this . populationLimit = elitismRate ; }
Distance : 7

127
Tree	{ this ( populationLimit , ( populationLimit ) return; ) ; }
Code	{ this ( populationLimit , ( populationLimit ) return; ) ; }
Distance : 6

128
Tree	{ this . populationLimit = elitismRate ; }
Code	{ this . populationLimit = elitismRate ; }
Distance : 7

129
Tree	{ this . OutOfRangeException = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ this . OutOfRangeException = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 9

130
Tree	{ super ( OutOfRangeException ) ; }
Code	{ super ( OutOfRangeException ) ; }
Distance : 6

131
Tree	{ super ( OutOfRangeException ) ; this . elitismRate = new OutOfRangeException [] { elitismRate } ; }
Code	{ super ( OutOfRangeException ) ; this . elitismRate = new OutOfRangeException [] { elitismRate } ; }
Distance : 10

132
Tree	{ this . OutOfRangeException = populationLimit ; }
Code	{ this . OutOfRangeException = populationLimit ; }
Distance : 9

133
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; synchronized }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; synchronized }
Distance : 10

134
Tree	{ this . OutOfRangeException = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ this . OutOfRangeException = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 9

135
Tree	{ this . populationLimit = elitismRate ( OutOfRangeException ) ; }
Code	{ this . populationLimit = elitismRate ( OutOfRangeException ) ; }
Distance : 6

136
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate . elitismRate () ; }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate . elitismRate () ; }
Distance : 7

137
Tree	{ super ( OutOfRangeException ) ; this . elitismRate = new elitismRate [] { elitismRate } ; }
Code	{ super ( OutOfRangeException ) ; this . elitismRate = new elitismRate [] { elitismRate } ; }
Distance : 10

138
Tree	{ super(); this . OutOfRangeException = this ( populationLimit ) ; super }
Code	{ super(); this . OutOfRangeException = this ( populationLimit ) ; super }
Distance : 8

139
Tree	{ continue; this . populationLimit = this ( populationLimit ) ; super }
Code	{ continue; this . populationLimit = this ( populationLimit ) ; super }
Distance : 8

140
Tree	{ this . populationLimit = populationLimit ; }
Code	{ this . populationLimit = populationLimit ; }
Distance : 8

141
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate . populationLimit () ; }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate . populationLimit () ; }
Distance : 7

142
Tree	{ ; } notifyListeners
Code	{ ; } notifyListeners
Distance : 10

143
Tree	{ this . populationLimit = OutOfRangeException ( populationLimit ) ; }
Code	{ this . populationLimit = OutOfRangeException ( populationLimit ) ; }
Distance : 6

144
Tree	{ return; this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ return; this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 9

145
Tree	{ super ( populationLimit ) ; this . elitismRate = OutOfRangeException . elitismRate () ; }
Code	{ super ( populationLimit ) ; this . elitismRate = OutOfRangeException . elitismRate () ; }
Distance : 7

146
Tree	{ super(); this . populationLimit = OutOfRangeException ; this . elitismRate = elitismRate ; }
Code	{ super(); this . populationLimit = OutOfRangeException ; this . elitismRate = elitismRate ; }
Distance : 9

147
Tree	{ super(); this . populationLimit = OutOfRangeException ( OutOfRangeException ) ; super }
Code	{ super(); this . populationLimit = OutOfRangeException ( OutOfRangeException ) ; super }
Distance : 8

148
Tree	{ ; } -
Code	{ ; } -
Distance : 10

149
Tree	{ super ( populationLimit , populationLimit ) ; }
Code	{ super ( populationLimit , populationLimit ) ; }
Distance : 5

150
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; reportMatcher }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; reportMatcher }
Distance : 10

151
Tree	{ super(); this . populationLimit = elitismRate ( OutOfRangeException ) ; super }
Code	{ super(); this . populationLimit = elitismRate ( OutOfRangeException ) ; super }
Distance : 8

152
Tree	{ break; this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ break; this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 9

153
Tree	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] CHAR_CONS ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] CHAR_CONS ; }
Distance : 7

154
Tree	{ super ( populationLimit ) ; }
Code	{ super ( populationLimit ) ; }
Distance : 5

155
Tree	{ super ( populationLimit ) ; this . elitismRate = new populationLimit [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new populationLimit [ NUMBER_CONSTANT ] ; }
Distance : 8

156
Tree	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] {} ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] {} ; super }
Distance : 8

157
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; fireAnnotationChanged }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; fireAnnotationChanged }
Distance : 10

158
Tree	{ super ( populationLimit ) ; this . OutOfRangeException = new OutOfRangeException [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . OutOfRangeException = new OutOfRangeException [] { elitismRate } ; }
Distance : 9

159
Tree	{ ; } class
Code	{ ; } class
Distance : 10

160
Tree	{ super ( populationLimit ) ; } &&
Code	{ super ( populationLimit ) ; } &&
Distance : 6

161
Tree	{ super ( populationLimit ) ; this . OutOfRangeException = new elitismRate [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . OutOfRangeException = new elitismRate [ NUMBER_CONSTANT ] ; }
Distance : 8

162
Tree	{ super(); this . populationLimit = populationLimit ( populationLimit ) ; super }
Code	{ super(); this . populationLimit = populationLimit ( populationLimit ) ; super }
Distance : 8

163
Tree	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] <> ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] <> ; super }
Distance : 8

164
Tree	{ super ( populationLimit ) ; this . elitismRate = new elitismRate [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new elitismRate [ NUMBER_CONSTANT ] ; }
Distance : 8

165
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate . elitismRate () ; }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate . elitismRate () ; }
Distance : 7

166
Tree	{ null this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ null this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 9

167
Tree	{ super ( populationLimit ) ; } p
Code	{ super ( populationLimit ) ; } p
Distance : 6

168
Tree	{ super ( populationLimit ) ; } options
Code	{ super ( populationLimit ) ; } options
Distance : 6

169
Tree	{ this . populationLimit = OutOfRangeException ; this . elitismRate = elitismRate ; }
Code	{ this . populationLimit = OutOfRangeException ; this . elitismRate = elitismRate ; }
Distance : 8

170
Tree	{ this . OutOfRangeException = OutOfRangeException ; }
Code	{ this . OutOfRangeException = OutOfRangeException ; }
Distance : 9

171
Tree	{ super ( populationLimit ) ; } source
Code	{ super ( populationLimit ) ; } source
Distance : 6

172
Tree	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] [] ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] [] ; super }
Distance : 8

173
Tree	{ super ( populationLimit ) ; } toString
Code	{ super ( populationLimit ) ; } toString
Distance : 6

174
Tree	{ ; } [
Code	{ ; } [
Distance : 10

175
Tree	{ ; } mock
Code	{ ; } mock
Distance : 10

176
Tree	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] extends ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] extends ; super }
Distance : 8

177
Tree	{ this ( populationLimit , false ) ; } Math
Code	{ this ( populationLimit , false ) ; } Math
Distance : 7

178
Tree	{ this ( OutOfRangeException , ( populationLimit ) return; ) ; }
Code	{ this ( OutOfRangeException , ( populationLimit ) return; ) ; }
Distance : 7

179
Tree	{ super(); this . populationLimit = elitismRate ( populationLimit ) ; super }
Code	{ super(); this . populationLimit = elitismRate ( populationLimit ) ; super }
Distance : 8

180
Tree	{ this ( populationLimit , ( elitismRate ) null ) ; }
Code	{ this ( populationLimit , ( elitismRate ) null ) ; }
Distance : 6

181
Tree	{ ; } MathRuntimeException
Code	{ ; } MathRuntimeException
Distance : 10

182
Tree	{ super ( OutOfRangeException ) ; this . elitismRate = new ( [ NUMBER_CONSTANT ] ; }
Code	{ super ( OutOfRangeException ) ; this . elitismRate = new ( [ NUMBER_CONSTANT ] ; }
Distance : 9

183
Tree	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] { elitismRate } ; }
Distance : 9

184
Tree	{ continue; this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ continue; this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 9

185
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; private }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; private }
Distance : 10

186
Tree	{ this ( populationLimit , true ) ; }
Code	{ this ( populationLimit , true ) ; }
Distance : 6

187
Tree	{ ; } Override
Code	{ ; } Override
Distance : 10

188
Tree	{ ; } f
Code	{ ; } f
Distance : 10

189
Tree	{ this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 8

190
Tree	{ this . populationLimit = super ( OutOfRangeException ) ; }
Code	{ this . populationLimit = super ( OutOfRangeException ) ; }
Distance : 6

191
Tree	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new double [] { OutOfRangeException } ; }
Code	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new double [] { OutOfRangeException } ; }
Distance : 14

192
Tree	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new OutOfRangeException [] { elitismRate } ; }
Distance : 9

193
Tree	{ super ( OutOfRangeException ) ; this . elitismRate = new int [] { populationLimit } ; }
Code	{ super ( OutOfRangeException ) ; this . elitismRate = new int [] { populationLimit } ; }
Distance : 10

194
Tree	{ this ( populationLimit , false ) ; } wanted
Code	{ this ( populationLimit , false ) ; } wanted
Distance : 7

195
Tree	{ ; } array
Code	{ ; } array
Distance : 10

196
Tree	{ super ( populationLimit ) ; this . populationLimit = elitismRate ; }
Code	{ super ( populationLimit ) ; this . populationLimit = elitismRate ; }
Distance : 5

197
Tree	{ super(); this . populationLimit = this ( populationLimit ) ; super }
Code	{ super(); this . populationLimit = this ( populationLimit ) ; super }
Distance : 8

198
Tree	{ super ( OutOfRangeException ) ; this . elitismRate = elitismRate . OutOfRangeException () ; }
Code	{ super ( OutOfRangeException ) ; this . elitismRate = elitismRate . OutOfRangeException () ; }
Distance : 8

199
Tree	{ super ( populationLimit ) ; } T
Code	{ super ( populationLimit ) ; } T
Distance : 6

========================================================================


========================================================================
Example Number: 71
Parent Code is: 
{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( chromosomes , populationLimit ) ; setElitismRate ( elitismRate ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=chromosomes}) (234{val=,}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=elitismRate})) (204{val==}) (800{val=elitismRate})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=chromosomes}) (234{val=,}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (32 (802{val=setElitismRate}) (214{val=(}) (800{val=elitismRate}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/35/parent/src_main_java_org_apache_commons_math3_genetics_ElitisticListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super ( chromosomes ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 11

1
Tree	{ this ( new Chromosome ( chromosomes ) , populationLimit ) ; }
Code	{ this ( new Chromosome ( chromosomes ) , populationLimit ) ; }
Distance : 9

2
Tree	{ super ( chromosomes , chromosomes ) ; }
Code	{ super ( chromosomes , chromosomes ) ; }
Distance : 6

3
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new float [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new float [] { chromosomes } ; }
Distance : 9

4
Tree	{ this ( OutOfRangeException , populationLimit ) ; }
Code	{ this ( OutOfRangeException , populationLimit ) ; }
Distance : 7

5
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; if }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; if }
Distance : 10

6
Tree	{ super ( chromosomes ) ; this . elitismRate = new float [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new float [] { chromosomes } ; }
Distance : 11

7
Tree	{ this ( populationLimit , false ) ; }
Code	{ this ( populationLimit , false ) ; }
Distance : 8

8
Tree	{ super ( chromosomes ) ; this . OutOfRangeException = new double [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . OutOfRangeException = new double [] { chromosomes } ; }
Distance : 12

9
Tree	{ this ( chromosomes , OutOfRangeException ) ; }
Code	{ this ( chromosomes , OutOfRangeException ) ; }
Distance : 7

10
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { Chromosome } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { Chromosome } ; }
Distance : 9

11
Tree	{ super ( chromosomes , populationLimit ) ; this . Chromosome = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . Chromosome = new double [] { chromosomes } ; }
Distance : 10

12
Tree	{ super ( chromosomes , populationLimit ) ; }
Code	{ super ( chromosomes , populationLimit ) ; }
Distance : 5

13
Tree	{ this ( Chromosome , ( populationLimit ) null ) ; }
Code	{ this ( Chromosome , ( populationLimit ) null ) ; }
Distance : 7

14
Tree	{ this ( chromosomes , true ) ; }
Code	{ this ( chromosomes , true ) ; }
Distance : 7

15
Tree	{ super ( chromosomes , populationLimit ) ; }
Code	{ super ( chromosomes , populationLimit ) ; }
Distance : 5

16
Tree	{ this . chromosomes = populationLimit ; Chromosome () ; }
Code	{ this . chromosomes = populationLimit ; Chromosome () ; }
Distance : 8

17
Tree	{ this ( chromosomes , false ) ; }
Code	{ this ( chromosomes , false ) ; }
Distance : 7

18
Tree	{ super ( chromosomes , elitismRate ) ; }
Code	{ super ( chromosomes , elitismRate ) ; }
Distance : 5

19
Tree	{ super ( chromosomes , populationLimit ) ; }
Code	{ super ( chromosomes , populationLimit ) ; }
Distance : 5

20
Tree	{ this . chromosomes = populationLimit ; }
Code	{ this . chromosomes = populationLimit ; }
Distance : 9

21
Tree	{ super ( chromosomes , populationLimit ) ; this . Chromosome = elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; this . Chromosome = elitismRate ; }
Distance : 5

22
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; fireAnnotationChanged }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; fireAnnotationChanged }
Distance : 10

23
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; super }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; super }
Distance : 10

24
Tree	{ this ( chromosomes , OutOfRangeException , false ) ; }
Code	{ this ( chromosomes , OutOfRangeException , false ) ; }
Distance : 7

25
Tree	{ this ( Chromosome , populationLimit , true ) ; }
Code	{ this ( Chromosome , populationLimit , true ) ; }
Distance : 7

26
Tree	{ super ( Chromosome , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( Chromosome , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 5

27
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 4

28
Tree	{ this ( chromosomes , false ) ; }
Code	{ this ( chromosomes , false ) ; }
Distance : 7

29
Tree	{ this ( chromosomes , populationLimit ) ; }
Code	{ this ( chromosomes , populationLimit ) ; }
Distance : 6

30
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 9

31
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; char }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; char }
Distance : 10

32
Tree	{ this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 8

33
Tree	{ this ( populationLimit , ( populationLimit ) null ) ; }
Code	{ this ( populationLimit , ( populationLimit ) null ) ; }
Distance : 7

34
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; short }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; short }
Distance : 10

35
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; assertFalse }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; assertFalse }
Distance : 10

36
Tree	{ this ( chromosomes , ( populationLimit ) null ) ; }
Code	{ this ( chromosomes , ( populationLimit ) null ) ; }
Distance : 6

37
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; else }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; else }
Distance : 10

38
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 4

39
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = OutOfRangeException ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = OutOfRangeException ; }
Distance : 4

40
Tree	{ super ( chromosomes , populationLimit ) ; this . Chromosome = elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; this . Chromosome = elitismRate ; }
Distance : 5

41
Tree	{ this ( chromosomes , ( populationLimit ) null ) ; }
Code	{ this ( chromosomes , ( populationLimit ) null ) ; }
Distance : 6

42
Tree	{ this ( chromosomes , populationLimit , false ) ; }
Code	{ this ( chromosomes , populationLimit , false ) ; }
Distance : 6

43
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { chromosomes } ; }
Distance : 9

44
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 15

45
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

46
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { chromosomes } ; }
Distance : 9

47
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; static }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; static }
Distance : 10

48
Tree	{ super ( Chromosome , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( Chromosome , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

49
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

50
Tree	{ super ( chromosomes , populationLimit ) ; this . OutOfRangeException = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . OutOfRangeException = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 16

51
Tree	{ super ( chromosomes , populationLimit ) ; this . OutOfRangeException = elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; this . OutOfRangeException = elitismRate ; }
Distance : 5

52
Tree	{ super ( chromosomes , OutOfRangeException ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , OutOfRangeException ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 10

53
Tree	{ this ( chromosomes , populationLimit ) ; }
Code	{ this ( chromosomes , populationLimit ) ; }
Distance : 6

54
Tree	{ this ( chromosomes , true ) ; }
Code	{ this ( chromosomes , true ) ; }
Distance : 7

55
Tree	{ this . chromosomes = populationLimit ; chromosomes () ; }
Code	{ this . chromosomes = populationLimit ; chromosomes () ; }
Distance : 8

56
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = Chromosome ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = Chromosome ; }
Distance : 4

57
Tree	{ super ( chromosomes , populationLimit ) ; this . Chromosome = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . Chromosome = new double [] { chromosomes } ; }
Distance : 10

58
Tree	{ super ( chromosomes , populationLimit ) ; this . Chromosome = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . Chromosome = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

59
Tree	{ super ( chromosomes , populationLimit ) ; this . OutOfRangeException = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . OutOfRangeException = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

60
Tree	{ this . chromosomes = chromosomes ; }
Code	{ this . chromosomes = chromosomes ; }
Distance : 10

61
Tree	{ super ( chromosomes , OutOfRangeException ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , OutOfRangeException ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 10

62
Tree	{ super ( Chromosome , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( Chromosome , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 10

63
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new float [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new float [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 15

64
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new OutOfRangeException [] <> ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new OutOfRangeException [] <> ; }
Distance : 7

65
Tree	{ this . populationLimit = populationLimit ; }
Code	{ this . populationLimit = populationLimit ; }
Distance : 10

66
Tree	{ this ( new ( ( chromosomes ) , populationLimit ) ; }
Code	{ this ( new ( ( chromosomes ) , populationLimit ) ; }
Distance : 9

67
Tree	{ this ( elitismRate , false ) ; }
Code	{ this ( elitismRate , false ) ; }
Distance : 8

68
Tree	{ this ( Chromosome , true ) ; }
Code	{ this ( Chromosome , true ) ; }
Distance : 8

69
Tree	{ super ( elitismRate , populationLimit ) ; }
Code	{ super ( elitismRate , populationLimit ) ; }
Distance : 6

70
Tree	{ super ( Chromosome , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( Chromosome , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 10

71
Tree	{ this . chromosomes = populationLimit ; }
Code	{ this . chromosomes = populationLimit ; }
Distance : 9

72
Tree	{ this ( Chromosome , populationLimit , false ) ; }
Code	{ this ( Chromosome , populationLimit , false ) ; }
Distance : 7

73
Tree	{ super ( Chromosome ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( Chromosome ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 12

74
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 9

75
Tree	{ super ( chromosomes ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 11

76
Tree	{ this ( new chromosomes ( chromosomes ) , populationLimit ) ; }
Code	{ this ( new chromosomes ( chromosomes ) , populationLimit ) ; }
Distance : 8

77
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

78
Tree	{ this ( chromosomes , ( elitismRate ) null ) ; }
Code	{ this ( chromosomes , ( elitismRate ) null ) ; }
Distance : 7

79
Tree	{ super ( chromosomes ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 11

80
Tree	{ super ( chromosomes , OutOfRangeException ) ; }
Code	{ super ( chromosomes , OutOfRangeException ) ; }
Distance : 6

81
Tree	{ super ( Chromosome , populationLimit ) ; }
Code	{ super ( Chromosome , populationLimit ) ; }
Distance : 6

82
Tree	{ this ( Chromosome , populationLimit ) ; }
Code	{ this ( Chromosome , populationLimit ) ; }
Distance : 7

83
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 9

84
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 15

85
Tree	{ this . chromosomes = populationLimit ; }
Code	{ this . chromosomes = populationLimit ; }
Distance : 9

86
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new OutOfRangeException [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new OutOfRangeException [ NUMBER_CONSTANT ] ; }
Distance : 8

87
Tree	{ this ( populationLimit , populationLimit ) ; }
Code	{ this ( populationLimit , populationLimit ) ; }
Distance : 7

88
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

89
Tree	{ this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 8

90
Tree	{ super ( chromosomes , OutOfRangeException ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , OutOfRangeException ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

91
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = elitismRate ; }
Distance : 5

92
Tree	{ super ( chromosomes , OutOfRangeException ) ; this . elitismRate = elitismRate ; }
Code	{ super ( chromosomes , OutOfRangeException ) ; this . elitismRate = elitismRate ; }
Distance : 5

93
Tree	{ super ( chromosomes ) ; this . elitismRate = new short [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new short [] { chromosomes } ; }
Distance : 11

94
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new float [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new float [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

95
Tree	{ this ( new Chromosome ( Chromosome ) , populationLimit ) ; }
Code	{ this ( new Chromosome ( Chromosome ) , populationLimit ) ; }
Distance : 9

96
Tree	{ super ( OutOfRangeException , populationLimit ) ; }
Code	{ super ( OutOfRangeException , populationLimit ) ; }
Distance : 6

97
Tree	{ this ( chromosomes , ( chromosomes ) null ) ; }
Code	{ this ( chromosomes , ( chromosomes ) null ) ; }
Distance : 7

98
Tree	{ this . Chromosome = OutOfRangeException ; }
Code	{ this . Chromosome = OutOfRangeException ; }
Distance : 11

99
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Chromosome [] [] ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Chromosome [] [] ; }
Distance : 7

100
Tree	{ this . chromosomes = Chromosome ; }
Code	{ this . chromosomes = Chromosome ; }
Distance : 10

101
Tree	{ this ( populationLimit , populationLimit , false ) ; }
Code	{ this ( populationLimit , populationLimit , false ) ; }
Distance : 7

102
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 4

103
Tree	{ this . chromosomes = elitismRate ; }
Code	{ this . chromosomes = elitismRate ; }
Distance : 9

104
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = Chromosome ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = Chromosome ; }
Distance : 4

105
Tree	{ this ( new OutOfRangeException ( chromosomes ) , populationLimit ) ; }
Code	{ this ( new OutOfRangeException ( chromosomes ) , populationLimit ) ; }
Distance : 9

106
Tree	{ this ( new Chromosome ( chromosomes ) , OutOfRangeException ) ; }
Code	{ this ( new Chromosome ( chromosomes ) , OutOfRangeException ) ; }
Distance : 9

107
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Chromosome [] extends ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Chromosome [] extends ; }
Distance : 7

108
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new elitismRate [] <> ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new elitismRate [] <> ; }
Distance : 7

109
Tree	{ this . chromosomes = OutOfRangeException ; this . elitismRate = elitismRate ; }
Code	{ this . chromosomes = OutOfRangeException ; this . elitismRate = elitismRate ; }
Distance : 9

110
Tree	{ this . chromosomes = OutOfRangeException ; }
Code	{ this . chromosomes = OutOfRangeException ; }
Distance : 10

111
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = elitismRate ; }
Distance : 5

112
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new ( [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new ( [ NUMBER_CONSTANT ] ; }
Distance : 8

113
Tree	{ this ( chromosomes , ( OutOfRangeException ) null ) ; }
Code	{ this ( chromosomes , ( OutOfRangeException ) null ) ; }
Distance : 7

114
Tree	{ super ( chromosomes , populationLimit , elitismRate ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , elitismRate ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 11

115
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 15

116
Tree	{ this ( new chromosomes ( Chromosome ) , populationLimit ) ; }
Code	{ this ( new chromosomes ( Chromosome ) , populationLimit ) ; }
Distance : 8

117
Tree	{ super ( chromosomes , OutOfRangeException ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , OutOfRangeException ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 16

118
Tree	{ this ( new populationLimit ( chromosomes ) , populationLimit ) ; }
Code	{ this ( new populationLimit ( chromosomes ) , populationLimit ) ; }
Distance : 8

119
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new elitismRate [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new elitismRate [ NUMBER_CONSTANT ] ; }
Distance : 8

120
Tree	{ this ( chromosomes , populationLimit , false ) ; }
Code	{ this ( chromosomes , populationLimit , false ) ; }
Distance : 6

121
Tree	{ this ( chromosomes , ( populationLimit ) null ) ; }
Code	{ this ( chromosomes , ( populationLimit ) null ) ; }
Distance : 6

122
Tree	{ this ( chromosomes , ( populationLimit ) super(); ) ; }
Code	{ this ( chromosomes , ( populationLimit ) super(); ) ; }
Distance : 6

123
Tree	{ this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 8

124
Tree	{ super ( chromosomes , populationLimit , chromosomes ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , chromosomes ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 11

125
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 9

126
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { chromosomes } ; }
Distance : 9

127
Tree	{ super ( chromosomes , populationLimit ) ; this . OutOfRangeException = elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; this . OutOfRangeException = elitismRate ; }
Distance : 5

128
Tree	{ this . chromosomes = OutOfRangeException ; chromosomes () ; }
Code	{ this . chromosomes = OutOfRangeException ; chromosomes () ; }
Distance : 9

129
Tree	{ this . chromosomes = populationLimit ; this . OutOfRangeException = elitismRate ; }
Code	{ this . chromosomes = populationLimit ; this . OutOfRangeException = elitismRate ; }
Distance : 9

130
Tree	{ this . chromosomes = populationLimit ; this . chromosomes = elitismRate ; }
Code	{ this . chromosomes = populationLimit ; this . chromosomes = elitismRate ; }
Distance : 9

131
Tree	{ super ( chromosomes ) ; this . elitismRate = new byte [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new byte [] { chromosomes } ; }
Distance : 11

132
Tree	{ super ( chromosomes , OutOfRangeException ) ; this . elitismRate = new Chromosome [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , OutOfRangeException ) ; this . elitismRate = new Chromosome [ NUMBER_CONSTANT ] ; }
Distance : 9

133
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = OutOfRangeException ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = OutOfRangeException ; }
Distance : 4

134
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Chromosome [] ? ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Chromosome [] ? ; }
Distance : 7

135
Tree	{ this ( new List ( chromosomes ) , populationLimit ) ; }
Code	{ this ( new List ( chromosomes ) , populationLimit ) ; }
Distance : 9

136
Tree	{ this ( elitismRate , populationLimit ) ; }
Code	{ this ( elitismRate , populationLimit ) ; }
Distance : 7

137
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; fireChangeEvent }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; fireChangeEvent }
Distance : 10

138
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 15

139
Tree	{ super ( chromosomes ) ; this . Chromosome = new double [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . Chromosome = new double [] { chromosomes } ; }
Distance : 12

140
Tree	{ super ( chromosomes , populationLimit ) ; this . OutOfRangeException = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . OutOfRangeException = new double [] { chromosomes } ; }
Distance : 10

141
Tree	{ this ( Chromosome , false ) ; }
Code	{ this ( Chromosome , false ) ; }
Distance : 8

142
Tree	{ super ( Chromosome , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( Chromosome , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 5

143
Tree	{ super ( chromosomes , populationLimit , this ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , this ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 11

144
Tree	{ this ( chromosomes , populationLimit , true ) ; }
Code	{ this ( chromosomes , populationLimit , true ) ; }
Distance : 6

145
Tree	{ super ( chromosomes , populationLimit ) ; this . Chromosome = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . Chromosome = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 16

146
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; StringBuffer }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; StringBuffer }
Distance : 10

147
Tree	{ this . Chromosome = populationLimit ; }
Code	{ this . Chromosome = populationLimit ; }
Distance : 10

148
Tree	{ super ( populationLimit , populationLimit ) ; }
Code	{ super ( populationLimit , populationLimit ) ; }
Distance : 6

149
Tree	{ this . chromosomes = populationLimit ; this . Chromosome = elitismRate ; }
Code	{ this . chromosomes = populationLimit ; this . Chromosome = elitismRate ; }
Distance : 9

150
Tree	{ this ( chromosomes , populationLimit ) ; }
Code	{ this ( chromosomes , populationLimit ) ; }
Distance : 6

151
Tree	{ this ( chromosomes , elitismRate ) ; }
Code	{ this ( chromosomes , elitismRate ) ; }
Distance : 6

152
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new elitismRate [] <> ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new elitismRate [] <> ; }
Distance : 7

153
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Chromosome [] CHAR_CONS ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Chromosome [] CHAR_CONS ; }
Distance : 7

154
Tree	{ this . chromosomes = populationLimit ; this () ; }
Code	{ this . chromosomes = populationLimit ; this () ; }
Distance : 8

155
Tree	{ this . chromosomes = populationLimit ; this . elitismRate = OutOfRangeException ; }
Code	{ this . chromosomes = populationLimit ; this . elitismRate = OutOfRangeException ; }
Distance : 8

156
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { Chromosome } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { Chromosome } ; }
Distance : 9

157
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Chromosome [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Chromosome [ NUMBER_CONSTANT ] ; }
Distance : 8

158
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 9

159
Tree	{ super ( Chromosome , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( Chromosome , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 16

160
Tree	{ this . chromosomes = OutOfRangeException ; Chromosome () ; }
Code	{ this . chromosomes = OutOfRangeException ; Chromosome () ; }
Distance : 9

161
Tree	{ super ( chromosomes , populationLimit ) ; this . Chromosome = new Chromosome [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , populationLimit ) ; this . Chromosome = new Chromosome [ NUMBER_CONSTANT ] ; }
Distance : 9

162
Tree	{ super ( chromosomes , populationLimit , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 11

163
Tree	{ this . chromosomes = populationLimit ; OutOfRangeException () ; }
Code	{ this . chromosomes = populationLimit ; OutOfRangeException () ; }
Distance : 8

164
Tree	{ this ( chromosomes , ( populationLimit ) return; ) ; }
Code	{ this ( chromosomes , ( populationLimit ) return; ) ; }
Distance : 6

165
Tree	{ super ( chromosomes , populationLimit , Chromosome ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , Chromosome ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 11

166
Tree	{ this . chromosomes = populationLimit ; this . elitismRate = Chromosome ; }
Code	{ this . chromosomes = populationLimit ; this . elitismRate = Chromosome ; }
Distance : 8

167
Tree	{ this . Chromosome = populationLimit ; chromosomes () ; }
Code	{ this . Chromosome = populationLimit ; chromosomes () ; }
Distance : 9

168
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 9

169
Tree	{ super ( chromosomes , populationLimit ) ; this . OutOfRangeException = new Chromosome [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , populationLimit ) ; this . OutOfRangeException = new Chromosome [ NUMBER_CONSTANT ] ; }
Distance : 9

170
Tree	{ super ( chromosomes ) ; this . elitismRate = new double [] { Chromosome } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new double [] { Chromosome } ; }
Distance : 11

171
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { chromosomes } ; }
Distance : 9

172
Tree	{ super ( chromosomes , OutOfRangeException ) ; this . elitismRate = elitismRate ; }
Code	{ super ( chromosomes , OutOfRangeException ) ; this . elitismRate = elitismRate ; }
Distance : 5

173
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new chromosomes [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new chromosomes [ NUMBER_CONSTANT ] ; }
Distance : 8

174
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Chromosome [] <> ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Chromosome [] <> ; }
Distance : 7

175
Tree	{ this ( OutOfRangeException , false ) ; }
Code	{ this ( OutOfRangeException , false ) ; }
Distance : 8

176
Tree	{ this ( List , false ) ; }
Code	{ this ( List , false ) ; }
Distance : 8

177
Tree	{ super ( chromosomes , populationLimit , elitismRate ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , elitismRate ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 11

178
Tree	{ this . chromosomes = OutOfRangeException ; elitismRate () ; }
Code	{ this . chromosomes = OutOfRangeException ; elitismRate () ; }
Distance : 8

179
Tree	{ this ( new elitismRate ( chromosomes ) , populationLimit ) ; }
Code	{ this ( new elitismRate ( chromosomes ) , populationLimit ) ; }
Distance : 9

180
Tree	{ this ( chromosomes , OutOfRangeException , true ) ; }
Code	{ this ( chromosomes , OutOfRangeException , true ) ; }
Distance : 7

181
Tree	{ this ( chromosomes , elitismRate , false ) ; }
Code	{ this ( chromosomes , elitismRate , false ) ; }
Distance : 7

182
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

183
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 4

184
Tree	{ super ( chromosomes , populationLimit , chromosomes ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , chromosomes ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 11

185
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Chromosome [] / ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Chromosome [] / ; }
Distance : 7

186
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Chromosome [] {} ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Chromosome [] {} ; }
Distance : 7

187
Tree	{ super ( chromosomes , populationLimit , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 11

188
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 15

189
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 4

190
Tree	{ super ( Chromosome , populationLimit ) ; this . elitismRate = new Chromosome [ NUMBER_CONSTANT ] ; }
Code	{ super ( Chromosome , populationLimit ) ; this . elitismRate = new Chromosome [ NUMBER_CONSTANT ] ; }
Distance : 9

191
Tree	{ super ( chromosomes , populationLimit , Chromosome ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , Chromosome ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 11

192
Tree	{ this ( List , populationLimit ) ; }
Code	{ this ( List , populationLimit ) ; }
Distance : 7

193
Tree	{ super ( chromosomes , populationLimit , populationLimit ) ; this . Chromosome = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , populationLimit ) ; this . Chromosome = new double [] { chromosomes } ; }
Distance : 12

194
Tree	{ this . Chromosome = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ this . Chromosome = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 9

195
Tree	{ this ( chromosomes , populationLimit , false ) ; }
Code	{ this ( chromosomes , populationLimit , false ) ; }
Distance : 6

196
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Chromosome [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Chromosome [ NUMBER_CONSTANT ] ; }
Distance : 8

197
Tree	{ this . chromosomes = populationLimit ; elitismRate () ; }
Code	{ this . chromosomes = populationLimit ; elitismRate () ; }
Distance : 7

198
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 4

199
Tree	{ this . chromosomes = populationLimit ; populationLimit () ; }
Code	{ this . chromosomes = populationLimit ; populationLimit () ; }
Distance : 8

========================================================================


========================================================================
Example Number: 72
Parent Code is: 
{ return chromosomes . iterator () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return getChromosomes () . iterator () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=chromosomes}) (235{val=.}) (802{val=iterator}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=getChromosomes}) (216{val=()})) (235{val=.}) (802{val=iterator}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/34/parent/src_main_java_org_apache_commons_math3_genetics_ListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return ( UnsupportedOperationException ) chromosomes . iterator () ; }
Code	{ return ( UnsupportedOperationException ) chromosomes . iterator () ; }
Distance : 4

1
Tree	{ return ! UnsupportedOperationException . iterator () ; }
Code	{ return ! UnsupportedOperationException . iterator () ; }
Distance : 2

2
Tree	{ return new getChromosomes ( chromosomes ) ; }
Code	{ return new getChromosomes ( chromosomes ) ; }
Distance : 5

3
Tree	{ return chromosomes . getChromosomes () - NUMBER_CONSTANT ; }
Code	{ return chromosomes . getChromosomes () - NUMBER_CONSTANT ; }
Distance : 5

4
Tree	{ return new iterator ( Chromosome ) ; }
Code	{ return new iterator ( Chromosome ) ; }
Distance : 5

5
Tree	{ return ! chromosomes . UnsupportedOperationException () ; }
Code	{ return ! chromosomes . UnsupportedOperationException () ; }
Distance : 3

6
Tree	{ return ! getChromosomes . iterator () ; }
Code	{ return ! getChromosomes . iterator () ; }
Distance : 2

7
Tree	{ return ! chromosomes . chromosomes () ; }
Code	{ return ! chromosomes . chromosomes () ; }
Distance : 3

8
Tree	{ return ( chromosomes ) chromosomes . Iterator () ; }
Code	{ return ( chromosomes ) chromosomes . Iterator () ; }
Distance : 5

9
Tree	{ return chromosomes == null chromosomes iterator . iterator () ; }
Code	{ return chromosomes == null chromosomes iterator . iterator () ; }
Distance : 5

10
Tree	{ return this . remove ; }
Code	{ return this . remove ; }
Distance : 4

11
Tree	{ return iterator == null chromosomes chromosomes . iterator () ; }
Code	{ return iterator == null chromosomes chromosomes . iterator () ; }
Distance : 5

12
Tree	{ return new chromosomes ( getChromosomes ) ; }
Code	{ return new chromosomes ( getChromosomes ) ; }
Distance : 5

13
Tree	{ return getChromosomes () ; }
Code	{ return getChromosomes () ; }
Distance : 3

14
Tree	{ return STRING_CONSTANT + iterator . iterator () + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + iterator . iterator () + STRING_CONSTANT ; }
Distance : 5

15
Tree	{ return STRING_CONSTANT + Chromosome . iterator () + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + Chromosome . iterator () + STRING_CONSTANT ; }
Distance : 5

16
Tree	{ return new getChromosomes ( chromosomes ) ; }
Code	{ return new getChromosomes ( chromosomes ) ; }
Distance : 5

17
Tree	{ return ( chromosomes ) chromosomes . UnsupportedOperationException () ; }
Code	{ return ( chromosomes ) chromosomes . UnsupportedOperationException () ; }
Distance : 5

18
Tree	{ return getChromosomes . iterator () - NUMBER_CONSTANT ; }
Code	{ return getChromosomes . iterator () - NUMBER_CONSTANT ; }
Distance : 3

19
Tree	{ return ( getChromosomes ) chromosomes . iterator () ; }
Code	{ return ( getChromosomes ) chromosomes . iterator () ; }
Distance : 3

20
Tree	{ return ( Chromosome == null ? null : chromosomes . iterator () ) ; }
Code	{ return ( Chromosome == null ? null : chromosomes . iterator () ) ; }
Distance : 9

21
Tree	{ return ! iterator . iterator () ; }
Code	{ return ! iterator . iterator () ; }
Distance : 2

22
Tree	{ return ( chromosomes == null ? null : Chromosome . iterator () ) ; }
Code	{ return ( chromosomes == null ? null : Chromosome . iterator () ) ; }
Distance : 9

23
Tree	{ return this . chromosomes ; }
Code	{ return this . chromosomes ; }
Distance : 4

24
Tree	{ return chromosomes ; }
Code	{ return chromosomes ; }
Distance : 5

25
Tree	{ return new chromosomes ( chromosomes ) ; }
Code	{ return new chromosomes ( chromosomes ) ; }
Distance : 5

26
Tree	{ return Chromosome . iterator () ; }
Code	{ return Chromosome . iterator () ; }
Distance : 2

27
Tree	{ return chromosomes . iterator () . iterator () ; }
Code	{ return chromosomes . iterator () . iterator () ; }
Distance : 3

28
Tree	{ return true ; }
Code	{ return true ; }
Distance : 5

29
Tree	{ return iterator . iterator () ; }
Code	{ return iterator . iterator () ; }
Distance : 2

30
Tree	{ return ( chromosomes == null ? null : chromosomes . UnsupportedOperationException () ) ; }
Code	{ return ( chromosomes == null ? null : chromosomes . UnsupportedOperationException () ) ; }
Distance : 10

31
Tree	{ return chromosomes . iterator ( getChromosomes ) ; }
Code	{ return chromosomes . iterator ( getChromosomes ) ; }
Distance : 5

32
Tree	{ return new UnsupportedOperationException () ; }
Code	{ return new UnsupportedOperationException () ; }
Distance : 4

33
Tree	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; }
Distance : 5

34
Tree	{ return ! chromosomes . Iterator () ; }
Code	{ return ! chromosomes . Iterator () ; }
Distance : 3

35
Tree	{ return new Chromosome () ; }
Code	{ return new Chromosome () ; }
Distance : 4

36
Tree	{ return new iterator ( chromosomes ) ; }
Code	{ return new iterator ( chromosomes ) ; }
Distance : 5

37
Tree	{ return ( Chromosome == null ? null : Chromosome . iterator () ) ; }
Code	{ return ( Chromosome == null ? null : Chromosome . iterator () ) ; }
Distance : 9

38
Tree	{ return Chromosome . iterator () - NUMBER_CONSTANT ; }
Code	{ return Chromosome . iterator () - NUMBER_CONSTANT ; }
Distance : 4

39
Tree	{ return iterator . iterator () . iterator () ; }
Code	{ return iterator . iterator () . iterator () ; }
Distance : 3

40
Tree	{ return chromosomes . iterator ( iterator ) ; }
Code	{ return chromosomes . iterator ( iterator ) ; }
Distance : 5

41
Tree	{ return chromosomes . chromosomes () - NUMBER_CONSTANT ; }
Code	{ return chromosomes . chromosomes () - NUMBER_CONSTANT ; }
Distance : 5

42
Tree	{ return ( UnsupportedOperationException == null ? null : chromosomes . iterator () ) ; }
Code	{ return ( UnsupportedOperationException == null ? null : chromosomes . iterator () ) ; }
Distance : 9

43
Tree	{ return ( Chromosome ) chromosomes . iterator () ; }
Code	{ return ( Chromosome ) chromosomes . iterator () ; }
Distance : 4

44
Tree	{ return new chromosomes ( Chromosome ) ; }
Code	{ return new chromosomes ( Chromosome ) ; }
Distance : 5

45
Tree	{ return new UnsupportedOperationException ( chromosomes ) ; }
Code	{ return new UnsupportedOperationException ( chromosomes ) ; }
Distance : 5

46
Tree	{ return chromosomes == null chromosomes getChromosomes . iterator () ; }
Code	{ return chromosomes == null chromosomes getChromosomes . iterator () ; }
Distance : 5

47
Tree	{ return ( chromosomes ) iterator . iterator () ; }
Code	{ return ( chromosomes ) iterator . iterator () ; }
Distance : 4

48
Tree	{ return chromosomes . UnsupportedOperationException () ; }
Code	{ return chromosomes . UnsupportedOperationException () ; }
Distance : 3

49
Tree	{ return new Chromosome ( chromosomes ) ; }
Code	{ return new Chromosome ( chromosomes ) ; }
Distance : 5

50
Tree	{ return chromosomes . iterator () . Iterator () ; }
Code	{ return chromosomes . iterator () . Iterator () ; }
Distance : 4

51
Tree	{ return ( iterator ) chromosomes . iterator () ; }
Code	{ return ( iterator ) chromosomes . iterator () ; }
Distance : 4

52
Tree	{ return ! chromosomes . getChromosomes () ; }
Code	{ return ! chromosomes . getChromosomes () ; }
Distance : 3

53
Tree	{ return chromosomes . Iterator () . iterator () ; }
Code	{ return chromosomes . Iterator () . iterator () ; }
Distance : 3

54
Tree	{ return chromosomes . Iterator () - NUMBER_CONSTANT ; }
Code	{ return chromosomes . Iterator () - NUMBER_CONSTANT ; }
Distance : 5

55
Tree	{ return Iterator . iterator () ; }
Code	{ return Iterator . iterator () ; }
Distance : 2

56
Tree	{ return getChromosomes ; }
Code	{ return getChromosomes ; }
Distance : 4

57
Tree	{ return chromosomes . UnsupportedOperationException () - NUMBER_CONSTANT ; }
Code	{ return chromosomes . UnsupportedOperationException () - NUMBER_CONSTANT ; }
Distance : 5

58
Tree	{ return ( chromosomes == null ? null : getChromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? null : getChromosomes . iterator () ) ; }
Distance : 9

59
Tree	{ return UnsupportedOperationException . iterator () - NUMBER_CONSTANT ; }
Code	{ return UnsupportedOperationException . iterator () - NUMBER_CONSTANT ; }
Distance : 4

60
Tree	{ return chromosomes . iterator () && chromosomes . iterator () ; }
Code	{ return chromosomes . iterator () && chromosomes . iterator () ; }
Distance : 5

61
Tree	{ return new Chromosome ( chromosomes ) ; }
Code	{ return new Chromosome ( chromosomes ) ; }
Distance : 5

62
Tree	{ return chromosomes . iterator ( Iterator ) ; }
Code	{ return chromosomes . iterator ( Iterator ) ; }
Distance : 5

63
Tree	{ return this . Chromosome ; }
Code	{ return this . Chromosome ; }
Distance : 4

64
Tree	{ return getChromosomes . iterator () ; }
Code	{ return getChromosomes . iterator () ; }
Distance : 1

65
Tree	{ return new chromosomes ( iterator ) ; }
Code	{ return new chromosomes ( iterator ) ; }
Distance : 4

66
Tree	{ return new UnsupportedOperationException ( iterator ) ; }
Code	{ return new UnsupportedOperationException ( iterator ) ; }
Distance : 4

67
Tree	{ return new Iterator ( chromosomes ) ; }
Code	{ return new Iterator ( chromosomes ) ; }
Distance : 5

68
Tree	{ return chromosomes . iterator ( chromosomes . iterator () ) ; }
Code	{ return chromosomes . iterator ( chromosomes . iterator () ) ; }
Distance : 6

69
Tree	{ return Chromosome . iterator () . iterator () ; }
Code	{ return Chromosome . iterator () . iterator () ; }
Distance : 3

70
Tree	{ return this . iterator ; }
Code	{ return this . iterator ; }
Distance : 3

71
Tree	{ return Chromosome . iterator ( iterator ) ; }
Code	{ return Chromosome . iterator ( iterator ) ; }
Distance : 5

72
Tree	{ return iterator . iterator ( iterator . iterator () ) ; }
Code	{ return iterator . iterator ( iterator . iterator () ) ; }
Distance : 6

73
Tree	{ return new getChromosomes () ; }
Code	{ return new getChromosomes () ; }
Distance : 4

74
Tree	{ return getChromosomes . iterator () . iterator () ; }
Code	{ return getChromosomes . iterator () . iterator () ; }
Distance : 2

75
Tree	{ return chromosomes . iterator ( UnsupportedOperationException . iterator () ) ; }
Code	{ return chromosomes . iterator ( UnsupportedOperationException . iterator () ) ; }
Distance : 6

76
Tree	{ return iterator . iterator ( iterator ) ; }
Code	{ return iterator . iterator ( iterator ) ; }
Distance : 5

77
Tree	{ return chromosomes . iterator () && chromosomes . Chromosome () ; }
Code	{ return chromosomes . iterator () && chromosomes . Chromosome () ; }
Distance : 6

78
Tree	{ return chromosomes . iterator () () chromosomes . iterator () ; }
Code	{ return chromosomes . iterator () () chromosomes . iterator () ; }
Distance : 5

79
Tree	{ return ( getChromosomes == null ? null : chromosomes . iterator () ) ; }
Code	{ return ( getChromosomes == null ? null : chromosomes . iterator () ) ; }
Distance : 8

80
Tree	{ return new iterator ( iterator ) ; }
Code	{ return new iterator ( iterator ) ; }
Distance : 4

81
Tree	{ return chromosomes . iterator ( Chromosome . iterator () ) ; }
Code	{ return chromosomes . iterator ( Chromosome . iterator () ) ; }
Distance : 6

82
Tree	{ return Chromosome ; }
Code	{ return Chromosome ; }
Distance : 5

83
Tree	{ return new UnsupportedOperationException ( chromosomes ) ; }
Code	{ return new UnsupportedOperationException ( chromosomes ) ; }
Distance : 5

84
Tree	{ return iterator () ; }
Code	{ return iterator () ; }
Distance : 3

85
Tree	{ return chromosomes . iterator ( UnsupportedOperationException ) ; }
Code	{ return chromosomes . iterator ( UnsupportedOperationException ) ; }
Distance : 5

86
Tree	{ return STRING_CONSTANT + UnsupportedOperationException . iterator () + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + UnsupportedOperationException . iterator () + STRING_CONSTANT ; }
Distance : 5

87
Tree	{ return this . UnsupportedOperationException ; }
Code	{ return this . UnsupportedOperationException ; }
Distance : 4

88
Tree	{ return STRING_CONSTANT + chromosomes . getChromosomes () + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + chromosomes . getChromosomes () + STRING_CONSTANT ; }
Distance : 6

89
Tree	{ return chromosomes . iterator () ; }
Code	{ return chromosomes . iterator () ; }
Distance : 2

90
Tree	{ return chromosomes . UnsupportedOperationException () . iterator () ; }
Code	{ return chromosomes . UnsupportedOperationException () . iterator () ; }
Distance : 3

91
Tree	{ return new iterator ( getChromosomes ) ; }
Code	{ return new iterator ( getChromosomes ) ; }
Distance : 5

92
Tree	{ return chromosomes . iterator ( iterator . getChromosomes () ) ; }
Code	{ return chromosomes . iterator ( iterator . getChromosomes () ) ; }
Distance : 7

93
Tree	{ return chromosomes . iterator () () getChromosomes . iterator () ; }
Code	{ return chromosomes . iterator () () getChromosomes . iterator () ; }
Distance : 5

94
Tree	{ return ( chromosomes ) getChromosomes . iterator () ; }
Code	{ return ( chromosomes ) getChromosomes . iterator () ; }
Distance : 4

95
Tree	{ return Iterator ; }
Code	{ return Iterator ; }
Distance : 5

96
Tree	{ return chromosomes ; } i
Code	{ return chromosomes ; } i
Distance : 6

97
Tree	{ return Iterator ; }
Code	{ return Iterator ; }
Distance : 5

98
Tree	{ return false ; }
Code	{ return false ; }
Distance : 5

99
Tree	{ return new Iterator () ; }
Code	{ return new Iterator () ; }
Distance : 4

100
Tree	{ return chromosomes . iterator () () Chromosome . iterator () ; }
Code	{ return chromosomes . iterator () () Chromosome . iterator () ; }
Distance : 5

101
Tree	{ return new Chromosome ( Chromosome ) ; }
Code	{ return new Chromosome ( Chromosome ) ; }
Distance : 5

102
Tree	{ return chromosomes . iterator () && chromosomes . UnsupportedOperationException () ; }
Code	{ return chromosomes . iterator () && chromosomes . UnsupportedOperationException () ; }
Distance : 6

103
Tree	{ return new iterator () ; }
Code	{ return new iterator () ; }
Distance : 3

104
Tree	{ return chromosomes . iterator () && Chromosome . getChromosomes () ; }
Code	{ return chromosomes . iterator () && Chromosome . getChromosomes () ; }
Distance : 6

105
Tree	{ return chromosomes . iterator () && Chromosome . remove () ; }
Code	{ return chromosomes . iterator () && Chromosome . remove () ; }
Distance : 6

106
Tree	{ return chromosomes . iterator () . UnsupportedOperationException () ; }
Code	{ return chromosomes . iterator () . UnsupportedOperationException () ; }
Distance : 4

107
Tree	{ return ( iterator == null ? null : chromosomes . iterator () ) ; }
Code	{ return ( iterator == null ? null : chromosomes . iterator () ) ; }
Distance : 9

108
Tree	{ return chromosomes . iterator () && chromosomes . getChromosomes () ; }
Code	{ return chromosomes . iterator () && chromosomes . getChromosomes () ; }
Distance : 6

109
Tree	{ return getChromosomes ; }
Code	{ return getChromosomes ; }
Distance : 4

110
Tree	{ return STRING_CONSTANT + getChromosomes . iterator () + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + getChromosomes . iterator () + STRING_CONSTANT ; }
Distance : 5

111
Tree	{ return chromosomes ; } i
Code	{ return chromosomes ; } i
Distance : 6

112
Tree	{ return ( chromosomes == null ? null : iterator . iterator () ) ; }
Code	{ return ( chromosomes == null ? null : iterator . iterator () ) ; }
Distance : 9

113
Tree	{ return chromosomes . getChromosomes () ; }
Code	{ return chromosomes . getChromosomes () ; }
Distance : 3

114
Tree	{ return Chromosome . iterator () () iterator . iterator () ; }
Code	{ return Chromosome . iterator () () iterator . iterator () ; }
Distance : 5

115
Tree	{ return chromosomes . iterator ( chromosomes ) ; }
Code	{ return chromosomes . iterator ( chromosomes ) ; }
Distance : 5

116
Tree	{ return iterator ; }
Code	{ return iterator ; }
Distance : 4

117
Tree	{ return chromosomes () ; }
Code	{ return chromosomes () ; }
Distance : 4

118
Tree	{ return UnsupportedOperationException ; }
Code	{ return UnsupportedOperationException ; }
Distance : 5

119
Tree	{ return remove () ; }
Code	{ return remove () ; }
Distance : 4

120
Tree	{ return chromosomes . iterator () () UnsupportedOperationException . iterator () ; }
Code	{ return chromosomes . iterator () () UnsupportedOperationException . iterator () ; }
Distance : 5

121
Tree	{ return new chromosomes () ; } options
Code	{ return new chromosomes () ; } options
Distance : 5

122
Tree	{ return new remove () ; }
Code	{ return new remove () ; }
Distance : 4

123
Tree	{ return STRING_CONSTANT + chromosomes . UnsupportedOperationException () + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + chromosomes . UnsupportedOperationException () + STRING_CONSTANT ; }
Distance : 6

124
Tree	{ return false ; } f
Code	{ return false ; } f
Distance : 6

125
Tree	{ return iterator ; }
Code	{ return iterator ; }
Distance : 4

126
Tree	{ return Chromosome . iterator () && chromosomes . remove () ; }
Code	{ return Chromosome . iterator () && chromosomes . remove () ; }
Distance : 6

127
Tree	{ return getChromosomes == null chromosomes chromosomes . iterator () ; }
Code	{ return getChromosomes == null chromosomes chromosomes . iterator () ; }
Distance : 4

128
Tree	{ return iterator . iterator () () iterator . iterator () ; }
Code	{ return iterator . iterator () () iterator . iterator () ; }
Distance : 5

129
Tree	{ return false ; } {}
Code	{ return false ; } {}
Distance : 6

130
Tree	{ return iterator () ; } options
Code	{ return iterator () ; } options
Distance : 4

131
Tree	{ return ! Iterator . iterator () ; }
Code	{ return ! Iterator . iterator () ; }
Distance : 2

132
Tree	{ return chromosomes . iterator () () iterator . getChromosomes () ; }
Code	{ return chromosomes . iterator () () iterator . getChromosomes () ; }
Distance : 6

133
Tree	{ return iterator . iterator () - NUMBER_CONSTANT ; }
Code	{ return iterator . iterator () - NUMBER_CONSTANT ; }
Distance : 4

134
Tree	{ return new Chromosome ( iterator ) ; }
Code	{ return new Chromosome ( iterator ) ; }
Distance : 4

135
Tree	{ return this . Iterator ; }
Code	{ return this . Iterator ; }
Distance : 4

136
Tree	{ return chromosomes . iterator () && chromosomes . remove () ; }
Code	{ return chromosomes . iterator () && chromosomes . remove () ; }
Distance : 6

137
Tree	{ return remove ; }
Code	{ return remove ; }
Distance : 5

138
Tree	{ return STRING_CONSTANT + chromosomes . chromosomes () + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + chromosomes . chromosomes () + STRING_CONSTANT ; }
Distance : 6

139
Tree	{ return Chromosome () ; }
Code	{ return Chromosome () ; }
Distance : 4

140
Tree	{ return new chromosomes () ; }
Code	{ return new chromosomes () ; }
Distance : 4

141
Tree	{ return Chromosome . iterator () () chromosomes . iterator () ; }
Code	{ return Chromosome . iterator () () chromosomes . iterator () ; }
Distance : 5

142
Tree	{ return STRING_CONSTANT + chromosomes . Iterator () + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + chromosomes . Iterator () + STRING_CONSTANT ; }
Distance : 6

143
Tree	{ return iterator . iterator ( Iterator ) ; }
Code	{ return iterator . iterator ( Iterator ) ; }
Distance : 5

144
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; }
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; }
Distance : 4

145
Tree	{ return chromosomes ; } options
Code	{ return chromosomes ; } options
Distance : 6

146
Tree	{ return Iterator . iterator () - NUMBER_CONSTANT ; }
Code	{ return Iterator . iterator () - NUMBER_CONSTANT ; }
Distance : 4

147
Tree	{ return chromosomes . iterator ( Iterator . getChromosomes () ) ; }
Code	{ return chromosomes . iterator ( Iterator . getChromosomes () ) ; }
Distance : 7

148
Tree	{ return STRING_CONSTANT + Iterator . iterator () + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + Iterator . iterator () + STRING_CONSTANT ; }
Distance : 5

149
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; }
Distance : 9

150
Tree	{ return iterator () ; } i
Code	{ return iterator () ; } i
Distance : 4

151
Tree	{ return chromosomes . iterator () . chromosomes () ; }
Code	{ return chromosomes . iterator () . chromosomes () ; }
Distance : 4

152
Tree	{ return UnsupportedOperationException () ; }
Code	{ return UnsupportedOperationException () ; }
Distance : 4

153
Tree	{ return ! chromosomes . iterator () ; }
Code	{ return ! chromosomes . iterator () ; }
Distance : 2

154
Tree	{ return chromosomes . iterator () () Iterator . iterator () ; }
Code	{ return chromosomes . iterator () () Iterator . iterator () ; }
Distance : 5

155
Tree	{ return ! Chromosome . iterator () ; }
Code	{ return ! Chromosome . iterator () ; }
Distance : 2

156
Tree	{ return Chromosome ; }
Code	{ return Chromosome ; }
Distance : 5

157
Tree	{ return chromosomes ; } Math
Code	{ return chromosomes ; } Math
Distance : 6

158
Tree	{ return chromosomes ; } options
Code	{ return chromosomes ; } options
Distance : 6

159
Tree	{ return chromosomes == null chromosomes chromosomes . iterator () ; }
Code	{ return chromosomes == null chromosomes chromosomes . iterator () ; }
Distance : 5

160
Tree	{ return false ; } Preconditions
Code	{ return false ; } Preconditions
Distance : 6

161
Tree	{ return ( chromosomes ) Chromosome . iterator () ; }
Code	{ return ( chromosomes ) Chromosome . iterator () ; }
Distance : 4

162
Tree	{ return chromosomes . iterator ( Chromosome ) ; }
Code	{ return chromosomes . iterator ( Chromosome ) ; }
Distance : 5

163
Tree	{ return this . getChromosomes ; }
Code	{ return this . getChromosomes ; }
Distance : 4

164
Tree	{ return this . chromosomes ; } Math
Code	{ return this . chromosomes ; } Math
Distance : 5

165
Tree	{ return chromosomes ; } Math
Code	{ return chromosomes ; } Math
Distance : 6

166
Tree	{ return chromosomes == null chromosomes chromosomes . UnsupportedOperationException () ; }
Code	{ return chromosomes == null chromosomes chromosomes . UnsupportedOperationException () ; }
Distance : 6

167
Tree	{ return UnsupportedOperationException . iterator () ; }
Code	{ return UnsupportedOperationException . iterator () ; }
Distance : 2

168
Tree	{ return false ; } -
Code	{ return false ; } -
Distance : 6

169
Tree	{ return this . chromosomes ; } i
Code	{ return this . chromosomes ; } i
Distance : 5

170
Tree	{ return UnsupportedOperationException ; }
Code	{ return UnsupportedOperationException ; }
Distance : 5

171
Tree	{ return Chromosome . iterator ( iterator . iterator () ) ; }
Code	{ return Chromosome . iterator ( iterator . iterator () ) ; }
Distance : 6

172
Tree	{ return chromosomes == null chromosomes Chromosome . iterator () ; }
Code	{ return chromosomes == null chromosomes Chromosome . iterator () ; }
Distance : 5

173
Tree	{ return false ; } MathRuntimeException
Code	{ return false ; } MathRuntimeException
Distance : 6

174
Tree	{ return new iterator ( chromosomes ) ; }
Code	{ return new iterator ( chromosomes ) ; }
Distance : 5

175
Tree	{ return chromosomes ; }
Code	{ return chromosomes ; }
Distance : 5

176
Tree	{ return Chromosome == null chromosomes chromosomes . iterator () ; }
Code	{ return Chromosome == null chromosomes chromosomes . iterator () ; }
Distance : 5

177
Tree	{ return false ; } Class
Code	{ return false ; } Class
Distance : 6

178
Tree	{ return remove ; }
Code	{ return remove ; }
Distance : 5

179
Tree	{ return false ; } Test
Code	{ return false ; } Test
Distance : 6

180
Tree	{ return this . chromosomes ; } options
Code	{ return this . chromosomes ; } options
Distance : 5

181
Tree	{ return chromosomes == null chromosomes chromosomes . Iterator () ; }
Code	{ return chromosomes == null chromosomes chromosomes . Iterator () ; }
Distance : 6

182
Tree	{ return chromosomes . chromosomes () ; }
Code	{ return chromosomes . chromosomes () ; }
Distance : 3

183
Tree	{ return false ; } ParamChecks
Code	{ return false ; } ParamChecks
Distance : 6

184
Tree	{ return chromosomes . iterator () . getChromosomes () ; }
Code	{ return chromosomes . iterator () . getChromosomes () ; }
Distance : 4

185
Tree	{ return chromosomes . iterator ( getChromosomes . iterator () ) ; }
Code	{ return chromosomes . iterator ( getChromosomes . iterator () ) ; }
Distance : 6

186
Tree	{ return new chromosomes () ; } Math
Code	{ return new chromosomes () ; } Math
Distance : 5

187
Tree	{ return chromosomes . Iterator () ; }
Code	{ return chromosomes . Iterator () ; }
Distance : 3

188
Tree	{ return new chromosomes ( chromosomes ) ; }
Code	{ return new chromosomes ( chromosomes ) ; }
Distance : 5

189
Tree	{ return Iterator () ; }
Code	{ return Iterator () ; }
Distance : 4

190
Tree	{ return chromosomes . iterator () && chromosomes . chromosomes () ; }
Code	{ return chromosomes . iterator () && chromosomes . chromosomes () ; }
Distance : 6

191
Tree	{ return chromosomes . iterator ( iterator . iterator () ) ; }
Code	{ return chromosomes . iterator ( iterator . iterator () ) ; }
Distance : 6

192
Tree	{ return ( chromosomes ) chromosomes . iterator () ; }
Code	{ return ( chromosomes ) chromosomes . iterator () ; }
Distance : 4

193
Tree	{ return iterator . iterator () && chromosomes . remove () ; }
Code	{ return iterator . iterator () && chromosomes . remove () ; }
Distance : 6

194
Tree	{ return iterator () ; } Math
Code	{ return iterator () ; } Math
Distance : 4

195
Tree	{ return chromosomes . iterator () () iterator . iterator () ; }
Code	{ return chromosomes . iterator () () iterator . iterator () ; }
Distance : 5

196
Tree	{ return Chromosome == null chromosomes Chromosome . iterator () ; }
Code	{ return Chromosome == null chromosomes Chromosome . iterator () ; }
Distance : 5

197
Tree	{ return Chromosome . iterator ( Iterator ) ; }
Code	{ return Chromosome . iterator ( Iterator ) ; }
Distance : 5

198
Tree	{ return new chromosomes () ; } i
Code	{ return new chromosomes () ; } i
Distance : 5

199
Tree	{ return chromosomes . iterator ( Iterator . iterator () ) ; }
Code	{ return chromosomes . iterator ( Iterator . iterator () ) ; }
Distance : 6

========================================================================


========================================================================
Example Number: 73
Parent Code is: 
if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=Precision}) (235{val=.}) (802{val=compareTo}) (214{val=(}) (800{val=entry}) (234{val=,}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=maxUlps}) (215{val=)})) (231{val=>}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=columnsToDrop}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=i}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=Precision}) (235{val=.}) (802{val=compareTo}) (214{val=(}) (800{val=entry}) (234{val=,}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=epsilon}) (215{val=)})) (231{val=>}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=columnsToDrop}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=i}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/33/parent/src_main_java_org_apache_commons_math3_optimization_linear_SimplexTableau.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( matrix ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( matrix ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

1
Tree	if ( compareTo ( entry . contains ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . contains ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

2
Tree	if ( compareTo . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

3
Tree	if ( Precision ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

4
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

5
Tree	if ( Precision ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

6
Tree	if ( entry . compareTo ( entry , maxUlps , maxUlps , add ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , maxUlps , maxUlps , add ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

7
Tree	if ( Precision . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

8
Tree	if ( entry . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

9
Tree	if ( matrix . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( matrix . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

10
Tree	if ( entry . compareTo ( entry , this . entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , this . entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

11
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

12
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

13
Tree	if ( entry ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

14
Tree	if ( Precision != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( Precision != null ) { columnsToDrop . add ( entry ) ; }
Distance : 12

15
Tree	if ( matrix . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( matrix . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

16
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

17
Tree	if ( j . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( j . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 10

18
Tree	if ( Precision . compareTo ( entry / j , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry / j , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

19
Tree	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

20
Tree	if ( j . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( j . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

21
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 2

22
Tree	if ( j . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( j . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

23
Tree	if ( Precision . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

24
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

25
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

26
Tree	if ( getEntry ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( getEntry ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

27
Tree	if ( matrix . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( matrix . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

28
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( j ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( j ) ; }
Distance : 6

29
Tree	if ( entry . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

30
Tree	if ( entry . compareTo ( null , j ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , j ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

31
Tree	if ( compareTo ( entry . entry ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . entry ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

32
Tree	if ( entry . compareTo ( entry , this . epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , this . epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

33
Tree	if ( entry . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

34
Tree	if ( j . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( j . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

35
Tree	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

36
Tree	if ( entry . compareTo ( entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

37
Tree	if ( compareTo . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

38
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

39
Tree	if ( i . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

40
Tree	if ( Precision . compareTo ( entry / i , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry / i , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

41
Tree	if ( Precision . compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

42
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

43
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

44
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

45
Tree	if ( entry . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

46
Tree	if ( compareTo ( entry . contains ( entry , NUMBER_CONSTANT , entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . contains ( entry , NUMBER_CONSTANT , entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

47
Tree	if ( entry . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

48
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

49
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

50
Tree	if ( Precision . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

51
Tree	if ( getEntry != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( getEntry != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

52
Tree	if ( Precision . compareTo ( null , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

53
Tree	if ( Precision . compareTo ( null , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

54
Tree	if ( entry . compareTo ( entry / i , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / i , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

55
Tree	if ( compareTo . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

56
Tree	if ( compareTo . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

57
Tree	if ( j . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( j . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

58
Tree	if ( entry . compareTo ( entry / j , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / j , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

59
Tree	if ( compareTo . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

60
Tree	if ( compareTo ( entry . get ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . get ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

61
Tree	if ( j . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( j . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

62
Tree	if ( j . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( j . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

63
Tree	if ( matrix . compareTo ( NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( matrix . compareTo ( NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

64
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 7

65
Tree	if ( compareTo . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

66
Tree	if ( getEntry . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( getEntry . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

67
Tree	if ( i . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

68
Tree	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

69
Tree	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

70
Tree	if ( matrix . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( matrix . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 10

71
Tree	if ( entry . compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

72
Tree	if ( Precision . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

73
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

74
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

75
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

76
Tree	if ( entry . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

77
Tree	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

78
Tree	if ( matrix ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( matrix ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

79
Tree	if ( Precision . compareTo ( entry , this . entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , this . entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

80
Tree	if ( Precision . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

81
Tree	if ( j . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( j . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

82
Tree	if ( entry . compareTo ( null , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

83
Tree	if ( entry . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

84
Tree	if ( entry . compareTo ( entry , i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

85
Tree	if ( matrix . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( matrix . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

86
Tree	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 9

87
Tree	if ( compareTo . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

88
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 6

89
Tree	if ( compareTo ( entry , j , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , j , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

90
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( getEntry ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( getEntry ) ; }
Distance : 6

91
Tree	if ( columnsToDrop . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( columnsToDrop . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

92
Tree	if ( entry . compareTo ( null , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

93
Tree	if ( compareTo ( entry , i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

94
Tree	if ( compareTo ( entry . getEntry ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . getEntry ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

95
Tree	if ( Precision . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 4

96
Tree	if ( j . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( j . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

97
Tree	if ( j . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( j . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

98
Tree	if ( compareTo . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 10

99
Tree	if ( i . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 10

100
Tree	if ( Precision . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

101
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

102
Tree	if ( entry . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

103
Tree	if ( matrix . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( matrix . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

104
Tree	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 10

105
Tree	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 10

106
Tree	if ( entry . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

107
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( getEntry ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( getEntry ) ; }
Distance : 7

108
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

109
Tree	if ( j . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( j . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

110
Tree	if ( getEntry ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( getEntry ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

111
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( j ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( j ) ; }
Distance : 7

112
Tree	if ( compareTo . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

113
Tree	if ( Precision ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

114
Tree	if ( j . compareTo ( entry , maxUlps , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( j . compareTo ( entry , maxUlps , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

115
Tree	if ( getEntry ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( getEntry ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

116
Tree	if ( j . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( j . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

117
Tree	if ( Precision . compareTo ( entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

118
Tree	if ( j != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( j != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

119
Tree	if ( compareTo ( entry . Precision ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . Precision ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

120
Tree	if ( entry . compareTo ( entry , maxUlps , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , maxUlps , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

121
Tree	if ( compareTo . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

122
Tree	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

123
Tree	if ( compareTo != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( compareTo != null ) { columnsToDrop . add ( entry ) ; }
Distance : 12

124
Tree	if ( entry . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

125
Tree	if ( compareTo . compareTo ( NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo . compareTo ( NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

126
Tree	if ( j . compareTo ( NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( j . compareTo ( NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

127
Tree	if ( compareTo . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

128
Tree	if ( i . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

129
Tree	if ( entry . compareTo ( entry / entry , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / entry , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

130
Tree	if ( Precision . compareTo ( entry , maxUlps , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , maxUlps , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

131
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 6

132
Tree	if ( matrix . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( matrix . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

133
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

134
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 7

135
Tree	if ( compareTo . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

136
Tree	if ( matrix ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( matrix ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

137
Tree	if ( Precision . compareTo ( null , null ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( null , null ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

138
Tree	if ( i . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

139
Tree	if ( Precision . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

140
Tree	if ( compareTo . compareTo () > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo . compareTo () > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 9

141
Tree	if ( entry . compareTo ( entry , maxUlps , entry , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , maxUlps , entry , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

142
Tree	if ( i . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

143
Tree	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 11

144
Tree	if ( matrix . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( matrix . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

145
Tree	if ( compareTo . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

146
Tree	if ( matrix . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( matrix . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

147
Tree	if ( matrix . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( matrix . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

148
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

149
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 7

150
Tree	if ( Precision . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

151
Tree	if ( Precision . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

152
Tree	if ( compareTo . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

153
Tree	if ( entry . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 4

154
Tree	if ( Precision . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

155
Tree	if ( columnsToDrop != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( columnsToDrop != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

156
Tree	if ( matrix != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( matrix != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

157
Tree	if ( Precision . compareTo ( entry , maxUlps , entry , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , maxUlps , entry , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

158
Tree	if ( compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

159
Tree	if ( entry . compareTo ( entry , entry , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , entry , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

160
Tree	if ( Precision . compareTo ( entry / entry , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry / entry , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

161
Tree	if ( entry != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry != null ) { columnsToDrop . add ( entry ) ; }
Distance : 12

162
Tree	if ( compareTo . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

163
Tree	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 8

164
Tree	if ( Precision . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

165
Tree	if ( compareTo . compareTo ( entry , maxUlps , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo . compareTo ( entry , maxUlps , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

166
Tree	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

167
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 4

168
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

169
Tree	if ( i . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

170
Tree	if ( entry . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

171
Tree	if ( compareTo ( entry , epsilon , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , epsilon , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

172
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

173
Tree	if ( j . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( j . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

174
Tree	if ( maxUlps != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( maxUlps != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

175
Tree	if ( matrix . compareTo ( entry , maxUlps , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( matrix . compareTo ( entry , maxUlps , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

176
Tree	if ( Precision . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

177
Tree	if ( compareTo . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

178
Tree	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

179
Tree	if ( Precision . compareTo ( entry , maxUlps , maxUlps , add ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , maxUlps , maxUlps , add ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

180
Tree	if ( compareTo ( i , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( i , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

181
Tree	if ( matrix . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( matrix . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

182
Tree	if ( compareTo != null ) { maxUlps . add ( entry ) ; }
Code	if ( compareTo != null ) { maxUlps . add ( entry ) ; }
Distance : 13

183
Tree	if ( maxUlps . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

184
Tree	if ( compareTo ( entry . get ( entry , NUMBER_CONSTANT , entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . get ( entry , NUMBER_CONSTANT , entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

185
Tree	if ( compareTo . compareTo ( entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo . compareTo ( entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

186
Tree	if ( compareTo . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( compareTo . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 9

187
Tree	if ( compareTo . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

188
Tree	if ( compareTo . compareTo ( null , null ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo . compareTo ( null , null ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

189
Tree	if ( j . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( j . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

190
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 4

191
Tree	if ( entry ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

192
Tree	if ( compareTo . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 11

193
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

194
Tree	if ( j . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( j . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

195
Tree	if ( j . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( j . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 11

196
Tree	if ( j . compareTo ( entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( j . compareTo ( entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

197
Tree	if ( j . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( j . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

198
Tree	if ( j . compareTo ( null , null ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( j . compareTo ( null , null ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

199
Tree	if ( entry != null ) { maxUlps . add ( entry ) ; }
Code	if ( entry != null ) { maxUlps . add ( entry ) ; }
Distance : 13

========================================================================


========================================================================
Example Number: 74
Parent Code is: 
final int n1n2prod = n1 * n2 ;
-------------------------------------------------------------------------------
Child code is: 
final double n1n2prod = n1 * n2 ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=n1n2prod}) (204{val==}) (27 (800{val=n1}) (202{val=*}) (800{val=n2}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=double}) (59 (800{val=n1n2prod}) (204{val==}) (27 (800{val=n1}) (202{val=*}) (800{val=n2}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/30/parent/src_main_java_org_apache_commons_math3_stat_inference_MannWhitneyUTest.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	final int n1n2prod = NUMBER_CONSTANT / n1 ;
Code	final int n1n2prod = NUMBER_CONSTANT / n1 ;
Distance : 4

1
Tree	final int n1n2prod = super / n2 ;
Code	final int n1n2prod = super / n2 ;
Distance : 3

2
Tree	final int Umin = CHAR_CONS * n2 ;
Code	final int Umin = CHAR_CONS * n2 ;
Distance : 3

3
Tree	final int n1n2prod = n1 > n2 ;
Code	final int n1n2prod = n1 > n2 ;
Distance : 2

4
Tree	final int Umin = CHAR_CONS * n2 * n2 ;
Code	final int Umin = CHAR_CONS * n2 * n2 ;
Distance : 5

5
Tree	final int n1n2prod = n2 * n2 / n2 ;
Code	final int n1n2prod = n2 * n2 / n2 ;
Distance : 4

6
Tree	final int Umin = n1 - extends ;
Code	final int Umin = n1 - extends ;
Distance : 4

7
Tree	final int Umin = CHAR_CONS / n1 ;
Code	final int Umin = CHAR_CONS / n1 ;
Distance : 5

8
Tree	final int Umin = CHAR_CONS / n2 ;
Code	final int Umin = CHAR_CONS / n2 ;
Distance : 4

9
Tree	final int Umin = n1 * n1 / n1 ;
Code	final int Umin = n1 * n1 / n1 ;
Distance : 5

10
Tree	final int n1n2prod = / * n2 ;
Code	final int n1n2prod = / * n2 ;
Distance : 2

11
Tree	final int NormalDistribution = n1 + NUMBER_CONSTANT ;
Code	final int NormalDistribution = n1 + NUMBER_CONSTANT ;
Distance : 4

12
Tree	final int Umin = n2 * n2 / n1 ;
Code	final int Umin = n2 * n2 / n1 ;
Distance : 5

13
Tree	final int n1n2prod = n1 ^ n2 ;
Code	final int n1n2prod = n1 ^ n2 ;
Distance : 2

14
Tree	final int Umin = NUMBER_CONSTANT * n2 ;
Code	final int Umin = NUMBER_CONSTANT * n2 ;
Distance : 3

15
Tree	final int n1n2prod = NUMBER_CONSTANT - n1 ;
Code	final int n1n2prod = NUMBER_CONSTANT - n1 ;
Distance : 4

16
Tree	final int n1n2prod = / * n2 * n2 ;
Code	final int n1n2prod = / * n2 * n2 ;
Distance : 4

17
Tree	final int n1n2prod = / / n1 ;
Code	final int n1n2prod = / / n1 ;
Distance : 4

18
Tree	final int standardNormal = NUMBER_CONSTANT / n2 ;
Code	final int standardNormal = NUMBER_CONSTANT / n2 ;
Distance : 4

19
Tree	final int NormalDistribution = NUMBER_CONSTANT / n1 ;
Code	final int NormalDistribution = NUMBER_CONSTANT / n1 ;
Distance : 5

20
Tree	final int n1n2prod = n2 ^ n1 ;
Code	final int n1n2prod = n2 ^ n1 ;
Distance : 4

21
Tree	final double Umin = n1 > > NUMBER_CONSTANT ;
Code	final double Umin = n1 > > NUMBER_CONSTANT ;
Distance : 4

22
Tree	final int n1n2prod = / / n2 ;
Code	final int n1n2prod = / / n2 ;
Distance : 3

23
Tree	final int Umin = standardNormal > > NUMBER_CONSTANT ;
Code	final int Umin = standardNormal > > NUMBER_CONSTANT ;
Distance : 6

24
Tree	final int n1n2prod = super * n1 * n2 ;
Code	final int n1n2prod = super * n1 * n2 ;
Distance : 3

25
Tree	final int standardNormal = NUMBER_CONSTANT / n1 ;
Code	final int standardNormal = NUMBER_CONSTANT / n1 ;
Distance : 5

26
Tree	final int Umin = NUMBER_CONSTANT - n2 ;
Code	final int Umin = NUMBER_CONSTANT - n2 ;
Distance : 4

27
Tree	final int n2 = n1 + NUMBER_CONSTANT ;
Code	final int n2 = n1 + NUMBER_CONSTANT ;
Distance : 4

28
Tree	final int n2 = NUMBER_CONSTANT / n2 ;
Code	final int n2 = NUMBER_CONSTANT / n2 ;
Distance : 4

29
Tree	final int NormalDistribution = n1 > n2 ;
Code	final int NormalDistribution = n1 > n2 ;
Distance : 3

30
Tree	final int n1n2prod = CHAR_CONS * n2 ;
Code	final int n1n2prod = CHAR_CONS * n2 ;
Distance : 2

31
Tree	final int Umin = n1 ^ n1 ;
Code	final int Umin = n1 ^ n1 ;
Distance : 4

32
Tree	final int NormalDistribution = n1 == CHAR_CONS ;
Code	final int NormalDistribution = n1 == CHAR_CONS ;
Distance : 4

33
Tree	final int NormalDistribution = CHAR_CONS + n2 ;
Code	final int NormalDistribution = CHAR_CONS + n2 ;
Distance : 4

34
Tree	final int n2 = NUMBER_CONSTANT / n1 ;
Code	final int n2 = NUMBER_CONSTANT / n1 ;
Distance : 5

35
Tree	final int n1n2prod = n2 - / ;
Code	final int n1n2prod = n2 - / ;
Distance : 4

36
Tree	final int n1 = n1 > > NUMBER_CONSTANT ;
Code	final int n1 = n1 > > NUMBER_CONSTANT ;
Distance : 5

37
Tree	final int n1n2prod = CHAR_CONS * n2 * n2 ;
Code	final int n1n2prod = CHAR_CONS * n2 * n2 ;
Distance : 4

38
Tree	final int Umin = n2 > n2 ;
Code	final int Umin = n2 > n2 ;
Distance : 4

39
Tree	final int Umin = n1 * n2 / n1 ;
Code	final int Umin = n1 * n2 / n1 ;
Distance : 4

40
Tree	final int Umin = NUMBER_CONSTANT / n2 ;
Code	final int Umin = NUMBER_CONSTANT / n2 ;
Distance : 4

41
Tree	final int n1n2prod = n2 + NUMBER_CONSTANT ;
Code	final int n1n2prod = n2 + NUMBER_CONSTANT ;
Distance : 4

42
Tree	final int Umin = n2 == CHAR_CONS ;
Code	final int Umin = n2 == CHAR_CONS ;
Distance : 5

43
Tree	final int NormalDistribution = CHAR_CONS + n1 ;
Code	final int NormalDistribution = CHAR_CONS + n1 ;
Distance : 5

44
Tree	final int n1n2prod = ( int ) n1 * n1 ;
Code	final int n1n2prod = ( int ) n1 * n1 ;
Distance : 5

45
Tree	final int Umin = n2 * n2 ;
Code	final int Umin = n2 * n2 ;
Distance : 3

46
Tree	final int Umin = super * n2 ;
Code	final int Umin = super * n2 ;
Distance : 3

47
Tree	final int Umin = / * n1 ;
Code	final int Umin = / * n1 ;
Distance : 4

48
Tree	final int n1n2prod = n1 * n1 ;
Code	final int n1n2prod = n1 * n1 ;
Distance : 2

49
Tree	final int Umin = ( long ) n2 * n2 ;
Code	final int Umin = ( long ) n2 * n2 ;
Distance : 6

50
Tree	final int Umin = n1 > n1 ;
Code	final int Umin = n1 > n1 ;
Distance : 4

51
Tree	final int NormalDistribution = n1 ^ n2 ;
Code	final int NormalDistribution = n1 ^ n2 ;
Distance : 3

52
Tree	final int Umin = NUMBER_CONSTANT * NormalDistribution ;
Code	final int Umin = NUMBER_CONSTANT * NormalDistribution ;
Distance : 4

53
Tree	final int n1n2prod = NUMBER_CONSTANT * n2 ;
Code	final int n1n2prod = NUMBER_CONSTANT * n2 ;
Distance : 2

54
Tree	final int standardNormal = n1 + NUMBER_CONSTANT ;
Code	final int standardNormal = n1 + NUMBER_CONSTANT ;
Distance : 4

55
Tree	final int Umin = ( int ) n2 * n2 ;
Code	final int Umin = ( int ) n2 * n2 ;
Distance : 6

56
Tree	final int n1n2prod = super * n2 ;
Code	final int n1n2prod = super * n2 ;
Distance : 2

57
Tree	final int Umin = n1 + NUMBER_CONSTANT ;
Code	final int Umin = n1 + NUMBER_CONSTANT ;
Distance : 4

58
Tree	final int Umin = n1 * n1 / n2 ;
Code	final int Umin = n1 * n1 / n2 ;
Distance : 4

59
Tree	final int Umin = CHAR_CONS + n1 ;
Code	final int Umin = CHAR_CONS + n1 ;
Distance : 5

60
Tree	final int n1n2prod = n2 == CHAR_CONS ;
Code	final int n1n2prod = n2 == CHAR_CONS ;
Distance : 4

61
Tree	final int n1n2prod = n1 - / ;
Code	final int n1n2prod = n1 - / ;
Distance : 3

62
Tree	final int Umin = / * n2 * n2 ;
Code	final int Umin = / * n2 * n2 ;
Distance : 5

63
Tree	final int Umin = n1 - ? ;
Code	final int Umin = n1 - ? ;
Distance : 4

64
Tree	final int n1n2prod = n2 ^ n2 ;
Code	final int n1n2prod = n2 ^ n2 ;
Distance : 3

65
Tree	final int n1n2prod = n1 - extends ;
Code	final int n1n2prod = n1 - extends ;
Distance : 3

66
Tree	final int n1n2prod = n1 > n1 ;
Code	final int n1n2prod = n1 > n1 ;
Distance : 3

67
Tree	final int Umin = / / n1 ;
Code	final int Umin = / / n1 ;
Distance : 5

68
Tree	final int n1n2prod = n1 ^ n1 ;
Code	final int n1n2prod = n1 ^ n1 ;
Distance : 3

69
Tree	final int n1n2prod = NUMBER_CONSTANT * n1 ;
Code	final int n1n2prod = NUMBER_CONSTANT * n1 ;
Distance : 3

70
Tree	final int standardNormal = n1 == CHAR_CONS ;
Code	final int standardNormal = n1 == CHAR_CONS ;
Distance : 4

71
Tree	final int n1n2prod = n1 * n2 / n1 ;
Code	final int n1n2prod = n1 * n2 / n1 ;
Distance : 3

72
Tree	final int Umin = n1 ^ n2 ;
Code	final int Umin = n1 ^ n2 ;
Distance : 3

73
Tree	final int n1n2prod = n1 - n1 [ n2 ] ;
Code	final int n1n2prod = n1 - n1 [ n2 ] ;
Distance : 5

74
Tree	final int standardNormal = n1 > > NUMBER_CONSTANT ;
Code	final int standardNormal = n1 > > NUMBER_CONSTANT ;
Distance : 5

75
Tree	final int n1n2prod = n2 > n1 ;
Code	final int n1n2prod = n2 > n1 ;
Distance : 4

76
Tree	final int Umin = NUMBER_CONSTANT - n1 ;
Code	final int Umin = NUMBER_CONSTANT - n1 ;
Distance : 5

77
Tree	final int n1n2prod = super * n1 ;
Code	final int n1n2prod = super * n1 ;
Distance : 3

78
Tree	final int n1n2prod = NUMBER_CONSTANT - n2 ;
Code	final int n1n2prod = NUMBER_CONSTANT - n2 ;
Distance : 3

79
Tree	final int Umin = super * n2 * n2 ;
Code	final int Umin = super * n2 * n2 ;
Distance : 5

80
Tree	final int NormalDistribution = n1 - n2 [ n2 ] ;
Code	final int NormalDistribution = n1 - n2 [ n2 ] ;
Distance : 6

81
Tree	final int Umin = NUMBER_CONSTANT * n2 * n2 * cumulativeProbability ;
Code	final int Umin = NUMBER_CONSTANT * n2 * n2 * cumulativeProbability ;
Distance : 7

82
Tree	final int n1 = n1 == CHAR_CONS ;
Code	final int n1 = n1 == CHAR_CONS ;
Distance : 4

83
Tree	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * NormalDistribution ;
Code	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * NormalDistribution ;
Distance : 6

84
Tree	final int n2 = n1 > > NUMBER_CONSTANT ;
Code	final int n2 = n1 > > NUMBER_CONSTANT ;
Distance : 5

85
Tree	final int NormalDistribution = NUMBER_CONSTANT - n1 ;
Code	final int NormalDistribution = NUMBER_CONSTANT - n1 ;
Distance : 5

86
Tree	final int n1n2prod = n2 > n2 ;
Code	final int n1n2prod = n2 > n2 ;
Distance : 3

87
Tree	final int Umin = n1 > n2 ;
Code	final int Umin = n1 > n2 ;
Distance : 3

88
Tree	final int standardNormal = NUMBER_CONSTANT - n2 ;
Code	final int standardNormal = NUMBER_CONSTANT - n2 ;
Distance : 4

89
Tree	final int Umin = n2 ^ n2 ;
Code	final int Umin = n2 ^ n2 ;
Distance : 4

90
Tree	final int Umin = n2 - extends ;
Code	final int Umin = n2 - extends ;
Distance : 5

91
Tree	final int Umin = super * n2 * n1 ;
Code	final int Umin = super * n2 * n1 ;
Distance : 5

92
Tree	final int Umin = n2 * n2 / n2 ;
Code	final int Umin = n2 * n2 / n2 ;
Distance : 5

93
Tree	final int Umin = / * n1 * n2 ;
Code	final int Umin = / * n1 * n2 ;
Distance : 4

94
Tree	final int Umin = super / n1 ;
Code	final int Umin = super / n1 ;
Distance : 5

95
Tree	final int Umin = n2 - n2 [ n2 ] ;
Code	final int Umin = n2 - n2 [ n2 ] ;
Distance : 7

96
Tree	final double Umin = n1 + NUMBER_CONSTANT ;
Code	final double Umin = n1 + NUMBER_CONSTANT ;
Distance : 3

97
Tree	final double Umin = NUMBER_CONSTANT - n2 ;
Code	final double Umin = NUMBER_CONSTANT - n2 ;
Distance : 3

98
Tree	final int Umin = n1 - <> ;
Code	final int Umin = n1 - <> ;
Distance : 4

99
Tree	final int Umin = ( long ) n1 * n2 ;
Code	final int Umin = ( long ) n1 * n2 ;
Distance : 5

100
Tree	final int Umin = n1 - n2 [ n2 ] ;
Code	final int Umin = n1 - n2 [ n2 ] ;
Distance : 6

101
Tree	final int Umin = n1 . cumulativeProbability () - NUMBER_CONSTANT ;
Code	final int Umin = n1 . cumulativeProbability () - NUMBER_CONSTANT ;
Distance : 7

102
Tree	final int n1n2prod = NUMBER_CONSTANT / n2 ;
Code	final int n1n2prod = NUMBER_CONSTANT / n2 ;
Distance : 3

103
Tree	final int Umin = ( int ) n1 * n2 ;
Code	final int Umin = ( int ) n1 * n2 ;
Distance : 5

104
Tree	final int Umin = n1 * n2 ;
Code	final int Umin = n1 * n2 ;
Distance : 2

105
Tree	final int Umin = n1 > > NUMBER_CONSTANT ;
Code	final int Umin = n1 > > NUMBER_CONSTANT ;
Distance : 5

106
Tree	final int Umin = NUMBER_CONSTANT * n2 * n2 * NormalDistribution ;
Code	final int Umin = NUMBER_CONSTANT * n2 * n2 * NormalDistribution ;
Distance : 7

107
Tree	final int NormalDistribution = n1 > > NUMBER_CONSTANT ;
Code	final int NormalDistribution = n1 > > NUMBER_CONSTANT ;
Distance : 5

108
Tree	final int Umin = NUMBER_CONSTANT * cumulativeProbability ;
Code	final int Umin = NUMBER_CONSTANT * cumulativeProbability ;
Distance : 4

109
Tree	final int n1n2prod = n2 * n1 ;
Code	final int n1n2prod = n2 * n1 ;
Distance : 3

110
Tree	final int n1n2prod = ( long ) n1 * n2 ;
Code	final int n1n2prod = ( long ) n1 * n2 ;
Distance : 4

111
Tree	final int Umin = n2 > n1 ;
Code	final int Umin = n2 > n1 ;
Distance : 5

112
Tree	final int NormalDistribution = n1 * n2 ;
Code	final int NormalDistribution = n1 * n2 ;
Distance : 2

113
Tree	final int n1n2prod = n2 - n2 [ n2 ] ;
Code	final int n1n2prod = n2 - n2 [ n2 ] ;
Distance : 6

114
Tree	final int Umin = n1 - n1 [ n2 ] ;
Code	final int Umin = n1 - n1 [ n2 ] ;
Distance : 6

115
Tree	final int n1n2prod = ( int ) n1 * n2 ;
Code	final int n1n2prod = ( int ) n1 * n2 ;
Distance : 4

116
Tree	final int n1n2prod = n1 - n2 [ n1 ] ;
Code	final int n1n2prod = n1 - n2 [ n1 ] ;
Distance : 5

117
Tree	final int standardNormal = CHAR_CONS + n2 ;
Code	final int standardNormal = CHAR_CONS + n2 ;
Distance : 4

118
Tree	final int n1 = NUMBER_CONSTANT - n2 ;
Code	final int n1 = NUMBER_CONSTANT - n2 ;
Distance : 4

119
Tree	final int Umin = n2 + NUMBER_CONSTANT ;
Code	final int Umin = n2 + NUMBER_CONSTANT ;
Distance : 5

120
Tree	final int n1n2prod = n2 * n2 ;
Code	final int n1n2prod = n2 * n2 ;
Distance : 2

121
Tree	final int Umin = standardNormal + NUMBER_CONSTANT ;
Code	final int Umin = standardNormal + NUMBER_CONSTANT ;
Distance : 5

122
Tree	final int Umin = n2 ^ n1 ;
Code	final int Umin = n2 ^ n1 ;
Distance : 5

123
Tree	final int n1n2prod = n1 + NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 + NUMBER_CONSTANT ;
Distance : 3

124
Tree	final int Umin = NUMBER_CONSTANT / n1 ;
Code	final int Umin = NUMBER_CONSTANT / n1 ;
Distance : 5

125
Tree	final int n1n2prod = n1 * n2 ;
Code	final int n1n2prod = n1 * n2 ;
Distance : 1

126
Tree	final int n2 = NUMBER_CONSTANT - n2 ;
Code	final int n2 = NUMBER_CONSTANT - n2 ;
Distance : 4

127
Tree	final int n1n2prod = n1 * n2 / n2 ;
Code	final int n1n2prod = n1 * n2 / n2 ;
Distance : 3

128
Tree	final int Umin = NUMBER_CONSTANT * standardNormal ;
Code	final int Umin = NUMBER_CONSTANT * standardNormal ;
Distance : 4

129
Tree	final int Umin = NUMBER_CONSTANT * Umin ;
Code	final int Umin = NUMBER_CONSTANT * Umin ;
Distance : 4

130
Tree	final int standardNormal = CHAR_CONS + n1 ;
Code	final int standardNormal = CHAR_CONS + n1 ;
Distance : 5

131
Tree	final int Umin = super * n1 ;
Code	final int Umin = super * n1 ;
Distance : 4

132
Tree	final int Umin = n1 - n2 [ n1 ] ;
Code	final int Umin = n1 - n2 [ n1 ] ;
Distance : 6

133
Tree	final int Umin = n2 - n1 [ n2 ] ;
Code	final int Umin = n2 - n1 [ n2 ] ;
Distance : 6

134
Tree	final int standardNormal = n1 ^ n2 ;
Code	final int standardNormal = n1 ^ n2 ;
Distance : 3

135
Tree	final int Umin = ( long ) n1 * n1 ;
Code	final int Umin = ( long ) n1 * n1 ;
Distance : 6

136
Tree	final int Umin = n1 == CHAR_CONS ;
Code	final int Umin = n1 == CHAR_CONS ;
Distance : 4

137
Tree	final int n1n2prod = n1 - n2 [ n2 ] ;
Code	final int n1n2prod = n1 - n2 [ n2 ] ;
Distance : 5

138
Tree	final int Umin = super * n1 * n2 ;
Code	final int Umin = super * n1 * n2 ;
Distance : 4

139
Tree	final int n1n2prod = n1 * n1 / n2 ;
Code	final int n1n2prod = n1 * n1 / n2 ;
Distance : 3

140
Tree	final int n1n2prod = n1 == CHAR_CONS ;
Code	final int n1n2prod = n1 == CHAR_CONS ;
Distance : 3

141
Tree	final int Umin = ( int ) n1 * n1 ;
Code	final int Umin = ( int ) n1 * n1 ;
Distance : 6

142
Tree	final int n1n2prod = CHAR_CONS + n2 ;
Code	final int n1n2prod = CHAR_CONS + n2 ;
Distance : 3

143
Tree	final int n2 = n1 == CHAR_CONS ;
Code	final int n2 = n1 == CHAR_CONS ;
Distance : 4

144
Tree	final int Umin = {} * n2 ;
Code	final int Umin = {} * n2 ;
Distance : 3

145
Tree	final int n1n2prod = n2 > > NUMBER_CONSTANT ;
Code	final int n1n2prod = n2 > > NUMBER_CONSTANT ;
Distance : 5

146
Tree	final int Umin = CHAR_CONS + n2 ;
Code	final int Umin = CHAR_CONS + n2 ;
Distance : 4

147
Tree	final int n1n2prod = ( long ) n1 * n1 ;
Code	final int n1n2prod = ( long ) n1 * n1 ;
Distance : 5

148
Tree	final int Umin = n2 * n1 ;
Code	final int Umin = n2 * n1 ;
Distance : 4

149
Tree	final int standardNormal = n1 * n2 ;
Code	final int standardNormal = n1 * n2 ;
Distance : 2

150
Tree	final int n1n2prod = n1 > > NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 > > NUMBER_CONSTANT ;
Distance : 4

151
Tree	final int NormalDistribution = NUMBER_CONSTANT / n2 ;
Code	final int NormalDistribution = NUMBER_CONSTANT / n2 ;
Distance : 4

152
Tree	final int Umin = n1 * n2 / n2 ;
Code	final int Umin = n1 * n2 / n2 ;
Distance : 4

153
Tree	final int Umin = super / n2 ;
Code	final int Umin = super / n2 ;
Distance : 4

154
Tree	final int n1n2prod = super / n1 ;
Code	final int n1n2prod = super / n1 ;
Distance : 4

155
Tree	final int Umin = NUMBER_CONSTANT * n1n2prod ;
Code	final int Umin = NUMBER_CONSTANT * n1n2prod ;
Distance : 4

156
Tree	final int n2 = CHAR_CONS + n2 ;
Code	final int n2 = CHAR_CONS + n2 ;
Distance : 4

157
Tree	final int Umin = n2 > > NUMBER_CONSTANT ;
Code	final int Umin = n2 > > NUMBER_CONSTANT ;
Distance : 6

158
Tree	final int n2 = CHAR_CONS + n1 ;
Code	final int n2 = CHAR_CONS + n1 ;
Distance : 5

159
Tree	final int n1 = n1 + NUMBER_CONSTANT ;
Code	final int n1 = n1 + NUMBER_CONSTANT ;
Distance : 4

160
Tree	final int Umin = n2 - / ;
Code	final int Umin = n2 - / ;
Distance : 5

161
Tree	final int n1n2prod = super * n2 * n2 ;
Code	final int n1n2prod = super * n2 * n2 ;
Distance : 4

162
Tree	final int n1n2prod = CHAR_CONS + n1 ;
Code	final int n1n2prod = CHAR_CONS + n1 ;
Distance : 4

163
Tree	final int Umin = n1 * n1 ;
Code	final int Umin = n1 * n1 ;
Distance : 3

164
Tree	final int n1n2prod = NUMBER_CONSTANT * NormalDistribution ;
Code	final int n1n2prod = NUMBER_CONSTANT * NormalDistribution ;
Distance : 3

165
Tree	final int Umin = / * n2 ;
Code	final int Umin = / * n2 ;
Distance : 3

166
Tree	final int Umin = n1 - / ;
Code	final int Umin = n1 - / ;
Distance : 4

167
Tree	final int Umin = NUMBER_CONSTANT * n2 * n2 * Umin ;
Code	final int Umin = NUMBER_CONSTANT * n2 * n2 * Umin ;
Distance : 7

168
Tree	final int Umin = / / n2 ;
Code	final int Umin = / / n2 ;
Distance : 4

169
Tree	final int NormalDistribution = NUMBER_CONSTANT - n2 ;
Code	final int NormalDistribution = NUMBER_CONSTANT - n2 ;
Distance : 4

170
Tree	final int Umin = n1 - % ;
Code	final int Umin = n1 - % ;
Distance : 4

171
Tree	final int NormalDistribution = n1 > n1 ;
Code	final int NormalDistribution = n1 > n1 ;
Distance : 4

172
Tree	final int Umin = NUMBER_CONSTANT * n1 * n2 * NormalDistribution ;
Code	final int Umin = NUMBER_CONSTANT * n1 * n2 * NormalDistribution ;
Distance : 6

173
Tree	final int Umin = n2 . cumulativeProbability () - NUMBER_CONSTANT ;
Code	final int Umin = n2 . cumulativeProbability () - NUMBER_CONSTANT ;
Distance : 8

174
Tree	final double Umin = n1 == CHAR_CONS ;
Code	final double Umin = n1 == CHAR_CONS ;
Distance : 3

175
Tree	final int n1n2prod = n2 . cumulativeProbability () - NUMBER_CONSTANT ;
Code	final int n1n2prod = n2 . cumulativeProbability () - NUMBER_CONSTANT ;
Distance : 7

176
Tree	final int Umin = NUMBER_CONSTANT * n2 * n1 * NormalDistribution ;
Code	final int Umin = NUMBER_CONSTANT * n2 * n1 * NormalDistribution ;
Distance : 7

177
Tree	final int Umin = n1 . n2 () - NUMBER_CONSTANT ;
Code	final int Umin = n1 . n2 () - NUMBER_CONSTANT ;
Distance : 6

178
Tree	final int Umin = NUMBER_CONSTANT * n1 ;
Code	final int Umin = NUMBER_CONSTANT * n1 ;
Distance : 4

179
Tree	final int n1n2prod = n1 . cumulativeProbability () - NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 . cumulativeProbability () - NUMBER_CONSTANT ;
Distance : 6

180
Tree	final int Umin = standardNormal == CHAR_CONS ;
Code	final int Umin = standardNormal == CHAR_CONS ;
Distance : 5

181
Tree	final int Umin = n1 . NormalDistribution () - NUMBER_CONSTANT ;
Code	final int Umin = n1 . NormalDistribution () - NUMBER_CONSTANT ;
Distance : 7

182
Tree	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * cumulativeProbability ;
Code	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * cumulativeProbability ;
Distance : 6

183
Tree	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * Umin ;
Code	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * Umin ;
Distance : 6

184
Tree	final int Umin = NUMBER_CONSTANT * n2 * n2 * n2 ;
Code	final int Umin = NUMBER_CONSTANT * n2 * n2 * n2 ;
Distance : 7

185
Tree	final int Umin = n1 [ n2 ] + STRING_CONSTANT + z [ n2 ] ;
Code	final int Umin = n1 [ n2 ] + STRING_CONSTANT + z [ n2 ] ;
Distance : 11

186
Tree	final int Umin = n1 [ n2 ] + STRING_CONSTANT + cumulativeProbability [ n2 ] ;
Code	final int Umin = n1 [ n2 ] + STRING_CONSTANT + cumulativeProbability [ n2 ] ;
Distance : 11

187
Tree	final int Umin = NUMBER_CONSTANT * n2 * n2 * n1n2prod ;
Code	final int Umin = NUMBER_CONSTANT * n2 * n2 * n1n2prod ;
Distance : 7

188
Tree	final int Umin = n1 . sqrt () - NUMBER_CONSTANT ;
Code	final int Umin = n1 . sqrt () - NUMBER_CONSTANT ;
Distance : 7

189
Tree	final int Umin = n1 [ n2 ] + STRING_CONSTANT + FastMath [ n2 ] ;
Code	final int Umin = n1 [ n2 ] + STRING_CONSTANT + FastMath [ n2 ] ;
Distance : 11

190
Tree	final int Umin = n2 . n2 () - NUMBER_CONSTANT ;
Code	final int Umin = n2 . n2 () - NUMBER_CONSTANT ;
Distance : 7

191
Tree	final int n1n2prod = n1 [ n2 ] + STRING_CONSTANT + z [ n2 ] ;
Code	final int n1n2prod = n1 [ n2 ] + STRING_CONSTANT + z [ n2 ] ;
Distance : 10

192
Tree	final int n1n2prod = n1 [ n2 ] + STRING_CONSTANT + cumulativeProbability [ n2 ] ;
Code	final int n1n2prod = n1 [ n2 ] + STRING_CONSTANT + cumulativeProbability [ n2 ] ;
Distance : 10

193
Tree	final int n1n2prod = n1 [ n2 ] + STRING_CONSTANT + FastMath [ n2 ] ;
Code	final int n1n2prod = n1 [ n2 ] + STRING_CONSTANT + FastMath [ n2 ] ;
Distance : 10

194
Tree	final int n1n2prod = n1 . n2 () - NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 . n2 () - NUMBER_CONSTANT ;
Distance : 5

195
Tree	final int Umin = n1 [ n1 ] + STRING_CONSTANT + z [ n2 ] ;
Code	final int Umin = n1 [ n1 ] + STRING_CONSTANT + z [ n2 ] ;
Distance : 11

196
Tree	final int Umin = n1 [ n1 ] + STRING_CONSTANT + cumulativeProbability [ n2 ] ;
Code	final int Umin = n1 [ n1 ] + STRING_CONSTANT + cumulativeProbability [ n2 ] ;
Distance : 11

197
Tree	final int n1n2prod = n1 . NormalDistribution () - NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 . NormalDistribution () - NUMBER_CONSTANT ;
Distance : 6

198
Tree	final int Umin = n1 [ n2 ] + STRING_CONSTANT + ConvergenceException [ n2 ] ;
Code	final int Umin = n1 [ n2 ] + STRING_CONSTANT + ConvergenceException [ n2 ] ;
Distance : 11

199
Tree	final int Umin = n2 [ n2 ] + STRING_CONSTANT + z [ n2 ] ;
Code	final int Umin = n2 [ n2 ] + STRING_CONSTANT + z [ n2 ] ;
Distance : 12

========================================================================


========================================================================
Example Number: 75
Parent Code is: 
if ( y >= TWO_POWER_52  y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( y >= TWO_POWER_53  y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=y}) (251{val=>=}) (800{val=TWO_POWER_52})) (250{val=||}) (27 (800{val=y}) (252{val=<=}) (38 (201{val=-}) (800{val=TWO_POWER_52})))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=pow}) (214{val=(}) (38 (201{val=-}) (800{val=x})) (234{val=,}) (800{val=y}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=y}) (251{val=>=}) (800{val=TWO_POWER_53})) (250{val=||}) (27 (800{val=y}) (252{val=<=}) (38 (201{val=-}) (800{val=TWO_POWER_53})))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=pow}) (214{val=(}) (38 (201{val=-}) (800{val=x})) (234{val=,}) (800{val=y}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/15/parent/src_main_java_org_apache_commons_math3_util_FastMath.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

1
Tree	if ( y == CHAR_CONS TWO_POWER_52 TWO_POWER_52 <= - lnb ) { return pow ( - x , y ) ; }
Code	if ( y == CHAR_CONS TWO_POWER_52 TWO_POWER_52 <= - lnb ) { return pow ( - x , y ) ; }
Distance : 5

2
Tree	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

3
Tree	if ( y >= lnb y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= lnb y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

4
Tree	if ( y >= NUMBER_CONSTANT y y != - tmp1 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y != - tmp1 ) { return pow ( - x , y ) ; }
Distance : 4

5
Tree	if ( y == CHAR_CONS y y <= - ya ) { return pow ( - x , y ) ; }
Code	if ( y == CHAR_CONS y y <= - ya ) { return pow ( - x , y ) ; }
Distance : 4

6
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - yi ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - yi ) { return pow ( - x , y ) ; }
Distance : 3

7
Tree	if ( y >= tmp1 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= tmp1 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

8
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

9
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - tmp2 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - tmp2 ) { return pow ( - x , y ) ; }
Distance : 4

10
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 5

11
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 5

12
Tree	if ( TWO_POWER_52 != null y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 != null y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

13
Tree	if ( Double.NEGATIVE_INFINITY != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( Double.NEGATIVE_INFINITY != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

14
Tree	if ( Double.POSITIVE_INFINITY != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( Double.POSITIVE_INFINITY != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

15
Tree	if ( Double.NaN != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( Double.NaN != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 6

16
Tree	if ( y >= NUMBER_CONSTANT y y != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y y != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 5

17
Tree	if ( x >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

18
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

19
Tree	if ( y != null TWO_POWER_52 TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y != null TWO_POWER_52 TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

20
Tree	if ( y != null TWO_POWER_52 y <= - lnb ) { return pow ( - x , y ) ; }
Code	if ( y != null TWO_POWER_52 y <= - lnb ) { return pow ( - x , y ) ; }
Distance : 4

21
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y != - lnb ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y != - lnb ) { return pow ( - x , y ) ; }
Distance : 4

22
Tree	if ( y > - Double.NaN y TWO_POWER_52 < Double.NaN ) { return pow ( - x , y ) ; }
Code	if ( y > - Double.NaN y TWO_POWER_52 < Double.NaN ) { return pow ( - x , y ) ; }
Distance : 6

23
Tree	if ( y >= TWO_POWER_52 y doubleToLongBits != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y doubleToLongBits != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

24
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - yi ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - yi ) { return pow ( - x , y ) ; }
Distance : 4

25
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - lnb ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - lnb ) { return pow ( - x , y ) ; }
Distance : 3

26
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - lnb ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - lnb ) { return pow ( - x , x ) ; }
Distance : 4

27
Tree	if ( Double.NaN != null y y <= - HEX_40000000 ) { return pow ( - x , y ) ; }
Code	if ( Double.NaN != null y y <= - HEX_40000000 ) { return pow ( - x , y ) ; }
Distance : 5

28
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - isInfinite ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - isInfinite ) { return pow ( - x , y ) ; }
Distance : 3

29
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - pow ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - pow ) { return pow ( - x , y ) ; }
Distance : 3

30
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

31
Tree	if ( y >= TWO_POWER_52 y x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

32
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 bits != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 bits != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

33
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 != - tmp1 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 != - tmp1 ) { return pow ( - x , y ) ; }
Distance : 5

34
Tree	if ( y >= yi y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= yi y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

35
Tree	if ( Double.NaN != null y y <= - ya ) { return pow ( - x , y ) ; }
Code	if ( Double.NaN != null y y <= - ya ) { return pow ( - x , y ) ; }
Distance : 5

36
Tree	if ( y > - Double.NaN y y < Double.NaN ) { return pow ( - x , y ) ; }
Code	if ( y > - Double.NaN y y < Double.NaN ) { return pow ( - x , y ) ; }
Distance : 6

37
Tree	if ( Double.NaN != null TWO_POWER_52 TWO_POWER_52 <= - lnb ) { return pow ( - x , y ) ; }
Code	if ( Double.NaN != null TWO_POWER_52 TWO_POWER_52 <= - lnb ) { return pow ( - x , y ) ; }
Distance : 6

38
Tree	if ( y >= x y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= x y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

39
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - yi ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - yi ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

40
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - tmp1 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - tmp1 ) { return pow ( - x , y ) ; }
Distance : 4

41
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 < Double.NaN ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 < Double.NaN ) { return pow ( - x , y ) ; }
Distance : 6

42
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

43
Tree	if ( y >= NUMBER_CONSTANT y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

44
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

45
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

46
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - ya ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - ya ) { return pow ( - x , y ) ; }
Distance : 4

47
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y <= - tmp1 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y <= - tmp1 ) { return pow ( - x , y ) ; }
Distance : 3

48
Tree	if ( Double.NaN != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( Double.NaN != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

49
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - tmp1 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - tmp1 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

50
Tree	if ( y != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

51
Tree	if ( y >= y y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

52
Tree	if ( y >= NUMBER_CONSTANT y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

53
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 5

54
Tree	if ( Double.NaN != null TWO_POWER_52 y <= - yi ) { return pow ( - x , y ) ; }
Code	if ( Double.NaN != null TWO_POWER_52 y <= - yi ) { return pow ( - x , y ) ; }
Distance : 5

55
Tree	if ( y != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

56
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 pow != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 pow != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

57
Tree	if ( y >= y y TWO_POWER_52 != - yi ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_52 != - yi ) { return pow ( - x , y ) ; }
Distance : 4

58
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - tmp1 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - tmp1 ) { return pow ( - x , y ) ; }
Distance : 3

59
Tree	if ( y > - Double.NaN y TWO_POWER_52 < y ) { return pow ( - x , x ) ; }
Code	if ( y > - Double.NaN y TWO_POWER_52 < y ) { return pow ( - x , x ) ; }
Distance : 7

60
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

61
Tree	if ( y >= CHAR_CONS y y <= - yi ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y y <= - yi ) { return pow ( - x , y ) ; }
Distance : 3

62
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - pow ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - pow ) { return pow ( - x , y ) ; }
Distance : 4

63
Tree	if ( y >= CHAR_CONS y y <= - lnb ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y y <= - lnb ) { return pow ( - x , y ) ; }
Distance : 3

64
Tree	if ( y > - TWO_POWER_52 y yi < Double.NaN ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y yi < Double.NaN ) { return pow ( - x , y ) ; }
Distance : 6

65
Tree	if ( y > - TWO_POWER_52 y tmp1 < y ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y tmp1 < y ) { return pow ( - x , y ) ; }
Distance : 6

66
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < Double.NaN ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < Double.NaN ) { return pow ( - x , y ) ; }
Distance : 6

67
Tree	if ( y > - Double.NaN y TWO_POWER_52 < Double.NaN ) { return pow ( - x , x ) ; }
Code	if ( y > - Double.NaN y TWO_POWER_52 < Double.NaN ) { return pow ( - x , x ) ; }
Distance : 7

68
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - yi ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - yi ) { return pow ( - x , x ) ; }
Distance : 5

69
Tree	if ( y > - Double.NaN y TWO_POWER_52 < pow ) { return pow ( - x , y ) ; }
Code	if ( y > - Double.NaN y TWO_POWER_52 < pow ) { return pow ( - x , y ) ; }
Distance : 6

70
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 < y ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 < y ) { return pow ( - x , y ) ; }
Distance : 6

71
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 < TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 < TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 6

72
Tree	if ( y > - TWO_POWER_52 - lnb < y ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 - lnb < y ) { return pow ( - x , y ) ; }
Distance : 7

73
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y <= - yi ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y <= - yi ) { return pow ( - x , y ) ; }
Distance : 3

74
Tree	if ( y == CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y == CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

75
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < y ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < y ) { return pow ( - x , y ) ; }
Distance : 6

76
Tree	if ( y >= NUMBER_CONSTANT y y <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y y <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 4

77
Tree	if ( y > - y y TWO_POWER_52 < Double.NaN ) { return pow ( - x , y ) ; }
Code	if ( y > - y y TWO_POWER_52 < Double.NaN ) { return pow ( - x , y ) ; }
Distance : 6

78
Tree	if ( y >= CHAR_CONS y y <= - tmp1 ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y y <= - tmp1 ) { return pow ( - x , y ) ; }
Distance : 3

79
Tree	if ( y != - TWO_POWER_52 - y < Double.NaN ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 - y < Double.NaN ) { return pow ( - x , y ) ; }
Distance : 7

80
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - tmp2 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - tmp2 ) { return pow ( - x , y ) ; }
Distance : 4

81
Tree	if ( Double.NaN != null y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( Double.NaN != null y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

82
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - yi ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - yi ) { return pow ( - x , y ) ; }
Distance : 3

83
Tree	if ( y >= TWO_POWER_52 y doubleToLongBits <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y doubleToLongBits <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

84
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - HEX_40000000 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - HEX_40000000 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

85
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - ya ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - ya ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

86
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 6

87
Tree	if ( y > - TWO_POWER_52 - tmp1 < Double.NaN ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 - tmp1 < Double.NaN ) { return pow ( - x , y ) ; }
Distance : 7

88
Tree	if ( y >= NUMBER_CONSTANT y doubleToLongBits != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y doubleToLongBits != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

89
Tree	if ( y >= CHAR_CONS y TWO_POWER_52 <= - yi ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y TWO_POWER_52 <= - yi ) { return pow ( - x , y ) ; }
Distance : 3

90
Tree	if ( y >= CHAR_CONS y TWO_POWER_52 <= - lnb ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y TWO_POWER_52 <= - lnb ) { return pow ( - x , y ) ; }
Distance : 3

91
Tree	if ( y != - ya y TWO_POWER_52 < Double.NaN ) { return pow ( - x , y ) ; }
Code	if ( y != - ya y TWO_POWER_52 < Double.NaN ) { return pow ( - x , y ) ; }
Distance : 6

92
Tree	if ( y >= NUMBER_CONSTANT y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

93
Tree	if ( y != - TWO_POWER_52 y y < y ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y y < y ) { return pow ( - x , y ) ; }
Distance : 6

94
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < pow ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < pow ) { return pow ( - x , y ) ; }
Distance : 6

95
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 != - yi ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 != - yi ) { return pow ( - x , y ) ; }
Distance : 5

96
Tree	if ( y == CHAR_CONS TWO_POWER_52 y <= - yi ) { return pow ( - x , y ) ; }
Code	if ( y == CHAR_CONS TWO_POWER_52 y <= - yi ) { return pow ( - x , y ) ; }
Distance : 4

97
Tree	if ( Double.NaN != null y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( Double.NaN != null y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

98
Tree	if ( y > - TWO_POWER_52 y lnb < Double.NaN ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y lnb < Double.NaN ) { return pow ( - x , y ) ; }
Distance : 6

99
Tree	if ( x >= NUMBER_CONSTANT y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x >= NUMBER_CONSTANT y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

100
Tree	if ( doubleToLongBits != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( doubleToLongBits != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

101
Tree	if ( y >= NUMBER_CONSTANT y pow <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y pow <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

102
Tree	if ( x >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 6

103
Tree	if ( y >= TWO_POWER_52 ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= lnb < y ( - x , y ) * x ) /
Code	if ( y >= TWO_POWER_52 ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= lnb < y ( - x , y ) * x ) /
Distance : 15

104
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= yi <= - lnb ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= yi <= - lnb ) { return pow ( - x , y ) ; }
Distance : 10

105
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - yi < y ( - x , y ) * x ) /
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - yi < y ( - x , y ) * x ) /
Distance : 15

106
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - lnb < y ( - x , y ) * x ) /
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - lnb < y ( - x , y ) * x ) /
Distance : 15

107
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - HEX_40000000 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - HEX_40000000 ) { return pow ( - x , y ) ; }
Distance : 4

108
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - lnb ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - lnb ) { return pow ( - x , y ) ; }
Distance : 3

109
Tree	if ( y >= CHAR_CONS y y <= - ya ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y y <= - ya ) { return pow ( - x , y ) ; }
Distance : 3

110
Tree	if ( y >= CHAR_CONS y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

111
Tree	if ( y >= y ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - yi < y ( - x , y ) * x ) /
Code	if ( y >= y ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - yi < y ( - x , y ) * x ) /
Distance : 15

112
Tree	if ( y >= y ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= lnb < y ( - x , y ) * x ) /
Code	if ( y >= y ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= lnb < y ( - x , y ) * x ) /
Distance : 15

113
Tree	if ( Double.NaN != null y y <= - lnb ) { return pow ( - x , y ) ; }
Code	if ( Double.NaN != null y y <= - lnb ) { return pow ( - x , y ) ; }
Distance : 5

114
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - ya ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - ya ) { return pow ( - x , y ) ; }
Distance : 3

115
Tree	if ( y >= TWO_POWER_52 ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= TWO_POWER_52 < y ( - x , y ) * x ) /
Code	if ( y >= TWO_POWER_52 ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= TWO_POWER_52 < y ( - x , y ) * x ) /
Distance : 15

116
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - yi ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - yi ) { return pow ( - x , x ) ; }
Distance : 5

117
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 != - ya ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 != - ya ) { return pow ( - x , y ) ; }
Distance : 5

118
Tree	if ( Double.NaN != null TWO_POWER_52 y <= - tmp1 ) { return pow ( - x , y ) ; }
Code	if ( Double.NaN != null TWO_POWER_52 y <= - tmp1 ) { return pow ( - x , y ) ; }
Distance : 5

119
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - HEX_40000000 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - HEX_40000000 ) { return pow ( - x , y ) ; }
Distance : 3

120
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 4

121
Tree	if ( x >= TWO_POWER_52 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

122
Tree	if ( y >= TWO_POWER_52 ( TWO_POWER_52 , NUMBER_CONSTANT , y ) y lnb <= - yi ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 ( TWO_POWER_52 , NUMBER_CONSTANT , y ) y lnb <= - yi ) { return pow ( - x , y ) ; }
Distance : 10

123
Tree	if ( y >= TWO_POWER_52 ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - yi < x ( - x , y ) * x ) /
Code	if ( y >= TWO_POWER_52 ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - yi < x ( - x , y ) * x ) /
Distance : 15

124
Tree	if ( y != null TWO_POWER_52 y <= - yi ) { return pow ( - x , y ) ; }
Code	if ( y != null TWO_POWER_52 y <= - yi ) { return pow ( - x , y ) ; }
Distance : 4

125
Tree	if ( y >= TWO_POWER_52 <= TWO_POWER_52 != - lnb ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 <= TWO_POWER_52 != - lnb ) { return pow ( - x , y ) ; }
Distance : 5

126
Tree	if ( y >= TWO_POWER_52 ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - yi <= - yi ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - yi <= - yi ) { return pow ( - x , y ) ; }
Distance : 10

127
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - lnb <= - yi ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - lnb <= - yi ) { return pow ( - x , y ) ; }
Distance : 10

128
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

129
Tree	if ( y >= lnb y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= lnb y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

130
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - yi <= - yi ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - yi <= - yi ) { return pow ( - x , y ) ; }
Distance : 10

131
Tree	if ( y >= TWO_POWER_52 ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= lnb <= - lnb ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= lnb <= - lnb ) { return pow ( - x , y ) ; }
Distance : 10

132
Tree	if ( y >= TWO_POWER_52 ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - yi <= - lnb ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - yi <= - lnb ) { return pow ( - x , y ) ; }
Distance : 10

133
Tree	if ( y >= TWO_POWER_52 ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= lnb < x ( - x , y ) * x ) /
Code	if ( y >= TWO_POWER_52 ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= lnb < x ( - x , y ) * x ) /
Distance : 15

134
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - tmp1 ) { return pow . pow ( x , Double.NaN , y , Double.NaN ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - tmp1 ) { return pow . pow ( x , Double.NaN , y , Double.NaN ) ; }
Distance : 10

135
Tree	if ( y >= CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

136
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - lnb ) { return pow . pow ( x , y , y , Double.NaN ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - lnb ) { return pow . pow ( x , y , y , Double.NaN ) ; }
Distance : 10

137
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - lnb ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - lnb ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

138
Tree	if ( y >= tmp1 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= tmp1 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

139
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - isInfinite ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - isInfinite ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

140
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - lnb ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - lnb ) { return pow ( - x , x ) ; }
Distance : 4

141
Tree	if ( y > - TWO_POWER_52 y yi < y ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y yi < y ) { return pow ( - x , y ) ; }
Distance : 6

142
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow . pow ( x , Double.NaN , y , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow . pow ( x , Double.NaN , y , y ) ; }
Distance : 10

143
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - yi ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - yi ) { return pow ( - x , x ) ; }
Distance : 4

144
Tree	if ( y > - Double.NaN y TWO_POWER_52 < TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y > - Double.NaN y TWO_POWER_52 < TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 6

145
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

146
Tree	if ( y >= TWO_POWER_52 - TWO_POWER_52 <= - lnb ) { return pow . pow ( x , Double.NaN , y , x ) ; }
Code	if ( y >= TWO_POWER_52 - TWO_POWER_52 <= - lnb ) { return pow . pow ( x , Double.NaN , y , x ) ; }
Distance : 11

147
Tree	if ( y >= TWO_POWER_52 ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - tmp1 < y ( - x , y ) * x ) /
Code	if ( y >= TWO_POWER_52 ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - tmp1 < y ( - x , y ) * x ) /
Distance : 15

148
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 < y ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 < y ) { return pow ( - x , y ) ; }
Distance : 6

149
Tree	if ( y >= TWO_POWER_52 - TWO_POWER_52 <= - HEX_40000000 ) { return pow . pow ( x , Double.NaN , y , Double.NaN ) ; }
Code	if ( y >= TWO_POWER_52 - TWO_POWER_52 <= - HEX_40000000 ) { return pow . pow ( x , Double.NaN , y , Double.NaN ) ; }
Distance : 11

150
Tree	if ( y >= TWO_POWER_52 y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

151
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - pow ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - pow ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

152
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y != - yi ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y != - yi ) { return pow ( - x , y ) ; }
Distance : 4

153
Tree	if ( y >= y ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - lnb <= - yi ) { return pow ( - x , y ) ; }
Code	if ( y >= y ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - lnb <= - yi ) { return pow ( - x , y ) ; }
Distance : 10

154
Tree	if ( y >= yi y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= yi y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

155
Tree	if ( y != - lnb y TWO_POWER_52 < Double.NaN ) { return pow ( - x , y ) ; }
Code	if ( y != - lnb y TWO_POWER_52 < Double.NaN ) { return pow ( - x , y ) ; }
Distance : 6

156
Tree	if ( y >= y y TWO_POWER_52 <= - lnb ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - lnb ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

157
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - yi ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - yi ) { return pow ( - x , y ) ; }
Distance : 3

158
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - ya ) { return pow . pow ( x , Double.NaN , y , Double.NaN ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - ya ) { return pow . pow ( x , Double.NaN , y , Double.NaN ) ; }
Distance : 10

159
Tree	if ( y >= y ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - yi <= - yi ) { return pow ( - x , y ) ; }
Code	if ( y >= y ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - yi <= - yi ) { return pow ( - x , y ) ; }
Distance : 10

160
Tree	if ( y != - lnb y TWO_POWER_52 < y ) { return pow ( - x , y ) ; }
Code	if ( y != - lnb y TWO_POWER_52 < y ) { return pow ( - x , y ) ; }
Distance : 6

161
Tree	if ( y >= x y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= x y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

162
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

163
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

164
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - isInfinite ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - isInfinite ) { return pow ( - x , y ) ; }
Distance : 3

165
Tree	if ( y >= CHAR_CONS y y <= - HEX_40000000 ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y y <= - HEX_40000000 ) { return pow ( - x , y ) ; }
Distance : 3

166
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < Double ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < Double ) { return pow ( - x , y ) ; }
Distance : 6

167
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - tmp2 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - tmp2 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

168
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 < Double.NaN ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 < Double.NaN ) { return pow ( - x , y ) ; }
Distance : 6

169
Tree	if ( y >= NUMBER_CONSTANT y doubleToLongBits <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y doubleToLongBits <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

170
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - lnb ) { return pow . pow ( x , Double.NaN , y , Double.NaN ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - lnb ) { return pow . pow ( x , Double.NaN , y , Double.NaN ) ; }
Distance : 10

171
Tree	if ( y >= TWO_POWER_52 ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= yi < y ( - x , y ) * x ) /
Code	if ( y >= TWO_POWER_52 ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= yi < y ( - x , y ) * x ) /
Distance : 15

172
Tree	if ( y >= y y NUMBER_CONSTANT - lnb ) { return pow ( - x , y ) ; }
Code	if ( y >= y y NUMBER_CONSTANT - lnb ) { return pow ( - x , y ) ; }
Distance : 3

173
Tree	if ( y >= TWO_POWER_52 - NUMBER_CONSTANT - lnb ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 - NUMBER_CONSTANT - lnb ) { return pow ( - x , y ) ; }
Distance : 4

174
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 bits <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 bits <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

175
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - ya ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - ya ) { return pow ( - x , y ) ; }
Distance : 3

176
Tree	if ( y == CHAR_CONS y y <= - tmp1 ) { return pow ( - x , y ) ; }
Code	if ( y == CHAR_CONS y y <= - tmp1 ) { return pow ( - x , y ) ; }
Distance : 4

177
Tree	if ( y >= CHAR_CONS y y <= - yi ) { return pow ( - x , x ) ; }
Code	if ( y >= CHAR_CONS y y <= - yi ) { return pow ( - x , x ) ; }
Distance : 4

178
Tree	if ( y == CHAR_CONS y y <= - HEX_40000000 ) { return pow ( - x , y ) ; }
Code	if ( y == CHAR_CONS y y <= - HEX_40000000 ) { return pow ( - x , y ) ; }
Distance : 4

179
Tree	if ( y > - Double.NaN y y < y ) { return pow ( - x , y ) ; }
Code	if ( y > - Double.NaN y y < y ) { return pow ( - x , y ) ; }
Distance : 6

180
Tree	if ( y == CHAR_CONS TWO_POWER_52 TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y == CHAR_CONS TWO_POWER_52 TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

181
Tree	if ( Double.NaN != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( Double.NaN != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

182
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - tmp1 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - tmp1 ) { return pow ( - x , y ) ; }
Distance : 3

183
Tree	if ( x >= NUMBER_CONSTANT TWO_POWER_52 y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x >= NUMBER_CONSTANT TWO_POWER_52 y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

184
Tree	if ( y == CHAR_CONS y TWO_POWER_52 <= - yi ) { return pow ( - x , y ) ; }
Code	if ( y == CHAR_CONS y TWO_POWER_52 <= - yi ) { return pow ( - x , y ) ; }
Distance : 4

185
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - tmp1 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - tmp1 ) { return pow ( - x , y ) ; }
Distance : 3

186
Tree	if ( y == CHAR_CONS TWO_POWER_52 y <= - lnb ) { return pow ( - x , x ) ; }
Code	if ( y == CHAR_CONS TWO_POWER_52 y <= - lnb ) { return pow ( - x , x ) ; }
Distance : 5

187
Tree	if ( y >= y y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

188
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 != - lnb ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 != - lnb ) { return pow ( - x , y ) ; }
Distance : 5

189
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow . pow ( x , Double.NaN , y , Double.NaN ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow . pow ( x , Double.NaN , y , Double.NaN ) ; }
Distance : 10

190
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - HEX_40000000 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - HEX_40000000 ) { return pow ( - x , y ) ; }
Distance : 3

191
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

192
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= lnb <= - lnb ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= lnb <= - lnb ) { return pow ( - x , y ) ; }
Distance : 10

193
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - ya ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - ya ) { return pow ( - x , y ) ; }
Distance : 3

194
Tree	if ( y >= TWO_POWER_52 - NUMBER_CONSTANT - HEX_40000000 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 - NUMBER_CONSTANT - HEX_40000000 ) { return pow ( - x , y ) ; }
Distance : 4

195
Tree	if ( y == CHAR_CONS TWO_POWER_52 y <= - lnb ) { return pow ( - x , y ) ; }
Code	if ( y == CHAR_CONS TWO_POWER_52 y <= - lnb ) { return pow ( - x , y ) ; }
Distance : 4

196
Tree	if ( y > - Double.NaN y TWO_POWER_52 < y ) { return pow ( - x , y ) ; }
Code	if ( y > - Double.NaN y TWO_POWER_52 < y ) { return pow ( - x , y ) ; }
Distance : 6

197
Tree	if ( y >= NUMBER_CONSTANT y y <= - lnb ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y <= - lnb ) { return pow ( - x , y ) ; }
Distance : 3

198
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - yi ) { return pow . pow ( x , Double.NaN , y , Double.NaN ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - yi ) { return pow . pow ( x , Double.NaN , y , Double.NaN ) ; }
Distance : 10

199
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - lnb ) { return pow . pow ( x , Double.NaN , y , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - lnb ) { return pow . pow ( x , Double.NaN , y , y ) ; }
Distance : 10

========================================================================


========================================================================
Example Number: 76
Parent Code is: 
FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
-------------------------------------------------------------------------------
Child code is: 
FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - NUMBER_CONSTANT * dim ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (40{val=FastMath.PI})) (234{val=,}) (27 (38 (201{val=-}) (800{val=dim})) (203{val=/}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (800{val=covarianceMatrixDeterminant}) (234{val=,}) (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (802{val=getExponentTerm}) (214{val=(}) (800{val=vals}) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (40{val=FastMath.PI})) (234{val=,}) (27 (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (202{val=*}) (800{val=dim})) (215{val=)})) (202{val=*}) (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (800{val=covarianceMatrixDeterminant}) (234{val=,}) (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (802{val=getExponentTerm}) (214{val=(}) (800{val=vals}) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/11/parent/src_main_java_org_apache_commons_math3_distribution_MultivariateNormalDistribution.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 40
Wrong
========================================================================
False

0
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( vals )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( vals )
Distance : 16

1
Tree	FastMath / pow * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( FastMath )
Code	FastMath / pow * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( FastMath )
Distance : 16

2
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( dim )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( dim )
Distance : 17

3
Tree	FastMath / pow * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( covarianceMatrixDeterminant )
Code	FastMath / pow * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( covarianceMatrixDeterminant )
Distance : 15

4
Tree	FastMath / pow * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( density )
Code	FastMath / pow * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( density )
Distance : 16

5
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( FastMath )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( FastMath )
Distance : 17

6
Tree	FastMath / pow * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( vals )
Code	FastMath / pow * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( vals )
Distance : 15

7
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( covarianceMatrixDeterminant )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( covarianceMatrixDeterminant )
Distance : 16

8
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( pow )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( pow )
Distance : 17

9
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( density )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( density )
Distance : 17

10
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

11
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * density ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * density ( vals )
Distance : 5

12
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * dim ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * dim ( vals )
Distance : 5

13
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * density ( FastMath )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * density ( FastMath )
Distance : 6

14
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * density ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * density ( vals )
Distance : 5

15
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * density ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * density ( vals )
Distance : 5

16
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * pow ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * pow ( vals )
Distance : 5

17
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( density , - NUMBER_CONSTANT ) * density ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( density , - NUMBER_CONSTANT ) * density ( vals )
Distance : 5

18
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * density ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * density ( vals )
Distance : 4

19
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * FastMath.PI ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * FastMath.PI ( vals )
Distance : 5

20
Tree	FastMath / FastMath * FastMath . pow ( vals ) * density ( vals ) . density ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * density ( vals ) . density ( vals ) - dim
Distance : 21

21
Tree	FastMath / FastMath * FastMath . pow ( vals ) * density ( vals ) . density ( vals ) - density
Code	FastMath / FastMath * FastMath . pow ( vals ) * density ( vals ) . density ( vals ) - density
Distance : 21

22
Tree	FastMath / FastMath * FastMath . pow ( vals ) * density ( vals ) . density ( vals ) - pow
Code	FastMath / FastMath * FastMath . pow ( vals ) * density ( vals ) . density ( vals ) - pow
Distance : 21

23
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * density ( vals ) . density ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * density ( vals ) . density ( vals ) - dim
Distance : 21

24
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * density ( vals ) . density ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * density ( vals ) . density ( vals ) - dim
Distance : 21

25
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * density ( vals ) . density ( vals ) - density
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * density ( vals ) . density ( vals ) - density
Distance : 21

26
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * density ( vals ) . density ( vals ) - density
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * density ( vals ) . density ( vals ) - density
Distance : 21

27
Tree	FastMath / FastMath * FastMath . pow ( density ) * density ( vals ) . density ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( density ) * density ( vals ) . density ( vals ) - dim
Distance : 21

28
Tree	FastMath / FastMath * FastMath . pow ( density ) * density ( vals ) . density ( vals ) - density
Code	FastMath / FastMath * FastMath . pow ( density ) * density ( vals ) . density ( vals ) - density
Distance : 21

29
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * density ( vals ) . density ( vals ) - pow
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * density ( vals ) . density ( vals ) - pow
Distance : 21

30
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Distance : 16

31
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - density
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - density
Distance : 16

32
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( density ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( density ) - dim
Distance : 16

33
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - pow
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - pow
Distance : 16

34
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - dim
Distance : 15

35
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( density ) - density
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( density ) - density
Distance : 16

36
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - density
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - density
Distance : 15

37
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - getExponentTerm
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - getExponentTerm
Distance : 15

38
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - dim
Distance : 16

39
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( density ) - pow
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( density ) - pow
Distance : 16

========================================================================


========================================================================
Example Number: 77
Parent Code is: 
iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ;
-------------------------------------------------------------------------------
Child code is: 
iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (800{val=iterations}) (204{val==}) (14 (304{val=new}) (43 (801{val=Incrementor})) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=MaxIterCallback})) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (800{val=iterations}) (204{val==}) (14 (304{val=new}) (43 (801{val=Incrementor})) (214{val=(}) (40{val=Integer.MAX_VALUE}) (234{val=,}) (14 (304{val=new}) (43 (801{val=MaxIterCallback})) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/6/parent/src_main_java_org_apache_commons_math3_optim_BaseOptimizer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	iterations = new iterations ( false ) ;
Code	iterations = new iterations ( false ) ;
Distance : 6

1
Tree	iterations = new iterations ( true ) ;
Code	iterations = new iterations ( true ) ;
Distance : 6

2
Tree	evaluations = new iterations ( false ) ;
Code	evaluations = new iterations ( false ) ;
Distance : 7

3
Tree	evaluations = new iterations ( true ) ;
Code	evaluations = new iterations ( true ) ;
Distance : 7

4
Tree	iterations = new Incrementor ( false ) ;
Code	iterations = new Incrementor ( false ) ;
Distance : 5

5
Tree	iterations = new Incrementor ( true ) ;
Code	iterations = new Incrementor ( true ) ;
Distance : 5

6
Tree	iterations = new evaluations ( new iterations ( null ) ) ;
Code	iterations = new evaluations ( new iterations ( null ) ) ;
Distance : 6

7
Tree	iterations = new evaluations < iterations > () ;
Code	iterations = new evaluations < iterations > () ;
Distance : 7

8
Tree	iterations = new Incrementor < iterations > ( null ) ;
Code	iterations = new Incrementor < iterations > ( null ) ;
Distance : 6

9
Tree	evaluations = new iterations ( new iterations () , hex , false ) ;
Code	evaluations = new iterations ( new iterations () , hex , false ) ;
Distance : 8

10
Tree	iterations = new iterations ( new iterations ( null ) ) ;
Code	iterations = new iterations ( new iterations ( null ) ) ;
Distance : 6

11
Tree	evaluations = new evaluations ( new iterations ( null ) ) ;
Code	evaluations = new evaluations ( new iterations ( null ) ) ;
Distance : 7

12
Tree	evaluations = new Incrementor ( false ) ;
Code	evaluations = new Incrementor ( false ) ;
Distance : 6

13
Tree	evaluations = new Incrementor ( true ) ;
Code	evaluations = new Incrementor ( true ) ;
Distance : 6

14
Tree	iterations = new iterations < PAIR > ( null ) ;
Code	iterations = new iterations < PAIR > ( null ) ;
Distance : 7

15
Tree	iterations = new iterations ( new iterations () ) ;
Code	iterations = new iterations ( new iterations () ) ;
Distance : 4

16
Tree	iterations = new iterations ( this , new MaxIterCallback () ) ;
Code	iterations = new iterations ( this , new MaxIterCallback () ) ;
Distance : 2

17
Tree	iterations = new iterations ( new evaluations () ) ;
Code	iterations = new iterations ( new evaluations () ) ;
Distance : 4

18
Tree	iterations = new iterations ( new evaluations ( null ) ) ;
Code	iterations = new iterations ( new evaluations ( null ) ) ;
Distance : 6

19
Tree	iterations = new evaluations ( false ) ;
Code	iterations = new evaluations ( false ) ;
Distance : 6

20
Tree	iterations = new Incrementor ( new iterations () , CHAR_CONS , false ) ;
Code	iterations = new Incrementor ( new iterations () , CHAR_CONS , false ) ;
Distance : 6

21
Tree	iterations = new iterations ( new iterations () , hex , false ) ;
Code	iterations = new iterations ( new iterations () , hex , false ) ;
Distance : 7

22
Tree	evaluations = new iterations ( new iterations () , else , false ) ;
Code	evaluations = new iterations ( new iterations () , else , false ) ;
Distance : 8

23
Tree	evaluations = new Incrementor ( this , new iterations () ) ;
Code	evaluations = new Incrementor ( this , new iterations () ) ;
Distance : 3

24
Tree	evaluations = new Incrementor ( new iterations () , CHAR_CONS , false ) ;
Code	evaluations = new Incrementor ( new iterations () , CHAR_CONS , false ) ;
Distance : 7

25
Tree	iterations = new iterations ( new iterations () , ^ , false ) ;
Code	iterations = new iterations ( new iterations () , ^ , false ) ;
Distance : 7

26
Tree	iterations = new iterations ( new iterations () , else , false ) ;
Code	iterations = new iterations ( new iterations () , else , false ) ;
Distance : 7

27
Tree	iterations = new iterations ( new iterations () , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR , false ) ;
Code	iterations = new iterations ( new iterations () , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR , false ) ;
Distance : 7

28
Tree	iterations = new Incrementor ( this , new iterations () ) ;
Code	iterations = new Incrementor ( this , new iterations () ) ;
Distance : 2

29
Tree	evaluations = new Incrementor < iterations > ( null ) ;
Code	evaluations = new Incrementor < iterations > ( null ) ;
Distance : 7

30
Tree	iterations = new iterations ( ConvergenceChecker , iterations () , new iterations () ) ;
Code	iterations = new iterations ( ConvergenceChecker , iterations () , new iterations () ) ;
Distance : 6

31
Tree	evaluations = new iterations ( Integer.MAX_VALUE , new iterations () , hex , iterations ) ;
Code	evaluations = new iterations ( Integer.MAX_VALUE , new iterations () , hex , iterations ) ;
Distance : 7

32
Tree	evaluations = new iterations ( Integer.MAX_VALUE , new iterations ( null ) , super , iterations ) ;
Code	evaluations = new iterations ( Integer.MAX_VALUE , new iterations ( null ) , super , iterations ) ;
Distance : 10

33
Tree	iterations = new iterations ( Integer.MAX_VALUE , new iterations () , else , iterations ) ;
Code	iterations = new iterations ( Integer.MAX_VALUE , new iterations () , else , iterations ) ;
Distance : 6

34
Tree	evaluations = new iterations ( ConvergenceChecker , iterations () , new iterations () ) ;
Code	evaluations = new iterations ( ConvergenceChecker , iterations () , new iterations () ) ;
Distance : 7

35
Tree	iterations = new iterations ( iterations , new iterations () , hex , iterations ) ;
Code	iterations = new iterations ( iterations , new iterations () , hex , iterations ) ;
Distance : 7

36
Tree	iterations = new iterations ( evaluations , iterations () , new iterations () ) ;
Code	iterations = new iterations ( evaluations , iterations () , new iterations () ) ;
Distance : 6

37
Tree	iterations = new iterations ( checker , iterations () , new iterations () ) ;
Code	iterations = new iterations ( checker , iterations () , new iterations () ) ;
Distance : 6

38
Tree	iterations = new iterations ( Integer.MAX_VALUE , new iterations ( null ) , else , iterations ) ;
Code	iterations = new iterations ( Integer.MAX_VALUE , new iterations ( null ) , else , iterations ) ;
Distance : 9

39
Tree	iterations = new iterations ( iterations , new iterations ( null ) , super , iterations ) ;
Code	iterations = new iterations ( iterations , new iterations ( null ) , super , iterations ) ;
Distance : 10

40
Tree	evaluations = new iterations < iterations > ( checker , false ) ;
Code	evaluations = new iterations < iterations > ( checker , false ) ;
Distance : 9

41
Tree	evaluations = new iterations ( new iterations () , Integer.MAX_VALUE ) ;
Code	evaluations = new iterations ( new iterations () , Integer.MAX_VALUE ) ;
Distance : 7

42
Tree	evaluations = new iterations ( new iterations ( null ) , iterations ) ;
Code	evaluations = new iterations ( new iterations ( null ) , iterations ) ;
Distance : 9

43
Tree	iterations = new iterations < PAIR > () ;
Code	iterations = new iterations < PAIR > () ;
Distance : 7

44
Tree	iterations = new iterations ( new Incrementor () ) ;
Code	iterations = new iterations ( new Incrementor () ) ;
Distance : 4

45
Tree	evaluations = new Incrementor ( new iterations () , iterations ) ;
Code	evaluations = new Incrementor ( new iterations () , iterations ) ;
Distance : 6

46
Tree	iterations = new iterations ( new Incrementor () , iterations ) ;
Code	iterations = new iterations ( new Incrementor () , iterations ) ;
Distance : 6

47
Tree	evaluations = new iterations ( checker , new iterations () , CHAR_CONS ) ;
Code	evaluations = new iterations ( checker , new iterations () , CHAR_CONS ) ;
Distance : 6

48
Tree	evaluations = new iterations ( new iterations ( null ) , MaxIterCallback ) ;
Code	evaluations = new iterations ( new iterations ( null ) , MaxIterCallback ) ;
Distance : 9

49
Tree	iterations = new iterations ( new iterations () , CHAR_CONS , false ) ;
Code	iterations = new iterations ( new iterations () , CHAR_CONS , false ) ;
Distance : 7

50
Tree	evaluations = new iterations ( iterations , new iterations () , CHAR_CONS ) ;
Code	evaluations = new iterations ( iterations , new iterations () , CHAR_CONS ) ;
Distance : 6

51
Tree	iterations = new iterations < iterations > ( ConvergenceChecker , false ) ;
Code	iterations = new iterations < iterations > ( ConvergenceChecker , false ) ;
Distance : 8

52
Tree	evaluations = new iterations ( null , iterations , new iterations () ) ;
Code	evaluations = new iterations ( null , iterations , new iterations () ) ;
Distance : 6

53
Tree	evaluations = new Incrementor ( new iterations ( null ) ) ;
Code	evaluations = new Incrementor ( new iterations ( null ) ) ;
Distance : 6

54
Tree	evaluations = new Incrementor < iterations > () ;
Code	evaluations = new Incrementor < iterations > () ;
Distance : 7

55
Tree	iterations = new iterations ( null , iterations , new iterations () , null ) ;
Code	iterations = new iterations ( null , iterations , new iterations () , null ) ;
Distance : 7

56
Tree	iterations = new iterations ( Integer.MAX_VALUE , new iterations () , CHAR_CONS ) ;
Code	iterations = new iterations ( Integer.MAX_VALUE , new iterations () , CHAR_CONS ) ;
Distance : 4

57
Tree	iterations = new iterations ( new iterations ( null ) , MaxIterCallback ) ;
Code	iterations = new iterations ( new iterations ( null ) , MaxIterCallback ) ;
Distance : 8

58
Tree	evaluations = new iterations < PAIR > () ;
Code	evaluations = new iterations < PAIR > () ;
Distance : 8

59
Tree	evaluations = new iterations ( evaluations , new iterations () , CHAR_CONS ) ;
Code	evaluations = new iterations ( evaluations , new iterations () , CHAR_CONS ) ;
Distance : 6

60
Tree	iterations = new Incrementor ( null , iterations , new iterations () , null ) ;
Code	iterations = new Incrementor ( null , iterations , new iterations () , null ) ;
Distance : 6

61
Tree	iterations = new iterations ( new iterations () ) ;
Code	iterations = new iterations ( new iterations () ) ;
Distance : 4

62
Tree	iterations = new iterations ( ConvergenceChecker , new iterations () ) ;
Code	iterations = new iterations ( ConvergenceChecker , new iterations () ) ;
Distance : 3

63
Tree	iterations = new iterations ( iterations , new iterations () , CHAR_CONS ) ;
Code	iterations = new iterations ( iterations , new iterations () , CHAR_CONS ) ;
Distance : 5

64
Tree	iterations = new iterations ( evaluations , new iterations () , CHAR_CONS ) ;
Code	iterations = new iterations ( evaluations , new iterations () , CHAR_CONS ) ;
Distance : 5

65
Tree	iterations = new iterations ( this , new iterations () ) ;
Code	iterations = new iterations ( this , new iterations () ) ;
Distance : 3

66
Tree	evaluations = new iterations ( null , iterations , new MaxIterCallback () ) ;
Code	evaluations = new iterations ( null , iterations , new MaxIterCallback () ) ;
Distance : 5

67
Tree	iterations = new iterations ( ConvergenceChecker , new iterations () , CHAR_CONS ) ;
Code	iterations = new iterations ( ConvergenceChecker , new iterations () , CHAR_CONS ) ;
Distance : 5

68
Tree	evaluations = new iterations ( new Incrementor () ) ;
Code	evaluations = new iterations ( new Incrementor () ) ;
Distance : 5

69
Tree	iterations = new iterations < iterations > ( checker , false ) ;
Code	iterations = new iterations < iterations > ( checker , false ) ;
Distance : 8

70
Tree	iterations = new evaluations ( new iterations () ) ;
Code	iterations = new evaluations ( new iterations () ) ;
Distance : 4

71
Tree	iterations = new iterations ( ConvergenceChecker , new iterations () , hex ) ;
Code	iterations = new iterations ( ConvergenceChecker , new iterations () , hex ) ;
Distance : 5

72
Tree	evaluations = new iterations < iterations > ( evaluations , false ) ;
Code	evaluations = new iterations < iterations > ( evaluations , false ) ;
Distance : 9

73
Tree	iterations = new iterations ( iterations , new iterations () , CHAR_CONS ) ;
Code	iterations = new iterations ( iterations , new iterations () , CHAR_CONS ) ;
Distance : 5

74
Tree	evaluations = new iterations ( new iterations () , evaluations ) ;
Code	evaluations = new iterations ( new iterations () , evaluations ) ;
Distance : 7

75
Tree	iterations = new iterations ( Integer.MAX_VALUE , new iterations () , hex ) ;
Code	iterations = new iterations ( Integer.MAX_VALUE , new iterations () , hex ) ;
Distance : 4

76
Tree	iterations = new iterations < iterations > ( null ) ;
Code	iterations = new iterations < iterations > ( null ) ;
Distance : 7

77
Tree	evaluations = new Incrementor ( null , iterations , new iterations () ) ;
Code	evaluations = new Incrementor ( null , iterations , new iterations () ) ;
Distance : 5

78
Tree	iterations = new iterations ( checker , new iterations () , CHAR_CONS ) ;
Code	iterations = new iterations ( checker , new iterations () , CHAR_CONS ) ;
Distance : 5

79
Tree	evaluations = new iterations ( new Incrementor () , iterations ) ;
Code	evaluations = new iterations ( new Incrementor () , iterations ) ;
Distance : 7

80
Tree	iterations = new iterations ( null , iterations , new MaxIterCallback () ) ;
Code	iterations = new iterations ( null , iterations , new MaxIterCallback () ) ;
Distance : 4

81
Tree	iterations = new iterations ( new iterations () , evaluations ) ;
Code	iterations = new iterations ( new iterations () , evaluations ) ;
Distance : 6

82
Tree	iterations = new iterations ( null , iterations , new PAIR () ) ;
Code	iterations = new iterations ( null , iterations , new PAIR () ) ;
Distance : 5

83
Tree	evaluations = new evaluations ( new iterations () ) ;
Code	evaluations = new evaluations ( new iterations () ) ;
Distance : 5

84
Tree	iterations = new iterations ( checker , new iterations () ) ;
Code	iterations = new iterations ( checker , new iterations () ) ;
Distance : 3

85
Tree	iterations = new Incrementor < iterations > ( checker , false ) ;
Code	iterations = new Incrementor < iterations > ( checker , false ) ;
Distance : 7

86
Tree	evaluations = new iterations ( checker , new iterations () ) ;
Code	evaluations = new iterations ( checker , new iterations () ) ;
Distance : 4

87
Tree	iterations = new iterations ( null , MaxIterCallback , new iterations () ) ;
Code	iterations = new iterations ( null , MaxIterCallback , new iterations () ) ;
Distance : 5

88
Tree	iterations = new iterations ( new MaxIterCallback ( null ) , iterations ) ;
Code	iterations = new iterations ( new MaxIterCallback ( null ) , iterations ) ;
Distance : 8

89
Tree	evaluations = new Incrementor ( new iterations () , iterations ) ;
Code	evaluations = new Incrementor ( new iterations () , iterations ) ;
Distance : 6

90
Tree	evaluations = new iterations < Incrementor > () ;
Code	evaluations = new iterations < Incrementor > () ;
Distance : 8

91
Tree	evaluations = new iterations ( null , iterations , new iterations () , null ) ;
Code	evaluations = new iterations ( null , iterations , new iterations () , null ) ;
Distance : 8

92
Tree	iterations = new iterations ( new Incrementor ( null ) ) ;
Code	iterations = new iterations ( new Incrementor ( null ) ) ;
Distance : 6

93
Tree	evaluations = new iterations ( null , iterations , new MaxIterCallback () , null ) ;
Code	evaluations = new iterations ( null , iterations , new MaxIterCallback () , null ) ;
Distance : 7

94
Tree	iterations = new iterations ( evaluations , new iterations () ) ;
Code	iterations = new iterations ( evaluations , new iterations () ) ;
Distance : 3

95
Tree	iterations = new Incrementor ( null , iterations , new iterations () ) ;
Code	iterations = new Incrementor ( null , iterations , new iterations () ) ;
Distance : 4

96
Tree	evaluations = new iterations < iterations > ( Integer.MAX_VALUE , false ) ;
Code	evaluations = new iterations < iterations > ( Integer.MAX_VALUE , false ) ;
Distance : 8

97
Tree	iterations = new iterations ( null , iterations , new Integer.MAX_VALUE () ) ;
Code	iterations = new iterations ( null , iterations , new Integer.MAX_VALUE () ) ;
Distance : 5

98
Tree	evaluations = new iterations ( this , new iterations () ) ;
Code	evaluations = new iterations ( this , new iterations () ) ;
Distance : 4

99
Tree	evaluations = new iterations ( null , MaxIterCallback , new iterations () ) ;
Code	evaluations = new iterations ( null , MaxIterCallback , new iterations () ) ;
Distance : 6

100
Tree	iterations = new iterations ( Integer.MAX_VALUE , new iterations () , CHAR_CONS , iterations ) ;
Code	iterations = new iterations ( Integer.MAX_VALUE , new iterations () , CHAR_CONS , iterations ) ;
Distance : 6

101
Tree	iterations = new iterations ( iterations , new iterations () ) ;
Code	iterations = new iterations ( iterations , new iterations () ) ;
Distance : 3

102
Tree	evaluations = new iterations ( Integer.MAX_VALUE , new iterations () , hex ) ;
Code	evaluations = new iterations ( Integer.MAX_VALUE , new iterations () , hex ) ;
Distance : 5

103
Tree	evaluations = new Incrementor ( null , iterations , new iterations () , null ) ;
Code	evaluations = new Incrementor ( null , iterations , new iterations () , null ) ;
Distance : 7

104
Tree	evaluations = new iterations ( new iterations () , MaxIterCallback ) ;
Code	evaluations = new iterations ( new iterations () , MaxIterCallback ) ;
Distance : 7

105
Tree	evaluations = new iterations ( ConvergenceChecker , new iterations () , CHAR_CONS ) ;
Code	evaluations = new iterations ( ConvergenceChecker , new iterations () , CHAR_CONS ) ;
Distance : 6

106
Tree	evaluations = new iterations < iterations > ( null ) ;
Code	evaluations = new iterations < iterations > ( null ) ;
Distance : 8

107
Tree	iterations = new iterations ( null , MaxIterCallback , new iterations () , null ) ;
Code	iterations = new iterations ( null , MaxIterCallback , new iterations () , null ) ;
Distance : 7

108
Tree	iterations = new iterations ( Integer.MAX_VALUE , new iterations ( null ) , CHAR_CONS , iterations ) ;
Code	iterations = new iterations ( Integer.MAX_VALUE , new iterations ( null ) , CHAR_CONS , iterations ) ;
Distance : 9

109
Tree	iterations = new iterations < evaluations > () ;
Code	iterations = new iterations < evaluations > () ;
Distance : 7

110
Tree	iterations = new iterations ( Integer.MAX_VALUE , new iterations () , else ) ;
Code	iterations = new iterations ( Integer.MAX_VALUE , new iterations () , else ) ;
Distance : 4

111
Tree	iterations = new iterations < Incrementor > () ;
Code	iterations = new iterations < Incrementor > () ;
Distance : 7

112
Tree	iterations = new iterations ( Integer.MAX_VALUE , new iterations () ) ;
Code	iterations = new iterations ( Integer.MAX_VALUE , new iterations () ) ;
Distance : 2

113
Tree	evaluations = new iterations ( new Incrementor ( null ) ) ;
Code	evaluations = new iterations ( new Incrementor ( null ) ) ;
Distance : 7

114
Tree	evaluations = new iterations ( new Incrementor () , iterations ) ;
Code	evaluations = new iterations ( new Incrementor () , iterations ) ;
Distance : 7

115
Tree	evaluations = new iterations ( new iterations () , CHAR_CONS , false ) ;
Code	evaluations = new iterations ( new iterations () , CHAR_CONS , false ) ;
Distance : 8

116
Tree	evaluations = new iterations ( ConvergenceChecker , new iterations () ) ;
Code	evaluations = new iterations ( ConvergenceChecker , new iterations () ) ;
Distance : 4

117
Tree	evaluations = new iterations ( Integer.MAX_VALUE , new iterations () , CHAR_CONS , iterations ) ;
Code	evaluations = new iterations ( Integer.MAX_VALUE , new iterations () , CHAR_CONS , iterations ) ;
Distance : 7

118
Tree	evaluations = new Incrementor ( new iterations ( null ) , iterations ) ;
Code	evaluations = new Incrementor ( new iterations ( null ) , iterations ) ;
Distance : 8

119
Tree	evaluations = new iterations ( Integer.MAX_VALUE , new iterations ( null ) , CHAR_CONS , iterations ) ;
Code	evaluations = new iterations ( Integer.MAX_VALUE , new iterations ( null ) , CHAR_CONS , iterations ) ;
Distance : 10

120
Tree	iterations = new iterations ( iterations , new iterations () , CHAR_CONS , iterations ) ;
Code	iterations = new iterations ( iterations , new iterations () , CHAR_CONS , iterations ) ;
Distance : 7

121
Tree	iterations = new iterations ( null , iterations , new MaxIterCallback () , null ) ;
Code	iterations = new iterations ( null , iterations , new MaxIterCallback () , null ) ;
Distance : 6

122
Tree	iterations = new iterations < iterations > ( NUMBER_CONSTANT , false ) ;
Code	iterations = new iterations < iterations > ( NUMBER_CONSTANT , false ) ;
Distance : 8

123
Tree	iterations = new iterations ( iterations , new iterations ( null ) , CHAR_CONS , iterations ) ;
Code	iterations = new iterations ( iterations , new iterations ( null ) , CHAR_CONS , iterations ) ;
Distance : 10

124
Tree	evaluations = new iterations ( new iterations ( null ) , Integer.MAX_VALUE ) ;
Code	evaluations = new iterations ( new iterations ( null ) , Integer.MAX_VALUE ) ;
Distance : 9

125
Tree	iterations = new iterations ( Integer.MAX_VALUE , new iterations () , hex , iterations ) ;
Code	iterations = new iterations ( Integer.MAX_VALUE , new iterations () , hex , iterations ) ;
Distance : 6

126
Tree	evaluations = new iterations ( iterations , new iterations () , CHAR_CONS , iterations ) ;
Code	evaluations = new iterations ( iterations , new iterations () , CHAR_CONS , iterations ) ;
Distance : 8

127
Tree	iterations = new iterations ( new Incrementor () , iterations ) ;
Code	iterations = new iterations ( new Incrementor () , iterations ) ;
Distance : 6

128
Tree	evaluations = new iterations ( iterations , new iterations ( null ) , CHAR_CONS , iterations ) ;
Code	evaluations = new iterations ( iterations , new iterations ( null ) , CHAR_CONS , iterations ) ;
Distance : 11

129
Tree	iterations = new iterations ( false ) ;
Code	iterations = new iterations ( false ) ;
Distance : 6

130
Tree	evaluations = new iterations < PAIR > ( null ) ;
Code	evaluations = new iterations < PAIR > ( null ) ;
Distance : 8

131
Tree	evaluations = new iterations ( new iterations () ) ;
Code	evaluations = new iterations ( new iterations () ) ;
Distance : 5

132
Tree	iterations = new iterations ( Integer.MAX_VALUE , new iterations ( null ) , super , iterations ) ;
Code	iterations = new iterations ( Integer.MAX_VALUE , new iterations ( null ) , super , iterations ) ;
Distance : 9

133
Tree	evaluations = new iterations ( this , new MaxIterCallback () ) ;
Code	evaluations = new iterations ( this , new MaxIterCallback () ) ;
Distance : 3

134
Tree	iterations = new iterations < Incrementor > ( null ) ;
Code	iterations = new iterations < Incrementor > ( null ) ;
Distance : 7

135
Tree	iterations = new iterations ( new iterations ( null ) ) ;
Code	iterations = new iterations ( new iterations ( null ) ) ;
Distance : 6

136
Tree	iterations = new iterations ( this , new Integer.MAX_VALUE () ) ;
Code	iterations = new iterations ( this , new Integer.MAX_VALUE () ) ;
Distance : 3

137
Tree	iterations = new iterations < iterations > () ;
Code	iterations = new iterations < iterations > () ;
Distance : 7

138
Tree	evaluations = new iterations < Incrementor > ( null ) ;
Code	evaluations = new iterations < Incrementor > ( null ) ;
Distance : 8

139
Tree	evaluations = new iterations ( new iterations ( null ) ) ;
Code	evaluations = new iterations ( new iterations ( null ) ) ;
Distance : 7

140
Tree	evaluations = new iterations < iterations > () ;
Code	evaluations = new iterations < iterations > () ;
Distance : 8

141
Tree	iterations = new evaluations < iterations > ( null ) ;
Code	iterations = new evaluations < iterations > ( null ) ;
Distance : 7

142
Tree	evaluations = new iterations ( new iterations () , iterations ) ;
Code	evaluations = new iterations ( new iterations () , iterations ) ;
Distance : 7

143
Tree	evaluations = new iterations ( this , new Integer.MAX_VALUE () ) ;
Code	evaluations = new iterations ( this , new Integer.MAX_VALUE () ) ;
Distance : 4

144
Tree	iterations = new iterations ( new iterations () , iterations ) ;
Code	iterations = new iterations ( new iterations () , iterations ) ;
Distance : 6

145
Tree	iterations = new iterations ( null , iterations , new PAIR () , null ) ;
Code	iterations = new iterations ( null , iterations , new PAIR () , null ) ;
Distance : 7

146
Tree	iterations = new iterations ( this , new PAIR () ) ;
Code	iterations = new iterations ( this , new PAIR () ) ;
Distance : 3

147
Tree	iterations = new Incrementor ( new iterations () ) ;
Code	iterations = new Incrementor ( new iterations () ) ;
Distance : 3

148
Tree	iterations = new iterations ( new iterations () , MaxIterCallback ) ;
Code	iterations = new iterations ( new iterations () , MaxIterCallback ) ;
Distance : 6

149
Tree	evaluations = new Incrementor ( new iterations () ) ;
Code	evaluations = new Incrementor ( new iterations () ) ;
Distance : 4

150
Tree	iterations = new iterations ( new iterations () , iterations ) ;
Code	iterations = new iterations ( new iterations () , iterations ) ;
Distance : 6

151
Tree	iterations = new iterations ( new iterations () , Integer.MAX_VALUE ) ;
Code	iterations = new iterations ( new iterations () , Integer.MAX_VALUE ) ;
Distance : 6

152
Tree	iterations = new iterations ( new iterations ( null ) , iterations ) ;
Code	iterations = new iterations ( new iterations ( null ) , iterations ) ;
Distance : 8

153
Tree	iterations = new Incrementor ( new iterations () , iterations ) ;
Code	iterations = new Incrementor ( new iterations () , iterations ) ;
Distance : 5

154
Tree	evaluations = new iterations ( new iterations () , iterations ) ;
Code	evaluations = new iterations ( new iterations () , iterations ) ;
Distance : 7

155
Tree	evaluations = new iterations ( Integer.MAX_VALUE , new iterations () , else , iterations ) ;
Code	evaluations = new iterations ( Integer.MAX_VALUE , new iterations () , else , iterations ) ;
Distance : 7

156
Tree	evaluations = new iterations ( new Incrementor ( null ) , iterations ) ;
Code	evaluations = new iterations ( new Incrementor ( null ) , iterations ) ;
Distance : 9

157
Tree	evaluations = new iterations ( evaluations , new iterations () ) ;
Code	evaluations = new iterations ( evaluations , new iterations () ) ;
Distance : 4

158
Tree	iterations = new iterations ( ConvergenceChecker , iterations () , new iterations () ) ;
Code	iterations = new iterations ( ConvergenceChecker , iterations () , new iterations () ) ;
Distance : 6

159
Tree	evaluations = new iterations ( iterations , new iterations () ) ;
Code	evaluations = new iterations ( iterations , new iterations () ) ;
Distance : 4

160
Tree	iterations = new iterations ( iterations , new iterations () , hex ) ;
Code	iterations = new iterations ( iterations , new iterations () , hex ) ;
Distance : 5

161
Tree	iterations = new iterations ( checker , iterations () , new iterations () ) ;
Code	iterations = new iterations ( checker , iterations () , new iterations () ) ;
Distance : 6

162
Tree	iterations = new Incrementor ( new iterations ( null ) ) ;
Code	iterations = new Incrementor ( new iterations ( null ) ) ;
Distance : 5

163
Tree	iterations = new iterations < evaluations > ( null ) ;
Code	iterations = new iterations < evaluations > ( null ) ;
Distance : 7

164
Tree	iterations = new iterations ( null , iterations , new Integer.MAX_VALUE () , null ) ;
Code	iterations = new iterations ( null , iterations , new Integer.MAX_VALUE () , null ) ;
Distance : 7

165
Tree	evaluations = new iterations ( ConvergenceChecker , iterations () , new iterations () ) ;
Code	evaluations = new iterations ( ConvergenceChecker , iterations () , new iterations () ) ;
Distance : 7

166
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new iterations () , CHAR_CONS , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new iterations () , CHAR_CONS , iterations ) ;
Distance : 5

167
Tree	iterations = new Incrementor < iterations > () ;
Code	iterations = new Incrementor < iterations > () ;
Distance : 6

168
Tree	iterations = new evaluations ( this , new iterations () ) ;
Code	iterations = new evaluations ( this , new iterations () ) ;
Distance : 3

169
Tree	iterations = new iterations ( Integer.MAX_VALUE , new iterations ( null ) , CHAR_CONS , MaxIterCallback ) ;
Code	iterations = new iterations ( Integer.MAX_VALUE , new iterations ( null ) , CHAR_CONS , MaxIterCallback ) ;
Distance : 9

170
Tree	iterations = new iterations ( null , iterations , new iterations () ) ;
Code	iterations = new iterations ( null , iterations , new iterations () ) ;
Distance : 5

171
Tree	evaluations = new iterations ( checker , iterations () , new iterations () ) ;
Code	evaluations = new iterations ( checker , iterations () , new iterations () ) ;
Distance : 7

172
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new iterations ( null ) , CHAR_CONS , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new iterations ( null ) , CHAR_CONS , iterations ) ;
Distance : 8

173
Tree	evaluations = new iterations ( evaluations , iterations () , new iterations () ) ;
Code	evaluations = new iterations ( evaluations , iterations () , new iterations () ) ;
Distance : 7

174
Tree	iterations = new iterations ( evaluations , iterations () , new iterations () ) ;
Code	iterations = new iterations ( evaluations , iterations () , new iterations () ) ;
Distance : 6

175
Tree	iterations = new iterations ( iterations , iterations () , new iterations () ) ;
Code	iterations = new iterations ( iterations , iterations () , new iterations () ) ;
Distance : 6

176
Tree	evaluations = new iterations ( null , MaxIterCallback , new iterations () , null ) ;
Code	evaluations = new iterations ( null , MaxIterCallback , new iterations () , null ) ;
Distance : 8

177
Tree	evaluations = new iterations ( new iterations () , MaxIterCallback ) ;
Code	evaluations = new iterations ( new iterations () , MaxIterCallback ) ;
Distance : 7

178
Tree	evaluations = new iterations ( checker , iterations () , new iterations () ) ;
Code	evaluations = new iterations ( checker , iterations () , new iterations () ) ;
Distance : 7

179
Tree	iterations = new iterations ( Integer.MAX_VALUE , iterations () , new iterations () ) ;
Code	iterations = new iterations ( Integer.MAX_VALUE , iterations () , new iterations () ) ;
Distance : 5

180
Tree	evaluations = new iterations ( evaluations , iterations () , new iterations () ) ;
Code	evaluations = new iterations ( evaluations , iterations () , new iterations () ) ;
Distance : 7

181
Tree	evaluations = new iterations ( Integer.MAX_VALUE , new iterations () , else ) ;
Code	evaluations = new iterations ( Integer.MAX_VALUE , new iterations () , else ) ;
Distance : 5

182
Tree	iterations = new iterations ( iterations , iterations () , new iterations () ) ;
Code	iterations = new iterations ( iterations , iterations () , new iterations () ) ;
Distance : 6

183
Tree	iterations = new iterations ( Integer.MAX_VALUE , iterations () , new iterations () ) ;
Code	iterations = new iterations ( Integer.MAX_VALUE , iterations () , new iterations () ) ;
Distance : 5

184
Tree	evaluations = new iterations ( iterations , iterations () , new iterations () ) ;
Code	evaluations = new iterations ( iterations , iterations () , new iterations () ) ;
Distance : 7

185
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new iterations () , CHAR_CONS ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new iterations () , CHAR_CONS ) ;
Distance : 3

186
Tree	iterations = new iterations ( ConvergenceChecker , Integer.MAX_VALUE () , new iterations () ) ;
Code	iterations = new iterations ( ConvergenceChecker , Integer.MAX_VALUE () , new iterations () ) ;
Distance : 5

187
Tree	evaluations = new iterations ( Integer.MAX_VALUE , new iterations () ) ;
Code	evaluations = new iterations ( Integer.MAX_VALUE , new iterations () ) ;
Distance : 3

188
Tree	iterations = new iterations ( ConvergenceChecker , Integer.MAX_VALUE () , new iterations () ) ;
Code	iterations = new iterations ( ConvergenceChecker , Integer.MAX_VALUE () , new iterations () ) ;
Distance : 5

189
Tree	iterations = new Incrementor ( new iterations () , iterations ) ;
Code	iterations = new Incrementor ( new iterations () , iterations ) ;
Distance : 5

190
Tree	iterations = new iterations < iterations > ( Integer.MAX_VALUE , false ) ;
Code	iterations = new iterations < iterations > ( Integer.MAX_VALUE , false ) ;
Distance : 7

191
Tree	evaluations = new iterations ( iterations , iterations () , new iterations () ) ;
Code	evaluations = new iterations ( iterations , iterations () , new iterations () ) ;
Distance : 7

192
Tree	iterations = new iterations ( new iterations () , MaxIterCallback ) ;
Code	iterations = new iterations ( new iterations () , MaxIterCallback ) ;
Distance : 6

193
Tree	iterations = new Incrementor ( new iterations ( null ) , iterations ) ;
Code	iterations = new Incrementor ( new iterations ( null ) , iterations ) ;
Distance : 7

194
Tree	iterations = new iterations ( new iterations ( null ) , Integer.MAX_VALUE ) ;
Code	iterations = new iterations ( new iterations ( null ) , Integer.MAX_VALUE ) ;
Distance : 8

195
Tree	iterations = new iterations ( Integer.MAX_VALUE , new iterations () , CHAR_CONS ) ;
Code	iterations = new iterations ( Integer.MAX_VALUE , new iterations () , CHAR_CONS ) ;
Distance : 4

196
Tree	iterations = new iterations ( checker , new iterations () , hex ) ;
Code	iterations = new iterations ( checker , new iterations () , hex ) ;
Distance : 5

197
Tree	evaluations = new iterations < iterations > ( ConvergenceChecker , false ) ;
Code	evaluations = new iterations < iterations > ( ConvergenceChecker , false ) ;
Distance : 9

198
Tree	evaluations = new iterations ( Integer.MAX_VALUE , new iterations () , CHAR_CONS ) ;
Code	evaluations = new iterations ( Integer.MAX_VALUE , new iterations () , CHAR_CONS ) ;
Distance : 5

199
Tree	iterations = new iterations < iterations > ( evaluations , false ) ;
Code	iterations = new iterations < iterations > ( evaluations , false ) ;
Distance : 8

========================================================================


========================================================================
Example Number: 78
Parent Code is: 
if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Child code is: 
if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=real}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=imaginary}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=real}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=imaginary}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=INF}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/5/parent/src_main_java_org_apache_commons_math3_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 6

1
Tree	if ( real == NUMBER_CONSTANT && imaginary != createComplex ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != createComplex ) { return NaN ; }
Distance : 3

2
Tree	if ( real == NUMBER_CONSTANT && real == CHAR_CONS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real == CHAR_CONS ) { return NaN ; }
Distance : 3

3
Tree	if ( real == NUMBER_CONSTANT && abs == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && abs == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

4
Tree	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + FastMath ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + FastMath ) { return NaN ; }
Distance : 4

5
Tree	if ( real == NUMBER_CONSTANT && imaginary == imaginary () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == imaginary () ) { return NaN ; }
Distance : 3

6
Tree	if ( real == NUMBER_CONSTANT && real < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 6

7
Tree	if ( real == NUMBER_CONSTANT && imaginary && FastMath ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary && FastMath ) { return NaN ; }
Distance : 3

8
Tree	if ( real == NUMBER_CONSTANT && imaginary <= real () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= real () ) { return NaN ; }
Distance : 4

9
Tree	if ( real == NUMBER_CONSTANT && imaginary < Complex == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < Complex == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

10
Tree	if ( real . isNaN ( real ) && scale == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . isNaN ( real ) && scale == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

11
Tree	if ( real == NUMBER_CONSTANT && createComplex == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && createComplex == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

12
Tree	if ( real == NUMBER_CONSTANT && FastMath >= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && FastMath >= imaginary ) { return NaN ; }
Distance : 4

13
Tree	if ( real == NUMBER_CONSTANT && this == q ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == q ) { return NaN ; }
Distance : 3

14
Tree	if ( real == NUMBER_CONSTANT && imaginary == real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

15
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary () == null ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary () == null ) { return NaN ; }
Distance : 4

16
Tree	if ( real == NUMBER_CONSTANT && imaginary == NaN () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NaN () ) { return NaN ; }
Distance : 3

17
Tree	if ( real == NUMBER_CONSTANT && FastMath == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && FastMath == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

18
Tree	if ( real == NUMBER_CONSTANT && real () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real () == null ) { return NaN ; }
Distance : 4

19
Tree	if ( real == NUMBER_CONSTANT && createComplex () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && createComplex () == null ) { return NaN ; }
Distance : 4

20
Tree	if ( real == NUMBER_CONSTANT && this == Complex ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == Complex ) { return NaN ; }
Distance : 3

21
Tree	if ( imaginary == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Distance : 4

22
Tree	if ( real == NUMBER_CONSTANT && scale <= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && scale <= imaginary ) { return NaN ; }
Distance : 4

23
Tree	if ( real == NUMBER_CONSTANT && real < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

24
Tree	if ( real == NUMBER_CONSTANT && FastMath != imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && FastMath != imaginary ) { return NaN ; }
Distance : 4

25
Tree	if ( real == NUMBER_CONSTANT && abs == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && abs == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

26
Tree	if ( real == NUMBER_CONSTANT && imaginary != ZERO ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != ZERO ) { return NaN ; }
Distance : 3

27
Tree	if ( real == NUMBER_CONSTANT && this == real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == real ) { return NaN ; }
Distance : 3

28
Tree	if ( real == NUMBER_CONSTANT && imaginary < scale == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < scale == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

29
Tree	if ( real == NUMBER_CONSTANT && FastMath <= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && FastMath <= imaginary ) { return NaN ; }
Distance : 4

30
Tree	if ( real == NUMBER_CONSTANT && this == createComplex ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == createComplex ) { return NaN ; }
Distance : 3

31
Tree	if ( real == NUMBER_CONSTANT && imaginary && scale ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary && scale ) { return NaN ; }
Distance : 3

32
Tree	if ( real . abs ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . abs ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

33
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Distance : 4

34
Tree	if ( real == NUMBER_CONSTANT && scale () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && scale () == null ) { return NaN ; }
Distance : 4

35
Tree	if ( real == NUMBER_CONSTANT && abs () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && abs () == null ) { return NaN ; }
Distance : 4

36
Tree	if ( real == NUMBER_CONSTANT && scale == CHAR_CONS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && scale == CHAR_CONS ) { return NaN ; }
Distance : 3

37
Tree	if ( real == NUMBER_CONSTANT && real == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

38
Tree	if ( real == NUMBER_CONSTANT && scale < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && scale < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

39
Tree	if ( real == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Distance : 3

40
Tree	if ( real . createComplex ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . createComplex ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

41
Tree	if ( real == NUMBER_CONSTANT && imaginary == q == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == q == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

42
Tree	if ( real == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Distance : 3

43
Tree	if ( real == NUMBER_CONSTANT && imaginary > Complex ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > Complex ) { return NaN ; }
Distance : 3

44
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

45
Tree	if ( real == NUMBER_CONSTANT && real >= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real >= imaginary ) { return NaN ; }
Distance : 4

46
Tree	if ( real == NUMBER_CONSTANT && this == scale ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == scale ) { return NaN ; }
Distance : 3

47
Tree	if ( real == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return ZERO ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return ZERO ; }
Distance : 3

48
Tree	if ( real == NUMBER_CONSTANT && this == imaginary ) { return createComplex ; }
Code	if ( real == NUMBER_CONSTANT && this == imaginary ) { return createComplex ; }
Distance : 3

49
Tree	if ( real == NUMBER_CONSTANT && FastMath == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && FastMath == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

50
Tree	if ( real == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Distance : 2

51
Tree	if ( real == NUMBER_CONSTANT && imaginary < FastMath == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < FastMath == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

52
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 4

53
Tree	if ( real == NUMBER_CONSTANT && scale == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && scale == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

54
Tree	if ( real == NUMBER_CONSTANT && imaginary >= scale ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary >= scale ) { return NaN ; }
Distance : 3

55
Tree	if ( real == NUMBER_CONSTANT && imaginary >= real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary >= real ) { return NaN ; }
Distance : 3

56
Tree	if ( real == NUMBER_CONSTANT && FastMath > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && FastMath > imaginary ) { return NaN ; }
Distance : 4

57
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

58
Tree	if ( real == NUMBER_CONSTANT && real != imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real != imaginary ) { return NaN ; }
Distance : 4

59
Tree	if ( real == NUMBER_CONSTANT && scale > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && scale > imaginary ) { return NaN ; }
Distance : 4

60
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

61
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 1

62
Tree	if ( real == NUMBER_CONSTANT && imaginary == abs () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == abs () ) { return NaN ; }
Distance : 3

63
Tree	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + real ) { return NaN ; }
Distance : 4

64
Tree	if ( real == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Distance : 3

65
Tree	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Distance : 3

66
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return createComplex ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return createComplex ; }
Distance : 1

67
Tree	if ( real == NUMBER_CONSTANT && imaginary <= FastMath ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= FastMath ) { return NaN ; }
Distance : 3

68
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

69
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 3

70
Tree	if ( real == NUMBER_CONSTANT && scale == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && scale == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

71
Tree	if ( real == NUMBER_CONSTANT && imaginary <= abs () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= abs () ) { return NaN ; }
Distance : 4

72
Tree	if ( real == NUMBER_CONSTANT && scale < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && scale < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 6

73
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Distance : 4

74
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

75
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 1

76
Tree	if ( real == NUMBER_CONSTANT && real && imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real && imaginary ) { return NaN ; }
Distance : 4

77
Tree	if ( real == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return ZERO ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return ZERO ; }
Distance : 2

78
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return ZERO ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return ZERO ; }
Distance : 1

79
Tree	if ( real == NUMBER_CONSTANT && imaginary <= imaginary () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= imaginary () ) { return NaN ; }
Distance : 4

80
Tree	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + scale ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + scale ) { return NaN ; }
Distance : 4

81
Tree	if ( real == NUMBER_CONSTANT && imaginary == scale == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == scale == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

82
Tree	if ( real == NUMBER_CONSTANT && FastMath == CHAR_CONS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && FastMath == CHAR_CONS ) { return NaN ; }
Distance : 3

83
Tree	if ( real == NUMBER_CONSTANT && imaginary <= reciprocal () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= reciprocal () ) { return NaN ; }
Distance : 4

84
Tree	if ( real == NUMBER_CONSTANT && imaginary != abs ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != abs ) { return NaN ; }
Distance : 3

85
Tree	if ( real . isInfinite ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . isInfinite ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

86
Tree	if ( real == NUMBER_CONSTANT && imaginary == ZERO () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == ZERO () ) { return NaN ; }
Distance : 3

87
Tree	if ( real == NUMBER_CONSTANT && imaginary == isInfinite () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == isInfinite () ) { return NaN ; }
Distance : 3

88
Tree	if ( real == NUMBER_CONSTANT && FastMath && imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && FastMath && imaginary ) { return NaN ; }
Distance : 4

89
Tree	if ( real == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return ZERO ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return ZERO ; }
Distance : 3

90
Tree	if ( real == NUMBER_CONSTANT && imaginary < createComplex ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < createComplex ) { return NaN ; }
Distance : 3

91
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Distance : 4

92
Tree	if ( real == NUMBER_CONSTANT && scale != imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && scale != imaginary ) { return NaN ; }
Distance : 4

93
Tree	if ( real == NUMBER_CONSTANT && imaginary <= scale ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= scale ) { return NaN ; }
Distance : 3

94
Tree	if ( real == NUMBER_CONSTANT && abs <= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && abs <= imaginary ) { return NaN ; }
Distance : 4

95
Tree	if ( real == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

96
Tree	if ( real == NUMBER_CONSTANT && ZERO == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && ZERO == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

97
Tree	if ( real == NUMBER_CONSTANT && scale == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && scale == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

98
Tree	if ( real == NUMBER_CONSTANT && this == FastMath ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == FastMath ) { return NaN ; }
Distance : 3

99
Tree	if ( real == NUMBER_CONSTANT && imaginary > scale ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > scale ) { return NaN ; }
Distance : 3

100
Tree	if ( real == NUMBER_CONSTANT && scale == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && scale == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

101
Tree	if ( real == NUMBER_CONSTANT && ZERO () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && ZERO () == null ) { return NaN ; }
Distance : 4

102
Tree	if ( real == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Distance : 3

103
Tree	if ( real == NUMBER_CONSTANT && scale && imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && scale && imaginary ) { return NaN ; }
Distance : 4

104
Tree	if ( real . reciprocal ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . reciprocal ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

105
Tree	if ( real . real ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . real ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

106
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT () ) { return NaN ; }
Distance : 2

107
Tree	if ( real == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

108
Tree	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + q ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + q ) { return NaN ; }
Distance : 4

109
Tree	if ( real == NUMBER_CONSTANT && imaginary != q ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != q ) { return NaN ; }
Distance : 3

110
Tree	if ( real == NUMBER_CONSTANT && scale >= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && scale >= imaginary ) { return NaN ; }
Distance : 4

111
Tree	if ( real . isNaN ( imaginary ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . isNaN ( imaginary ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

112
Tree	if ( real == NUMBER_CONSTANT && imaginary < real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

113
Tree	if ( real == NUMBER_CONSTANT && imaginary () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary () == null ) { return NaN ; }
Distance : 3

114
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 1

115
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + q ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + q ) { return NaN ; }
Distance : 5

116
Tree	if ( real == NUMBER_CONSTANT && abs >= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && abs >= imaginary ) { return NaN ; }
Distance : 4

117
Tree	if ( real == NUMBER_CONSTANT && imaginary < && ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < && ) { return NaN ; }
Distance : 3

118
Tree	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return ZERO ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return ZERO ; }
Distance : 4

119
Tree	if ( real == NUMBER_CONSTANT && imaginary () == null ) { return isNaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary () == null ) { return isNaN ; }
Distance : 3

120
Tree	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

121
Tree	if ( isNaN == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Code	if ( isNaN == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Distance : 3

122
Tree	if ( real == NUMBER_CONSTANT && imaginary <= ZERO () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= ZERO () ) { return NaN ; }
Distance : 4

123
Tree	if ( real == NUMBER_CONSTANT && imaginary != scale ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != scale ) { return NaN ; }
Distance : 3

124
Tree	if ( real == NUMBER_CONSTANT && imaginary != real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != real ) { return NaN ; }
Distance : 3

125
Tree	if ( real . isNaN ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . isNaN ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

126
Tree	if ( real . imaginary ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . imaginary ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

127
Tree	if ( real == NUMBER_CONSTANT && imaginary && imaginary ) { return ZERO ; }
Code	if ( real == NUMBER_CONSTANT && imaginary && imaginary ) { return ZERO ; }
Distance : 3

128
Tree	if ( real . abs ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . abs ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

129
Tree	if ( real == NUMBER_CONSTANT && scale == createComplex () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && scale == createComplex () ) { return NaN ; }
Distance : 4

130
Tree	if ( real == NUMBER_CONSTANT && imaginary != abs ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != abs ) { return NaN ; }
Distance : 3

131
Tree	if ( real == NUMBER_CONSTANT && imaginary < isInfinite ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < isInfinite ) { return NaN ; }
Distance : 3

132
Tree	if ( real == NUMBER_CONSTANT && imaginary == createComplex () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == createComplex () ) { return NaN ; }
Distance : 3

133
Tree	if ( real == NUMBER_CONSTANT && imaginary > FastMath ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > FastMath ) { return NaN ; }
Distance : 3

134
Tree	if ( real == NUMBER_CONSTANT && imaginary < imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < imaginary ) { return NaN ; }
Distance : 3

135
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return ZERO ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return ZERO ; }
Distance : 1

136
Tree	if ( isNaN == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isNaN == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

137
Tree	if ( real == NUMBER_CONSTANT && imaginary != FastMath ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != FastMath ) { return NaN ; }
Distance : 3

138
Tree	if ( real == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return createComplex ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return createComplex ; }
Distance : 2

139
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Distance : 4

140
Tree	if ( real == NUMBER_CONSTANT && real != imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real != imaginary ) { return NaN ; }
Distance : 4

141
Tree	if ( real == NUMBER_CONSTANT && imaginary > abs ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > abs ) { return NaN ; }
Distance : 3

142
Tree	if ( real == NUMBER_CONSTANT && imaginary () == null ) { return createComplex ; }
Code	if ( real == NUMBER_CONSTANT && imaginary () == null ) { return createComplex ; }
Distance : 3

143
Tree	if ( real . real ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . real ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

144
Tree	if ( real == NUMBER_CONSTANT && imaginary <= isNaN () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= isNaN () ) { return NaN ; }
Distance : 4

145
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

146
Tree	if ( real == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Distance : 4

147
Tree	if ( real == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Distance : 3

148
Tree	if ( real . scale ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . scale ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

149
Tree	if ( real == NUMBER_CONSTANT && imaginary () == null ) { return ZERO ; }
Code	if ( real == NUMBER_CONSTANT && imaginary () == null ) { return ZERO ; }
Distance : 3

150
Tree	if ( real == NUMBER_CONSTANT && imaginary == q () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == q () ) { return NaN ; }
Distance : 3

151
Tree	if ( real == NUMBER_CONSTANT && real <= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real <= imaginary ) { return NaN ; }
Distance : 4

152
Tree	if ( real . isNaN ( real ) imaginary scale == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . isNaN ( real ) imaginary scale == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

153
Tree	if ( real == NUMBER_CONSTANT && imaginary >= imaginary ) { return ZERO ; }
Code	if ( real == NUMBER_CONSTANT && imaginary >= imaginary ) { return ZERO ; }
Distance : 3

154
Tree	if ( real == NUMBER_CONSTANT && imaginary < NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < NaN ) { return NaN ; }
Distance : 3

155
Tree	if ( real == NUMBER_CONSTANT && FastMath == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && FastMath == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

156
Tree	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

157
Tree	if ( real == NUMBER_CONSTANT && imaginary != imaginary ) { return ZERO ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != imaginary ) { return ZERO ; }
Distance : 3

158
Tree	if ( real == NUMBER_CONSTANT && FastMath < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && FastMath < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

159
Tree	if ( real . isInfinite ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . isInfinite ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

160
Tree	if ( real . isNaN ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . isNaN ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

161
Tree	if ( real == NUMBER_CONSTANT && imaginary < ZERO ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < ZERO ) { return NaN ; }
Distance : 3

162
Tree	if ( real == NUMBER_CONSTANT && imaginary <= createComplex () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= createComplex () ) { return NaN ; }
Distance : 4

163
Tree	if ( real == NUMBER_CONSTANT && imaginary < q ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < q ) { return NaN ; }
Distance : 3

164
Tree	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 4

165
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + scale ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + scale ) { return NaN ; }
Distance : 5

166
Tree	if ( real . reciprocal ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . reciprocal ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

167
Tree	if ( real == NUMBER_CONSTANT && ZERO == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && ZERO == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

168
Tree	if ( real == NUMBER_CONSTANT && imaginary && real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary && real ) { return NaN ; }
Distance : 3

169
Tree	if ( real == NUMBER_CONSTANT && imaginary < real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < real ) { return NaN ; }
Distance : 3

170
Tree	if ( real == NUMBER_CONSTANT && scale != imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && scale != imaginary ) { return NaN ; }
Distance : 4

171
Tree	if ( real . isNaN ( imaginary ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . isNaN ( imaginary ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

172
Tree	if ( real == NUMBER_CONSTANT && abs == CHAR_CONS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && abs == CHAR_CONS ) { return NaN ; }
Distance : 3

173
Tree	if ( real == NUMBER_CONSTANT && imaginary && abs ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary && abs ) { return NaN ; }
Distance : 3

174
Tree	if ( real . createComplex ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . createComplex ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

175
Tree	if ( real == NUMBER_CONSTANT && imaginary < isNaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < isNaN ) { return NaN ; }
Distance : 3

176
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + FastMath ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + FastMath ) { return NaN ; }
Distance : 5

177
Tree	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return ZERO ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return ZERO ; }
Distance : 3

178
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + real ) { return NaN ; }
Distance : 5

179
Tree	if ( real == NUMBER_CONSTANT && ZERO == CHAR_CONS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && ZERO == CHAR_CONS ) { return NaN ; }
Distance : 3

180
Tree	if ( real == NUMBER_CONSTANT && imaginary == FastMath == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == FastMath == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

181
Tree	if ( real == NUMBER_CONSTANT && imaginary != real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != real ) { return NaN ; }
Distance : 3

182
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Distance : 3

183
Tree	if ( real . abs ( real ) imaginary scale == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . abs ( real ) imaginary scale == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

184
Tree	if ( real == NUMBER_CONSTANT && imaginary <= NUMBER_CONSTANT () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= NUMBER_CONSTANT () ) { return NaN ; }
Distance : 3

185
Tree	if ( real == NUMBER_CONSTANT && imaginary <= NaN () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= NaN () ) { return NaN ; }
Distance : 4

186
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Distance : 4

187
Tree	if ( real == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Distance : 3

188
Tree	if ( real == NUMBER_CONSTANT && imaginary <= real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= real ) { return NaN ; }
Distance : 3

189
Tree	if ( real == NUMBER_CONSTANT && this == imaginary ) { return ZERO ; }
Code	if ( real == NUMBER_CONSTANT && this == imaginary ) { return ZERO ; }
Distance : 3

190
Tree	if ( real == NUMBER_CONSTANT && real == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

191
Tree	if ( real == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Distance : 3

192
Tree	if ( real == NUMBER_CONSTANT && imaginary >= FastMath ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary >= FastMath ) { return NaN ; }
Distance : 3

193
Tree	if ( real == NUMBER_CONSTANT && FastMath < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && FastMath < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 6

194
Tree	if ( real == NUMBER_CONSTANT && imaginary <= isInfinite () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= isInfinite () ) { return NaN ; }
Distance : 4

195
Tree	if ( real == NUMBER_CONSTANT && imaginary == real () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == real () ) { return NaN ; }
Distance : 3

196
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return ZERO ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return ZERO ; }
Distance : 5

197
Tree	if ( real . imaginary ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . imaginary ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

198
Tree	if ( real == NUMBER_CONSTANT && q == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && q == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

199
Tree	if ( real == NUMBER_CONSTANT && imaginary < abs ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < abs ) { return NaN ; }
Distance : 3

========================================================================


========================================================================
Example Number: 79
Parent Code is: 
new Reporter () . smartNullPointerException ( location ) ;
-------------------------------------------------------------------------------
Child code is: 
new Reporter () . smartNullPointerException ( obj , location ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (32 (14 (304{val=new}) (43 (801{val=Reporter})) (216{val=()})) (235{val=.}) (802{val=smartNullPointerException}) (214{val=(}) (800{val=location}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (14 (304{val=new}) (43 (801{val=Reporter})) (216{val=()})) (235{val=.}) (802{val=smartNullPointerException}) (214{val=(}) (800{val=obj}) (234{val=,}) (800{val=location}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/30/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsSmartNulls.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	new Reporter () . formatMethodCall ( location ) ;
Code	new Reporter () . formatMethodCall ( location ) ;
Distance : 3

1
Tree	new Reporter () . method ( location ) ;
Code	new Reporter () . method ( location ) ;
Distance : 3

2
Tree	Reporter . Reporter ( location , new Reporter () ) ;
Code	Reporter . Reporter ( location , new Reporter () ) ;
Distance : 7

3
Tree	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( location ) ;
Code	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( location ) ;
Distance : 5

4
Tree	new Reporter () . Throwable ( location ) ;
Code	new Reporter () . Throwable ( location ) ;
Distance : 3

5
Tree	new MethodProxy () . smartNullPointerException ( location ) ;
Code	new MethodProxy () . smartNullPointerException ( location ) ;
Distance : 3

6
Tree	Reporter . Reporter ( location ) ;
Code	Reporter . Reporter ( location ) ;
Distance : 5

7
Tree	new Throwable () . smartNullPointerException ( location ) ;
Code	new Throwable () . smartNullPointerException ( location ) ;
Distance : 3

8
Tree	Reporter . Reporter ( location , new Reporter ( location ) ) ;
Code	Reporter . Reporter ( location , new Reporter ( location ) ) ;
Distance : 8

9
Tree	new MethodProxy () . smartNullPointerException ( location , Reporter ) ;
Code	new MethodProxy () . smartNullPointerException ( location , Reporter ) ;
Distance : 3

10
Tree	smartNullPointerException ( location , Reporter ) ;
Code	smartNullPointerException ( location , Reporter ) ;
Distance : 6

11
Tree	new Reporter () . smartNullPointerException ( location ) ;
Code	new Reporter () . smartNullPointerException ( location ) ;
Distance : 2

12
Tree	Reporter ( location ) ;
Code	Reporter ( location ) ;
Distance : 6

13
Tree	Reporter ( location ) . MethodProxy ( location ) ;
Code	Reporter ( location ) . MethodProxy ( location ) ;
Distance : 7

14
Tree	intercept . Reporter ( location ) ;
Code	intercept . Reporter ( location ) ;
Distance : 6

15
Tree	isToString . Reporter ( location ) ;
Code	isToString . Reporter ( location ) ;
Distance : 6

16
Tree	Reporter . smartNullPointerException ( location ) ;
Code	Reporter . smartNullPointerException ( location ) ;
Distance : 4

17
Tree	Reporter ( location , ObjectMethodsGuru ) ;
Code	Reporter ( location , ObjectMethodsGuru ) ;
Distance : 6

18
Tree	Reporter . Reporter ( false ) ;
Code	Reporter . Reporter ( false ) ;
Distance : 6

19
Tree	Reporter . Reporter () ;
Code	Reporter . Reporter () ;
Distance : 8

20
Tree	MethodProxy ( location , Reporter , Reporter ) ;
Code	MethodProxy ( location , Reporter , Reporter ) ;
Distance : 8

21
Tree	new Reporter () . smartNullPointerException ( location , Reporter ) ;
Code	new Reporter () . smartNullPointerException ( location , Reporter ) ;
Distance : 2

22
Tree	smartNullPointerException . Reporter ( location ) ;
Code	smartNullPointerException . Reporter ( location ) ;
Distance : 6

23
Tree	isToString . Reporter ( location , new Reporter ( location ) ) ;
Code	isToString . Reporter ( location , new Reporter ( location ) ) ;
Distance : 9

24
Tree	new ObjectMethodsGuru () . smartNullPointerException ( location . Reporter () , location ) ;
Code	new ObjectMethodsGuru () . smartNullPointerException ( location . Reporter () , location ) ;
Distance : 5

25
Tree	new Reporter () . smartNullPointerException ( location , method ) ;
Code	new Reporter () . smartNullPointerException ( location , method ) ;
Distance : 2

26
Tree	new Throwable () . smartNullPointerException ( location , Reporter ) ;
Code	new Throwable () . smartNullPointerException ( location , Reporter ) ;
Distance : 3

27
Tree	Reporter . smartNullPointerException ( location , new Reporter ( location ) ) ;
Code	Reporter . smartNullPointerException ( location , new Reporter ( location ) ) ;
Distance : 7

28
Tree	Reporter ( location , Reporter , Reporter ) ;
Code	Reporter ( location , Reporter , Reporter ) ;
Distance : 7

29
Tree	method ( location , Reporter , Reporter ) ;
Code	method ( location , Reporter , Reporter ) ;
Distance : 8

30
Tree	formatMethodCall ( location , Reporter ) ;
Code	formatMethodCall ( location , Reporter ) ;
Distance : 7

31
Tree	intercept . Reporter ( false ) ;
Code	intercept . Reporter ( false ) ;
Distance : 7

32
Tree	Reporter ( location , Reporter ) ;
Code	Reporter ( location , Reporter ) ;
Distance : 6

33
Tree	Reporter ( location , method ) ;
Code	Reporter ( location , method ) ;
Distance : 6

34
Tree	smartNullPointerException . Reporter ( false ) ;
Code	smartNullPointerException . Reporter ( false ) ;
Distance : 7

35
Tree	new ObjectMethodsGuru ( location ) . smartNullPointerException ( location ) ;
Code	new ObjectMethodsGuru ( location ) . smartNullPointerException ( location ) ;
Distance : 6

36
Tree	new ObjectMethodsGuru () . smartNullPointerException ( location , Reporter ) ;
Code	new ObjectMethodsGuru () . smartNullPointerException ( location , Reporter ) ;
Distance : 3

37
Tree	Reporter . formatMethodCall ( location , new Reporter ( location ) ) ;
Code	Reporter . formatMethodCall ( location , new Reporter ( location ) ) ;
Distance : 8

38
Tree	method . Reporter ( location , new Reporter ( location ) ) ;
Code	method . Reporter ( location , new Reporter ( location ) ) ;
Distance : 9

39
Tree	isToString ( location ) ;
Code	isToString ( location ) ;
Distance : 7

40
Tree	new Reporter () . formatMethodCall ( location , Reporter ) ;
Code	new Reporter () . formatMethodCall ( location , Reporter ) ;
Distance : 3

41
Tree	new ObjectMethodsGuru () . smartNullPointerException ( location ) ;
Code	new ObjectMethodsGuru () . smartNullPointerException ( location ) ;
Distance : 3

42
Tree	new Reporter () . intercept ( location ) ;
Code	new Reporter () . intercept ( location ) ;
Distance : 3

43
Tree	new Reporter () . isToString ( location ) ;
Code	new Reporter () . isToString ( location ) ;
Distance : 3

44
Tree	proxy . Reporter ( location , new Reporter ( location ) ) ;
Code	proxy . Reporter ( location , new Reporter ( location ) ) ;
Distance : 9

45
Tree	Reporter . Reporter ( location , false ) ;
Code	Reporter . Reporter ( location , false ) ;
Distance : 5

46
Tree	Reporter . smartNullPointerException () ;
Code	Reporter . smartNullPointerException () ;
Distance : 7

47
Tree	intercept . Reporter () ;
Code	intercept . Reporter () ;
Distance : 9

48
Tree	formatMethodCall . Reporter ( location , new Reporter () ) ;
Code	formatMethodCall . Reporter ( location , new Reporter () ) ;
Distance : 8

49
Tree	Reporter . Reporter ( location , Reporter , new Reporter () ) ;
Code	Reporter . Reporter ( location , Reporter , new Reporter () ) ;
Distance : 9

50
Tree	Reporter ( location ) . Throwable ( location ) ;
Code	Reporter ( location ) . Throwable ( location ) ;
Distance : 7

51
Tree	new Reporter ( location ) . Method ( location ) ;
Code	new Reporter ( location ) . Method ( location ) ;
Distance : 6

52
Tree	formatMethodCall . Reporter ( location ) ;
Code	formatMethodCall . Reporter ( location ) ;
Distance : 6

53
Tree	method . Reporter ( location , Reporter ) ;
Code	method . Reporter ( location , Reporter ) ;
Distance : 6

54
Tree	Reporter . method ( false ) ;
Code	Reporter . method ( false ) ;
Distance : 6

55
Tree	smartNullPointerException . Reporter () ;
Code	smartNullPointerException . Reporter () ;
Distance : 9

56
Tree	formatMethodCall . Reporter ( location , Reporter ) ;
Code	formatMethodCall . Reporter ( location , Reporter ) ;
Distance : 6

57
Tree	proxy . Reporter ( false ) ;
Code	proxy . Reporter ( false ) ;
Distance : 7

58
Tree	Reporter ( location , Throwable ) ;
Code	Reporter ( location , Throwable ) ;
Distance : 6

59
Tree	Reporter . smartNullPointerException () . smartNullPointerException ( location ) ;
Code	Reporter . smartNullPointerException () . smartNullPointerException ( location ) ;
Distance : 5

60
Tree	Reporter . Reporter ( location , Reporter ) ;
Code	Reporter . Reporter ( location , Reporter ) ;
Distance : 5

61
Tree	new Reporter () . smartNullPointerException ( location ) . method ( location ) ;
Code	new Reporter () . smartNullPointerException ( location ) . method ( location ) ;
Distance : 5

62
Tree	new Reporter ( location ) . method ( location ) ;
Code	new Reporter ( location ) . method ( location ) ;
Distance : 6

63
Tree	Reporter ( location , Reporter , method ) ;
Code	Reporter ( location , Reporter , method ) ;
Distance : 7

64
Tree	Throwable ( location ) ;
Code	Throwable ( location ) ;
Distance : 7

65
Tree	new Reporter ( location ) . MethodProxy ( location ) ;
Code	new Reporter ( location ) . MethodProxy ( location ) ;
Distance : 6

66
Tree	formatMethodCall ( location ) . smartNullPointerException ( location ) ;
Code	formatMethodCall ( location ) . smartNullPointerException ( location ) ;
Distance : 6

67
Tree	new Reporter ( location ) . intercept ( location ) ;
Code	new Reporter ( location ) . intercept ( location ) ;
Distance : 6

68
Tree	new Reporter () . method ( location , Reporter ) ;
Code	new Reporter () . method ( location , Reporter ) ;
Distance : 3

69
Tree	method . Reporter () . smartNullPointerException ( location ) ;
Code	method . Reporter () . smartNullPointerException ( location ) ;
Distance : 4

70
Tree	formatMethodCall . Reporter ( location , false ) ;
Code	formatMethodCall . Reporter ( location , false ) ;
Distance : 6

71
Tree	Reporter . method ( location ) ;
Code	Reporter . method ( location ) ;
Distance : 5

72
Tree	Reporter ( location ) . method ( location ) ;
Code	Reporter ( location ) . method ( location ) ;
Distance : 7

73
Tree	Reporter . smartNullPointerException ( location , Reporter ) ;
Code	Reporter . smartNullPointerException ( location , Reporter ) ;
Distance : 4

74
Tree	new Reporter () . smartNullPointerException ( location . method () , location ) ;
Code	new Reporter () . smartNullPointerException ( location . method () , location ) ;
Distance : 4

75
Tree	Reporter . formatMethodCall ( location , new Reporter () ) ;
Code	Reporter . formatMethodCall ( location , new Reporter () ) ;
Distance : 7

76
Tree	formatMethodCall ( location , Reporter , Reporter ) ;
Code	formatMethodCall ( location , Reporter , Reporter ) ;
Distance : 8

77
Tree	method . Reporter ( location , false ) ;
Code	method . Reporter ( location , false ) ;
Distance : 6

78
Tree	ObjectMethodsGuru ( location , Reporter ) ;
Code	ObjectMethodsGuru ( location , Reporter ) ;
Distance : 7

79
Tree	method . Reporter ( location , new Reporter () ) ;
Code	method . Reporter ( location , new Reporter () ) ;
Distance : 8

80
Tree	formatMethodCall ( location ) ;
Code	formatMethodCall ( location ) ;
Distance : 7

81
Tree	new Reporter () . smartNullPointerException ( location ) . formatMethodCall ( location ) ;
Code	new Reporter () . smartNullPointerException ( location ) . formatMethodCall ( location ) ;
Distance : 5

82
Tree	intercept . Reporter ( location , Reporter , new Reporter () ) ;
Code	intercept . Reporter ( location , Reporter , new Reporter () ) ;
Distance : 10

83
Tree	isToString . Reporter ( location , new Reporter () ) ;
Code	isToString . Reporter ( location , new Reporter () ) ;
Distance : 8

84
Tree	new Reporter ( location ) . smartNullPointerException ( location ) ;
Code	new Reporter ( location ) . smartNullPointerException ( location ) ;
Distance : 5

85
Tree	Reporter . formatMethodCall () ;
Code	Reporter . formatMethodCall () ;
Distance : 8

86
Tree	smartNullPointerException ( location ) . smartNullPointerException ( location ) ;
Code	smartNullPointerException ( location ) . smartNullPointerException ( location ) ;
Distance : 6

87
Tree	Reporter . formatMethodCall () . smartNullPointerException ( location ) ;
Code	Reporter . formatMethodCall () . smartNullPointerException ( location ) ;
Distance : 5

88
Tree	MethodProxy ( location , Reporter ) ;
Code	MethodProxy ( location , Reporter ) ;
Distance : 7

89
Tree	Reporter ( location ) . smartNullPointerException ( location ) ;
Code	Reporter ( location ) . smartNullPointerException ( location ) ;
Distance : 6

90
Tree	proxy . Reporter () . smartNullPointerException ( location ) ;
Code	proxy . Reporter () . smartNullPointerException ( location ) ;
Distance : 4

91
Tree	isToString . Reporter ( location , Reporter , new Reporter () ) ;
Code	isToString . Reporter ( location , Reporter , new Reporter () ) ;
Distance : 10

92
Tree	smartNullPointerException . Reporter ( location , Reporter , new Reporter () ) ;
Code	smartNullPointerException . Reporter ( location , Reporter , new Reporter () ) ;
Distance : 10

93
Tree	Reporter . Reporter () . smartNullPointerException ( location ) ;
Code	Reporter . Reporter () . smartNullPointerException ( location ) ;
Distance : 4

94
Tree	Reporter . method ( location , new Reporter ( location ) ) ;
Code	Reporter . method ( location , new Reporter ( location ) ) ;
Distance : 8

95
Tree	Reporter ( location , Reporter , ObjectMethodsGuru ) ;
Code	Reporter ( location , Reporter , ObjectMethodsGuru ) ;
Distance : 7

96
Tree	Reporter . Reporter ( location , Reporter , new MethodProxy () ) ;
Code	Reporter . Reporter ( location , Reporter , new MethodProxy () ) ;
Distance : 9

97
Tree	intercept ( location ) ;
Code	intercept ( location ) ;
Distance : 7

98
Tree	Method ( location ) ;
Code	Method ( location ) ;
Distance : 7

99
Tree	intercept . Reporter ( location , false ) ;
Code	intercept . Reporter ( location , false ) ;
Distance : 6

100
Tree	method ( location , Reporter ) ;
Code	method ( location , Reporter ) ;
Distance : 7

101
Tree	Reporter . smartNullPointerException ( location , Reporter , new Reporter () ) ;
Code	Reporter . smartNullPointerException ( location , Reporter , new Reporter () ) ;
Distance : 8

102
Tree	isToString . Reporter ( location , false ) ;
Code	isToString . Reporter ( location , false ) ;
Distance : 6

103
Tree	Reporter . method () ;
Code	Reporter . method () ;
Distance : 8

104
Tree	Reporter . formatMethodCall ( location , false ) ;
Code	Reporter . formatMethodCall ( location , false ) ;
Distance : 5

105
Tree	proxy . Reporter ( location , false ) ;
Code	proxy . Reporter ( location , false ) ;
Distance : 6

106
Tree	proxy . Reporter () ;
Code	proxy . Reporter () ;
Distance : 9

107
Tree	formatMethodCall . Reporter ( location , Reporter , new Reporter () ) ;
Code	formatMethodCall . Reporter ( location , Reporter , new Reporter () ) ;
Distance : 10

108
Tree	intercept . Reporter () . smartNullPointerException ( location ) ;
Code	intercept . Reporter () . smartNullPointerException ( location ) ;
Distance : 4

109
Tree	smartNullPointerException . Reporter () . smartNullPointerException ( location ) ;
Code	smartNullPointerException . Reporter () . smartNullPointerException ( location ) ;
Distance : 4

110
Tree	new Reporter () . formatMethodCall ( location . Reporter () , location ) ;
Code	new Reporter () . formatMethodCall ( location . Reporter () , location ) ;
Distance : 5

111
Tree	Reporter . Reporter () . smartNullPointerException ( location , Reporter ) ;
Code	Reporter . Reporter () . smartNullPointerException ( location , Reporter ) ;
Distance : 4

112
Tree	new ObjectMethodsGuru () . smartNullPointerException ( location ) . smartNullPointerException ( location ) ;
Code	new ObjectMethodsGuru () . smartNullPointerException ( location ) . smartNullPointerException ( location ) ;
Distance : 6

113
Tree	new Reporter ( location ) . formatMethodCall ( location ) ;
Code	new Reporter ( location ) . formatMethodCall ( location ) ;
Distance : 6

114
Tree	MethodProxy ( location ) . smartNullPointerException ( location ) ;
Code	MethodProxy ( location ) . smartNullPointerException ( location ) ;
Distance : 6

115
Tree	intercept . Reporter ( location , new Reporter () ) ;
Code	intercept . Reporter ( location , new Reporter () ) ;
Distance : 8

116
Tree	smartNullPointerException . Reporter ( location , false ) ;
Code	smartNullPointerException . Reporter ( location , false ) ;
Distance : 6

117
Tree	Reporter . method ( location , false ) ;
Code	Reporter . method ( location , false ) ;
Distance : 5

118
Tree	method . Reporter ( false ) ;
Code	method . Reporter ( false ) ;
Distance : 7

119
Tree	smartNullPointerException ( location ) ;
Code	smartNullPointerException ( location ) ;
Distance : 6

120
Tree	Reporter ( location , Reporter , Throwable ) ;
Code	Reporter ( location , Reporter , Throwable ) ;
Distance : 7

121
Tree	smartNullPointerException . Reporter ( location , Reporter ) ;
Code	smartNullPointerException . Reporter ( location , Reporter ) ;
Distance : 6

122
Tree	MethodProxy ( location ) ;
Code	MethodProxy ( location ) ;
Distance : 7

123
Tree	intercept . Reporter () . smartNullPointerException ( location , Reporter ) ;
Code	intercept . Reporter () . smartNullPointerException ( location , Reporter ) ;
Distance : 4

124
Tree	smartNullPointerException . Reporter () . smartNullPointerException ( location , Reporter ) ;
Code	smartNullPointerException . Reporter () . smartNullPointerException ( location , Reporter ) ;
Distance : 4

125
Tree	ObjectMethodsGuru ( location ) ;
Code	ObjectMethodsGuru ( location ) ;
Distance : 7

126
Tree	Reporter . method () . smartNullPointerException ( location , Reporter ) ;
Code	Reporter . method () . smartNullPointerException ( location , Reporter ) ;
Distance : 5

127
Tree	smartNullPointerException . Reporter ( location , new Reporter () ) ;
Code	smartNullPointerException . Reporter ( location , new Reporter () ) ;
Distance : 8

128
Tree	new Reporter () . method ( location . Reporter () , location ) ;
Code	new Reporter () . method ( location . Reporter () , location ) ;
Distance : 5

129
Tree	Reporter . method ( location , new Reporter () ) ;
Code	Reporter . method ( location , new Reporter () ) ;
Distance : 7

130
Tree	proxy . Reporter ( location , new Reporter () ) ;
Code	proxy . Reporter ( location , new Reporter () ) ;
Distance : 8

131
Tree	new Reporter () . smartNullPointerException ( location ) . Reporter ( location ) ;
Code	new Reporter () . smartNullPointerException ( location ) . Reporter ( location ) ;
Distance : 5

132
Tree	method . Reporter ( location , Reporter , new Reporter () ) ;
Code	method . Reporter ( location , Reporter , new Reporter () ) ;
Distance : 10

133
Tree	new Reporter () . smartNullPointerException ( location ) . isToString ( location ) ;
Code	new Reporter () . smartNullPointerException ( location ) . isToString ( location ) ;
Distance : 5

134
Tree	method . Reporter () . smartNullPointerException ( location , Reporter ) ;
Code	method . Reporter () . smartNullPointerException ( location , Reporter ) ;
Distance : 4

135
Tree	method . Reporter () ;
Code	method . Reporter () ;
Distance : 9

136
Tree	isToString . Reporter () . smartNullPointerException ( location , Reporter ) ;
Code	isToString . Reporter () . smartNullPointerException ( location , Reporter ) ;
Distance : 4

137
Tree	new Reporter () . smartNullPointerException ( location ) . Throwable ( location ) ;
Code	new Reporter () . smartNullPointerException ( location ) . Throwable ( location ) ;
Distance : 5

138
Tree	Reporter . smartNullPointerException () . smartNullPointerException ( location , Reporter ) ;
Code	Reporter . smartNullPointerException () . smartNullPointerException ( location , Reporter ) ;
Distance : 5

139
Tree	Reporter . Reporter ( location , Reporter , new Throwable () ) ;
Code	Reporter . Reporter ( location , Reporter , new Throwable () ) ;
Distance : 9

140
Tree	Reporter . formatMethodCall ( location , Reporter ) ;
Code	Reporter . formatMethodCall ( location , Reporter ) ;
Distance : 5

141
Tree	formatMethodCall . Reporter ( false ) ;
Code	formatMethodCall . Reporter ( false ) ;
Distance : 7

142
Tree	new Reporter () . Throwable ( location . Reporter () , location ) ;
Code	new Reporter () . Throwable ( location . Reporter () , location ) ;
Distance : 5

143
Tree	new Reporter ( location ) . Reporter ( location ) ;
Code	new Reporter ( location ) . Reporter ( location ) ;
Distance : 6

144
Tree	Reporter . method ( location , Reporter ) ;
Code	Reporter . method ( location , Reporter ) ;
Distance : 5

145
Tree	Reporter . method ( location , Reporter , new Reporter () ) ;
Code	Reporter . method ( location , Reporter , new Reporter () ) ;
Distance : 9

146
Tree	new Reporter () . smartNullPointerException ( location ) . MethodProxy ( location ) ;
Code	new Reporter () . smartNullPointerException ( location ) . MethodProxy ( location ) ;
Distance : 5

147
Tree	Reporter ( location ) . intercept ( location ) ;
Code	Reporter ( location ) . intercept ( location ) ;
Distance : 7

148
Tree	method . Reporter ( location ) ;
Code	method . Reporter ( location ) ;
Distance : 6

149
Tree	method ( location ) . smartNullPointerException ( location ) ;
Code	method ( location ) . smartNullPointerException ( location ) ;
Distance : 6

150
Tree	new Reporter ( location ) . Throwable ( location ) ;
Code	new Reporter ( location ) . Throwable ( location ) ;
Distance : 6

151
Tree	new Reporter ( location ) . isToString ( location ) ;
Code	new Reporter ( location ) . isToString ( location ) ;
Distance : 6

152
Tree	new Reporter () . smartNullPointerException ( location . formatMethodCall () , location ) ;
Code	new Reporter () . smartNullPointerException ( location . formatMethodCall () , location ) ;
Distance : 4

153
Tree	new Reporter () . MethodProxy ( location . Reporter () , location ) ;
Code	new Reporter () . MethodProxy ( location . Reporter () , location ) ;
Distance : 5

154
Tree	Reporter . Reporter ( location ) . smartNullPointerException ( location ) ;
Code	Reporter . Reporter ( location ) . smartNullPointerException ( location ) ;
Distance : 7

155
Tree	formatMethodCall . Reporter () . smartNullPointerException ( location ) ;
Code	formatMethodCall . Reporter () . smartNullPointerException ( location ) ;
Distance : 4

156
Tree	formatMethodCall . Reporter () . smartNullPointerException ( location , Reporter ) ;
Code	formatMethodCall . Reporter () . smartNullPointerException ( location , Reporter ) ;
Distance : 4

157
Tree	formatMethodCall . Reporter () ;
Code	formatMethodCall . Reporter () ;
Distance : 9

158
Tree	isToString . Reporter ( false ) ;
Code	isToString . Reporter ( false ) ;
Distance : 7

159
Tree	formatMethodCall . Reporter ( location , new Reporter ( location ) ) ;
Code	formatMethodCall . Reporter ( location , new Reporter ( location ) ) ;
Distance : 9

160
Tree	Reporter . formatMethodCall ( location ) ;
Code	Reporter . formatMethodCall ( location ) ;
Distance : 5

161
Tree	new Reporter () . intercept ( location , Reporter ) ;
Code	new Reporter () . intercept ( location , Reporter ) ;
Distance : 3

162
Tree	new Reporter () . smartNullPointerException ( location ) . Method ( location ) ;
Code	new Reporter () . smartNullPointerException ( location ) . Method ( location ) ;
Distance : 5

163
Tree	new MethodProxy () . smartNullPointerException ( location . Reporter () , location ) ;
Code	new MethodProxy () . smartNullPointerException ( location . Reporter () , location ) ;
Distance : 5

164
Tree	new Reporter () . MethodProxy ( location ) ;
Code	new Reporter () . MethodProxy ( location ) ;
Distance : 3

165
Tree	Reporter . method () . smartNullPointerException ( location ) ;
Code	Reporter . method () . smartNullPointerException ( location ) ;
Distance : 5

166
Tree	new Reporter () . smartNullPointerException ( location ) . intercept ( location ) ;
Code	new Reporter () . smartNullPointerException ( location ) . intercept ( location ) ;
Distance : 5

167
Tree	intercept . Reporter ( location , new Reporter ( location ) ) ;
Code	intercept . Reporter ( location , new Reporter ( location ) ) ;
Distance : 9

168
Tree	Reporter ( location , Reporter , Object ) ;
Code	Reporter ( location , Reporter , Object ) ;
Distance : 7

169
Tree	smartNullPointerException ( location , Reporter , Reporter ) ;
Code	smartNullPointerException ( location , Reporter , Reporter ) ;
Distance : 8

170
Tree	new Reporter () . smartNullPointerException ( location . Throwable () , location ) ;
Code	new Reporter () . smartNullPointerException ( location . Throwable () , location ) ;
Distance : 4

171
Tree	isToString . Reporter () . smartNullPointerException ( location ) ;
Code	isToString . Reporter () . smartNullPointerException ( location ) ;
Distance : 4

172
Tree	Reporter . smartNullPointerException ( false ) ;
Code	Reporter . smartNullPointerException ( false ) ;
Distance : 5

173
Tree	Reporter ( location ) . formatMethodCall ( location ) ;
Code	Reporter ( location ) . formatMethodCall ( location ) ;
Distance : 7

174
Tree	Reporter . smartNullPointerException ( location , false ) ;
Code	Reporter . smartNullPointerException ( location , false ) ;
Distance : 4

175
Tree	Reporter ( location , method , Reporter ) ;
Code	Reporter ( location , method , Reporter ) ;
Distance : 7

176
Tree	Reporter . formatMethodCall () . smartNullPointerException ( location , Reporter ) ;
Code	Reporter . formatMethodCall () . smartNullPointerException ( location , Reporter ) ;
Distance : 5

177
Tree	method . Reporter ( location ) . smartNullPointerException ( location ) ;
Code	method . Reporter ( location ) . smartNullPointerException ( location ) ;
Distance : 7

178
Tree	method ( location ) ;
Code	method ( location ) ;
Distance : 7

179
Tree	Reporter . smartNullPointerException ( location , new Reporter () ) ;
Code	Reporter . smartNullPointerException ( location , new Reporter () ) ;
Distance : 6

180
Tree	intercept . Reporter ( location , Reporter ) ;
Code	intercept . Reporter ( location , Reporter ) ;
Distance : 6

181
Tree	isToString . Reporter ( location , Reporter ) ;
Code	isToString . Reporter ( location , Reporter ) ;
Distance : 6

182
Tree	Reporter . Reporter ( location ) . method ( location ) ;
Code	Reporter . Reporter ( location ) . method ( location ) ;
Distance : 8

183
Tree	Reporter . formatMethodCall ( false ) ;
Code	Reporter . formatMethodCall ( false ) ;
Distance : 6

184
Tree	Reporter . Reporter ( location ) . Throwable ( location ) ;
Code	Reporter . Reporter ( location ) . Throwable ( location ) ;
Distance : 8

185
Tree	Reporter . Reporter ( location ) . MethodProxy ( location ) ;
Code	Reporter . Reporter ( location ) . MethodProxy ( location ) ;
Distance : 8

186
Tree	smartNullPointerException . Reporter ( location , new Reporter ( location ) ) ;
Code	smartNullPointerException . Reporter ( location , new Reporter ( location ) ) ;
Distance : 9

187
Tree	Reporter . Reporter () . smartNullPointerException ( location , method ) ;
Code	Reporter . Reporter () . smartNullPointerException ( location , method ) ;
Distance : 4

188
Tree	Reporter . Reporter ( location ) . formatMethodCall ( location ) ;
Code	Reporter . Reporter ( location ) . formatMethodCall ( location ) ;
Distance : 8

189
Tree	isToString . Reporter ( location ) . smartNullPointerException ( location ) ;
Code	isToString . Reporter ( location ) . smartNullPointerException ( location ) ;
Distance : 7

190
Tree	new Reporter () . smartNullPointerException ( location . Reporter () , location ) ;
Code	new Reporter () . smartNullPointerException ( location . Reporter () , location ) ;
Distance : 4

191
Tree	Reporter . smartNullPointerException ( location ) . smartNullPointerException ( location ) ;
Code	Reporter . smartNullPointerException ( location ) . smartNullPointerException ( location ) ;
Distance : 7

192
Tree	Throwable ( location , Reporter ) ;
Code	Throwable ( location , Reporter ) ;
Distance : 7

193
Tree	isToString . Reporter () ;
Code	isToString . Reporter () ;
Distance : 9

194
Tree	formatMethodCall . Reporter ( location ) . smartNullPointerException ( location ) ;
Code	formatMethodCall . Reporter ( location ) . smartNullPointerException ( location ) ;
Distance : 7

195
Tree	new Reporter () . Throwable ( location , Reporter ) ;
Code	new Reporter () . Throwable ( location , Reporter ) ;
Distance : 3

196
Tree	Reporter . Reporter ( location , method ) ;
Code	Reporter . Reporter ( location , method ) ;
Distance : 5

197
Tree	new Reporter () . MethodProxy ( location , Reporter ) ;
Code	new Reporter () . MethodProxy ( location , Reporter ) ;
Distance : 3

198
Tree	proxy . Reporter ( location ) ;
Code	proxy . Reporter ( location ) ;
Distance : 6

199
Tree	intercept . Reporter ( location ) . smartNullPointerException ( location ) ;
Code	intercept . Reporter ( location ) . smartNullPointerException ( location ) ;
Distance : 7

========================================================================


========================================================================
Example Number: 80
Parent Code is: 
return getMock ( invocation ) ;
-------------------------------------------------------------------------------
Child code is: 
return getMock ( invocation , returnTypeGenericMetadata ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=getMock}) (214{val=(}) (800{val=invocation}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=getMock}) (214{val=(}) (800{val=invocation}) (234{val=,}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/25/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsDeepStubs.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return returnValueFor . returnValueFor ( this , invocation ) ;
Code	return returnValueFor . returnValueFor ( this , invocation ) ;
Distance : 5

1
Tree	return getMock . returnTypeGenericMetadata ( this , invocation ) ;
Code	return getMock . returnTypeGenericMetadata ( this , invocation ) ;
Distance : 4

2
Tree	return STRING_CONSTANT + returnTypeGenericMetadata + STRING_CONSTANT + invocation ;
Code	return STRING_CONSTANT + returnTypeGenericMetadata + STRING_CONSTANT + invocation ;
Distance : 7

3
Tree	return STRING_CONSTANT + Class + STRING_CONSTANT + invocation ;
Code	return STRING_CONSTANT + Class + STRING_CONSTANT + invocation ;
Distance : 7

4
Tree	return returnTypeGenericMetadata + returnValueFor ( invocation ) ;
Code	return returnTypeGenericMetadata + returnValueFor ( invocation ) ;
Distance : 5

5
Tree	return returnValueFor + returnValueFor ( invocation ) ;
Code	return returnValueFor + returnValueFor ( invocation ) ;
Distance : 5

6
Tree	return NUMBER_CONSTANT / rawType ;
Code	return NUMBER_CONSTANT / rawType ;
Distance : 6

7
Tree	return getMethod ( invocation , invocation ) ;
Code	return getMethod ( invocation , invocation ) ;
Distance : 2

8
Tree	return getMock + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return getMock + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

9
Tree	return resolveGenericReturnType ;
Code	return resolveGenericReturnType ;
Distance : 6

10
Tree	return getMock != isTypeMockable ;
Code	return getMock != isTypeMockable ;
Distance : 5

11
Tree	return getMethod ;
Code	return getMethod ;
Distance : 6

12
Tree	return returnValueFor . getMock ( this , invocation ) ;
Code	return returnValueFor . getMock ( this , invocation ) ;
Distance : 4

13
Tree	return returnValueFor . returnValueFor () ;
Code	return returnValueFor . returnValueFor () ;
Distance : 6

14
Tree	return getMock + this . getMock . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return getMock + this . getMock . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

15
Tree	return getMock ( invocation ) ;
Code	return getMock ( invocation ) ;
Distance : 2

16
Tree	return Object + NUMBER_CONSTANT ;
Code	return Object + NUMBER_CONSTANT ;
Distance : 6

17
Tree	return getMock ( Object ) ;
Code	return getMock ( Object ) ;
Distance : 3

18
Tree	return returnValueFor ( invocation ) . returnTypeGenericMetadata () ;
Code	return returnValueFor ( invocation ) . returnTypeGenericMetadata () ;
Distance : 4

19
Tree	return returnTypeGenericMetadata . returnValueFor ( invocation ) ;
Code	return returnTypeGenericMetadata . returnValueFor ( invocation ) ;
Distance : 5

20
Tree	return getMock . returnTypeGenericMetadata () ;
Code	return getMock . returnTypeGenericMetadata () ;
Distance : 4

21
Tree	return STRING_CONSTANT + Object + STRING_CONSTANT + invocation ;
Code	return STRING_CONSTANT + Object + STRING_CONSTANT + invocation ;
Distance : 7

22
Tree	return getMock != returnValueFor ;
Code	return getMock != returnValueFor ;
Distance : 5

23
Tree	return getMock . getMock () ;
Code	return getMock . getMock () ;
Distance : 5

24
Tree	return returnValueFor . returnValueFor ( invocation ) ;
Code	return returnValueFor . returnValueFor ( invocation ) ;
Distance : 5

25
Tree	return Object ;
Code	return Object ;
Distance : 6

26
Tree	return this . getMock ;
Code	return this . getMock ;
Distance : 6

27
Tree	return getMock ( invocation ) . getMock () ;
Code	return getMock ( invocation ) . getMock () ;
Distance : 4

28
Tree	return returnTypeGenericMetadata != getMock ;
Code	return returnTypeGenericMetadata != getMock ;
Distance : 6

29
Tree	return returnTypeGenericMetadata ( invocation , invocation ) ;
Code	return returnTypeGenericMetadata ( invocation , invocation ) ;
Distance : 2

30
Tree	return getMock . isTypeMockable () ;
Code	return getMock . isTypeMockable () ;
Distance : 5

31
Tree	return getMock + returnValueFor . getMock ( invocation ) ;
Code	return getMock + returnValueFor . getMock ( invocation ) ;
Distance : 6

32
Tree	return getMethod + NUMBER_CONSTANT ;
Code	return getMethod + NUMBER_CONSTANT ;
Distance : 6

33
Tree	return getMock + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . returnValueFor () ) ;
Code	return getMock + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . returnValueFor () ) ;
Distance : 10

34
Tree	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Code	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Distance : 10

35
Tree	return getMethod ( invocation ) ;
Code	return getMethod ( invocation ) ;
Distance : 3

36
Tree	return this . returnValueFor ;
Code	return this . returnValueFor ;
Distance : 6

37
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ;
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ;
Distance : 4

38
Tree	return returnValueFor + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return returnValueFor + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

39
Tree	return getMock + this . returnTypeGenericMetadata . getMock ( getMock , invocation , invocation ) ;
Code	return getMock + this . returnTypeGenericMetadata . getMock ( getMock , invocation , invocation ) ;
Distance : 9

40
Tree	return getMock + getMock . returnValueFor ( invocation ) ;
Code	return getMock + getMock . returnValueFor ( invocation ) ;
Distance : 6

41
Tree	return GenericMetadataSupport ;
Code	return GenericMetadataSupport ;
Distance : 6

42
Tree	return getMock + this . getMock . getMock ( getMock , invocation , invocation ) ;
Code	return getMock + this . getMock . getMock ( getMock , invocation , invocation ) ;
Distance : 9

43
Tree	return getMock . returnTypeGenericMetadata ( invocation ) ;
Code	return getMock . returnTypeGenericMetadata ( invocation ) ;
Distance : 4

44
Tree	return getMock + this . returnValueFor . getMock ( getMock , invocation , invocation ) ;
Code	return getMock + this . returnValueFor . getMock ( getMock , invocation , invocation ) ;
Distance : 9

45
Tree	return getMock + this . returnTypeGenericMetadata . getMock ( returnValueFor , invocation , invocation ) ;
Code	return getMock + this . returnTypeGenericMetadata . getMock ( returnValueFor , invocation , invocation ) ;
Distance : 9

46
Tree	return this . returnTypeGenericMetadata ;
Code	return this . returnTypeGenericMetadata ;
Distance : 5

47
Tree	return getMock + this . getMock . getMock ( returnValueFor , invocation , invocation ) ;
Code	return getMock + this . getMock . getMock ( returnValueFor , invocation , invocation ) ;
Distance : 9

48
Tree	return GenericMetadataSupport ( invocation ) ;
Code	return GenericMetadataSupport ( invocation ) ;
Distance : 3

49
Tree	return returnTypeGenericMetadata . getMock ( invocation ) ;
Code	return returnTypeGenericMetadata . getMock ( invocation ) ;
Distance : 4

50
Tree	return getMock + this . returnTypeGenericMetadata . returnValueFor ( CHAR_CONS , CHAR_CONS ) ;
Code	return getMock + this . returnTypeGenericMetadata . returnValueFor ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

51
Tree	return getMock < < NUMBER_CONSTANT ;
Code	return getMock < < NUMBER_CONSTANT ;
Distance : 5

52
Tree	return returnValueFor . getMock ( invocation ) ;
Code	return returnValueFor . getMock ( invocation ) ;
Distance : 4

53
Tree	return getMock . returnValueFor ( this , invocation ) ;
Code	return getMock . returnValueFor ( this , invocation ) ;
Distance : 4

54
Tree	return getMock + this . invocation . getMock ( getMock , invocation , invocation ) ;
Code	return getMock + this . invocation . getMock ( getMock , invocation , invocation ) ;
Distance : 9

55
Tree	return returnTypeGenericMetadata + this . getMock . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return returnTypeGenericMetadata + this . getMock . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

56
Tree	return returnTypeGenericMetadata + getMock ( invocation ) ;
Code	return returnTypeGenericMetadata + getMock ( invocation ) ;
Distance : 4

57
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ;
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ;
Distance : 6

58
Tree	return getMock . getMock ( invocation ) ;
Code	return getMock . getMock ( invocation ) ;
Distance : 4

59
Tree	return getMock != returnTypeGenericMetadata ;
Code	return getMock != returnTypeGenericMetadata ;
Distance : 4

60
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( getMock , invocation , invocation ) ;
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( getMock , invocation , invocation ) ;
Distance : 9

61
Tree	return returnTypeGenericMetadata != returnTypeGenericMetadata ;
Code	return returnTypeGenericMetadata != returnTypeGenericMetadata ;
Distance : 5

62
Tree	return getMock ( invocation ) . returnTypeGenericMetadata () ;
Code	return getMock ( invocation ) . returnTypeGenericMetadata () ;
Distance : 3

63
Tree	return getMock ( invocation ) ;
Code	return getMock ( invocation ) ;
Distance : 2

64
Tree	return getMock + NUMBER_CONSTANT ;
Code	return getMock + NUMBER_CONSTANT ;
Distance : 5

65
Tree	return getMock . returnValueFor () ;
Code	return getMock . returnValueFor () ;
Distance : 5

66
Tree	return resolveGenericReturnType + NUMBER_CONSTANT ;
Code	return resolveGenericReturnType + NUMBER_CONSTANT ;
Distance : 6

67
Tree	return GenericMetadataSupport . getMock ( this , invocation ) ;
Code	return GenericMetadataSupport . getMock ( this , invocation ) ;
Distance : 4

68
Tree	return getMock . getMock ( this , invocation ) ;
Code	return getMock . getMock ( this , invocation ) ;
Distance : 4

69
Tree	return returnTypeGenericMetadata ( invocation ) ;
Code	return returnTypeGenericMetadata ( invocation ) ;
Distance : 3

70
Tree	return rawType < < NUMBER_CONSTANT ;
Code	return rawType < < NUMBER_CONSTANT ;
Distance : 6

71
Tree	return getMethod < < NUMBER_CONSTANT ;
Code	return getMethod < < NUMBER_CONSTANT ;
Distance : 6

72
Tree	return this . returnValueFor . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return this . returnValueFor . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 6

73
Tree	return getMock + this . returnValueFor . getMock ( returnValueFor , invocation , invocation ) ;
Code	return getMock + this . returnValueFor . getMock ( returnValueFor , invocation , invocation ) ;
Distance : 9

74
Tree	return STRING_CONSTANT + answer + STRING_CONSTANT + invocation ;
Code	return STRING_CONSTANT + answer + STRING_CONSTANT + invocation ;
Distance : 7

75
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + getMock ;
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + getMock ;
Distance : 6

76
Tree	return NUMBER_CONSTANT / returnTypeGenericMetadata ;
Code	return NUMBER_CONSTANT / returnTypeGenericMetadata ;
Distance : 5

77
Tree	return getMock ( invocation ) . returnValueFor () ;
Code	return getMock ( invocation ) . returnValueFor () ;
Distance : 4

78
Tree	return GenericMetadataSupport + getMock ( invocation ) ;
Code	return GenericMetadataSupport + getMock ( invocation ) ;
Distance : 4

79
Tree	return returnValueFor != getMock ;
Code	return returnValueFor != getMock ;
Distance : 6

80
Tree	return returnValueFor + this . getMock . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return returnValueFor + this . getMock . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

81
Tree	return this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 6

82
Tree	return isTypeMockable + NUMBER_CONSTANT ;
Code	return isTypeMockable + NUMBER_CONSTANT ;
Distance : 6

83
Tree	return isTypeMockable . getMock ( invocation ) ;
Code	return isTypeMockable . getMock ( invocation ) ;
Distance : 4

84
Tree	return returnTypeGenericMetadata + returnValueFor . getMock ( invocation ) ;
Code	return returnTypeGenericMetadata + returnValueFor . getMock ( invocation ) ;
Distance : 6

85
Tree	return this . rawType . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return this . rawType . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 6

86
Tree	return returnValueFor + this . returnTypeGenericMetadata . getMock ( getMock , invocation , invocation ) ;
Code	return returnValueFor + this . returnTypeGenericMetadata . getMock ( getMock , invocation , invocation ) ;
Distance : 9

87
Tree	return rawType + NUMBER_CONSTANT ;
Code	return rawType + NUMBER_CONSTANT ;
Distance : 6

88
Tree	return GenericMetadataSupport . getMock ( invocation ) ;
Code	return GenericMetadataSupport . getMock ( invocation ) ;
Distance : 4

89
Tree	return returnValueFor ( invocation ) . isTypeMockable () ;
Code	return returnValueFor ( invocation ) . isTypeMockable () ;
Distance : 5

90
Tree	return isTypeMockable + getMock ( invocation ) ;
Code	return isTypeMockable + getMock ( invocation ) ;
Distance : 4

91
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + Object ;
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + Object ;
Distance : 6

92
Tree	return returnTypeGenericMetadata . getMock () ;
Code	return returnTypeGenericMetadata . getMock () ;
Distance : 6

93
Tree	return returnValueFor ( invocation ) ;
Code	return returnValueFor ( invocation ) ;
Distance : 3

94
Tree	return GenericMetadataSupport . getMock () ;
Code	return GenericMetadataSupport . getMock () ;
Distance : 6

95
Tree	return getMock . returnValueFor ( invocation ) ;
Code	return getMock . returnValueFor ( invocation ) ;
Distance : 4

96
Tree	return getMock ( invocation ) . resolveGenericReturnType () ;
Code	return getMock ( invocation ) . resolveGenericReturnType () ;
Distance : 4

97
Tree	return rawType ( invocation , invocation ) ;
Code	return rawType ( invocation , invocation ) ;
Distance : 2

98
Tree	return getMock + returnValueFor ( invocation ) ;
Code	return getMock + returnValueFor ( invocation ) ;
Distance : 4

99
Tree	return this . getMethod ;
Code	return this . getMethod ;
Distance : 6

100
Tree	return this . rawType ;
Code	return this . rawType ;
Distance : 6

101
Tree	return getMock + this . returnTypeGenericMetadata . returnValueFor ( getMock , invocation , invocation ) ;
Code	return getMock + this . returnTypeGenericMetadata . returnValueFor ( getMock , invocation , invocation ) ;
Distance : 9

102
Tree	return returnTypeGenericMetadata + NUMBER_CONSTANT ;
Code	return returnTypeGenericMetadata + NUMBER_CONSTANT ;
Distance : 6

103
Tree	return returnTypeGenericMetadata != returnValueFor ;
Code	return returnTypeGenericMetadata != returnValueFor ;
Distance : 6

104
Tree	return returnTypeGenericMetadata ;
Code	return returnTypeGenericMetadata ;
Distance : 5

105
Tree	return returnValueFor ;
Code	return returnValueFor ;
Distance : 6

106
Tree	return getMock + getMock . getMock ( invocation ) ;
Code	return getMock + getMock . getMock ( invocation ) ;
Distance : 6

107
Tree	return returnValueFor ( invocation ) . returnValueFor () ;
Code	return returnValueFor ( invocation ) . returnValueFor () ;
Distance : 5

108
Tree	return getMock + returnTypeGenericMetadata ( invocation ) ;
Code	return getMock + returnTypeGenericMetadata ( invocation ) ;
Distance : 4

109
Tree	return isTypeMockable . getMock ( this , invocation ) ;
Code	return isTypeMockable . getMock ( this , invocation ) ;
Distance : 4

110
Tree	return returnTypeGenericMetadata . returnValueFor () ;
Code	return returnTypeGenericMetadata . returnValueFor () ;
Distance : 6

111
Tree	return NUMBER_CONSTANT / MockCreationValidator ;
Code	return NUMBER_CONSTANT / MockCreationValidator ;
Distance : 6

112
Tree	return invocation < < NUMBER_CONSTANT ;
Code	return invocation < < NUMBER_CONSTANT ;
Distance : 5

113
Tree	return returnValueFor + NUMBER_CONSTANT ;
Code	return returnValueFor + NUMBER_CONSTANT ;
Distance : 6

114
Tree	return this . isTypeMockable ;
Code	return this . isTypeMockable ;
Distance : 6

115
Tree	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . returnValueFor () ) ;
Code	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . returnValueFor () ) ;
Distance : 10

116
Tree	return getMock ( invocation , Object ) ;
Code	return getMock ( invocation , Object ) ;
Distance : 1

117
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + getMethod ;
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + getMethod ;
Distance : 6

118
Tree	return getMock + invocation . returnValueFor ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Code	return getMock + invocation . returnValueFor ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Distance : 10

119
Tree	return resolveGenericReturnType ( invocation , invocation ) ;
Code	return resolveGenericReturnType ( invocation , invocation ) ;
Distance : 2

120
Tree	return NUMBER_CONSTANT / getMethod ;
Code	return NUMBER_CONSTANT / getMethod ;
Distance : 6

121
Tree	return returnValueFor ( invocation , Object ) ;
Code	return returnValueFor ( invocation , Object ) ;
Distance : 2

122
Tree	return getMock + this . getMock . returnValueFor ( CHAR_CONS , CHAR_CONS ) ;
Code	return getMock + this . getMock . returnValueFor ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

123
Tree	return getMock ( invocation ) . isTypeMockable () ;
Code	return getMock ( invocation ) . isTypeMockable () ;
Distance : 4

124
Tree	return NUMBER_CONSTANT / getMock ;
Code	return NUMBER_CONSTANT / getMock ;
Distance : 6

125
Tree	return returnValueFor + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . returnValueFor () ) ;
Code	return returnValueFor + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . returnValueFor () ) ;
Distance : 10

126
Tree	return getMock . isTypeMockable ( invocation ) ;
Code	return getMock . isTypeMockable ( invocation ) ;
Distance : 4

127
Tree	return NUMBER_CONSTANT / resolveGenericReturnType ;
Code	return NUMBER_CONSTANT / resolveGenericReturnType ;
Distance : 6

128
Tree	return isTypeMockable ( invocation ) ;
Code	return isTypeMockable ( invocation ) ;
Distance : 3

129
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

130
Tree	return NUMBER_CONSTANT / GenericMetadataSupport ;
Code	return NUMBER_CONSTANT / GenericMetadataSupport ;
Distance : 6

131
Tree	return this . isTypeMockable . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return this . isTypeMockable . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 6

132
Tree	return invocation ;
Code	return invocation ;
Distance : 5

133
Tree	return returnValueFor + returnValueFor . getMock ( invocation ) ;
Code	return returnValueFor + returnValueFor . getMock ( invocation ) ;
Distance : 6

134
Tree	return isTypeMockable ;
Code	return isTypeMockable ;
Distance : 6

135
Tree	return rawType ;
Code	return rawType ;
Distance : 6

136
Tree	return GenericMetadataSupport ( invocation , invocation ) ;
Code	return GenericMetadataSupport ( invocation , invocation ) ;
Distance : 2

137
Tree	return returnValueFor ( invocation , invocation ) ;
Code	return returnValueFor ( invocation , invocation ) ;
Distance : 2

138
Tree	return getMock + returnValueFor . returnValueFor ( invocation ) ;
Code	return getMock + returnValueFor . returnValueFor ( invocation ) ;
Distance : 6

139
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + returnTypeGenericMetadata ;
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + returnTypeGenericMetadata ;
Distance : 6

140
Tree	return getMock != getMock ;
Code	return getMock != getMock ;
Distance : 5

141
Tree	return returnTypeGenericMetadata + getMock . returnValueFor ( invocation ) ;
Code	return returnTypeGenericMetadata + getMock . returnValueFor ( invocation ) ;
Distance : 6

142
Tree	return returnValueFor + getMock ( invocation ) ;
Code	return returnValueFor + getMock ( invocation ) ;
Distance : 4

143
Tree	return returnTypeGenericMetadata < < NUMBER_CONSTANT ;
Code	return returnTypeGenericMetadata < < NUMBER_CONSTANT ;
Distance : 6

144
Tree	return getMock + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Code	return getMock + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Distance : 10

145
Tree	return NUMBER_CONSTANT / Object ;
Code	return NUMBER_CONSTANT / Object ;
Distance : 6

146
Tree	return getMock + getMock ( invocation ) ;
Code	return getMock + getMock ( invocation ) ;
Distance : 4

147
Tree	return this . resolveGenericReturnType ;
Code	return this . resolveGenericReturnType ;
Distance : 6

148
Tree	return this . getMock . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return this . getMock . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 6

149
Tree	return GenericMetadataSupport + NUMBER_CONSTANT ;
Code	return GenericMetadataSupport + NUMBER_CONSTANT ;
Distance : 6

150
Tree	return getMock + this . returnValueFor . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return getMock + this . returnValueFor . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

151
Tree	return returnTypeGenericMetadata + getMock . getMock ( invocation ) ;
Code	return returnTypeGenericMetadata + getMock . getMock ( invocation ) ;
Distance : 6

152
Tree	return rawType ( invocation ) ;
Code	return rawType ( invocation ) ;
Distance : 3

153
Tree	return getMock + getMock ( InvocationOnMock , this . invocation ) ;
Code	return getMock + getMock ( InvocationOnMock , this . invocation ) ;
Distance : 6

154
Tree	return isTypeMockable . getMock () ;
Code	return isTypeMockable . getMock () ;
Distance : 6

155
Tree	return returnValueFor + getMock . getMock ( invocation ) ;
Code	return returnValueFor + getMock . getMock ( invocation ) ;
Distance : 6

156
Tree	return rawType + getMock ( invocation ) ;
Code	return rawType + getMock ( invocation ) ;
Distance : 4

157
Tree	return getMock + getMock ( getMock , this . invocation ) ;
Code	return getMock + getMock ( getMock , this . invocation ) ;
Distance : 6

158
Tree	return returnTypeGenericMetadata + getMock ( getMock , this . invocation ) ;
Code	return returnTypeGenericMetadata + getMock ( getMock , this . invocation ) ;
Distance : 6

159
Tree	return returnValueFor + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Code	return returnValueFor + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Distance : 10

160
Tree	return this . GenericMetadataSupport . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return this . GenericMetadataSupport . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 6

161
Tree	return this . Object ;
Code	return this . Object ;
Distance : 6

162
Tree	return resolveGenericReturnType < < NUMBER_CONSTANT ;
Code	return resolveGenericReturnType < < NUMBER_CONSTANT ;
Distance : 6

163
Tree	return getMock . isTypeMockable ( this , invocation ) ;
Code	return getMock . isTypeMockable ( this , invocation ) ;
Distance : 4

164
Tree	return Object < < NUMBER_CONSTANT ;
Code	return Object < < NUMBER_CONSTANT ;
Distance : 6

165
Tree	return this . returnValueFor . returnValueFor ( CHAR_CONS , CHAR_CONS ) ;
Code	return this . returnValueFor . returnValueFor ( CHAR_CONS , CHAR_CONS ) ;
Distance : 7

166
Tree	return getMock ( invocation , invocation ) ;
Code	return getMock ( invocation , invocation ) ;
Distance : 1

167
Tree	return returnValueFor ( invocation ) . getMock () ;
Code	return returnValueFor ( invocation ) . getMock () ;
Distance : 5

168
Tree	return returnValueFor != returnTypeGenericMetadata ;
Code	return returnValueFor != returnTypeGenericMetadata ;
Distance : 5

169
Tree	return NUMBER_CONSTANT / isTypeMockable ;
Code	return NUMBER_CONSTANT / isTypeMockable ;
Distance : 6

170
Tree	return isTypeMockable ( invocation , invocation ) ;
Code	return isTypeMockable ( invocation , invocation ) ;
Distance : 2

171
Tree	return returnValueFor < < NUMBER_CONSTANT ;
Code	return returnValueFor < < NUMBER_CONSTANT ;
Distance : 6

172
Tree	return getMock + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . returnTypeGenericMetadata () ) ;
Code	return getMock + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . returnTypeGenericMetadata () ) ;
Distance : 9

173
Tree	return getMock + returnTypeGenericMetadata . getMock ( invocation ) ;
Code	return getMock + returnTypeGenericMetadata . getMock ( invocation ) ;
Distance : 6

174
Tree	return getMock + getMock ( returnValueFor , this . invocation ) ;
Code	return getMock + getMock ( returnValueFor , this . invocation ) ;
Distance : 6

175
Tree	return returnTypeGenericMetadata + getMock ( returnValueFor , this . invocation ) ;
Code	return returnTypeGenericMetadata + getMock ( returnValueFor , this . invocation ) ;
Distance : 6

176
Tree	return returnValueFor + getMock ( getMock , this . invocation ) ;
Code	return returnValueFor + getMock ( getMock , this . invocation ) ;
Distance : 6

177
Tree	return returnTypeGenericMetadata ( invocation ) . getMock () ;
Code	return returnTypeGenericMetadata ( invocation ) . getMock () ;
Distance : 5

178
Tree	return this . getMock . returnValueFor ( CHAR_CONS , CHAR_CONS ) ;
Code	return this . getMock . returnValueFor ( CHAR_CONS , CHAR_CONS ) ;
Distance : 6

179
Tree	return returnTypeGenericMetadata + invocation . returnValueFor ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Code	return returnTypeGenericMetadata + invocation . returnValueFor ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Distance : 11

180
Tree	return GenericMetadataSupport < < NUMBER_CONSTANT ;
Code	return GenericMetadataSupport < < NUMBER_CONSTANT ;
Distance : 6

181
Tree	return returnValueFor + getMock ( returnValueFor , this . invocation ) ;
Code	return returnValueFor + getMock ( returnValueFor , this . invocation ) ;
Distance : 6

182
Tree	return resolveGenericReturnType ( invocation ) ;
Code	return resolveGenericReturnType ( invocation ) ;
Distance : 3

183
Tree	return NUMBER_CONSTANT / returnValueFor ;
Code	return NUMBER_CONSTANT / returnValueFor ;
Distance : 6

184
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + answer ;
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + answer ;
Distance : 6

185
Tree	return invocation + NUMBER_CONSTANT ;
Code	return invocation + NUMBER_CONSTANT ;
Distance : 5

186
Tree	return returnValueFor != returnValueFor ;
Code	return returnValueFor != returnValueFor ;
Distance : 6

187
Tree	return this . returnTypeGenericMetadata . returnValueFor ( CHAR_CONS , CHAR_CONS ) ;
Code	return this . returnTypeGenericMetadata . returnValueFor ( CHAR_CONS , CHAR_CONS ) ;
Distance : 7

188
Tree	return getMock + invocation . returnValueFor ( invocation , NUMBER_CONSTANT , invocation . returnValueFor () ) ;
Code	return getMock + invocation . returnValueFor ( invocation , NUMBER_CONSTANT , invocation . returnValueFor () ) ;
Distance : 10

189
Tree	return returnValueFor . getMock () ;
Code	return returnValueFor . getMock () ;
Distance : 6

190
Tree	return isTypeMockable < < NUMBER_CONSTANT ;
Code	return isTypeMockable < < NUMBER_CONSTANT ;
Distance : 6

191
Tree	return returnTypeGenericMetadata . returnValueFor ( this , invocation ) ;
Code	return returnTypeGenericMetadata . returnValueFor ( this , invocation ) ;
Distance : 5

192
Tree	return getMock ;
Code	return getMock ;
Distance : 5

193
Tree	return this . GenericMetadataSupport ;
Code	return this . GenericMetadataSupport ;
Distance : 6

194
Tree	return this . rawType . returnValueFor ( CHAR_CONS , CHAR_CONS ) ;
Code	return this . rawType . returnValueFor ( CHAR_CONS , CHAR_CONS ) ;
Distance : 7

195
Tree	return getMock + returnValueFor ( getMock , this . invocation ) ;
Code	return getMock + returnValueFor ( getMock , this . invocation ) ;
Distance : 6

196
Tree	return this . invocation ;
Code	return this . invocation ;
Distance : 5

197
Tree	return getMock + getMock ( returnTypeGenericMetadata , this . invocation ) ;
Code	return getMock + getMock ( returnTypeGenericMetadata , this . invocation ) ;
Distance : 6

198
Tree	return getMock + getMock ( MockCreationValidator , this . invocation ) ;
Code	return getMock + getMock ( MockCreationValidator , this . invocation ) ;
Distance : 6

199
Tree	return getMock + this . invocation . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return getMock + this . invocation . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

========================================================================


========================================================================
Example Number: 81
Parent Code is: 
return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
-------------------------------------------------------------------------------
Child code is: 
return mockSettings . serializable () . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=mockSettings}) (235{val=.}) (802{val=defaultAnswer}) (214{val=(}) (32 (802{val=returnsDeepStubsAnswerUsing}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (32 (800{val=mockSettings}) (235{val=.}) (802{val=serializable}) (216{val=()})) (235{val=.}) (802{val=defaultAnswer}) (214{val=(}) (32 (802{val=returnsDeepStubsAnswerUsing}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/23/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsDeepStubs.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return withSettings ( null , withSettings ( returnTypeGenericMetadata ) ) ;
Code	return withSettings ( null , withSettings ( returnTypeGenericMetadata ) ) ;
Distance : 8

1
Tree	return withSettings ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return withSettings ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 7

2
Tree	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) && extends ;
Code	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) && extends ;
Distance : 6

3
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && &= ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && &= ;
Distance : 5

4
Tree	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) && anyList ;
Code	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) && anyList ;
Distance : 6

5
Tree	return mockSettings . defaultAnswer ( withSettingsUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( withSettingsUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 6

6
Tree	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) && <= ;
Code	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) && <= ;
Distance : 6

7
Tree	return mockSettings . defaultAnswer ( GenericMetadataSupport ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( GenericMetadataSupport ( returnTypeGenericMetadata ) ) ;
Distance : 4

8
Tree	return defaultAnswer ( null , withSettings ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( null , withSettings ( returnTypeGenericMetadata ) ) ;
Distance : 8

9
Tree	return defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 6

10
Tree	return mockSettings . defaultAnswer ( mockSettings ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( mockSettings ( returnTypeGenericMetadata ) ) ;
Distance : 4

11
Tree	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && extends ;
Code	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && extends ;
Distance : 8

12
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && classToMock ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && classToMock ;
Distance : 8

13
Tree	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 4

14
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && extends ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && extends ;
Distance : 5

15
Tree	return mockSettings . defaultAnswer ( MockSettings ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( MockSettings ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 6

16
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

17
Tree	return withSettings ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return withSettings ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

18
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && extends ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && extends ;
Distance : 8

19
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && <= ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && <= ;
Distance : 8

20
Tree	return ! mockSettings . defaultAnswer ( returnTypeGenericMetadata ( returnTypeGenericMetadata ) ) ;
Code	return ! mockSettings . defaultAnswer ( returnTypeGenericMetadata ( returnTypeGenericMetadata ) ) ;
Distance : 5

21
Tree	return withSettings ( null , returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return withSettings ( null , returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 7

22
Tree	return defaultAnswer ( null , returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( null , returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 7

23
Tree	return defaultAnswer ( withSettingsUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( withSettingsUsing ( returnTypeGenericMetadata ) ) ;
Distance : 6

24
Tree	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 5

25
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ) . defaultAnswer () ;
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ) . defaultAnswer () ;
Distance : 9

26
Tree	return defaultAnswer ( withSettings ) . defaultAnswer () ;
Code	return defaultAnswer ( withSettings ) . defaultAnswer () ;
Distance : 10

27
Tree	return withSettings ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return withSettings ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 8

28
Tree	return withSettings ( returnsDeepStubsAnswerUsing ) . defaultAnswer () ;
Code	return withSettings ( returnsDeepStubsAnswerUsing ) . defaultAnswer () ;
Distance : 10

29
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && getString ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && getString ;
Distance : 7

30
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ( returnTypeGenericMetadata ) ) ;
Distance : 4

31
Tree	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && getString ;
Code	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && getString ;
Distance : 8

32
Tree	return mockSettings . withSettings ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . withSettings ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 6

33
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ) ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ) ;
Distance : 6

34
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && withSettings ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && withSettings ( returnTypeGenericMetadata ) ;
Distance : 7

35
Tree	return defaultAnswer ( null , withSettingsUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( null , withSettingsUsing ( returnTypeGenericMetadata ) ) ;
Distance : 8

36
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 6

37
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && getString ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && getString ;
Distance : 8

38
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Distance : 5

39
Tree	return mockSettings . defaultAnswer ( mockSettings ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( mockSettings ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 6

40
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && withSettings ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && withSettings ( returnTypeGenericMetadata ) ;
Distance : 9

41
Tree	return mockSettings . defaultAnswer ( defaultAnswer ) ;
Code	return mockSettings . defaultAnswer ( defaultAnswer ) ;
Distance : 7

42
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && anyList ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && anyList ;
Distance : 5

43
Tree	return defaultAnswer ( returnTypeGenericMetadata ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 8

44
Tree	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) < extraInterfaces ;
Code	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) < extraInterfaces ;
Distance : 6

45
Tree	return withSettings ( returnsDeepStubsAnswerUsing ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return withSettings ( returnsDeepStubsAnswerUsing ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

46
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && <= ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && <= ;
Distance : 5

47
Tree	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && anyList ;
Code	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && anyList ;
Distance : 8

48
Tree	return defaultAnswer ( withSettings ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( withSettings ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

49
Tree	return defaultAnswer ( MockSettings ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( MockSettings ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

50
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && anyList ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && anyList ;
Distance : 8

51
Tree	return withSettings ( withSettings ) . defaultAnswer () ;
Code	return withSettings ( withSettings ) . defaultAnswer () ;
Distance : 10

52
Tree	return defaultAnswer ( GenericMetadataSupport ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( GenericMetadataSupport ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

53
Tree	return mockSettings . defaultAnswer ( new returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 4

54
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && Cartesian2D ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && Cartesian2D ;
Distance : 8

55
Tree	return ! mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return ! mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 5

56
Tree	return mockSettings . defaultAnswer ( serializable ) ;
Code	return mockSettings . defaultAnswer ( serializable ) ;
Distance : 7

57
Tree	return withSettings ( returnTypeGenericMetadata ( returnTypeGenericMetadata ) ) ;
Code	return withSettings ( returnTypeGenericMetadata ( returnTypeGenericMetadata ) ) ;
Distance : 7

58
Tree	return defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 8

59
Tree	return mockSettings . withSettings ( withSettings ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . withSettings ( withSettings ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 7

60
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && &= ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && &= ;
Distance : 7

61
Tree	return ! mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) ;
Code	return ! mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) ;
Distance : 5

62
Tree	return defaultAnswer ( withSettings ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( withSettings ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 8

63
Tree	return defaultAnswer ( defaultAnswer ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( defaultAnswer ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

64
Tree	return mockSettings . defaultAnswer ( new withSettings ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new withSettings ( returnTypeGenericMetadata ) ) ;
Distance : 5

65
Tree	return withSettings ( null , returnTypeGenericMetadata ( returnTypeGenericMetadata ) ) ;
Code	return withSettings ( null , returnTypeGenericMetadata ( returnTypeGenericMetadata ) ) ;
Distance : 8

66
Tree	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) && DateUtils.MILLIS_PER_DAY ;
Code	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) && DateUtils.MILLIS_PER_DAY ;
Distance : 6

67
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing , returnTypeGenericMetadata ) && withSettings ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing , returnTypeGenericMetadata ) && withSettings ( returnTypeGenericMetadata ) ;
Distance : 9

68
Tree	return defaultAnswer ( null , defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( null , defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 7

69
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && ^ ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && ^ ;
Distance : 8

70
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && anyList ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && anyList ;
Distance : 7

71
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) < extraInterfaces ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) < extraInterfaces ;
Distance : 5

72
Tree	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) < serializable ;
Code	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) < serializable ;
Distance : 6

73
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && &= ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && &= ;
Distance : 8

74
Tree	return defaultAnswer ( MockSettings ) . defaultAnswer () ;
Code	return defaultAnswer ( MockSettings ) . defaultAnswer () ;
Distance : 10

75
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) < serializable ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) < serializable ;
Distance : 5

76
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && extraInterfaces ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && extraInterfaces ;
Distance : 8

77
Tree	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Distance : 8

78
Tree	return defaultAnswer ( withSettings , returnTypeGenericMetadata ) && withSettings ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( withSettings , returnTypeGenericMetadata ) && withSettings ( returnTypeGenericMetadata ) ;
Distance : 9

79
Tree	return defaultAnswer ( withSettingsUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( withSettingsUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 8

80
Tree	return mockSettings . defaultAnswer ( new GenericMetadataSupport ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new GenericMetadataSupport ( returnTypeGenericMetadata ) ) ;
Distance : 5

81
Tree	return defaultAnswer ( GenericMetadataSupport ) . defaultAnswer () ;
Code	return defaultAnswer ( GenericMetadataSupport ) . defaultAnswer () ;
Distance : 10

82
Tree	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) < withSettings ;
Code	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) < withSettings ;
Distance : 6

83
Tree	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) && ^ ;
Code	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) && ^ ;
Distance : 6

84
Tree	return mockSettings . defaultAnswer ( MockSettings ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( MockSettings ( returnTypeGenericMetadata ) ) ;
Distance : 4

85
Tree	return withSettings ( withSettings ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return withSettings ( withSettings ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

86
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Distance : 7

87
Tree	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( returnTypeGenericMetadata ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( returnTypeGenericMetadata ( returnTypeGenericMetadata ) ) ;
Distance : 5

88
Tree	return withSettings ( withSettings ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return withSettings ( withSettings ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 9

89
Tree	return defaultAnswer ( mockSettings ) . defaultAnswer () ;
Code	return defaultAnswer ( mockSettings ) . defaultAnswer () ;
Distance : 10

90
Tree	return mockSettings . defaultAnswer ( GenericMetadataSupport ) ;
Code	return mockSettings . defaultAnswer ( GenericMetadataSupport ) ;
Distance : 7

91
Tree	return mockSettings . defaultAnswer ( new MockSettings ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new MockSettings ( returnTypeGenericMetadata ) ) ;
Distance : 5

92
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 6

93
Tree	return withSettings ( returnTypeGenericMetadata ) . defaultAnswer () ;
Code	return withSettings ( returnTypeGenericMetadata ) . defaultAnswer () ;
Distance : 10

94
Tree	return mockSettings . defaultAnswer ( new serializable ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new serializable ( returnTypeGenericMetadata ) ) ;
Distance : 5

95
Tree	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) ;
Distance : 5

96
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) < withSettings ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) < withSettings ;
Distance : 5

97
Tree	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 6

98
Tree	return mockSettings . defaultAnswer ( defaultAnswer ) && extraInterfaces ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( defaultAnswer ) && extraInterfaces ( returnTypeGenericMetadata ) ;
Distance : 7

99
Tree	return ! mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return ! mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 4

100
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 7

101
Tree	return mockSettings . defaultAnswer ( withSettingsUsing ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( withSettingsUsing ( returnTypeGenericMetadata ) ) ;
Distance : 4

102
Tree	return defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) ;
Distance : 6

103
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ) && extraInterfaces ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ) && extraInterfaces ( returnTypeGenericMetadata ) ;
Distance : 7

104
Tree	return mockSettings . withSettings ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . withSettings ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Distance : 8

105
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 5

106
Tree	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && <= ;
Code	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && <= ;
Distance : 8

107
Tree	return defaultAnswer ( mockSettings ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( mockSettings ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

108
Tree	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( extraInterfaces ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( extraInterfaces ( returnTypeGenericMetadata ) ) ;
Distance : 5

109
Tree	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 4

110
Tree	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) ;
Distance : 4

111
Tree	return defaultAnswer ( GenericMetadataSupport ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( GenericMetadataSupport ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 8

112
Tree	return defaultAnswer ( defaultAnswer , returnTypeGenericMetadata ) && withSettings ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( defaultAnswer , returnTypeGenericMetadata ) && withSettings ( returnTypeGenericMetadata ) ;
Distance : 9

113
Tree	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Distance : 8

114
Tree	return ! mockSettings . defaultAnswer ( extraInterfaces ( returnTypeGenericMetadata ) ) ;
Code	return ! mockSettings . defaultAnswer ( extraInterfaces ( returnTypeGenericMetadata ) ) ;
Distance : 5

115
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 3

116
Tree	return mockSettings . defaultAnswer ( withSettings ) ;
Code	return mockSettings . defaultAnswer ( withSettings ) ;
Distance : 7

117
Tree	return withSettings ( withSettings ( returnTypeGenericMetadata ) ) ;
Code	return withSettings ( withSettings ( returnTypeGenericMetadata ) ) ;
Distance : 7

118
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && extraInterfaces ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && extraInterfaces ( returnTypeGenericMetadata ) ;
Distance : 7

119
Tree	return defaultAnswer ( GenericMetadataSupport ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( GenericMetadataSupport ( returnTypeGenericMetadata ) ) ;
Distance : 6

120
Tree	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 6

121
Tree	return mockSettings . defaultAnswer ( defaultAnswer ) && withSettings ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( defaultAnswer ) && withSettings ( returnTypeGenericMetadata ) ;
Distance : 7

122
Tree	return mockSettings . defaultAnswer ( withSettings ) && withSettings ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( withSettings ) && withSettings ( returnTypeGenericMetadata ) ;
Distance : 7

123
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

124
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 5

125
Tree	return mockSettings . withSettings ( withSettings ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . withSettings ( withSettings ( returnTypeGenericMetadata ) ) ;
Distance : 5

126
Tree	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) < mockSettings ;
Code	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) < mockSettings ;
Distance : 6

127
Tree	return withSettings ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return withSettings ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 6

128
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer () ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer () ;
Distance : 10

129
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 9

130
Tree	return defaultAnswer ( returnTypeGenericMetadata ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata ( returnTypeGenericMetadata ) ) ;
Distance : 6

131
Tree	return mockSettings . defaultAnswer ( new extraInterfaces ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new extraInterfaces ( returnTypeGenericMetadata ) ) ;
Distance : 5

132
Tree	return ! mockSettings . defaultAnswer ( GenericMetadataSupport ( returnTypeGenericMetadata ) ) ;
Code	return ! mockSettings . defaultAnswer ( GenericMetadataSupport ( returnTypeGenericMetadata ) ) ;
Distance : 5

133
Tree	return mockSettings . defaultAnswer ( new withSettingsUsing ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new withSettingsUsing ( returnTypeGenericMetadata ) ) ;
Distance : 5

134
Tree	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 5

135
Tree	return mockSettings . withSettings ( returnTypeGenericMetadata ) ;
Code	return mockSettings . withSettings ( returnTypeGenericMetadata ) ;
Distance : 7

136
Tree	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && extraInterfaces ;
Code	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && extraInterfaces ;
Distance : 8

137
Tree	return ! mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return ! mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 5

138
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Distance : 8

139
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 8

140
Tree	return mockSettings . defaultAnswer ( new returnTypeGenericMetadata ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new returnTypeGenericMetadata ( returnTypeGenericMetadata ) ) ;
Distance : 5

141
Tree	return mockSettings . defaultAnswer ( withSettings ) && extraInterfaces ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( withSettings ) && extraInterfaces ( returnTypeGenericMetadata ) ;
Distance : 7

142
Tree	return mockSettings . defaultAnswer ( extraInterfaces ) ;
Code	return mockSettings . defaultAnswer ( extraInterfaces ) ;
Distance : 7

143
Tree	return defaultAnswer ( withSettings , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( withSettings , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) ;
Distance : 9

144
Tree	return defaultAnswer ( null , GenericMetadataSupport ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( null , GenericMetadataSupport ( returnTypeGenericMetadata ) ) ;
Distance : 8

145
Tree	return withSettings ( null , withSettingsUsing ( returnTypeGenericMetadata ) ) ;
Code	return withSettings ( null , withSettingsUsing ( returnTypeGenericMetadata ) ) ;
Distance : 8

146
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) < mockSettings ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) < mockSettings ;
Distance : 5

147
Tree	return ! mockSettings . defaultAnswer ( withSettingsUsing ( returnTypeGenericMetadata ) ) ;
Code	return ! mockSettings . defaultAnswer ( withSettingsUsing ( returnTypeGenericMetadata ) ) ;
Distance : 5

148
Tree	return mockSettings . defaultAnswer ( new mockSettings ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new mockSettings ( returnTypeGenericMetadata ) ) ;
Distance : 5

149
Tree	return ! mockSettings . withSettings ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return ! mockSettings . withSettings ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 5

150
Tree	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) && &= ;
Code	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) && &= ;
Distance : 6

151
Tree	return ( mockSettings ) returnTypeGenericMetadata . withSettings ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnTypeGenericMetadata . withSettings ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 5

152
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && withSettings ( withSettings ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && withSettings ( withSettings ( returnTypeGenericMetadata ) ) ;
Distance : 9

153
Tree	return withSettings ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && withSettings ( returnTypeGenericMetadata ) ;
Code	return withSettings ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && withSettings ( returnTypeGenericMetadata ) ;
Distance : 9

154
Tree	return withSettings ( defaultAnswer ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return withSettings ( defaultAnswer ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 9

155
Tree	return ( mockSettings ) returnTypeGenericMetadata . withSettings ( withSettings ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnTypeGenericMetadata . withSettings ( withSettings ( returnTypeGenericMetadata ) ) ;
Distance : 6

156
Tree	return mockSettings . defaultAnswer ( MockSettings ) ;
Code	return mockSettings . defaultAnswer ( MockSettings ) ;
Distance : 7

157
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ) && withSettings ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ) && withSettings ( returnTypeGenericMetadata ) ;
Distance : 7

158
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 9

159
Tree	return mockSettings . withSettings ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . withSettings ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 4

160
Tree	return withSettings ( returnTypeGenericMetadata ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return withSettings ( returnTypeGenericMetadata ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 9

161
Tree	return withSettings ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) ;
Code	return withSettings ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) ;
Distance : 9

162
Tree	return mockSettings . withSettings ( withSettings ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . withSettings ( withSettings ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Distance : 9

163
Tree	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( withSettingsUsing ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( withSettingsUsing ( returnTypeGenericMetadata ) ) ;
Distance : 5

164
Tree	return mockSettings . defaultAnswer ( new defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 5

165
Tree	return mockSettings . defaultAnswer ( GenericMetadataSupport ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( GenericMetadataSupport ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 6

166
Tree	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Code	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Distance : 6

167
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) ;
Distance : 9

168
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) ;
Distance : 9

169
Tree	return defaultAnswer ( withSettings , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( withSettings , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 8

170
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && extraInterfaces ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && extraInterfaces ( returnTypeGenericMetadata ) ;
Distance : 9

171
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 8

172
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing , returnTypeGenericMetadata ) && withSettings ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing , returnTypeGenericMetadata ) && withSettings ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 8

173
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && extends ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && extends ;
Distance : 7

174
Tree	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && &= ;
Code	return mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && &= ;
Distance : 8

175
Tree	return mockSettings . defaultAnswer ( withSettings ) && serializable ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( withSettings ) && serializable ( returnTypeGenericMetadata ) ;
Distance : 7

176
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && verifyNoMoreInteractions ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && verifyNoMoreInteractions ;
Distance : 8

177
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && withSettings ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && withSettings ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 8

178
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && serializable ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && serializable ( returnTypeGenericMetadata ) ;
Distance : 7

179
Tree	return ! mockSettings . withSettings ( withSettings ( returnTypeGenericMetadata ) ) ;
Code	return ! mockSettings . withSettings ( withSettings ( returnTypeGenericMetadata ) ) ;
Distance : 6

180
Tree	return mockSettings . defaultAnswer ( mockSettings ) ;
Code	return mockSettings . defaultAnswer ( mockSettings ) ;
Distance : 7

181
Tree	return defaultAnswer ( null , returnTypeGenericMetadata ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( null , returnTypeGenericMetadata ( returnTypeGenericMetadata ) ) ;
Distance : 8

182
Tree	return withSettings ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return withSettings ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 8

183
Tree	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( mockSettings ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( mockSettings ( returnTypeGenericMetadata ) ) ;
Distance : 5

184
Tree	return mockSettings . defaultAnswer ( GenericMetadataSupport ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( GenericMetadataSupport ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Distance : 8

185
Tree	return defaultAnswer ( withSettings , returnTypeGenericMetadata ) && withSettings ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( withSettings , returnTypeGenericMetadata ) && withSettings ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 8

186
Tree	return mockSettings . defaultAnswer ( withSettingsUsing ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( withSettingsUsing ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Distance : 8

187
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && mockSettings ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && mockSettings ( returnTypeGenericMetadata ) ;
Distance : 9

188
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing , returnTypeGenericMetadata ) && withSettings ( withSettings ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing , returnTypeGenericMetadata ) && withSettings ( withSettings ( returnTypeGenericMetadata ) ) ;
Distance : 9

189
Tree	return defaultAnswer ( defaultAnswer ) . defaultAnswer () ;
Code	return defaultAnswer ( defaultAnswer ) . defaultAnswer () ;
Distance : 10

190
Tree	return defaultAnswer ( withSettings , returnTypeGenericMetadata ) && withSettings ( withSettings ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( withSettings , returnTypeGenericMetadata ) && withSettings ( withSettings ( returnTypeGenericMetadata ) ) ;
Distance : 9

191
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) ;
Distance : 9

192
Tree	return withSettings ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && withSettings ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return withSettings ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && withSettings ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 8

193
Tree	return withSettings ( returnsDeepStubsAnswerUsing , returnTypeGenericMetadata ) && withSettings ( returnTypeGenericMetadata ) ;
Code	return withSettings ( returnsDeepStubsAnswerUsing , returnTypeGenericMetadata ) && withSettings ( returnTypeGenericMetadata ) ;
Distance : 9

194
Tree	return withSettings ( withSettings , returnTypeGenericMetadata ) && withSettings ( returnTypeGenericMetadata ) ;
Code	return withSettings ( withSettings , returnTypeGenericMetadata ) && withSettings ( returnTypeGenericMetadata ) ;
Distance : 9

195
Tree	return withSettings ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && withSettings ( withSettings ( returnTypeGenericMetadata ) ) ;
Code	return withSettings ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && withSettings ( withSettings ( returnTypeGenericMetadata ) ) ;
Distance : 9

196
Tree	return mockSettings . defaultAnswer ( MockSettings ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( MockSettings ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Distance : 8

197
Tree	return mockSettings . defaultAnswer ( mockSettings ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( mockSettings ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Distance : 8

198
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && withSettings ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && withSettings ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 9

199
Tree	return defaultAnswer ( defaultAnswer , returnTypeGenericMetadata ) && withSettings ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( defaultAnswer , returnTypeGenericMetadata ) && withSettings ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 8

========================================================================


========================================================================
Example Number: 82
Parent Code is: 
{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withParams ( cls , outerClassInstance ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=outerClassInstance}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=noArgConstructor}) (214{val=(}) (800{val=cls}) (215{val=)})) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (32 (802{val=withOuterClass}) (214{val=(}) (800{val=cls}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=outerClassInstance}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=noArgConstructor}) (214{val=(}) (800{val=cls}) (215{val=)})) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (32 (802{val=withParams}) (214{val=(}) (800{val=cls}) (234{val=,}) (800{val=outerClassInstance}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/21/parent/src_org_mockito_internal_creation_instance_ConstructorInstantiator.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ if ( outerClassInstance == null ) { return cls . outerClassInstance ( cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls . outerClassInstance ( cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 6

1
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( cls ) ; } return newInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( cls ) ; } return newInstance ( cls ) ; }
Distance : 6

2
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return outerClassInstance ( cls , cls . cls ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return outerClassInstance ( cls , cls . cls ( cls ) ) ; }
Distance : 8

3
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . outerClassInstance ( cls ) . outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . outerClassInstance ( cls ) . outerClassInstance ( cls ) ; }
Distance : 8

4
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance () ; } return cls ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance () ; } return cls ( cls ) ; }
Distance : 7

5
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 8

6
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) . outerClassInstance ( cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) . outerClassInstance ( cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 9

7
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls ( cls . cls ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls ( cls . cls ( cls ) ) ; }
Distance : 7

8
Tree	{ if ( outerClassInstance == null ) { return cls . outerClassInstance () ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls . outerClassInstance () ; } return outerClassInstance ( cls ) ; }
Distance : 7

9
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

10
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 6

11
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return outerClassInstance ( this , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return outerClassInstance ( this , cls ) ; }
Distance : 4

12
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . cls ( cls , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . cls ( cls , cls ) ; }
Distance : 5

13
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return withOuterClass ( this , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return withOuterClass ( this , cls ) ; }
Distance : 4

14
Tree	{ if ( outerClassInstance == null ) { return newInstance ( cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return newInstance ( cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 4

15
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . cls ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . cls ( cls ) ; }
Distance : 4

16
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return outerClassInstance ( cls , cls . ( ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return outerClassInstance ( cls , cls . ( ( cls ) ) ; }
Distance : 8

17
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return newInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return newInstance ( cls ) ; }
Distance : 3

18
Tree	{ if ( outerClassInstance == null ) { return cls () ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls () ; } return outerClassInstance ( cls ) ; }
Distance : 6

19
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return outerClassInstance ( cls . newInstance ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return outerClassInstance ( cls . newInstance ( cls ) ) ; }
Distance : 6

20
Tree	{ if ( outerClassInstance == null ) { return cls ( cls ) ; } return cls . outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls ( cls ) ; } return cls . outerClassInstance ( cls ) ; }
Distance : 6

21
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls , cls ) ; } return cls ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls , cls ) ; } return cls ( cls ) ; }
Distance : 6

22
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . cls ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . cls ( cls ) ) ; }
Distance : 6

23
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor . outerClassInstance ( cls , cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor . outerClassInstance ( cls , cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 7

24
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . cls ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . cls ( cls ) ; }
Distance : 5

25
Tree	{ if ( outerClassInstance == null ) { return this . outerClassInstance ( cls ) ; } return newInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return this . outerClassInstance ( cls ) ; } return newInstance ( cls ) ; }
Distance : 6

26
Tree	{ if ( outerClassInstance == null ) { return cls ( cls ) ; } return outerClassInstance ( cls , cls . newInstance ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return cls ( cls ) ; } return outerClassInstance ( cls , cls . newInstance ( cls ) ) ; }
Distance : 8

27
Tree	{ if ( outerClassInstance == null ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

28
Tree	{ if ( outerClassInstance == null ) { return this . outerClassInstance ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return this . outerClassInstance ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

29
Tree	{ if ( outerClassInstance == null ) { return this . noArgConstructor ( cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return this . noArgConstructor ( cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 5

30
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Distance : 4

31
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return newInstance ( cls . cls ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return newInstance ( cls . cls ( cls ) ) ; }
Distance : 7

32
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return withOuterClass ( cls . newInstance ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return withOuterClass ( cls . newInstance ( cls ) ) ; }
Distance : 7

33
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Distance : 5

34
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . newInstance ( cls , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . newInstance ( cls , cls ) ; }
Distance : 4

35
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . newInstance () ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . newInstance () ; } return outerClassInstance ( cls ) ; }
Distance : 7

36
Tree	{ if ( outerClassInstance == null ) { outerClassInstance ( cls ) ; return outerClassInstance ( newInstance ( cls ) ) ; } else }
Code	{ if ( outerClassInstance == null ) { outerClassInstance ( cls ) ; return outerClassInstance ( newInstance ( cls ) ) ; } else }
Distance : 10

37
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor . outerClassInstance ( cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor . outerClassInstance ( cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 5

38
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 4

39
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . outerClassInstance ( cls , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . outerClassInstance ( cls , cls ) ; }
Distance : 4

40
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance () ; } return withOuterClass ( cls ) ; }
Distance : 7

41
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return outerClassInstance ( cls , outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return outerClassInstance ( cls , outerClassInstance ) ; }
Distance : 2

42
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Distance : 5

43
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor () ; } return cls ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor () ; } return cls ( cls ) ; }
Distance : 6

44
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance () ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance () ; } return outerClassInstance ( cls ) ; }
Distance : 7

45
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . newInstance ( cls , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . newInstance ( cls , cls ) ; }
Distance : 5

46
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 3

47
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . newInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . newInstance ( cls ) ; }
Distance : 5

48
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , cls ) ; } return cls ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , cls ) ; } return cls ( cls ) ; }
Distance : 5

49
Tree	{ if ( outerClassInstance == null ) { return this . cls ( cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return this . cls ( cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 6

50
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls ( this , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls ( this , cls ) ; }
Distance : 4

51
Tree	{ if ( outerClassInstance == null ) { return cls ( cls , cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls ( cls , cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 6

52
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 7

53
Tree	{ if ( outerClassInstance == null ) { return newInstance () ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return newInstance () ; } return outerClassInstance ( cls ) ; }
Distance : 7

54
Tree	{ if ( outerClassInstance == null ) { return cls ( cls ) ; } return outerClassInstance ( this , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls ( cls ) ; } return outerClassInstance ( this , cls ) ; }
Distance : 4

55
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . newInstance ( cls ) . outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . newInstance ( cls ) . outerClassInstance ( cls ) ; }
Distance : 8

56
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return outerClassInstance ( cls . cls ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return outerClassInstance ( cls . cls ( cls ) ) ; }
Distance : 6

57
Tree	{ if ( outerClassInstance == null ) { return this . outerClassInstance ( cls ) ; } return cls ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return this . outerClassInstance ( cls ) ; } return cls ( cls ) ; }
Distance : 6

58
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor () ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor () ; } return outerClassInstance ( cls ) ; }
Distance : 7

59
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor () ; } return newInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor () ; } return newInstance ( cls ) ; }
Distance : 6

60
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 4

61
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 5

62
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return outerClassInstance ( cls . newInstance ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return outerClassInstance ( cls . newInstance ( cls ) ) ; }
Distance : 7

63
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls ( cls ) ; }
Distance : 4

64
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . outerClassInstance ( cls ) . outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . outerClassInstance ( cls ) . outerClassInstance ( cls ) ; }
Distance : 7

65
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls ( this , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls ( this , cls ) ; }
Distance : 3

66
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

67
Tree	{ if ( outerClassInstance == null ) { return this . noArgConstructor ( cls ) ; } return newInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return this . noArgConstructor ( cls ) ; } return newInstance ( cls ) ; }
Distance : 5

68
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . withOuterClass ( cls ) . outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . withOuterClass ( cls ) . outerClassInstance ( cls ) ; }
Distance : 8

69
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor () ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor () ; } return outerClassInstance ( cls ) ; }
Distance : 6

70
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls ( cls , outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls ( cls , outerClassInstance ) ; }
Distance : 2

71
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return withOuterClass ( cls . cls ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return withOuterClass ( cls . cls ( cls ) ) ; }
Distance : 7

72
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) . outerClassInstance ( cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) . outerClassInstance ( cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 8

73
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) . outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) . outerClassInstance ( cls ) ; }
Distance : 7

74
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor . outerClassInstance () ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor . outerClassInstance () ; } return outerClassInstance ( cls ) ; }
Distance : 6

75
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls ( cls , cls . newInstance ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls ( cls , cls . newInstance ( cls ) ) ; }
Distance : 8

76
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . outerClassInstance ( cls ) ; }
Distance : 6

77
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance () ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance () ; } return outerClassInstance ( cls ) ; }
Distance : 7

78
Tree	{ if ( outerClassInstance == null ) { return newInstance ( cls ) ; } return cls . outerClassInstance ( cls , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return newInstance ( cls ) ; } return cls . outerClassInstance ( cls , cls ) ; }
Distance : 5

79
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . newInstance ( cls ) . outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . newInstance ( cls ) . outerClassInstance ( cls ) ; }
Distance : 7

80
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return outerClassInstance ( cls , cls . newInstance ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return outerClassInstance ( cls , cls . newInstance ( cls ) ) ; }
Distance : 8

81
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return outerClassInstance ( this , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return outerClassInstance ( this , cls ) ; }
Distance : 3

82
Tree	{ if ( outerClassInstance == null ) { outerClassInstance ( cls ) ; return outerClassInstance ( newInstance ( cls ) ) ; } inlineEmptyMethod }
Code	{ if ( outerClassInstance == null ) { outerClassInstance ( cls ) ; return outerClassInstance ( newInstance ( cls ) ) ; } inlineEmptyMethod }
Distance : 10

83
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return outerClassInstance ( cls . cls ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return outerClassInstance ( cls . cls ( cls ) ) ; }
Distance : 7

84
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , cls ) ; } return newInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , cls ) ; } return newInstance ( cls ) ; }
Distance : 5

85
Tree	{ if ( outerClassInstance == null ) { outerClassInstance ( cls ) ; return outerClassInstance ( ( ( cls ) ) ; } else }
Code	{ if ( outerClassInstance == null ) { outerClassInstance ( cls ) ; return outerClassInstance ( ( ( cls ) ) ; } else }
Distance : 10

86
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) . outerClassInstance ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) . outerClassInstance ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 9

87
Tree	{ if ( outerClassInstance == null ) { return newInstance ( cls ) ; } return outerClassInstance ( this , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return newInstance ( cls ) ; } return outerClassInstance ( this , cls ) ; }
Distance : 4

88
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return newInstance ( this , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return newInstance ( this , cls ) ; }
Distance : 3

89
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) . cls ( cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) . cls ( cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 9

90
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance () ; } return withOuterClass ( cls ) ; }
Distance : 7

91
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( outerClassInstance , cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( outerClassInstance , cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 7

92
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor . outerClassInstance () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor . outerClassInstance () ; } return withOuterClass ( cls ) ; }
Distance : 6

93
Tree	{ if ( outerClassInstance == null ) { return cls . outerClassInstance ( cls , cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls . outerClassInstance ( cls , cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 8

94
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 3

95
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , cls ) ; } return cls ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , cls ) ; } return cls ( cls ) ; }
Distance : 8

96
Tree	{ if ( outerClassInstance == null ) { outerClassInstance ( cls ) ; return outerClassInstance ( newInstance ( cls ) ) ; } validateObjectPattern }
Code	{ if ( outerClassInstance == null ) { outerClassInstance ( cls ) ; return outerClassInstance ( newInstance ( cls ) ) ; } validateObjectPattern }
Distance : 10

97
Tree	{ if ( outerClassInstance == null ) { return cls ( cls ) ; } return outerClassInstance ( cls , outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return cls ( cls ) ; } return outerClassInstance ( cls , outerClassInstance ) ; }
Distance : 2

98
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

99
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) . outerClassInstance ( cls ) ; } return cls ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) . outerClassInstance ( cls ) ; } return cls ( cls ) ; }
Distance : 9

100
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , false ) ; } return cls ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , false ) ; } return cls ( cls ) ; }
Distance : 9

101
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 8

102
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( cls , cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( cls , cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 8

103
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return outerClassInstance ( cls , cls . outerClassInstance ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return outerClassInstance ( cls , cls . outerClassInstance ( cls ) ) ; }
Distance : 7

104
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) . newInstance ( cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) . newInstance ( cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 9

105
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls ( cls , outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls ( cls , outerClassInstance ) ; }
Distance : 1

106
Tree	{ if ( outerClassInstance == null ) { return newInstance ( cls , cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return newInstance ( cls , cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 6

107
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . newInstance ( cls , cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . newInstance ( cls , cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 8

108
Tree	{ if ( outerClassInstance == null ) { return cls . outerClassInstance ( outerClassInstance ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls . outerClassInstance ( outerClassInstance ) ; } return outerClassInstance ( cls ) ; }
Distance : 7

109
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor . outerClassInstance ( outerClassInstance , false ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor . outerClassInstance ( outerClassInstance , false ) ; } return outerClassInstance ( cls ) ; }
Distance : 8

110
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . outerClassInstance ( cls ) . cls ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . outerClassInstance ( cls ) . cls ( cls ) ; }
Distance : 9

111
Tree	{ if ( outerClassInstance == null ) { outerClassInstance ( cls ) ; return outerClassInstance ( cls ( cls ) ) ; } else }
Code	{ if ( outerClassInstance == null ) { outerClassInstance ( cls ) ; return outerClassInstance ( cls ( cls ) ) ; } else }
Distance : 9

112
Tree	{ if ( outerClassInstance == null ) { outerClassInstance ( cls ) ; return withOuterClass ( newInstance ( cls ) ) ; } else }
Code	{ if ( outerClassInstance == null ) { outerClassInstance ( cls ) ; return withOuterClass ( newInstance ( cls ) ) ; } else }
Distance : 10

113
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 5

114
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return outerClassInstance ( cls , cls . newInstance ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return outerClassInstance ( cls , cls . newInstance ( cls ) ) ; }
Distance : 7

115
Tree	{ if ( outerClassInstance == null ) { outerClassInstance ( cls ) ; return outerClassInstance ( newInstance ( cls ) ) ; } indexOfAny }
Code	{ if ( outerClassInstance == null ) { outerClassInstance ( cls ) ; return outerClassInstance ( newInstance ( cls ) ) ; } indexOfAny }
Distance : 10

116
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( cls ) ; } return cls ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( cls ) ; } return cls ( cls ) ; }
Distance : 6

117
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return newInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return newInstance ( cls ) ; }
Distance : 4

118
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) . outerClassInstance ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) . outerClassInstance ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 8

119
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor . outerClassInstance ( outerClassInstance , cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor . outerClassInstance ( outerClassInstance , cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 7

120
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor . outerClassInstance ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor . outerClassInstance ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

121
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance ) ; } return newInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance ) ; } return newInstance ( cls ) ; }
Distance : 7

122
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . outerClassInstance ( cls ) . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . outerClassInstance ( cls ) . withOuterClass ( cls ) ; }
Distance : 9

123
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 6

124
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( cls , cls ) ; } return newInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( cls , cls ) ; } return newInstance ( cls ) ; }
Distance : 8

125
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , false ) ; } return newInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , false ) ; } return newInstance ( cls ) ; }
Distance : 9

126
Tree	{ if ( outerClassInstance == null ) { return this . outerClassInstance ( cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return this . outerClassInstance ( cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 6

127
Tree	{ if ( outerClassInstance == null ) { return cls ( cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls ( cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 4

128
Tree	{ if ( outerClassInstance == null ) { return newInstance ( cls ) ; } return cls . outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return newInstance ( cls ) ; } return cls . outerClassInstance ( cls ) ; }
Distance : 6

129
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return withOuterClass ( cls , cls . newInstance ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return withOuterClass ( cls , cls . newInstance ( cls ) ) ; }
Distance : 8

130
Tree	{ if ( outerClassInstance == null ) { return this . noArgConstructor ( cls ) ; } return cls ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return this . noArgConstructor ( cls ) ; } return cls ( cls ) ; }
Distance : 5

131
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , false ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , false ) ; } return outerClassInstance ( cls ) ; }
Distance : 9

132
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . newInstance ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . newInstance ( cls ) ) ; }
Distance : 7

133
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) . newInstance ( cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) . newInstance ( cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 8

134
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return outerClassInstance ( cls , Class ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return outerClassInstance ( cls , Class ) ; }
Distance : 3

135
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls ( cls ) ; }
Distance : 3

136
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . outerClassInstance ( cls , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . outerClassInstance ( cls , cls ) ; }
Distance : 5

137
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

138
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance ) ; } return outerClassInstance ( cls ) ; }
Distance : 7

139
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . cls ( cls , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . cls ( cls , cls ) ; }
Distance : 4

140
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . outerClassInstance ( cls ) . newInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . outerClassInstance ( cls ) . newInstance ( cls ) ; }
Distance : 9

141
Tree	{ if ( outerClassInstance == null ) { return cls . outerClassInstance ( outerClassInstance , false ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls . outerClassInstance ( outerClassInstance , false ) ; } return outerClassInstance ( cls ) ; }
Distance : 9

142
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Distance : 6

143
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; }
Distance : 3

144
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return outerClassInstance ( cls . Class ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return outerClassInstance ( cls . Class ( cls ) ) ; }
Distance : 7

145
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance () ; } return cls ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance () ; } return cls ( cls ) ; }
Distance : 7

146
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance () ; } return newInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance () ; } return newInstance ( cls ) ; }
Distance : 7

147
Tree	{ if ( outerClassInstance == null ) { return cls ( cls ) ; } return cls . outerClassInstance ( cls , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls ( cls ) ; } return cls . outerClassInstance ( cls , cls ) ; }
Distance : 5

148
Tree	{ if ( outerClassInstance == null ) { outerClassInstance ( cls ) ; return outerClassInstance ( outerClassInstance ( cls ) ) ; } else }
Code	{ if ( outerClassInstance == null ) { outerClassInstance ( cls ) ; return outerClassInstance ( outerClassInstance ( cls ) ) ; } else }
Distance : 10

149
Tree	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return outerClassInstance ( outerClassInstance ( cls ) ) ; } else }
Code	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return outerClassInstance ( outerClassInstance ( cls ) ) ; } else }
Distance : 9

150
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . newInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . newInstance ( cls ) ; }
Distance : 6

151
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return newInstance ( cls , cls . newInstance ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return newInstance ( cls , cls . newInstance ( cls ) ) ; }
Distance : 8

152
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . newInstance ( cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . newInstance ( cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 6

153
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . cls ( cls ) . outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return cls . cls ( cls ) . outerClassInstance ( cls ) ; }
Distance : 8

154
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

155
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls , cls ) ; } return newInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls , cls ) ; } return newInstance ( cls ) ; }
Distance : 6

156
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return outerClassInstance ( cls , Class ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return outerClassInstance ( cls , Class ) ; }
Distance : 2

157
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) . outerClassInstance ( cls ) ; } return newInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) . outerClassInstance ( cls ) ; } return newInstance ( cls ) ; }
Distance : 9

158
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . outerClassInstance ( cls ) ; }
Distance : 5

159
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return outerClassInstance ( cls , outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return outerClassInstance ( cls , outerClassInstance ) ; }
Distance : 1

160
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance () ; } return newInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance () ; } return newInstance ( cls ) ; }
Distance : 7

161
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return newInstance ( this , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return newInstance ( this , cls ) ; }
Distance : 4

162
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 6

163
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . newInstance ( outerClassInstance ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . newInstance ( outerClassInstance ) ; } return outerClassInstance ( cls ) ; }
Distance : 7

164
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , outerClassInstance ) ; }
Distance : 1

165
Tree	{ if ( outerClassInstance == null ) { return cls . outerClassInstance ( outerClassInstance , cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls . outerClassInstance ( outerClassInstance , cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 8

166
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 7

167
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , cls ) ; } return newInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , cls ) ; } return newInstance ( cls ) ; }
Distance : 8

168
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( outerClassInstance ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( outerClassInstance ) ; } return outerClassInstance ( cls ) ; }
Distance : 6

169
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls , cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls , cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 7

170
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( cls , cls ) ; } return cls ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( cls , cls ) ; } return cls ( cls ) ; }
Distance : 8

171
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor . outerClassInstance ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor . outerClassInstance ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

172
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) . withOuterClass ( cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) . withOuterClass ( cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 9

173
Tree	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return outerClassInstance ( newInstance ( cls ) ) ; } else }
Code	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return outerClassInstance ( newInstance ( cls ) ) ; } else }
Distance : 9

174
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , false ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , false ) ; } return withOuterClass ( cls ) ; }
Distance : 9

175
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor . outerClassInstance ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor . outerClassInstance ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 6

176
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , cls , cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , cls , cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 10

177
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 10

178
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls , cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls , cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 6

179
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( outerClassInstance , false ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( outerClassInstance , false ) ; } return withOuterClass ( cls ) ; }
Distance : 8

180
Tree	{ if ( outerClassInstance == null ) { return this . newInstance ( cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return this . newInstance ( cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 6

181
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( outerClassInstance , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( outerClassInstance , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

182
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 8

183
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance ) ; } return cls ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance ) ; } return cls ( cls ) ; }
Distance : 7

184
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . newInstance ( outerClassInstance , false ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . newInstance ( outerClassInstance , false ) ; } return outerClassInstance ( cls ) ; }
Distance : 9

185
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor . outerClassInstance ( outerClassInstance ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor . outerClassInstance ( outerClassInstance ) ; } return outerClassInstance ( cls ) ; }
Distance : 6

186
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return withOuterClass ( cls , outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return withOuterClass ( cls , outerClassInstance ) ; }
Distance : 2

187
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , cls , Class ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , cls , Class ) ; } return outerClassInstance ( cls ) ; }
Distance : 10

188
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , cls , outerClassInstance ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , cls , outerClassInstance ) ; } return outerClassInstance ( cls ) ; }
Distance : 10

189
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return newInstance ( cls , outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance ( cls ) ; } return newInstance ( cls , outerClassInstance ) ; }
Distance : 2

190
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( outerClassInstance , cls , cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( outerClassInstance , cls , cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 9

191
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , cls , cls ) ; } return cls ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , cls , cls ) ; } return cls ( cls ) ; }
Distance : 10

192
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor . outerClassInstance ( outerClassInstance , false ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor . outerClassInstance ( outerClassInstance , false ) ; } return withOuterClass ( cls ) ; }
Distance : 8

193
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( outerClassInstance , false ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( outerClassInstance , false ) ; } return outerClassInstance ( cls ) ; }
Distance : 8

194
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . newInstance ( outerClassInstance , cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . newInstance ( outerClassInstance , cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 8

195
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , cls , newInstance ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , cls , newInstance ) ; } return outerClassInstance ( cls ) ; }
Distance : 10

196
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor . outerClassInstance ( outerClassInstance , cls , cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor . outerClassInstance ( outerClassInstance , cls , cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 9

197
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , cls , T ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . outerClassInstance ( outerClassInstance , cls , T ) ; } return outerClassInstance ( cls ) ; }
Distance : 10

198
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor . outerClassInstance ( outerClassInstance , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor . outerClassInstance ( outerClassInstance , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

199
Tree	{ if ( outerClassInstance == null ) { return cls . outerClassInstance ( outerClassInstance , cls , cls ) ; } return outerClassInstance ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls . outerClassInstance ( outerClassInstance , cls , cls ) ; } return outerClassInstance ( cls ) ; }
Distance : 10

========================================================================


========================================================================
Example Number: 83
Parent Code is: 
Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
-------------------------------------------------------------------------------
Child code is: 
Object injected = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields , instance ) . thenInject () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Object})) (59 (800{val=injected}) (204{val==}) (32 (32 (800{val=mockCandidateFilter}) (235{val=.}) (802{val=filterCandidate}) (214{val=(}) (800{val=mocks}) (234{val=,}) (800{val=field}) (234{val=,}) (800{val=instance}) (215{val=)})) (235{val=.}) (802{val=thenInject}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Object})) (59 (800{val=injected}) (204{val==}) (32 (32 (800{val=mockCandidateFilter}) (235{val=.}) (802{val=filterCandidate}) (214{val=(}) (800{val=mocks}) (234{val=,}) (800{val=field}) (234{val=,}) (800{val=orderedInstanceFields}) (234{val=,}) (800{val=instance}) (215{val=)})) (235{val=.}) (802{val=thenInject}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/19/parent/src_org_mockito_internal_configuration_injection_PropertyAndSetterInjection.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Object injected = injectionOccurred ( mocks , field ) . thenInject () ;
Code	Object injected = injectionOccurred ( mocks , field ) . thenInject () ;
Distance : 7

1
Tree	Object injected = injectionOccurred ( mocks , field ) . injectionOccurred () ;
Code	Object injected = injectionOccurred ( mocks , field ) . injectionOccurred () ;
Distance : 8

2
Tree	Object injected = injected ( mocks , field ) . thenInject () ;
Code	Object injected = injected ( mocks , field ) . thenInject () ;
Distance : 7

3
Tree	Object injectionOccurred = injected ( mocks , field , instance ) . injected () ;
Code	Object injectionOccurred = injected ( mocks , field , instance ) . injected () ;
Distance : 7

4
Tree	Object injected = this . injected () . remove () ;
Code	Object injected = this . injected () . remove () ;
Distance : 12

5
Tree	Object injected = this . injected () . filterCandidate () ;
Code	Object injected = this . injected () . filterCandidate () ;
Distance : 12

6
Tree	Object injected = injectionOccurred ( mocks , field , instance ) . injectionOccurred () ;
Code	Object injected = injectionOccurred ( mocks , field , instance ) . injectionOccurred () ;
Distance : 6

7
Tree	Object List = injected ( mocks , field , instance ) . injected () ;
Code	Object List = injected ( mocks , field , instance ) . injected () ;
Distance : 7

8
Tree	Object injected = remove ( mocks , field , instance ) . injected () ;
Code	Object injected = remove ( mocks , field , instance ) . injected () ;
Distance : 6

9
Tree	Object List = injected ( mocks , field ) . injected () ;
Code	Object List = injected ( mocks , field ) . injected () ;
Distance : 9

10
Tree	Object injectionOccurred = injected ( mocks , field ) . injected () ;
Code	Object injectionOccurred = injected ( mocks , field ) . injected () ;
Distance : 9

11
Tree	Object injected = mockCandidateFilter ( mocks , field ) . injected () ;
Code	Object injected = mockCandidateFilter ( mocks , field ) . injected () ;
Distance : 7

12
Tree	Object injected = filterCandidate ( mocks , field ) . injectionOccurred () ;
Code	Object injected = filterCandidate ( mocks , field ) . injectionOccurred () ;
Distance : 7

13
Tree	Object List = this . injected () . injected () ;
Code	Object List = this . injected () . injected () ;
Distance : 13

14
Tree	Object injected = injected ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected ( mocks , field , instance ) . thenInject () ;
Distance : 5

15
Tree	Object injectionOccurred = this . injected () . injected () ;
Code	Object injectionOccurred = this . injected () . injected () ;
Distance : 13

16
Tree	Object injectionOccurred = injected . injected ( mocks , field , instance ) ;
Code	Object injectionOccurred = injected . injected ( mocks , field , instance ) ;
Distance : 8

17
Tree	Object injectionOccurred = injectionOccurred ( mocks , field ) . injected () ;
Code	Object injectionOccurred = injectionOccurred ( mocks , field ) . injected () ;
Distance : 9

18
Tree	Object injected = injected . injected ( mocks , field , instance ) . injected () ;
Code	Object injected = injected . injected ( mocks , field , instance ) . injected () ;
Distance : 5

19
Tree	Object injected = injected ( mocks , NUMBER_CONSTANT ) . injected () ;
Code	Object injected = injected ( mocks , NUMBER_CONSTANT ) . injected () ;
Distance : 9

20
Tree	Object List = injected ( mocks , field ) . injected () ;
Code	Object List = injected ( mocks , field ) . injected () ;
Distance : 9

21
Tree	Object injected = ( ( mocks ) this ) . injected ( mocks , field , instance ) . injectionOccurred () ;
Code	Object injected = ( ( mocks ) this ) . injected ( mocks , field , instance ) . injectionOccurred () ;
Distance : 10

22
Tree	Object injected = injectionOccurred . injected ( mocks , field , instance ) . injected () ;
Code	Object injected = injectionOccurred . injected ( mocks , field , instance ) . injected () ;
Distance : 5

23
Tree	Object injectionOccurred = ( ( mocks ) this ) . injected ( mocks , field , instance ) . injected () ;
Code	Object injectionOccurred = ( ( mocks ) this ) . injected ( mocks , field , instance ) . injected () ;
Distance : 11

24
Tree	Object injected = injected ( mocks , field , instance ) . remove () ;
Code	Object injected = injected ( mocks , field , instance ) . remove () ;
Distance : 6

25
Tree	Object injected = ( ( mocks ) field ) . remove ( mocks , field , instance ) . injected () ;
Code	Object injected = ( ( mocks ) field ) . remove ( mocks , field , instance ) . injected () ;
Distance : 10

26
Tree	Object injected = injectionOccurred ( mocks , field , instance ) . remove () ;
Code	Object injected = injectionOccurred ( mocks , field , instance ) . remove () ;
Distance : 6

27
Tree	Object List = ( ( mocks ) field ) . injected ( mocks , field , instance ) . injected () ;
Code	Object List = ( ( mocks ) field ) . injected ( mocks , field , instance ) . injected () ;
Distance : 11

28
Tree	Object injected = remove ( mocks , field ) . injected () ;
Code	Object injected = remove ( mocks , field ) . injected () ;
Distance : 8

29
Tree	Object injected = injected ( mocks , field ) . thenInject () ;
Code	Object injected = injected ( mocks , field ) . thenInject () ;
Distance : 7

30
Tree	Object injectionOccurred = injectionOccurred . injected ( mocks , field , instance ) ;
Code	Object injectionOccurred = injectionOccurred . injected ( mocks , field , instance ) ;
Distance : 8

31
Tree	Object List = injected . injected ( mocks , field , instance ) ;
Code	Object List = injected . injected ( mocks , field , instance ) ;
Distance : 8

32
Tree	Object injected = injected ( mocks , field , instance ) . remove () ;
Code	Object injected = injected ( mocks , field , instance ) . remove () ;
Distance : 6

33
Tree	Object injected = mockCandidateFilter . injected ( mocks , field , instance ) ;
Code	Object injected = mockCandidateFilter . injected ( mocks , field , instance ) ;
Distance : 6

34
Tree	Object injected = ( ( mocks ) field ) . injected ( mocks , field , instance ) . remove () ;
Code	Object injected = ( ( mocks ) field ) . injected ( mocks , field , instance ) . remove () ;
Distance : 10

35
Tree	Object injected = injected ( mocks , NUMBER_CONSTANT ) . thenInject () ;
Code	Object injected = injected ( mocks , NUMBER_CONSTANT ) . thenInject () ;
Distance : 8

36
Tree	Object injected = ( ( mocks ) this ) . iterator ( mocks , field , instance ) . injected () ;
Code	Object injected = ( ( mocks ) this ) . iterator ( mocks , field , instance ) . injected () ;
Distance : 10

37
Tree	Object List = injected ( mocks , NUMBER_CONSTANT ) . injected () ;
Code	Object List = injected ( mocks , NUMBER_CONSTANT ) . injected () ;
Distance : 10

38
Tree	Object injected = injected ( mocks , field , instance , instance ) . injected () ;
Code	Object injected = injected ( mocks , field , instance , instance ) . injected () ;
Distance : 5

39
Tree	Object injected = injected . injected ( mocks , field , instance ) . injectionOccurred () ;
Code	Object injected = injected . injected ( mocks , field , instance ) . injectionOccurred () ;
Distance : 5

40
Tree	Object injected = injected . injected ( mocks , field , NUMBER_CONSTANT ) . injected () ;
Code	Object injected = injected . injected ( mocks , field , NUMBER_CONSTANT ) . injected () ;
Distance : 6

41
Tree	Object injected = injected . injected ( NUMBER_CONSTANT , field , instance , instance ) . injected () ;
Code	Object injected = injected . injected ( NUMBER_CONSTANT , field , instance , instance ) . injected () ;
Distance : 5

42
Tree	Object injected = injected . remove ( mocks , field , instance ) ;
Code	Object injected = injected . remove ( mocks , field , instance ) ;
Distance : 7

43
Tree	Object injected = this . filterCandidate () . injected () ;
Code	Object injected = this . filterCandidate () . injected () ;
Distance : 11

44
Tree	Object injected = injectionOccurred . injected ( mocks , field , NUMBER_CONSTANT ) . injected () ;
Code	Object injected = injectionOccurred . injected ( mocks , field , NUMBER_CONSTANT ) . injected () ;
Distance : 6

45
Tree	Object injectionOccurred = injected ( mocks , field , instance , instance ) . injected () ;
Code	Object injectionOccurred = injected ( mocks , field , instance , instance ) . injected () ;
Distance : 6

46
Tree	Object injected = injected . injectionOccurred ( mocks , field , instance ) ;
Code	Object injected = injected . injectionOccurred ( mocks , field , instance ) ;
Distance : 7

47
Tree	Object injected = injected ( mocks , field , instance , instance ) . injectionOccurred () ;
Code	Object injected = injected ( mocks , field , instance , instance ) . injectionOccurred () ;
Distance : 5

48
Tree	Object injected = injectionOccurred ( mocks , NUMBER_CONSTANT ) . injected () ;
Code	Object injected = injectionOccurred ( mocks , NUMBER_CONSTANT ) . injected () ;
Distance : 9

49
Tree	Object injected = injectionOccurred . injected ( NUMBER_CONSTANT , field , instance , instance ) . injected () ;
Code	Object injected = injectionOccurred . injected ( NUMBER_CONSTANT , field , instance , instance ) . injected () ;
Distance : 5

50
Tree	Object List = injectionOccurred . injected ( mocks , field , instance ) ;
Code	Object List = injectionOccurred . injected ( mocks , field , instance ) ;
Distance : 8

51
Tree	Object injected = injected ( mocks , field , instance , instance ) . thenInject () ;
Code	Object injected = injected ( mocks , field , instance , instance ) . thenInject () ;
Distance : 4

52
Tree	Object List = injected . injected ( mocks , field , instance ) . injected () ;
Code	Object List = injected . injected ( mocks , field , instance ) . injected () ;
Distance : 6

53
Tree	Object injected = mockCandidateFilter . injected ( mocks , field , instance ) . injected () ;
Code	Object injected = mockCandidateFilter . injected ( mocks , field , instance ) . injected () ;
Distance : 4

54
Tree	Object injectionOccurred = injected . injected ( mocks , field , instance . instance () ) . injected () ;
Code	Object injectionOccurred = injected . injected ( mocks , field , instance . instance () ) . injected () ;
Distance : 7

55
Tree	Object injected = injected ( mocks , field , instance , iterator ) . injected () ;
Code	Object injected = injected ( mocks , field , instance , iterator ) . injected () ;
Distance : 6

56
Tree	Object injectionOccurred = injectionOccurred . injected ( mocks , field , instance . instance () ) . injected () ;
Code	Object injectionOccurred = injectionOccurred . injected ( mocks , field , instance . instance () ) . injected () ;
Distance : 7

57
Tree	Object injected = ( ( mocks ) this ) . injected ( mocks , field , instance ) . thenInject () ;
Code	Object injected = ( ( mocks ) this ) . injected ( mocks , field , instance ) . thenInject () ;
Distance : 9

58
Tree	Object injected = injected . injected ( mocks , field ) . thenInject () ;
Code	Object injected = injected . injected ( mocks , field ) . thenInject () ;
Distance : 6

59
Tree	Object injected = injected . injected ( mocks , field , NUMBER_CONSTANT ) . injectionOccurred () ;
Code	Object injected = injected . injected ( mocks , field , NUMBER_CONSTANT ) . injectionOccurred () ;
Distance : 6

60
Tree	Object injectionOccurred = injected . injected ( mocks , field , instance ) . injected () ;
Code	Object injectionOccurred = injected . injected ( mocks , field , instance ) . injected () ;
Distance : 6

61
Tree	Object injected = injectionOccurred . injected ( mocks , field , instance ) . injectionOccurred () ;
Code	Object injected = injectionOccurred . injected ( mocks , field , instance ) . injectionOccurred () ;
Distance : 5

62
Tree	Object injected = injectionOccurred . remove ( mocks , field , instance ) ;
Code	Object injected = injectionOccurred . remove ( mocks , field , instance ) ;
Distance : 7

63
Tree	Object injected = injected . injected ( mocks , field ) . injectionOccurred () ;
Code	Object injected = injected . injected ( mocks , field ) . injectionOccurred () ;
Distance : 7

64
Tree	Object injected = ( ( mocks ) this ) . injectionOccurred ( mocks , field , instance ) . injected () ;
Code	Object injected = ( ( mocks ) this ) . injectionOccurred ( mocks , field , instance ) . injected () ;
Distance : 10

65
Tree	Object injectionOccurred = injectionOccurred . injected ( mocks , field , instance ) . injected () ;
Code	Object injectionOccurred = injectionOccurred . injected ( mocks , field , instance ) . injected () ;
Distance : 6

66
Tree	Object injected = injectionOccurred . injected ( mocks , field ) . thenInject () ;
Code	Object injected = injectionOccurred . injected ( mocks , field ) . thenInject () ;
Distance : 6

67
Tree	Object injected = injectionOccurred . injected ( mocks , field , NUMBER_CONSTANT ) . injectionOccurred () ;
Code	Object injected = injectionOccurred . injected ( mocks , field , NUMBER_CONSTANT ) . injectionOccurred () ;
Distance : 6

68
Tree	Object injectionOccurred = injectionOccurred . injected ( NUMBER_CONSTANT , field , instance , instance ) . injected () ;
Code	Object injectionOccurred = injectionOccurred . injected ( NUMBER_CONSTANT , field , instance , instance ) . injected () ;
Distance : 6

69
Tree	Object injected = injected . injected ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Code	Object injected = injected . injected ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Distance : 5

70
Tree	Object injected = injected . injected ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected . injected ( mocks , field , instance ) . thenInject () ;
Distance : 4

71
Tree	Object injected = injectionOccurred . injected ( mocks , field ) . injectionOccurred () ;
Code	Object injected = injectionOccurred . injected ( mocks , field ) . injectionOccurred () ;
Distance : 7

72
Tree	Object injected = filterCandidate ( mocks , NUMBER_CONSTANT ) . injected () ;
Code	Object injected = filterCandidate ( mocks , NUMBER_CONSTANT ) . injected () ;
Distance : 8

73
Tree	Object injected = injectionOccurred . injected ( NUMBER_CONSTANT , field , instance , instance ) . injectionOccurred () ;
Code	Object injected = injectionOccurred . injected ( NUMBER_CONSTANT , field , instance , instance ) . injectionOccurred () ;
Distance : 5

74
Tree	Object injected = injectionOccurred . injected ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injectionOccurred . injected ( mocks , field , instance ) . thenInject () ;
Distance : 4

75
Tree	Object injected = injectionOccurred . injected ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Code	Object injected = injectionOccurred . injected ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Distance : 5

76
Tree	Object injected = injected . injected ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Code	Object injected = injected . injected ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Distance : 4

77
Tree	Object injected = injectionOccurred ( mocks , field , instance , Object ) . injected () ;
Code	Object injected = injectionOccurred ( mocks , field , instance , Object ) . injected () ;
Distance : 6

78
Tree	Object injected = injectionOccurred . injected ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Code	Object injected = injectionOccurred . injected ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Distance : 4

79
Tree	Object List = injected . injected ( mocks , field , NUMBER_CONSTANT ) . injected () ;
Code	Object List = injected . injected ( mocks , field , NUMBER_CONSTANT ) . injected () ;
Distance : 7

80
Tree	Object injected = this . injectionOccurred () . injected () ;
Code	Object injected = this . injectionOccurred () . injected () ;
Distance : 12

81
Tree	Object injected = mockCandidateFilter . injected ( mocks , field , NUMBER_CONSTANT ) . injected () ;
Code	Object injected = mockCandidateFilter . injected ( mocks , field , NUMBER_CONSTANT ) . injected () ;
Distance : 5

82
Tree	Object injected = injected ( mocks , field , instance ) . injectionOccurred () ;
Code	Object injected = injected ( mocks , field , instance ) . injectionOccurred () ;
Distance : 6

83
Tree	Object injected = this . remove () . injected () ;
Code	Object injected = this . remove () . injected () ;
Distance : 12

84
Tree	Object injected = injected . injected ( mocks , field , instance ) . injectionOccurred () ;
Code	Object injected = injected . injected ( mocks , field , instance ) . injectionOccurred () ;
Distance : 5

85
Tree	Object injected = ( ( mocks ) this ) . thenInject ( mocks , field , instance ) . injected () ;
Code	Object injected = ( ( mocks ) this ) . thenInject ( mocks , field , instance ) . injected () ;
Distance : 10

86
Tree	Object mocks = this . injected () . injected () ;
Code	Object mocks = this . injected () . injected () ;
Distance : 13

87
Tree	Object injected = this . injected () . injectionOccurred () ;
Code	Object injected = this . injected () . injectionOccurred () ;
Distance : 12

88
Tree	Object List = injected ( mocks , field , instance , instance ) . injected () ;
Code	Object List = injected ( mocks , field , instance , instance ) . injected () ;
Distance : 6

89
Tree	Object injected = ( ( mocks ) field ) . injectionOccurred ( mocks , field , instance ) . injected () ;
Code	Object injected = ( ( mocks ) field ) . injectionOccurred ( mocks , field , instance ) . injected () ;
Distance : 10

90
Tree	Object injected = ( ( mocks ) field ) . injected ( mocks , field , instance ) . injectionOccurred () ;
Code	Object injected = ( ( mocks ) field ) . injected ( mocks , field , instance ) . injectionOccurred () ;
Distance : 10

91
Tree	Object List = injected . injected ( mocks , field ) . injected () ;
Code	Object List = injected . injected ( mocks , field ) . injected () ;
Distance : 8

92
Tree	Object injected = ( ( mocks ) this ) . remove ( mocks , field , instance ) . injected () ;
Code	Object injected = ( ( mocks ) this ) . remove ( mocks , field , instance ) . injected () ;
Distance : 10

93
Tree	Object injected = mockCandidateFilter . injected ( mocks , field ) . injected () ;
Code	Object injected = mockCandidateFilter . injected ( mocks , field ) . injected () ;
Distance : 6

94
Tree	Object injected = injectionOccurred ( mocks , field , instance ) . injectionOccurred () ;
Code	Object injected = injectionOccurred ( mocks , field , instance ) . injectionOccurred () ;
Distance : 6

95
Tree	Object injectionOccurred = injected . injected ( mocks , field ) . injected () ;
Code	Object injectionOccurred = injected . injected ( mocks , field ) . injected () ;
Distance : 8

96
Tree	Object injectionOccurred = injectionOccurred . injected ( mocks , field ) . injected () ;
Code	Object injectionOccurred = injectionOccurred . injected ( mocks , field ) . injected () ;
Distance : 8

97
Tree	Object injected = injected . injected ( mocks . injected () , field , instance ) . thenInject () ;
Code	Object injected = injected . injected ( mocks . injected () , field , instance ) . thenInject () ;
Distance : 6

98
Tree	Object injected = injected . injected ( mocks . injected ( mocks , field , instance ) , thenInject , instance ) ;
Code	Object injected = injected . injected ( mocks . injected ( mocks , field , instance ) , thenInject , instance ) ;
Distance : 11

99
Tree	Object List = injected . injected ( NUMBER_CONSTANT , field , instance , instance ) . injected () ;
Code	Object List = injected . injected ( NUMBER_CONSTANT , field , instance , instance ) . injected () ;
Distance : 6

100
Tree	Object injected = mockCandidateFilter . injected ( NUMBER_CONSTANT , field , instance , instance ) . injected () ;
Code	Object injected = mockCandidateFilter . injected ( NUMBER_CONSTANT , field , instance , instance ) . injected () ;
Distance : 4

101
Tree	Object injected = injectionOccurred ( mocks , field , instance ) . injected () ;
Code	Object injected = injectionOccurred ( mocks , field , instance ) . injected () ;
Distance : 6

102
Tree	Object injected = injectionOccurred . injected ( mocks . injected () , field , instance ) . thenInject () ;
Code	Object injected = injectionOccurred . injected ( mocks . injected () , field , instance ) . thenInject () ;
Distance : 6

103
Tree	Object injected = injected ( mocks , field ) . injected () ;
Code	Object injected = injected ( mocks , field ) . injected () ;
Distance : 8

104
Tree	Object injected = injected ( mocks , field , instance ) . injected () ;
Code	Object injected = injected ( mocks , field , instance ) . injected () ;
Distance : 6

105
Tree	Object injected = injected ( mocks , field ) . injected () ;
Code	Object injected = injected ( mocks , field ) . injected () ;
Distance : 8

106
Tree	Object injected = injected . injected ( mocks . injected ( mocks , field , instance ) , injected , field ) ;
Code	Object injected = injected . injected ( mocks . injected ( mocks , field , instance ) , injected , field ) ;
Distance : 12

107
Tree	Object injected = injected . injected ( mocks . remove ( mocks , field , instance ) , injected , instance ) ;
Code	Object injected = injected . injected ( mocks . remove ( mocks , field , instance ) , injected , instance ) ;
Distance : 12

108
Tree	Object injected = injectionOccurred . injected ( mocks . injected ( mocks , field , instance ) , thenInject , instance ) ;
Code	Object injected = injectionOccurred . injected ( mocks . injected ( mocks , field , instance ) , thenInject , instance ) ;
Distance : 11

109
Tree	Object List = injected . injected () . injected ( mocks , field , instance ) . injected () ;
Code	Object List = injected . injected () . injected ( mocks , field , instance ) . injected () ;
Distance : 9

110
Tree	Object injected = mockCandidateFilter . injected () . injected ( mocks , field , instance ) . injected () ;
Code	Object injected = mockCandidateFilter . injected () . injected ( mocks , field , instance ) . injected () ;
Distance : 7

111
Tree	Object injectionOccurred = injected ( mocks , field , instance ) . injected () ;
Code	Object injectionOccurred = injected ( mocks , field , instance ) . injected () ;
Distance : 7

112
Tree	Object injected = this . injected () . injected () ;
Code	Object injected = this . injected () . injected () ;
Distance : 12

113
Tree	Object injectionOccurred = injected . injected ( mocks , field , instance ) . injected () ;
Code	Object injectionOccurred = injected . injected ( mocks , field , instance ) . injected () ;
Distance : 6

114
Tree	Object injected = injectionOccurred ( mocks , field ) . injected () ;
Code	Object injected = injectionOccurred ( mocks , field ) . injected () ;
Distance : 8

115
Tree	Object injected = ( ( mocks ) this ) . injected ( mocks , field , instance ) . injected () ;
Code	Object injected = ( ( mocks ) this ) . injected ( mocks , field , instance ) . injected () ;
Distance : 10

116
Tree	Object injected = filterCandidate ( mocks , field , instance ) . injected () ;
Code	Object injected = filterCandidate ( mocks , field , instance ) . injected () ;
Distance : 5

117
Tree	Object injectionOccurred = ( ( mocks ) field ) . injected ( mocks , field , instance ) . injected () ;
Code	Object injectionOccurred = ( ( mocks ) field ) . injected ( mocks , field , instance ) . injected () ;
Distance : 11

118
Tree	Object injected = injected ( mocks , field ) . injectionOccurred () ;
Code	Object injected = injected ( mocks , field ) . injectionOccurred () ;
Distance : 8

119
Tree	Object List = ( ( mocks ) this ) . injected ( mocks , field , instance ) . injected () ;
Code	Object List = ( ( mocks ) this ) . injected ( mocks , field , instance ) . injected () ;
Distance : 11

120
Tree	Object injected = injected . injected ( mocks , field , instance ) ;
Code	Object injected = injected . injected ( mocks , field , instance ) ;
Distance : 7

121
Tree	Object injectionOccurred = injected ( mocks , field ) . injected () ;
Code	Object injectionOccurred = injected ( mocks , field ) . injected () ;
Distance : 9

122
Tree	Object injectionOccurred = injectionOccurred ( mocks , field , instance ) . injected () ;
Code	Object injectionOccurred = injectionOccurred ( mocks , field , instance ) . injected () ;
Distance : 7

123
Tree	Object injected = injectionOccurred . injected ( mocks , field , instance ) ;
Code	Object injected = injectionOccurred . injected ( mocks , field , instance ) ;
Distance : 7

124
Tree	Object injected = injectionOccurred ( mocks , field ) . injectionOccurred () ;
Code	Object injected = injectionOccurred ( mocks , field ) . injectionOccurred () ;
Distance : 8

125
Tree	Object injected = injectionOccurred . injected ( mocks , field , instance ) . injectionOccurred () ;
Code	Object injected = injectionOccurred . injected ( mocks , field , instance ) . injectionOccurred () ;
Distance : 5

126
Tree	Object injected = injected ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected ( mocks , field , instance ) . thenInject () ;
Distance : 5

127
Tree	Object injected = ( ( mocks ) this ) . injected ( mocks , field , instance ) . remove () ;
Code	Object injected = ( ( mocks ) this ) . injected ( mocks , field , instance ) . remove () ;
Distance : 10

128
Tree	Object injectionOccurred = injectionOccurred . injected ( mocks , field , instance ) . injected () ;
Code	Object injectionOccurred = injectionOccurred . injected ( mocks , field , instance ) . injected () ;
Distance : 6

129
Tree	Object injected = injected ( mocks , field , instance ) . injected () ;
Code	Object injected = injected ( mocks , field , instance ) . injected () ;
Distance : 6

130
Tree	Object injected = ( ( mocks ) field ) . injected ( mocks , field , instance ) . thenInject () ;
Code	Object injected = ( ( mocks ) field ) . injected ( mocks , field , instance ) . thenInject () ;
Distance : 9

131
Tree	Object injected = injected ( mocks , NUMBER_CONSTANT ) . injectionOccurred () ;
Code	Object injected = injected ( mocks , NUMBER_CONSTANT ) . injectionOccurred () ;
Distance : 9

132
Tree	Object injected = injected . injected ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected . injected ( mocks , field , instance ) . thenInject () ;
Distance : 4

133
Tree	Object injected = injected ( mocks , field , instance ) . injectionOccurred () ;
Code	Object injected = injected ( mocks , field , instance ) . injectionOccurred () ;
Distance : 6

134
Tree	Object injected = injectionOccurred . injected ( mocks , field , instance ) . injected () ;
Code	Object injected = injectionOccurred . injected ( mocks , field , instance ) . injected () ;
Distance : 5

135
Tree	Object injected = injected ( mocks , NUMBER_CONSTANT ) . remove () ;
Code	Object injected = injected ( mocks , NUMBER_CONSTANT ) . remove () ;
Distance : 9

136
Tree	Object List = injected . injected ( mocks , field , instance ) . injected () ;
Code	Object List = injected . injected ( mocks , field , instance ) . injected () ;
Distance : 6

137
Tree	Object injected = injectionOccurred ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injectionOccurred ( mocks , field , instance ) . thenInject () ;
Distance : 5

138
Tree	Object injected = mockCandidateFilter . injected ( mocks , field , instance ) . injected () ;
Code	Object injected = mockCandidateFilter . injected ( mocks , field , instance ) . injected () ;
Distance : 4

139
Tree	Object injected = injectionOccurred ( mocks , field ) . injected () ;
Code	Object injected = injectionOccurred ( mocks , field ) . injected () ;
Distance : 8

140
Tree	Object injected = ( ( mocks ) field ) . injected ( mocks , field , instance ) . injected () ;
Code	Object injected = ( ( mocks ) field ) . injected ( mocks , field , instance ) . injected () ;
Distance : 10

141
Tree	Object injected = injected . injected ( mocks , field ) . injected () ;
Code	Object injected = injected . injected ( mocks , field ) . injected () ;
Distance : 7

142
Tree	Object injected = injectionOccurred ( mocks , NUMBER_CONSTANT ) . injectionOccurred () ;
Code	Object injected = injectionOccurred ( mocks , NUMBER_CONSTANT ) . injectionOccurred () ;
Distance : 9

143
Tree	Object injected = injected . injected ( mocks , field , instance . instance () ) . thenInject () ;
Code	Object injected = injected . injected ( mocks , field , instance . instance () ) . thenInject () ;
Distance : 5

144
Tree	Object injected = remove ( mocks , NUMBER_CONSTANT ) . injected () ;
Code	Object injected = remove ( mocks , NUMBER_CONSTANT ) . injected () ;
Distance : 9

145
Tree	Object injected = injectionOccurred . injected ( mocks , field , instance . instance () ) . thenInject () ;
Code	Object injected = injectionOccurred . injected ( mocks , field , instance . instance () ) . thenInject () ;
Distance : 5

146
Tree	Object injected = filterCandidate ( mocks , field ) . injected () ;
Code	Object injected = filterCandidate ( mocks , field ) . injected () ;
Distance : 7

147
Tree	Object injectionOccurred = injected . injected ( mocks , field , NUMBER_CONSTANT ) . injected () ;
Code	Object injectionOccurred = injected . injected ( mocks , field , NUMBER_CONSTANT ) . injected () ;
Distance : 7

148
Tree	Object injected = injectionOccurred . injected ( mocks , field ) . injected () ;
Code	Object injected = injectionOccurred . injected ( mocks , field ) . injected () ;
Distance : 7

149
Tree	Object List = injected . injected ( mocks , field , instance . instance () ) . injected () ;
Code	Object List = injected . injected ( mocks , field , instance . instance () ) . injected () ;
Distance : 7

150
Tree	Object injectionOccurred = injected . injected ( NUMBER_CONSTANT , field , instance , instance ) . injected () ;
Code	Object injectionOccurred = injected . injected ( NUMBER_CONSTANT , field , instance , instance ) . injected () ;
Distance : 6

151
Tree	Object injected = mockCandidateFilter . injected ( mocks , field , instance . instance () ) . injected () ;
Code	Object injected = mockCandidateFilter . injected ( mocks , field , instance . instance () ) . injected () ;
Distance : 5

152
Tree	Object injected = injectionOccurred . injected ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injectionOccurred . injected ( mocks , field , instance ) . thenInject () ;
Distance : 4

153
Tree	Object injected = injected . injected ( mocks . remove () , field , instance ) . injected () ;
Code	Object injected = injected . injected ( mocks . remove () , field , instance ) . injected () ;
Distance : 7

154
Tree	Object mocks = ( ( mocks ) field ) . injected ( mocks , field , instance ) . injected () ;
Code	Object mocks = ( ( mocks ) field ) . injected ( mocks , field , instance ) . injected () ;
Distance : 11

155
Tree	Object List = injected . injected ( mocks . injected () , field , instance ) . injected () ;
Code	Object List = injected . injected ( mocks . injected () , field , instance ) . injected () ;
Distance : 8

156
Tree	Object injectionOccurred = injected . injected () . injected ( mocks , field , instance ) . injected () ;
Code	Object injectionOccurred = injected . injected () . injected ( mocks , field , instance ) . injected () ;
Distance : 9

157
Tree	Object injectionOccurred = injectionOccurred . injected ( mocks . injected ( mocks , field , instance ) , injected , instance ) ;
Code	Object injectionOccurred = injectionOccurred . injected ( mocks . injected ( mocks , field , instance ) , injected , instance ) ;
Distance : 13

158
Tree	Object injected = injectionOccurred ( mocks , field , instance , instance ) . injected () ;
Code	Object injected = injectionOccurred ( mocks , field , instance , instance ) . injected () ;
Distance : 5

159
Tree	Object injected = injected . injected ( mocks , field , instance . instance () ) . injected () ;
Code	Object injected = injected . injected ( mocks , field , instance . instance () ) . injected () ;
Distance : 6

160
Tree	Object injected = injected . remove ( mocks , field , instance . instance () ) . injected () ;
Code	Object injected = injected . remove ( mocks , field , instance . instance () ) . injected () ;
Distance : 6

161
Tree	Object injected = injectionOccurred . injected () . injected ( mocks , field , instance ) . injected () ;
Code	Object injected = injectionOccurred . injected () . injected ( mocks , field , instance ) . injected () ;
Distance : 8

162
Tree	Object injected = injected . injected ( mocks , field , instance . instance () ) . injectionOccurred () ;
Code	Object injected = injected . injected ( mocks , field , instance . instance () ) . injectionOccurred () ;
Distance : 6

163
Tree	Object injected = filterCandidate ( mocks , field , instance , instance ) . injected () ;
Code	Object injected = filterCandidate ( mocks , field , instance , instance ) . injected () ;
Distance : 4

164
Tree	Object injected = injectionOccurred . injected ( mocks . injected () , field , instance ) . injected () ;
Code	Object injected = injectionOccurred . injected ( mocks . injected () , field , instance ) . injected () ;
Distance : 7

165
Tree	Object injected = injected . injected ( mocks , instance ) . injected () ;
Code	Object injected = injected . injected ( mocks , instance ) . injected () ;
Distance : 7

166
Tree	Object injected = injectionOccurred . injected ( mocks , instance ) . injected () ;
Code	Object injected = injectionOccurred . injected ( mocks , instance ) . injected () ;
Distance : 7

167
Tree	Object injected = injectionOccurred . injected () . injected ( mocks , field , instance ) . injectionOccurred () ;
Code	Object injected = injectionOccurred . injected () . injected ( mocks , field , instance ) . injectionOccurred () ;
Distance : 8

168
Tree	Object List = injected . injected ( mocks , instance ) . injected () ;
Code	Object List = injected . injected ( mocks , instance ) . injected () ;
Distance : 8

169
Tree	Object injectionOccurred = injected . injected ( mocks , instance ) . injected () ;
Code	Object injectionOccurred = injected . injected ( mocks , instance ) . injected () ;
Distance : 8

170
Tree	Object injectionOccurred = injected . injected ( mocks . injected () , field , instance ) . injected () ;
Code	Object injectionOccurred = injected . injected ( mocks . injected () , field , instance ) . injected () ;
Distance : 8

171
Tree	Object injectionOccurred = injectionOccurred . injected ( mocks , instance ) . injected () ;
Code	Object injectionOccurred = injectionOccurred . injected ( mocks , instance ) . injected () ;
Distance : 8

172
Tree	Object injected = mockCandidateFilter . injected ( mocks , instance ) . injected () ;
Code	Object injected = mockCandidateFilter . injected ( mocks , instance ) . injected () ;
Distance : 6

173
Tree	Object injected = injected ( mocks , field ) . injectionOccurred () ;
Code	Object injected = injected ( mocks , field ) . injectionOccurred () ;
Distance : 8

174
Tree	Object injected = injected . injected ( mocks , instance ) . injectionOccurred () ;
Code	Object injected = injected . injected ( mocks , instance ) . injectionOccurred () ;
Distance : 7

175
Tree	Object injected = injectionOccurred . injected ( mocks , field , instance . instance () ) . injected () ;
Code	Object injected = injectionOccurred . injected ( mocks , field , instance . instance () ) . injected () ;
Distance : 6

176
Tree	Object injectionOccurred = injectionOccurred . injected () . injected ( mocks , field , instance ) . injected () ;
Code	Object injectionOccurred = injectionOccurred . injected () . injected ( mocks , field , instance ) . injected () ;
Distance : 9

177
Tree	Object injected = injectionOccurred . injected ( mocks , instance ) . injectionOccurred () ;
Code	Object injected = injectionOccurred . injected ( mocks , instance ) . injectionOccurred () ;
Distance : 7

178
Tree	Object injected = injected . injected () . injected ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected . injected () . injected ( mocks , field , instance ) . thenInject () ;
Distance : 7

179
Tree	Object injected = injected . remove ( mocks , instance ) . injected () ;
Code	Object injected = injected . remove ( mocks , instance ) . injected () ;
Distance : 7

180
Tree	Object injected = ( ( mocks ) field ) . thenInject ( mocks , field , instance ) . injected () ;
Code	Object injected = ( ( mocks ) field ) . thenInject ( mocks , field , instance ) . injected () ;
Distance : 10

181
Tree	Object injected = injectionOccurred ( mocks , field , instance ) . injected () ;
Code	Object injected = injectionOccurred ( mocks , field , instance ) . injected () ;
Distance : 6

182
Tree	Object injectionOccurred = injectionOccurred . injected ( mocks . injected () , field , instance ) . injected () ;
Code	Object injectionOccurred = injectionOccurred . injected ( mocks . injected () , field , instance ) . injected () ;
Distance : 8

183
Tree	Object injectionOccurred = injected ( mocks , NUMBER_CONSTANT ) . injected () ;
Code	Object injectionOccurred = injected ( mocks , NUMBER_CONSTANT ) . injected () ;
Distance : 10

184
Tree	Object injected = injected . injected ( mocks . injected ( mocks , field , instance ) , injected , instance ) ;
Code	Object injected = injected . injected ( mocks . injected ( mocks , field , instance ) , injected , instance ) ;
Distance : 12

185
Tree	Object injected = injected . injectionOccurred ( mocks , instance ) . injected () ;
Code	Object injected = injected . injectionOccurred ( mocks , instance ) . injected () ;
Distance : 7

186
Tree	Object injected = injected . injected () . injected ( mocks , field , instance ) . injected () ;
Code	Object injected = injected . injected () . injected ( mocks , field , instance ) . injected () ;
Distance : 8

187
Tree	Object injected = injected . injected ( mocks . injected () , field , instance ) . injectionOccurred () ;
Code	Object injected = injected . injected ( mocks . injected () , field , instance ) . injectionOccurred () ;
Distance : 7

188
Tree	Object injected = injected . injected ( mocks , field , instance ) . injected () ;
Code	Object injected = injected . injected ( mocks , field , instance ) . injected () ;
Distance : 5

189
Tree	Object injected = injectionOccurred . injected ( mocks . injected () , field , instance ) . injectionOccurred () ;
Code	Object injected = injectionOccurred . injected ( mocks . injected () , field , instance ) . injectionOccurred () ;
Distance : 7

190
Tree	Object injected = injected . injected ( mocks . injected ( mocks , field , instance ) , injectionOccurred , instance ) ;
Code	Object injected = injected . injected ( mocks . injected ( mocks , field , instance ) , injectionOccurred , instance ) ;
Distance : 12

191
Tree	Object injected = injectionOccurred . injected ( mocks . injected ( mocks , field , instance ) , injectionOccurred , instance ) ;
Code	Object injected = injectionOccurred . injected ( mocks . injected ( mocks , field , instance ) , injectionOccurred , instance ) ;
Distance : 12

192
Tree	Object injectionOccurred = injected . injected ( mocks . injected ( mocks , field , instance ) , injected , instance ) ;
Code	Object injectionOccurred = injected . injected ( mocks . injected ( mocks , field , instance ) , injected , instance ) ;
Distance : 13

193
Tree	Object injected = injected . injected ( NUMBER_CONSTANT , field , instance , instance ) . injectionOccurred () ;
Code	Object injected = injected . injected ( NUMBER_CONSTANT , field , instance , instance ) . injectionOccurred () ;
Distance : 5

194
Tree	Object injectionOccurred = injectionOccurred . injected ( mocks , field , NUMBER_CONSTANT ) . injected () ;
Code	Object injectionOccurred = injectionOccurred . injected ( mocks , field , NUMBER_CONSTANT ) . injected () ;
Distance : 7

195
Tree	Object injected = injectionOccurred . injected ( mocks . injected ( mocks , field , instance ) , injected , instance ) ;
Code	Object injected = injectionOccurred . injected ( mocks . injected ( mocks , field , instance ) , injected , instance ) ;
Distance : 12

196
Tree	Object injected = injected ( mocks , field , instance , Object ) . injected () ;
Code	Object injected = injected ( mocks , field , instance , Object ) . injected () ;
Distance : 6

197
Tree	Object injected = injected . injected ( mocks . injected () , field , instance ) . injected () ;
Code	Object injected = injected . injected ( mocks . injected () , field , instance ) . injected () ;
Distance : 7

198
Tree	Object injected = injectionOccurred . injected () . injected ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injectionOccurred . injected () . injected ( mocks , field , instance ) . thenInject () ;
Distance : 7

199
Tree	Object injected = injected . injected () . injected ( mocks , field , instance ) . injectionOccurred () ;
Code	Object injected = injected . injected () . injected ( mocks , field , instance ) . injectionOccurred () ;
Distance : 8

========================================================================


========================================================================
Example Number: 84
Parent Code is: 
{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return MOCKITO_CORE . mock ( classToMock , mockSettings , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=MOCKITO_CORE}) (235{val=.}) (802{val=mock}) (214{val=(}) (800{val=classToMock}) (234{val=,}) (800{val=mockSettings}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=MOCKITO_CORE}) (235{val=.}) (802{val=mock}) (214{val=(}) (800{val=classToMock}) (234{val=,}) (800{val=mockSettings}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/16/parent/src_org_mockito_Mockito.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . mockSettings ( mock ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . mockSettings ( mock ) ) ; }
Distance : 5

1
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . withSettings ( classToMock ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . withSettings ( classToMock ) ) ; }
Distance : 5

2
Tree	{ return MOCKITO_CORE . mock ( classToMock ) . MOCKITO_CORE ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) . MOCKITO_CORE ( classToMock , mockSettings ) ; }
Distance : 6

3
Tree	{ return MOCKITO_CORE . mock ( mock ) ; }
Code	{ return MOCKITO_CORE . mock ( mock ) ; }
Distance : 5

4
Tree	{ return mock () . mock ( classToMock . mockSettings ( classToMock ) ) ; }
Code	{ return mock () . mock ( classToMock . mockSettings ( classToMock ) ) ; }
Distance : 6

5
Tree	{ return MOCKITO_CORE . MOCKITO_CORE () . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . MOCKITO_CORE () . mock ( classToMock , mockSettings ) ; }
Distance : 5

6
Tree	{ return mock . Mockito ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return mock . Mockito ( classToMock , mockSettings , mockSettings ) ; }
Distance : 3

7
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . withSettings () ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . withSettings () ) ; }
Distance : 4

8
Tree	{ return mock . MOCKITO_CORE ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return mock . MOCKITO_CORE ( classToMock , mockSettings , mockSettings ) ; }
Distance : 3

9
Tree	{ return false . mock ( this ) ; }
Code	{ return false . mock ( this ) ; }
Distance : 6

10
Tree	{ return MOCKITO_CORE . mock ( mock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( mock , mockSettings ) ; }
Distance : 3

11
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings ) ; }
Distance : 3

12
Tree	{ return withSettings ( classToMock , mockSettings ) ; }
Code	{ return withSettings ( classToMock , mockSettings ) ; }
Distance : 5

13
Tree	{ return mock ( mock , mockSettings ) ; }
Code	{ return mock ( mock , mockSettings ) ; }
Distance : 5

14
Tree	{ return withSettings () . mock ( classToMock , mockSettings ) ; }
Code	{ return withSettings () . mock ( classToMock , mockSettings ) ; }
Distance : 4

15
Tree	{ return MOCKITO_CORE . mock ( classToMock ) . classToMock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) . classToMock ( classToMock , mockSettings ) ; }
Distance : 6

16
Tree	{ return MOCKITO_CORE . MOCKITO_CORE ( classToMock ) ; }
Code	{ return MOCKITO_CORE . MOCKITO_CORE ( classToMock ) ; }
Distance : 5

17
Tree	{ return MOCKITO_CORE . MOCKITO_CORE ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return MOCKITO_CORE . MOCKITO_CORE ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

18
Tree	{ return MOCKITO_CORE . withSettings ( classToMock ) ; }
Code	{ return MOCKITO_CORE . withSettings ( classToMock ) ; }
Distance : 5

19
Tree	{ return MOCKITO_CORE . mock () . mock ( mock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock () . mock ( mock , mockSettings ) ; }
Distance : 6

20
Tree	{ return mock () . Mockito ( classToMock , mockSettings ) ; }
Code	{ return mock () . Mockito ( classToMock , mockSettings ) ; }
Distance : 5

21
Tree	{ return MOCKITO_CORE . MOCKITO_CORE ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . MOCKITO_CORE ( classToMock , mockSettings ) ; }
Distance : 3

22
Tree	{ return mock ( mock , null , mockSettings ) ; }
Code	{ return mock ( mock , null , mockSettings ) ; }
Distance : 5

23
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
Distance : 2

24
Tree	{ return withSettings () ; }
Code	{ return withSettings () ; }
Distance : 10

25
Tree	{ return mock () . mock ( Class , mockSettings ) ; }
Code	{ return mock () . mock ( Class , mockSettings ) ; }
Distance : 5

26
Tree	{ return mock ( classToMock . withSettings ( classToMock ) , mockSettings ) ; }
Code	{ return mock ( classToMock . withSettings ( classToMock ) , mockSettings ) ; }
Distance : 7

27
Tree	{ return mock () . mock ( classToMock . withSettings ( classToMock ) ) ; }
Code	{ return mock () . mock ( classToMock . withSettings ( classToMock ) ) ; }
Distance : 7

28
Tree	{ return mock ( classToMock , mockSettings ) ; }
Code	{ return mock ( classToMock , mockSettings ) ; }
Distance : 4

29
Tree	{ return false . MOCKITO_CORE ( this ) ; }
Code	{ return false . MOCKITO_CORE ( this ) ; }
Distance : 7

30
Tree	{ return mock () . MOCKITO_CORE ( classToMock , mockSettings ) ; }
Code	{ return mock () . MOCKITO_CORE ( classToMock , mockSettings ) ; }
Distance : 5

31
Tree	{ return MOCKITO_CORE . mock ( classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) ; }
Distance : 4

32
Tree	{ return MOCKITO_CORE ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return MOCKITO_CORE ( classToMock , mockSettings , mockSettings ) ; }
Distance : 3

33
Tree	{ return MOCKITO_CORE ( classToMock , null ) ; }
Code	{ return MOCKITO_CORE ( classToMock , null ) ; }
Distance : 5

34
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . mockSettings ( MOCKITO_CORE ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . mockSettings ( MOCKITO_CORE ) ) ; }
Distance : 5

35
Tree	{ return mock ( classToMock . mockSettings () , mockSettings ) ; }
Code	{ return mock ( classToMock . mockSettings () , mockSettings ) ; }
Distance : 5

36
Tree	{ return MOCKITO_CORE . mock () . classToMock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock () . classToMock ( classToMock , mockSettings ) ; }
Distance : 5

37
Tree	{ return MOCKITO_CORE ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE ( classToMock , mockSettings ) ; }
Distance : 4

38
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE ) ; }
Distance : 5

39
Tree	{ return mock . mock ( classToMock ) ; }
Code	{ return mock . mock ( classToMock ) ; }
Distance : 5

40
Tree	{ return mock . mock ( mock , mockSettings , mockSettings ) ; }
Code	{ return mock . mock ( mock , mockSettings , mockSettings ) ; }
Distance : 3

41
Tree	{ return mock . withSettings ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return mock . withSettings ( classToMock , mockSettings , mockSettings ) ; }
Distance : 3

42
Tree	{ return MOCKITO_CORE ( classToMock , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE ( classToMock , null , mockSettings ) ; }
Distance : 4

43
Tree	{ return withSettings ( classToMock , null , mockSettings ) ; }
Code	{ return withSettings ( classToMock , null , mockSettings ) ; }
Distance : 5

44
Tree	{ return extends . mock ( this ) ; }
Code	{ return extends . mock ( this ) ; }
Distance : 6

45
Tree	{ return mock () . mock ( classToMock . Class ( classToMock ) ) ; }
Code	{ return mock () . mock ( classToMock . Class ( classToMock ) ) ; }
Distance : 7

46
Tree	{ return withSettings ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return withSettings ( classToMock , mockSettings , mockSettings ) ; }
Distance : 4

47
Tree	{ return mock . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return mock . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

48
Tree	{ return mock ( mockSettings , mockSettings ) ; }
Code	{ return mock ( mockSettings , mockSettings ) ; }
Distance : 5

49
Tree	{ return MOCKITO_CORE . mock ( mock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( mock , mockSettings ) ; }
Distance : 3

50
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; }
Code	{ return mock () . mock ( classToMock , mockSettings ) ; }
Distance : 4

51
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . withSettings ( mock ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . withSettings ( mock ) ) ; }
Distance : 5

52
Tree	{ return mock ( classToMock , null ) ; }
Code	{ return mock ( classToMock , null ) ; }
Distance : 5

53
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . MOCKITO_CORE () ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . MOCKITO_CORE () ) ; }
Distance : 4

54
Tree	{ return withSettings . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return withSettings . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

55
Tree	{ return mock ( classToMock . Class () , mockSettings ) ; }
Code	{ return mock ( classToMock . Class () , mockSettings ) ; }
Distance : 6

56
Tree	{ return MOCKITO_CORE . MOCKITO_CORE ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . MOCKITO_CORE ( classToMock , mockSettings ) ; }
Distance : 3

57
Tree	{ return mock ( classToMock . classToMock ( Class ) , mockSettings ) ; }
Code	{ return mock ( classToMock . classToMock ( Class ) , mockSettings ) ; }
Distance : 8

58
Tree	{ return mock () . mock ( classToMock . classToMock ( classToMock ) ) ; }
Code	{ return mock () . mock ( classToMock . classToMock ( classToMock ) ) ; }
Distance : 7

59
Tree	{ return mock ( T , null ) ; }
Code	{ return mock ( T , null ) ; }
Distance : 6

60
Tree	{ return MOCKITO_CORE . mock ( mock , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( mock , null , mockSettings ) ; }
Distance : 3

61
Tree	{ return MOCKITO_CORE . mock ( classToMock , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , null , mockSettings ) ; }
Distance : 2

62
Tree	{ return mock ( classToMock . withSettings () , mockSettings ) ; }
Code	{ return mock ( classToMock . withSettings () , mockSettings ) ; }
Distance : 6

63
Tree	{ return mock ( MOCKITO_CORE , mockSettings ) ; }
Code	{ return mock ( MOCKITO_CORE , mockSettings ) ; }
Distance : 5

64
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings ) ; }
Distance : 3

65
Tree	{ return mock . mock ( classToMock , null , mockSettings ) ; }
Code	{ return mock . mock ( classToMock , null , mockSettings ) ; }
Distance : 3

66
Tree	{ return MOCKITO_CORE . mock () . T ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock () . T ( classToMock , mockSettings ) ; }
Distance : 5

67
Tree	{ return mock . Mockito ( classToMock , mockSettings ) ; }
Code	{ return mock . Mockito ( classToMock , mockSettings ) ; }
Distance : 4

68
Tree	{ return mock ( classToMock . classToMock ( classToMock ) , mockSettings ) ; }
Code	{ return mock ( classToMock . classToMock ( classToMock ) , mockSettings ) ; }
Distance : 7

69
Tree	{ return mock () ; }
Code	{ return mock () ; }
Distance : 9

70
Tree	{ return MOCKITO_CORE . Mockito ( classToMock , mockSettings , mockSettings . mock () ) ; }
Code	{ return MOCKITO_CORE . Mockito ( classToMock , mockSettings , mockSettings . mock () ) ; }
Distance : 5

71
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . classToMock ( classToMock ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . classToMock ( classToMock ) ) ; }
Distance : 5

72
Tree	{ return MOCKITO_CORE ( classToMock . classToMock () , mockSettings ) ; }
Code	{ return MOCKITO_CORE ( classToMock . classToMock () , mockSettings ) ; }
Distance : 6

73
Tree	{ return mock ( mockSettings , mockSettings , mockSettings ) ; }
Code	{ return mock ( mockSettings , mockSettings , mockSettings ) ; }
Distance : 4

74
Tree	{ return mock ( classToMock . mock ( classToMock ) , mockSettings ) ; }
Code	{ return mock ( classToMock . mock ( classToMock ) , mockSettings ) ; }
Distance : 6

75
Tree	{ return MOCKITO_CORE . withSettings ( classToMock , mockSettings , mockSettings . mock () ) ; }
Code	{ return MOCKITO_CORE . withSettings ( classToMock , mockSettings , mockSettings . mock () ) ; }
Distance : 5

76
Tree	{ return mock () . mock ( classToMock . mock ( classToMock ) ) ; }
Code	{ return mock () . mock ( classToMock . mock ( classToMock ) ) ; }
Distance : 7

77
Tree	{ return MOCKITO_CORE . mock () . Mockito ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock () . Mockito ( classToMock , mockSettings ) ; }
Distance : 5

78
Tree	{ return mock ( classToMock , classToMock ) ; }
Code	{ return mock ( classToMock , classToMock ) ; }
Distance : 5

79
Tree	{ return MOCKITO_CORE () ; }
Code	{ return MOCKITO_CORE () ; }
Distance : 9

80
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 1

81
Tree	{ return MOCKITO_CORE . mock () . mock ( Class , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock () . mock ( Class , mockSettings ) ; }
Distance : 6

82
Tree	{ return mock () . mock ( mock , mockSettings ) ; }
Code	{ return mock () . mock ( mock , mockSettings ) ; }
Distance : 5

83
Tree	{ return MOCKITO_CORE . withSettings ( classToMock , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . withSettings ( classToMock , null , mockSettings ) ; }
Distance : 3

84
Tree	{ return try . mock ( this ) ; }
Code	{ return try . mock ( this ) ; }
Distance : 6

85
Tree	{ return MOCKITO_CORE . classToMock ( classToMock , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . classToMock ( classToMock , null , mockSettings ) ; }
Distance : 3

86
Tree	{ return mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 3

87
Tree	{ return super . mock ( this ) ; }
Code	{ return super . mock ( this ) ; }
Distance : 6

88
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
Distance : 2

89
Tree	{ return static . mock ( this ) ; }
Code	{ return static . mock ( this ) ; }
Distance : 6

90
Tree	{ return MOCKITO_CORE . MOCKITO_CORE ( classToMock , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . MOCKITO_CORE ( classToMock , null , mockSettings ) ; }
Distance : 3

91
Tree	{ return mock ( T , mockSettings , mockSettings ) ; }
Code	{ return mock ( T , mockSettings , mockSettings ) ; }
Distance : 4

92
Tree	{ return mock ( Class , mockSettings ) ; }
Code	{ return mock ( Class , mockSettings ) ; }
Distance : 5

93
Tree	{ return mock () . classToMock ( classToMock , mockSettings ) ; }
Code	{ return mock () . classToMock ( classToMock , mockSettings ) ; }
Distance : 5

94
Tree	{ return MOCKITO_CORE . T ( classToMock ) ; }
Code	{ return MOCKITO_CORE . T ( classToMock ) ; }
Distance : 5

95
Tree	{ return mock ( Class , null , mockSettings ) ; }
Code	{ return mock ( Class , null , mockSettings ) ; }
Distance : 5

96
Tree	{ return mock . mock ( classToMock , mockSettings ) ; }
Code	{ return mock . mock ( classToMock , mockSettings ) ; }
Distance : 3

97
Tree	{ return mock ( classToMock . classToMock () , mockSettings ) ; }
Code	{ return mock ( classToMock . classToMock () , mockSettings ) ; }
Distance : 6

98
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . mockSettings ( classToMock ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . mockSettings ( classToMock ) ) ; }
Distance : 5

99
Tree	{ return MOCKITO_CORE . mock ( mock , mockSettings , mockSettings . mock () ) ; }
Code	{ return MOCKITO_CORE . mock ( mock , mockSettings , mockSettings . mock () ) ; }
Distance : 5

100
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . mockSettings ( Class ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . mockSettings ( Class ) ) ; }
Distance : 5

101
Tree	{ return MOCKITO_CORE . mock ( classToMock , classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , classToMock ) ; }
Distance : 3

102
Tree	{ return MOCKITO_CORE . mock () . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock () . mock ( classToMock , mockSettings ) ; }
Distance : 5

103
Tree	{ return char . mock ( this ) ; }
Code	{ return char . mock ( this ) ; }
Distance : 6

104
Tree	{ return MOCKITO_CORE . mock ( T ) ; }
Code	{ return MOCKITO_CORE . mock ( T ) ; }
Distance : 5

105
Tree	{ return mock ( classToMock . Mockito ( classToMock ) , mockSettings ) ; }
Code	{ return mock ( classToMock . Mockito ( classToMock ) , mockSettings ) ; }
Distance : 7

106
Tree	{ return mock ( classToMock . mockSettings ( classToMock ) , mockSettings ) ; }
Code	{ return mock ( classToMock . mockSettings ( classToMock ) , mockSettings ) ; }
Distance : 7

107
Tree	{ return Mockito ( classToMock , mockSettings ) ; }
Code	{ return Mockito ( classToMock , mockSettings ) ; }
Distance : 5

108
Tree	{ return mock ( classToMock . MOCKITO_CORE ( classToMock ) , mockSettings ) ; }
Code	{ return mock ( classToMock . MOCKITO_CORE ( classToMock ) , mockSettings ) ; }
Distance : 7

109
Tree	{ return MOCKITO_CORE . mock ( mock , mockSettings , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( mock , mockSettings , mockSettings ) ; }
Distance : 2

110
Tree	{ return mock . MOCKITO_CORE ( classToMock , mockSettings ) ; }
Code	{ return mock . MOCKITO_CORE ( classToMock , mockSettings ) ; }
Distance : 4

111
Tree	{ return mock . mock ( mock , mockSettings ) ; }
Code	{ return mock . mock ( mock , mockSettings ) ; }
Distance : 4

112
Tree	{ return mock () . MOCKITO_CORE ( classToMock . withSettings ( classToMock ) ) ; }
Code	{ return mock () . MOCKITO_CORE ( classToMock . withSettings ( classToMock ) ) ; }
Distance : 8

113
Tree	{ return MOCKITO_CORE . mock () . mock ( MOCKITO_CORE , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock () . mock ( MOCKITO_CORE , mockSettings ) ; }
Distance : 6

114
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
Distance : 2

115
Tree	{ return Mockito ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return Mockito ( classToMock , mockSettings , mockSettings ) ; }
Distance : 4

116
Tree	{ return MOCKITO_CORE . mock ( classToMock ) . withSettings ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) . withSettings ( classToMock , mockSettings ) ; }
Distance : 6

117
Tree	{ return final . mock ( this ) ; }
Code	{ return final . mock ( this ) ; }
Distance : 6

118
Tree	{ return MOCKITO_CORE . withSettings ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . withSettings ( classToMock , mockSettings ) ; }
Distance : 3

119
Tree	{ return MOCKITO_CORE ( classToMock . withSettings () , mockSettings ) ; }
Code	{ return MOCKITO_CORE ( classToMock . withSettings () , mockSettings ) ; }
Distance : 6

120
Tree	{ return MOCKITO_CORE . classToMock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . classToMock ( classToMock , mockSettings ) ; }
Distance : 3

121
Tree	{ return mock ( classToMock , mockSettings , classToMock ) ; }
Code	{ return mock ( classToMock , mockSettings , classToMock ) ; }
Distance : 3

122
Tree	{ return Mockito . mock ( classToMock , mockSettings ) ; }
Code	{ return Mockito . mock ( classToMock , mockSettings ) ; }
Distance : 3

123
Tree	{ return mock ( Class , null ) ; }
Code	{ return mock ( Class , null ) ; }
Distance : 6

124
Tree	{ return MOCKITO_CORE . mock ( classToMock ) . mock ( mock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) . mock ( mock , mockSettings ) ; }
Distance : 6

125
Tree	{ return MOCKITO_CORE . mock ( mock , mockSettings . mockSettings ( classToMock ) ) ; }
Code	{ return MOCKITO_CORE . mock ( mock , mockSettings . mockSettings ( classToMock ) ) ; }
Distance : 6

126
Tree	{ return mock ( classToMock , null , mockSettings ) ; }
Code	{ return mock ( classToMock , null , mockSettings ) ; }
Distance : 4

127
Tree	{ return mock ( classToMock , null , classToMock ) ; }
Code	{ return mock ( classToMock , null , classToMock ) ; }
Distance : 4

128
Tree	{ return mock ( MOCKITO_CORE , null , mockSettings ) ; }
Code	{ return mock ( MOCKITO_CORE , null , mockSettings ) ; }
Distance : 5

129
Tree	{ return mock ( withSettings , null ) ; }
Code	{ return mock ( withSettings , null ) ; }
Distance : 6

130
Tree	{ return mock . mock ( classToMock , mockSettings ) ; }
Code	{ return mock . mock ( classToMock , mockSettings ) ; }
Distance : 3

131
Tree	{ return MOCKITO_CORE . mock ( mock ) . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( mock ) . mock ( classToMock , mockSettings ) ; }
Distance : 7

132
Tree	{ return mock ( mock , mockSettings , mockSettings ) ; }
Code	{ return mock ( mock , mockSettings , mockSettings ) ; }
Distance : 4

133
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . T () ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . T () ) ; }
Distance : 4

134
Tree	{ return mock ( mockSettings , null , mockSettings ) ; }
Code	{ return mock ( mockSettings , null , mockSettings ) ; }
Distance : 5

135
Tree	{ return mock () . MOCKITO_CORE ( classToMock . classToMock ( classToMock ) ) ; }
Code	{ return mock () . MOCKITO_CORE ( classToMock . classToMock ( classToMock ) ) ; }
Distance : 8

136
Tree	{ return MOCKITO_CORE . mock ( classToMock , null , classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , null , classToMock ) ; }
Distance : 2

137
Tree	{ return Mockito ( classToMock , null ) ; }
Code	{ return Mockito ( classToMock , null ) ; }
Distance : 6

138
Tree	{ return MOCKITO_CORE . mock () . withSettings ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock () . withSettings ( classToMock , mockSettings ) ; }
Distance : 5

139
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . classToMock () ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . classToMock () ) ; }
Distance : 4

140
Tree	{ return mock . withSettings ( classToMock , mockSettings ) ; }
Code	{ return mock . withSettings ( classToMock , mockSettings ) ; }
Distance : 4

141
Tree	{ return MOCKITO_CORE . MOCKITO_CORE ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . MOCKITO_CORE ( classToMock , mockSettings ) ; }
Distance : 3

142
Tree	{ return super . Mockito ( this ) ; }
Code	{ return super . Mockito ( this ) ; }
Distance : 7

143
Tree	{ return MOCKITO_CORE . mock ( mock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( mock , mockSettings ) ; }
Distance : 3

144
Tree	{ return classToMock () ; }
Code	{ return classToMock () ; }
Distance : 9

145
Tree	{ return mock ( classToMock . Class ( classToMock ) , mockSettings ) ; }
Code	{ return mock ( classToMock . Class ( classToMock ) , mockSettings ) ; }
Distance : 7

146
Tree	{ return MOCKITO_CORE . Mockito ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . Mockito ( classToMock , mockSettings ) ; }
Distance : 3

147
Tree	{ return mock () . MOCKITO_CORE ( classToMock . mockSettings ( classToMock ) ) ; }
Code	{ return mock () . MOCKITO_CORE ( classToMock . mockSettings ( classToMock ) ) ; }
Distance : 7

148
Tree	{ return mock ( classToMock . classToMock ( mock ) , mockSettings ) ; }
Code	{ return mock ( classToMock . classToMock ( mock ) , mockSettings ) ; }
Distance : 8

149
Tree	{ return MOCKITO_CORE . MOCKITO_CORE ( classToMock , mockSettings . mockSettings ( classToMock ) ) ; }
Code	{ return MOCKITO_CORE . MOCKITO_CORE ( classToMock , mockSettings . mockSettings ( classToMock ) ) ; }
Distance : 6

150
Tree	{ return mock () . mock ( classToMock . withSettings ( mock ) ) ; }
Code	{ return mock () . mock ( classToMock . withSettings ( mock ) ) ; }
Distance : 7

151
Tree	{ return mock () . mock ( MOCKITO_CORE , mockSettings ) ; }
Code	{ return mock () . mock ( MOCKITO_CORE , mockSettings ) ; }
Distance : 5

152
Tree	{ return MOCKITO_CORE . T ( classToMock , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . T ( classToMock , null , mockSettings ) ; }
Distance : 3

153
Tree	{ return Mockito () ; }
Code	{ return Mockito () ; }
Distance : 10

154
Tree	{ return MOCKITO_CORE . mock ( classToMock ) . mockSettings ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) . mockSettings ( classToMock , mockSettings ) ; }
Distance : 5

155
Tree	{ return MOCKITO_CORE () . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE () . mock ( classToMock , mockSettings ) ; }
Distance : 3

156
Tree	{ return Mockito ( classToMock , null , mockSettings ) ; }
Code	{ return Mockito ( classToMock , null , mockSettings ) ; }
Distance : 5

157
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . mockSettings ( mockSettings ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . mockSettings ( mockSettings ) ) ; }
Distance : 5

158
Tree	{ return mock () . withSettings ( classToMock , mockSettings ) ; }
Code	{ return mock () . withSettings ( classToMock , mockSettings ) ; }
Distance : 5

159
Tree	{ return MOCKITO_CORE . mock ( classToMock ) . Mockito ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) . Mockito ( classToMock , mockSettings ) ; }
Distance : 6

160
Tree	{ return T () ; }
Code	{ return T () ; }
Distance : 10

161
Tree	{ return mockSettings () ; }
Code	{ return mockSettings () ; }
Distance : 9

162
Tree	{ return mock ( classToMock . Mockito () , mockSettings ) ; }
Code	{ return mock ( classToMock . Mockito () , mockSettings ) ; }
Distance : 6

163
Tree	{ return withSettings ( classToMock , null ) ; }
Code	{ return withSettings ( classToMock , null ) ; }
Distance : 6

164
Tree	{ return MOCKITO_CORE . mock ( withSettings , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( withSettings , mockSettings ) ; }
Distance : 3

165
Tree	{ return MOCKITO_CORE . T ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . T ( classToMock , mockSettings ) ; }
Distance : 3

166
Tree	{ return super . MOCKITO_CORE ( this ) ; }
Code	{ return super . MOCKITO_CORE ( this ) ; }
Distance : 7

167
Tree	{ return withSettings ( classToMock . classToMock () , mockSettings ) ; }
Code	{ return withSettings ( classToMock . classToMock () , mockSettings ) ; }
Distance : 7

168
Tree	{ return withSettings . mock ( classToMock , mockSettings ) ; }
Code	{ return withSettings . mock ( classToMock , mockSettings ) ; }
Distance : 3

169
Tree	{ return mock ( T , mockSettings ) ; }
Code	{ return mock ( T , mockSettings ) ; }
Distance : 5

170
Tree	{ return mock ( MOCKITO_CORE , null ) ; }
Code	{ return mock ( MOCKITO_CORE , null ) ; }
Distance : 6

171
Tree	{ return mock ( classToMock . mock () , mockSettings ) ; }
Code	{ return mock ( classToMock . mock () , mockSettings ) ; }
Distance : 6

172
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . Mockito () ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . Mockito () ) ; }
Distance : 4

173
Tree	{ return mock ( T , null , mockSettings ) ; }
Code	{ return mock ( T , null , mockSettings ) ; }
Distance : 5

174
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , null , mockSettings ) ; }
Distance : 3

175
Tree	{ return MOCKITO_CORE . mock ( classToMock ) . MOCKITO_CORE ( mock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) . MOCKITO_CORE ( mock , mockSettings ) ; }
Distance : 6

176
Tree	{ return mock ( classToMock . MOCKITO_CORE () , mockSettings ) ; }
Code	{ return mock ( classToMock . MOCKITO_CORE () , mockSettings ) ; }
Distance : 6

177
Tree	{ return Class () ; }
Code	{ return Class () ; }
Distance : 10

178
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . mock () ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . mock () ) ; }
Distance : 4

179
Tree	{ return mock ( classToMock . withSettings ( mock ) , mockSettings ) ; }
Code	{ return mock ( classToMock . withSettings ( mock ) , mockSettings ) ; }
Distance : 8

180
Tree	{ return MOCKITO_CORE . Mockito ( classToMock , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . Mockito ( classToMock , null , mockSettings ) ; }
Distance : 3

181
Tree	{ return MOCKITO_CORE . withSettings ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . withSettings ( classToMock , mockSettings ) ; }
Distance : 3

182
Tree	{ return MockSettings () ; }
Code	{ return MockSettings () ; }
Distance : 10

183
Tree	{ return MOCKITO_CORE . MOCKITO_CORE ( classToMock ) . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . MOCKITO_CORE ( classToMock ) . mock ( classToMock , mockSettings ) ; }
Distance : 7

184
Tree	{ return MOCKITO_CORE . MOCKITO_CORE ( classToMock , mockSettings , mockSettings . mock () ) ; }
Code	{ return MOCKITO_CORE . MOCKITO_CORE ( classToMock , mockSettings , mockSettings . mock () ) ; }
Distance : 5

185
Tree	{ return mock . mock ( classToMock , mockSettings ) ; }
Code	{ return mock . mock ( classToMock , mockSettings ) ; }
Distance : 3

186
Tree	{ return MOCKITO_CORE . mock ( classToMock ) . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) . mock ( classToMock , mockSettings ) ; }
Distance : 6

187
Tree	{ return MOCKITO_CORE . mock () . MOCKITO_CORE ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock () . MOCKITO_CORE ( classToMock , mockSettings ) ; }
Distance : 5

188
Tree	{ return Mockito . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return Mockito . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

189
Tree	{ return MOCKITO_CORE . Mockito ( classToMock ) ; }
Code	{ return MOCKITO_CORE . Mockito ( classToMock ) ; }
Distance : 5

190
Tree	{ return MOCKITO_CORE . mock ( Class , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( Class , mockSettings ) ; }
Distance : 3

191
Tree	{ return MOCKITO_CORE . classToMock ( classToMock ) ; }
Code	{ return MOCKITO_CORE . classToMock ( classToMock ) ; }
Distance : 5

192
Tree	{ return mock () . mock ( classToMock . Mockito ( classToMock ) ) ; }
Code	{ return mock () . mock ( classToMock . Mockito ( classToMock ) ) ; }
Distance : 7

193
Tree	{ return MOCKITO_CORE . mock ( mockSettings , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings , mockSettings ) ; }
Distance : 3

194
Tree	{ return mock ( mock , null ) ; }
Code	{ return mock ( mock , null ) ; }
Distance : 6

195
Tree	{ return MOCKITO_CORE . Mockito ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . Mockito ( classToMock , mockSettings ) ; }
Distance : 3

196
Tree	{ return mock ( MOCKITO_CORE , mockSettings , mockSettings ) ; }
Code	{ return mock ( MOCKITO_CORE , mockSettings , mockSettings ) ; }
Distance : 4

197
Tree	{ return mock ( mockSettings , null ) ; }
Code	{ return mock ( mockSettings , null ) ; }
Distance : 5

198
Tree	{ return mock ( classToMock , classToMock , mockSettings ) ; }
Code	{ return mock ( classToMock , classToMock , mockSettings ) ; }
Distance : 4

199
Tree	{ return mock () ; } wanted
Code	{ return mock () ; } wanted
Distance : 10

========================================================================


========================================================================
Example Number: 85
Parent Code is: 
mockingProgress . verificationStarted ( mode ) ;
-------------------------------------------------------------------------------
Child code is: 
mockingProgress . verificationStarted ( new MockAwareVerificationMode ( mock , mode ) ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=mockingProgress}) (235{val=.}) (802{val=verificationStarted}) (214{val=(}) (800{val=mode}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=mockingProgress}) (235{val=.}) (802{val=verificationStarted}) (214{val=(}) (14 (304{val=new}) (43 (801{val=MockAwareVerificationMode})) (214{val=(}) (800{val=mock}) (234{val=,}) (800{val=mode}) (215{val=)})) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/14/parent/src_org_mockito_internal_MockitoCore.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	mockUtil ( mode ) ;
Code	mockUtil ( mode ) ;
Distance : 9

1
Tree	mockUtil () . verificationStarted ( mode ) ;
Code	mockUtil () . verificationStarted ( mode ) ;
Distance : 8

2
Tree	mockingProgress . verificationStarted ( mode , new verificationStarted ( mode ) ) ;
Code	mockingProgress . verificationStarted ( mode , new verificationStarted ( mode ) ) ;
Distance : 5

3
Tree	this . mockingProgress . verificationStarted ( mode ) ;
Code	this . mockingProgress . verificationStarted ( mode ) ;
Distance : 8

4
Tree	mockingProgress . verificationStarted ( mode , new VerificationMode ( mode ) ) ;
Code	mockingProgress . verificationStarted ( mode , new VerificationMode ( mode ) ) ;
Distance : 5

5
Tree	T ( mode ) ;
Code	T ( mode ) ;
Distance : 9

6
Tree	mockingProgress . verificationStarted ( new VerificationMode () ) ;
Code	mockingProgress . verificationStarted ( new VerificationMode () ) ;
Distance : 6

7
Tree	mockingProgress . verificationStarted ( verify , mockingProgress ) ;
Code	mockingProgress . verificationStarted ( verify , mockingProgress ) ;
Distance : 6

8
Tree	new T () . verificationStarted ( mode ) ;
Code	new T () . verificationStarted ( mode ) ;
Distance : 9

9
Tree	mockUtil . verificationStarted ( mode ) ;
Code	mockUtil . verificationStarted ( mode ) ;
Distance : 7

10
Tree	MockAwareVerificationMode ( mode , mockingProgress ) ;
Code	MockAwareVerificationMode ( mode , mockingProgress ) ;
Distance : 8

11
Tree	verificationStarted ( VerificationMode ) ;
Code	verificationStarted ( VerificationMode ) ;
Distance : 9

12
Tree	mockingProgress . verificationStarted ( mode , mockingProgress . MockAwareVerificationMode () ) ;
Code	mockingProgress . verificationStarted ( mode , mockingProgress . MockAwareVerificationMode () ) ;
Distance : 7

13
Tree	mockingProgress ( mode ) ;
Code	mockingProgress ( mode ) ;
Distance : 8

14
Tree	mockingProgress . verificationStarted ( VerificationMode , mockingProgress ) ;
Code	mockingProgress . verificationStarted ( VerificationMode , mockingProgress ) ;
Distance : 6

15
Tree	this . mode = mode ;
Code	this . mode = mode ;
Distance : 10

16
Tree	mockingProgress . MockAwareVerificationMode ( mode , false ) ;
Code	mockingProgress . MockAwareVerificationMode ( mode , false ) ;
Distance : 6

17
Tree	verificationStarted ( mode , mockUtil ) ;
Code	verificationStarted ( mode , mockUtil ) ;
Distance : 8

18
Tree	mockingProgress . verificationStarted ( mode , mode . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mode , mode . verificationStarted () ) ;
Distance : 7

19
Tree	verificationStarted ( mode , mockingProgress , VerificationMode ) ;
Code	verificationStarted ( mode , mockingProgress , VerificationMode ) ;
Distance : 8

20
Tree	mockUtil . verificationStarted ( STRING_CONSTANT , mode ) ;
Code	mockUtil . verificationStarted ( STRING_CONSTANT , mode ) ;
Distance : 6

21
Tree	verificationStarted ( verify ) ;
Code	verificationStarted ( verify ) ;
Distance : 9

22
Tree	verify . verificationStarted ( mode ) ;
Code	verify . verificationStarted ( mode ) ;
Distance : 7

23
Tree	mockingProgress = new verificationStarted ( VerificationMode ) ;
Code	mockingProgress = new verificationStarted ( VerificationMode ) ;
Distance : 8

24
Tree	mockingProgress = new verificationStarted ( verify ) ;
Code	mockingProgress = new verificationStarted ( verify ) ;
Distance : 8

25
Tree	new mockUtil () . verificationStarted ( mode ) ;
Code	new mockUtil () . verificationStarted ( mode ) ;
Distance : 9

26
Tree	mockingProgress . verificationStarted ( mode ) ;
Code	mockingProgress . verificationStarted ( mode ) ;
Distance : 6

27
Tree	T = new verificationStarted ( mode ) ;
Code	T = new verificationStarted ( mode ) ;
Distance : 8

28
Tree	new VerificationMode () . verificationStarted ( mode ) ;
Code	new VerificationMode () . verificationStarted ( mode ) ;
Distance : 9

29
Tree	this . mode = VerificationMode ;
Code	this . mode = VerificationMode ;
Distance : 10

30
Tree	verificationStarted ( mode , mockingProgress , mode ) ;
Code	verificationStarted ( mode , mockingProgress , mode ) ;
Distance : 7

31
Tree	new mockingProgress () . verify ( mode ) ;
Code	new mockingProgress () . verify ( mode ) ;
Distance : 9

32
Tree	this . mockingProgress . MockAwareVerificationMode ( mode ) ;
Code	this . mockingProgress . MockAwareVerificationMode ( mode ) ;
Distance : 7

33
Tree	mockingProgress = new mockingProgress ( mode ) ;
Code	mockingProgress = new mockingProgress ( mode ) ;
Distance : 7

34
Tree	T . verificationStarted ( mode ) ;
Code	T . verificationStarted ( mode ) ;
Distance : 7

35
Tree	new mockingProgress () . MockAwareVerificationMode ( mode ) ;
Code	new mockingProgress () . MockAwareVerificationMode ( mode ) ;
Distance : 8

36
Tree	mockingProgress . verificationStarted ( mode , VerificationMode . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mode , VerificationMode . verificationStarted () ) ;
Distance : 7

37
Tree	mockingProgress . MockAwareVerificationMode ( mode , mockingProgress . verificationStarted () ) ;
Code	mockingProgress . MockAwareVerificationMode ( mode , mockingProgress . verificationStarted () ) ;
Distance : 8

38
Tree	mockUtil . verificationStarted ( mode ) ;
Code	mockUtil . verificationStarted ( mode ) ;
Distance : 7

39
Tree	verificationStarted ( mode ) ;
Code	verificationStarted ( mode ) ;
Distance : 8

40
Tree	mockingProgress . verificationStarted ( mode , false ) ;
Code	mockingProgress . verificationStarted ( mode , false ) ;
Distance : 6

41
Tree	verificationStarted ( mode , mockingProgress ) ;
Code	verificationStarted ( mode , mockingProgress ) ;
Distance : 8

42
Tree	mockingProgress . verificationStarted ( mode , mockingProgress ) ;
Code	mockingProgress . verificationStarted ( mode , mockingProgress ) ;
Distance : 6

43
Tree	mockingProgress . verificationStarted ( mode , new T ( mode ) ) ;
Code	mockingProgress . verificationStarted ( mode , new T ( mode ) ) ;
Distance : 5

44
Tree	VerificationMode . verificationStarted ( mode , false ) ;
Code	VerificationMode . verificationStarted ( mode , false ) ;
Distance : 7

45
Tree	mockingProgress . verificationStarted ( mode , new mode ( mode ) ) ;
Code	mockingProgress . verificationStarted ( mode , new mode ( mode ) ) ;
Distance : 5

46
Tree	reporter . verificationStarted ( mode ) ;
Code	reporter . verificationStarted ( mode ) ;
Distance : 7

47
Tree	mockingProgress . verificationStarted ( isMock ) ;
Code	mockingProgress . verificationStarted ( isMock ) ;
Distance : 7

48
Tree	this . mode = mockUtil ;
Code	this . mode = mockUtil ;
Distance : 10

49
Tree	mockUtil = new verificationStarted ( mode ) ;
Code	mockUtil = new verificationStarted ( mode ) ;
Distance : 8

50
Tree	this . reporter = mockingProgress ;
Code	this . reporter = mockingProgress ;
Distance : 11

51
Tree	this . mockUtil . verificationStarted ( mode ) ;
Code	this . mockUtil . verificationStarted ( mode ) ;
Distance : 8

52
Tree	mockingProgress . verificationStarted ( mode , VerificationMode ) ;
Code	mockingProgress . verificationStarted ( mode , VerificationMode ) ;
Distance : 6

53
Tree	verify . verificationStarted () ;
Code	verify . verificationStarted () ;
Distance : 10

54
Tree	mockingProgress . verificationStarted ( true ) ;
Code	mockingProgress . verificationStarted ( true ) ;
Distance : 7

55
Tree	mockingProgress . verificationStarted ( verify ) ;
Code	mockingProgress . verificationStarted ( verify ) ;
Distance : 7

56
Tree	mockingProgress . verificationStarted ( mode . VerificationMode () ) ;
Code	mockingProgress . verificationStarted ( mode . VerificationMode () ) ;
Distance : 7

57
Tree	verify . verificationStarted ( mode , false ) ;
Code	verify . verificationStarted ( mode , false ) ;
Distance : 7

58
Tree	mockingProgress . verificationStarted ( new verify () ) ;
Code	mockingProgress . verificationStarted ( new verify () ) ;
Distance : 6

59
Tree	mockingProgress . verificationStarted ( verify , false ) ;
Code	mockingProgress . verificationStarted ( verify , false ) ;
Distance : 6

60
Tree	mockingProgress . MockAwareVerificationMode ( mode ) ;
Code	mockingProgress . MockAwareVerificationMode ( mode ) ;
Distance : 6

61
Tree	mockingProgress . verificationStarted ( VerificationMode , false ) ;
Code	mockingProgress . verificationStarted ( VerificationMode , false ) ;
Distance : 6

62
Tree	mockingProgress ( mode , mockingProgress ) ;
Code	mockingProgress ( mode , mockingProgress ) ;
Distance : 8

63
Tree	verificationStarted ( mode , VerificationMode ) ;
Code	verificationStarted ( mode , VerificationMode ) ;
Distance : 8

64
Tree	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ;
Code	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ;
Distance : 4

65
Tree	mockUtil . verificationStarted ( mode , mockingProgress ) ;
Code	mockUtil . verificationStarted ( mode , mockingProgress ) ;
Distance : 7

66
Tree	mockingProgress . verificationStarted () ;
Code	mockingProgress . verificationStarted () ;
Distance : 9

67
Tree	mockingProgress . verificationStarted ( mode , new notAMockPassedToVerify ( mode ) ) ;
Code	mockingProgress . verificationStarted ( mode , new notAMockPassedToVerify ( mode ) ) ;
Distance : 5

68
Tree	MockAwareVerificationMode ( mode ) ;
Code	MockAwareVerificationMode ( mode ) ;
Distance : 8

69
Tree	mockingProgress . verificationStarted ( mode , new reporter ( mode ) ) ;
Code	mockingProgress . verificationStarted ( mode , new reporter ( mode ) ) ;
Distance : 5

70
Tree	mockingProgress = new T ( mode ) ;
Code	mockingProgress = new T ( mode ) ;
Distance : 7

71
Tree	verificationStarted ( mode , T ) ;
Code	verificationStarted ( mode , T ) ;
Distance : 8

72
Tree	mockingProgress . verify () ;
Code	mockingProgress . verify () ;
Distance : 10

73
Tree	mockUtil . verificationStarted ( new mode () ) ;
Code	mockUtil . verificationStarted ( new mode () ) ;
Distance : 6

74
Tree	mockingProgress . verificationStarted ( mode ) ;
Code	mockingProgress . verificationStarted ( mode ) ;
Distance : 6

75
Tree	mockingProgress . verificationStarted ( mode , T . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mode , T . verificationStarted () ) ;
Distance : 7

76
Tree	mockUtil . verificationStarted () ;
Code	mockUtil . verificationStarted () ;
Distance : 10

77
Tree	verificationStarted ( mode , reporter ) ;
Code	verificationStarted ( mode , reporter ) ;
Distance : 8

78
Tree	reporter () . verificationStarted ( mode ) ;
Code	reporter () . verificationStarted ( mode ) ;
Distance : 8

79
Tree	mockingProgress . verificationStarted ( mode . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mode . verificationStarted () ) ;
Distance : 7

80
Tree	mockingProgress . MockAwareVerificationMode ( STRING_CONSTANT , mode ) ;
Code	mockingProgress . MockAwareVerificationMode ( STRING_CONSTANT , mode ) ;
Distance : 5

81
Tree	mockingProgress = new verificationStarted ( mode ) ;
Code	mockingProgress = new verificationStarted ( mode ) ;
Distance : 7

82
Tree	mockingProgress . MockAwareVerificationMode ( mode ) ;
Code	mockingProgress . MockAwareVerificationMode ( mode ) ;
Distance : 6

83
Tree	verificationStarted ( mode , mockingProgress , T ) ;
Code	verificationStarted ( mode , mockingProgress , T ) ;
Distance : 8

84
Tree	mockingProgress . verificationStarted ( VerificationMode ) ;
Code	mockingProgress . verificationStarted ( VerificationMode ) ;
Distance : 7

85
Tree	mockingProgress . verificationStarted ( false ) ;
Code	mockingProgress . verificationStarted ( false ) ;
Distance : 7

86
Tree	new MockAwareVerificationMode () . verificationStarted ( mode ) ;
Code	new MockAwareVerificationMode () . verificationStarted ( mode ) ;
Distance : 9

87
Tree	verificationStarted ( mode , mockingProgress , mockingProgress ) ;
Code	verificationStarted ( mode , mockingProgress , mockingProgress ) ;
Distance : 8

88
Tree	reporter . verificationStarted () ;
Code	reporter . verificationStarted () ;
Distance : 10

89
Tree	mockingProgress . MockAwareVerificationMode ( false ) ;
Code	mockingProgress . MockAwareVerificationMode ( false ) ;
Distance : 7

90
Tree	mockingProgress . MockAwareVerificationMode ( mode ) ;
Code	mockingProgress . MockAwareVerificationMode ( mode ) ;
Distance : 6

91
Tree	T . verificationStarted ( STRING_CONSTANT , mode ) ;
Code	T . verificationStarted ( STRING_CONSTANT , mode ) ;
Distance : 6

92
Tree	reporter . verificationStarted ( mode , false ) ;
Code	reporter . verificationStarted ( mode , false ) ;
Distance : 7

93
Tree	mockingProgress = new MockAwareVerificationMode ( mode ) ;
Code	mockingProgress = new MockAwareVerificationMode ( mode ) ;
Distance : 6

94
Tree	this . mode . MockAwareVerificationMode ( mode ) ;
Code	this . mode . MockAwareVerificationMode ( mode ) ;
Distance : 7

95
Tree	this . mode = reporter ;
Code	this . mode = reporter ;
Distance : 10

96
Tree	this . mode = mockingProgress ;
Code	this . mode = mockingProgress ;
Distance : 10

97
Tree	this . mockingProgress = mockUtil ;
Code	this . mockingProgress = mockUtil ;
Distance : 11

98
Tree	mockingProgress . MockAwareVerificationMode ( new mode () ) ;
Code	mockingProgress . MockAwareVerificationMode ( new mode () ) ;
Distance : 6

99
Tree	reporter . verificationStarted ( new mode () ) ;
Code	reporter . verificationStarted ( new mode () ) ;
Distance : 6

100
Tree	mockingProgress . verificationStarted ( mode . isMock () ) ;
Code	mockingProgress . verificationStarted ( mode . isMock () ) ;
Distance : 7

101
Tree	mockUtil . verificationStarted ( mode , mockingProgress . verificationStarted () ) ;
Code	mockUtil . verificationStarted ( mode , mockingProgress . verificationStarted () ) ;
Distance : 8

102
Tree	mockingProgress . verificationStarted ( mode , mockingProgress . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mode , mockingProgress . verificationStarted () ) ;
Distance : 7

103
Tree	T . verificationStarted () ;
Code	T . verificationStarted () ;
Distance : 10

104
Tree	mockingProgress . verificationStarted ( VerificationMode ) ;
Code	mockingProgress . verificationStarted ( VerificationMode ) ;
Distance : 7

105
Tree	T . verificationStarted ( false ) ;
Code	T . verificationStarted ( false ) ;
Distance : 8

106
Tree	mockingProgress . verificationStarted ( mode , new isMock ( mode ) ) ;
Code	mockingProgress . verificationStarted ( mode , new isMock ( mode ) ) ;
Distance : 5

107
Tree	mockingProgress . verificationStarted ( mockingProgress ) ;
Code	mockingProgress . verificationStarted ( mockingProgress ) ;
Distance : 7

108
Tree	mockingProgress . verify ( mode , false ) ;
Code	mockingProgress . verify ( mode , false ) ;
Distance : 7

109
Tree	mockingProgress . verificationStarted ( mode , mockUtil ) ;
Code	mockingProgress . verificationStarted ( mode , mockUtil ) ;
Distance : 6

110
Tree	this . mock . verificationStarted ( mode ) ;
Code	this . mock . verificationStarted ( mode ) ;
Distance : 8

111
Tree	mockingProgress . verificationStarted ( new isMock () ) ;
Code	mockingProgress . verificationStarted ( new isMock () ) ;
Distance : 6

112
Tree	mockingProgress () . verificationStarted ( mode ) ;
Code	mockingProgress () . verificationStarted ( mode ) ;
Distance : 7

113
Tree	MockAwareVerificationMode ( mode , mockingProgress , mockingProgress ) ;
Code	MockAwareVerificationMode ( mode , mockingProgress , mockingProgress ) ;
Distance : 9

114
Tree	reporter . verificationStarted ( mode ) ;
Code	reporter . verificationStarted ( mode ) ;
Distance : 7

115
Tree	this . mockingProgress = mode ;
Code	this . mockingProgress = mode ;
Distance : 10

116
Tree	mockingProgress . MockAwareVerificationMode () ;
Code	mockingProgress . MockAwareVerificationMode () ;
Distance : 9

117
Tree	verificationStarted ( mode , mockUtil , mockingProgress ) ;
Code	verificationStarted ( mode , mockUtil , mockingProgress ) ;
Distance : 8

118
Tree	VerificationMode . verificationStarted ( false ) ;
Code	VerificationMode . verificationStarted ( false ) ;
Distance : 8

119
Tree	verify ( mode ) ;
Code	verify ( mode ) ;
Distance : 9

120
Tree	mode . verificationStarted () ;
Code	mode . verificationStarted () ;
Distance : 10

121
Tree	mockingProgress ( mode , mockingProgress , mockingProgress ) ;
Code	mockingProgress ( mode , mockingProgress , mockingProgress ) ;
Distance : 8

122
Tree	new mockingProgress () . verificationStarted ( mode ) ;
Code	new mockingProgress () . verificationStarted ( mode ) ;
Distance : 8

123
Tree	mockingProgress . verificationStarted ( verify ) ;
Code	mockingProgress . verificationStarted ( verify ) ;
Distance : 7

124
Tree	mockingProgress . verificationStarted ( mode , mockUtil . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mode , mockUtil . verificationStarted () ) ;
Distance : 7

125
Tree	mockingProgress . verificationStarted ( new mockUtil () ) ;
Code	mockingProgress . verificationStarted ( new mockUtil () ) ;
Distance : 6

126
Tree	VerificationMode . verificationStarted ( STRING_CONSTANT , mode ) ;
Code	VerificationMode . verificationStarted ( STRING_CONSTANT , mode ) ;
Distance : 6

127
Tree	mockUtil . verificationStarted ( mode ) ;
Code	mockUtil . verificationStarted ( mode ) ;
Distance : 7

128
Tree	this . reporter . verificationStarted ( mode ) ;
Code	this . reporter . verificationStarted ( mode ) ;
Distance : 8

129
Tree	mockingProgress . verificationStarted ( STRING_CONSTANT , mockingProgress ) ;
Code	mockingProgress . verificationStarted ( STRING_CONSTANT , mockingProgress ) ;
Distance : 6

130
Tree	mockingProgress . verificationStarted ( mode . mode () ) ;
Code	mockingProgress . verificationStarted ( mode . mode () ) ;
Distance : 6

131
Tree	mockingProgress . MockAwareVerificationMode ( mode , mockingProgress ) ;
Code	mockingProgress . MockAwareVerificationMode ( mode , mockingProgress ) ;
Distance : 6

132
Tree	mockingProgress . verificationStarted ( verify ) ;
Code	mockingProgress . verificationStarted ( verify ) ;
Distance : 7

133
Tree	mockingProgress . verificationStarted ( VerificationMode ) ;
Code	mockingProgress . verificationStarted ( VerificationMode ) ;
Distance : 7

134
Tree	this . mockingProgress = mockingProgress ;
Code	this . mockingProgress = mockingProgress ;
Distance : 11

135
Tree	verificationStarted ( mode , VerificationMode , mockingProgress ) ;
Code	verificationStarted ( mode , VerificationMode , mockingProgress ) ;
Distance : 8

136
Tree	mockingProgress . verificationStarted ( mock ) ;
Code	mockingProgress . verificationStarted ( mock ) ;
Distance : 6

137
Tree	reporter = new verificationStarted ( mode ) ;
Code	reporter = new verificationStarted ( mode ) ;
Distance : 8

138
Tree	T . verificationStarted ( new mode () ) ;
Code	T . verificationStarted ( new mode () ) ;
Distance : 6

139
Tree	new reporter () . verificationStarted ( mode ) ;
Code	new reporter () . verificationStarted ( mode ) ;
Distance : 9

140
Tree	mockingProgress . verificationStarted ( mode . MockAwareVerificationMode () ) ;
Code	mockingProgress . verificationStarted ( mode . MockAwareVerificationMode () ) ;
Distance : 7

141
Tree	verify . verificationStarted ( STRING_CONSTANT , mode ) ;
Code	verify . verificationStarted ( STRING_CONSTANT , mode ) ;
Distance : 6

142
Tree	VerificationMode . verificationStarted ( mode ) ;
Code	VerificationMode . verificationStarted ( mode ) ;
Distance : 7

143
Tree	mockingProgress () . mockUtil ( mode ) ;
Code	mockingProgress () . mockUtil ( mode ) ;
Distance : 8

144
Tree	mockingProgress . verificationStarted ( mode , mockingProgress . mock () ) ;
Code	mockingProgress . verificationStarted ( mode , mockingProgress . mock () ) ;
Distance : 7

145
Tree	mockingProgress . verificationStarted ( mode , reporter ) ;
Code	mockingProgress . verificationStarted ( mode , reporter ) ;
Distance : 6

146
Tree	mock . verificationStarted () ;
Code	mock . verificationStarted () ;
Distance : 10

147
Tree	mockingProgress . verificationStarted ( verify , mockingProgress . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( verify , mockingProgress . verificationStarted () ) ;
Distance : 7

148
Tree	reporter . verificationStarted ( false ) ;
Code	reporter . verificationStarted ( false ) ;
Distance : 8

149
Tree	mockUtil . verificationStarted ( false ) ;
Code	mockUtil . verificationStarted ( false ) ;
Distance : 8

150
Tree	new mockingProgress () . mockUtil ( mode ) ;
Code	new mockingProgress () . mockUtil ( mode ) ;
Distance : 9

151
Tree	mockingProgress . verificationStarted ( STRING_CONSTANT , VerificationMode ) ;
Code	mockingProgress . verificationStarted ( STRING_CONSTANT , VerificationMode ) ;
Distance : 6

152
Tree	this . mode . verificationStarted ( mode ) ;
Code	this . mode . verificationStarted ( mode ) ;
Distance : 8

153
Tree	mockingProgress . verificationStarted ( new reporter () ) ;
Code	mockingProgress . verificationStarted ( new reporter () ) ;
Distance : 6

154
Tree	verify . verificationStarted ( false ) ;
Code	verify . verificationStarted ( false ) ;
Distance : 8

155
Tree	verificationStarted ( mode , mockingProgress , mockUtil ) ;
Code	verificationStarted ( mode , mockingProgress , mockUtil ) ;
Distance : 8

156
Tree	T () . verificationStarted ( mode ) ;
Code	T () . verificationStarted ( mode ) ;
Distance : 8

157
Tree	mockingProgress . verificationStarted ( mode . mock () ) ;
Code	mockingProgress . verificationStarted ( mode . mock () ) ;
Distance : 6

158
Tree	mockingProgress . verificationStarted ( notAMockPassedToVerify ) ;
Code	mockingProgress . verificationStarted ( notAMockPassedToVerify ) ;
Distance : 7

159
Tree	this . verificationStarted . verificationStarted ( mode ) ;
Code	this . verificationStarted . verificationStarted ( mode ) ;
Distance : 7

160
Tree	mockingProgress . verificationStarted ( mode ) ;
Code	mockingProgress . verificationStarted ( mode ) ;
Distance : 6

161
Tree	mockingProgress . verificationStarted ( mode . notAMockPassedToVerify () ) ;
Code	mockingProgress . verificationStarted ( mode . notAMockPassedToVerify () ) ;
Distance : 7

162
Tree	mockingProgress . verify ( false ) ;
Code	mockingProgress . verify ( false ) ;
Distance : 8

163
Tree	mock . verificationStarted ( false ) ;
Code	mock . verificationStarted ( false ) ;
Distance : 8

164
Tree	T . verificationStarted ( mode ) ;
Code	T . verificationStarted ( mode ) ;
Distance : 7

165
Tree	mockingProgress () . verify ( mode ) ;
Code	mockingProgress () . verify ( mode ) ;
Distance : 8

166
Tree	mockingProgress . verificationStarted ( mode . reporter () ) ;
Code	mockingProgress . verificationStarted ( mode . reporter () ) ;
Distance : 7

167
Tree	verificationStarted ( reporter ) ;
Code	verificationStarted ( reporter ) ;
Distance : 9

168
Tree	VerificationMode . verificationStarted ( mode ) ;
Code	VerificationMode . verificationStarted ( mode ) ;
Distance : 7

169
Tree	mockingProgress . verificationStarted ( mode . nullPassedToVerify () ) ;
Code	mockingProgress . verificationStarted ( mode . nullPassedToVerify () ) ;
Distance : 7

170
Tree	this . VerificationMode . verificationStarted ( mode ) ;
Code	this . VerificationMode . verificationStarted ( mode ) ;
Distance : 8

171
Tree	mockingProgress = new verificationStarted ( reporter ) ;
Code	mockingProgress = new verificationStarted ( reporter ) ;
Distance : 8

172
Tree	T . verificationStarted ( mode , false ) ;
Code	T . verificationStarted ( mode , false ) ;
Distance : 7

173
Tree	verify . verificationStarted ( mode ) ;
Code	verify . verificationStarted ( mode ) ;
Distance : 7

174
Tree	mockingProgress . verificationStarted ( mode , mode ) ;
Code	mockingProgress . verificationStarted ( mode , mode ) ;
Distance : 5

175
Tree	VerificationMode () . verificationStarted ( mode ) ;
Code	VerificationMode () . verificationStarted ( mode ) ;
Distance : 8

176
Tree	mockingProgress () . verificationStarted ( VerificationMode ) ;
Code	mockingProgress () . verificationStarted ( VerificationMode ) ;
Distance : 8

177
Tree	mockingProgress () . MockAwareVerificationMode ( mode ) ;
Code	mockingProgress () . MockAwareVerificationMode ( mode ) ;
Distance : 7

178
Tree	mockingProgress . verificationStarted ( STRING_CONSTANT , verify ) ;
Code	mockingProgress . verificationStarted ( STRING_CONSTANT , verify ) ;
Distance : 6

179
Tree	mockingProgress . verificationStarted ( STRING_CONSTANT , mode ) ;
Code	mockingProgress . verificationStarted ( STRING_CONSTANT , mode ) ;
Distance : 5

180
Tree	verify () . verificationStarted ( mode ) ;
Code	verify () . verificationStarted ( mode ) ;
Distance : 8

181
Tree	verificationStarted ( mode , mode , mockingProgress ) ;
Code	verificationStarted ( mode , mode , mockingProgress ) ;
Distance : 8

182
Tree	mockingProgress . verificationStarted ( new mode () ) ;
Code	mockingProgress . verificationStarted ( new mode () ) ;
Distance : 5

183
Tree	mockingProgress . verificationStarted ( mode , T ) ;
Code	mockingProgress . verificationStarted ( mode , T ) ;
Distance : 6

184
Tree	VerificationMode . verificationStarted () ;
Code	VerificationMode . verificationStarted () ;
Distance : 10

185
Tree	mockingProgress . verify ( mode ) ;
Code	mockingProgress . verify ( mode ) ;
Distance : 7

186
Tree	mockingProgress . verificationStarted ( mode , new mockingProgress ( mode ) ) ;
Code	mockingProgress . verificationStarted ( mode , new mockingProgress ( mode ) ) ;
Distance : 5

187
Tree	verificationStarted ( mode , mode ) ;
Code	verificationStarted ( mode , mode ) ;
Distance : 7

188
Tree	verificationStarted ( VerificationMode , mockingProgress ) ;
Code	verificationStarted ( VerificationMode , mockingProgress ) ;
Distance : 8

189
Tree	this . mockUtil = mockingProgress ;
Code	this . mockUtil = mockingProgress ;
Distance : 11

190
Tree	mock ( mode ) ;
Code	mock ( mode ) ;
Distance : 9

191
Tree	mockUtil . verificationStarted ( mode , false ) ;
Code	mockUtil . verificationStarted ( mode , false ) ;
Distance : 7

192
Tree	verificationStarted ( verify , mockingProgress ) ;
Code	verificationStarted ( verify , mockingProgress ) ;
Distance : 8

193
Tree	mockingProgress . verificationStarted ( mode , new mockUtil ( mode ) ) ;
Code	mockingProgress . verificationStarted ( mode , new mockUtil ( mode ) ) ;
Distance : 5

194
Tree	new notAMockPassedToVerify () . verificationStarted ( mode ) ;
Code	new notAMockPassedToVerify () . verificationStarted ( mode ) ;
Distance : 9

195
Tree	mockingProgress . verificationStarted ( reporter ) ;
Code	mockingProgress . verificationStarted ( reporter ) ;
Distance : 7

196
Tree	this . verify . verificationStarted ( mode ) ;
Code	this . verify . verificationStarted ( mode ) ;
Distance : 8

197
Tree	reporter . verificationStarted ( STRING_CONSTANT , mode ) ;
Code	reporter . verificationStarted ( STRING_CONSTANT , mode ) ;
Distance : 6

198
Tree	mockingProgress . verify ( mode ) ;
Code	mockingProgress . verify ( mode ) ;
Distance : 7

199
Tree	mockingProgress . verificationStarted ( mode . mockingProgress () ) ;
Code	mockingProgress . verificationStarted ( mode . mockingProgress () ) ;
Distance : 7

========================================================================


========================================================================
Example Number: 86
Parent Code is: 
return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
-------------------------------------------------------------------------------
Child code is: 
return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata , invocation . getMock () ) , container ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=recordDeepStubAnswer}) (214{val=(}) (32 (802{val=newDeepStubMock}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (234{val=,}) (800{val=container}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=recordDeepStubAnswer}) (214{val=(}) (32 (802{val=newDeepStubMock}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (234{val=,}) (32 (800{val=invocation}) (235{val=.}) (802{val=getMock}) (216{val=()})) (215{val=)})) (234{val=,}) (800{val=container}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/10/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsDeepStubs.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return deepStub ( returnTypeGenericMetadata , container ) && getStubbedInvocations ( returnTypeGenericMetadata ) ;
Code	return deepStub ( returnTypeGenericMetadata , container ) && getStubbedInvocations ( returnTypeGenericMetadata ) ;
Distance : 10

1
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) < container ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) < container ;
Distance : 8

2
Tree	return deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) < container ;
Code	return deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 9

3
Tree	return deepStub . deepStub ( returnTypeGenericMetadata , container + getMockHandler ( returnTypeGenericMetadata ) ) ;
Code	return deepStub . deepStub ( returnTypeGenericMetadata , container + getMockHandler ( returnTypeGenericMetadata ) ) ;
Distance : 10

4
Tree	return StubbedInvocationMatcher ( returnTypeGenericMetadata ) . container ( returnTypeGenericMetadata ) ;
Code	return StubbedInvocationMatcher ( returnTypeGenericMetadata ) . container ( returnTypeGenericMetadata ) ;
Distance : 10

5
Tree	return deepStub ( deepStub ( returnTypeGenericMetadata ) , container ) ;
Code	return deepStub ( deepStub ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

6
Tree	return ( GenericMetadataSupport ) getMockHandler ( returnTypeGenericMetadata ) ;
Code	return ( GenericMetadataSupport ) getMockHandler ( returnTypeGenericMetadata ) ;
Distance : 12

7
Tree	return deepStub ( returnTypeGenericMetadata ) . getInvocationContainer ( returnTypeGenericMetadata ) ;
Code	return deepStub ( returnTypeGenericMetadata ) . getInvocationContainer ( returnTypeGenericMetadata ) ;
Distance : 10

8
Tree	return deepStub ( handler , container ) && container ( returnTypeGenericMetadata ) ;
Code	return deepStub ( handler , container ) && container ( returnTypeGenericMetadata ) ;
Distance : 11

9
Tree	return deepStub . deepStub ( InvocationOnMock ( returnTypeGenericMetadata ) , container ) ;
Code	return deepStub . deepStub ( InvocationOnMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

10
Tree	return deepStub ( InternalMockHandler , container ) && getMockHandler ( returnTypeGenericMetadata ) ;
Code	return deepStub ( InternalMockHandler , container ) && getMockHandler ( returnTypeGenericMetadata ) ;
Distance : 11

11
Tree	return deepStub ( returnTypeGenericMetadata ) . returnTypeGenericMetadata ( returnTypeGenericMetadata ) ;
Code	return deepStub ( returnTypeGenericMetadata ) . returnTypeGenericMetadata ( returnTypeGenericMetadata ) ;
Distance : 10

12
Tree	return deepStub ( getMock ) < container ;
Code	return deepStub ( getMock ) < container ;
Distance : 10

13
Tree	return ( newDeepStubMock ) container ( returnTypeGenericMetadata ) ;
Code	return ( newDeepStubMock ) container ( returnTypeGenericMetadata ) ;
Distance : 11

14
Tree	return ( InvocationContainerImpl ) container ( returnTypeGenericMetadata ) ;
Code	return ( InvocationContainerImpl ) container ( returnTypeGenericMetadata ) ;
Distance : 12

15
Tree	return deepStub ( getMock , container ) ;
Code	return deepStub ( getMock , container ) ;
Distance : 9

16
Tree	return deepStub . deepStub ( getStubbedInvocations ( returnTypeGenericMetadata ) , container ) ;
Code	return deepStub . deepStub ( getStubbedInvocations ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

17
Tree	return ( deepStub ) getInvocationContainer ( returnTypeGenericMetadata ) ;
Code	return ( deepStub ) getInvocationContainer ( returnTypeGenericMetadata ) ;
Distance : 12

18
Tree	return StubbedInvocationMatcher ( returnTypeGenericMetadata , container ) ;
Code	return StubbedInvocationMatcher ( returnTypeGenericMetadata , container ) ;
Distance : 9

19
Tree	return deepStub . deepStub ( getInvocation ( returnTypeGenericMetadata ) , container ) ;
Code	return deepStub . deepStub ( getInvocation ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

20
Tree	return deepStub . deepStub ( returnTypeGenericMetadata , container + container ( returnTypeGenericMetadata ) ) ;
Code	return deepStub . deepStub ( returnTypeGenericMetadata , container + container ( returnTypeGenericMetadata ) ) ;
Distance : 10

21
Tree	return deepStub ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ;
Code	return deepStub ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ;
Distance : 10

22
Tree	return deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) ) ;
Code	return deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) ) ;
Distance : 9

23
Tree	return deepStub ( returnTypeGenericMetadata . getStubbedInvocations () , container ) < container ;
Code	return deepStub ( returnTypeGenericMetadata . getStubbedInvocations () , container ) < container ;
Distance : 9

24
Tree	return deepStub ( returnTypeGenericMetadata . getInvocation () , container ) < Object ;
Code	return deepStub ( returnTypeGenericMetadata . getInvocation () , container ) < Object ;
Distance : 9

25
Tree	return deepStub . deepStub ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return deepStub . deepStub ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 10

26
Tree	return deepStub . deepStub ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return deepStub . deepStub ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 10

27
Tree	return deepStub . StubbedInvocationMatcher ( returnTypeGenericMetadata , container + this . container . deepStub ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return deepStub . StubbedInvocationMatcher ( returnTypeGenericMetadata , container + this . container . deepStub ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

28
Tree	return deepStub . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) ) < Object ;
Code	return deepStub . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) ) < Object ;
Distance : 12

29
Tree	return deepStub . StubbedInvocationMatcher ( StubbedInvocationMatcher ( returnTypeGenericMetadata , false ) , container ) ;
Code	return deepStub . StubbedInvocationMatcher ( StubbedInvocationMatcher ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 8

30
Tree	return deepStub ( GenericMetadataSupport ) . container ( returnTypeGenericMetadata ) ;
Code	return deepStub ( GenericMetadataSupport ) . container ( returnTypeGenericMetadata ) ;
Distance : 11

31
Tree	return ( deepStub ) container ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) ;
Code	return ( deepStub ) container ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

32
Tree	return deepStub . deepStub ( deepStub ( returnTypeGenericMetadata ) , container ) < Object ;
Code	return deepStub . deepStub ( deepStub ( returnTypeGenericMetadata ) , container ) < Object ;
Distance : 11

33
Tree	return deepStub . StubbedInvocationMatcher ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) ) ;
Code	return deepStub . StubbedInvocationMatcher ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) ) ;
Distance : 11

34
Tree	return deepStub . deepStub ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Code	return deepStub . deepStub ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Distance : 10

35
Tree	return deepStub . deepStub ( getStubbedInvocations ( returnTypeGenericMetadata , false ) , container ) ;
Code	return deepStub . deepStub ( getStubbedInvocations ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 8

36
Tree	return deepStub . StubbedInvocationMatcher ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) < container ;
Code	return deepStub . StubbedInvocationMatcher ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 11

37
Tree	return deepStub . deepStub ( getInvocation ( returnTypeGenericMetadata , false ) , container ) ;
Code	return deepStub . deepStub ( getInvocation ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 8

38
Tree	return deepStub . deepStub ( deepStub ( returnTypeGenericMetadata ) , container ) ;
Code	return deepStub . deepStub ( deepStub ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

39
Tree	return ( StubbedInvocationMatcher ) container ( returnTypeGenericMetadata ) ;
Code	return ( StubbedInvocationMatcher ) container ( returnTypeGenericMetadata ) ;
Distance : 12

40
Tree	return deepStub . deepStub ( getStubbedInvocations ( returnTypeGenericMetadata ) ) ;
Code	return deepStub . deepStub ( getStubbedInvocations ( returnTypeGenericMetadata ) ) ;
Distance : 11

41
Tree	return deepStub . deepStub ( deepStub ( returnTypeGenericMetadata ) ) < Object ;
Code	return deepStub . deepStub ( deepStub ( returnTypeGenericMetadata ) ) < Object ;
Distance : 12

42
Tree	return ( StubbedInvocationMatcher ) getMockHandler ( returnTypeGenericMetadata ) ;
Code	return ( StubbedInvocationMatcher ) getMockHandler ( returnTypeGenericMetadata ) ;
Distance : 12

43
Tree	return deepStub ( returnTypeGenericMetadata , container ) < returnTypeGenericMetadata ;
Code	return deepStub ( returnTypeGenericMetadata , container ) < returnTypeGenericMetadata ;
Distance : 10

44
Tree	return deepStub ( InternalMockHandler ) < container ;
Code	return deepStub ( InternalMockHandler ) < container ;
Distance : 11

45
Tree	return deepStub ( InternalMockHandler , container ) < container ;
Code	return deepStub ( InternalMockHandler , container ) < container ;
Distance : 10

46
Tree	return deepStub ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return deepStub ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 6

47
Tree	return StubbedInvocationMatcher ( returnTypeGenericMetadata ) < container ;
Code	return StubbedInvocationMatcher ( returnTypeGenericMetadata ) < container ;
Distance : 10

48
Tree	return deepStub . deepStub ( returnTypeGenericMetadata , container + this . container . ) ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return deepStub . deepStub ( returnTypeGenericMetadata , container + this . container . ) ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 12

49
Tree	return deepStub ( returnTypeGenericMetadata ) < returnTypeGenericMetadata ;
Code	return deepStub ( returnTypeGenericMetadata ) < returnTypeGenericMetadata ;
Distance : 11

50
Tree	return deepStub ( handler ) < container ;
Code	return deepStub ( handler ) < container ;
Distance : 11

51
Tree	return deepStub . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) < container ;
Code	return deepStub . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 11

52
Tree	return deepStub . deepStub ( deepStub ( returnTypeGenericMetadata ) ) < container ;
Code	return deepStub . deepStub ( deepStub ( returnTypeGenericMetadata ) ) < container ;
Distance : 11

53
Tree	return deepStub ( getStubbedInvocations ( returnTypeGenericMetadata ) , container ) ;
Code	return deepStub ( getStubbedInvocations ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

54
Tree	return deepStub ( returnTypeGenericMetadata . getInvocation () , container ) < container ;
Code	return deepStub ( returnTypeGenericMetadata . getInvocation () , container ) < container ;
Distance : 9

55
Tree	return deepStub . StubbedInvocationMatcher ( deepStub ( returnTypeGenericMetadata ) , container ) ;
Code	return deepStub . StubbedInvocationMatcher ( deepStub ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

56
Tree	return deepStub . deepStub ( returnTypeGenericMetadata . getMock () , container ) < container ;
Code	return deepStub . deepStub ( returnTypeGenericMetadata . getMock () , container ) < container ;
Distance : 8

57
Tree	return deepStub ( deepStub ( returnTypeGenericMetadata ) , container ) < container ;
Code	return deepStub ( deepStub ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 9

58
Tree	return ( deepStub ) getMockHandler ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) ;
Code	return ( deepStub ) getMockHandler ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

59
Tree	return deepStub . deepStub ( returnTypeGenericMetadata , container + getInvocationContainer ( returnTypeGenericMetadata ) ) ;
Code	return deepStub . deepStub ( returnTypeGenericMetadata , container + getInvocationContainer ( returnTypeGenericMetadata ) ) ;
Distance : 10

60
Tree	return deepStub ( GenericMetadataSupport ( returnTypeGenericMetadata ) , container ) ;
Code	return deepStub ( GenericMetadataSupport ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

61
Tree	return deepStub . deepStub ( returnTypeGenericMetadata , container + this . container . deepStub ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return deepStub . deepStub ( returnTypeGenericMetadata , container + this . container . deepStub ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

62
Tree	return deepStub ( container ) . container ( returnTypeGenericMetadata ) ;
Code	return deepStub ( container ) . container ( returnTypeGenericMetadata ) ;
Distance : 11

63
Tree	return deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) < Object ;
Code	return deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) < Object ;
Distance : 9

64
Tree	return StubbedInvocationMatcher ( returnTypeGenericMetadata , container ) && container ( returnTypeGenericMetadata ) ;
Code	return StubbedInvocationMatcher ( returnTypeGenericMetadata , container ) && container ( returnTypeGenericMetadata ) ;
Distance : 10

65
Tree	return deepStub . deepStub ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Code	return deepStub . deepStub ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

66
Tree	return StubbedInvocationMatcher ( returnTypeGenericMetadata , container ) < container ;
Code	return StubbedInvocationMatcher ( returnTypeGenericMetadata , container ) < container ;
Distance : 9

67
Tree	return deepStub . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) ) < container ;
Code	return deepStub . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) ) < container ;
Distance : 11

68
Tree	return deepStub ( handler , container ) ;
Code	return deepStub ( handler , container ) ;
Distance : 10

69
Tree	return deepStub ( getStubbedInvocations ( returnTypeGenericMetadata ) ) ;
Code	return deepStub ( getStubbedInvocations ( returnTypeGenericMetadata ) ) ;
Distance : 9

70
Tree	return ( deepStub ) getMockHandler ( returnTypeGenericMetadata ) ;
Code	return ( deepStub ) getMockHandler ( returnTypeGenericMetadata ) ;
Distance : 12

71
Tree	return deepStub . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata , false ) , container ) ;
Code	return deepStub . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 8

72
Tree	return deepStub . deepStub ( returnTypeGenericMetadata . getInvocation () , container ) < container ;
Code	return deepStub . deepStub ( returnTypeGenericMetadata . getInvocation () , container ) < container ;
Distance : 9

73
Tree	return deepStub . deepStub ( returnTypeGenericMetadata . returnTypeGenericMetadata () , container ) < container ;
Code	return deepStub . deepStub ( returnTypeGenericMetadata . returnTypeGenericMetadata () , container ) < container ;
Distance : 9

74
Tree	return deepStub ( GenericMetadataSupport , container ) ;
Code	return deepStub ( GenericMetadataSupport , container ) ;
Distance : 10

75
Tree	return getStubbedInvocations ( returnTypeGenericMetadata , container ) ;
Code	return getStubbedInvocations ( returnTypeGenericMetadata , container ) ;
Distance : 9

76
Tree	return deepStub . deepStub ( returnTypeGenericMetadata , container + deepStub ( returnTypeGenericMetadata ) ) ;
Code	return deepStub . deepStub ( returnTypeGenericMetadata , container + deepStub ( returnTypeGenericMetadata ) ) ;
Distance : 10

77
Tree	return ( GenericMetadataSupport ) container ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) ;
Code	return ( GenericMetadataSupport ) container ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

78
Tree	return deepStub . deepStub ( GenericMetadataSupport ( returnTypeGenericMetadata ) , container ) ;
Code	return deepStub . deepStub ( GenericMetadataSupport ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

79
Tree	return deepStub ( getStubbedInvocations ( returnTypeGenericMetadata ) , container ) < container ;
Code	return deepStub ( getStubbedInvocations ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 9

80
Tree	getMock . deepStub ( deepStub ( returnTypeGenericMetadata ) , container )
Code	getMock . deepStub ( deepStub ( returnTypeGenericMetadata ) , container )
Distance : 10

81
Tree	return deepStub . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) ) ;
Code	return deepStub . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) ) ;
Distance : 11

82
Tree	return ( GenericMetadataSupport ) container ( returnTypeGenericMetadata ) ;
Code	return ( GenericMetadataSupport ) container ( returnTypeGenericMetadata ) ;
Distance : 12

83
Tree	return deepStub ( deepStub ( returnTypeGenericMetadata ) ) ;
Code	return deepStub ( deepStub ( returnTypeGenericMetadata ) ) ;
Distance : 9

84
Tree	return deepStub . deepStub ( deepStub ( returnTypeGenericMetadata ) , container ) < container ;
Code	return deepStub . deepStub ( deepStub ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 11

85
Tree	return deepStub ( container ) < container ;
Code	return deepStub ( container ) < container ;
Distance : 11

86
Tree	return deepStub . deepStub ( returnTypeGenericMetadata , container + Object ( returnTypeGenericMetadata ) ) ;
Code	return deepStub . deepStub ( returnTypeGenericMetadata , container + Object ( returnTypeGenericMetadata ) ) ;
Distance : 10

87
Tree	return deepStub . StubbedInvocationMatcher ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) ;
Code	return deepStub . StubbedInvocationMatcher ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

88
Tree	return deepStub ( InternalMockHandler ) . container ( returnTypeGenericMetadata ) ;
Code	return deepStub ( InternalMockHandler ) . container ( returnTypeGenericMetadata ) ;
Distance : 11

89
Tree	return deepStub ( returnTypeGenericMetadata , container ) && deepStub ( returnTypeGenericMetadata ) ;
Code	return deepStub ( returnTypeGenericMetadata , container ) && deepStub ( returnTypeGenericMetadata ) ;
Distance : 10

90
Tree	return deepStub ( InternalMockHandler , container ) ;
Code	return deepStub ( InternalMockHandler , container ) ;
Distance : 10

91
Tree	return ( deepStub ) getMockHandler ( deepStub ( returnTypeGenericMetadata ) , container ) ;
Code	return ( deepStub ) getMockHandler ( deepStub ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

92
Tree	return deepStub ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return deepStub ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 8

93
Tree	return ( StubbedInvocationMatcher ) getMockHandler ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) ;
Code	return ( StubbedInvocationMatcher ) getMockHandler ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

94
Tree	return deepStub ( returnTypeGenericMetadata , returnTypeGenericMetadata ) < container ;
Code	return deepStub ( returnTypeGenericMetadata , returnTypeGenericMetadata ) < container ;
Distance : 9

95
Tree	return deepStub ( GenericMetadataSupport , container ) < container ;
Code	return deepStub ( GenericMetadataSupport , container ) < container ;
Distance : 10

96
Tree	return deepStub . deepStub ( deepStub ( returnTypeGenericMetadata , false ) , container ) ;
Code	return deepStub . deepStub ( deepStub ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 8

97
Tree	getMock . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container )
Code	getMock . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container )
Distance : 10

98
Tree	return deepStub . deepStub ( GenericMetadataSupport ( returnTypeGenericMetadata , false ) , container ) ;
Code	return deepStub . deepStub ( GenericMetadataSupport ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 8

99
Tree	return deepStub ( container , container ) ;
Code	return deepStub ( container , container ) ;
Distance : 10

100
Tree	return deepStub ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return deepStub ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 8

101
Tree	return deepStub ( InternalMockHandler , container ) && container ( returnTypeGenericMetadata ) ;
Code	return deepStub ( InternalMockHandler , container ) && container ( returnTypeGenericMetadata ) ;
Distance : 11

102
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata ) < container ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata ) < container ;
Distance : 9

103
Tree	return deepStub . deepStub ( getInvocation ( returnTypeGenericMetadata ) ) ;
Code	return deepStub . deepStub ( getInvocation ( returnTypeGenericMetadata ) ) ;
Distance : 11

104
Tree	return deepStub . deepStub ( GenericMetadataSupport ( returnTypeGenericMetadata ) ) ;
Code	return deepStub . deepStub ( GenericMetadataSupport ( returnTypeGenericMetadata ) ) ;
Distance : 11

105
Tree	return deepStub . deepStub ( deepStub ( returnTypeGenericMetadata ) ) ;
Code	return deepStub . deepStub ( deepStub ( returnTypeGenericMetadata ) ) ;
Distance : 11

106
Tree	return deepStub ( returnTypeGenericMetadata , container ) && returnTypeGenericMetadata ( returnTypeGenericMetadata ) ;
Code	return deepStub ( returnTypeGenericMetadata , container ) && returnTypeGenericMetadata ( returnTypeGenericMetadata ) ;
Distance : 10

107
Tree	return deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) ;
Code	return deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

108
Tree	return ( StubbedInvocationMatcher ) getMockHandler ( deepStub ( returnTypeGenericMetadata ) , container ) ;
Code	return ( StubbedInvocationMatcher ) getMockHandler ( deepStub ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

109
Tree	return deepStub . deepStub ( returnTypeGenericMetadata , container + this . container . getStubbedInvocations ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return deepStub . deepStub ( returnTypeGenericMetadata , container + this . container . getStubbedInvocations ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

110
Tree	return deepStub ( GenericMetadataSupport ( returnTypeGenericMetadata ) ) ;
Code	return deepStub ( GenericMetadataSupport ( returnTypeGenericMetadata ) ) ;
Distance : 9

111
Tree	return deepStub ( container , container ) < container ;
Code	return deepStub ( container , container ) < container ;
Distance : 10

112
Tree	return deepStub ( returnTypeGenericMetadata ) < Object ;
Code	return deepStub ( returnTypeGenericMetadata ) < Object ;
Distance : 11

113
Tree	return deepStub ( GenericMetadataSupport ( returnTypeGenericMetadata ) , container ) < container ;
Code	return deepStub ( GenericMetadataSupport ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 9

114
Tree	return StubbedInvocationMatcher ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) ;
Code	return StubbedInvocationMatcher ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

115
Tree	return deepStub . deepStub ( returnTypeGenericMetadata . getMockHandler () , container ) < container ;
Code	return deepStub . deepStub ( returnTypeGenericMetadata . getMockHandler () , container ) < container ;
Distance : 9

116
Tree	return deepStub ( InternalMockHandler ) . getMockHandler ( returnTypeGenericMetadata ) ;
Code	return deepStub ( InternalMockHandler ) . getMockHandler ( returnTypeGenericMetadata ) ;
Distance : 11

117
Tree	return deepStub ( handler , container ) < container ;
Code	return deepStub ( handler , container ) < container ;
Distance : 10

118
Tree	return deepStub . deepStub ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return deepStub . deepStub ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 8

119
Tree	return deepStub ( returnTypeGenericMetadata ) < container ;
Code	return deepStub ( returnTypeGenericMetadata ) < container ;
Distance : 10

120
Tree	return deepStub . StubbedInvocationMatcher ( returnTypeGenericMetadata , container + getMockHandler ( returnTypeGenericMetadata ) ) ;
Code	return deepStub . StubbedInvocationMatcher ( returnTypeGenericMetadata , container + getMockHandler ( returnTypeGenericMetadata ) ) ;
Distance : 10

121
Tree	return ( StubbedInvocationMatcher ) getInvocationContainer ( returnTypeGenericMetadata ) ;
Code	return ( StubbedInvocationMatcher ) getInvocationContainer ( returnTypeGenericMetadata ) ;
Distance : 12

122
Tree	return deepStub ( returnTypeGenericMetadata , container ) && getInvocationContainer ( returnTypeGenericMetadata ) ;
Code	return deepStub ( returnTypeGenericMetadata , container ) && getInvocationContainer ( returnTypeGenericMetadata ) ;
Distance : 10

123
Tree	return deepStub . deepStub ( returnTypeGenericMetadata . getMock () , container ) < Object ;
Code	return deepStub . deepStub ( returnTypeGenericMetadata . getMock () , container ) < Object ;
Distance : 8

124
Tree	return deepStub ( returnTypeGenericMetadata , container ) < container ;
Code	return deepStub ( returnTypeGenericMetadata , container ) < container ;
Distance : 9

125
Tree	return ( StubbedInvocationMatcher ) container ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) ;
Code	return ( StubbedInvocationMatcher ) container ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

126
Tree	return deepStub ( returnTypeGenericMetadata ) . container ( returnTypeGenericMetadata ) ;
Code	return deepStub ( returnTypeGenericMetadata ) . container ( returnTypeGenericMetadata ) ;
Distance : 10

127
Tree	return deepStub . StubbedInvocationMatcher ( deepStub ( returnTypeGenericMetadata , false ) , container ) ;
Code	return deepStub . StubbedInvocationMatcher ( deepStub ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 8

128
Tree	return deepStub ( returnTypeGenericMetadata , container ) ;
Code	return deepStub ( returnTypeGenericMetadata , container ) ;
Distance : 9

129
Tree	return deepStub ( returnTypeGenericMetadata . StubbedInvocationMatcher () , container ) < Object ;
Code	return deepStub ( returnTypeGenericMetadata . StubbedInvocationMatcher () , container ) < Object ;
Distance : 9

130
Tree	return deepStub ( returnTypeGenericMetadata . deepStub () , container ) < container ;
Code	return deepStub ( returnTypeGenericMetadata . deepStub () , container ) < container ;
Distance : 9

131
Tree	return deepStub . StubbedInvocationMatcher ( deepStub ( returnTypeGenericMetadata ) ) ;
Code	return deepStub . StubbedInvocationMatcher ( deepStub ( returnTypeGenericMetadata ) ) ;
Distance : 11

132
Tree	return deepStub . StubbedInvocationMatcher ( returnTypeGenericMetadata , container + container ( returnTypeGenericMetadata ) ) ;
Code	return deepStub . StubbedInvocationMatcher ( returnTypeGenericMetadata , container + container ( returnTypeGenericMetadata ) ) ;
Distance : 10

133
Tree	return ( deepStub ) container ( deepStub ( returnTypeGenericMetadata ) , container ) ;
Code	return ( deepStub ) container ( deepStub ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

134
Tree	invocation . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container )
Code	invocation . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container )
Distance : 10

135
Tree	return deepStub . StubbedInvocationMatcher ( returnTypeGenericMetadata . returnTypeGenericMetadata () , container ) < container ;
Code	return deepStub . StubbedInvocationMatcher ( returnTypeGenericMetadata . returnTypeGenericMetadata () , container ) < container ;
Distance : 9

136
Tree	return deepStub ( StubbedInvocationMatcher ( InternalMockHandler ) , container ) ;
Code	return deepStub ( StubbedInvocationMatcher ( InternalMockHandler ) , container ) ;
Distance : 8

137
Tree	return deepStub . deepStub ( returnTypeGenericMetadata , container + getInvocation ( returnTypeGenericMetadata ) ) ;
Code	return deepStub . deepStub ( returnTypeGenericMetadata , container + getInvocation ( returnTypeGenericMetadata ) ) ;
Distance : 10

138
Tree	return deepStub ( deepStub ( returnTypeGenericMetadata ) , container ) < Object ;
Code	return deepStub ( deepStub ( returnTypeGenericMetadata ) , container ) < Object ;
Distance : 9

139
Tree	return StubbedInvocationMatcher . deepStub ( returnTypeGenericMetadata , container + this . container . deepStub ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return StubbedInvocationMatcher . deepStub ( returnTypeGenericMetadata , container + this . container . deepStub ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

140
Tree	return deepStub ( GenericMetadataSupport ) < container ;
Code	return deepStub ( GenericMetadataSupport ) < container ;
Distance : 11

141
Tree	return deepStub . deepStub ( returnTypeGenericMetadata . returnTypeGenericMetadata () , container ) < Object ;
Code	return deepStub . deepStub ( returnTypeGenericMetadata . returnTypeGenericMetadata () , container ) < Object ;
Distance : 9

142
Tree	return ( deepStub ) container ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return ( deepStub ) container ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

143
Tree	return StubbedInvocationMatcher . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata , false ) , container ) ;
Code	return StubbedInvocationMatcher . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 8

144
Tree	return StubbedInvocationMatcher . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) ) ;
Code	return StubbedInvocationMatcher . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) ) ;
Distance : 11

145
Tree	return deepStub ( returnTypeGenericMetadata , container ) && container ( returnTypeGenericMetadata ) ;
Code	return deepStub ( returnTypeGenericMetadata , container ) && container ( returnTypeGenericMetadata ) ;
Distance : 10

146
Tree	container . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container )
Code	container . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container )
Distance : 10

147
Tree	container . deepStub ( deepStub ( returnTypeGenericMetadata ) , container )
Code	container . deepStub ( deepStub ( returnTypeGenericMetadata ) , container )
Distance : 10

148
Tree	return StubbedInvocationMatcher . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) ;
Code	return StubbedInvocationMatcher . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

149
Tree	return deepStub ( returnTypeGenericMetadata . deepStub () , container ) < Object ;
Code	return deepStub ( returnTypeGenericMetadata . deepStub () , container ) < Object ;
Distance : 9

150
Tree	return deepStub . deepStub ( returnTypeGenericMetadata , container + this . returnTypeGenericMetadata . deepStub ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return deepStub . deepStub ( returnTypeGenericMetadata , container + this . returnTypeGenericMetadata . deepStub ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

151
Tree	return deepStub ( handler ) . container ( returnTypeGenericMetadata ) ;
Code	return deepStub ( handler ) . container ( returnTypeGenericMetadata ) ;
Distance : 11

152
Tree	return deepStub . deepStub ( returnTypeGenericMetadata , container + returnTypeGenericMetadata ( returnTypeGenericMetadata ) ) ;
Code	return deepStub . deepStub ( returnTypeGenericMetadata , container + returnTypeGenericMetadata ( returnTypeGenericMetadata ) ) ;
Distance : 10

153
Tree	InternalMockHandler . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container )
Code	InternalMockHandler . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container )
Distance : 10

154
Tree	return StubbedInvocationMatcher ( deepStub ( returnTypeGenericMetadata ) ) ;
Code	return StubbedInvocationMatcher ( deepStub ( returnTypeGenericMetadata ) ) ;
Distance : 9

155
Tree	return deepStub ( InvocationContainerImpl ( returnTypeGenericMetadata ) , container ) ;
Code	return deepStub ( InvocationContainerImpl ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

156
Tree	return StubbedInvocationMatcher ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) ) ;
Code	return StubbedInvocationMatcher ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) ) ;
Distance : 9

157
Tree	InternalMockHandler . deepStub ( GenericMetadataSupport ( returnTypeGenericMetadata ) , container )
Code	InternalMockHandler . deepStub ( GenericMetadataSupport ( returnTypeGenericMetadata ) , container )
Distance : 10

158
Tree	return deepStub . deepStub ( getStubbedInvocations ( returnTypeGenericMetadata ) , container ) < container ;
Code	return deepStub . deepStub ( getStubbedInvocations ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 11

159
Tree	return deepStub . deepStub ( returnTypeGenericMetadata . InternalMockHandler () , container ) < container ;
Code	return deepStub . deepStub ( returnTypeGenericMetadata . InternalMockHandler () , container ) < container ;
Distance : 9

160
Tree	return deepStub . deepStub ( returnTypeGenericMetadata . returnTypeGenericMetadata () , container ) < returnTypeGenericMetadata ;
Code	return deepStub . deepStub ( returnTypeGenericMetadata . returnTypeGenericMetadata () , container ) < returnTypeGenericMetadata ;
Distance : 9

161
Tree	return deepStub . deepStub ( InvocationOnMock ( returnTypeGenericMetadata , false ) , container ) ;
Code	return deepStub . deepStub ( InvocationOnMock ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 8

162
Tree	return StubbedInvocationMatcher ( deepStub ( returnTypeGenericMetadata ) , container ) ;
Code	return StubbedInvocationMatcher ( deepStub ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

163
Tree	return deepStub . StubbedInvocationMatcher ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) ) < container ;
Code	return deepStub . StubbedInvocationMatcher ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) ) < container ;
Distance : 11

164
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) ;
Distance : 8

165
Tree	return deepStub . deepStub ( GenericMetadataSupport ( returnTypeGenericMetadata ) , container ) < container ;
Code	return deepStub . deepStub ( GenericMetadataSupport ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 11

166
Tree	return deepStub . deepStub ( getInvocation ( returnTypeGenericMetadata ) , container ) < container ;
Code	return deepStub . deepStub ( getInvocation ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 11

167
Tree	return deepStub ( getInvocation ( returnTypeGenericMetadata ) ) ;
Code	return deepStub ( getInvocation ( returnTypeGenericMetadata ) ) ;
Distance : 9

168
Tree	return deepStub ( returnTypeGenericMetadata ) . getMockHandler ( returnTypeGenericMetadata ) ;
Code	return deepStub ( returnTypeGenericMetadata ) . getMockHandler ( returnTypeGenericMetadata ) ;
Distance : 10

169
Tree	return deepStub ( returnTypeGenericMetadata . StubbedInvocationMatcher () , container ) < container ;
Code	return deepStub ( returnTypeGenericMetadata . StubbedInvocationMatcher () , container ) < container ;
Distance : 9

170
Tree	return StubbedInvocationMatcher ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) < container ;
Code	return StubbedInvocationMatcher ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 9

171
Tree	return StubbedInvocationMatcher ( deepStub ( returnTypeGenericMetadata ) , container ) < container ;
Code	return StubbedInvocationMatcher ( deepStub ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 9

172
Tree	return deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) < returnTypeGenericMetadata ;
Code	return deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) < returnTypeGenericMetadata ;
Distance : 9

173
Tree	return deepStub . deepStub ( getStubbedInvocations ( returnTypeGenericMetadata ) ) < container ;
Code	return deepStub . deepStub ( getStubbedInvocations ( returnTypeGenericMetadata ) ) < container ;
Distance : 11

174
Tree	return deepStub . deepStub ( InvocationOnMock ( returnTypeGenericMetadata ) ) ;
Code	return deepStub . deepStub ( InvocationOnMock ( returnTypeGenericMetadata ) ) ;
Distance : 11

175
Tree	return deepStub . StubbedInvocationMatcher ( deepStub ( returnTypeGenericMetadata ) , container ) < container ;
Code	return deepStub . StubbedInvocationMatcher ( deepStub ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 11

176
Tree	return deepStub ( returnTypeGenericMetadata . GenericMetadataSupport () , container ) < container ;
Code	return deepStub ( returnTypeGenericMetadata . GenericMetadataSupport () , container ) < container ;
Distance : 9

177
Tree	return deepStub ( InternalMockHandler . deepStub () , container ) < container ;
Code	return deepStub ( InternalMockHandler . deepStub () , container ) < container ;
Distance : 10

178
Tree	return deepStub . deepStub ( getInvocation ( returnTypeGenericMetadata ) ) < container ;
Code	return deepStub . deepStub ( getInvocation ( returnTypeGenericMetadata ) ) < container ;
Distance : 11

179
Tree	return deepStub ( returnTypeGenericMetadata , container ) && getMockHandler ( returnTypeGenericMetadata ) ;
Code	return deepStub ( returnTypeGenericMetadata , container ) && getMockHandler ( returnTypeGenericMetadata ) ;
Distance : 10

180
Tree	return deepStub . StubbedInvocationMatcher ( deepStub ( returnTypeGenericMetadata ) ) < container ;
Code	return deepStub . StubbedInvocationMatcher ( deepStub ( returnTypeGenericMetadata ) ) < container ;
Distance : 11

181
Tree	return deepStub ( StubbedInvocationMatcher ( InternalMockHandler ) ) ;
Code	return deepStub ( StubbedInvocationMatcher ( InternalMockHandler ) ) ;
Distance : 10

182
Tree	return ( StubbedInvocationMatcher ) container ( deepStub ( returnTypeGenericMetadata ) , container ) ;
Code	return ( StubbedInvocationMatcher ) container ( deepStub ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

183
Tree	return deepStub ( getInvocation ( returnTypeGenericMetadata ) , container ) ;
Code	return deepStub ( getInvocation ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

184
Tree	return deepStub . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) ;
Code	return deepStub . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

185
Tree	return deepStub ( InvocationContainerImpl ( returnTypeGenericMetadata ) ) ;
Code	return deepStub ( InvocationContainerImpl ( returnTypeGenericMetadata ) ) ;
Distance : 9

186
Tree	return deepStub . deepStub ( returnTypeGenericMetadata , container + this . container . getInvocation ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return deepStub . deepStub ( returnTypeGenericMetadata , container + this . container . getInvocation ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

187
Tree	return deepStub . deepStub ( GenericMetadataSupport ( returnTypeGenericMetadata ) ) < container ;
Code	return deepStub . deepStub ( GenericMetadataSupport ( returnTypeGenericMetadata ) ) < container ;
Distance : 11

188
Tree	return deepStub ( returnTypeGenericMetadata , container ) < Object ;
Code	return deepStub ( returnTypeGenericMetadata , container ) < Object ;
Distance : 10

189
Tree	return deepStub . deepStub ( returnTypeGenericMetadata , container + this . container . InvocationContainerImpl ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return deepStub . deepStub ( returnTypeGenericMetadata , container + this . container . InvocationContainerImpl ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

190
Tree	return ( deepStub ) container ( returnTypeGenericMetadata ) ;
Code	return ( deepStub ) container ( returnTypeGenericMetadata ) ;
Distance : 12

191
Tree	return deepStub . deepStub ( returnTypeGenericMetadata , container + this . container . StubbedInvocationMatcher ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return deepStub . deepStub ( returnTypeGenericMetadata , container + this . container . StubbedInvocationMatcher ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

192
Tree	return deepStub . deepStub ( returnTypeGenericMetadata , returnTypeGenericMetadata + this . container . deepStub ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return deepStub . deepStub ( returnTypeGenericMetadata , returnTypeGenericMetadata + this . container . deepStub ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

193
Tree	returnTypeGenericMetadata . deepStub ( deepStub ( returnTypeGenericMetadata ) , container )
Code	returnTypeGenericMetadata . deepStub ( deepStub ( returnTypeGenericMetadata ) , container )
Distance : 10

194
Tree	return StubbedInvocationMatcher . deepStub ( returnTypeGenericMetadata . returnTypeGenericMetadata () , container ) < container ;
Code	return StubbedInvocationMatcher . deepStub ( returnTypeGenericMetadata . returnTypeGenericMetadata () , container ) < container ;
Distance : 9

195
Tree	return deepStub ( returnTypeGenericMetadata . newDeepStubMock () , container ) < container ;
Code	return deepStub ( returnTypeGenericMetadata . newDeepStubMock () , container ) < container ;
Distance : 9

196
Tree	InternalMockHandler . deepStub ( deepStub ( returnTypeGenericMetadata ) , container )
Code	InternalMockHandler . deepStub ( deepStub ( returnTypeGenericMetadata ) , container )
Distance : 10

197
Tree	returnTypeGenericMetadata . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container )
Code	returnTypeGenericMetadata . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container )
Distance : 10

198
Tree	return deepStub . deepStub ( newDeepStubMock ( returnTypeGenericMetadata , false ) , container ) ;
Code	return deepStub . deepStub ( newDeepStubMock ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 7

199
Tree	return deepStub . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) < Object ;
Code	return deepStub . deepStub ( StubbedInvocationMatcher ( returnTypeGenericMetadata ) , container ) < Object ;
Distance : 11

========================================================================


========================================================================
Example Number: 87
Parent Code is: 
{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anyCollection () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=Collection})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyCollection}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 9
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return ( Collection ) reportMatcher . returnList ( reportMatcher ) ; }
Code	{ return ( Collection ) reportMatcher . returnList ( reportMatcher ) ; }
Distance : 9

1
Tree	{ reportMatcher ( Any.ANY , returnList ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , returnList ) ; return null ; }
Distance : 9

2
Tree	{ return ( Collection ) Any.ANY . returnList () ; }
Code	{ return ( Collection ) Any.ANY . returnList () ; }
Distance : 6

3
Tree	{ return ( clazz ) reportMatcher ( Any.ANY ) . returnList ( reportMatcher ) ; }
Code	{ return ( clazz ) reportMatcher ( Any.ANY ) . returnList ( reportMatcher ) ; }
Distance : 12

4
Tree	{ return ( Collection ) reportMatcher ( reportMatcher . Any.ANY () ) ; }
Code	{ return ( Collection ) reportMatcher ( reportMatcher . Any.ANY () ) ; }
Distance : 9

5
Tree	{ clazz () ; return null ; }
Code	{ clazz () ; return null ; }
Distance : 5

6
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 2

7
Tree	{ return reportMatcher ( reportMatcher ) ; }
Code	{ return reportMatcher ( reportMatcher ) ; }
Distance : 4

8
Tree	{ reportMatcher () ; return super(); ; }
Code	{ reportMatcher () ; return super(); ; }
Distance : 5

9
Tree	{ return ( clazz ) this . returnList . returnList () ; }
Code	{ return ( clazz ) this . returnList . returnList () ; }
Distance : 8

10
Tree	{ return ( Collection ) reportMatcher ( T . Any.ANY () ) ; }
Code	{ return ( Collection ) reportMatcher ( T . Any.ANY () ) ; }
Distance : 9

11
Tree	{ return return ( Any.ANY ) ; }
Code	{ return return ( Any.ANY ) ; }
Distance : 4

12
Tree	{ return ( clazz ) Any.ANY ( Any.ANY ) ; }
Code	{ return ( clazz ) Any.ANY ( Any.ANY ) ; }
Distance : 7

13
Tree	{ return ( Collection ) Any.ANY ( reportMatcher ) . returnList () ; }
Code	{ return ( Collection ) Any.ANY ( reportMatcher ) . returnList () ; }
Distance : 9

14
Tree	{ return ( Class ) reportMatcher ( T ) . returnList () ; }
Code	{ return ( Class ) reportMatcher ( T ) . returnList () ; }
Distance : 9

15
Tree	{ return ( clazz ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( clazz ) reportMatcher ( Any.ANY ) ; }
Distance : 7

16
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 4

17
Tree	{ return ( clazz ) reportMatcher () ; }
Code	{ return ( clazz ) reportMatcher () ; }
Distance : 4

18
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

19
Tree	{ return Any.ANY () ; }
Code	{ return Any.ANY () ; }
Distance : 1

20
Tree	{ Any.ANY ( Any.ANY ) ; return null ; }
Code	{ Any.ANY ( Any.ANY ) ; return null ; }
Distance : 7

21
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

22
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 1

23
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; }
Distance : 7

24
Tree	{ return ( Collection ) reportMatcher () ; }
Code	{ return ( Collection ) reportMatcher () ; }
Distance : 4

25
Tree	{ return null ; }
Code	{ return null ; }
Distance : 2

26
Tree	{ return ( Collection ) reportMatcher ( T ) ; }
Code	{ return ( Collection ) reportMatcher ( T ) ; }
Distance : 7

27
Tree	{ return ( clazz ) reportMatcher ( T ) ; }
Code	{ return ( clazz ) reportMatcher ( T ) ; }
Distance : 7

28
Tree	{ return ( Collection ) reportMatcher ( reportMatcher ) ; }
Code	{ return ( Collection ) reportMatcher ( reportMatcher ) ; }
Distance : 7

29
Tree	{ reportMatcher () ; return null ; }
Code	{ reportMatcher () ; return null ; }
Distance : 5

30
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 2

31
Tree	{ return ( Collection ) Any.ANY ( Any.ANY ) ; }
Code	{ return ( Collection ) Any.ANY ( Any.ANY ) ; }
Distance : 7

32
Tree	{ return Collection ; }
Code	{ return Collection ; }
Distance : 2

33
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; }
Distance : 7

34
Tree	{ return ( clazz ) reportMatcher ( reportMatcher ) ; }
Code	{ return ( clazz ) reportMatcher ( reportMatcher ) ; }
Distance : 7

35
Tree	{ return clazz ; }
Code	{ return clazz ; }
Distance : 2

36
Tree	{ return ( Collection ) reportMatcher ( reportMatcher ) ; }
Code	{ return ( Collection ) reportMatcher ( reportMatcher ) ; }
Distance : 7

37
Tree	{ reportMatcher ( T ) ; return null ; }
Code	{ reportMatcher ( T ) ; return null ; }
Distance : 7

38
Tree	{ ( ( Any.ANY ) ; return null ; }
Code	{ ( ( Any.ANY ) ; return null ; }
Distance : 7

39
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

40
Tree	{ return ( Collection ) returnList ( Any.ANY ) ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) ; }
Distance : 7

41
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( clazz ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( clazz ) ; }
Distance : 12

42
Tree	{ return ( Collection ) Any.ANY () ; }
Code	{ return ( Collection ) Any.ANY () ; }
Distance : 4

43
Tree	{ reportMatcher ( reportMatcher ) ; return null ; }
Code	{ reportMatcher ( reportMatcher ) ; return null ; }
Distance : 7

44
Tree	{ return ( Collection ) reportMatcher ( reportMatcher ) . returnList () ; }
Code	{ return ( Collection ) reportMatcher ( reportMatcher ) . returnList () ; }
Distance : 9

45
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 7

46
Tree	{ return ( Collection ) returnList () ; }
Code	{ return ( Collection ) returnList () ; }
Distance : 4

47
Tree	{ return ( Collection ) reportMatcher ( T ) ; }
Code	{ return ( Collection ) reportMatcher ( T ) ; }
Distance : 7

48
Tree	{ return ( Collection ) Any.ANY ( Any.ANY ) . returnList () ; }
Code	{ return ( Collection ) Any.ANY ( Any.ANY ) . returnList () ; }
Distance : 9

49
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 2

50
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( Any.ANY ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( Any.ANY ) ; }
Distance : 12

51
Tree	{ return ( clazz ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( clazz ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

52
Tree	{ return ( Collection ) clazz () ; }
Code	{ return ( Collection ) clazz () ; }
Distance : 4

53
Tree	{ return ( Class ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Class ) reportMatcher ( Any.ANY ) ; }
Distance : 7

54
Tree	{ return () ; return null ; }
Code	{ return () ; return null ; }
Distance : 4

55
Tree	{ return ( clazz ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( clazz ) reportMatcher ( Any.ANY ) ; }
Distance : 7

56
Tree	{ return ( Collection ) T () ; }
Code	{ return ( Collection ) T () ; }
Distance : 4

57
Tree	{ return ( clazz ) Any.ANY () ; }
Code	{ return ( clazz ) Any.ANY () ; }
Distance : 4

58
Tree	{ return Matchers () ; }
Code	{ return Matchers () ; }
Distance : 1

59
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 9

60
Tree	{ return ( Class ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( Class ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

61
Tree	{ return reportMatcher ; }
Code	{ return reportMatcher ; }
Distance : 2

62
Tree	{ return ( Collection ) reportMatcher ( clazz ) ; }
Code	{ return ( Collection ) reportMatcher ( clazz ) ; }
Distance : 7

63
Tree	{ return ( clazz ) reportMatcher . returnList () ; }
Code	{ return ( clazz ) reportMatcher . returnList () ; }
Distance : 6

64
Tree	{ return clazz () ; }
Code	{ return clazz () ; }
Distance : 1

65
Tree	{ return ( clazz ) this . clazz . returnList () ; }
Code	{ return ( clazz ) this . clazz . returnList () ; }
Distance : 8

66
Tree	{ reportMatcher () ; return continue; ; }
Code	{ reportMatcher () ; return continue; ; }
Distance : 5

67
Tree	{ return T ; }
Code	{ return T ; }
Distance : 2

68
Tree	{ return Any.ANY ; }
Code	{ return Any.ANY ; }
Distance : 2

69
Tree	{ return ( Collection ) Any.ANY ( T ) ; }
Code	{ return ( Collection ) Any.ANY ( T ) ; }
Distance : 7

70
Tree	{ return ( Collection ) reportMatcher ( Any.ANY . returnList () ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY . returnList () ) ; }
Distance : 9

71
Tree	{ reportMatcher ( Any.ANY , Collection ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , Collection ) ; return null ; }
Distance : 9

72
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

73
Tree	{ Matchers () ; return null ; }
Code	{ Matchers () ; return null ; }
Distance : 5

74
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 7

75
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . clazz () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . clazz () ; }
Distance : 9

76
Tree	{ return ( Collection ) reportMatcher . returnList ( T ) ; }
Code	{ return ( Collection ) reportMatcher . returnList ( T ) ; }
Distance : 9

77
Tree	{ return Matchers ; }
Code	{ return Matchers ; }
Distance : 2

78
Tree	{ reportMatcher ( Any.ANY , returnList ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , returnList ) ; return null ; }
Distance : 9

79
Tree	{ reportMatcher ( Any.ANY , reportMatcher ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , reportMatcher ) ; return null ; }
Distance : 9

80
Tree	{ return ( Collection ) this . T . returnList () ; }
Code	{ return ( Collection ) this . T . returnList () ; }
Distance : 8

81
Tree	{ return ( clazz ) reportMatcher ( Any.ANY ) . returnList ( T ) ; }
Code	{ return ( clazz ) reportMatcher ( Any.ANY ) . returnList ( T ) ; }
Distance : 12

82
Tree	{ return reportMatcher ( T ) ; }
Code	{ return reportMatcher ( T ) ; }
Distance : 4

83
Tree	{ return ( Matchers ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Matchers ) reportMatcher ( Any.ANY ) ; }
Distance : 7

84
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( reportMatcher ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( reportMatcher ) ; }
Distance : 12

85
Tree	{ return returnList ( Any.ANY ) ; }
Code	{ return returnList ( Any.ANY ) ; }
Distance : 4

86
Tree	{ return ( Collection ) reportMatcher ( T . returnList () ) ; }
Code	{ return ( Collection ) reportMatcher ( T . returnList () ) ; }
Distance : 9

87
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 7

88
Tree	{ return ( Collection ) reportMatcher ( reportMatcher ) . returnList () ; }
Code	{ return ( Collection ) reportMatcher ( reportMatcher ) . returnList () ; }
Distance : 9

89
Tree	{ super ( Collection ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Collection ) ; reportMatcher ( Any.ANY ) ; }
Distance : 9

90
Tree	{ return ( Collection ) reportMatcher . returnList ( T ) ; }
Code	{ return ( Collection ) reportMatcher . returnList ( T ) ; }
Distance : 9

91
Tree	{ return ( clazz ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( clazz ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

92
Tree	{ return ( clazz ) reportMatcher ( Any.ANY ) . returnList ( Any.ANY ) ; }
Code	{ return ( clazz ) reportMatcher ( Any.ANY ) . returnList ( Any.ANY ) ; }
Distance : 12

93
Tree	{ reportMatcher () ; return return; ; }
Code	{ reportMatcher () ; return return; ; }
Distance : 5

94
Tree	{ return ( Class ) reportMatcher ( T ) ; }
Code	{ return ( Class ) reportMatcher ( T ) ; }
Distance : 7

95
Tree	{ return ( Collection ) T . returnList () ; }
Code	{ return ( Collection ) T . returnList () ; }
Distance : 6

96
Tree	{ return ( Collection ) reportMatcher ( T ) . returnList () ; }
Code	{ return ( Collection ) reportMatcher ( T ) . returnList () ; }
Distance : 9

97
Tree	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; }
Distance : 9

98
Tree	{ return ( Matchers ) reportMatcher () ; }
Code	{ return ( Matchers ) reportMatcher () ; }
Distance : 4

99
Tree	{ return ( clazz ) T . returnList () ; }
Code	{ return ( clazz ) T . returnList () ; }
Distance : 6

100
Tree	{ return ( Collection ) Any.ANY ( reportMatcher ) ; }
Code	{ return ( Collection ) Any.ANY ( reportMatcher ) ; }
Distance : 7

101
Tree	{ return ( Collection ) reportMatcher . returnList ( Any.ANY ) ; }
Code	{ return ( Collection ) reportMatcher . returnList ( Any.ANY ) ; }
Distance : 9

102
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 2

103
Tree	{ return ( clazz ) reportMatcher ( T ) . returnList () ; }
Code	{ return ( clazz ) reportMatcher ( T ) . returnList () ; }
Distance : 9

104
Tree	{ super ( Collection ) ; Any.ANY ( Any.ANY ) ; }
Code	{ super ( Collection ) ; Any.ANY ( Any.ANY ) ; }
Distance : 9

105
Tree	{ return ( Collection ) reportMatcher . returnList () ; }
Code	{ return ( Collection ) reportMatcher . returnList () ; }
Distance : 6

106
Tree	{ return ( Collection ) reportMatcher . Any.ANY ( T ) ; }
Code	{ return ( Collection ) reportMatcher . Any.ANY ( T ) ; }
Distance : 9

107
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 7

108
Tree	{ return ( Collection ) this . returnList . Any.ANY () ; }
Code	{ return ( Collection ) this . returnList . Any.ANY () ; }
Distance : 8

109
Tree	{ return ( Collection ) reportMatcher ( clazz ) . returnList () ; }
Code	{ return ( Collection ) reportMatcher ( clazz ) . returnList () ; }
Distance : 9

110
Tree	{ return ( Collection ) T . returnList ( T ) ; }
Code	{ return ( Collection ) T . returnList ( T ) ; }
Distance : 9

111
Tree	{ return ( Collection ) reportMatcher ( T ) . returnList () ; }
Code	{ return ( Collection ) reportMatcher ( T ) . returnList () ; }
Distance : 9

112
Tree	{ return ( Collection ) T . returnList ( Any.ANY ) ; }
Code	{ return ( Collection ) T . returnList ( Any.ANY ) ; }
Distance : 9

113
Tree	{ return ( clazz ) reportMatcher ( reportMatcher . returnList () ) ; }
Code	{ return ( clazz ) reportMatcher ( reportMatcher . returnList () ) ; }
Distance : 9

114
Tree	{ return ( Collection ) reportMatcher ( reportMatcher . returnList () ) ; }
Code	{ return ( Collection ) reportMatcher ( reportMatcher . returnList () ) ; }
Distance : 9

115
Tree	{ return Class () ; }
Code	{ return Class () ; }
Distance : 1

116
Tree	{ return ( Class ) reportMatcher () ; }
Code	{ return ( Class ) reportMatcher () ; }
Distance : 4

117
Tree	{ return ( Collection ) clazz . returnList () ; }
Code	{ return ( Collection ) clazz . returnList () ; }
Distance : 6

118
Tree	{ return ( Collection ) reportMatcher . returnList () ; }
Code	{ return ( Collection ) reportMatcher . returnList () ; }
Distance : 6

119
Tree	{ return ( clazz ) reportMatcher ( Any.ANY ) . returnList ( clazz ) ; }
Code	{ return ( clazz ) reportMatcher ( Any.ANY ) . returnList ( clazz ) ; }
Distance : 12

120
Tree	{ return ( Collection ) this . returnList . returnList () ; }
Code	{ return ( Collection ) this . returnList . returnList () ; }
Distance : 8

121
Tree	{ return return () ; }
Code	{ return return () ; }
Distance : 1

122
Tree	{ T () ; return null ; }
Code	{ T () ; return null ; }
Distance : 5

123
Tree	{ Any.ANY ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ Any.ANY ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 9

124
Tree	{ return ( Collection ) Any.ANY ( T ) . returnList () ; }
Code	{ return ( Collection ) Any.ANY ( T ) . returnList () ; }
Distance : 9

125
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; }
Distance : 9

126
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( returnList ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( returnList ) ; }
Distance : 12

127
Tree	{ return ( clazz ) reportMatcher ( T . returnList () ) ; }
Code	{ return ( clazz ) reportMatcher ( T . returnList () ) ; }
Distance : 9

128
Tree	{ return ( Collection ) reportMatcher ( Any.ANY . Any.ANY () ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY . Any.ANY () ) ; }
Distance : 9

129
Tree	{ return ( Matchers ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( Matchers ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

130
Tree	{ return returnList () ; }
Code	{ return returnList () ; }
Distance : 1

131
Tree	{ return Class ; }
Code	{ return Class ; }
Distance : 2

132
Tree	{ return ( Collection ) reportMatcher . Any.ANY () ; }
Code	{ return ( Collection ) reportMatcher . Any.ANY () ; }
Distance : 6

133
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 2

134
Tree	{ return ( T ) reportMatcher () ; }
Code	{ return ( T ) reportMatcher () ; }
Distance : 4

135
Tree	{ super ( clazz ) ; returnList ( Any.ANY ) ; }
Code	{ super ( clazz ) ; returnList ( Any.ANY ) ; }
Distance : 9

136
Tree	{ return ( Collection ) Any.ANY . returnList ( T ) ; }
Code	{ return ( Collection ) Any.ANY . returnList ( T ) ; }
Distance : 9

137
Tree	{ reportMatcher ( Any.ANY , clazz ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , clazz ) ; return null ; }
Distance : 9

138
Tree	{ super ( clazz ) ; returnList ( Any.ANY ) ; }
Code	{ super ( clazz ) ; returnList ( Any.ANY ) ; }
Distance : 9

139
Tree	{ return ( clazz ) reportMatcher ( Any.ANY . returnList () ) ; }
Code	{ return ( clazz ) reportMatcher ( Any.ANY . returnList () ) ; }
Distance : 9

140
Tree	{ return ( Collection ) T ( Any.ANY ) ; }
Code	{ return ( Collection ) T ( Any.ANY ) ; }
Distance : 7

141
Tree	{ returnList () ; return null ; }
Code	{ returnList () ; return null ; }
Distance : 5

142
Tree	{ return ( Collection ) reportMatcher . clazz () ; }
Code	{ return ( Collection ) reportMatcher . clazz () ; }
Distance : 6

143
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 3

144
Tree	{ T ( Any.ANY ) ; return null ; }
Code	{ T ( Any.ANY ) ; return null ; }
Distance : 7

145
Tree	{ return Collection ( Any.ANY ) ; }
Code	{ return Collection ( Any.ANY ) ; }
Distance : 4

146
Tree	{ super ( Collection ) ; returnList ( reportMatcher ) ; }
Code	{ super ( Collection ) ; returnList ( reportMatcher ) ; }
Distance : 9

147
Tree	{ return ( Collection ) T . returnList ( reportMatcher ) ; }
Code	{ return ( Collection ) T . returnList ( reportMatcher ) ; }
Distance : 9

148
Tree	{ return ( clazz ) reportMatcher ( reportMatcher ) . returnList () ; }
Code	{ return ( clazz ) reportMatcher ( reportMatcher ) . returnList () ; }
Distance : 9

149
Tree	{ super ( Collection . Any.ANY ( T ) ) ; returnList () ; }
Code	{ super ( Collection . Any.ANY ( T ) ) ; returnList () ; }
Distance : 11

150
Tree	{ return ( Collection ) returnList . returnList () ; }
Code	{ return ( Collection ) returnList . returnList () ; }
Distance : 6

151
Tree	{ super ( Collection . reportMatcher ( T ) ) ; returnList () ; }
Code	{ super ( Collection . reportMatcher ( T ) ) ; returnList () ; }
Distance : 11

152
Tree	{ return STRING_CONSTANT ; } f
Code	{ return STRING_CONSTANT ; } f
Distance : 3

153
Tree	{ return reportMatcher () ; } wanted
Code	{ return reportMatcher () ; } wanted
Distance : 2

154
Tree	{ reportMatcher ( reportMatcher , Any.ANY ) ; return null ; }
Code	{ reportMatcher ( reportMatcher , Any.ANY ) ; return null ; }
Distance : 9

155
Tree	{ return Collection ; }
Code	{ return Collection ; }
Distance : 2

156
Tree	{ return ( Collection ) this . Any.ANY . returnList () ; }
Code	{ return ( Collection ) this . Any.ANY . returnList () ; }
Distance : 8

157
Tree	{ super ( Collection . Any.ANY ( reportMatcher ) ) ; returnList () ; }
Code	{ super ( Collection . Any.ANY ( reportMatcher ) ) ; returnList () ; }
Distance : 11

158
Tree	{ return clazz ( Any.ANY ) ; }
Code	{ return clazz ( Any.ANY ) ; }
Distance : 4

159
Tree	{ return STRING_CONSTANT ; } MathRuntimeException
Code	{ return STRING_CONSTANT ; } MathRuntimeException
Distance : 3

160
Tree	{ return Collection () ; }
Code	{ return Collection () ; }
Distance : 1

161
Tree	{ return Matchers ( Any.ANY ) ; }
Code	{ return Matchers ( Any.ANY ) ; }
Distance : 4

162
Tree	{ return STRING_CONSTANT ; } mock
Code	{ return STRING_CONSTANT ; } mock
Distance : 3

163
Tree	{ super ( Collection ) ; clazz ( Any.ANY ) ; }
Code	{ super ( Collection ) ; clazz ( Any.ANY ) ; }
Distance : 9

164
Tree	{ super ( Collection ) ; T ( Any.ANY ) ; }
Code	{ super ( Collection ) ; T ( Any.ANY ) ; }
Distance : 9

165
Tree	{ return ( clazz ) reportMatcher . returnList ( T ) ; }
Code	{ return ( clazz ) reportMatcher . returnList ( T ) ; }
Distance : 9

166
Tree	{ return reportMatcher ( Class ) ; }
Code	{ return reportMatcher ( Class ) ; }
Distance : 4

167
Tree	{ super ( Collection . Any.ANY ( Any.ANY ) ) ; returnList () ; }
Code	{ super ( Collection . Any.ANY ( Any.ANY ) ) ; returnList () ; }
Distance : 11

168
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 3

169
Tree	{ super ( Collection . reportMatcher ( reportMatcher ) ) ; returnList () ; }
Code	{ super ( Collection . reportMatcher ( reportMatcher ) ) ; returnList () ; }
Distance : 11

170
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 3

171
Tree	{ reportMatcher ( Any.ANY , Class ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , Class ) ; return null ; }
Distance : 9

172
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 3

173
Tree	{ return Collection ; } wanted
Code	{ return Collection ; } wanted
Distance : 3

174
Tree	{ return ( Collection ) this . returnList . returnList () ; }
Code	{ return ( Collection ) this . returnList . returnList () ; }
Distance : 8

175
Tree	{ super ( Collection . returnList ( Any.ANY ) ) ; returnList () ; }
Code	{ super ( Collection . returnList ( Any.ANY ) ) ; returnList () ; }
Distance : 11

176
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( Class ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( Class ) ; }
Distance : 12

177
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 3

178
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 3

179
Tree	{ reportMatcher ( Any.ANY , T ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , T ) ; return null ; }
Distance : 9

180
Tree	{ Any.ANY () ; return null ; }
Code	{ Any.ANY () ; return null ; }
Distance : 5

181
Tree	{ return ( Collection ) this . clazz . returnList () ; }
Code	{ return ( Collection ) this . clazz . returnList () ; }
Distance : 8

182
Tree	{ super ( clazz . Any.ANY ( Any.ANY ) ) ; returnList () ; }
Code	{ super ( clazz . Any.ANY ( Any.ANY ) ) ; returnList () ; }
Distance : 11

183
Tree	{ super ( Collection . Any.ANY ( Any.ANY ) ) ; returnList () ; }
Code	{ super ( Collection . Any.ANY ( Any.ANY ) ) ; returnList () ; }
Distance : 11

184
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 3

185
Tree	{ return STRING_CONSTANT ; } [
Code	{ return STRING_CONSTANT ; } [
Distance : 3

186
Tree	{ return ( Collection ) reportMatcher ( T . clazz () ) ; }
Code	{ return ( Collection ) reportMatcher ( T . clazz () ) ; }
Distance : 9

187
Tree	{ return returnList ; }
Code	{ return returnList ; }
Distance : 2

188
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( T ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( T ) ; }
Distance : 12

189
Tree	{ super ( Collection . Class ( Any.ANY ) ) ; returnList () ; }
Code	{ super ( Collection . Class ( Any.ANY ) ) ; returnList () ; }
Distance : 11

190
Tree	{ super ( Collection . reportMatcher ( Any.ANY ) ) ; returnList () ; }
Code	{ super ( Collection . reportMatcher ( Any.ANY ) ) ; returnList () ; }
Distance : 11

191
Tree	{ return Any.ANY ( Any.ANY ) ; }
Code	{ return Any.ANY ( Any.ANY ) ; }
Distance : 4

192
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; }
Distance : 9

193
Tree	{ return ( Collection ) this . returnList . returnList () ; }
Code	{ return ( Collection ) this . returnList . returnList () ; }
Distance : 8

194
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 2

195
Tree	{ return T () ; }
Code	{ return T () ; }
Distance : 1

196
Tree	{ super ( Collection ) ; Matchers ( Any.ANY ) ; }
Code	{ super ( Collection ) ; Matchers ( Any.ANY ) ; }
Distance : 9

197
Tree	{ return ( Collection ) this . Matchers . returnList () ; }
Code	{ return ( Collection ) this . Matchers . returnList () ; }
Distance : 8

198
Tree	{ return STRING_CONSTANT ; } Override
Code	{ return STRING_CONSTANT ; } Override
Distance : 3

199
Tree	{ return STRING_CONSTANT ; } -
Code	{ return STRING_CONSTANT ; } -
Distance : 3

========================================================================


========================================================================
Example Number: 88
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Collection . class ) ) . returnList () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Collection})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super ( reportMatcher ) ; returnList ( Any.ANY ) . returnList () ; }
Code	{ super ( reportMatcher ) ; returnList ( Any.ANY ) . returnList () ; }
Distance : 9

1
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . Any.ANY = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . Any.ANY = reportMatcher ; }
Distance : 12

2
Tree	{ super ( returnList ) ; }
Code	{ super ( returnList ) ; }
Distance : 12

3
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; this . Matchers = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Matchers = Any.ANY ; }
Distance : 11

5
Tree	{ return ( reportMatcher ) InstanceOf ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) InstanceOf ( Any.ANY ) ; }
Distance : 10

6
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; reportMatcher = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; reportMatcher = false ; }
Distance : 11

7
Tree	{ reportMatcher ( returnList ) ; return false ; }
Code	{ reportMatcher ( returnList ) ; return false ; }
Distance : 11

8
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; reportMatcher = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; reportMatcher = false ; }
Distance : 11

9
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . Matchers = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . Matchers = reportMatcher ; }
Distance : 12

10
Tree	{ return ( reportMatcher ) returnList () ; }
Code	{ return ( reportMatcher ) returnList () ; }
Distance : 9

11
Tree	{ return reportMatcher ( InstanceOf ) . returnList () ; }
Code	{ return reportMatcher ( InstanceOf ) . returnList () ; }
Distance : 6

12
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

13
Tree	{ return ( reportMatcher ) reportMatcher () ; }
Code	{ return ( reportMatcher ) reportMatcher () ; }
Distance : 10

14
Tree	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) ; }
Distance : 11

15
Tree	{ return this . InstanceOf ; }
Code	{ return this . InstanceOf ; }
Distance : 12

16
Tree	{ reportMatcher ( InstanceOf ) ; return null ; }
Code	{ reportMatcher ( InstanceOf ) ; return null ; }
Distance : 10

17
Tree	{ return this . Any.ANY ; }
Code	{ return this . Any.ANY ; }
Distance : 12

18
Tree	{ return this . reportMatcher ; }
Code	{ return this . reportMatcher ; }
Distance : 12

19
Tree	{ super ( reportMatcher ) ; returnList ( reportMatcher ) ; super }
Code	{ super ( reportMatcher ) ; returnList ( reportMatcher ) ; super }
Distance : 13

20
Tree	{ return InstanceOf ( Any.ANY ) . returnList () ; }
Code	{ return InstanceOf ( Any.ANY ) . returnList () ; }
Distance : 7

21
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

22
Tree	{ reportMatcher ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Distance : 11

23
Tree	{ reportMatcher ( Any.ANY ) ; this . returnList = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnList = reportMatcher ; }
Distance : 11

24
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 7

25
Tree	{ super ( InstanceOf ) ; returnList ( Any.ANY ) ; super }
Code	{ super ( InstanceOf ) ; returnList ( Any.ANY ) ; super }
Distance : 12

26
Tree	{ super ( Any.ANY ) ; returnList ( Any.ANY ) . returnList () ; }
Code	{ super ( Any.ANY ) ; returnList ( Any.ANY ) . returnList () ; }
Distance : 9

27
Tree	{ super ( reportMatcher ) ; Any.ANY ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; Any.ANY ( Any.ANY ) ; }
Distance : 12

28
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

29
Tree	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Distance : 8

30
Tree	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) . returnList () ; }
Code	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) . returnList () ; }
Distance : 8

31
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

32
Tree	{ super ( Any.ANY ) ; returnList ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; returnList ( Any.ANY ) ; }
Distance : 12

33
Tree	{ reportMatcher ( InstanceOf ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( InstanceOf ) ; return NUMBER_CONSTANT ; }
Distance : 10

34
Tree	{ reportMatcher ( returnList ) ; return null ; }
Code	{ reportMatcher ( returnList ) ; return null ; }
Distance : 11

35
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

36
Tree	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = reportMatcher ; }
Distance : 11

37
Tree	{ return ( reportMatcher ) returnList ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) returnList ( Any.ANY ) ; }
Distance : 11

38
Tree	{ super ( Any.ANY ) ; returnList ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; returnList ( Any.ANY ) ; }
Distance : 12

39
Tree	{ reportMatcher ( reportMatcher ) ; return false ; }
Code	{ reportMatcher ( reportMatcher ) ; return false ; }
Distance : 11

40
Tree	{ super ( reportMatcher ) ; returnList ( Any.ANY ) ; super }
Code	{ super ( reportMatcher ) ; returnList ( Any.ANY ) ; super }
Distance : 13

41
Tree	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; }
Distance : 12

42
Tree	{ reportMatcher ( reportMatcher ) ; return true ; }
Code	{ reportMatcher ( reportMatcher ) ; return true ; }
Distance : 11

43
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 7

44
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

45
Tree	{ return Any.ANY ( Any.ANY ) . returnList () ; }
Code	{ return Any.ANY ( Any.ANY ) . returnList () ; }
Distance : 8

46
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

47
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

48
Tree	{ return reportMatcher ( reportMatcher ) . returnList () ; }
Code	{ return reportMatcher ( reportMatcher ) . returnList () ; }
Distance : 7

49
Tree	{ return reportMatcher ( InstanceOf ) ; }
Code	{ return reportMatcher ( InstanceOf ) ; }
Distance : 9

50
Tree	{ reportMatcher ( Any.ANY ) ; returnList = Any.ANY . returnList () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnList = Any.ANY . returnList () ; }
Distance : 9

51
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; InstanceOf = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; InstanceOf = false ; }
Distance : 11

52
Tree	{ return Any.ANY ( Any.ANY ) ; }
Code	{ return Any.ANY ( Any.ANY ) ; }
Distance : 11

53
Tree	{ return reportMatcher ( Any.ANY ) . < Any.ANY > Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Any.ANY > Any.ANY () ; }
Distance : 9

54
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

55
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . returnList = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . returnList = reportMatcher ; }
Distance : 11

56
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

57
Tree	{ return ( Any.ANY ) Any.ANY () ; }
Code	{ return ( Any.ANY ) Any.ANY () ; }
Distance : 10

58
Tree	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 7

59
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; Matchers = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; Matchers = false ; }
Distance : 11

60
Tree	{ super ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; }
Distance : 12

61
Tree	{ return reportMatcher ( Any.ANY ) . < returnList > Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnList > Any.ANY () ; }
Distance : 9

62
Tree	{ super ( Matchers ) ; }
Code	{ super ( Matchers ) ; }
Distance : 12

63
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . returnList = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . returnList = Any.ANY ; }
Distance : 11

64
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; reportMatcher = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; reportMatcher = false ; }
Distance : 11

65
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . returnList = InstanceOf ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . returnList = InstanceOf ; }
Distance : 11

66
Tree	{ reportMatcher ( Any.ANY ) ; Any.ANY = Any.ANY . returnList () ; }
Code	{ reportMatcher ( Any.ANY ) ; Any.ANY = Any.ANY . returnList () ; }
Distance : 9

67
Tree	{ reportMatcher ( InstanceOf ) ; return false ; }
Code	{ reportMatcher ( InstanceOf ) ; return false ; }
Distance : 10

68
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

69
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; } = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; } = false ; }
Distance : 11

70
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; returnList = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; returnList = false ; }
Distance : 11

71
Tree	{ reportMatcher ( Any.ANY ) ; InstanceOf = Any.ANY . returnList () ; }
Code	{ reportMatcher ( Any.ANY ) ; InstanceOf = Any.ANY . returnList () ; }
Distance : 9

72
Tree	{ super ( Collection ) ; }
Code	{ super ( Collection ) ; }
Distance : 11

73
Tree	{ return reportMatcher ( Any.ANY ) . < returnList > Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnList > Any.ANY () ; }
Distance : 9

74
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

75
Tree	{ reportMatcher ( Any.ANY ) ; this . InstanceOf = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . InstanceOf = Any.ANY ; }
Distance : 11

76
Tree	{ InstanceOf ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Code	{ InstanceOf ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Distance : 11

77
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . returnList = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . returnList = reportMatcher ; }
Distance : 11

78
Tree	{ super ( reportMatcher ) ; returnList ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; returnList ( Any.ANY ) ; }
Distance : 12

79
Tree	{ return reportMatcher ( reportMatcher ) ; }
Code	{ return reportMatcher ( reportMatcher ) ; }
Distance : 10

80
Tree	{ return ( Any.ANY ) returnList () ; }
Code	{ return ( Any.ANY ) returnList () ; }
Distance : 9

81
Tree	{ reportMatcher ( Any.ANY ) ; returnList = reportMatcher . returnList () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnList = reportMatcher . returnList () ; }
Distance : 9

82
Tree	{ return ( InstanceOf ) returnList ( Any.ANY ) ; }
Code	{ return ( InstanceOf ) returnList ( Any.ANY ) ; }
Distance : 10

83
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . Any.ANY = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . Any.ANY = Any.ANY ; }
Distance : 12

84
Tree	{ return reportMatcher ( Any.ANY ) . < Matchers > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Matchers > reportMatcher () ; }
Distance : 9

85
Tree	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = Any.ANY ; }
Distance : 11

86
Tree	{ reportMatcher ( Any.ANY ) ; this . returnList = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnList = reportMatcher ; }
Distance : 11

87
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

88
Tree	{ InstanceOf ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ InstanceOf ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

89
Tree	{ super ( reportMatcher ) ; returnList ( Any.ANY ) . returnList () ; }
Code	{ super ( reportMatcher ) ; returnList ( Any.ANY ) . returnList () ; }
Distance : 9

90
Tree	{ return ( reportMatcher ) InstanceOf () ; }
Code	{ return ( reportMatcher ) InstanceOf () ; }
Distance : 10

91
Tree	{ super ( Any.ANY ) ; returnList ( Any.ANY ) ; super }
Code	{ super ( Any.ANY ) ; returnList ( Any.ANY ) ; super }
Distance : 13

92
Tree	{ super ( Any.ANY ) ; returnList ( Any.ANY ) ; super }
Code	{ super ( Any.ANY ) ; returnList ( Any.ANY ) ; super }
Distance : 13

93
Tree	{ return ( reportMatcher ) InstanceOf ( Any.ANY ) . returnList () ; }
Code	{ return ( reportMatcher ) InstanceOf ( Any.ANY ) . returnList () ; }
Distance : 7

94
Tree	{ return ( InstanceOf ) returnList ( Any.ANY ) . returnList () ; }
Code	{ return ( InstanceOf ) returnList ( Any.ANY ) . returnList () ; }
Distance : 7

95
Tree	{ reportMatcher ( Any.ANY ) ; returnList = reportMatcher . returnList () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnList = reportMatcher . returnList () ; }
Distance : 9

96
Tree	{ reportMatcher ( returnList ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( returnList ) ; return NUMBER_CONSTANT ; }
Distance : 11

97
Tree	{ super ( InstanceOf ) ; returnList ( Any.ANY ) ; }
Code	{ super ( InstanceOf ) ; returnList ( Any.ANY ) ; }
Distance : 11

98
Tree	{ reportMatcher ( Any.ANY ) ; returnList = Any.ANY . returnList () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnList = Any.ANY . returnList () ; }
Distance : 9

99
Tree	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Distance : 11

100
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; Any.ANY = false ; }
Distance : 11

101
Tree	{ InstanceOf ( Any.ANY ) ; return null ; }
Code	{ InstanceOf ( Any.ANY ) ; return null ; }
Distance : 11

102
Tree	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 8

103
Tree	{ return ( Any.ANY ) Any.ANY ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) Any.ANY ( Any.ANY ) ; }
Distance : 11

104
Tree	{ return reportMatcher ( Any.ANY ) . < Collection > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Collection > reportMatcher () ; }
Distance : 9

105
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 8

106
Tree	{ return reportMatcher ( Any.ANY ) . < Any.ANY > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Any.ANY > reportMatcher () ; }
Distance : 9

107
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . returnList = InstanceOf ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . returnList = InstanceOf ; }
Distance : 11

108
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . InstanceOf = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . InstanceOf = reportMatcher ; }
Distance : 12

109
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

110
Tree	{ return reportMatcher ( returnList ) ; }
Code	{ return reportMatcher ( returnList ) ; }
Distance : 10

111
Tree	{ reportMatcher ( Any.ANY ) ; this . returnList = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnList = Any.ANY ; }
Distance : 11

112
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

113
Tree	{ return reportMatcher ( Any.ANY ) . InstanceOf () ; }
Code	{ return reportMatcher ( Any.ANY ) . InstanceOf () ; }
Distance : 8

114
Tree	{ reportMatcher ( Any.ANY ) ; this . returnList = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnList = Any.ANY ; }
Distance : 11

115
Tree	{ InstanceOf ( Any.ANY ) ; return true ; }
Code	{ InstanceOf ( Any.ANY ) ; return true ; }
Distance : 11

116
Tree	{ reportMatcher ( Any.ANY ) ; this . returnList = InstanceOf ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnList = InstanceOf ; }
Distance : 11

117
Tree	{ Any.ANY ( Any.ANY ) ; return false ; }
Code	{ Any.ANY ( Any.ANY ) ; return false ; }
Distance : 12

118
Tree	{ return ( InstanceOf ) returnList () ; }
Code	{ return ( InstanceOf ) returnList () ; }
Distance : 8

119
Tree	{ super ( reportMatcher ) ; returnList ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; returnList ( reportMatcher ) ; }
Distance : 12

120
Tree	{ return InstanceOf ( Any.ANY ) ; }
Code	{ return InstanceOf ( Any.ANY ) ; }
Distance : 10

121
Tree	{ Any.ANY ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Code	{ Any.ANY ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Distance : 12

122
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

123
Tree	{ return ( Any.ANY ) reportMatcher () ; }
Code	{ return ( Any.ANY ) reportMatcher () ; }
Distance : 10

124
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

125
Tree	{ return this . reportMatcher ; }
Code	{ return this . reportMatcher ; }
Distance : 12

126
Tree	{ return reportMatcher ( Any.ANY ) . < returnList > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnList > reportMatcher () ; }
Distance : 9

127
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

128
Tree	{ return ( reportMatcher ) returnList ( Any.ANY ) . returnList () ; }
Code	{ return ( reportMatcher ) returnList ( Any.ANY ) . returnList () ; }
Distance : 8

129
Tree	{ return ( reportMatcher ) returnList ( Any.ANY ) . returnList () ; }
Code	{ return ( reportMatcher ) returnList ( Any.ANY ) . returnList () ; }
Distance : 8

130
Tree	{ Any.ANY ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ Any.ANY ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

131
Tree	{ super ( reportMatcher ) ; Any.ANY ( Any.ANY ) . returnList () ; }
Code	{ super ( reportMatcher ) ; Any.ANY ( Any.ANY ) . returnList () ; }
Distance : 9

132
Tree	{ return ( reportMatcher ) returnList ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) returnList ( Any.ANY ) ; }
Distance : 11

133
Tree	{ return reportMatcher ( Any.ANY ) . Matchers () ; }
Code	{ return reportMatcher ( Any.ANY ) . Matchers () ; }
Distance : 8

134
Tree	{ super ( Any.ANY ) ; returnList ( Any.ANY ) . returnList () ; }
Code	{ super ( Any.ANY ) ; returnList ( Any.ANY ) . returnList () ; }
Distance : 9

135
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

136
Tree	{ reportMatcher ( InstanceOf ) ; return true ; }
Code	{ reportMatcher ( InstanceOf ) ; return true ; }
Distance : 10

137
Tree	{ return this . Matchers ; }
Code	{ return this . Matchers ; }
Distance : 12

138
Tree	{ return ( Any.ANY ) returnList ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) returnList ( Any.ANY ) ; }
Distance : 11

139
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

140
Tree	{ return ( reportMatcher ) returnList () ; }
Code	{ return ( reportMatcher ) returnList () ; }
Distance : 9

141
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

142
Tree	{ return this . Collection ; }
Code	{ return this . Collection ; }
Distance : 12

143
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

144
Tree	{ reportMatcher ( Any.ANY ) ; returnList = InstanceOf . returnList () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnList = InstanceOf . returnList () ; }
Distance : 9

145
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 14

146
Tree	{ super ( reportMatcher ) ; } Math
Code	{ super ( reportMatcher ) ; } Math
Distance : 13

147
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

148
Tree	{ super ( reportMatcher ) ; returnList ( Any.ANY ) ; super }
Code	{ super ( reportMatcher ) ; returnList ( Any.ANY ) ; super }
Distance : 13

149
Tree	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) . returnList () ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) . returnList () ; }
Distance : 9

150
Tree	{ return ( InstanceOf ) reportMatcher () ; }
Code	{ return ( InstanceOf ) reportMatcher () ; }
Distance : 9

151
Tree	{ return ( reportMatcher ) Any.ANY () ; }
Code	{ return ( reportMatcher ) Any.ANY () ; }
Distance : 10

152
Tree	{ returnList ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnList ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

153
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

154
Tree	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) ; }
Distance : 10

155
Tree	{ super ( reportMatcher ) ; } i
Code	{ super ( reportMatcher ) ; } i
Distance : 13

156
Tree	{ return reportMatcher ( Any.ANY ) . < reportMatcher > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < reportMatcher > reportMatcher () ; }
Distance : 9

157
Tree	{ return returnList ( Any.ANY ) ; }
Code	{ return returnList ( Any.ANY ) ; }
Distance : 11

158
Tree	{ super ( reportMatcher ) ; returnList ( reportMatcher ) . returnList () ; }
Code	{ super ( reportMatcher ) ; returnList ( reportMatcher ) . returnList () ; }
Distance : 9

159
Tree	{ reportMatcher ( reportMatcher ) ; return null ; }
Code	{ reportMatcher ( reportMatcher ) ; return null ; }
Distance : 11

160
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . returnList = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . returnList = Any.ANY ; }
Distance : 11

161
Tree	{ reportMatcher ( Any.ANY ) ; this . InstanceOf = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) ; this . InstanceOf = reportMatcher ; }
Distance : 11

162
Tree	{ return ( Any.ANY ) Any.ANY ( Any.ANY ) . returnList () ; }
Code	{ return ( Any.ANY ) Any.ANY ( Any.ANY ) . returnList () ; }
Distance : 8

163
Tree	{ super ( reportMatcher ) ; returnList ( Any.ANY ) ; makeStackTracesClean }
Code	{ super ( reportMatcher ) ; returnList ( Any.ANY ) ; makeStackTracesClean }
Distance : 13

164
Tree	{ return reportMatcher ( Any.ANY ) . < InstanceOf > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < InstanceOf > reportMatcher () ; }
Distance : 9

165
Tree	{ super ( reportMatcher ) ; } options
Code	{ super ( reportMatcher ) ; } options
Distance : 13

166
Tree	{ super ( InstanceOf ) ; returnList ( Any.ANY ) . returnList () ; }
Code	{ super ( InstanceOf ) ; returnList ( Any.ANY ) . returnList () ; }
Distance : 8

167
Tree	{ return this . reportMatcher ; } options
Code	{ return this . reportMatcher ; } options
Distance : 13

168
Tree	{ super ( reportMatcher ) ; Any.ANY ( Any.ANY ) ; super }
Code	{ super ( reportMatcher ) ; Any.ANY ( Any.ANY ) ; super }
Distance : 13

169
Tree	{ return reportMatcher ( Any.ANY ) . < returnList > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnList > reportMatcher () ; }
Distance : 9

170
Tree	{ return this . reportMatcher ; } i
Code	{ return this . reportMatcher ; } i
Distance : 13

171
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 14

172
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Distance : 11

173
Tree	{ super ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; }
Distance : 12

174
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

175
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; returnList = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; returnList = false ; }
Distance : 11

176
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 14

177
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

178
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

179
Tree	{ reportMatcher ( Any.ANY ) ; returnList = Any.ANY . returnList () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnList = Any.ANY . returnList () ; }
Distance : 9

180
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

181
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

182
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

183
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

184
Tree	{ super ( InstanceOf ) ; }
Code	{ super ( InstanceOf ) ; }
Distance : 11

185
Tree	{ super ( reportMatcher ) ; returnList ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; returnList ( Any.ANY ) ; }
Distance : 12

186
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

187
Tree	{ reportMatcher ( Any.ANY ) ; Matchers = Any.ANY . returnList () ; }
Code	{ reportMatcher ( Any.ANY ) ; Matchers = Any.ANY . returnList () ; }
Distance : 9

188
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

189
Tree	{ return Any.ANY ( reportMatcher ) ; }
Code	{ return Any.ANY ( reportMatcher ) ; }
Distance : 11

190
Tree	{ Any.ANY ( Any.ANY ) ; return null ; }
Code	{ Any.ANY ( Any.ANY ) ; return null ; }
Distance : 12

191
Tree	{ return this . reportMatcher ; } Math
Code	{ return this . reportMatcher ; } Math
Distance : 13

192
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher = Any.ANY . returnList () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher = Any.ANY . returnList () ; }
Distance : 9

193
Tree	{ super ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; }
Distance : 12

194
Tree	{ return this . returnList ; }
Code	{ return this . returnList ; }
Distance : 11

195
Tree	{ InstanceOf ( Any.ANY ) ; return false ; }
Code	{ InstanceOf ( Any.ANY ) ; return false ; }
Distance : 11

196
Tree	{ return ( Any.ANY ) returnList ( Any.ANY ) . returnList () ; }
Code	{ return ( Any.ANY ) returnList ( Any.ANY ) . returnList () ; }
Distance : 8

197
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 14

198
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; returnList = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; returnList = false ; }
Distance : 11

199
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

========================================================================


========================================================================
Example Number: 89
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnMap () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anyMap () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; Map = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; Map = false ; }
Distance : 10

1
Tree	{ return this . Any.ANY ; }
Code	{ return this . Any.ANY ; }
Distance : 3

2
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; }
Distance : 9

3
Tree	{ reportMatcher ( Class ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Class ) ; return NUMBER_CONSTANT ; }
Distance : 7

4
Tree	{ Map ( Any.ANY ) ; return false ; }
Code	{ Map ( Any.ANY ) ; return false ; }
Distance : 7

5
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; Matchers = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; Matchers = false ; }
Distance : 10

6
Tree	{ reportMatcher ( Any.ANY ) ; this . returnMap = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnMap = Any.ANY ; }
Distance : 10

7
Tree	{ reportMatcher ( Any.ANY ) ; returnMap = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnMap = Any.ANY . returnMap () ; }
Distance : 10

8
Tree	{ return ( Map ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( Map ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

9
Tree	{ return reportMatcher ( Any.ANY ) . < reportMatcher > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < reportMatcher > reportMatcher () ; }
Distance : 9

10
Tree	{ return ( Map ) returnMap ( Any.ANY ) ; }
Code	{ return ( Map ) returnMap ( Any.ANY ) ; }
Distance : 7

11
Tree	{ return reportMatcher ( Any.ANY ) . < returnMap > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnMap > reportMatcher () ; }
Distance : 9

12
Tree	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) ; }
Distance : 7

13
Tree	{ return this . Class ; }
Code	{ return this . Class ; }
Distance : 3

14
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 9

15
Tree	{ return ( Any.ANY ) returnMap () ; }
Code	{ return ( Any.ANY ) returnMap () ; }
Distance : 4

16
Tree	{ return reportMatcher ( Any.ANY ) . < returnMap > Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnMap > Any.ANY () ; }
Distance : 9

17
Tree	{ return this . V ; }
Code	{ return this . V ; }
Distance : 3

18
Tree	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) . returnMap () ; }
Code	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) . returnMap () ; }
Distance : 9

19
Tree	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Distance : 7

20
Tree	{ reportMatcher ( returnMap ) ; return null ; }
Code	{ reportMatcher ( returnMap ) ; return null ; }
Distance : 7

21
Tree	{ Any.ANY ( Any.ANY ) ; return false ; }
Code	{ Any.ANY ( Any.ANY ) ; return false ; }
Distance : 7

22
Tree	{ reportMatcher ( Map ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Map ) ; return NUMBER_CONSTANT ; }
Distance : 7

23
Tree	{ return this . Map ; }
Code	{ return this . Map ; }
Distance : 3

24
Tree	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Distance : 6

25
Tree	{ Any.ANY ( Any.ANY ) ; return null ; }
Code	{ Any.ANY ( Any.ANY ) ; return null ; }
Distance : 7

26
Tree	{ reportMatcher ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Distance : 7

27
Tree	{ return reportMatcher ( reportMatcher ) . returnMap () ; }
Code	{ return reportMatcher ( reportMatcher ) . returnMap () ; }
Distance : 6

28
Tree	{ return reportMatcher ( Any.ANY ) . < returnMap > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnMap > reportMatcher () ; }
Distance : 9

29
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

30
Tree	{ return ( Class ) returnMap ( Any.ANY ) ; }
Code	{ return ( Class ) returnMap ( Any.ANY ) ; }
Distance : 7

31
Tree	{ reportMatcher ( Any.ANY ) . Any.ANY () ; returnMap = false ; }
Code	{ reportMatcher ( Any.ANY ) . Any.ANY () ; returnMap = false ; }
Distance : 10

32
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; fieldWasInitializedUsingContructorArgs }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; fieldWasInitializedUsingContructorArgs }
Distance : 10

33
Tree	{ reportMatcher ( Any.ANY ) ; this . Matchers = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Matchers = Any.ANY ; }
Distance : 10

34
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 6

35
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 7

36
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 7

37
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 2

38
Tree	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = Any.ANY ; }
Distance : 10

39
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; makeStackTracesClean }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; makeStackTracesClean }
Distance : 10

40
Tree	{ return ( reportMatcher ) returnMap ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) returnMap ( Any.ANY ) ; }
Distance : 7

41
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 2

42
Tree	{ return reportMatcher ( Map ) ; }
Code	{ return reportMatcher ( Map ) ; }
Distance : 4

43
Tree	{ super ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; }
Distance : 4

44
Tree	{ return null ; }
Code	{ return null ; }
Distance : 2

45
Tree	{ super ( K ) ; }
Code	{ super ( K ) ; }
Distance : 4

46
Tree	{ reportMatcher ( V ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( V ) ; return NUMBER_CONSTANT ; }
Distance : 7

47
Tree	{ return reportMatcher ( reportMatcher ) ; }
Code	{ return reportMatcher ( reportMatcher ) ; }
Distance : 4

48
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 11

49
Tree	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 9

50
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 6

51
Tree	{ return ( Class ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( Class ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

52
Tree	{ super ( returnMap ) ; }
Code	{ super ( returnMap ) ; }
Distance : 4

53
Tree	{ super ( Any.ANY ) ; returnMap ( reportMatcher ) ; }
Code	{ super ( Any.ANY ) ; returnMap ( reportMatcher ) ; }
Distance : 9

54
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Any.ANY = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Any.ANY = reportMatcher ; }
Distance : 12

55
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 7

56
Tree	{ super ( reportMatcher ) ; Any.ANY ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; Any.ANY ( Any.ANY ) ; }
Distance : 9

57
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . returnMap = returnMap ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . returnMap = returnMap ; }
Distance : 12

58
Tree	{ super ( Map ) ; returnMap ( reportMatcher ) ; }
Code	{ super ( Map ) ; returnMap ( reportMatcher ) ; }
Distance : 9

59
Tree	{ return reportMatcher ( Class ) ; }
Code	{ return reportMatcher ( Class ) ; }
Distance : 4

60
Tree	{ return ( reportMatcher ) reportMatcher () ; }
Code	{ return ( reportMatcher ) reportMatcher () ; }
Distance : 4

61
Tree	{ return reportMatcher ( Any.ANY ) . < Any.ANY > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Any.ANY > reportMatcher () ; }
Distance : 9

62
Tree	{ reportMatcher ( V ) ; return null ; }
Code	{ reportMatcher ( V ) ; return null ; }
Distance : 7

63
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Matchers = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Matchers = reportMatcher ; }
Distance : 12

64
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; returnMap = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; returnMap = false ; }
Distance : 10

65
Tree	{ return reportMatcher ( Any.ANY ) . < V > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < V > reportMatcher () ; }
Distance : 9

66
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; getZoneStrings }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; getZoneStrings }
Distance : 10

67
Tree	{ return ( Any.ANY ) returnMap ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) returnMap ( Any.ANY ) ; }
Distance : 7

68
Tree	{ reportMatcher ( Any.ANY ) ; returnMap = reportMatcher . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnMap = reportMatcher . returnMap () ; }
Distance : 10

69
Tree	{ super ( Class ) ; }
Code	{ super ( Class ) ; }
Distance : 4

70
Tree	{ reportMatcher ( reportMatcher ) ; this . returnMap = Any.ANY ; }
Code	{ reportMatcher ( reportMatcher ) ; this . returnMap = Any.ANY ; }
Distance : 10

71
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; }
Distance : 9

72
Tree	{ return reportMatcher ( Any.ANY ) . < Matchers > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Matchers > reportMatcher () ; }
Distance : 9

73
Tree	{ return ( Any.ANY ) Any.ANY ( Any.ANY ) . returnMap () ; }
Code	{ return ( Any.ANY ) Any.ANY ( Any.ANY ) . returnMap () ; }
Distance : 9

74
Tree	{ super ( Any.ANY ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( Any.ANY ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 11

75
Tree	{ return ( Any.ANY ) Any.ANY ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) Any.ANY ( Any.ANY ) ; }
Distance : 7

76
Tree	{ return reportMatcher ( Any.ANY ) . < returnMap > returnMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnMap > returnMap () ; }
Distance : 9

77
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 11

78
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 6

79
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; returnMap = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; returnMap = false ; }
Distance : 10

80
Tree	{ return ( Map ) reportMatcher () ; }
Code	{ return ( Map ) reportMatcher () ; }
Distance : 4

81
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 4

82
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . returnMap = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . returnMap = reportMatcher ; }
Distance : 12

83
Tree	{ return reportMatcher ( Class ) . returnMap () ; }
Code	{ return reportMatcher ( Class ) . returnMap () ; }
Distance : 6

84
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 7

85
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . V = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . V = reportMatcher ; }
Distance : 12

86
Tree	{ reportMatcher ( reportMatcher ) . returnMap () ; this . returnMap = reportMatcher ; }
Code	{ reportMatcher ( reportMatcher ) . returnMap () ; this . returnMap = reportMatcher ; }
Distance : 12

87
Tree	{ reportMatcher ( returnMap ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( returnMap ) ; return NUMBER_CONSTANT ; }
Distance : 7

88
Tree	{ reportMatcher ( Class ) ; return null ; }
Code	{ reportMatcher ( Class ) ; return null ; }
Distance : 7

89
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 2

90
Tree	{ return this . reportMatcher ; }
Code	{ return this . reportMatcher ; }
Distance : 3

91
Tree	{ return ( Class ) returnMap () ; }
Code	{ return ( Class ) returnMap () ; }
Distance : 4

92
Tree	{ return reportMatcher ( Any.ANY ) . V () ; }
Code	{ return reportMatcher ( Any.ANY ) . V () ; }
Distance : 6

93
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; getAlternatesWithoutStructuralTyping }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; getAlternatesWithoutStructuralTyping }
Distance : 10

94
Tree	{ reportMatcher ( Any.ANY ) ; this . returnMap = V ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnMap = V ; }
Distance : 10

95
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 2

96
Tree	{ return ( reportMatcher ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( reportMatcher ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

97
Tree	{ return ( reportMatcher ) returnMap () ; }
Code	{ return ( reportMatcher ) returnMap () ; }
Distance : 4

98
Tree	{ super ( reportMatcher ) ; Matchers ( Any.ANY ) . returnMap () ; }
Code	{ super ( reportMatcher ) ; Matchers ( Any.ANY ) . returnMap () ; }
Distance : 11

99
Tree	{ reportMatcher ( V ) ; return false ; }
Code	{ reportMatcher ( V ) ; return false ; }
Distance : 7

100
Tree	{ return this . reportMatcher ; }
Code	{ return this . reportMatcher ; }
Distance : 3

101
Tree	{ return reportMatcher ( reportMatcher ) . < returnMap > reportMatcher () ; }
Code	{ return reportMatcher ( reportMatcher ) . < returnMap > reportMatcher () ; }
Distance : 9

102
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; Any.ANY = false ; }
Distance : 10

103
Tree	{ return reportMatcher ( Any.ANY ) . Matchers () ; }
Code	{ return reportMatcher ( Any.ANY ) . Matchers () ; }
Distance : 6

104
Tree	{ return this . K ; }
Code	{ return this . K ; }
Distance : 3

105
Tree	{ return ( reportMatcher ) Any.ANY () ; }
Code	{ return ( reportMatcher ) Any.ANY () ; }
Distance : 4

106
Tree	{ return ( reportMatcher ) returnMap ( reportMatcher ) ; }
Code	{ return ( reportMatcher ) returnMap ( reportMatcher ) ; }
Distance : 7

107
Tree	{ return ( reportMatcher ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( reportMatcher ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

108
Tree	{ super ( reportMatcher ) ; returnMap ( reportMatcher ) . returnMap () ; }
Code	{ super ( reportMatcher ) ; returnMap ( reportMatcher ) . returnMap () ; }
Distance : 11

109
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; V = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; V = false ; }
Distance : 10

110
Tree	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = reportMatcher ; }
Distance : 10

111
Tree	{ returnMap ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnMap ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 7

112
Tree	{ super ( Any.ANY ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; returnMap ( Any.ANY ) ; }
Distance : 9

113
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; }
Distance : 9

114
Tree	{ return reportMatcher ( returnMap ) . returnMap () ; }
Code	{ return reportMatcher ( returnMap ) . returnMap () ; }
Distance : 6

115
Tree	{ Map ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ Map ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 7

116
Tree	{ reportMatcher ( Any.ANY ) ; returnMap = V . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnMap = V . returnMap () ; }
Distance : 10

117
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher = Any.ANY . returnMap () ; }
Distance : 10

118
Tree	{ reportMatcher ( Any.ANY ) ; Any.ANY = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; Any.ANY = Any.ANY . returnMap () ; }
Distance : 10

119
Tree	{ super ( V ) ; }
Code	{ super ( V ) ; }
Distance : 4

120
Tree	{ reportMatcher ( returnMap ) ; return false ; }
Code	{ reportMatcher ( returnMap ) ; return false ; }
Distance : 7

121
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . returnMap = V ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . returnMap = V ; }
Distance : 12

122
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 11

123
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Distance : 7

124
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 7

125
Tree	{ reportMatcher ( reportMatcher ) . returnMap () ; returnMap = false ; }
Code	{ reportMatcher ( reportMatcher ) . returnMap () ; returnMap = false ; }
Distance : 10

126
Tree	{ super ( Map ) ; }
Code	{ super ( Map ) ; }
Distance : 4

127
Tree	{ Any.ANY ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ Any.ANY ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 7

128
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; Format.PRETTY }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; Format.PRETTY }
Distance : 10

129
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; initializeBuiltInTypes }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; initializeBuiltInTypes }
Distance : 10

130
Tree	{ return ( Any.ANY ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( Any.ANY ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

131
Tree	{ return ( reportMatcher ) returnMap () ; }
Code	{ return ( reportMatcher ) returnMap () ; }
Distance : 4

132
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; initializeRegistry }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; initializeRegistry }
Distance : 10

133
Tree	{ return ( reportMatcher ) returnMap ( reportMatcher ) . returnMap () ; }
Code	{ return ( reportMatcher ) returnMap ( reportMatcher ) . returnMap () ; }
Distance : 9

134
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . returnMap = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . returnMap = reportMatcher ; }
Distance : 12

135
Tree	{ return reportMatcher ( K ) ; }
Code	{ return reportMatcher ( K ) ; }
Distance : 4

136
Tree	{ super ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; }
Distance : 4

137
Tree	{ super ( Any.ANY ) ; returnMap ( reportMatcher ) . returnMap () ; }
Code	{ super ( Any.ANY ) ; returnMap ( reportMatcher ) . returnMap () ; }
Distance : 11

138
Tree	{ return ( Any.ANY ) reportMatcher () ; }
Code	{ return ( Any.ANY ) reportMatcher () ; }
Distance : 4

139
Tree	{ reportMatcher ( Class ) ; return false ; }
Code	{ reportMatcher ( Class ) ; return false ; }
Distance : 7

140
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; setTolerance }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; setTolerance }
Distance : 10

141
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; isAssertionCall }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; isAssertionCall }
Distance : 10

142
Tree	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . returnMap () ; }
Distance : 10

143
Tree	{ reportMatcher ( Any.ANY ) ; this . returnMap = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnMap = Any.ANY ; }
Distance : 10

144
Tree	{ reportMatcher ( reportMatcher ) ; return null ; }
Code	{ reportMatcher ( reportMatcher ) ; return null ; }
Distance : 7

145
Tree	{ return Any.ANY ( Any.ANY ) . returnMap () ; }
Code	{ return Any.ANY ( Any.ANY ) . returnMap () ; }
Distance : 6

146
Tree	{ return Map ( Any.ANY ) ; }
Code	{ return Map ( Any.ANY ) ; }
Distance : 4

147
Tree	{ reportMatcher ( Map ) ; return false ; }
Code	{ reportMatcher ( Map ) ; return false ; }
Distance : 7

148
Tree	{ return reportMatcher ( Any.ANY ) . < Map > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Map > reportMatcher () ; }
Distance : 9

149
Tree	{ super ( reportMatcher ) ; Any.ANY ( Any.ANY ) . returnMap () ; }
Code	{ super ( reportMatcher ) ; Any.ANY ( Any.ANY ) . returnMap () ; }
Distance : 11

150
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; nextChar }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; nextChar }
Distance : 10

151
Tree	{ reportMatcher ( Any.ANY ) . Any.ANY () ; this . returnMap = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . Any.ANY () ; this . returnMap = reportMatcher ; }
Distance : 12

152
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . returnMap = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . returnMap = Any.ANY ; }
Distance : 12

153
Tree	{ reportMatcher ( Map ) ; return null ; }
Code	{ reportMatcher ( Map ) ; return null ; }
Distance : 7

154
Tree	{ reportMatcher ( Any.ANY ) ; returnMap = Class . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnMap = Class . returnMap () ; }
Distance : 10

155
Tree	{ reportMatcher ( Any.ANY ) ; this . V = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . V = Any.ANY ; }
Distance : 10

156
Tree	{ return ( Any.ANY ) Any.ANY () ; }
Code	{ return ( Any.ANY ) Any.ANY () ; }
Distance : 4

157
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 11

158
Tree	{ return Any.ANY ( Any.ANY ) ; }
Code	{ return Any.ANY ( Any.ANY ) ; }
Distance : 4

159
Tree	{ super ( Matchers ) ; }
Code	{ super ( Matchers ) ; }
Distance : 4

160
Tree	{ reportMatcher ( Any.ANY ) ; this . returnMap = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnMap = reportMatcher ; }
Distance : 10

161
Tree	{ super ( reportMatcher ) ; returnMap ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; returnMap ( reportMatcher ) ; }
Distance : 9

162
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 3

163
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 2

164
Tree	{ reportMatcher ( K ) ; return false ; }
Code	{ reportMatcher ( K ) ; return false ; }
Distance : 7

165
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 3

166
Tree	{ super ( Map ) ; returnMap ( reportMatcher ) . returnMap () ; }
Code	{ super ( Map ) ; returnMap ( reportMatcher ) . returnMap () ; }
Distance : 11

167
Tree	{ super ( reportMatcher ) ; Matchers ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; Matchers ( Any.ANY ) ; }
Distance : 9

168
Tree	{ return ( Map ) returnMap () ; }
Code	{ return ( Map ) returnMap () ; }
Distance : 4

169
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 3

170
Tree	{ reportMatcher ( Any.ANY ) ; this . returnMap = returnMap ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnMap = returnMap ; }
Distance : 10

171
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 3

172
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 3

173
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 3

174
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 3

175
Tree	{ return reportMatcher ( V ) ; }
Code	{ return reportMatcher ( V ) ; }
Distance : 4

176
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 3

177
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 3

178
Tree	{ return returnMap ( Any.ANY ) ; }
Code	{ return returnMap ( Any.ANY ) ; }
Distance : 4

179
Tree	{ reportMatcher ( Any.ANY ) ; Matchers = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; Matchers = Any.ANY . returnMap () ; }
Distance : 10

180
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 3

181
Tree	{ reportMatcher ( returnMap ) . returnMap () ; returnMap = false ; }
Code	{ reportMatcher ( returnMap ) . returnMap () ; returnMap = false ; }
Distance : 10

182
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; reportMatcher = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; reportMatcher = false ; }
Distance : 10

183
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; }
Distance : 9

184
Tree	{ return ( reportMatcher ) returnMap ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) returnMap ( Any.ANY ) ; }
Distance : 7

185
Tree	{ return this . returnMap ; }
Code	{ return this . returnMap ; }
Distance : 3

186
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 3

187
Tree	{ reportMatcher ( K ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( K ) ; return NUMBER_CONSTANT ; }
Distance : 7

188
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 3

189
Tree	{ return this . Matchers ; }
Code	{ return this . Matchers ; }
Distance : 3

190
Tree	{ Map ( Any.ANY ) ; return null ; }
Code	{ Map ( Any.ANY ) ; return null ; }
Distance : 7

191
Tree	{ super ( reportMatcher ) ; } wanted
Code	{ super ( reportMatcher ) ; } wanted
Distance : 5

192
Tree	{ reportMatcher ( Any.ANY ) ; returnMap = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnMap = Any.ANY . returnMap () ; }
Distance : 10

193
Tree	{ super ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; }
Distance : 4

194
Tree	{ reportMatcher ( reportMatcher ) ; return false ; }
Code	{ reportMatcher ( reportMatcher ) ; return false ; }
Distance : 7

195
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 2

196
Tree	{ return reportMatcher ( returnMap ) ; }
Code	{ return reportMatcher ( returnMap ) ; }
Distance : 4

197
Tree	{ reportMatcher ( Any.ANY ) ; returnMap = returnMap . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnMap = returnMap . returnMap () ; }
Distance : 10

198
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 3

199
Tree	{ return this . reportMatcher ; } wanted
Code	{ return this . reportMatcher ; } wanted
Distance : 4

========================================================================


========================================================================
Example Number: 90
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnMap () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Map . class ) ) . returnMap () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Map})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super ( reportMatcher ) ; returnMap ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; returnMap ( reportMatcher ) ; }
Distance : 12

1
Tree	{ return returnMap ( Any.ANY ) ; }
Code	{ return returnMap ( Any.ANY ) ; }
Distance : 11

2
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; Matchers = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; Matchers = false ; }
Distance : 11

3
Tree	{ reportMatcher ( Any.ANY ) ; this . returnMap = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnMap = Any.ANY ; }
Distance : 11

4
Tree	{ reportMatcher ( Any.ANY ) ; returnMap = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnMap = Any.ANY . returnMap () ; }
Distance : 9

5
Tree	{ return ( Map ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( Map ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 8

6
Tree	{ return reportMatcher ( Any.ANY ) . < reportMatcher > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < reportMatcher > reportMatcher () ; }
Distance : 9

7
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 8

8
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; Matchers = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; Matchers = Any.ANY . returnMap () ; }
Distance : 9

10
Tree	{ reportMatcher ( returnMap ) . returnMap () ; returnMap = false ; }
Code	{ reportMatcher ( returnMap ) . returnMap () ; returnMap = false ; }
Distance : 11

11
Tree	{ return reportMatcher ( InstanceOf ) . returnMap () ; }
Code	{ return reportMatcher ( InstanceOf ) . returnMap () ; }
Distance : 6

12
Tree	{ return ( Map ) returnMap ( Any.ANY ) ; }
Code	{ return ( Map ) returnMap ( Any.ANY ) ; }
Distance : 10

13
Tree	{ reportMatcher ( Any.ANY ) ; this . returnMap = returnMap ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnMap = returnMap ; }
Distance : 10

14
Tree	{ return Any.ANY ( Any.ANY ) . returnMap () ; }
Code	{ return Any.ANY ( Any.ANY ) . returnMap () ; }
Distance : 8

15
Tree	{ reportMatcher ( returnMap ) ; return null ; }
Code	{ reportMatcher ( returnMap ) ; return null ; }
Distance : 11

16
Tree	{ reportMatcher ( InstanceOf ) ; return null ; }
Code	{ reportMatcher ( InstanceOf ) ; return null ; }
Distance : 10

17
Tree	{ return this . Any.ANY ; }
Code	{ return this . Any.ANY ; }
Distance : 12

18
Tree	{ InstanceOf ( Any.ANY ) ; return false ; }
Code	{ InstanceOf ( Any.ANY ) ; return false ; }
Distance : 11

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

20
Tree	{ return ( InstanceOf ) returnMap ( Any.ANY ) ; }
Code	{ return ( InstanceOf ) returnMap ( Any.ANY ) ; }
Distance : 10

21
Tree	{ Map ( Any.ANY ) ; return false ; }
Code	{ Map ( Any.ANY ) ; return false ; }
Distance : 12

22
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; }
Distance : 12

23
Tree	{ InstanceOf ( Any.ANY ) ; return null ; }
Code	{ InstanceOf ( Any.ANY ) ; return null ; }
Distance : 11

24
Tree	{ return this . returnMap ; }
Code	{ return this . returnMap ; }
Distance : 11

25
Tree	{ return reportMatcher ( Any.ANY ) . < returnMap > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnMap > reportMatcher () ; }
Distance : 9

26
Tree	{ return reportMatcher ( returnMap ) ; }
Code	{ return reportMatcher ( returnMap ) ; }
Distance : 10

27
Tree	{ super ( InstanceOf ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( InstanceOf ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 8

28
Tree	{ Map ( Any.ANY ) ; return null ; }
Code	{ Map ( Any.ANY ) ; return null ; }
Distance : 12

29
Tree	{ return this . Map ; }
Code	{ return this . Map ; }
Distance : 12

30
Tree	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Distance : 8

31
Tree	{ super ( InstanceOf ) ; }
Code	{ super ( InstanceOf ) ; }
Distance : 11

32
Tree	{ return this . InstanceOf ; }
Code	{ return this . InstanceOf ; }
Distance : 12

33
Tree	{ return reportMatcher ( Any.ANY ) . < returnMap > Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnMap > Any.ANY () ; }
Distance : 9

34
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 7

35
Tree	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) . returnMap () ; }
Code	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) . returnMap () ; }
Distance : 8

36
Tree	{ return this . Matchers ; }
Code	{ return this . Matchers ; }
Distance : 12

37
Tree	{ return reportMatcher ( Any.ANY ) . InstanceOf () ; }
Code	{ return reportMatcher ( Any.ANY ) . InstanceOf () ; }
Distance : 8

38
Tree	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Distance : 11

39
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

40
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

41
Tree	{ Any.ANY ( Any.ANY ) ; return false ; }
Code	{ Any.ANY ( Any.ANY ) ; return false ; }
Distance : 12

42
Tree	{ super ( Any.ANY ) ; returnMap ( reportMatcher ) . returnMap () ; }
Code	{ super ( Any.ANY ) ; returnMap ( reportMatcher ) . returnMap () ; }
Distance : 9

43
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . returnMap = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . returnMap = reportMatcher ; }
Distance : 11

44
Tree	{ Any.ANY ( Any.ANY ) ; return null ; }
Code	{ Any.ANY ( Any.ANY ) ; return null ; }
Distance : 12

45
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; isAssertionCall }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; isAssertionCall }
Distance : 13

46
Tree	{ reportMatcher ( Map ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Map ) ; return NUMBER_CONSTANT ; }
Distance : 10

47
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

48
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; fieldWasInitializedUsingContructorArgs }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; fieldWasInitializedUsingContructorArgs }
Distance : 13

49
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . returnMap = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . returnMap = reportMatcher ; }
Distance : 11

50
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

51
Tree	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = Any.ANY ; }
Distance : 11

52
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; makeStackTracesClean }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; makeStackTracesClean }
Distance : 13

53
Tree	{ return reportMatcher ( Any.ANY ) . < returnMap > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnMap > reportMatcher () ; }
Distance : 9

54
Tree	{ reportMatcher ( Any.ANY ) ; this . returnMap = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnMap = reportMatcher ; }
Distance : 11

55
Tree	{ super ( Any.ANY ) ; returnMap ( reportMatcher ) ; }
Code	{ super ( Any.ANY ) ; returnMap ( reportMatcher ) ; }
Distance : 12

56
Tree	{ super ( reportMatcher ) ; Matchers ( Any.ANY ) . returnMap () ; }
Code	{ super ( reportMatcher ) ; Matchers ( Any.ANY ) . returnMap () ; }
Distance : 9

57
Tree	{ return ( reportMatcher ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( reportMatcher ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 8

58
Tree	{ reportMatcher ( reportMatcher ) . returnMap () ; this . returnMap = reportMatcher ; }
Code	{ reportMatcher ( reportMatcher ) . returnMap () ; this . returnMap = reportMatcher ; }
Distance : 11

59
Tree	{ return reportMatcher ( Any.ANY ) . < returnMap > InstanceOf () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnMap > InstanceOf () ; }
Distance : 9

60
Tree	{ return ( reportMatcher ) returnMap ( reportMatcher ) . returnMap () ; }
Code	{ return ( reportMatcher ) returnMap ( reportMatcher ) . returnMap () ; }
Distance : 8

61
Tree	{ super ( returnMap ) ; }
Code	{ super ( returnMap ) ; }
Distance : 12

62
Tree	{ reportMatcher ( reportMatcher ) ; return false ; }
Code	{ reportMatcher ( reportMatcher ) ; return false ; }
Distance : 11

63
Tree	{ reportMatcher ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Distance : 11

64
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher = Any.ANY . returnMap () ; }
Distance : 9

65
Tree	{ reportMatcher ( InstanceOf ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( InstanceOf ) ; return NUMBER_CONSTANT ; }
Distance : 10

66
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

67
Tree	{ reportMatcher ( Any.ANY ) ; returnMap = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnMap = Any.ANY . returnMap () ; }
Distance : 9

68
Tree	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) ; }
Distance : 11

69
Tree	{ return reportMatcher ( InstanceOf ) ; }
Code	{ return reportMatcher ( InstanceOf ) ; }
Distance : 9

70
Tree	{ return reportMatcher ( Any.ANY ) . < Any.ANY > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Any.ANY > reportMatcher () ; }
Distance : 9

71
Tree	{ reportMatcher ( InstanceOf ) . returnMap () ; returnMap = false ; }
Code	{ reportMatcher ( InstanceOf ) . returnMap () ; returnMap = false ; }
Distance : 10

72
Tree	{ return ( Map ) returnMap () ; }
Code	{ return ( Map ) returnMap () ; }
Distance : 8

73
Tree	{ return ( reportMatcher ) reportMatcher () ; }
Code	{ return ( reportMatcher ) reportMatcher () ; }
Distance : 10

74
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; getZoneStrings }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; getZoneStrings }
Distance : 13

75
Tree	{ super ( Any.ANY ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( Any.ANY ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

76
Tree	{ return reportMatcher ( reportMatcher ) . returnMap () ; }
Code	{ return reportMatcher ( reportMatcher ) . returnMap () ; }
Distance : 7

77
Tree	{ super ( reportMatcher ) ; Any.ANY ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; Any.ANY ( Any.ANY ) ; }
Distance : 12

78
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

79
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

80
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

81
Tree	{ reportMatcher ( Any.ANY ) ; Any.ANY = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; Any.ANY = Any.ANY . returnMap () ; }
Distance : 9

82
Tree	{ return ( reportMatcher ) returnMap ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) returnMap ( Any.ANY ) ; }
Distance : 11

83
Tree	{ super ( Matchers ) ; }
Code	{ super ( Matchers ) ; }
Distance : 12

84
Tree	{ reportMatcher ( InstanceOf ) . returnMap () ; this . returnMap = reportMatcher ; }
Code	{ reportMatcher ( InstanceOf ) . returnMap () ; this . returnMap = reportMatcher ; }
Distance : 10

85
Tree	{ return ( reportMatcher ) returnMap () ; }
Code	{ return ( reportMatcher ) returnMap () ; }
Distance : 9

86
Tree	{ super ( reportMatcher ) ; Matchers ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; Matchers ( Any.ANY ) ; }
Distance : 12

87
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

88
Tree	{ return this . reportMatcher ; }
Code	{ return this . reportMatcher ; }
Distance : 12

89
Tree	{ return ( Any.ANY ) returnMap () ; }
Code	{ return ( Any.ANY ) returnMap () ; }
Distance : 9

90
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

91
Tree	{ return InstanceOf ( Any.ANY ) ; }
Code	{ return InstanceOf ( Any.ANY ) ; }
Distance : 10

92
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 7

93
Tree	{ return ( reportMatcher ) returnMap () ; }
Code	{ return ( reportMatcher ) returnMap () ; }
Distance : 9

94
Tree	{ return ( Any.ANY ) Any.ANY ( Any.ANY ) . returnMap () ; }
Code	{ return ( Any.ANY ) Any.ANY ( Any.ANY ) . returnMap () ; }
Distance : 8

95
Tree	{ return ( reportMatcher ) returnMap ( reportMatcher ) ; }
Code	{ return ( reportMatcher ) returnMap ( reportMatcher ) ; }
Distance : 11

96
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . InstanceOf = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . InstanceOf = reportMatcher ; }
Distance : 12

97
Tree	{ return this . reportMatcher ; }
Code	{ return this . reportMatcher ; }
Distance : 12

98
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . returnMap = returnMap ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . returnMap = returnMap ; }
Distance : 11

99
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; returnMap = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; returnMap = false ; }
Distance : 11

100
Tree	{ return ( Map ) reportMatcher () ; }
Code	{ return ( Map ) reportMatcher () ; }
Distance : 9

101
Tree	{ return reportMatcher ( Any.ANY ) . < returnMap > returnMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnMap > returnMap () ; }
Distance : 8

102
Tree	{ return ( InstanceOf ) returnMap () ; }
Code	{ return ( InstanceOf ) returnMap () ; }
Distance : 8

103
Tree	{ reportMatcher ( Any.ANY ) ; this . Matchers = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Matchers = Any.ANY ; }
Distance : 11

104
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

105
Tree	{ return ( Any.ANY ) Any.ANY ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) Any.ANY ( Any.ANY ) ; }
Distance : 11

106
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; Any.ANY = false ; }
Distance : 11

107
Tree	{ reportMatcher ( reportMatcher ) ; this . returnMap = Any.ANY ; }
Code	{ reportMatcher ( reportMatcher ) ; this . returnMap = Any.ANY ; }
Distance : 11

108
Tree	{ reportMatcher ( Any.ANY ) ; this . InstanceOf = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . InstanceOf = Any.ANY ; }
Distance : 11

109
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; }
Distance : 12

110
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; setTolerance }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; setTolerance }
Distance : 13

111
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

112
Tree	{ return ( Any.ANY ) returnMap ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) returnMap ( Any.ANY ) ; }
Distance : 11

113
Tree	{ super ( Any.ANY ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; returnMap ( Any.ANY ) ; }
Distance : 12

114
Tree	{ reportMatcher ( Any.ANY ) ; this . returnMap = InstanceOf ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnMap = InstanceOf ; }
Distance : 11

115
Tree	{ return reportMatcher ( Any.ANY ) . < Matchers > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Matchers > reportMatcher () ; }
Distance : 9

116
Tree	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . returnMap () ; }
Distance : 8

117
Tree	{ reportMatcher ( Any.ANY ) ; InstanceOf = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; InstanceOf = Any.ANY . returnMap () ; }
Distance : 9

118
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; }
Distance : 12

119
Tree	{ return reportMatcher ( returnMap ) . returnMap () ; }
Code	{ return reportMatcher ( returnMap ) . returnMap () ; }
Distance : 7

120
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; { = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; { = false ; }
Distance : 11

121
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

122
Tree	{ reportMatcher ( InstanceOf ) ; return false ; }
Code	{ reportMatcher ( InstanceOf ) ; return false ; }
Distance : 10

123
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

124
Tree	{ Map ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ Map ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

125
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; getAlternatesWithoutStructuralTyping }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; getAlternatesWithoutStructuralTyping }
Distance : 13

126
Tree	{ return reportMatcher ( Any.ANY ) . < InstanceOf > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < InstanceOf > reportMatcher () ; }
Distance : 9

127
Tree	{ Any.ANY ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ Any.ANY ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

128
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

129
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

130
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; initializeBuiltInTypes }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; initializeBuiltInTypes }
Distance : 13

131
Tree	{ reportMatcher ( reportMatcher ) . returnMap () ; returnMap = false ; }
Code	{ reportMatcher ( reportMatcher ) . returnMap () ; returnMap = false ; }
Distance : 11

132
Tree	{ return ( Any.ANY ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( Any.ANY ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 8

133
Tree	{ reportMatcher ( Any.ANY ) ; returnMap = returnMap . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnMap = returnMap . returnMap () ; }
Distance : 9

134
Tree	{ super ( reportMatcher ) ; returnMap ( reportMatcher ) . returnMap () ; }
Code	{ super ( reportMatcher ) ; returnMap ( reportMatcher ) . returnMap () ; }
Distance : 9

135
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; Map = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; Map = false ; }
Distance : 11

136
Tree	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = reportMatcher ; }
Distance : 11

137
Tree	{ returnMap ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnMap ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

138
Tree	{ InstanceOf ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ InstanceOf ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

139
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; initializeRegistry }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; initializeRegistry }
Distance : 13

140
Tree	{ reportMatcher ( reportMatcher ) ; return null ; }
Code	{ reportMatcher ( reportMatcher ) ; return null ; }
Distance : 11

141
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . returnMap = InstanceOf ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . returnMap = InstanceOf ; }
Distance : 11

142
Tree	{ reportMatcher ( returnMap ) ; return false ; }
Code	{ reportMatcher ( returnMap ) ; return false ; }
Distance : 11

143
Tree	{ reportMatcher ( Map ) ; return false ; }
Code	{ reportMatcher ( Map ) ; return false ; }
Distance : 10

144
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 9

145
Tree	{ super ( reportMatcher ) ; Any.ANY ( Any.ANY ) . returnMap () ; }
Code	{ super ( reportMatcher ) ; Any.ANY ( Any.ANY ) . returnMap () ; }
Distance : 9

146
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 14

147
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . returnMap = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . returnMap = Any.ANY ; }
Distance : 11

148
Tree	{ return ( reportMatcher ) Any.ANY () ; }
Code	{ return ( reportMatcher ) Any.ANY () ; }
Distance : 10

149
Tree	{ super ( reportMatcher ) ; } Math
Code	{ super ( reportMatcher ) ; } Math
Distance : 13

150
Tree	{ return ( Any.ANY ) Any.ANY () ; }
Code	{ return ( Any.ANY ) Any.ANY () ; }
Distance : 10

151
Tree	{ reportMatcher ( returnMap ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( returnMap ) ; return NUMBER_CONSTANT ; }
Distance : 11

152
Tree	{ return ( reportMatcher ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( reportMatcher ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 8

153
Tree	{ super ( reportMatcher ) ; } i
Code	{ super ( reportMatcher ) ; } i
Distance : 13

154
Tree	{ return reportMatcher ( Any.ANY ) . < Map > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Map > reportMatcher () ; }
Distance : 9

155
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; reportMatcher = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; reportMatcher = false ; }
Distance : 11

156
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

157
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

158
Tree	{ return reportMatcher ( Any.ANY ) . Matchers () ; }
Code	{ return reportMatcher ( Any.ANY ) . Matchers () ; }
Distance : 8

159
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; Format.PRETTY }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; Format.PRETTY }
Distance : 13

160
Tree	{ return this . reportMatcher ; } i
Code	{ return this . reportMatcher ; } i
Distance : 13

161
Tree	{ super ( reportMatcher ) ; } options
Code	{ super ( reportMatcher ) ; } options
Distance : 13

162
Tree	{ returnMap ( Any.ANY ) ; return false ; }
Code	{ returnMap ( Any.ANY ) ; return false ; }
Distance : 12

163
Tree	{ reportMatcher ( Any.ANY ) . Any.ANY () ; returnMap = false ; }
Code	{ reportMatcher ( Any.ANY ) . Any.ANY () ; returnMap = false ; }
Distance : 11

164
Tree	{ return ( Any.ANY ) reportMatcher () ; }
Code	{ return ( Any.ANY ) reportMatcher () ; }
Distance : 10

165
Tree	{ super ( InstanceOf ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( InstanceOf ) ; returnMap ( Any.ANY ) ; }
Distance : 11

166
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 14

167
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Distance : 11

168
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

169
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 14

170
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

171
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

172
Tree	{ reportMatcher ( Any.ANY ) ; returnMap = reportMatcher . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnMap = reportMatcher . returnMap () ; }
Distance : 9

173
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

174
Tree	{ super ( Map ) ; }
Code	{ super ( Map ) ; }
Distance : 11

175
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

176
Tree	{ return reportMatcher ( Map ) ; }
Code	{ return reportMatcher ( Map ) ; }
Distance : 9

177
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

178
Tree	{ reportMatcher ( Any.ANY ) ; returnMap = InstanceOf . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnMap = InstanceOf . returnMap () ; }
Distance : 9

179
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

180
Tree	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 8

181
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; nextChar }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; nextChar }
Distance : 13

182
Tree	{ super ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; }
Distance : 12

183
Tree	{ reportMatcher ( Any.ANY ) ; this . returnMap = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnMap = Any.ANY ; }
Distance : 11

184
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

185
Tree	{ super ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; }
Distance : 12

186
Tree	{ return Any.ANY ( Any.ANY ) ; }
Code	{ return Any.ANY ( Any.ANY ) ; }
Distance : 11

187
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

188
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

189
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Any.ANY = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Any.ANY = reportMatcher ; }
Distance : 12

190
Tree	{ return ( reportMatcher ) returnMap ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) returnMap ( Any.ANY ) ; }
Distance : 11

191
Tree	{ return this . reportMatcher ; } Math
Code	{ return this . reportMatcher ; } Math
Distance : 13

192
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Matchers = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Matchers = reportMatcher ; }
Distance : 12

193
Tree	{ super ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; }
Distance : 12

194
Tree	{ reportMatcher ( Map ) ; return null ; }
Code	{ reportMatcher ( Map ) ; return null ; }
Distance : 10

195
Tree	{ return reportMatcher ( reportMatcher ) ; }
Code	{ return reportMatcher ( reportMatcher ) ; }
Distance : 10

196
Tree	{ return ( InstanceOf ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( InstanceOf ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 7

197
Tree	{ return Map ( Any.ANY ) ; }
Code	{ return Map ( Any.ANY ) ; }
Distance : 11

198
Tree	{ return this . reportMatcher ; } options
Code	{ return this . reportMatcher ; } options
Distance : 13

199
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 14

========================================================================


========================================================================
Example Number: 91
Parent Code is: 
{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anySet () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=Set})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnSet}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anySet}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 9
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return T () ; }
Code	{ return T () ; }
Distance : 1

1
Tree	{ return ( Set ) reportMatcher ( T ) . reportMatcher () ; }
Code	{ return ( Set ) reportMatcher ( T ) . reportMatcher () ; }
Distance : 9

2
Tree	{ return ( Set ) reportMatcher . clazz () ; }
Code	{ return ( Set ) reportMatcher . clazz () ; }
Distance : 6

3
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( reportMatcher ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( reportMatcher ) ; }
Distance : 12

4
Tree	{ return ( Set ) reportMatcher ( reportMatcher ) . returnSet () ; }
Code	{ return ( Set ) reportMatcher ( reportMatcher ) . returnSet () ; }
Distance : 9

5
Tree	{ return ( Set ) reportMatcher . returnSet ( Any.ANY ) ; }
Code	{ return ( Set ) reportMatcher . returnSet ( Any.ANY ) ; }
Distance : 9

6
Tree	{ reportMatcher ( Any.ANY , returnSet ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , returnSet ) ; return null ; }
Distance : 9

7
Tree	{ return ( Set ) this . returnSet . reportMatcher () ; }
Code	{ return ( Set ) this . returnSet . reportMatcher () ; }
Distance : 8

8
Tree	{ return ( Set ) this . Matchers . returnSet () ; }
Code	{ return ( Set ) this . Matchers . returnSet () ; }
Distance : 8

9
Tree	{ T ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ T ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 9

10
Tree	{ return ( Set ) reportMatcher . reportMatcher ( reportMatcher ) ; }
Code	{ return ( Set ) reportMatcher . reportMatcher ( reportMatcher ) ; }
Distance : 9

11
Tree	{ return ( Set ) reportMatcher ( reportMatcher ) . Any.ANY () ; }
Code	{ return ( Set ) reportMatcher ( reportMatcher ) . Any.ANY () ; }
Distance : 9

12
Tree	{ reportMatcher () ; return return; ; }
Code	{ reportMatcher () ; return return; ; }
Distance : 5

13
Tree	{ return ( Set ) reportMatcher ( reportMatcher . returnSet () ) ; }
Code	{ return ( Set ) reportMatcher ( reportMatcher . returnSet () ) ; }
Distance : 9

14
Tree	{ return ( Set ) Set () ; }
Code	{ return ( Set ) Set () ; }
Distance : 4

15
Tree	{ return ( Set ) Any.ANY () ; }
Code	{ return ( Set ) Any.ANY () ; }
Distance : 4

16
Tree	{ return ( Set ) reportMatcher ( reportMatcher ) . clazz () ; }
Code	{ return ( Set ) reportMatcher ( reportMatcher ) . clazz () ; }
Distance : 9

17
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; }
Distance : 9

18
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 4

19
Tree	{ Any.ANY ( Any.ANY ) ; return null ; }
Code	{ Any.ANY ( Any.ANY ) ; return null ; }
Distance : 7

20
Tree	{ return ( Set ) reportMatcher ( reportMatcher ) ; }
Code	{ return ( Set ) reportMatcher ( reportMatcher ) ; }
Distance : 7

21
Tree	{ return Any.ANY () ; }
Code	{ return Any.ANY () ; }
Distance : 1

22
Tree	{ reportMatcher ( reportMatcher ) ; return null ; }
Code	{ reportMatcher ( reportMatcher ) ; return null ; }
Distance : 7

23
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 2

24
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 7

25
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 9

26
Tree	{ T ( Any.ANY ) ; return null ; }
Code	{ T ( Any.ANY ) ; return null ; }
Distance : 7

27
Tree	{ super ( Set . reportMatcher ( reportMatcher ) ) ; reportMatcher () ; }
Code	{ super ( Set . reportMatcher ( reportMatcher ) ) ; reportMatcher () ; }
Distance : 11

28
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

29
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 1

30
Tree	{ return ( reportMatcher ) reportMatcher () ; }
Code	{ return ( reportMatcher ) reportMatcher () ; }
Distance : 4

31
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; }
Distance : 7

32
Tree	{ return ( Set ) reportMatcher () ; }
Code	{ return ( Set ) reportMatcher () ; }
Distance : 4

33
Tree	{ return ( Set ) reportMatcher ( reportMatcher ) ; }
Code	{ return ( Set ) reportMatcher ( reportMatcher ) ; }
Distance : 7

34
Tree	{ return Any.ANY ( Any.ANY ) ; }
Code	{ return Any.ANY ( Any.ANY ) ; }
Distance : 4

35
Tree	{ super ( Set ) ; Set ( Any.ANY ) ; }
Code	{ super ( Set ) ; Set ( Any.ANY ) ; }
Distance : 9

36
Tree	{ super ( clazz ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( clazz ) ; reportMatcher ( Any.ANY ) ; }
Distance : 9

37
Tree	{ return null ; }
Code	{ return null ; }
Distance : 2

38
Tree	{ return reportMatcher ( reportMatcher ) ; }
Code	{ return reportMatcher ( reportMatcher ) ; }
Distance : 4

39
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

40
Tree	{ super ( Class ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Class ) ; reportMatcher ( Any.ANY ) ; }
Distance : 9

41
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . clazz ( reportMatcher ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . clazz ( reportMatcher ) ; }
Distance : 12

42
Tree	{ return return () ; }
Code	{ return return () ; }
Distance : 1

43
Tree	{ return ( Set ) T () ; }
Code	{ return ( Set ) T () ; }
Distance : 4

44
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; }
Distance : 7

45
Tree	{ return ( Set ) Any.ANY ( Any.ANY ) ; }
Code	{ return ( Set ) Any.ANY ( Any.ANY ) ; }
Distance : 7

46
Tree	{ return ( Set ) reportMatcher ( reportMatcher . reportMatcher () ) ; }
Code	{ return ( Set ) reportMatcher ( reportMatcher . reportMatcher () ) ; }
Distance : 9

47
Tree	{ return reportMatcher ( Class ) ; }
Code	{ return reportMatcher ( Class ) ; }
Distance : 4

48
Tree	{ return ( Set ) reportMatcher ( Any.ANY . returnSet () ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY . returnSet () ) ; }
Distance : 9

49
Tree	{ return ( Set ) Set . Any.ANY () ; }
Code	{ return ( Set ) Set . Any.ANY () ; }
Distance : 6

50
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . Any.ANY () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . Any.ANY () ; }
Distance : 9

51
Tree	{ return ( Set ) reportMatcher ( T ) ; }
Code	{ return ( Set ) reportMatcher ( T ) ; }
Distance : 7

52
Tree	{ return ( Set ) this . Any.ANY . reportMatcher () ; }
Code	{ return ( Set ) this . Any.ANY . reportMatcher () ; }
Distance : 8

53
Tree	{ return reportMatcher ( T ) ; }
Code	{ return reportMatcher ( T ) ; }
Distance : 4

54
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( Any.ANY ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( Any.ANY ) ; }
Distance : 12

55
Tree	{ clazz () ; return null ; }
Code	{ clazz () ; return null ; }
Distance : 5

56
Tree	{ return clazz ( Any.ANY ) ; }
Code	{ return clazz ( Any.ANY ) ; }
Distance : 4

57
Tree	{ return return ( Any.ANY ) ; }
Code	{ return return ( Any.ANY ) ; }
Distance : 4

58
Tree	{ return ( Set ) reportMatcher . clazz ( reportMatcher ) ; }
Code	{ return ( Set ) reportMatcher . clazz ( reportMatcher ) ; }
Distance : 9

59
Tree	{ reportMatcher ( Any.ANY , Class ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , Class ) ; return null ; }
Distance : 9

60
Tree	{ return ( Set ) reportMatcher ( Any.ANY . Any.ANY () ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY . Any.ANY () ) ; }
Distance : 9

61
Tree	{ super ( Set ) ; reportMatcher ( reportMatcher ) ; }
Code	{ super ( Set ) ; reportMatcher ( reportMatcher ) ; }
Distance : 9

62
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 7

63
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . clazz () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . clazz () ; }
Distance : 9

64
Tree	{ return ( Class ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Class ) reportMatcher ( Any.ANY ) ; }
Distance : 7

65
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . Any.ANY ( Any.ANY ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . Any.ANY ( Any.ANY ) ; }
Distance : 12

66
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 7

67
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet ( Any.ANY ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet ( Any.ANY ) ; }
Distance : 12

68
Tree	{ Any.ANY ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ Any.ANY ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 9

69
Tree	{ return ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ return ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 8

70
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 9

71
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . clazz ( Any.ANY ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . clazz ( Any.ANY ) ; }
Distance : 12

72
Tree	{ return ( Set ) reportMatcher . reportMatcher ( Any.ANY ) ; }
Code	{ return ( Set ) reportMatcher . reportMatcher ( Any.ANY ) ; }
Distance : 9

73
Tree	{ super ( Set ) ; Set ( reportMatcher ) ; }
Code	{ super ( Set ) ; Set ( reportMatcher ) ; }
Distance : 9

74
Tree	{ return ( Set ) reportMatcher . Any.ANY ( T ) ; }
Code	{ return ( Set ) reportMatcher . Any.ANY ( T ) ; }
Distance : 9

75
Tree	{ Set ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ Set ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 9

76
Tree	{ return Class ; }
Code	{ return Class ; }
Distance : 2

77
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; }
Distance : 9

78
Tree	{ super ( Set ) ; Any.ANY ( Any.ANY ) ; }
Code	{ super ( Set ) ; Any.ANY ( Any.ANY ) ; }
Distance : 9

79
Tree	{ return ( Set ) Set ( Any.ANY ) ; }
Code	{ return ( Set ) Set ( Any.ANY ) ; }
Distance : 7

80
Tree	{ reportMatcher ( T , Any.ANY ) ; return null ; }
Code	{ reportMatcher ( T , Any.ANY ) ; return null ; }
Distance : 9

81
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . Set () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . Set () ; }
Distance : 9

82
Tree	{ Matchers () ; return null ; }
Code	{ Matchers () ; return null ; }
Distance : 5

83
Tree	{ reportMatcher ( reportMatcher , Any.ANY ) ; return null ; }
Code	{ reportMatcher ( reportMatcher , Any.ANY ) ; return null ; }
Distance : 9

84
Tree	{ return ( Set ) reportMatcher ( Any.ANY . clazz () ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY . clazz () ) ; }
Distance : 9

85
Tree	{ return Set ; }
Code	{ return Set ; }
Distance : 2

86
Tree	{ super ( T ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( T ) ; reportMatcher ( Any.ANY ) ; }
Distance : 9

87
Tree	{ return () ; return null ; }
Code	{ return () ; return null ; }
Distance : 4

88
Tree	{ return ( Set ) reportMatcher . Any.ANY ( reportMatcher ) ; }
Code	{ return ( Set ) reportMatcher . Any.ANY ( reportMatcher ) ; }
Distance : 9

89
Tree	{ return ( Set ) reportMatcher ( T ) . returnSet () ; }
Code	{ return ( Set ) reportMatcher ( T ) . returnSet () ; }
Distance : 9

90
Tree	{ Set () ; return null ; }
Code	{ Set () ; return null ; }
Distance : 5

91
Tree	{ return ( Set ) reportMatcher . Any.ANY ( Any.ANY ) ; }
Code	{ return ( Set ) reportMatcher . Any.ANY ( Any.ANY ) ; }
Distance : 9

92
Tree	{ reportMatcher () ; return continue; ; }
Code	{ reportMatcher () ; return continue; ; }
Distance : 5

93
Tree	{ return ( Set ) reportMatcher ( clazz ) ; }
Code	{ return ( Set ) reportMatcher ( clazz ) ; }
Distance : 7

94
Tree	{ reportMatcher ( T ) ; return null ; }
Code	{ reportMatcher ( T ) ; return null ; }
Distance : 7

95
Tree	{ return ( Set ) reportMatcher ( reportMatcher ) . reportMatcher () ; }
Code	{ return ( Set ) reportMatcher ( reportMatcher ) . reportMatcher () ; }
Distance : 9

96
Tree	{ return ( Set ) reportMatcher ( T . Any.ANY () ) ; }
Code	{ return ( Set ) reportMatcher ( T . Any.ANY () ) ; }
Distance : 9

97
Tree	{ return ( Set ) reportMatcher . reportMatcher () ; }
Code	{ return ( Set ) reportMatcher . reportMatcher () ; }
Distance : 6

98
Tree	{ return ( Set ) reportMatcher . returnSet () ; }
Code	{ return ( Set ) reportMatcher . returnSet () ; }
Distance : 6

99
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 3

100
Tree	{ super ( Set ) ; reportMatcher ( T ) ; }
Code	{ super ( Set ) ; reportMatcher ( T ) ; }
Distance : 9

101
Tree	{ return ( Set ) reportMatcher ( T . clazz () ) ; }
Code	{ return ( Set ) reportMatcher ( T . clazz () ) ; }
Distance : 9

102
Tree	{ return ( Set ) reportMatcher ( reportMatcher . clazz () ) ; }
Code	{ return ( Set ) reportMatcher ( reportMatcher . clazz () ) ; }
Distance : 9

103
Tree	{ reportMatcher () ; return null ; }
Code	{ reportMatcher () ; return null ; }
Distance : 5

104
Tree	{ return ( Set ) reportMatcher ( T . returnSet () ) ; }
Code	{ return ( Set ) reportMatcher ( T . returnSet () ) ; }
Distance : 9

105
Tree	{ return ( Set ) reportMatcher ( reportMatcher ) . reportMatcher () ; }
Code	{ return ( Set ) reportMatcher ( reportMatcher ) . reportMatcher () ; }
Distance : 9

106
Tree	{ return Set () ; }
Code	{ return Set () ; }
Distance : 1

107
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . Any.ANY () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . Any.ANY () ; }
Distance : 9

108
Tree	{ return ( clazz ) reportMatcher ( reportMatcher ) ; }
Code	{ return ( clazz ) reportMatcher ( reportMatcher ) ; }
Distance : 7

109
Tree	{ reportMatcher () ; return super(); ; }
Code	{ reportMatcher () ; return super(); ; }
Distance : 5

110
Tree	{ return ( Class ) reportMatcher () ; }
Code	{ return ( Class ) reportMatcher () ; }
Distance : 4

111
Tree	{ return ( Set ) reportMatcher . returnSet ( T ) ; }
Code	{ return ( Set ) reportMatcher . returnSet ( T ) ; }
Distance : 9

112
Tree	{ return Set ; } wanted
Code	{ return Set ; } wanted
Distance : 3

113
Tree	{ return Any.ANY ; }
Code	{ return Any.ANY ; }
Distance : 2

114
Tree	{ return ( clazz ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( clazz ) reportMatcher ( Any.ANY ) ; }
Distance : 7

115
Tree	{ return ( T ) reportMatcher () ; }
Code	{ return ( T ) reportMatcher () ; }
Distance : 4

116
Tree	{ return Class () ; }
Code	{ return Class () ; }
Distance : 1

117
Tree	{ return clazz () ; }
Code	{ return clazz () ; }
Distance : 1

118
Tree	{ return ( Any.ANY ) reportMatcher ( reportMatcher ) ; }
Code	{ return ( Any.ANY ) reportMatcher ( reportMatcher ) ; }
Distance : 7

119
Tree	{ return reportMatcher ; }
Code	{ return reportMatcher ; }
Distance : 2

120
Tree	{ return Set ; } Math
Code	{ return Set ; } Math
Distance : 3

121
Tree	{ return Matchers () ; }
Code	{ return Matchers () ; }
Distance : 1

122
Tree	{ super ( Set . reportMatcher ( T ) ) ; reportMatcher () ; }
Code	{ super ( Set . reportMatcher ( T ) ) ; reportMatcher () ; }
Distance : 11

123
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . Matchers () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . Matchers () ; }
Distance : 9

124
Tree	{ super ( Set . reportMatcher ( Any.ANY ) ) ; reportMatcher () ; }
Code	{ super ( Set . reportMatcher ( Any.ANY ) ) ; reportMatcher () ; }
Distance : 11

125
Tree	{ return ( Any.ANY ) ; return null ; }
Code	{ return ( Any.ANY ) ; return null ; }
Distance : 6

126
Tree	{ return clazz ; }
Code	{ return clazz ; }
Distance : 2

127
Tree	{ Set ( Any.ANY ) ; return null ; }
Code	{ Set ( Any.ANY ) ; return null ; }
Distance : 7

128
Tree	{ return ( Set ) reportMatcher ( T ) . Any.ANY () ; }
Code	{ return ( Set ) reportMatcher ( T ) . Any.ANY () ; }
Distance : 9

129
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 2

130
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 2

131
Tree	{ T () ; return null ; }
Code	{ T () ; return null ; }
Distance : 5

132
Tree	{ return ( Set ) reportMatcher . reportMatcher ( T ) ; }
Code	{ return ( Set ) reportMatcher . reportMatcher ( T ) ; }
Distance : 9

133
Tree	{ return ( Set ) reportMatcher ( reportMatcher ) . Any.ANY () ; }
Code	{ return ( Set ) reportMatcher ( reportMatcher ) . Any.ANY () ; }
Distance : 9

134
Tree	{ return ( Set ) reportMatcher ( T ) ; }
Code	{ return ( Set ) reportMatcher ( T ) ; }
Distance : 7

135
Tree	{ return ( Set ) reportMatcher ( reportMatcher ) . returnSet () ; }
Code	{ return ( Set ) reportMatcher ( reportMatcher ) . returnSet () ; }
Distance : 9

136
Tree	{ return ( clazz ) reportMatcher () ; }
Code	{ return ( clazz ) reportMatcher () ; }
Distance : 4

137
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet ( reportMatcher ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet ( reportMatcher ) ; }
Distance : 12

138
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Distance : 7

139
Tree	{ return ( Any.ANY ) reportMatcher () ; }
Code	{ return ( Any.ANY ) reportMatcher () ; }
Distance : 4

140
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 9

141
Tree	{ reportMatcher ( Any.ANY , reportMatcher ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , reportMatcher ) ; return null ; }
Distance : 9

142
Tree	{ return ( Set ) clazz () ; }
Code	{ return ( Set ) clazz () ; }
Distance : 4

143
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 2

144
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 2

145
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 7

146
Tree	{ Any.ANY () ; return null ; }
Code	{ Any.ANY () ; return null ; }
Distance : 5

147
Tree	{ return ( Set ) reportMatcher ( reportMatcher ) . clazz () ; }
Code	{ return ( Set ) reportMatcher ( reportMatcher ) . clazz () ; }
Distance : 9

148
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . Matchers ( reportMatcher ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . Matchers ( reportMatcher ) ; }
Distance : 12

149
Tree	{ return reportMatcher ( Set ) ; }
Code	{ return reportMatcher ( Set ) ; }
Distance : 4

150
Tree	{ return ( Set ) Any.ANY . Any.ANY () ; }
Code	{ return ( Set ) Any.ANY . Any.ANY () ; }
Distance : 6

151
Tree	{ return ( Set ) reportMatcher . returnSet ( reportMatcher ) ; }
Code	{ return ( Set ) reportMatcher . returnSet ( reportMatcher ) ; }
Distance : 9

152
Tree	{ super ( Set . reportMatcher ( reportMatcher ) ) ; Any.ANY () ; }
Code	{ super ( Set . reportMatcher ( reportMatcher ) ) ; Any.ANY () ; }
Distance : 11

153
Tree	{ return ( Set ) reportMatcher ( reportMatcher . Any.ANY () ) ; }
Code	{ return ( Set ) reportMatcher ( reportMatcher . Any.ANY () ) ; }
Distance : 9

154
Tree	{ return ( Set ) reportMatcher . T () ; }
Code	{ return ( Set ) reportMatcher . T () ; }
Distance : 6

155
Tree	{ super ( Set . reportMatcher ( Any.ANY ) ) ; Any.ANY () ; }
Code	{ super ( Set . reportMatcher ( Any.ANY ) ) ; Any.ANY () ; }
Distance : 11

156
Tree	{ super ( Set . Set ( Any.ANY ) ) ; reportMatcher () ; }
Code	{ super ( Set . Set ( Any.ANY ) ) ; reportMatcher () ; }
Distance : 11

157
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 2

158
Tree	{ return STRING_CONSTANT ; } [
Code	{ return STRING_CONSTANT ; } [
Distance : 3

159
Tree	{ return ( Set ) reportMatcher ( Set ) ; }
Code	{ return ( Set ) reportMatcher ( Set ) ; }
Distance : 7

160
Tree	{ return ( Set ) Set . reportMatcher () ; }
Code	{ return ( Set ) Set . reportMatcher () ; }
Distance : 6

161
Tree	{ return Any.ANY ( reportMatcher ) ; }
Code	{ return Any.ANY ( reportMatcher ) ; }
Distance : 4

162
Tree	{ return Set ; }
Code	{ return Set ; }
Distance : 2

163
Tree	{ return STRING_CONSTANT ; } mock
Code	{ return STRING_CONSTANT ; } mock
Distance : 3

164
Tree	{ super ( Set . Any.ANY ( Any.ANY ) ) ; reportMatcher () ; }
Code	{ super ( Set . Any.ANY ( Any.ANY ) ) ; reportMatcher () ; }
Distance : 11

165
Tree	{ return ( Set ) Set . returnSet () ; }
Code	{ return ( Set ) Set . returnSet () ; }
Distance : 6

166
Tree	{ return ( Set ) this . returnSet . Any.ANY () ; }
Code	{ return ( Set ) this . returnSet . Any.ANY () ; }
Distance : 8

167
Tree	{ return reportMatcher () ; } Math
Code	{ return reportMatcher () ; } Math
Distance : 2

168
Tree	{ return reportMatcher () ; } wanted
Code	{ return reportMatcher () ; } wanted
Distance : 2

169
Tree	{ return Set ( Any.ANY ) ; }
Code	{ return Set ( Any.ANY ) ; }
Distance : 4

170
Tree	{ return ( Set ) this . Any.ANY . Any.ANY () ; }
Code	{ return ( Set ) this . Any.ANY . Any.ANY () ; }
Distance : 8

171
Tree	{ return STRING_CONSTANT ; } f
Code	{ return STRING_CONSTANT ; } f
Distance : 3

172
Tree	{ return ( Set ) this . clazz . Any.ANY () ; }
Code	{ return ( Set ) this . clazz . Any.ANY () ; }
Distance : 8

173
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 12

174
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 3

175
Tree	{ super ( Set . reportMatcher ( Any.ANY ) ) ; returnSet () ; }
Code	{ super ( Set . reportMatcher ( Any.ANY ) ) ; returnSet () ; }
Distance : 11

176
Tree	{ return ( Set ) this . returnSet . returnSet () ; }
Code	{ return ( Set ) this . returnSet . returnSet () ; }
Distance : 8

177
Tree	{ return ( Set ) this . Any.ANY . returnSet () ; }
Code	{ return ( Set ) this . Any.ANY . returnSet () ; }
Distance : 8

178
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 3

179
Tree	{ return ( Class ) reportMatcher ( reportMatcher ) ; }
Code	{ return ( Class ) reportMatcher ( reportMatcher ) ; }
Distance : 7

180
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 3

181
Tree	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Distance : 7

182
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 3

183
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

184
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 3

185
Tree	{ return STRING_CONSTANT ; } Override
Code	{ return STRING_CONSTANT ; } Override
Distance : 3

186
Tree	{ return ( Set ) this . Matchers . Any.ANY () ; }
Code	{ return ( Set ) this . Matchers . Any.ANY () ; }
Distance : 8

187
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 3

188
Tree	{ return ( Set ) reportMatcher ( Class ) ; }
Code	{ return ( Set ) reportMatcher ( Class ) ; }
Distance : 7

189
Tree	{ return ( T ) reportMatcher ( reportMatcher ) ; }
Code	{ return ( T ) reportMatcher ( reportMatcher ) ; }
Distance : 7

190
Tree	{ return T ; }
Code	{ return T ; }
Distance : 2

191
Tree	{ return ( Set ) reportMatcher . Any.ANY () ; }
Code	{ return ( Set ) reportMatcher . Any.ANY () ; }
Distance : 6

192
Tree	{ super ( Set . reportMatcher ( Class ) ) ; reportMatcher () ; }
Code	{ super ( Set . reportMatcher ( Class ) ) ; reportMatcher () ; }
Distance : 11

193
Tree	{ super ( Set . Any.ANY ( reportMatcher ) ) ; reportMatcher () ; }
Code	{ super ( Set . Any.ANY ( reportMatcher ) ) ; reportMatcher () ; }
Distance : 11

194
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . Any.ANY ( reportMatcher ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . Any.ANY ( reportMatcher ) ; }
Distance : 12

195
Tree	{ return Matchers ; }
Code	{ return Matchers ; }
Distance : 2

196
Tree	{ return ( Set ) reportMatcher . Matchers () ; }
Code	{ return ( Set ) reportMatcher . Matchers () ; }
Distance : 6

197
Tree	{ return ( Set ) this . clazz . returnSet () ; }
Code	{ return ( Set ) this . clazz . returnSet () ; }
Distance : 8

198
Tree	{ return STRING_CONSTANT ; } MathRuntimeException
Code	{ return STRING_CONSTANT ; } MathRuntimeException
Distance : 3

199
Tree	{ return STRING_CONSTANT ; } -
Code	{ return STRING_CONSTANT ; } -
Distance : 3

========================================================================


========================================================================
Example Number: 92
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnSet () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Set . class ) ) . returnSet () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnSet}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Set})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnSet}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return ( InstanceOf ) Any.ANY () ; }
Code	{ return ( InstanceOf ) Any.ANY () ; }
Distance : 9

1
Tree	{ reportMatcher ( Any.ANY ) . Any.ANY () ; this . returnSet = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . Any.ANY () ; this . returnSet = reportMatcher ; }
Distance : 11

2
Tree	{ reportMatcher ( Any.ANY ) ; returnSet = Any.ANY . InstanceOf () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnSet = Any.ANY . InstanceOf () ; }
Distance : 10

3
Tree	{ super ( reportMatcher ) ; returnSet ( Any.ANY ) ; initializeBuiltInTypes }
Code	{ super ( reportMatcher ) ; returnSet ( Any.ANY ) ; initializeBuiltInTypes }
Distance : 13

4
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; getAlternatesWithoutStructuralTyping }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; getAlternatesWithoutStructuralTyping }
Distance : 13

5
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; ServletUtilities.tempOneTimeFilePrefix }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; ServletUtilities.tempOneTimeFilePrefix }
Distance : 13

6
Tree	{ return ( Set ) reportMatcher () ; }
Code	{ return ( Set ) reportMatcher () ; }
Distance : 9

7
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; setTolerance }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; setTolerance }
Distance : 13

8
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; initializeRegistry }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; initializeRegistry }
Distance : 13

9
Tree	{ reportMatcher ( Any.ANY ) ; this . InstanceOf = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) ; this . InstanceOf = reportMatcher ; }
Distance : 11

10
Tree	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; }
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; Matchers = Any.ANY . Any.ANY () ; }
Code	{ reportMatcher ( Any.ANY ) ; Matchers = Any.ANY . Any.ANY () ; }
Distance : 10

12
Tree	{ super ( reportMatcher ) ; returnSet ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; returnSet ( Any.ANY ) ; }
Distance : 12

13
Tree	{ InstanceOf ( Any.ANY ) ; return false ; }
Code	{ InstanceOf ( Any.ANY ) ; return false ; }
Distance : 11

14
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

15
Tree	{ reportMatcher ( Any.ANY ) ; returnSet = Any.ANY . returnSet () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnSet = Any.ANY . returnSet () ; }
Distance : 9

16
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

17
Tree	{ reportMatcher ( InstanceOf ) ; return null ; }
Code	{ reportMatcher ( InstanceOf ) ; return null ; }
Distance : 10

18
Tree	{ return this . InstanceOf ; }
Code	{ return this . InstanceOf ; }
Distance : 12

19
Tree	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Distance : 11

20
Tree	{ super ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; }
Distance : 12

21
Tree	{ Any.ANY ( Any.ANY ) ; return null ; }
Code	{ Any.ANY ( Any.ANY ) ; return null ; }
Distance : 12

22
Tree	{ super ( Set ) ; }
Code	{ super ( Set ) ; }
Distance : 11

23
Tree	{ reportMatcher ( Set ) ; return null ; }
Code	{ reportMatcher ( Set ) ; return null ; }
Distance : 10

24
Tree	{ super ( reportMatcher ) ; returnSet ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; returnSet ( reportMatcher ) ; }
Distance : 12

25
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

26
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

27
Tree	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; }
Distance : 9

28
Tree	{ reportMatcher ( reportMatcher ) ; return true ; }
Code	{ reportMatcher ( reportMatcher ) ; return true ; }
Distance : 11

29
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 7

30
Tree	{ super ( reportMatcher ) ; returnSet ( Any.ANY ) ; initializeRegistry }
Code	{ super ( reportMatcher ) ; returnSet ( Any.ANY ) ; initializeRegistry }
Distance : 13

31
Tree	{ return reportMatcher ( reportMatcher ) . reportMatcher () ; }
Code	{ return reportMatcher ( reportMatcher ) . reportMatcher () ; }
Distance : 8

32
Tree	{ reportMatcher ( InstanceOf ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( InstanceOf ) ; return NUMBER_CONSTANT ; }
Distance : 10

33
Tree	{ return reportMatcher ( reportMatcher ) . returnSet () ; }
Code	{ return reportMatcher ( reportMatcher ) . returnSet () ; }
Distance : 7

34
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

35
Tree	{ reportMatcher ( reportMatcher ) ; return false ; }
Code	{ reportMatcher ( reportMatcher ) ; return false ; }
Distance : 11

36
Tree	{ return Set ( Any.ANY ) ; }
Code	{ return Set ( Any.ANY ) ; }
Distance : 11

37
Tree	{ return reportMatcher ( Any.ANY ) . < Any.ANY > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Any.ANY > reportMatcher () ; }
Distance : 9

38
Tree	{ return InstanceOf ( Any.ANY ) ; }
Code	{ return InstanceOf ( Any.ANY ) ; }
Distance : 10

39
Tree	{ return reportMatcher ( Any.ANY ) . < Any.ANY > Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Any.ANY > Any.ANY () ; }
Distance : 9

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

41
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

42
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . returnSet = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . returnSet = reportMatcher ; }
Distance : 11

43
Tree	{ reportMatcher ( Any.ANY ) ; Matchers = Any.ANY . InstanceOf () ; }
Code	{ reportMatcher ( Any.ANY ) ; Matchers = Any.ANY . InstanceOf () ; }
Distance : 10

44
Tree	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) . reportMatcher () ; }
Distance : 9

45
Tree	{ reportMatcher ( Any.ANY ) ; Any.ANY = Any.ANY . Any.ANY () ; }
Code	{ reportMatcher ( Any.ANY ) ; Any.ANY = Any.ANY . Any.ANY () ; }
Distance : 10

46
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 9

47
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

48
Tree	{ return ( Any.ANY ) Any.ANY () ; }
Code	{ return ( Any.ANY ) Any.ANY () ; }
Distance : 10

49
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Any.ANY = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Any.ANY = reportMatcher ; }
Distance : 12

50
Tree	{ reportMatcher ( Any.ANY ) . Any.ANY () ; this . InstanceOf = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . Any.ANY () ; this . InstanceOf = reportMatcher ; }
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; Matchers = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; Matchers = false ; }
Distance : 11

52
Tree	{ super ( reportMatcher ) ; returnSet ( Any.ANY ) . returnSet () ; }
Code	{ super ( reportMatcher ) ; returnSet ( Any.ANY ) . returnSet () ; }
Distance : 9

53
Tree	{ return this . reportMatcher ; }
Code	{ return this . reportMatcher ; }
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) ; returnSet = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnSet = Any.ANY . reportMatcher () ; }
Distance : 10

55
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

56
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; this . InstanceOf = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; this . InstanceOf = reportMatcher ; }
Distance : 12

57
Tree	{ return ( InstanceOf ) Any.ANY ( Any.ANY ) ; }
Code	{ return ( InstanceOf ) Any.ANY ( Any.ANY ) ; }
Distance : 10

58
Tree	{ reportMatcher ( Any.ANY ) . Any.ANY () ; this . Matchers = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . Any.ANY () ; this . Matchers = reportMatcher ; }
Distance : 12

59
Tree	{ return Any.ANY ( reportMatcher ) ; }
Code	{ return Any.ANY ( reportMatcher ) ; }
Distance : 11

60
Tree	{ super ( reportMatcher ) ; returnSet ( Any.ANY ) ; makeStackTracesClean }
Code	{ super ( reportMatcher ) ; returnSet ( Any.ANY ) ; makeStackTracesClean }
Distance : 13

61
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

62
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . InstanceOf = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . InstanceOf = reportMatcher ; }
Distance : 12

63
Tree	{ super ( reportMatcher ) ; } p
Code	{ super ( reportMatcher ) ; } p
Distance : 13

64
Tree	{ return ( reportMatcher ) . () ; }
Code	{ return ( reportMatcher ) . () ; }
Distance : 9

65
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Matchers = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Matchers = false ; }
Distance : 11

66
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; }
Distance : 10

67
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . Matchers () ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . Matchers () ; }
Distance : 9

68
Tree	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) . Any.ANY () ; }
Code	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) . Any.ANY () ; }
Distance : 9

69
Tree	{ super ( reportMatcher ) ; Any.ANY ( Any.ANY ) . Any.ANY () ; }
Code	{ super ( reportMatcher ) ; Any.ANY ( Any.ANY ) . Any.ANY () ; }
Distance : 10

70
Tree	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = reportMatcher ; }
Distance : 11

71
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

72
Tree	{ reportMatcher ( Any.ANY ) ; this . InstanceOf = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . InstanceOf = Any.ANY ; }
Distance : 11

73
Tree	{ reportMatcher ( Any.ANY ) ; this . returnSet = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnSet = reportMatcher ; }
Distance : 11

74
Tree	{ return ( InstanceOf ) reportMatcher () ; }
Code	{ return ( InstanceOf ) reportMatcher () ; }
Distance : 9

75
Tree	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Distance : 8

76
Tree	{ super ( reportMatcher ) ; returnSet ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( reportMatcher ) ; returnSet ( Any.ANY ) . reportMatcher () ; }
Distance : 10

77
Tree	{ reportMatcher ( Any.ANY ) . Any.ANY () ; { = false ; }
Code	{ reportMatcher ( Any.ANY ) . Any.ANY () ; { = false ; }
Distance : 11

78
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 14

79
Tree	{ InstanceOf ( Any.ANY ) ; return null ; }
Code	{ InstanceOf ( Any.ANY ) ; return null ; }
Distance : 11

80
Tree	{ return ( Set ) Any.ANY () ; }
Code	{ return ( Set ) Any.ANY () ; }
Distance : 9

81
Tree	{ return reportMatcher ( Set ) ; }
Code	{ return reportMatcher ( Set ) ; }
Distance : 9

82
Tree	{ reportMatcher ( Any.ANY ) . Any.ANY () ; this . Any.ANY = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . Any.ANY () ; this . Any.ANY = reportMatcher ; }
Distance : 12

83
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

84
Tree	{ super ( reportMatcher ) ; Matchers ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; Matchers ( Any.ANY ) ; }
Distance : 12

85
Tree	{ reportMatcher ( Any.ANY ) ; this . reportMatcher = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . reportMatcher = Any.ANY ; }
Distance : 11

86
Tree	{ return reportMatcher ( Any.ANY ) . Matchers () ; }
Code	{ return reportMatcher ( Any.ANY ) . Matchers () ; }
Distance : 8

87
Tree	{ return ( Set ) Any.ANY ( Any.ANY ) ; }
Code	{ return ( Set ) Any.ANY ( Any.ANY ) ; }
Distance : 10

88
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

89
Tree	{ InstanceOf ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ InstanceOf ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

90
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; returnSet = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; returnSet = false ; }
Distance : 11

91
Tree	{ reportMatcher ( InstanceOf ) ; return true ; }
Code	{ reportMatcher ( InstanceOf ) ; return true ; }
Distance : 10

92
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

93
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

94
Tree	{ super ( reportMatcher ) ; } value
Code	{ super ( reportMatcher ) ; } value
Distance : 13

95
Tree	{ super ( reportMatcher ) ; } i
Code	{ super ( reportMatcher ) ; } i
Distance : 13

96
Tree	{ return ( reportMatcher ) returnSet ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) returnSet ( Any.ANY ) ; }
Distance : 11

97
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

98
Tree	{ return reportMatcher ( Any.ANY ) . < Matchers > Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Matchers > Any.ANY () ; }
Distance : 9

99
Tree	{ super ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; }
Distance : 12

100
Tree	{ return reportMatcher ( reportMatcher ) . Matchers () ; }
Code	{ return reportMatcher ( reportMatcher ) . Matchers () ; }
Distance : 8

101
Tree	{ return ( Any.ANY ) reportMatcher () ; }
Code	{ return ( Any.ANY ) reportMatcher () ; }
Distance : 10

102
Tree	{ return reportMatcher ( Any.ANY ) . Set () ; }
Code	{ return reportMatcher ( Any.ANY ) . Set () ; }
Distance : 8

103
Tree	{ return reportMatcher ( InstanceOf ) ; }
Code	{ return reportMatcher ( InstanceOf ) ; }
Distance : 9

104
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

105
Tree	{ super ( reportMatcher ) ; Any.ANY ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; Any.ANY ( Any.ANY ) ; }
Distance : 12

106
Tree	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) ; }
Distance : 10

107
Tree	{ return reportMatcher ( reportMatcher ) . Any.ANY () ; }
Code	{ return reportMatcher ( reportMatcher ) . Any.ANY () ; }
Distance : 8

108
Tree	{ InstanceOf ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Code	{ InstanceOf ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Distance : 11

109
Tree	{ Set ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ Set ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

110
Tree	{ return Any.ANY ( Any.ANY ) ; }
Code	{ return Any.ANY ( Any.ANY ) ; }
Distance : 11

111
Tree	{ Set ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Code	{ Set ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Distance : 12

112
Tree	{ super ( Matchers ) ; }
Code	{ super ( Matchers ) ; }
Distance : 12

113
Tree	{ Set ( Any.ANY ) ; return false ; }
Code	{ Set ( Any.ANY ) ; return false ; }
Distance : 12

114
Tree	{ Any.ANY ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ Any.ANY ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

115
Tree	{ return ( reportMatcher ) InstanceOf ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) InstanceOf ( Any.ANY ) ; }
Distance : 10

116
Tree	{ super ( reportMatcher ) ; } options
Code	{ super ( reportMatcher ) ; } options
Distance : 13

117
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . Any.ANY () ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . Any.ANY () ; }
Distance : 9

118
Tree	{ reportMatcher ( Any.ANY ) . Any.ANY () ; reportMatcher = false ; }
Code	{ reportMatcher ( Any.ANY ) . Any.ANY () ; reportMatcher = false ; }
Distance : 11

119
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; reportMatcher = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; reportMatcher = false ; }
Distance : 11

120
Tree	{ return ( reportMatcher ) reportMatcher () ; }
Code	{ return ( reportMatcher ) reportMatcher () ; }
Distance : 10

121
Tree	{ super ( reportMatcher ) ; Any.ANY ( Any.ANY ) ; makeStackTracesClean }
Code	{ super ( reportMatcher ) ; Any.ANY ( Any.ANY ) ; makeStackTracesClean }
Distance : 13

122
Tree	{ return ( reportMatcher ) InstanceOf () ; }
Code	{ return ( reportMatcher ) InstanceOf () ; }
Distance : 10

123
Tree	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) . Any.ANY () ; }
Code	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) . Any.ANY () ; }
Distance : 9

124
Tree	{ reportMatcher ( Set ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Set ) ; return NUMBER_CONSTANT ; }
Distance : 10

125
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; makeStackTracesClean }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; makeStackTracesClean }
Distance : 13

126
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 8

127
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; this . returnSet = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; this . returnSet = reportMatcher ; }
Distance : 11

128
Tree	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = Any.ANY ; }
Distance : 11

129
Tree	{ return ( Any.ANY ) Any.ANY ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) Any.ANY ( Any.ANY ) ; }
Distance : 11

130
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

131
Tree	{ reportMatcher ( Any.ANY ) ; this . Matchers = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Matchers = Any.ANY ; }
Distance : 11

132
Tree	{ reportMatcher ( Any.ANY ) . Matchers () ; reportMatcher = false ; }
Code	{ reportMatcher ( Any.ANY ) . Matchers () ; reportMatcher = false ; }
Distance : 11

133
Tree	{ return this . reportMatcher ; }
Code	{ return this . reportMatcher ; }
Distance : 12

134
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

135
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

136
Tree	{ reportMatcher ( reportMatcher ) ; return null ; }
Code	{ reportMatcher ( reportMatcher ) ; return null ; }
Distance : 11

137
Tree	{ return this . reportMatcher ; } i
Code	{ return this . reportMatcher ; } i
Distance : 13

138
Tree	{ return reportMatcher ( Any.ANY ) . < reportMatcher > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < reportMatcher > reportMatcher () ; }
Distance : 9

139
Tree	{ reportMatcher ( Any.ANY ) . InstanceOf () ; reportMatcher = false ; }
Code	{ reportMatcher ( Any.ANY ) . InstanceOf () ; reportMatcher = false ; }
Distance : 11

140
Tree	{ Any.ANY ( Any.ANY ) ; return false ; }
Code	{ Any.ANY ( Any.ANY ) ; return false ; }
Distance : 12

141
Tree	{ reportMatcher ( InstanceOf ) ; return false ; }
Code	{ reportMatcher ( InstanceOf ) ; return false ; }
Distance : 10

142
Tree	{ return reportMatcher ( Any.ANY ) . < Matchers > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Matchers > reportMatcher () ; }
Distance : 9

143
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . Any.ANY () ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . Any.ANY () ; }
Distance : 10

144
Tree	{ return reportMatcher ( Any.ANY ) . InstanceOf () ; }
Code	{ return reportMatcher ( Any.ANY ) . InstanceOf () ; }
Distance : 8

145
Tree	{ super ( Any.ANY ) ; returnSet ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; returnSet ( Any.ANY ) ; }
Distance : 12

146
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

147
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Distance : 11

148
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; reportMatcher = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; reportMatcher = false ; }
Distance : 11

149
Tree	{ super ( reportMatcher ) ; returnSet ( Any.ANY ) . Any.ANY () ; }
Code	{ super ( reportMatcher ) ; returnSet ( Any.ANY ) . Any.ANY () ; }
Distance : 10

150
Tree	{ super ( reportMatcher ) ; InstanceOf ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; InstanceOf ( Any.ANY ) ; }
Distance : 11

151
Tree	{ return ( reportMatcher ) Any.ANY () ; }
Code	{ return ( reportMatcher ) Any.ANY () ; }
Distance : 10

152
Tree	{ reportMatcher ( Any.ANY ) ; this . Matchers = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Matchers = reportMatcher ; }
Distance : 11

153
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; initializeBuiltInTypes }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; initializeBuiltInTypes }
Distance : 13

154
Tree	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) . Matchers () ; }
Code	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) . Matchers () ; }
Distance : 9

155
Tree	{ reportMatcher ( Any.ANY ) ; this . returnSet = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnSet = Any.ANY ; }
Distance : 11

156
Tree	{ super ( reportMatcher ) ; Any.ANY ( Any.ANY ) . returnSet () ; }
Code	{ super ( reportMatcher ) ; Any.ANY ( Any.ANY ) . returnSet () ; }
Distance : 9

157
Tree	{ return ( Any.ANY ) Any.ANY ( Any.ANY ) . Any.ANY () ; }
Code	{ return ( Any.ANY ) Any.ANY ( Any.ANY ) . Any.ANY () ; }
Distance : 9

158
Tree	{ reportMatcher ( Set ) ; return false ; }
Code	{ reportMatcher ( Set ) ; return false ; }
Distance : 10

159
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . Matchers () ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . Matchers () ; }
Distance : 10

160
Tree	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = InstanceOf ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = InstanceOf ; }
Distance : 11

161
Tree	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) . returnSet () ; }
Code	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) . returnSet () ; }
Distance : 8

162
Tree	{ super ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; }
Distance : 12

163
Tree	{ return this . Matchers ; }
Code	{ return this . Matchers ; }
Distance : 12

164
Tree	{ reportMatcher ( Any.ANY ) . Any.ANY () ; Matchers = false ; }
Code	{ reportMatcher ( Any.ANY ) . Any.ANY () ; Matchers = false ; }
Distance : 11

165
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 14

166
Tree	{ return reportMatcher ( Any.ANY ) . < Any.ANY > InstanceOf () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Any.ANY > InstanceOf () ; }
Distance : 9

167
Tree	{ return reportMatcher ( Any.ANY ) . < returnSet > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnSet > reportMatcher () ; }
Distance : 9

168
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

169
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

170
Tree	{ return reportMatcher ( Any.ANY ) . < returnSet > Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnSet > Any.ANY () ; }
Distance : 9

171
Tree	{ return reportMatcher ( reportMatcher ) ; }
Code	{ return reportMatcher ( reportMatcher ) ; }
Distance : 10

172
Tree	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) ; }
Distance : 11

173
Tree	{ super ( reportMatcher ) ; Any.ANY ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( reportMatcher ) ; Any.ANY ( Any.ANY ) . reportMatcher () ; }
Distance : 10

174
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

175
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

176
Tree	{ return this . reportMatcher ; } value
Code	{ return this . reportMatcher ; } value
Distance : 13

177
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

178
Tree	{ return this . Set ; }
Code	{ return this . Set ; }
Distance : 12

179
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

180
Tree	{ reportMatcher ( Any.ANY ) ; returnSet = Any.ANY . Any.ANY () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnSet = Any.ANY . Any.ANY () ; }
Distance : 10

181
Tree	{ Set ( Any.ANY ) ; return null ; }
Code	{ Set ( Any.ANY ) ; return null ; }
Distance : 12

182
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

183
Tree	{ reportMatcher ( Any.ANY ) ; Matchers = Any.ANY . returnSet () ; }
Code	{ reportMatcher ( Any.ANY ) ; Matchers = Any.ANY . returnSet () ; }
Distance : 9

184
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

185
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 14

186
Tree	{ super ( InstanceOf ) ; }
Code	{ super ( InstanceOf ) ; }
Distance : 11

187
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

188
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Any.ANY = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Any.ANY = reportMatcher ; }
Distance : 12

189
Tree	{ return this . reportMatcher ; } p
Code	{ return this . reportMatcher ; } p
Distance : 13

190
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher = Any.ANY . Any.ANY () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher = Any.ANY . Any.ANY () ; }
Distance : 10

191
Tree	{ reportMatcher ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Distance : 11

192
Tree	{ return this . reportMatcher ; } options
Code	{ return this . reportMatcher ; } options
Distance : 13

193
Tree	{ reportMatcher ( Any.ANY ) ; InstanceOf = Any.ANY . Any.ANY () ; }
Code	{ reportMatcher ( Any.ANY ) ; InstanceOf = Any.ANY . Any.ANY () ; }
Distance : 10

194
Tree	{ return this . Any.ANY ; }
Code	{ return this . Any.ANY ; }
Distance : 12

195
Tree	{ return reportMatcher ( Any.ANY ) . < InstanceOf > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < InstanceOf > reportMatcher () ; }
Distance : 9

196
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

197
Tree	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; }
Distance : 11

198
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

199
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 14

========================================================================


========================================================================
Example Number: 93
Parent Code is: 
{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anyList () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=List})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 9
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	{ returnList () ; return null ; }
Code	{ returnList () ; return null ; }
Distance : 5

1
Tree	{ return ( Matchers ) reportMatcher () ; }
Code	{ return ( Matchers ) reportMatcher () ; }
Distance : 4

2
Tree	{ return Matchers () ; }
Code	{ return Matchers () ; }
Distance : 1

3
Tree	{ return ( List ) reportMatcher . returnList () ; }
Code	{ return ( List ) reportMatcher . returnList () ; }
Distance : 6

4
Tree	{ reportMatcher () ; return super(); ; }
Code	{ reportMatcher () ; return super(); ; }
Distance : 5

5
Tree	{ return ( List ) reportMatcher ( returnList ) . returnList () ; }
Code	{ return ( List ) reportMatcher ( returnList ) . returnList () ; }
Distance : 9

6
Tree	{ return ( Class ) reportMatcher () ; }
Code	{ return ( Class ) reportMatcher () ; }
Distance : 4

7
Tree	{ return ( List ) anyList () ; }
Code	{ return ( List ) anyList () ; }
Distance : 3

8
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 2

9
Tree	{ clazz () ; return null ; }
Code	{ clazz () ; return null ; }
Distance : 5

10
Tree	{ return return ( Any.ANY ) ; }
Code	{ return return ( Any.ANY ) ; }
Distance : 4

11
Tree	{ return ( List ) reportMatcher . Any.ANY () ; }
Code	{ return ( List ) reportMatcher . Any.ANY () ; }
Distance : 6

12
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 2

13
Tree	{ return ( List ) reportMatcher ( reportMatcher ) . anyList () ; }
Code	{ return ( List ) reportMatcher ( reportMatcher ) . anyList () ; }
Distance : 8

14
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

15
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 1

16
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; }
Distance : 7

17
Tree	{ return ( List ) reportMatcher () ; }
Code	{ return ( List ) reportMatcher () ; }
Distance : 4

18
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

19
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; }
Distance : 7

20
Tree	{ reportMatcher () ; return return; ; }
Code	{ reportMatcher () ; return return; ; }
Distance : 5

21
Tree	{ return null ; }
Code	{ return null ; }
Distance : 2

22
Tree	{ return List ; }
Code	{ return List ; }
Distance : 2

23
Tree	{ Any.ANY ( Any.ANY ) ; return null ; }
Code	{ Any.ANY ( Any.ANY ) ; return null ; }
Distance : 7

24
Tree	{ reportMatcher () ; return null ; }
Code	{ reportMatcher () ; return null ; }
Distance : 5

25
Tree	{ return ( List ) reportMatcher ( reportMatcher ) ; }
Code	{ return ( List ) reportMatcher ( reportMatcher ) ; }
Distance : 7

26
Tree	{ return Any.ANY () ; }
Code	{ return Any.ANY () ; }
Distance : 1

27
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 4

28
Tree	{ reportMatcher ( reportMatcher ) ; return null ; }
Code	{ reportMatcher ( reportMatcher ) ; return null ; }
Distance : 7

29
Tree	{ return ( List ) reportMatcher ( reportMatcher ) ; }
Code	{ return ( List ) reportMatcher ( reportMatcher ) ; }
Distance : 7

30
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 7

31
Tree	{ return ( List ) reportMatcher ( T ) ; }
Code	{ return ( List ) reportMatcher ( T ) ; }
Distance : 7

32
Tree	{ return ( List ) reportMatcher ( T . anyList () ) ; }
Code	{ return ( List ) reportMatcher ( T . anyList () ) ; }
Distance : 8

33
Tree	{ return ( List ) reportMatcher ( T ) ; }
Code	{ return ( List ) reportMatcher ( T ) ; }
Distance : 7

34
Tree	{ return ( List ) reportMatcher . anyList () ; }
Code	{ return ( List ) reportMatcher . anyList () ; }
Distance : 5

35
Tree	{ return ( List ) reportMatcher ( T ) . returnList () ; }
Code	{ return ( List ) reportMatcher ( T ) . returnList () ; }
Distance : 9

36
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 7

37
Tree	{ return ( List ) Any.ANY ( reportMatcher ) ; }
Code	{ return ( List ) Any.ANY ( reportMatcher ) ; }
Distance : 7

38
Tree	{ return ( List ) Any.ANY ( Any.ANY ) ; }
Code	{ return ( List ) Any.ANY ( Any.ANY ) ; }
Distance : 7

39
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 2

40
Tree	{ return ( List ) reportMatcher ( T ) . anyList () ; }
Code	{ return ( List ) reportMatcher ( T ) . anyList () ; }
Distance : 8

41
Tree	{ return ( List ) this . anyList . Any.ANY () ; }
Code	{ return ( List ) this . anyList . Any.ANY () ; }
Distance : 7

42
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 7

43
Tree	{ return ( List ) T ( Any.ANY ) ; }
Code	{ return ( List ) T ( Any.ANY ) ; }
Distance : 7

44
Tree	{ reportMatcher ( T ) ; return null ; }
Code	{ reportMatcher ( T ) ; return null ; }
Distance : 7

45
Tree	{ Any.ANY () ; return null ; }
Code	{ Any.ANY () ; return null ; }
Distance : 5

46
Tree	{ return ( List ) returnList ( Any.ANY ) ; }
Code	{ return ( List ) returnList ( Any.ANY ) ; }
Distance : 7

47
Tree	{ return ( List ) this . Any.ANY . anyList () ; }
Code	{ return ( List ) this . Any.ANY . anyList () ; }
Distance : 7

48
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList ( reportMatcher ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList ( reportMatcher ) ; }
Distance : 12

49
Tree	{ super ( List ) ; anyList ( reportMatcher ) ; }
Code	{ super ( List ) ; anyList ( reportMatcher ) ; }
Distance : 8

50
Tree	{ reportMatcher ( Any.ANY , reportMatcher ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , reportMatcher ) ; return null ; }
Distance : 9

51
Tree	{ anyList () ; return null ; }
Code	{ anyList () ; return null ; }
Distance : 4

52
Tree	{ super ( List ) ; anyList ( Any.ANY ) ; }
Code	{ super ( List ) ; anyList ( Any.ANY ) ; }
Distance : 8

53
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList ( Any.ANY ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList ( Any.ANY ) ; }
Distance : 12

54
Tree	{ return ( List ) Any.ANY () ; }
Code	{ return ( List ) Any.ANY () ; }
Distance : 4

55
Tree	{ return ( List ) T () ; }
Code	{ return ( List ) T () ; }
Distance : 4

56
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . clazz () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . clazz () ; }
Distance : 9

57
Tree	{ return Matchers ; }
Code	{ return Matchers ; }
Distance : 2

58
Tree	{ anyList ( Any.ANY ) ; return null ; }
Code	{ anyList ( Any.ANY ) ; return null ; }
Distance : 7

59
Tree	{ return ( List ) reportMatcher ( returnList ) ; }
Code	{ return ( List ) reportMatcher ( returnList ) ; }
Distance : 7

60
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . anyList () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . anyList () ; }
Distance : 8

61
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . anyList ( T ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . anyList ( T ) ; }
Distance : 11

62
Tree	{ return ( List ) reportMatcher . returnList ( reportMatcher ) ; }
Code	{ return ( List ) reportMatcher . returnList ( reportMatcher ) ; }
Distance : 9

63
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; }
Code	{ super ( List ) ; returnList ( Any.ANY ) ; }
Distance : 9

64
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 2

65
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList ( clazz ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList ( clazz ) ; }
Distance : 12

66
Tree	{ return ( List ) reportMatcher ( Any.ANY . anyList () ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY . anyList () ) ; }
Distance : 8

67
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . anyList () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . anyList () ; }
Distance : 8

68
Tree	{ return Any.ANY ; }
Code	{ return Any.ANY ; }
Distance : 2

69
Tree	{ return ( List ) returnList ( reportMatcher ) ; }
Code	{ return ( List ) returnList ( reportMatcher ) ; }
Distance : 7

70
Tree	{ T ( Any.ANY ) ; return null ; }
Code	{ T ( Any.ANY ) ; return null ; }
Distance : 7

71
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList ( T ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList ( T ) ; }
Distance : 12

72
Tree	{ return ( List ) returnList ( Any.ANY ) . returnList () ; }
Code	{ return ( List ) returnList ( Any.ANY ) . returnList () ; }
Distance : 9

73
Tree	{ return ( List ) Any.ANY ( Any.ANY ) . returnList () ; }
Code	{ return ( List ) Any.ANY ( Any.ANY ) . returnList () ; }
Distance : 9

74
Tree	{ return ( List ) reportMatcher . returnList ( T ) ; }
Code	{ return ( List ) reportMatcher . returnList ( T ) ; }
Distance : 9

75
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 7

76
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 9

77
Tree	{ return ( List ) reportMatcher ( reportMatcher . returnList () ) ; }
Code	{ return ( List ) reportMatcher ( reportMatcher . returnList () ) ; }
Distance : 9

78
Tree	{ return reportMatcher ; }
Code	{ return reportMatcher ; }
Distance : 2

79
Tree	{ return ( List ) reportMatcher . returnList () ; }
Code	{ return ( List ) reportMatcher . returnList () ; }
Distance : 6

80
Tree	{ return clazz () ; }
Code	{ return clazz () ; }
Distance : 1

81
Tree	{ return ( List ) reportMatcher . returnList ( T ) ; }
Code	{ return ( List ) reportMatcher . returnList ( T ) ; }
Distance : 9

82
Tree	{ super ( List . Any.ANY ( T ) ) ; anyList () ; }
Code	{ super ( List . Any.ANY ( T ) ) ; anyList () ; }
Distance : 10

83
Tree	{ return ( List ) reportMatcher ( clazz ) ; }
Code	{ return ( List ) reportMatcher ( clazz ) ; }
Distance : 7

84
Tree	{ return ( List ) reportMatcher . anyList ( T ) ; }
Code	{ return ( List ) reportMatcher . anyList ( T ) ; }
Distance : 8

85
Tree	{ return ( List ) reportMatcher . returnList ( Any.ANY ) ; }
Code	{ return ( List ) reportMatcher . returnList ( Any.ANY ) ; }
Distance : 9

86
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; }
Code	{ super ( List ) ; returnList ( Any.ANY ) ; }
Distance : 9

87
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 2

88
Tree	{ return ( List ) reportMatcher ( returnList ) ; }
Code	{ return ( List ) reportMatcher ( returnList ) ; }
Distance : 7

89
Tree	{ return ( Any.ANY ) reportMatcher () ; }
Code	{ return ( Any.ANY ) reportMatcher () ; }
Distance : 4

90
Tree	{ return ( T ) reportMatcher () ; }
Code	{ return ( T ) reportMatcher () ; }
Distance : 4

91
Tree	{ return T () ; }
Code	{ return T () ; }
Distance : 1

92
Tree	{ return ( List ) T . anyList ( T ) ; }
Code	{ return ( List ) T . anyList ( T ) ; }
Distance : 8

93
Tree	{ super ( List ) ; Any.ANY ( Any.ANY ) ; }
Code	{ super ( List ) ; Any.ANY ( Any.ANY ) ; }
Distance : 9

94
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList ( returnList ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList ( returnList ) ; }
Distance : 12

95
Tree	{ { () ; return null ; }
Code	{ { () ; return null ; }
Distance : 5

96
Tree	{ return ( List ) returnList ( T ) ; }
Code	{ return ( List ) returnList ( T ) ; }
Distance : 7

97
Tree	{ super ( List . Any.ANY ( Any.ANY ) ) ; returnList () ; }
Code	{ super ( List . Any.ANY ( Any.ANY ) ) ; returnList () ; }
Distance : 11

98
Tree	{ return Class () ; }
Code	{ return Class () ; }
Distance : 1

99
Tree	{ return clazz ( Any.ANY ) ; }
Code	{ return clazz ( Any.ANY ) ; }
Distance : 4

100
Tree	{ reportMatcher ( Any.ANY , List ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , List ) ; return null ; }
Distance : 9

101
Tree	{ return ( List ) reportMatcher ( reportMatcher ) . returnList () ; }
Code	{ return ( List ) reportMatcher ( reportMatcher ) . returnList () ; }
Distance : 9

102
Tree	{ return ( List ) reportMatcher ( reportMatcher ) . returnList () ; }
Code	{ return ( List ) reportMatcher ( reportMatcher ) . returnList () ; }
Distance : 9

103
Tree	{ return returnList ( Any.ANY ) ; }
Code	{ return returnList ( Any.ANY ) ; }
Distance : 4

104
Tree	{ return returnList () ; }
Code	{ return returnList () ; }
Distance : 1

105
Tree	{ return anyList () ; }
Code	{ return anyList () ; }
Distance : 0

106
Tree	{ return reportMatcher ( reportMatcher ) ; }
Code	{ return reportMatcher ( reportMatcher ) ; }
Distance : 4

107
Tree	{ return reportMatcher ( returnList ) ; }
Code	{ return reportMatcher ( returnList ) ; }
Distance : 4

108
Tree	{ return ( List ) returnList . anyList () ; }
Code	{ return ( List ) returnList . anyList () ; }
Distance : 5

109
Tree	{ return ( List ) reportMatcher ( reportMatcher ) . anyList () ; }
Code	{ return ( List ) reportMatcher ( reportMatcher ) . anyList () ; }
Distance : 8

110
Tree	{ return ( List ) this . clazz . anyList () ; }
Code	{ return ( List ) this . clazz . anyList () ; }
Distance : 7

111
Tree	{ Any.ANY ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ Any.ANY ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 9

112
Tree	{ return ( List ) reportMatcher ( reportMatcher ) . returnList ( reportMatcher ) ; }
Code	{ return ( List ) reportMatcher ( reportMatcher ) . returnList ( reportMatcher ) ; }
Distance : 12

113
Tree	{ return ( List ) this . clazz . returnList () ; }
Code	{ return ( List ) this . clazz . returnList () ; }
Distance : 8

114
Tree	{ return ( List ) T . anyList () ; }
Code	{ return ( List ) T . anyList () ; }
Distance : 5

115
Tree	{ return ( List ) reportMatcher ( Any.ANY . returnList () ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY . returnList () ) ; }
Distance : 9

116
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

117
Tree	{ super ( List ) ; returnList ( reportMatcher ) ; }
Code	{ super ( List ) ; returnList ( reportMatcher ) ; }
Distance : 9

118
Tree	{ return ( List ) this . anyList . returnList () ; }
Code	{ return ( List ) this . anyList . returnList () ; }
Distance : 7

119
Tree	{ return return () ; }
Code	{ return return () ; }
Distance : 1

120
Tree	{ return returnList ; }
Code	{ return returnList ; }
Distance : 2

121
Tree	{ return anyList ( Any.ANY ) ; }
Code	{ return anyList ( Any.ANY ) ; }
Distance : 3

122
Tree	{ return ( List ) reportMatcher ( T . Any.ANY () ) ; }
Code	{ return ( List ) reportMatcher ( T . Any.ANY () ) ; }
Distance : 9

123
Tree	{ return ( Any.ANY ) ; return null ; }
Code	{ return ( Any.ANY ) ; return null ; }
Distance : 6

124
Tree	{ return ( List ) Any.ANY ( reportMatcher ) . returnList () ; }
Code	{ return ( List ) Any.ANY ( reportMatcher ) . returnList () ; }
Distance : 9

125
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

126
Tree	{ return ( List ) reportMatcher . Any.ANY ( T ) ; }
Code	{ return ( List ) reportMatcher . Any.ANY ( T ) ; }
Distance : 9

127
Tree	{ reportMatcher ( reportMatcher , Any.ANY ) ; return null ; }
Code	{ reportMatcher ( reportMatcher , Any.ANY ) ; return null ; }
Distance : 9

128
Tree	{ return ( List ) Any.ANY . anyList () ; }
Code	{ return ( List ) Any.ANY . anyList () ; }
Distance : 5

129
Tree	{ return ( List ) reportMatcher ( reportMatcher . Any.ANY () ) ; }
Code	{ return ( List ) reportMatcher ( reportMatcher . Any.ANY () ) ; }
Distance : 9

130
Tree	{ return ( List ) this . returnList . returnList () ; }
Code	{ return ( List ) this . returnList . returnList () ; }
Distance : 8

131
Tree	{ return reportMatcher ( T ) ; }
Code	{ return reportMatcher ( T ) ; }
Distance : 4

132
Tree	{ reportMatcher ( Any.ANY , clazz ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , clazz ) ; return null ; }
Distance : 9

133
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . anyList ( clazz ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . anyList ( clazz ) ; }
Distance : 11

134
Tree	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Distance : 7

135
Tree	{ super ( List . Any.ANY ( Any.ANY ) ) ; anyList () ; }
Code	{ super ( List . Any.ANY ( Any.ANY ) ) ; anyList () ; }
Distance : 10

136
Tree	{ reportMatcher () ; return continue; ; }
Code	{ reportMatcher () ; return continue; ; }
Distance : 5

137
Tree	{ return ( List ) T . returnList () ; }
Code	{ return ( List ) T . returnList () ; }
Distance : 6

138
Tree	{ return ( List ) reportMatcher ( T . returnList () ) ; }
Code	{ return ( List ) reportMatcher ( T . returnList () ) ; }
Distance : 9

139
Tree	{ return clazz ; }
Code	{ return clazz ; }
Distance : 2

140
Tree	{ return Class ; }
Code	{ return Class ; }
Distance : 2

141
Tree	{ return ( List ) reportMatcher . returnList ( reportMatcher ) ; }
Code	{ return ( List ) reportMatcher . returnList ( reportMatcher ) ; }
Distance : 9

142
Tree	{ reportMatcher ( Any.ANY , T ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , T ) ; return null ; }
Distance : 9

143
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

144
Tree	{ return ( List ) Any.ANY . returnList () ; }
Code	{ return ( List ) Any.ANY . returnList () ; }
Distance : 6

145
Tree	{ return ( List ) this . returnList . anyList () ; }
Code	{ return ( List ) this . returnList . anyList () ; }
Distance : 7

146
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . anyList ( reportMatcher ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . anyList ( reportMatcher ) ; }
Distance : 11

147
Tree	{ super ( List ) ; Matchers ( Any.ANY ) ; }
Code	{ super ( List ) ; Matchers ( Any.ANY ) ; }
Distance : 9

148
Tree	{ return ( List ) reportMatcher . anyList ( Any.ANY ) ; }
Code	{ return ( List ) reportMatcher . anyList ( Any.ANY ) ; }
Distance : 8

149
Tree	{ reportMatcher ( Any.ANY , returnList ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , returnList ) ; return null ; }
Distance : 9

150
Tree	{ return ( List ) reportMatcher ( Class ) ; }
Code	{ return ( List ) reportMatcher ( Class ) ; }
Distance : 7

151
Tree	{ return Any.ANY ( Any.ANY ) ; }
Code	{ return Any.ANY ( Any.ANY ) ; }
Distance : 4

152
Tree	{ super ( List . Any.ANY ( reportMatcher ) ) ; anyList () ; }
Code	{ super ( List . Any.ANY ( reportMatcher ) ) ; anyList () ; }
Distance : 10

153
Tree	{ super ( List . reportMatcher ( T ) ) ; returnList () ; }
Code	{ super ( List . reportMatcher ( T ) ) ; returnList () ; }
Distance : 11

154
Tree	{ return ( List ) reportMatcher ( reportMatcher ) . clazz () ; }
Code	{ return ( List ) reportMatcher ( reportMatcher ) . clazz () ; }
Distance : 9

155
Tree	{ super ( List . reportMatcher ( T ) ) ; anyList () ; }
Code	{ super ( List . reportMatcher ( T ) ) ; anyList () ; }
Distance : 10

156
Tree	{ T () ; return null ; }
Code	{ T () ; return null ; }
Distance : 5

157
Tree	{ return ( List ) returnList () ; }
Code	{ return ( List ) returnList () ; }
Distance : 4

158
Tree	{ reportMatcher ( Any.ANY , anyList ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , anyList ) ; return null ; }
Distance : 8

159
Tree	{ return ( List ) Any.ANY ( Any.ANY ) ; }
Code	{ return ( List ) Any.ANY ( Any.ANY ) ; }
Distance : 7

160
Tree	{ return List ; }
Code	{ return List ; }
Distance : 2

161
Tree	{ return ( List ) reportMatcher . anyList ( reportMatcher ) ; }
Code	{ return ( List ) reportMatcher . anyList ( reportMatcher ) ; }
Distance : 8

162
Tree	{ return reportMatcher ( Class ) ; }
Code	{ return reportMatcher ( Class ) ; }
Distance : 4

163
Tree	{ return ( List ) reportMatcher ( returnList . anyList () ) ; }
Code	{ return ( List ) reportMatcher ( returnList . anyList () ) ; }
Distance : 8

164
Tree	{ super ( List . reportMatcher ( Any.ANY ) ) ; anyList () ; }
Code	{ super ( List . reportMatcher ( Any.ANY ) ) ; anyList () ; }
Distance : 10

165
Tree	{ return ( List ) reportMatcher ( clazz . anyList () ) ; }
Code	{ return ( List ) reportMatcher ( clazz . anyList () ) ; }
Distance : 8

166
Tree	{ return ( List ) reportMatcher . clazz () ; }
Code	{ return ( List ) reportMatcher . clazz () ; }
Distance : 6

167
Tree	{ return ( List ) reportMatcher ( T ) . returnList () ; }
Code	{ return ( List ) reportMatcher ( T ) . returnList () ; }
Distance : 9

168
Tree	{ super ( List . reportMatcher ( Any.ANY ) ) ; returnList () ; }
Code	{ super ( List . reportMatcher ( Any.ANY ) ) ; returnList () ; }
Distance : 11

169
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 3

170
Tree	{ return ( List ) this . returnList . anyList () ; }
Code	{ return ( List ) this . returnList . anyList () ; }
Distance : 7

171
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 3

172
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . anyList ( Any.ANY ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . anyList ( Any.ANY ) ; }
Distance : 11

173
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 3

174
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 3

175
Tree	{ return List () ; }
Code	{ return List () ; }
Distance : 1

176
Tree	{ return ( List ) this . returnList . returnList () ; }
Code	{ return ( List ) this . returnList . returnList () ; }
Distance : 8

177
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 3

178
Tree	{ super ( List . reportMatcher ( reportMatcher ) ) ; anyList () ; }
Code	{ super ( List . reportMatcher ( reportMatcher ) ) ; anyList () ; }
Distance : 10

179
Tree	{ return STRING_CONSTANT ; } mock
Code	{ return STRING_CONSTANT ; } mock
Distance : 3

180
Tree	{ return STRING_CONSTANT ; } MathRuntimeException
Code	{ return STRING_CONSTANT ; } MathRuntimeException
Distance : 3

181
Tree	{ super ( List ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( List ) ; reportMatcher ( Any.ANY ) ; }
Distance : 9

182
Tree	{ return STRING_CONSTANT ; } Override
Code	{ return STRING_CONSTANT ; } Override
Distance : 3

183
Tree	{ return ( List ) reportMatcher ( clazz ) . returnList () ; }
Code	{ return ( List ) reportMatcher ( clazz ) . returnList () ; }
Distance : 9

184
Tree	{ super ( List . returnList ( Any.ANY ) ) ; anyList () ; }
Code	{ super ( List . returnList ( Any.ANY ) ) ; anyList () ; }
Distance : 10

185
Tree	{ return STRING_CONSTANT ; } f
Code	{ return STRING_CONSTANT ; } f
Distance : 3

186
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 3

187
Tree	{ return STRING_CONSTANT ; } [
Code	{ return STRING_CONSTANT ; } [
Distance : 3

188
Tree	{ return anyList ; }
Code	{ return anyList ; }
Distance : 1

189
Tree	{ return ( List ) this . anyList . anyList () ; }
Code	{ return ( List ) this . anyList . anyList () ; }
Distance : 7

190
Tree	{ super ( List ) ; anyList ( T ) ; }
Code	{ super ( List ) ; anyList ( T ) ; }
Distance : 8

191
Tree	{ return ( List ) reportMatcher ( reportMatcher . anyList () ) ; }
Code	{ return ( List ) reportMatcher ( reportMatcher . anyList () ) ; }
Distance : 8

192
Tree	{ super ( List ) ; List ( Any.ANY ) ; }
Code	{ super ( List ) ; List ( Any.ANY ) ; }
Distance : 9

193
Tree	{ return ( List ) List () ; }
Code	{ return ( List ) List () ; }
Distance : 4

194
Tree	{ return ( List ) Any.ANY ( T ) ; }
Code	{ return ( List ) Any.ANY ( T ) ; }
Distance : 7

195
Tree	{ reportMatcher ( Any.ANY , returnList ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , returnList ) ; return null ; }
Distance : 9

196
Tree	{ return T ; }
Code	{ return T ; }
Distance : 2

197
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 2

198
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 3

199
Tree	{ return STRING_CONSTANT ; } -
Code	{ return STRING_CONSTANT ; } -
Distance : 3

========================================================================


========================================================================
Example Number: 94
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( List . class ) ) . returnList () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=List})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

1
Tree	{ return returnList ( Any.ANY ) ; }
Code	{ return returnList ( Any.ANY ) ; }
Distance : 11

2
Tree	{ return reportMatcher ( Any.ANY ) . < Matchers > anyList () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Matchers > anyList () ; }
Distance : 9

3
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; returnList = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; returnList = false ; }
Distance : 11

4
Tree	{ return this . anyList ; }
Code	{ return this . anyList ; }
Distance : 12

5
Tree	{ super ( reportMatcher ) ; returnList ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; returnList ( reportMatcher ) ; }
Distance : 12

6
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 8

7
Tree	{ return ( InstanceOf ) anyList () ; }
Code	{ return ( InstanceOf ) anyList () ; }
Distance : 9

8
Tree	{ reportMatcher ( Any.ANY ) ; returnList = Any.ANY . returnList () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnList = Any.ANY . returnList () ; }
Distance : 9

9
Tree	{ reportMatcher ( Any.ANY ) ; this . returnList = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnList = reportMatcher ; }
Distance : 11

10
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . Any.ANY = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . Any.ANY = reportMatcher ; }
Distance : 12

11
Tree	{ return ( Any.ANY ) returnList ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) returnList ( Any.ANY ) ; }
Distance : 11

12
Tree	{ Any.ANY ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ Any.ANY ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

13
Tree	{ reportMatcher ( Any.ANY ) ; this . returnList = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnList = Any.ANY ; }
Distance : 11

14
Tree	{ return ( Any.ANY ) anyList ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) anyList ( Any.ANY ) ; }
Distance : 11

15
Tree	{ reportMatcher ( InstanceOf ) ; return null ; }
Code	{ reportMatcher ( InstanceOf ) ; return null ; }
Distance : 10

16
Tree	{ return this . Any.ANY ; }
Code	{ return this . Any.ANY ; }
Distance : 12

17
Tree	{ return reportMatcher ( Any.ANY ) . anyList () ; }
Code	{ return reportMatcher ( Any.ANY ) . anyList () ; }
Distance : 8

18
Tree	{ return Any.ANY ( Any.ANY ) ; }
Code	{ return Any.ANY ( Any.ANY ) ; }
Distance : 11

19
Tree	{ super ( Any.ANY ) ; returnList ( Any.ANY ) ; super }
Code	{ super ( Any.ANY ) ; returnList ( Any.ANY ) ; super }
Distance : 13

20
Tree	{ super ( InstanceOf ) ; returnList ( Any.ANY ) ; }
Code	{ super ( InstanceOf ) ; returnList ( Any.ANY ) ; }
Distance : 11

21
Tree	{ return ( Any.ANY ) Any.ANY ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) Any.ANY ( Any.ANY ) ; }
Distance : 11

22
Tree	{ super ( InstanceOf ) ; }
Code	{ super ( InstanceOf ) ; }
Distance : 11

23
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

24
Tree	{ return ( InstanceOf ) returnList () ; }
Code	{ return ( InstanceOf ) returnList () ; }
Distance : 8

25
Tree	{ return ( Any.ANY ) reportMatcher () ; }
Code	{ return ( Any.ANY ) reportMatcher () ; }
Distance : 10

26
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

27
Tree	{ reportMatcher ( InstanceOf ) ; return true ; }
Code	{ reportMatcher ( InstanceOf ) ; return true ; }
Distance : 10

28
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

29
Tree	{ Any.ANY ( Any.ANY ) ; return null ; }
Code	{ Any.ANY ( Any.ANY ) ; return null ; }
Distance : 12

30
Tree	{ reportMatcher ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Distance : 11

31
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 7

32
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

33
Tree	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Distance : 8

34
Tree	{ super ( reportMatcher ) ; anyList ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; anyList ( reportMatcher ) ; }
Distance : 12

35
Tree	{ reportMatcher ( InstanceOf ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( InstanceOf ) ; return NUMBER_CONSTANT ; }
Distance : 10

36
Tree	{ return ( reportMatcher ) anyList ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) anyList ( Any.ANY ) ; }
Distance : 11

37
Tree	{ reportMatcher ( returnList ) ; return null ; }
Code	{ reportMatcher ( returnList ) ; return null ; }
Distance : 11

38
Tree	{ reportMatcher ( returnList ) ; return false ; }
Code	{ reportMatcher ( returnList ) ; return false ; }
Distance : 11

39
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

40
Tree	{ super ( reportMatcher ) ; returnList ( Any.ANY ) ; super }
Code	{ super ( reportMatcher ) ; returnList ( Any.ANY ) ; super }
Distance : 13

41
Tree	{ return this . InstanceOf ; }
Code	{ return this . InstanceOf ; }
Distance : 12

42
Tree	{ return ( Any.ANY ) anyList ( Any.ANY ) . returnList () ; }
Code	{ return ( Any.ANY ) anyList ( Any.ANY ) . returnList () ; }
Distance : 8

43
Tree	{ return ( Any.ANY ) returnList () ; }
Code	{ return ( Any.ANY ) returnList () ; }
Distance : 9

44
Tree	{ return ( InstanceOf ) returnList ( Any.ANY ) ; }
Code	{ return ( InstanceOf ) returnList ( Any.ANY ) ; }
Distance : 10

45
Tree	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = Any.ANY ; }
Distance : 11

46
Tree	{ return reportMatcher ( reportMatcher ) . anyList () ; }
Code	{ return reportMatcher ( reportMatcher ) . anyList () ; }
Distance : 8

47
Tree	{ return ( reportMatcher ) returnList ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) returnList ( Any.ANY ) ; }
Distance : 11

48
Tree	{ reportMatcher ( reportMatcher ) ; return false ; }
Code	{ reportMatcher ( reportMatcher ) ; return false ; }
Distance : 11

49
Tree	{ List ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ List ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

50
Tree	{ reportMatcher ( returnList ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( returnList ) ; return NUMBER_CONSTANT ; }
Distance : 11

51
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . anyList = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . anyList = reportMatcher ; }
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . Matchers = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . Matchers = reportMatcher ; }
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

54
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . returnList = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . returnList = reportMatcher ; }
Distance : 11

55
Tree	{ return reportMatcher ( reportMatcher ) . returnList () ; }
Code	{ return reportMatcher ( reportMatcher ) . returnList () ; }
Distance : 7

56
Tree	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Distance : 11

57
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

58
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; Any.ANY = false ; }
Distance : 11

59
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

60
Tree	{ super ( Any.ANY ) ; returnList ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; returnList ( Any.ANY ) ; }
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) . anyList () ; this . returnList = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . anyList () ; this . returnList = reportMatcher ; }
Distance : 11

62
Tree	{ return InstanceOf ( Any.ANY ) ; }
Code	{ return InstanceOf ( Any.ANY ) ; }
Distance : 10

63
Tree	{ reportMatcher ( Any.ANY ) ; anyList = reportMatcher . returnList () ; }
Code	{ reportMatcher ( Any.ANY ) ; anyList = reportMatcher . returnList () ; }
Distance : 9

64
Tree	{ reportMatcher ( Any.ANY ) ; Matchers = Any.ANY . returnList () ; }
Code	{ reportMatcher ( Any.ANY ) ; Matchers = Any.ANY . returnList () ; }
Distance : 9

65
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; anyList = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; anyList = false ; }
Distance : 11

66
Tree	{ return Any.ANY ( reportMatcher ) ; }
Code	{ return Any.ANY ( reportMatcher ) ; }
Distance : 11

67
Tree	{ reportMatcher ( anyList ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( anyList ) ; return NUMBER_CONSTANT ; }
Distance : 11

68
Tree	{ reportMatcher ( Any.ANY ) ; returnList = Any.ANY . anyList () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnList = Any.ANY . anyList () ; }
Distance : 10

69
Tree	{ return ( reportMatcher ) anyList ( Any.ANY ) . returnList () ; }
Code	{ return ( reportMatcher ) anyList ( Any.ANY ) . returnList () ; }
Distance : 8

70
Tree	{ return reportMatcher ( returnList ) ; }
Code	{ return reportMatcher ( returnList ) ; }
Distance : 10

71
Tree	{ Any.ANY ( Any.ANY ) ; return false ; }
Code	{ Any.ANY ( Any.ANY ) ; return false ; }
Distance : 12

72
Tree	{ super ( reportMatcher ) ; returnList ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; returnList ( Any.ANY ) ; }
Distance : 12

73
Tree	{ return reportMatcher ( Any.ANY ) . < InstanceOf > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < InstanceOf > reportMatcher () ; }
Distance : 9

74
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher = Any.ANY . returnList () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher = Any.ANY . returnList () ; }
Distance : 9

75
Tree	{ return reportMatcher ( InstanceOf ) . returnList () ; }
Code	{ return reportMatcher ( InstanceOf ) . returnList () ; }
Distance : 6

76
Tree	{ return this . List ; }
Code	{ return this . List ; }
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) . anyList () ; anyList = false ; }
Code	{ reportMatcher ( Any.ANY ) . anyList () ; anyList = false ; }
Distance : 11

78
Tree	{ return Any.ANY ( Any.ANY ) . returnList () ; }
Code	{ return Any.ANY ( Any.ANY ) . returnList () ; }
Distance : 8

79
Tree	{ InstanceOf ( Any.ANY ) ; return true ; }
Code	{ InstanceOf ( Any.ANY ) ; return true ; }
Distance : 11

80
Tree	{ return reportMatcher ( List ) ; }
Code	{ return reportMatcher ( List ) ; }
Distance : 9

81
Tree	{ super ( reportMatcher ) ; returnList ( Any.ANY ) . returnList () ; }
Code	{ super ( reportMatcher ) ; returnList ( Any.ANY ) . returnList () ; }
Distance : 9

82
Tree	{ return ( reportMatcher ) returnList ( Any.ANY ) . returnList () ; }
Code	{ return ( reportMatcher ) returnList ( Any.ANY ) . returnList () ; }
Distance : 8

83
Tree	{ reportMatcher ( List ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( List ) ; return NUMBER_CONSTANT ; }
Distance : 10

84
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

85
Tree	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) . returnList () ; }
Code	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) . returnList () ; }
Distance : 8

86
Tree	{ return reportMatcher ( Any.ANY ) . < Any.ANY > anyList () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Any.ANY > anyList () ; }
Distance : 9

87
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

88
Tree	{ super ( reportMatcher ) ; anyList ( reportMatcher ) ; super }
Code	{ super ( reportMatcher ) ; anyList ( reportMatcher ) ; super }
Distance : 13

89
Tree	{ return ( Any.ANY ) anyList () ; }
Code	{ return ( Any.ANY ) anyList () ; }
Distance : 10

90
Tree	{ super ( anyList ) ; }
Code	{ super ( anyList ) ; }
Distance : 12

91
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

92
Tree	{ return ( reportMatcher ) anyList ( Any.ANY ) . anyList () ; }
Code	{ return ( reportMatcher ) anyList ( Any.ANY ) . anyList () ; }
Distance : 9

93
Tree	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) ; }
Distance : 11

94
Tree	{ reportMatcher ( InstanceOf ) ; return false ; }
Code	{ reportMatcher ( InstanceOf ) ; return false ; }
Distance : 10

95
Tree	{ return reportMatcher ( Any.ANY ) . < anyList > anyList () ; }
Code	{ return reportMatcher ( Any.ANY ) . < anyList > anyList () ; }
Distance : 9

96
Tree	{ return this . returnList ; }
Code	{ return this . returnList ; }
Distance : 11

97
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

98
Tree	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = reportMatcher ; }
Distance : 11

99
Tree	{ return reportMatcher ( Any.ANY ) . < reportMatcher > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < reportMatcher > reportMatcher () ; }
Distance : 9

100
Tree	{ reportMatcher ( Any.ANY ) ; this . anyList = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) ; this . anyList = reportMatcher ; }
Distance : 11

101
Tree	{ super ( Any.ANY ) ; anyList ( Any.ANY ) ; super }
Code	{ super ( Any.ANY ) ; anyList ( Any.ANY ) ; super }
Distance : 13

102
Tree	{ return ( reportMatcher ) Any.ANY () ; }
Code	{ return ( reportMatcher ) Any.ANY () ; }
Distance : 10

103
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . anyList = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . anyList = Any.ANY ; }
Distance : 12

104
Tree	{ super ( InstanceOf ) ; anyList ( Any.ANY ) ; super }
Code	{ super ( InstanceOf ) ; anyList ( Any.ANY ) ; super }
Distance : 12

105
Tree	{ return this . Matchers ; }
Code	{ return this . Matchers ; }
Distance : 12

106
Tree	{ return reportMatcher ( reportMatcher ) ; }
Code	{ return reportMatcher ( reportMatcher ) ; }
Distance : 10

107
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . anyList = InstanceOf ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . anyList = InstanceOf ; }
Distance : 12

108
Tree	{ reportMatcher ( reportMatcher ) ; return true ; }
Code	{ reportMatcher ( reportMatcher ) ; return true ; }
Distance : 11

109
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

110
Tree	{ super ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; }
Distance : 12

111
Tree	{ return this . reportMatcher ; }
Code	{ return this . reportMatcher ; }
Distance : 12

112
Tree	{ super ( InstanceOf ) ; anyList ( Any.ANY ) ; }
Code	{ super ( InstanceOf ) ; anyList ( Any.ANY ) ; }
Distance : 11

113
Tree	{ super ( Any.ANY ) ; anyList ( Any.ANY ) . returnList () ; }
Code	{ super ( Any.ANY ) ; anyList ( Any.ANY ) . returnList () ; }
Distance : 9

114
Tree	{ return ( reportMatcher ) anyList () ; }
Code	{ return ( reportMatcher ) anyList () ; }
Distance : 10

115
Tree	{ super ( Any.ANY ) ; anyList ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; anyList ( Any.ANY ) ; }
Distance : 12

116
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; reportMatcher = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; reportMatcher = false ; }
Distance : 11

117
Tree	{ reportMatcher ( Any.ANY ) ; anyList = Any.ANY . anyList () ; }
Code	{ reportMatcher ( Any.ANY ) ; anyList = Any.ANY . anyList () ; }
Distance : 10

118
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

119
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

120
Tree	{ super ( reportMatcher ) ; anyList ( Any.ANY ) ; super }
Code	{ super ( reportMatcher ) ; anyList ( Any.ANY ) ; super }
Distance : 13

121
Tree	{ return reportMatcher ( Any.ANY ) . < Matchers > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Matchers > reportMatcher () ; }
Distance : 9

122
Tree	{ InstanceOf ( Any.ANY ) ; return false ; }
Code	{ InstanceOf ( Any.ANY ) ; return false ; }
Distance : 11

123
Tree	{ return reportMatcher ( Any.ANY ) . < Any.ANY > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Any.ANY > reportMatcher () ; }
Distance : 9

124
Tree	{ super ( reportMatcher ) ; returnList ( reportMatcher ) . returnList () ; }
Code	{ super ( reportMatcher ) ; returnList ( reportMatcher ) . returnList () ; }
Distance : 9

125
Tree	{ reportMatcher ( Any.ANY ) . anyList () ; reportMatcher = false ; }
Code	{ reportMatcher ( Any.ANY ) . anyList () ; reportMatcher = false ; }
Distance : 11

126
Tree	{ reportMatcher ( Any.ANY ) ; anyList = InstanceOf . returnList () ; }
Code	{ reportMatcher ( Any.ANY ) ; anyList = InstanceOf . returnList () ; }
Distance : 9

127
Tree	{ return reportMatcher ( Any.ANY ) . < returnList > anyList () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnList > anyList () ; }
Distance : 9

128
Tree	{ return ( InstanceOf ) anyList ( Any.ANY ) . returnList () ; }
Code	{ return ( InstanceOf ) anyList ( Any.ANY ) . returnList () ; }
Distance : 7

129
Tree	{ InstanceOf ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ InstanceOf ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

130
Tree	{ reportMatcher ( Any.ANY ) ; Any.ANY = Any.ANY . returnList () ; }
Code	{ reportMatcher ( Any.ANY ) ; Any.ANY = Any.ANY . returnList () ; }
Distance : 9

131
Tree	{ super ( InstanceOf ) ; returnList ( Any.ANY ) . returnList () ; }
Code	{ super ( InstanceOf ) ; returnList ( Any.ANY ) . returnList () ; }
Distance : 8

132
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

133
Tree	{ reportMatcher ( Any.ANY ) ; this . Matchers = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Matchers = Any.ANY ; }
Distance : 11

134
Tree	{ super ( reportMatcher ) ; anyList ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; anyList ( Any.ANY ) ; }
Distance : 12

135
Tree	{ returnList ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnList ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

136
Tree	{ reportMatcher ( Any.ANY ) ; InstanceOf = Any.ANY . returnList () ; }
Code	{ reportMatcher ( Any.ANY ) ; InstanceOf = Any.ANY . returnList () ; }
Distance : 9

137
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 14

138
Tree	{ super ( reportMatcher ) ; } Math
Code	{ super ( reportMatcher ) ; } Math
Distance : 13

139
Tree	{ reportMatcher ( Any.ANY ) . anyList () ; returnList = false ; }
Code	{ reportMatcher ( Any.ANY ) . anyList () ; returnList = false ; }
Distance : 11

140
Tree	{ return ( Any.ANY ) Any.ANY () ; }
Code	{ return ( Any.ANY ) Any.ANY () ; }
Distance : 10

141
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

142
Tree	{ return ( InstanceOf ) anyList ( Any.ANY ) ; }
Code	{ return ( InstanceOf ) anyList ( Any.ANY ) ; }
Distance : 10

143
Tree	{ reportMatcher ( Any.ANY ) ; this . anyList = InstanceOf ; }
Code	{ reportMatcher ( Any.ANY ) ; this . anyList = InstanceOf ; }
Distance : 11

144
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

145
Tree	{ super ( reportMatcher ) ; anyList ( Any.ANY ) . returnList () ; }
Code	{ super ( reportMatcher ) ; anyList ( Any.ANY ) . returnList () ; }
Distance : 9

146
Tree	{ super ( reportMatcher ) ; returnList ( Any.ANY ) . anyList () ; }
Code	{ super ( reportMatcher ) ; returnList ( Any.ANY ) . anyList () ; }
Distance : 10

147
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; InstanceOf = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; InstanceOf = false ; }
Distance : 11

148
Tree	{ return reportMatcher ( InstanceOf ) ; }
Code	{ return reportMatcher ( InstanceOf ) ; }
Distance : 9

149
Tree	{ super ( reportMatcher ) ; anyList ( reportMatcher ) . returnList () ; }
Code	{ super ( reportMatcher ) ; anyList ( reportMatcher ) . returnList () ; }
Distance : 9

150
Tree	{ super ( reportMatcher ) ; } i
Code	{ super ( reportMatcher ) ; } i
Distance : 13

151
Tree	{ super ( List ) ; }
Code	{ super ( List ) ; }
Distance : 11

152
Tree	{ return ( reportMatcher ) reportMatcher () ; }
Code	{ return ( reportMatcher ) reportMatcher () ; }
Distance : 10

153
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; Matchers = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; Matchers = false ; }
Distance : 11

154
Tree	{ reportMatcher ( Any.ANY ) . anyList () ; Matchers = false ; }
Code	{ reportMatcher ( Any.ANY ) . anyList () ; Matchers = false ; }
Distance : 11

155
Tree	{ super ( returnList ) ; }
Code	{ super ( returnList ) ; }
Distance : 12

156
Tree	{ reportMatcher ( reportMatcher ) ; return null ; }
Code	{ reportMatcher ( reportMatcher ) ; return null ; }
Distance : 11

157
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . InstanceOf = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . InstanceOf = reportMatcher ; }
Distance : 12

158
Tree	{ return ( Any.ANY ) returnList ( Any.ANY ) . returnList () ; }
Code	{ return ( Any.ANY ) returnList ( Any.ANY ) . returnList () ; }
Distance : 8

159
Tree	{ return ( reportMatcher ) returnList ( Any.ANY ) . anyList () ; }
Code	{ return ( reportMatcher ) returnList ( Any.ANY ) . anyList () ; }
Distance : 9

160
Tree	{ return ( InstanceOf ) returnList ( Any.ANY ) . returnList () ; }
Code	{ return ( InstanceOf ) returnList ( Any.ANY ) . returnList () ; }
Distance : 7

161
Tree	{ reportMatcher ( Any.ANY ) ; this . anyList = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . anyList = Any.ANY ; }
Distance : 11

162
Tree	{ super ( reportMatcher ) ; } options
Code	{ super ( reportMatcher ) ; } options
Distance : 13

163
Tree	{ super ( reportMatcher ) ; returnList ( reportMatcher ) ; super }
Code	{ super ( reportMatcher ) ; returnList ( reportMatcher ) ; super }
Distance : 13

164
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 14

165
Tree	{ super ( InstanceOf ) ; returnList ( Any.ANY ) ; super }
Code	{ super ( InstanceOf ) ; returnList ( Any.ANY ) ; super }
Distance : 12

166
Tree	{ return reportMatcher ( Any.ANY ) . InstanceOf () ; }
Code	{ return reportMatcher ( Any.ANY ) . InstanceOf () ; }
Distance : 8

167
Tree	{ return reportMatcher ( Any.ANY ) . < returnList > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnList > reportMatcher () ; }
Distance : 9

168
Tree	{ return this . reportMatcher ; } i
Code	{ return this . reportMatcher ; } i
Distance : 13

169
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 14

170
Tree	{ return reportMatcher ( Any.ANY ) . Matchers () ; }
Code	{ return reportMatcher ( Any.ANY ) . Matchers () ; }
Distance : 8

171
Tree	{ super ( InstanceOf ) ; anyList ( Any.ANY ) . returnList () ; }
Code	{ super ( InstanceOf ) ; anyList ( Any.ANY ) . returnList () ; }
Distance : 8

172
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

173
Tree	{ reportMatcher ( Any.ANY ) ; this . returnList = InstanceOf ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnList = InstanceOf ; }
Distance : 11

174
Tree	{ reportMatcher ( Any.ANY ) ; anyList = Any.ANY . returnList () ; }
Code	{ reportMatcher ( Any.ANY ) ; anyList = Any.ANY . returnList () ; }
Distance : 9

175
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 14

176
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

177
Tree	{ super ( Matchers ) ; }
Code	{ super ( Matchers ) ; }
Distance : 12

178
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

179
Tree	{ InstanceOf ( Any.ANY ) ; return null ; }
Code	{ InstanceOf ( Any.ANY ) ; return null ; }
Distance : 11

180
Tree	{ super ( Any.ANY ) ; returnList ( Any.ANY ) . returnList () ; }
Code	{ super ( Any.ANY ) ; returnList ( Any.ANY ) . returnList () ; }
Distance : 9

181
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

182
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

183
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

184
Tree	{ return ( reportMatcher ) returnList () ; }
Code	{ return ( reportMatcher ) returnList () ; }
Distance : 9

185
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

186
Tree	{ reportMatcher ( Any.ANY ) . anyList () ; this . anyList = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . anyList () ; this . anyList = reportMatcher ; }
Distance : 12

187
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

188
Tree	{ return reportMatcher ( anyList ) ; }
Code	{ return reportMatcher ( anyList ) ; }
Distance : 10

189
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

190
Tree	{ return reportMatcher ( Any.ANY ) . < anyList > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < anyList > reportMatcher () ; }
Distance : 9

191
Tree	{ return this . reportMatcher ; } Math
Code	{ return this . reportMatcher ; } Math
Distance : 13

192
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . returnList = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . returnList = Any.ANY ; }
Distance : 11

193
Tree	{ super ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; }
Distance : 12

194
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Distance : 11

195
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

196
Tree	{ reportMatcher ( Any.ANY ) ; this . InstanceOf = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . InstanceOf = Any.ANY ; }
Distance : 11

197
Tree	{ return this . reportMatcher ; } options
Code	{ return this . reportMatcher ; } options
Distance : 13

198
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

199
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

========================================================================


========================================================================
Example Number: 95
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnString () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( String . class ) ) . returnString () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnString}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=String})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnString}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super ( Any.ANY ) ; anyString ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; anyString ( Any.ANY ) ; }
Distance : 12

1
Tree	{ super ( Matchers ) ; }
Code	{ super ( Matchers ) ; }
Distance : 12

2
Tree	{ super ( String ) ; Matchers ( Any.ANY ) ; }
Code	{ super ( String ) ; Matchers ( Any.ANY ) ; }
Distance : 12

3
Tree	{ return ( reportMatcher ) anyString ( Any.ANY ) . anyString () ; }
Code	{ return ( reportMatcher ) anyString ( Any.ANY ) . anyString () ; }
Distance : 9

4
Tree	{ return Any.ANY ( Any.ANY ) . anyString () ; }
Code	{ return Any.ANY ( Any.ANY ) . anyString () ; }
Distance : 9

5
Tree	{ return reportMatcher ( Any.ANY ) . < returnString > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnString > reportMatcher () ; }
Distance : 9

6
Tree	{ reportMatcher ( Any.ANY ) ; this . anyString = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) ; this . anyString = reportMatcher ; }
Distance : 11

7
Tree	{ super ( reportMatcher ) ; Matchers ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; Matchers ( reportMatcher ) ; }
Distance : 12

8
Tree	{ return reportMatcher ( InstanceOf ) ; }
Code	{ return reportMatcher ( InstanceOf ) ; }
Distance : 9

9
Tree	{ reportMatcher ( returnString ) ; return false ; }
Code	{ reportMatcher ( returnString ) ; return false ; }
Distance : 11

10
Tree	{ super ( InstanceOf ) ; Matchers ( Any.ANY ) ; }
Code	{ super ( InstanceOf ) ; Matchers ( Any.ANY ) ; }
Distance : 11

11
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

12
Tree	{ reportMatcher ( Any.ANY ) ; anyString = Any.ANY . Matchers () ; }
Code	{ reportMatcher ( Any.ANY ) ; anyString = Any.ANY . Matchers () ; }
Distance : 10

13
Tree	{ reportMatcher ( Any.ANY ) ; this . anyString = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . anyString = Any.ANY ; }
Distance : 11

14
Tree	{ return reportMatcher ( reportMatcher ) . anyString () ; }
Code	{ return reportMatcher ( reportMatcher ) . anyString () ; }
Distance : 8

15
Tree	{ reportMatcher ( InstanceOf ) ; return null ; }
Code	{ reportMatcher ( InstanceOf ) ; return null ; }
Distance : 10

16
Tree	{ return reportMatcher ( Any.ANY ) . Matchers () ; }
Code	{ return reportMatcher ( Any.ANY ) . Matchers () ; }
Distance : 8

17
Tree	{ return this . Any.ANY ; }
Code	{ return this . Any.ANY ; }
Distance : 12

18
Tree	{ super ( reportMatcher ) ; anyString ( Any.ANY ) ; MINUTE_OF_DAY_TYPE }
Code	{ super ( reportMatcher ) ; anyString ( Any.ANY ) ; MINUTE_OF_DAY_TYPE }
Distance : 13

19
Tree	{ super ( InstanceOf ) ; }
Code	{ super ( InstanceOf ) ; }
Distance : 11

20
Tree	{ Any.ANY ( Any.ANY ) ; return null ; }
Code	{ Any.ANY ( Any.ANY ) ; return null ; }
Distance : 12

21
Tree	{ super ( String ) ; }
Code	{ super ( String ) ; }
Distance : 11

22
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

23
Tree	{ reportMatcher ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Distance : 11

24
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

25
Tree	{ super ( reportMatcher ) ; anyString ( Any.ANY ) . anyString () ; }
Code	{ super ( reportMatcher ) ; anyString ( Any.ANY ) . anyString () ; }
Distance : 10

26
Tree	{ super ( reportMatcher ) ; anyString ( Any.ANY ) ; isAssertionCall }
Code	{ super ( reportMatcher ) ; anyString ( Any.ANY ) ; isAssertionCall }
Distance : 13

27
Tree	{ reportMatcher ( returnString ) ; return null ; }
Code	{ reportMatcher ( returnString ) ; return null ; }
Distance : 11

28
Tree	{ String ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ String ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

29
Tree	{ Any.ANY ( Any.ANY ) ; return false ; }
Code	{ Any.ANY ( Any.ANY ) ; return false ; }
Distance : 12

30
Tree	{ return reportMatcher ( InstanceOf ) . anyString () ; }
Code	{ return reportMatcher ( InstanceOf ) . anyString () ; }
Distance : 7

31
Tree	{ reportMatcher ( InstanceOf ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( InstanceOf ) ; return NUMBER_CONSTANT ; }
Distance : 10

32
Tree	{ super ( Any.ANY ) ; Matchers ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; Matchers ( Any.ANY ) ; }
Distance : 12

33
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

34
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

35
Tree	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) ; }
Distance : 11

36
Tree	{ reportMatcher ( Any.ANY ) ; this . Matchers = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Matchers = Any.ANY ; }
Distance : 11

37
Tree	{ String ( Any.ANY ) ; return false ; }
Code	{ String ( Any.ANY ) ; return false ; }
Distance : 12

38
Tree	{ super ( reportMatcher ) ; anyString ( Any.ANY ) ; toReturn }
Code	{ super ( reportMatcher ) ; anyString ( Any.ANY ) ; toReturn }
Distance : 13

39
Tree	{ return reportMatcher ( Any.ANY ) . < Matchers > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Matchers > reportMatcher () ; }
Distance : 9

40
Tree	{ return ( Any.ANY ) Matchers ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) Matchers ( Any.ANY ) ; }
Distance : 11

41
Tree	{ reportMatcher ( Any.ANY ) . anyString () ; this . Matchers = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . anyString () ; this . Matchers = reportMatcher ; }
Distance : 12

42
Tree	{ return reportMatcher ( Any.ANY ) . < Matchers > returnString () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Matchers > returnString () ; }
Distance : 8

43
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

44
Tree	{ reportMatcher ( String ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( String ) ; return NUMBER_CONSTANT ; }
Distance : 10

45
Tree	{ return ( reportMatcher ) Matchers ( Any.ANY ) . anyString () ; }
Code	{ return ( reportMatcher ) Matchers ( Any.ANY ) . anyString () ; }
Distance : 9

46
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

47
Tree	{ super ( InstanceOf ) ; anyString ( Any.ANY ) . anyString () ; }
Code	{ super ( InstanceOf ) ; anyString ( Any.ANY ) . anyString () ; }
Distance : 9

48
Tree	{ reportMatcher ( Any.ANY ) ; Matchers = reportMatcher . anyString () ; }
Code	{ reportMatcher ( Any.ANY ) ; Matchers = reportMatcher . anyString () ; }
Distance : 10

49
Tree	{ return ( reportMatcher ) returnString () ; }
Code	{ return ( reportMatcher ) returnString () ; }
Distance : 9

50
Tree	{ reportMatcher ( InstanceOf ) . anyString () ; Matchers = false ; }
Code	{ reportMatcher ( InstanceOf ) . anyString () ; Matchers = false ; }
Distance : 10

51
Tree	{ super ( reportMatcher ) ; anyString ( Any.ANY ) . Matchers () ; }
Code	{ super ( reportMatcher ) ; anyString ( Any.ANY ) . Matchers () ; }
Distance : 10

52
Tree	{ return ( reportMatcher ) anyString ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) anyString ( Any.ANY ) ; }
Distance : 11

53
Tree	{ super ( Any.ANY ) ; anyString ( Any.ANY ) . Matchers () ; }
Code	{ super ( Any.ANY ) ; anyString ( Any.ANY ) . Matchers () ; }
Distance : 10

54
Tree	{ super ( reportMatcher ) ; anyString ( reportMatcher ) . anyString () ; }
Code	{ super ( reportMatcher ) ; anyString ( reportMatcher ) . anyString () ; }
Distance : 10

55
Tree	{ reportMatcher ( reportMatcher ) . Matchers () ; Matchers = false ; }
Code	{ reportMatcher ( reportMatcher ) . Matchers () ; Matchers = false ; }
Distance : 11

56
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; this . Matchers = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; this . Matchers = reportMatcher ; }
Distance : 12

57
Tree	{ reportMatcher ( Any.ANY ) . anyString () ; returnString = false ; }
Code	{ reportMatcher ( Any.ANY ) . anyString () ; returnString = false ; }
Distance : 11

58
Tree	{ return ( String ) anyString ( Any.ANY ) . anyString () ; }
Code	{ return ( String ) anyString ( Any.ANY ) . anyString () ; }
Distance : 9

59
Tree	{ String ( Any.ANY ) ; return null ; }
Code	{ String ( Any.ANY ) ; return null ; }
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) . anyString () ; this . Matchers = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . anyString () ; this . Matchers = Any.ANY ; }
Distance : 12

61
Tree	{ return ( InstanceOf ) anyString ( Any.ANY ) . anyString () ; }
Code	{ return ( InstanceOf ) anyString ( Any.ANY ) . anyString () ; }
Distance : 8

62
Tree	{ reportMatcher ( Any.ANY ) ; anyString = reportMatcher . Matchers () ; }
Code	{ reportMatcher ( Any.ANY ) ; anyString = reportMatcher . Matchers () ; }
Distance : 10

63
Tree	{ reportMatcher ( Any.ANY ) ; this . Matchers = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Matchers = reportMatcher ; }
Distance : 11

64
Tree	{ super ( reportMatcher ) ; anyString ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; anyString ( Any.ANY ) ; }
Distance : 12

65
Tree	{ return reportMatcher ( reportMatcher ) . Matchers () ; }
Code	{ return reportMatcher ( reportMatcher ) . Matchers () ; }
Distance : 8

66
Tree	{ return this . anyString ; }
Code	{ return this . anyString ; }
Distance : 12

67
Tree	{ return String ( Any.ANY ) ; }
Code	{ return String ( Any.ANY ) ; }
Distance : 11

68
Tree	{ reportMatcher ( Any.ANY ) . Matchers () ; this . Matchers = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . Matchers () ; this . Matchers = reportMatcher ; }
Distance : 12

69
Tree	{ reportMatcher ( reportMatcher ) ; return false ; }
Code	{ reportMatcher ( reportMatcher ) ; return false ; }
Distance : 11

70
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

71
Tree	{ reportMatcher ( Any.ANY ) . anyString () ; this . anyString = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . anyString () ; this . anyString = reportMatcher ; }
Distance : 12

72
Tree	{ return ( reportMatcher ) returnString ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) returnString ( Any.ANY ) ; }
Distance : 11

73
Tree	{ return this . InstanceOf ; }
Code	{ return this . InstanceOf ; }
Distance : 12

74
Tree	{ return ( reportMatcher ) Matchers () ; }
Code	{ return ( reportMatcher ) Matchers () ; }
Distance : 10

75
Tree	{ InstanceOf ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ InstanceOf ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

76
Tree	{ reportMatcher ( Any.ANY ) . anyString () ; Matchers = false ; }
Code	{ reportMatcher ( Any.ANY ) . anyString () ; Matchers = false ; }
Distance : 11

77
Tree	{ reportMatcher ( Any.ANY ) ; Matchers = Any.ANY . Matchers () ; }
Code	{ reportMatcher ( Any.ANY ) ; Matchers = Any.ANY . Matchers () ; }
Distance : 10

78
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

79
Tree	{ reportMatcher ( Any.ANY ) ; this . Matchers = InstanceOf ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Matchers = InstanceOf ; }
Distance : 11

80
Tree	{ InstanceOf ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Code	{ InstanceOf ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Distance : 11

81
Tree	{ return ( reportMatcher ) Matchers ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) Matchers ( Any.ANY ) ; }
Distance : 11

82
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

83
Tree	{ return reportMatcher ( Any.ANY ) . < Any.ANY > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Any.ANY > reportMatcher () ; }
Distance : 9

84
Tree	{ reportMatcher ( Any.ANY ) . Matchers () ; this . anyString = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . Matchers () ; this . anyString = reportMatcher ; }
Distance : 12

85
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

86
Tree	{ return Any.ANY ( Any.ANY ) ; }
Code	{ return Any.ANY ( Any.ANY ) ; }
Distance : 11

87
Tree	{ reportMatcher ( Any.ANY ) . Matchers () ; this . Matchers = InstanceOf ; }
Code	{ reportMatcher ( Any.ANY ) . Matchers () ; this . Matchers = InstanceOf ; }
Distance : 12

88
Tree	{ return ( reportMatcher ) reportMatcher () ; }
Code	{ return ( reportMatcher ) reportMatcher () ; }
Distance : 10

89
Tree	{ return reportMatcher ( reportMatcher ) ; }
Code	{ return reportMatcher ( reportMatcher ) ; }
Distance : 10

90
Tree	{ reportMatcher ( Any.ANY ) ; anyString = reportMatcher . anyString () ; }
Code	{ reportMatcher ( Any.ANY ) ; anyString = reportMatcher . anyString () ; }
Distance : 10

91
Tree	{ reportMatcher ( Any.ANY ) . anyString () ; this . Matchers = InstanceOf ; }
Code	{ reportMatcher ( Any.ANY ) . anyString () ; this . Matchers = InstanceOf ; }
Distance : 12

92
Tree	{ super ( reportMatcher ) ; anyString ( Any.ANY ) ; return; }
Code	{ super ( reportMatcher ) ; anyString ( Any.ANY ) ; return; }
Distance : 13

93
Tree	{ return ( Any.ANY ) anyString ( Any.ANY ) . Matchers () ; }
Code	{ return ( Any.ANY ) anyString ( Any.ANY ) . Matchers () ; }
Distance : 9

94
Tree	{ reportMatcher ( String ) ; return false ; }
Code	{ reportMatcher ( String ) ; return false ; }
Distance : 10

95
Tree	{ return this . returnString ; }
Code	{ return this . returnString ; }
Distance : 11

96
Tree	{ return ( Any.ANY ) anyString ( Any.ANY ) . anyString () ; }
Code	{ return ( Any.ANY ) anyString ( Any.ANY ) . anyString () ; }
Distance : 9

97
Tree	{ reportMatcher ( returnString ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( returnString ) ; return NUMBER_CONSTANT ; }
Distance : 11

98
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

99
Tree	{ reportMatcher ( Any.ANY ) . anyString () ; this . Matchers = returnString ; }
Code	{ reportMatcher ( Any.ANY ) . anyString () ; this . Matchers = returnString ; }
Distance : 12

100
Tree	{ super ( Any.ANY ) ; anyString ( Any.ANY ) . anyString () ; }
Code	{ super ( Any.ANY ) ; anyString ( Any.ANY ) . anyString () ; }
Distance : 10

101
Tree	{ reportMatcher ( reportMatcher ) ; this . Matchers = Any.ANY ; }
Code	{ reportMatcher ( reportMatcher ) ; this . Matchers = Any.ANY ; }
Distance : 11

102
Tree	{ super ( String ) ; anyString ( Any.ANY ) . anyString () ; }
Code	{ super ( String ) ; anyString ( Any.ANY ) . anyString () ; }
Distance : 10

103
Tree	{ super ( reportMatcher ) ; } Math
Code	{ super ( reportMatcher ) ; } Math
Distance : 13

104
Tree	{ return reportMatcher ( Any.ANY ) . < anyString > Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . < anyString > Any.ANY () ; }
Distance : 9

105
Tree	{ return ( String ) anyString () ; }
Code	{ return ( String ) anyString () ; }
Distance : 9

106
Tree	{ return ( reportMatcher ) Any.ANY () ; }
Code	{ return ( reportMatcher ) Any.ANY () ; }
Distance : 10

107
Tree	{ return reportMatcher ( Any.ANY ) . anyString () ; }
Code	{ return reportMatcher ( Any.ANY ) . anyString () ; }
Distance : 8

108
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

109
Tree	{ return ( reportMatcher ) anyString ( Any.ANY ) . Matchers () ; }
Code	{ return ( reportMatcher ) anyString ( Any.ANY ) . Matchers () ; }
Distance : 9

110
Tree	{ reportMatcher ( Any.ANY ) ; Matchers = Any.ANY . anyString () ; }
Code	{ reportMatcher ( Any.ANY ) ; Matchers = Any.ANY . anyString () ; }
Distance : 10

111
Tree	{ return ( Any.ANY ) anyString ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) anyString ( Any.ANY ) ; }
Distance : 11

112
Tree	{ return reportMatcher ( reportMatcher ) . returnString () ; }
Code	{ return reportMatcher ( reportMatcher ) . returnString () ; }
Distance : 7

113
Tree	{ return reportMatcher ( Any.ANY ) . < Matchers > InstanceOf () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Matchers > InstanceOf () ; }
Distance : 9

114
Tree	{ Any.ANY ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ Any.ANY ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

115
Tree	{ return this . reportMatcher ; }
Code	{ return this . reportMatcher ; }
Distance : 12

116
Tree	{ reportMatcher ( Any.ANY ) ; this . returnString = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnString = Any.ANY ; }
Distance : 11

117
Tree	{ reportMatcher ( Any.ANY ) . Matchers () ; Matchers = false ; }
Code	{ reportMatcher ( Any.ANY ) . Matchers () ; Matchers = false ; }
Distance : 11

118
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

119
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; Matchers = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; Matchers = false ; }
Distance : 11

120
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

121
Tree	{ reportMatcher ( Any.ANY ) . anyString () ; anyString = false ; }
Code	{ reportMatcher ( Any.ANY ) . anyString () ; anyString = false ; }
Distance : 11

122
Tree	{ return ( String ) anyString ( Any.ANY ) ; }
Code	{ return ( String ) anyString ( Any.ANY ) ; }
Distance : 10

123
Tree	{ super ( returnString ) ; }
Code	{ super ( returnString ) ; }
Distance : 12

124
Tree	{ super ( reportMatcher ) ; } i
Code	{ super ( reportMatcher ) ; } i
Distance : 13

125
Tree	{ super ( reportMatcher ) ; Matchers ( Any.ANY ) . anyString () ; }
Code	{ super ( reportMatcher ) ; Matchers ( Any.ANY ) . anyString () ; }
Distance : 10

126
Tree	{ reportMatcher ( Any.ANY ) . Matchers () ; anyString = false ; }
Code	{ reportMatcher ( Any.ANY ) . Matchers () ; anyString = false ; }
Distance : 11

127
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

128
Tree	{ return returnString ( Any.ANY ) ; }
Code	{ return returnString ( Any.ANY ) ; }
Distance : 11

129
Tree	{ InstanceOf ( Any.ANY ) ; return false ; }
Code	{ InstanceOf ( Any.ANY ) ; return false ; }
Distance : 11

130
Tree	{ return ( Any.ANY ) Matchers () ; }
Code	{ return ( Any.ANY ) Matchers () ; }
Distance : 10

131
Tree	{ super ( reportMatcher ) ; anyString ( Any.ANY ) ; toAnswer }
Code	{ super ( reportMatcher ) ; anyString ( Any.ANY ) ; toAnswer }
Distance : 13

132
Tree	{ super ( reportMatcher ) ; Matchers ( Any.ANY ) ; return; }
Code	{ super ( reportMatcher ) ; Matchers ( Any.ANY ) ; return; }
Distance : 13

133
Tree	{ return reportMatcher ( Any.ANY ) . < Matchers > Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Matchers > Any.ANY () ; }
Distance : 9

134
Tree	{ super ( reportMatcher ) ; anyString ( Any.ANY ) ; throw }
Code	{ super ( reportMatcher ) ; anyString ( Any.ANY ) ; throw }
Distance : 13

135
Tree	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = Any.ANY ; }
Distance : 11

136
Tree	{ reportMatcher ( Any.ANY ) ; this . Matchers = returnString ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Matchers = returnString ; }
Distance : 10

137
Tree	{ super ( reportMatcher ) ; anyString ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; anyString ( reportMatcher ) ; }
Distance : 12

138
Tree	{ return ( Any.ANY ) anyString () ; }
Code	{ return ( Any.ANY ) anyString () ; }
Distance : 10

139
Tree	{ reportMatcher ( InstanceOf ) ; return false ; }
Code	{ reportMatcher ( InstanceOf ) ; return false ; }
Distance : 10

140
Tree	{ super ( anyString ) ; }
Code	{ super ( anyString ) ; }
Distance : 12

141
Tree	{ reportMatcher ( reportMatcher ) ; return true ; }
Code	{ reportMatcher ( reportMatcher ) ; return true ; }
Distance : 11

142
Tree	{ return ( String ) Matchers () ; }
Code	{ return ( String ) Matchers () ; }
Distance : 9

143
Tree	{ return ( reportMatcher ) returnString ( Any.ANY ) . anyString () ; }
Code	{ return ( reportMatcher ) returnString ( Any.ANY ) . anyString () ; }
Distance : 9

144
Tree	{ super ( reportMatcher ) ; anyString ( Any.ANY ) . returnString () ; }
Code	{ super ( reportMatcher ) ; anyString ( Any.ANY ) . returnString () ; }
Distance : 9

145
Tree	{ super ( reportMatcher ) ; Matchers ( Any.ANY ) ; throw }
Code	{ super ( reportMatcher ) ; Matchers ( Any.ANY ) ; throw }
Distance : 13

146
Tree	{ reportMatcher ( InstanceOf ) ; this . Matchers = Any.ANY ; }
Code	{ reportMatcher ( InstanceOf ) ; this . Matchers = Any.ANY ; }
Distance : 11

147
Tree	{ super ( reportMatcher ) ; anyString ( Any.ANY ) ; Answers.RETURNS_DEFAULTS }
Code	{ super ( reportMatcher ) ; anyString ( Any.ANY ) ; Answers.RETURNS_DEFAULTS }
Distance : 13

148
Tree	{ return reportMatcher ( reportMatcher ) . < Matchers > reportMatcher () ; }
Code	{ return reportMatcher ( reportMatcher ) . < Matchers > reportMatcher () ; }
Distance : 9

149
Tree	{ super ( reportMatcher ) ; } options
Code	{ super ( reportMatcher ) ; } options
Distance : 13

150
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 14

151
Tree	{ super ( reportMatcher ) ; anyString ( Any.ANY ) ; super }
Code	{ super ( reportMatcher ) ; anyString ( Any.ANY ) ; super }
Distance : 13

152
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 14

153
Tree	{ reportMatcher ( Any.ANY ) ; anyString = Any.ANY . anyString () ; }
Code	{ reportMatcher ( Any.ANY ) ; anyString = Any.ANY . anyString () ; }
Distance : 10

154
Tree	{ return ( reportMatcher ) anyString ( Any.ANY ) . returnString () ; }
Code	{ return ( reportMatcher ) anyString ( Any.ANY ) . returnString () ; }
Distance : 8

155
Tree	{ super ( String ) ; anyString ( Any.ANY ) ; }
Code	{ super ( String ) ; anyString ( Any.ANY ) ; }
Distance : 12

156
Tree	{ reportMatcher ( reportMatcher ) ; return null ; }
Code	{ reportMatcher ( reportMatcher ) ; return null ; }
Distance : 11

157
Tree	{ return ( InstanceOf ) anyString ( Any.ANY ) ; }
Code	{ return ( InstanceOf ) anyString ( Any.ANY ) ; }
Distance : 10

158
Tree	{ return reportMatcher ( String ) ; }
Code	{ return reportMatcher ( String ) ; }
Distance : 9

159
Tree	{ return ( InstanceOf ) anyString () ; }
Code	{ return ( InstanceOf ) anyString () ; }
Distance : 9

160
Tree	{ super ( reportMatcher ) ; Matchers ( Any.ANY ) . Matchers () ; }
Code	{ super ( reportMatcher ) ; Matchers ( Any.ANY ) . Matchers () ; }
Distance : 10

161
Tree	{ return anyString ( Any.ANY ) ; }
Code	{ return anyString ( Any.ANY ) ; }
Distance : 11

162
Tree	{ return reportMatcher ( returnString ) ; }
Code	{ return reportMatcher ( returnString ) ; }
Distance : 10

163
Tree	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Distance : 8

164
Tree	{ return ( reportMatcher ) anyString () ; }
Code	{ return ( reportMatcher ) anyString () ; }
Distance : 10

165
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 14

166
Tree	{ return reportMatcher ( Any.ANY ) . < String > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < String > reportMatcher () ; }
Distance : 9

167
Tree	{ reportMatcher ( Any.ANY ) ; Matchers = Any.ANY . returnString () ; }
Code	{ reportMatcher ( Any.ANY ) ; Matchers = Any.ANY . returnString () ; }
Distance : 9

168
Tree	{ return this . String ; }
Code	{ return this . String ; }
Distance : 12

169
Tree	{ return InstanceOf ( Any.ANY ) ; }
Code	{ return InstanceOf ( Any.ANY ) ; }
Distance : 10

170
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

171
Tree	{ return this . Matchers ; }
Code	{ return this . Matchers ; }
Distance : 12

172
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Distance : 11

173
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; anyString = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; anyString = false ; }
Distance : 11

174
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

175
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . anyString () ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . anyString () ; }
Distance : 9

176
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

177
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; }
Distance : 7

178
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

179
Tree	{ super ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; }
Distance : 12

180
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

181
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

182
Tree	{ InstanceOf ( Any.ANY ) ; return null ; }
Code	{ InstanceOf ( Any.ANY ) ; return null ; }
Distance : 11

183
Tree	{ return this . reportMatcher ; } options
Code	{ return this . reportMatcher ; } options
Distance : 13

184
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

185
Tree	{ reportMatcher ( reportMatcher ) . anyString () ; Matchers = false ; }
Code	{ reportMatcher ( reportMatcher ) . anyString () ; Matchers = false ; }
Distance : 11

186
Tree	{ returnString ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnString ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

187
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

188
Tree	{ return this . reportMatcher ; } i
Code	{ return this . reportMatcher ; } i
Distance : 13

189
Tree	{ reportMatcher ( Any.ANY ) . Matchers () ; this . Matchers = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . Matchers () ; this . Matchers = Any.ANY ; }
Distance : 12

190
Tree	{ return reportMatcher ( Any.ANY ) . < anyString > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < anyString > reportMatcher () ; }
Distance : 9

191
Tree	{ return this . reportMatcher ; } Math
Code	{ return this . reportMatcher ; } Math
Distance : 13

192
Tree	{ reportMatcher ( Any.ANY ) ; Matchers = InstanceOf . anyString () ; }
Code	{ reportMatcher ( Any.ANY ) ; Matchers = InstanceOf . anyString () ; }
Distance : 10

193
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 14

194
Tree	{ super ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; }
Distance : 12

195
Tree	{ super ( reportMatcher ) ; Matchers ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; Matchers ( Any.ANY ) ; }
Distance : 12

196
Tree	{ super ( InstanceOf ) ; anyString ( Any.ANY ) ; }
Code	{ super ( InstanceOf ) ; anyString ( Any.ANY ) ; }
Distance : 11

197
Tree	{ return ( reportMatcher ) anyString ( reportMatcher ) ; }
Code	{ return ( reportMatcher ) anyString ( reportMatcher ) ; }
Distance : 11

198
Tree	{ reportMatcher ( Any.ANY ) ; Matchers = reportMatcher . Matchers () ; }
Code	{ reportMatcher ( Any.ANY ) ; Matchers = reportMatcher . Matchers () ; }
Distance : 10

199
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

========================================================================


========================================================================
Example Number: 96
Parent Code is: 
{ return ( T ) anyObject () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (802{val=anyObject}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnNull}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	{ return ( T ) T ( Any.ANY ) ; }
Code	{ return ( T ) T ( Any.ANY ) ; }
Distance : 4

1
Tree	{ return ( T ) reportMatcher . reportMatcher ( T , ( T ) anyObject () ) ; }
Code	{ return ( T ) reportMatcher . reportMatcher ( T , ( T ) anyObject () ) ; }
Distance : 9

2
Tree	{ return ( T ) Any.ANY ( Any.ANY ) ; }
Code	{ return ( T ) Any.ANY ( Any.ANY ) ; }
Distance : 4

3
Tree	{ return Any.ANY ; }
Code	{ return Any.ANY ; }
Distance : 9

4
Tree	{ return ( T ) reportMatcher . Any.ANY ( T ) ; }
Code	{ return ( T ) reportMatcher . Any.ANY ( T ) ; }
Distance : 5

5
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . T () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . T () ; }
Distance : 1

6
Tree	{ return ( T ) T . T ( T , ( T ) anyObject () ) ; }
Code	{ return ( T ) T . T ( T , ( T ) anyObject () ) ; }
Distance : 10

7
Tree	{ return reportMatcher ; }
Code	{ return reportMatcher ; }
Distance : 9

8
Tree	{ return Any.ANY ; } options
Code	{ return Any.ANY ; } options
Distance : 10

9
Tree	{ return T . Any.ANY () ; }
Code	{ return T . Any.ANY () ; }
Distance : 7

10
Tree	{ return Any.ANY ; } i
Code	{ return Any.ANY ; } i
Distance : 10

11
Tree	{ return ( T ) reportMatcher ( T . T () ) ; }
Code	{ return ( T ) reportMatcher ( T . T () ) ; }
Distance : 4

12
Tree	{ return ( T ) T . returnNull () ; }
Code	{ return ( T ) T . returnNull () ; }
Distance : 4

13
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . anyObject ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . anyObject ( T ) ; }
Distance : 4

14
Tree	{ return reportMatcher ( T ) . < T > anyObject () ; }
Code	{ return reportMatcher ( T ) . < T > anyObject () ; }
Distance : 7

15
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . any () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . any () ; }
Distance : 1

16
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 11

17
Tree	{ return ( T ) reportMatcher . returnNull ( T ) ; }
Code	{ return ( T ) reportMatcher . returnNull ( T ) ; }
Distance : 6

18
Tree	{ return ( T ) T . reportMatcher ( T ) ; }
Code	{ return ( T ) T . reportMatcher ( T ) ; }
Distance : 6

19
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 10

20
Tree	{ return ( T ) anyObject ( T ) ; }
Code	{ return ( T ) anyObject ( T ) ; }
Distance : 5

21
Tree	{ return this . T ; }
Code	{ return this . T ; }
Distance : 9

22
Tree	{ return ( T ) anyObject ( Any.ANY ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) ; }
Distance : 4

23
Tree	{ return ( T ) T . T () ; }
Code	{ return ( T ) T . T () ; }
Distance : 5

24
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 4

25
Tree	{ return reportMatcher ( Any.ANY ) . anyObject () ; }
Code	{ return reportMatcher ( Any.ANY ) . anyObject () ; }
Distance : 4

26
Tree	{ return anyObject ( Any.ANY ) . returnNull () ; }
Code	{ return anyObject ( Any.ANY ) . returnNull () ; }
Distance : 4

27
Tree	{ return anyObject ( T ) . < T > returnNull () ; }
Code	{ return anyObject ( T ) . < T > returnNull () ; }
Distance : 6

28
Tree	{ return ( T ) T . reportMatcher () ; }
Code	{ return ( T ) T . reportMatcher () ; }
Distance : 5

29
Tree	{ return ( T ) reportMatcher . reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher . reportMatcher ( T ) ; }
Distance : 6

30
Tree	{ return ( T ) T . T ( T ) ; }
Code	{ return ( T ) T . T ( T ) ; }
Distance : 7

31
Tree	{ return anyObject ( Any.ANY ) . anyObject () ; }
Code	{ return anyObject ( Any.ANY ) . anyObject () ; }
Distance : 5

32
Tree	{ return anyObject ( T ) . < T > reportMatcher () ; }
Code	{ return anyObject ( T ) . < T > reportMatcher () ; }
Distance : 7

33
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 1

34
Tree	{ return Any.ANY ; } Math
Code	{ return Any.ANY ; } Math
Distance : 10

35
Tree	{ return reportMatcher ( Any.ANY ) . T () ; }
Code	{ return reportMatcher ( Any.ANY ) . T () ; }
Distance : 4

36
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 7

37
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 11

38
Tree	{ return anyObject ; }
Code	{ return anyObject ; }
Distance : 10

39
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( T ) ; }
Distance : 3

40
Tree	{ return ( T ) T . returnNull ( T ) ; }
Code	{ return ( T ) T . returnNull ( T ) ; }
Distance : 7

41
Tree	{ return ( T ) this . Any.ANY . reportMatcher () ; }
Code	{ return ( T ) this . Any.ANY . reportMatcher () ; }
Distance : 4

42
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . anyObject () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . anyObject () ; }
Distance : 1

43
Tree	{ return ( T ) Any.ANY () ; }
Code	{ return ( T ) Any.ANY () ; }
Distance : 5

44
Tree	{ return this . anyObject ; }
Code	{ return this . anyObject ; }
Distance : 9

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

46
Tree	{ return reportMatcher ; }
Code	{ return reportMatcher ; }
Distance : 9

47
Tree	{ return ( T ) anyObject ( reportMatcher ) ; }
Code	{ return ( T ) anyObject ( reportMatcher ) ; }
Distance : 5

48
Tree	{ return ( T ) T . Any.ANY ( T ) ; }
Code	{ return ( T ) T . Any.ANY ( T ) ; }
Distance : 6

49
Tree	{ return ( T ) T . returnNull ( T , ( T ) reportMatcher () ) ; }
Code	{ return ( T ) T . returnNull ( T , ( T ) reportMatcher () ) ; }
Distance : 10

50
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 10

51
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . Any.ANY ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . Any.ANY ( T ) ; }
Distance : 4

52
Tree	{ return ( T ) reportMatcher . anyObject ( T ) ; }
Code	{ return ( T ) reportMatcher . anyObject ( T ) ; }
Distance : 6

53
Tree	{ return ( T ) reportMatcher ( T . reportMatcher () ) ; }
Code	{ return ( T ) reportMatcher ( T . reportMatcher () ) ; }
Distance : 4

54
Tree	{ returnNull ( anyObject ) ; return null ; }
Code	{ returnNull ( anyObject ) ; return null ; }
Distance : 9

55
Tree	{ return ( T ) T . Any.ANY () ; }
Code	{ return ( T ) T . Any.ANY () ; }
Distance : 5

56
Tree	{ return ( T ) T . Any.ANY ( T , ( T ) reportMatcher () ) ; }
Code	{ return ( T ) T . Any.ANY ( T , ( T ) reportMatcher () ) ; }
Distance : 10

57
Tree	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Distance : 4

58
Tree	{ return ( T ) T . reportMatcher ( T , ( T ) reportMatcher () ) ; }
Code	{ return ( T ) T . reportMatcher ( T , ( T ) reportMatcher () ) ; }
Distance : 9

59
Tree	{ return ( T ) T . reportMatcher ( T , ( T ) anyObject () ) ; }
Code	{ return ( T ) T . reportMatcher ( T , ( T ) anyObject () ) ; }
Distance : 9

60
Tree	{ return ( T ) T () ; }
Code	{ return ( T ) T () ; }
Distance : 6

61
Tree	{ return ( T ) anyObject ( T ) ; }
Code	{ return ( T ) anyObject ( T ) ; }
Distance : 5

62
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 8

63
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 11

64
Tree	{ return ( T ) reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher ( T ) ; }
Distance : 4

65
Tree	{ return ( T ) returnNull ( T ) ; }
Code	{ return ( T ) returnNull ( T ) ; }
Distance : 5

66
Tree	{ return reportMatcher . Any.ANY () ; }
Code	{ return reportMatcher . Any.ANY () ; }
Distance : 7

67
Tree	{ return ( T ) T . anyObject () ; }
Code	{ return ( T ) T . anyObject () ; }
Distance : 5

68
Tree	{ return ( T ) returnNull ( Any.ANY ) ; }
Code	{ return ( T ) returnNull ( Any.ANY ) ; }
Distance : 4

69
Tree	{ return ( T ) reportMatcher ( anyObject ) ; }
Code	{ return ( T ) reportMatcher ( anyObject ) ; }
Distance : 4

70
Tree	{ return ( T ) reportMatcher ( T . Any.ANY () ) ; }
Code	{ return ( T ) reportMatcher ( T . Any.ANY () ) ; }
Distance : 4

71
Tree	{ return ( T ) anyObject ( Any.ANY ) . returnNull ( T ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . returnNull ( T ) ; }
Distance : 4

72
Tree	{ return ( T ) reportMatcher . anyObject () ; }
Code	{ return ( T ) reportMatcher . anyObject () ; }
Distance : 4

73
Tree	{ return ( T ) Any.ANY ( T ) ; }
Code	{ return ( T ) Any.ANY ( T ) ; }
Distance : 5

74
Tree	{ return ( T ) this . T . anyObject () ; }
Code	{ return ( T ) this . T . anyObject () ; }
Distance : 5

75
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
Distance : 0

76
Tree	{ return ( T ) reportMatcher ( reportMatcher ) ; }
Code	{ return ( T ) reportMatcher ( reportMatcher ) ; }
Distance : 4

77
Tree	{ return ( T ) reportMatcher () ; }
Code	{ return ( T ) reportMatcher () ; }
Distance : 5

78
Tree	{ return T ; }
Code	{ return T ; }
Distance : 9

79
Tree	{ return this . any ; }
Code	{ return this . any ; }
Distance : 9

80
Tree	{ return ( T ) reportMatcher . reportMatcher ( T , ( T ) reportMatcher () ) ; }
Code	{ return ( T ) reportMatcher . reportMatcher ( T , ( T ) reportMatcher () ) ; }
Distance : 9

81
Tree	{ return ( T ) reportMatcher . T ( T , ( T ) anyObject () ) ; }
Code	{ return ( T ) reportMatcher . T ( T , ( T ) anyObject () ) ; }
Distance : 9

82
Tree	{ return returnNull ; }
Code	{ return returnNull ; }
Distance : 9

83
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 11

84
Tree	{ return reportMatcher ( T ) . < T > reportMatcher () ; }
Code	{ return reportMatcher ( T ) . < T > reportMatcher () ; }
Distance : 7

85
Tree	{ return T . T () ; }
Code	{ return T . T () ; }
Distance : 7

86
Tree	{ return Any.ANY ( T ) . < T > returnNull () ; }
Code	{ return Any.ANY ( T ) . < T > returnNull () ; }
Distance : 6

87
Tree	{ return ( T ) this . T . returnNull () ; }
Code	{ return ( T ) this . T . returnNull () ; }
Distance : 4

88
Tree	{ return T () ; }
Code	{ return T () ; }
Distance : 8

89
Tree	{ return STRING_CONSTANT ; } Override
Code	{ return STRING_CONSTANT ; } Override
Distance : 11

90
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 4

91
Tree	{ return reportMatcher () ; } Math
Code	{ return reportMatcher () ; } Math
Distance : 9

92
Tree	{ return Any.ANY ; }
Code	{ return Any.ANY ; }
Distance : 9

93
Tree	{ return ( reportMatcher ) anyObject () ; }
Code	{ return ( reportMatcher ) anyObject () ; }
Distance : 6

94
Tree	{ returnNull ( Any.ANY ) ; return null ; }
Code	{ returnNull ( Any.ANY ) ; return null ; }
Distance : 8

95
Tree	{ return ( T ) reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher ( T ) ; }
Distance : 4

96
Tree	{ Any.ANY ( Any.ANY ) ; return null ; }
Code	{ Any.ANY ( Any.ANY ) ; return null ; }
Distance : 8

97
Tree	{ return ( T ) T . T ( T , ( T ) reportMatcher () ) ; }
Code	{ return ( T ) T . T ( T , ( T ) reportMatcher () ) ; }
Distance : 10

98
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 11

99
Tree	{ return ( T ) reportMatcher . returnNull () ; }
Code	{ return ( T ) reportMatcher . returnNull () ; }
Distance : 3

100
Tree	{ return ( T ) anyObject ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . reportMatcher () ; }
Distance : 2

101
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 3

102
Tree	{ return ( T ) anyObject ( T . Any.ANY () ) ; }
Code	{ return ( T ) anyObject ( T . Any.ANY () ) ; }
Distance : 5

103
Tree	{ return ( T ) reportMatcher ( T ) . reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher ( T ) . reportMatcher ( T ) ; }
Distance : 5

104
Tree	{ return T . returnNull () ; }
Code	{ return T . returnNull () ; }
Distance : 6

105
Tree	{ return ( T ) reportMatcher . Any.ANY () ; }
Code	{ return ( T ) reportMatcher . Any.ANY () ; }
Distance : 4

106
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . T ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . T ( T ) ; }
Distance : 4

107
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 11

108
Tree	{ return ( T ) T ( T ) ; }
Code	{ return ( T ) T ( T ) ; }
Distance : 5

109
Tree	{ return ( T ) reportMatcher . T () ; }
Code	{ return ( T ) reportMatcher . T () ; }
Distance : 4

110
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 3

111
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 11

112
Tree	{ return returnNull ; }
Code	{ return returnNull ; }
Distance : 9

113
Tree	{ return anyObject () ; }
Code	{ return anyObject () ; }
Distance : 9

114
Tree	{ return ( T ) returnNull () ; }
Code	{ return ( T ) returnNull () ; }
Distance : 5

115
Tree	{ return ( T ) reportMatcher . T ( T , ( T ) reportMatcher () ) ; }
Code	{ return ( T ) reportMatcher . T ( T , ( T ) reportMatcher () ) ; }
Distance : 9

116
Tree	{ return anyObject ; }
Code	{ return anyObject ; }
Distance : 10

117
Tree	{ return reportMatcher ( T ) . < reportMatcher > returnNull () ; }
Code	{ return reportMatcher ( T ) . < reportMatcher > returnNull () ; }
Distance : 6

118
Tree	{ return ( T ) anyObject ( T . returnNull () ) ; }
Code	{ return ( T ) anyObject ( T . returnNull () ) ; }
Distance : 4

119
Tree	{ return ( Any.ANY ) reportMatcher () ; }
Code	{ return ( Any.ANY ) reportMatcher () ; }
Distance : 6

120
Tree	{ return any ; }
Code	{ return any ; }
Distance : 10

121
Tree	{ anyObject ( Any.ANY ) ; return null ; }
Code	{ anyObject ( Any.ANY ) ; return null ; }
Distance : 8

122
Tree	{ return ( T ) reportMatcher . T ( T ) ; }
Code	{ return ( T ) reportMatcher . T ( T ) ; }
Distance : 6

123
Tree	{ return T . reportMatcher () ; }
Code	{ return T . reportMatcher () ; }
Distance : 7

124
Tree	{ return ( T ) reportMatcher ( T ) . reportMatcher () ; }
Code	{ return ( T ) reportMatcher ( T ) . reportMatcher () ; }
Distance : 2

125
Tree	{ return this . Any.ANY ; }
Code	{ return this . Any.ANY ; }
Distance : 9

126
Tree	{ return ( T ) T . anyObject ( T ) ; }
Code	{ return ( T ) T . anyObject ( T ) ; }
Distance : 7

127
Tree	{ return anyObject ( T ) . < T > anyObject () ; }
Code	{ return anyObject ( T ) . < T > anyObject () ; }
Distance : 7

128
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . Any.ANY () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . Any.ANY () ; }
Distance : 1

129
Tree	{ return T ; }
Code	{ return T ; }
Distance : 9

130
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 11

131
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 11

132
Tree	{ return ( T ) anyObject () ; }
Code	{ return ( T ) anyObject () ; }
Distance : 6

133
Tree	{ return this . T ; } Math
Code	{ return this . T ; } Math
Distance : 10

134
Tree	{ return ( T ) anyObject ( T . reportMatcher () ) ; }
Code	{ return ( T ) anyObject ( T . reportMatcher () ) ; }
Distance : 5

135
Tree	{ return ( T ) reportMatcher ( T . returnNull () ) ; }
Code	{ return ( T ) reportMatcher ( T . returnNull () ) ; }
Distance : 3

136
Tree	{ return ( Any.ANY ) anyObject () ; }
Code	{ return ( Any.ANY ) anyObject () ; }
Distance : 6

137
Tree	{ return ( T ) this . returnNull . reportMatcher () ; }
Code	{ return ( T ) this . returnNull . reportMatcher () ; }
Distance : 5

138
Tree	{ reportMatcher ( anyObject ) ; return null ; }
Code	{ reportMatcher ( anyObject ) ; return null ; }
Distance : 8

139
Tree	{ return ( T ) this . T . Any.ANY () ; }
Code	{ return ( T ) this . T . Any.ANY () ; }
Distance : 5

140
Tree	{ return Matchers () ; }
Code	{ return Matchers () ; }
Distance : 9

141
Tree	{ return reportMatcher ( Any.ANY ) . returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnNull () ; }
Distance : 3

142
Tree	{ return this . returnNull ; }
Code	{ return this . returnNull ; }
Distance : 8

143
Tree	{ return ( T ) anyObject ( Any.ANY ) . anyObject ( T ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . anyObject ( T ) ; }
Distance : 5

144
Tree	{ return ( T ) anyObject ( Any.ANY ) . returnNull () ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . returnNull () ; }
Distance : 1

145
Tree	{ return ( T ) reportMatcher ( T . anyObject () ) ; }
Code	{ return ( T ) reportMatcher ( T . anyObject () ) ; }
Distance : 4

146
Tree	{ reportMatcher ( reportMatcher ) ; return null ; }
Code	{ reportMatcher ( reportMatcher ) ; return null ; }
Distance : 8

147
Tree	{ return reportMatcher ( T ) . < T > returnNull () ; }
Code	{ return reportMatcher ( T ) . < T > returnNull () ; }
Distance : 6

148
Tree	{ return ( T ) any ( T ) ; }
Code	{ return ( T ) any ( T ) ; }
Distance : 5

149
Tree	{ return ( T ) anyObject ( Any.ANY ) . anyObject () ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . anyObject () ; }
Distance : 2

150
Tree	{ return any ; }
Code	{ return any ; }
Distance : 10

151
Tree	{ return STRING_CONSTANT ; } mock
Code	{ return STRING_CONSTANT ; } mock
Distance : 11

152
Tree	{ return this . reportMatcher ; }
Code	{ return this . reportMatcher ; }
Distance : 9

153
Tree	{ return ( T ) this . returnNull . returnNull () ; }
Code	{ return ( T ) this . returnNull . returnNull () ; }
Distance : 4

154
Tree	{ return anyObject ( Any.ANY ) . T () ; }
Code	{ return anyObject ( Any.ANY ) . T () ; }
Distance : 5

155
Tree	{ return anyObject ( Any.ANY ) . reportMatcher () ; }
Code	{ return anyObject ( Any.ANY ) . reportMatcher () ; }
Distance : 5

156
Tree	{ return reportMatcher . T () ; }
Code	{ return reportMatcher . T () ; }
Distance : 7

157
Tree	{ return ( T ) this . returnNull . Any.ANY () ; }
Code	{ return ( T ) this . returnNull . Any.ANY () ; }
Distance : 5

158
Tree	{ return this . Matchers ; }
Code	{ return this . Matchers ; }
Distance : 9

159
Tree	{ return reportMatcher ( Any.ANY ) . < T > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > returnNull () ; }
Distance : 6

160
Tree	{ return STRING_CONSTANT ; } -
Code	{ return STRING_CONSTANT ; } -
Distance : 11

161
Tree	{ return returnNull () ; }
Code	{ return returnNull () ; }
Distance : 8

162
Tree	{ return reportMatcher ( Any.ANY ) . any () ; }
Code	{ return reportMatcher ( Any.ANY ) . any () ; }
Distance : 4

163
Tree	{ return STRING_CONSTANT ; } MathRuntimeException
Code	{ return STRING_CONSTANT ; } MathRuntimeException
Distance : 11

164
Tree	{ return reportMatcher ( T ) . < T > T () ; }
Code	{ return reportMatcher ( T ) . < T > T () ; }
Distance : 7

165
Tree	{ return reportMatcher () ; } i
Code	{ return reportMatcher () ; } i
Distance : 9

166
Tree	{ return this . T ; } i
Code	{ return this . T ; } i
Distance : 10

167
Tree	{ return reportMatcher . returnNull () ; }
Code	{ return reportMatcher . returnNull () ; }
Distance : 6

168
Tree	{ return STRING_CONSTANT ; } [
Code	{ return STRING_CONSTANT ; } [
Distance : 11

169
Tree	{ return ( T ) any () ; }
Code	{ return ( T ) any () ; }
Distance : 6

170
Tree	{ return ( T ) anyObject ( Any.ANY ) . reportMatcher ( T ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 5

171
Tree	{ return any () ; }
Code	{ return any () ; }
Distance : 9

172
Tree	{ return Matchers ; }
Code	{ return Matchers ; }
Distance : 10

173
Tree	{ return ( T ) this . T . reportMatcher () ; }
Code	{ return ( T ) this . T . reportMatcher () ; }
Distance : 5

174
Tree	{ return STRING_CONSTANT ; } f
Code	{ return STRING_CONSTANT ; } f
Distance : 11

175
Tree	{ return Matchers ; }
Code	{ return Matchers ; }
Distance : 10

176
Tree	{ return ( T ) reportMatcher ( returnNull ) ; }
Code	{ return ( T ) reportMatcher ( returnNull ) ; }
Distance : 4

177
Tree	{ return ( T ) any ( Any.ANY ) ; }
Code	{ return ( T ) any ( Any.ANY ) ; }
Distance : 4

178
Tree	{ return Any.ANY () ; }
Code	{ return Any.ANY () ; }
Distance : 8

179
Tree	{ return T ; } Math
Code	{ return T ; } Math
Distance : 10

180
Tree	{ return ( T ) anyObject ( T . T () ) ; }
Code	{ return ( T ) anyObject ( T . T () ) ; }
Distance : 5

181
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 11

182
Tree	{ reportMatcher ( returnNull ) ; return null ; }
Code	{ reportMatcher ( returnNull ) ; return null ; }
Distance : 8

183
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . any ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . any ( T ) ; }
Distance : 4

184
Tree	{ return T ; } i
Code	{ return T ; } i
Distance : 10

185
Tree	{ return reportMatcher . reportMatcher () ; }
Code	{ return reportMatcher . reportMatcher () ; }
Distance : 7

186
Tree	{ return ( T ) reportMatcher . reportMatcher () ; }
Code	{ return ( T ) reportMatcher . reportMatcher () ; }
Distance : 4

187
Tree	{ T ( Any.ANY ) ; return null ; }
Code	{ T ( Any.ANY ) ; return null ; }
Distance : 7

188
Tree	{ return T . anyObject () ; }
Code	{ return T . anyObject () ; }
Distance : 7

189
Tree	{ return ( T ) this . T . T () ; }
Code	{ return ( T ) this . T . T () ; }
Distance : 5

190
Tree	{ return T ; } options
Code	{ return T ; } options
Distance : 10

191
Tree	{ return ( T ) reportMatcher ( reportMatcher ) ; }
Code	{ return ( T ) reportMatcher ( reportMatcher ) ; }
Distance : 4

192
Tree	{ return this . T ; } options
Code	{ return this . T ; } options
Distance : 10

193
Tree	{ return ( reportMatcher ) reportMatcher () ; }
Code	{ return ( reportMatcher ) reportMatcher () ; }
Distance : 6

194
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 11

195
Tree	{ return ( T ) anyObject ( T . anyObject () ) ; }
Code	{ return ( T ) anyObject ( T . anyObject () ) ; }
Distance : 5

196
Tree	{ return reportMatcher . anyObject () ; }
Code	{ return reportMatcher . anyObject () ; }
Distance : 7

197
Tree	{ return reportMatcher () ; } options
Code	{ return reportMatcher () ; } options
Distance : 9

198
Tree	{ return ( T ) this . reportMatcher . reportMatcher () ; }
Code	{ return ( T ) this . reportMatcher . reportMatcher () ; }
Distance : 5

199
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 11

========================================================================


========================================================================
Example Number: 97
Parent Code is: 
{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( T ) reportMatcher ( new InstanceOf ( clazz ) ) . returnFor ( clazz ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnFor}) (214{val=(}) (800{val=clazz}) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (800{val=clazz}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnFor}) (214{val=(}) (800{val=clazz}) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return returnFor () ; }
Code	{ return returnFor () ; }
Distance : 15

1
Tree	{ Any.ANY ( Any.ANY ) ; return null ; }
Code	{ Any.ANY ( Any.ANY ) ; return null ; }
Distance : 15

2
Tree	{ return ( T ) reportMatcher ( reportMatcher ) . returnFor ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( reportMatcher ) . returnFor ( clazz ) ; }
Distance : 5

3
Tree	{ return anyObject () . reportMatcher ( short , super ) ; }
Code	{ return anyObject () . reportMatcher ( short , super ) ; }
Distance : 13

4
Tree	{ return reportMatcher () . reportMatcher ( short , super ) ; }
Code	{ return reportMatcher () . reportMatcher ( short , super ) ; }
Distance : 13

5
Tree	{ return anyObject ( T , reportMatcher ( Any.ANY ) ) ; }
Code	{ return anyObject ( T , reportMatcher ( Any.ANY ) ) ; }
Distance : 11

6
Tree	{ return anyObject () . reportMatcher ( short , false ) ; }
Code	{ return anyObject () . reportMatcher ( short , false ) ; }
Distance : 13

7
Tree	{ return ( T ) reportMatcher ( clazz , anyObject ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( clazz , anyObject ( Any.ANY ) ) ; }
Distance : 9

8
Tree	{ return reportMatcher () . reportMatcher ( super , CHAR_CONS ) ; }
Code	{ return reportMatcher () . reportMatcher ( super , CHAR_CONS ) ; }
Distance : 13

9
Tree	{ reportMatcher ( T ) ; return null ; }
Code	{ reportMatcher ( T ) ; return null ; }
Distance : 14

10
Tree	{ reportMatcher ( anyObject ) ; return null ; }
Code	{ reportMatcher ( anyObject ) ; return null ; }
Distance : 14

11
Tree	{ return T . reportMatcher ( T ) ; }
Code	{ return T . reportMatcher ( T ) ; }
Distance : 12

12
Tree	{ return Any.ANY ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return Any.ANY ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 9

13
Tree	{ return anyObject ( this , Any.ANY ) ; }
Code	{ return anyObject ( this , Any.ANY ) ; }
Distance : 14

14
Tree	{ super . reportMatcher () ; return return; ; }
Code	{ super . reportMatcher () ; return return; ; }
Distance : 16

15
Tree	{ return reportMatcher () . returnFor ( super , false ) ; }
Code	{ return reportMatcher () . returnFor ( super , false ) ; }
Distance : 13

16
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . anyObject ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . anyObject ( clazz ) ; }
Distance : 6

17
Tree	{ return T . T ( T ) ; }
Code	{ return T . T ( T ) ; }
Distance : 12

18
Tree	{ return anyObject ( Any.ANY ) ; }
Code	{ return anyObject ( Any.ANY ) ; }
Distance : 14

19
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher ( clazz ) ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher ( clazz ) ; }
Distance : 9

20
Tree	{ T = T . reportMatcher ( Any.ANY ) ; return null ; }
Code	{ T = T . reportMatcher ( Any.ANY ) ; return null ; }
Distance : 13

21
Tree	{ return reportMatcher ( T . Any.ANY ( clazz ) ) ; }
Code	{ return reportMatcher ( T . Any.ANY ( clazz ) ) ; }
Distance : 11

22
Tree	{ return T . Any.ANY ( T ) ; }
Code	{ return T . Any.ANY ( T ) ; }
Distance : 12

23
Tree	{ return ( T ) T ( Any.ANY ) ; }
Code	{ return ( T ) T ( Any.ANY ) ; }
Distance : 11

24
Tree	{ T = T . reportMatcher ( T ) ; return null ; }
Code	{ T = T . reportMatcher ( T ) ; return null ; }
Distance : 13

25
Tree	{ return returnFor ( Any.ANY ) ; }
Code	{ return returnFor ( Any.ANY ) ; }
Distance : 13

26
Tree	{ return STRING_CONSTANT ; } Override
Code	{ return STRING_CONSTANT ; } Override
Distance : 17

27
Tree	{ throw return }
Code	{ throw return }
Distance : 18

28
Tree	{ return ( T ) reportMatcher ( clazz , any ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( clazz , any ( Any.ANY ) ) ; }
Distance : 9

29
Tree	{ return anyObject ( clazz , reportMatcher ( Any.ANY ) ) ; }
Code	{ return anyObject ( clazz , reportMatcher ( Any.ANY ) ) ; }
Distance : 12

30
Tree	{ return reportMatcher ( T ) ; }
Code	{ return reportMatcher ( T ) ; }
Distance : 13

31
Tree	{ return reportMatcher ( this , clazz ) ; }
Code	{ return reportMatcher ( this , clazz ) ; }
Distance : 12

32
Tree	{ return anyObject ( Any.ANY ) . reportMatcher ( clazz ) ; }
Code	{ return anyObject ( Any.ANY ) . reportMatcher ( clazz ) ; }
Distance : 10

33
Tree	{ if super }
Code	{ if super }
Distance : 18

34
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 14

35
Tree	{ return clazz () ; }
Code	{ return clazz () ; }
Distance : 15

36
Tree	{ return ( T ) reportMatcher ( reportMatcher ) ; }
Code	{ return ( T ) reportMatcher ( reportMatcher ) ; }
Distance : 10

37
Tree	{ return anyObject ( Any.ANY ) ; }
Code	{ return anyObject ( Any.ANY ) ; }
Distance : 14

38
Tree	{ return InstanceOf () ; }
Code	{ return InstanceOf () ; }
Distance : 15

39
Tree	{ return ( T ) reportMatcher ( anyObject ) ; }
Code	{ return ( T ) reportMatcher ( anyObject ) ; }
Distance : 10

40
Tree	{ return ( T ) Any.ANY ( clazz ) ; }
Code	{ return ( T ) Any.ANY ( clazz ) ; }
Distance : 10

41
Tree	{ return anyObject ( this , T ) ; }
Code	{ return anyObject ( this , T ) ; }
Distance : 14

42
Tree	{ super if }
Code	{ super if }
Distance : 18

43
Tree	{ return STRING_CONSTANT ; } MathRuntimeException
Code	{ return STRING_CONSTANT ; } MathRuntimeException
Distance : 17

44
Tree	{ return T . returnFor ( T ) ; }
Code	{ return T . returnFor ( T ) ; }
Distance : 11

45
Tree	{ return reportMatcher ( this , returnFor ) ; }
Code	{ return reportMatcher ( this , returnFor ) ; }
Distance : 12

46
Tree	{ return anyObject ( Any.ANY ) . anyObject ( clazz ) ; }
Code	{ return anyObject ( Any.ANY ) . anyObject ( clazz ) ; }
Distance : 10

47
Tree	{ return Any.ANY ( Any.ANY ) . returnFor () ; }
Code	{ return Any.ANY ( Any.ANY ) . returnFor () ; }
Distance : 12

48
Tree	{ return ( T ) reportMatcher ( T ) . returnFor ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( T ) . returnFor ( clazz ) ; }
Distance : 5

49
Tree	{ return ( T ) anyObject ( clazz ) ; }
Code	{ return ( T ) anyObject ( clazz ) ; }
Distance : 10

50
Tree	{ return this . T . returnFor ( Any.ANY ) ; }
Code	{ return this . T . returnFor ( Any.ANY ) ; }
Distance : 12

51
Tree	{ return ( T ) reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher ( T ) ; }
Distance : 10

52
Tree	{ return ( T ) reportMatcher ( Class ) ; }
Code	{ return ( T ) reportMatcher ( Class ) ; }
Distance : 10

53
Tree	{ return ( T ) returnFor ( clazz ) ; }
Code	{ return ( T ) returnFor ( clazz ) ; }
Distance : 9

54
Tree	{ return this . T . returnFor ( InstanceOf ) ; }
Code	{ return this . T . returnFor ( InstanceOf ) ; }
Distance : 12

55
Tree	{ T = T . Any.ANY ( Any.ANY ) ; return null ; }
Code	{ T = T . Any.ANY ( Any.ANY ) ; return null ; }
Distance : 14

56
Tree	{ return ( T ) reportMatcher ( clazz , clazz ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( clazz , clazz ( Any.ANY ) ) ; }
Distance : 9

57
Tree	{ return anyObject ( T . returnFor ( clazz ) ) ; }
Code	{ return anyObject ( T . returnFor ( clazz ) ) ; }
Distance : 11

58
Tree	{ return T () ; }
Code	{ return T () ; }
Distance : 15

59
Tree	{ clazz = T . reportMatcher ( Any.ANY ) ; return null ; }
Code	{ clazz = T . reportMatcher ( Any.ANY ) ; return null ; }
Distance : 13

60
Tree	{ reportMatcher ( InstanceOf ) ; return null ; }
Code	{ reportMatcher ( InstanceOf ) ; return null ; }
Distance : 13

61
Tree	{ return ( T ) anyObject ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 6

62
Tree	{ if return }
Code	{ if return }
Distance : 18

63
Tree	{ return ( T ) anyObject ( clazz , reportMatcher ( Any.ANY ) ) ; }
Code	{ return ( T ) anyObject ( clazz , reportMatcher ( Any.ANY ) ) ; }
Distance : 10

64
Tree	{ super . returnFor () ; return null ; }
Code	{ super . returnFor () ; return null ; }
Distance : 16

65
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 15

66
Tree	{ T = T . Any.ANY ( T ) ; return null ; }
Code	{ T = T . Any.ANY ( T ) ; return null ; }
Distance : 14

67
Tree	{ return anyObject ( T ) ; }
Code	{ return anyObject ( T ) ; }
Distance : 14

68
Tree	{ return ( T ) Any.ANY ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return ( T ) Any.ANY ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 6

69
Tree	{ return anyObject ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return anyObject ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 9

70
Tree	{ return anyObject () ; }
Code	{ return anyObject () ; }
Distance : 16

71
Tree	{ return ( clazz ) reportMatcher ( clazz ) ; }
Code	{ return ( clazz ) reportMatcher ( clazz ) ; }
Distance : 10

72
Tree	{ return anyObject ( T , anyObject ( Any.ANY ) ) ; }
Code	{ return anyObject ( T , anyObject ( Any.ANY ) ) ; }
Distance : 12

73
Tree	{ return anyObject ( T . Any.ANY ( clazz ) ) ; }
Code	{ return anyObject ( T . Any.ANY ( clazz ) ) ; }
Distance : 11

74
Tree	{ return Any.ANY ( T , reportMatcher ( Any.ANY ) ) ; }
Code	{ return Any.ANY ( T , reportMatcher ( Any.ANY ) ) ; }
Distance : 11

75
Tree	{ super += }
Code	{ super += }
Distance : 18

76
Tree	{ reportMatcher ( reportMatcher ) ; return null ; }
Code	{ reportMatcher ( reportMatcher ) ; return null ; }
Distance : 14

77
Tree	{ return reportMatcher ( T , anyObject ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( T , anyObject ( Any.ANY ) ) ; }
Distance : 12

78
Tree	{ return reportMatcher ( T , Any.ANY ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( T , Any.ANY ( Any.ANY ) ) ; }
Distance : 12

79
Tree	{ return T . reportMatcher ( Any.ANY ) ; }
Code	{ return T . reportMatcher ( Any.ANY ) ; }
Distance : 12

80
Tree	{ return Any.ANY ( Any.ANY ) ; }
Code	{ return Any.ANY ( Any.ANY ) ; }
Distance : 14

81
Tree	{ return T . returnFor ( Any.ANY ) ; }
Code	{ return T . returnFor ( Any.ANY ) ; }
Distance : 11

82
Tree	{ return anyObject ( this , clazz ) ; }
Code	{ return anyObject ( this , clazz ) ; }
Distance : 13

83
Tree	{ super . reportMatcher () ; return null ; }
Code	{ super . reportMatcher () ; return null ; }
Distance : 16

84
Tree	{ return STRING_CONSTANT ; } f
Code	{ return STRING_CONSTANT ; } f
Distance : 17

85
Tree	{ return reportMatcher ( T . reportMatcher ( clazz ) ) ; }
Code	{ return reportMatcher ( T . reportMatcher ( clazz ) ) ; }
Distance : 10

86
Tree	{ return ( clazz ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return ( clazz ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 6

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 14

88
Tree	{ return anyObject ( reportMatcher ) ; }
Code	{ return anyObject ( reportMatcher ) ; }
Distance : 14

89
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 16

90
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 14

91
Tree	{ return ( T ) reportMatcher ( clazz , reportMatcher ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( clazz , reportMatcher ( Any.ANY ) ) ; }
Distance : 9

92
Tree	{ T ( Any.ANY ) ; return null ; }
Code	{ T ( Any.ANY ) ; return null ; }
Distance : 14

93
Tree	{ return any () ; }
Code	{ return any () ; }
Distance : 16

94
Tree	{ return clazz ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return clazz ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 9

95
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 13

96
Tree	{ return this . T . returnFor ( T ) ; }
Code	{ return this . T . returnFor ( T ) ; }
Distance : 12

97
Tree	{ return reportMatcher ( Any.ANY ) . anyObject ( clazz ) ; }
Code	{ return reportMatcher ( Any.ANY ) . anyObject ( clazz ) ; }
Distance : 9

98
Tree	{ return T . Any.ANY ( Any.ANY ) ; }
Code	{ return T . Any.ANY ( Any.ANY ) ; }
Distance : 12

99
Tree	{ return T . reportMatcher ( reportMatcher ) ; }
Code	{ return T . reportMatcher ( reportMatcher ) ; }
Distance : 12

100
Tree	{ return reportMatcher () . reportMatcher ( super , false ) ; }
Code	{ return reportMatcher () . reportMatcher ( super , false ) ; }
Distance : 13

101
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( clazz ) ; }
Distance : 6

102
Tree	{ return ( T ) reportMatcher ( anyObject ) . returnFor ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( anyObject ) . returnFor ( clazz ) ; }
Distance : 5

103
Tree	{ return ( T ) reportMatcher ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( clazz ) ; }
Distance : 9

104
Tree	{ return this . T . returnFor ( anyObject ) ; }
Code	{ return this . T . returnFor ( anyObject ) ; }
Distance : 12

105
Tree	{ return this . clazz . returnFor ( T ) ; }
Code	{ return this . clazz . returnFor ( T ) ; }
Distance : 11

106
Tree	{ return ( Any.ANY ) reportMatcher ( clazz ) ; }
Code	{ return ( Any.ANY ) reportMatcher ( clazz ) ; }
Distance : 10

107
Tree	{ return reportMatcher ( T . anyObject ( clazz ) ) ; }
Code	{ return reportMatcher ( T . anyObject ( clazz ) ) ; }
Distance : 11

108
Tree	{ return Any.ANY ( T ) ; }
Code	{ return Any.ANY ( T ) ; }
Distance : 14

109
Tree	{ return returnFor ( Any.ANY ) . returnFor () ; }
Code	{ return returnFor ( Any.ANY ) . returnFor () ; }
Distance : 12

110
Tree	{ return reportMatcher () . reportMatcher ( super , super ) ; }
Code	{ return reportMatcher () . reportMatcher ( super , super ) ; }
Distance : 13

111
Tree	{ return reportMatcher ( T ) ; }
Code	{ return reportMatcher ( T ) ; }
Distance : 13

112
Tree	{ return reportMatcher ( this , Any.ANY ) ; }
Code	{ return reportMatcher ( this , Any.ANY ) ; }
Distance : 13

113
Tree	{ return reportMatcher ( Any.ANY ) . returnFor () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnFor () ; }
Distance : 11

114
Tree	{ return reportMatcher ( anyObject ) ; }
Code	{ return reportMatcher ( anyObject ) ; }
Distance : 13

115
Tree	{ return STRING_CONSTANT ; } [
Code	{ return STRING_CONSTANT ; } [
Distance : 17

116
Tree	{ return ( T ) reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher ( T ) ; }
Distance : 10

117
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 5

118
Tree	{ return reportMatcher ( T . returnFor ( clazz ) ) ; }
Code	{ return reportMatcher ( T . returnFor ( clazz ) ) ; }
Distance : 10

119
Tree	{ return Any.ANY () ; }
Code	{ return Any.ANY () ; }
Distance : 16

120
Tree	{ return reportMatcher ( clazz ) ; }
Code	{ return reportMatcher ( clazz ) ; }
Distance : 12

121
Tree	{ T = T . reportMatcher ( reportMatcher ) ; return null ; }
Code	{ T = T . reportMatcher ( reportMatcher ) ; return null ; }
Distance : 13

122
Tree	{ clazz = T . reportMatcher ( T ) ; return null ; }
Code	{ clazz = T . reportMatcher ( T ) ; return null ; }
Distance : 13

123
Tree	{ return ( T ) InstanceOf ( clazz ) ; }
Code	{ return ( T ) InstanceOf ( clazz ) ; }
Distance : 9

124
Tree	{ return anyObject () . reportMatcher ( super , false ) ; }
Code	{ return anyObject () . reportMatcher ( super , false ) ; }
Distance : 13

125
Tree	{ return T . Any.ANY ( reportMatcher ) ; }
Code	{ return T . Any.ANY ( reportMatcher ) ; }
Distance : 12

126
Tree	{ return clazz ( Any.ANY ) ; }
Code	{ return clazz ( Any.ANY ) ; }
Distance : 13

127
Tree	{ return Any.ANY ( this , T ) ; }
Code	{ return Any.ANY ( this , T ) ; }
Distance : 14

128
Tree	{ reportMatcher = T . reportMatcher ( T ) ; return null ; }
Code	{ reportMatcher = T . reportMatcher ( T ) ; return null ; }
Distance : 13

129
Tree	{ return reportMatcher ( reportMatcher ) ; }
Code	{ return reportMatcher ( reportMatcher ) ; }
Distance : 13

130
Tree	{ super . anyObject () ; return null ; }
Code	{ super . anyObject () ; return null ; }
Distance : 17

131
Tree	{ return ( clazz ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( clazz ) reportMatcher ( Any.ANY ) ; }
Distance : 11

132
Tree	{ return returnFor ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return returnFor ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 9

133
Tree	{ return this . Any.ANY . returnFor ( T ) ; }
Code	{ return this . Any.ANY . returnFor ( T ) ; }
Distance : 12

134
Tree	{ return ( T ) reportMatcher ( clazz , Any.ANY ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( clazz , Any.ANY ( Any.ANY ) ) ; }
Distance : 9

135
Tree	{ return ( T ) reportMatcher ( clazz , returnFor ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( clazz , returnFor ( Any.ANY ) ) ; }
Distance : 8

136
Tree	{ return ( T ) reportMatcher ( clazz , reportMatcher ( anyObject ) ) ; }
Code	{ return ( T ) reportMatcher ( clazz , reportMatcher ( anyObject ) ) ; }
Distance : 9

137
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 10

138
Tree	{ return anyObject ( Any.ANY ) . returnFor () ; }
Code	{ return anyObject ( Any.ANY ) . returnFor () ; }
Distance : 12

139
Tree	{ return reportMatcher ( T ) . returnFor ( clazz ) ; }
Code	{ return reportMatcher ( T ) . returnFor ( clazz ) ; }
Distance : 8

140
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 13

141
Tree	{ return ( T ) reportMatcher ( returnFor ) ; }
Code	{ return ( T ) reportMatcher ( returnFor ) ; }
Distance : 9

142
Tree	{ return this . T . returnFor ( returnFor ) ; }
Code	{ return this . T . returnFor ( returnFor ) ; }
Distance : 12

143
Tree	{ return anyObject ( T . anyObject ( clazz ) ) ; }
Code	{ return anyObject ( T . anyObject ( clazz ) ) ; }
Distance : 11

144
Tree	{ return reportMatcher ( clazz . Any.ANY ( clazz ) ) ; }
Code	{ return reportMatcher ( clazz . Any.ANY ( clazz ) ) ; }
Distance : 10

145
Tree	{ return reportMatcher ( clazz . reportMatcher ( clazz ) ) ; }
Code	{ return reportMatcher ( clazz . reportMatcher ( clazz ) ) ; }
Distance : 10

146
Tree	{ return T . T ( Any.ANY ) ; }
Code	{ return T . T ( Any.ANY ) ; }
Distance : 12

147
Tree	{ return clazz ( Any.ANY ) . returnFor () ; }
Code	{ return clazz ( Any.ANY ) . returnFor () ; }
Distance : 12

148
Tree	{ return anyObject ( T ) ; }
Code	{ return anyObject ( T ) ; }
Distance : 14

149
Tree	{ return Class () ; }
Code	{ return Class () ; }
Distance : 16

150
Tree	{ return ( T ) reportMatcher ( clazz , T ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( clazz , T ( Any.ANY ) ) ; }
Distance : 9

151
Tree	{ return reportMatcher ( this , T ) ; }
Code	{ return reportMatcher ( this , T ) ; }
Distance : 13

152
Tree	{ super . InstanceOf () ; return null ; }
Code	{ super . InstanceOf () ; return null ; }
Distance : 16

153
Tree	{ super . Any.ANY () ; return null ; }
Code	{ super . Any.ANY () ; return null ; }
Distance : 17

154
Tree	{ reportMatcher = T . reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher = T . reportMatcher ( Any.ANY ) ; return null ; }
Distance : 13

155
Tree	{ return ( T ) reportMatcher ( InstanceOf ) ; }
Code	{ return ( T ) reportMatcher ( InstanceOf ) ; }
Distance : 9

156
Tree	{ return STRING_CONSTANT ; } -
Code	{ return STRING_CONSTANT ; } -
Distance : 17

157
Tree	{ return anyObject () . reportMatcher ( super , super ) ; }
Code	{ return anyObject () . reportMatcher ( super , super ) ; }
Distance : 13

158
Tree	{ return this . clazz . returnFor ( Any.ANY ) ; }
Code	{ return this . clazz . returnFor ( Any.ANY ) ; }
Distance : 11

159
Tree	{ return Any.ANY ( this , clazz ) ; }
Code	{ return Any.ANY ( this , clazz ) ; }
Distance : 13

160
Tree	{ return reportMatcher ( Any.ANY ) . anyObject () ; }
Code	{ return reportMatcher ( Any.ANY ) . anyObject () ; }
Distance : 12

161
Tree	{ super . clazz () ; return null ; }
Code	{ super . clazz () ; return null ; }
Distance : 16

162
Tree	{ return STRING_CONSTANT ; } mock
Code	{ return STRING_CONSTANT ; } mock
Distance : 17

163
Tree	{ return clazz ( T ) ; }
Code	{ return clazz ( T ) ; }
Distance : 13

164
Tree	{ return this . T . returnFor ( reportMatcher ) ; }
Code	{ return this . T . returnFor ( reportMatcher ) ; }
Distance : 12

165
Tree	{ super abstract }
Code	{ super abstract }
Distance : 18

166
Tree	{ return anyObject ( this , returnFor ) ; }
Code	{ return anyObject ( this , returnFor ) ; }
Distance : 13

167
Tree	{ return ( T ) Any.ANY ( Any.ANY ) ; }
Code	{ return ( T ) Any.ANY ( Any.ANY ) ; }
Distance : 11

168
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 8

169
Tree	{ return ( T ) T ( clazz ) ; }
Code	{ return ( T ) T ( clazz ) ; }
Distance : 10

170
Tree	{ return ( T ) T ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return ( T ) T ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 6

171
Tree	{ return reportMatcher ( T , reportMatcher ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( T , reportMatcher ( Any.ANY ) ) ; }
Distance : 11

172
Tree	{ anyObject ( Any.ANY ) ; return null ; }
Code	{ anyObject ( Any.ANY ) ; return null ; }
Distance : 15

173
Tree	{ return reportMatcher ( clazz , reportMatcher ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( clazz , reportMatcher ( Any.ANY ) ) ; }
Distance : 12

174
Tree	{ super return }
Code	{ super return }
Distance : 18

175
Tree	{ return ( T ) anyObject ( Any.ANY ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) ; }
Distance : 11

176
Tree	{ return anyObject ( Any.ANY ) . anyObject () ; }
Code	{ return anyObject ( Any.ANY ) . anyObject () ; }
Distance : 13

177
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 17

178
Tree	{ super super }
Code	{ super super }
Distance : 18

179
Tree	{ return ( T ) reportMatcher ( clazz , reportMatcher ( reportMatcher ) ) ; }
Code	{ return ( T ) reportMatcher ( clazz , reportMatcher ( reportMatcher ) ) ; }
Distance : 9

180
Tree	{ throw super }
Code	{ throw super }
Distance : 18

181
Tree	{ return reportMatcher () . reportMatcher ( short , false ) ; }
Code	{ return reportMatcher () . reportMatcher ( short , false ) ; }
Distance : 13

182
Tree	{ return anyObject ( T , Any.ANY ( Any.ANY ) ) ; }
Code	{ return anyObject ( T , Any.ANY ( Any.ANY ) ) ; }
Distance : 12

183
Tree	{ return anyObject ( clazz ) ; }
Code	{ return anyObject ( clazz ) ; }
Distance : 13

184
Tree	{ return super }
Code	{ return super }
Distance : 17

185
Tree	{ return Matchers () ; }
Code	{ return Matchers () ; }
Distance : 16

186
Tree	{ return reportMatcher ( reportMatcher ) ; }
Code	{ return reportMatcher ( reportMatcher ) ; }
Distance : 13

187
Tree	{ return reportMatcher ( T ) . returnFor () ; }
Code	{ return reportMatcher ( T ) . returnFor () ; }
Distance : 11

188
Tree	{ return returnFor ( T ) ; }
Code	{ return returnFor ( T ) ; }
Distance : 13

189
Tree	{ return anyObject ( T . reportMatcher ( clazz ) ) ; }
Code	{ return anyObject ( T . reportMatcher ( clazz ) ) ; }
Distance : 10

190
Tree	{ super . any () ; return null ; }
Code	{ super . any () ; return null ; }
Distance : 17

191
Tree	{ return reportMatcher ( Any.ANY , reportMatcher ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( Any.ANY , reportMatcher ( Any.ANY ) ) ; }
Distance : 12

192
Tree	{ super . T () ; return null ; }
Code	{ super . T () ; return null ; }
Distance : 16

193
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 12

194
Tree	{ return anyObject ( Any.ANY ) . reportMatcher () ; }
Code	{ return anyObject ( Any.ANY ) . reportMatcher () ; }
Distance : 13

195
Tree	{ return this . Any.ANY . returnFor ( Any.ANY ) ; }
Code	{ return this . Any.ANY . returnFor ( Any.ANY ) ; }
Distance : 12

196
Tree	{ T = T . returnFor ( Any.ANY ) ; return null ; }
Code	{ T = T . returnFor ( Any.ANY ) ; return null ; }
Distance : 14

197
Tree	{ super . reportMatcher () ; return super(); ; }
Code	{ super . reportMatcher () ; return super(); ; }
Distance : 16

198
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 17

199
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 17

========================================================================


========================================================================
Example Number: 98
Parent Code is: 
{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( T ) reportMatcher ( new InstanceOf ( Object . class ) ) . returnNull () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnNull}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Object})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnNull}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super ( T ) ; reportMatcher ( reportMatcher ) ; }
Code	{ super ( T ) ; reportMatcher ( reportMatcher ) ; }
Distance : 12

1
Tree	{ return ( T ) reportMatcher ( anyObject . returnNull () ) ; }
Code	{ return ( T ) reportMatcher ( anyObject . returnNull () ) ; }
Distance : 9

2
Tree	{ return ( T ) this . T . returnNull () ; }
Code	{ return ( T ) this . T . returnNull () ; }
Distance : 9

3
Tree	{ return ( T ) reportMatcher ( T . anyObject () ) ; }
Code	{ return ( T ) reportMatcher ( T . anyObject () ) ; }
Distance : 9

4
Tree	{ return ( T ) reportMatcher . T () ; }
Code	{ return ( T ) reportMatcher . T () ; }
Distance : 10

5
Tree	{ return ( T ) reportMatcher ( anyObject ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( anyObject ) . returnNull () ; }
Distance : 7

6
Tree	{ return ( T ) returnNull () ; }
Code	{ return ( T ) returnNull () ; }
Distance : 11

7
Tree	{ return ( T ) reportMatcher ( anyObject ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( anyObject ) . returnNull () ; }
Distance : 7

8
Tree	{ return ( T ) Any.ANY ( Any.ANY ) . returnNull () ; }
Code	{ return ( T ) Any.ANY ( Any.ANY ) . returnNull () ; }
Distance : 8

9
Tree	{ return ( T ) reportMatcher ( Object . anyObject () ) ; }
Code	{ return ( T ) reportMatcher ( Object . anyObject () ) ; }
Distance : 8

10
Tree	{ return ( T ) anyObject ( reportMatcher . returnNull () ) ; }
Code	{ return ( T ) anyObject ( reportMatcher . returnNull () ) ; }
Distance : 10

11
Tree	{ return ( T ) reportMatcher ( T ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( T ) . returnNull () ; }
Distance : 7

12
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

13
Tree	{ return ( T ) reportMatcher ( clazz . returnNull () ) ; }
Code	{ return ( T ) reportMatcher ( clazz . returnNull () ) ; }
Distance : 9

14
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 16

15
Tree	{ return ( T ) returnNull . returnNull () ; }
Code	{ return ( T ) returnNull . returnNull () ; }
Distance : 10

16
Tree	{ reportMatcher ( Any.ANY , reportMatcher ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , reportMatcher ) ; return null ; }
Distance : 14

17
Tree	{ return Class ; }
Code	{ return Class ; }
Distance : 16

18
Tree	{ anyObject () ; return null ; }
Code	{ anyObject () ; return null ; }
Distance : 17

19
Tree	{ return ( T ) anyObject ( reportMatcher ) . returnNull () ; }
Code	{ return ( T ) anyObject ( reportMatcher ) . returnNull () ; }
Distance : 8

20
Tree	{ return ( T ) reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher ( T ) ; }
Distance : 10

21
Tree	{ reportMatcher () ; return null ; }
Code	{ reportMatcher () ; return null ; }
Distance : 16

22
Tree	{ return ( T ) reportMatcher ( anyObject ) ; }
Code	{ return ( T ) reportMatcher ( anyObject ) ; }
Distance : 10

23
Tree	{ return T () ; }
Code	{ return T () ; }
Distance : 14

24
Tree	{ returnNull () ; return null ; }
Code	{ returnNull () ; return null ; }
Distance : 17

25
Tree	{ return ( T ) reportMatcher ( Object ) ; }
Code	{ return ( T ) reportMatcher ( Object ) ; }
Distance : 9

26
Tree	{ reportMatcher ( Any.ANY , returnNull ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , returnNull ) ; return null ; }
Distance : 14

27
Tree	{ super ( T ) ; returnNull ( reportMatcher ) ; }
Code	{ super ( T ) ; returnNull ( reportMatcher ) ; }
Distance : 12

28
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( T ) ; }
Distance : 10

29
Tree	{ return ( T ) T ( Any.ANY ) . returnNull () ; }
Code	{ return ( T ) T ( Any.ANY ) . returnNull () ; }
Distance : 8

30
Tree	{ return ( T ) T . returnNull () ; }
Code	{ return ( T ) T . returnNull () ; }
Distance : 10

31
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 13

32
Tree	{ return ( T ) returnNull ( Any.ANY ) ; }
Code	{ return ( T ) returnNull ( Any.ANY ) ; }
Distance : 11

33
Tree	{ return ( T ) reportMatcher ( T ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( T ) . returnNull () ; }
Distance : 7

34
Tree	{ return ( T ) T . returnNull ( Any.ANY ) ; }
Code	{ return ( T ) T . returnNull ( Any.ANY ) ; }
Distance : 11

35
Tree	{ return ( T ) T . returnNull ( T ) ; }
Code	{ return ( T ) T . returnNull ( T ) ; }
Distance : 11

36
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 10

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 14

38
Tree	{ return ( T ) reportMatcher ( Object . returnNull () ) ; }
Code	{ return ( T ) reportMatcher ( Object . returnNull () ) ; }
Distance : 8

39
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 14

40
Tree	{ return ( T ) T . T () ; }
Code	{ return ( T ) T . T () ; }
Distance : 11

41
Tree	{ return clazz () ; }
Code	{ return clazz () ; }
Distance : 15

42
Tree	{ super ( T . Any.ANY ( Any.ANY ) ) ; returnNull () ; }
Code	{ super ( T . Any.ANY ( Any.ANY ) ) ; returnNull () ; }
Distance : 10

43
Tree	{ return anyObject () ; }
Code	{ return anyObject () ; }
Distance : 15

44
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 16

45
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 10

46
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( Object ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( Object ) ; }
Distance : 10

47
Tree	{ return ( T ) reportMatcher () ; }
Code	{ return ( T ) reportMatcher () ; }
Distance : 11

48
Tree	{ return ( Any.ANY ) reportMatcher () ; }
Code	{ return ( Any.ANY ) reportMatcher () ; }
Distance : 12

49
Tree	{ anyObject ( Any.ANY ) ; return null ; }
Code	{ anyObject ( Any.ANY ) ; return null ; }
Distance : 15

50
Tree	{ return ( T ) reportMatcher ( clazz ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( clazz ) . returnNull () ; }
Distance : 7

51
Tree	{ return ( T ) anyObject ( Any.ANY ) . returnNull () ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . returnNull () ; }
Distance : 8

52
Tree	{ return ( T ) reportMatcher ( reportMatcher ) ; }
Code	{ return ( T ) reportMatcher ( reportMatcher ) ; }
Distance : 10

53
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 16

54
Tree	{ return ( T ) T . reportMatcher ( Object ) ; }
Code	{ return ( T ) T . reportMatcher ( Object ) ; }
Distance : 10

55
Tree	{ returnNull ( Any.ANY ) ; return null ; }
Code	{ returnNull ( Any.ANY ) ; return null ; }
Distance : 15

56
Tree	{ super ( T . reportMatcher ( T ) ) ; returnNull () ; }
Code	{ super ( T . reportMatcher ( T ) ) ; returnNull () ; }
Distance : 9

57
Tree	{ return reportMatcher ( T ) ; }
Code	{ return reportMatcher ( T ) ; }
Distance : 13

58
Tree	{ return ( T ) T () ; }
Code	{ return ( T ) T () ; }
Distance : 12

59
Tree	{ super ( T . reportMatcher ( Object ) ) ; reportMatcher () ; }
Code	{ super ( T . reportMatcher ( Object ) ) ; reportMatcher () ; }
Distance : 9

60
Tree	{ return ( T ) anyObject ( Any.ANY ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) ; }
Distance : 11

61
Tree	{ reportMatcher ( InstanceOf ) ; return null ; }
Code	{ reportMatcher ( InstanceOf ) ; return null ; }
Distance : 13

62
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
Distance : 7

63
Tree	{ return anyObject ( Any.ANY ) ; }
Code	{ return anyObject ( Any.ANY ) ; }
Distance : 14

64
Tree	{ return null ; }
Code	{ return null ; }
Distance : 16

65
Tree	{ return ( T ) T . T ( reportMatcher ) ; }
Code	{ return ( T ) T . T ( reportMatcher ) ; }
Distance : 11

66
Tree	{ return ( T ) reportMatcher ( reportMatcher . returnNull () ) ; }
Code	{ return ( T ) reportMatcher ( reportMatcher . returnNull () ) ; }
Distance : 9

67
Tree	{ return ( T ) T . reportMatcher ( T ) ; }
Code	{ return ( T ) T . reportMatcher ( T ) ; }
Distance : 11

68
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( Any.ANY ) ; }
Distance : 10

69
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 16

70
Tree	{ return ( T ) reportMatcher ( anyObject ) ; }
Code	{ return ( T ) reportMatcher ( anyObject ) ; }
Distance : 10

71
Tree	{ super ( T ) ; returnNull ( Any.ANY ) ; }
Code	{ super ( T ) ; returnNull ( Any.ANY ) ; }
Distance : 12

72
Tree	{ return ( T ) T . T ( T ) ; }
Code	{ return ( T ) T . T ( T ) ; }
Distance : 11

73
Tree	{ return any ; }
Code	{ return any ; }
Distance : 16

74
Tree	{ return ( T ) reportMatcher ( Object ) ; }
Code	{ return ( T ) reportMatcher ( Object ) ; }
Distance : 9

75
Tree	{ Any.ANY ( Any.ANY ) ; return null ; }
Code	{ Any.ANY ( Any.ANY ) ; return null ; }
Distance : 15

76
Tree	{ return ( T ) anyObject ( T ) . returnNull () ; }
Code	{ return ( T ) anyObject ( T ) . returnNull () ; }
Distance : 8

77
Tree	{ return ( T ) anyObject ( Any.ANY ) . returnNull ( returnNull ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . returnNull ( returnNull ) ; }
Distance : 10

78
Tree	{ return ( T ) reportMatcher ( reportMatcher ) ; }
Code	{ return ( T ) reportMatcher ( reportMatcher ) ; }
Distance : 10

79
Tree	{ super ( T ) ; anyObject ( Any.ANY ) ; }
Code	{ super ( T ) ; anyObject ( Any.ANY ) ; }
Distance : 12

80
Tree	{ return ( T ) anyObject ( reportMatcher ) ; }
Code	{ return ( T ) anyObject ( reportMatcher ) ; }
Distance : 11

81
Tree	{ return ( T ) T . Any.ANY () ; }
Code	{ return ( T ) T . Any.ANY () ; }
Distance : 11

82
Tree	{ super ( T . reportMatcher ( Object ) ) ; returnNull () ; }
Code	{ super ( T . reportMatcher ( Object ) ) ; returnNull () ; }
Distance : 8

83
Tree	{ return ( T ) anyObject ( Object ) ; }
Code	{ return ( T ) anyObject ( Object ) ; }
Distance : 10

84
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 14

85
Tree	{ return ( T ) reportMatcher ( reportMatcher ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( reportMatcher ) . returnNull () ; }
Distance : 7

86
Tree	{ Any.ANY () ; return null ; }
Code	{ Any.ANY () ; return null ; }
Distance : 17

87
Tree	{ return ( T ) reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher ( T ) ; }
Distance : 10

88
Tree	{ anyObject ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ anyObject ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 15

89
Tree	{ return ( T ) returnNull ( Any.ANY ) . returnNull () ; }
Code	{ return ( T ) returnNull ( Any.ANY ) . returnNull () ; }
Distance : 8

90
Tree	{ return ( T ) reportMatcher ( returnNull ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( returnNull ) . returnNull () ; }
Distance : 7

91
Tree	{ super ( T ) ; returnNull ( T ) ; }
Code	{ super ( T ) ; returnNull ( T ) ; }
Distance : 12

92
Tree	{ super ( T ) ; T ( Any.ANY ) ; }
Code	{ super ( T ) ; T ( Any.ANY ) ; }
Distance : 12

93
Tree	{ Object () ; return null ; }
Code	{ Object () ; return null ; }
Distance : 16

94
Tree	{ return returnNull () ; }
Code	{ return returnNull () ; }
Distance : 14

95
Tree	{ returnNull ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ returnNull ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 15

96
Tree	{ return T ; }
Code	{ return T ; }
Distance : 15

97
Tree	{ return ( T ) returnNull . reportMatcher () ; }
Code	{ return ( T ) returnNull . reportMatcher () ; }
Distance : 11

98
Tree	{ return InstanceOf () ; }
Code	{ return InstanceOf () ; }
Distance : 14

99
Tree	{ return ( T ) reportMatcher ( T . returnNull () ) ; }
Code	{ return ( T ) reportMatcher ( T . returnNull () ) ; }
Distance : 9

100
Tree	{ super ( T ) ; reportMatcher ( T ) ; }
Code	{ super ( T ) ; reportMatcher ( T ) ; }
Distance : 12

101
Tree	{ return ( T ) this . returnNull . returnNull () ; }
Code	{ return ( T ) this . returnNull . returnNull () ; }
Distance : 9

102
Tree	{ return ( T ) T . T ( Any.ANY ) ; }
Code	{ return ( T ) T . T ( Any.ANY ) ; }
Distance : 11

103
Tree	{ super ( T ) ; returnNull ( anyObject ) ; }
Code	{ super ( T ) ; returnNull ( anyObject ) ; }
Distance : 12

104
Tree	{ return reportMatcher ( anyObject ) ; }
Code	{ return reportMatcher ( anyObject ) ; }
Distance : 13

105
Tree	{ super ( T . Any.ANY ( reportMatcher ) ) ; returnNull () ; }
Code	{ super ( T . Any.ANY ( reportMatcher ) ) ; returnNull () ; }
Distance : 10

106
Tree	{ return Class () ; }
Code	{ return Class () ; }
Distance : 15

107
Tree	{ clazz () ; return null ; }
Code	{ clazz () ; return null ; }
Distance : 17

108
Tree	{ return ( T ) T . returnNull ( reportMatcher ) ; }
Code	{ return ( T ) T . returnNull ( reportMatcher ) ; }
Distance : 11

109
Tree	{ return ( T ) anyObject () ; }
Code	{ return ( T ) anyObject () ; }
Distance : 12

110
Tree	{ T ( Any.ANY ) ; return null ; }
Code	{ T ( Any.ANY ) ; return null ; }
Distance : 14

111
Tree	{ reportMatcher () ; return super(); ; }
Code	{ reportMatcher () ; return super(); ; }
Distance : 16

112
Tree	{ super ( T ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( T ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

113
Tree	{ return ( T ) InstanceOf () ; }
Code	{ return ( T ) InstanceOf () ; }
Distance : 11

114
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( returnNull ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( returnNull ) ; }
Distance : 9

115
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( anyObject ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( anyObject ) ; }
Distance : 10

116
Tree	{ reportMatcher ( reportMatcher ) ; return null ; }
Code	{ reportMatcher ( reportMatcher ) ; return null ; }
Distance : 14

117
Tree	{ return ( T ) T . returnNull ( Object ) ; }
Code	{ return ( T ) T . returnNull ( Object ) ; }
Distance : 10

118
Tree	{ return ( T ) this . returnNull . Any.ANY () ; }
Code	{ return ( T ) this . returnNull . Any.ANY () ; }
Distance : 10

119
Tree	{ return any () ; }
Code	{ return any () ; }
Distance : 15

120
Tree	{ return ( T ) reportMatcher ( Any.ANY . returnNull () ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY . returnNull () ) ; }
Distance : 9

121
Tree	{ anyObject ( Any.ANY , T ) ; return null ; }
Code	{ anyObject ( Any.ANY , T ) ; return null ; }
Distance : 15

122
Tree	{ return InstanceOf ; }
Code	{ return InstanceOf ; }
Distance : 15

123
Tree	{ super ( T . reportMatcher ( Object ) ) ; anyObject () ; }
Code	{ super ( T . reportMatcher ( Object ) ) ; anyObject () ; }
Distance : 9

124
Tree	{ Object ( Any.ANY ) ; return null ; }
Code	{ Object ( Any.ANY ) ; return null ; }
Distance : 15

125
Tree	{ return anyObject ( reportMatcher ) ; }
Code	{ return anyObject ( reportMatcher ) ; }
Distance : 14

126
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
Distance : 7

127
Tree	{ return ( T ) reportMatcher ( reportMatcher ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( reportMatcher ) . returnNull () ; }
Distance : 7

128
Tree	{ return Matchers () ; }
Code	{ return Matchers () ; }
Distance : 15

129
Tree	{ return Any.ANY ( Any.ANY ) ; }
Code	{ return Any.ANY ( Any.ANY ) ; }
Distance : 14

130
Tree	{ super ( T . reportMatcher ( Any.ANY ) ) ; reportMatcher () ; }
Code	{ super ( T . reportMatcher ( Any.ANY ) ) ; reportMatcher () ; }
Distance : 10

131
Tree	{ return ( T ) this . returnNull . anyObject () ; }
Code	{ return ( T ) this . returnNull . anyObject () ; }
Distance : 10

132
Tree	{ return ( T ) T . reportMatcher () ; }
Code	{ return ( T ) T . reportMatcher () ; }
Distance : 11

133
Tree	{ return ( T ) anyObject ( reportMatcher ) ; }
Code	{ return ( T ) anyObject ( reportMatcher ) ; }
Distance : 11

134
Tree	{ return ( T ) T . anyObject () ; }
Code	{ return ( T ) T . anyObject () ; }
Distance : 11

135
Tree	{ return ( T ) this . clazz . returnNull () ; }
Code	{ return ( T ) this . clazz . returnNull () ; }
Distance : 9

136
Tree	{ return ( T ) reportMatcher ( returnNull ) ; }
Code	{ return ( T ) reportMatcher ( returnNull ) ; }
Distance : 10

137
Tree	{ super ( T . reportMatcher ( Any.ANY ) ) ; returnNull () ; }
Code	{ super ( T . reportMatcher ( Any.ANY ) ) ; returnNull () ; }
Distance : 9

138
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 17

139
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 16

140
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 17

141
Tree	{ return ( T ) Any.ANY () ; }
Code	{ return ( T ) Any.ANY () ; }
Distance : 12

142
Tree	{ return ( T ) any () ; }
Code	{ return ( T ) any () ; }
Distance : 12

143
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 17

144
Tree	{ T () ; return null ; }
Code	{ T () ; return null ; }
Distance : 16

145
Tree	{ return ( T ) anyObject ( Any.ANY ) . returnNull ( clazz ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . returnNull ( clazz ) ; }
Distance : 11

146
Tree	{ return clazz ; }
Code	{ return clazz ; }
Distance : 16

147
Tree	{ return clazz ( Any.ANY ) ; }
Code	{ return clazz ( Any.ANY ) ; }
Distance : 14

148
Tree	{ return ( T ) reportMatcher ( reportMatcher . anyObject () ) ; }
Code	{ return ( T ) reportMatcher ( reportMatcher . anyObject () ) ; }
Distance : 9

149
Tree	{ return ( T ) returnNull . T () ; }
Code	{ return ( T ) returnNull . T () ; }
Distance : 11

150
Tree	{ return ( T ) Any.ANY ( Any.ANY ) ; }
Code	{ return ( T ) Any.ANY ( Any.ANY ) ; }
Distance : 11

151
Tree	{ return STRING_CONSTANT ; } [
Code	{ return STRING_CONSTANT ; } [
Distance : 17

152
Tree	{ return ( T ) Object () ; }
Code	{ return ( T ) Object () ; }
Distance : 11

153
Tree	{ return Object ; }
Code	{ return Object ; }
Distance : 15

154
Tree	{ returnNull ( Any.ANY , T ) ; return null ; }
Code	{ returnNull ( Any.ANY , T ) ; return null ; }
Distance : 15

155
Tree	{ super ( T ) ; reportMatcher ( anyObject ) ; }
Code	{ super ( T ) ; reportMatcher ( anyObject ) ; }
Distance : 12

156
Tree	{ reportMatcher ( Any.ANY , anyObject ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , anyObject ) ; return null ; }
Distance : 14

157
Tree	{ return ( clazz ) reportMatcher () ; }
Code	{ return ( clazz ) reportMatcher () ; }
Distance : 12

158
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . anyObject () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . anyObject () ; }
Distance : 8

159
Tree	{ super ( T . Any.ANY ( Object ) ) ; returnNull () ; }
Code	{ super ( T . Any.ANY ( Object ) ) ; returnNull () ; }
Distance : 9

160
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 17

161
Tree	{ super ( T . reportMatcher ( reportMatcher ) ) ; returnNull () ; }
Code	{ super ( T . reportMatcher ( reportMatcher ) ) ; returnNull () ; }
Distance : 9

162
Tree	{ return reportMatcher ; }
Code	{ return reportMatcher ; }
Distance : 15

163
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 17

164
Tree	{ return anyObject ; }
Code	{ return anyObject ; }
Distance : 16

165
Tree	{ return ( T ) T ( Any.ANY ) ; }
Code	{ return ( T ) T ( Any.ANY ) ; }
Distance : 11

166
Tree	{ return STRING_CONSTANT ; } mock
Code	{ return STRING_CONSTANT ; } mock
Distance : 17

167
Tree	{ return returnNull ; }
Code	{ return returnNull ; }
Distance : 15

168
Tree	{ return ( T ) reportMatcher . returnNull () ; }
Code	{ return ( T ) reportMatcher . returnNull () ; }
Distance : 9

169
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 14

170
Tree	{ return Any.ANY ; }
Code	{ return Any.ANY ; }
Distance : 16

171
Tree	{ reportMatcher ( Any.ANY , T ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , T ) ; return null ; }
Distance : 14

172
Tree	{ return returnNull ( Any.ANY ) ; }
Code	{ return returnNull ( Any.ANY ) ; }
Distance : 14

173
Tree	{ return STRING_CONSTANT ; } MathRuntimeException
Code	{ return STRING_CONSTANT ; } MathRuntimeException
Distance : 17

174
Tree	{ return ( T ) T . T ( Object ) ; }
Code	{ return ( T ) T . T ( Object ) ; }
Distance : 10

175
Tree	{ InstanceOf () ; return null ; }
Code	{ InstanceOf () ; return null ; }
Distance : 16

176
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( clazz ) ; }
Distance : 10

177
Tree	{ return reportMatcher ( reportMatcher ) ; }
Code	{ return reportMatcher ( reportMatcher ) ; }
Distance : 13

178
Tree	{ return Any.ANY () ; }
Code	{ return Any.ANY () ; }
Distance : 15

179
Tree	{ return ( T ) this . returnNull . T () ; }
Code	{ return ( T ) this . returnNull . T () ; }
Distance : 10

180
Tree	{ reportMatcher ( reportMatcher , Any.ANY ) ; return null ; }
Code	{ reportMatcher ( reportMatcher , Any.ANY ) ; return null ; }
Distance : 14

181
Tree	{ reportMatcher ( anyObject ) ; return null ; }
Code	{ reportMatcher ( anyObject ) ; return null ; }
Distance : 14

182
Tree	{ return ( T ) reportMatcher ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( clazz ) ; }
Distance : 10

183
Tree	{ return anyObject ( T ) ; }
Code	{ return anyObject ( T ) ; }
Distance : 14

184
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 16

185
Tree	{ return ( T ) reportMatcher ( Object ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( Object ) . returnNull () ; }
Distance : 6

186
Tree	{ return ( T ) anyObject ( T ) ; }
Code	{ return ( T ) anyObject ( T ) ; }
Distance : 11

187
Tree	{ any () ; return null ; }
Code	{ any () ; return null ; }
Distance : 17

188
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( reportMatcher ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( reportMatcher ) ; }
Distance : 10

189
Tree	{ return ( T ) this . returnNull . reportMatcher () ; }
Code	{ return ( T ) this . returnNull . reportMatcher () ; }
Distance : 10

190
Tree	{ return ( T ) this . T . anyObject () ; }
Code	{ return ( T ) this . T . anyObject () ; }
Distance : 10

191
Tree	{ return ( T ) anyObject ( Any.ANY ) . returnNull ( T ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . returnNull ( T ) ; }
Distance : 11

192
Tree	{ return ( T ) anyObject ( Object ) . returnNull () ; }
Code	{ return ( T ) anyObject ( Object ) . returnNull () ; }
Distance : 7

193
Tree	{ return STRING_CONSTANT ; } Override
Code	{ return STRING_CONSTANT ; } Override
Distance : 17

194
Tree	{ return STRING_CONSTANT ; } f
Code	{ return STRING_CONSTANT ; } f
Distance : 17

195
Tree	{ return ( T ) this . Any.ANY . returnNull () ; }
Code	{ return ( T ) this . Any.ANY . returnNull () ; }
Distance : 9

196
Tree	{ return ( T ) this . T . reportMatcher () ; }
Code	{ return ( T ) this . T . reportMatcher () ; }
Distance : 10

197
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 17

198
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 17

199
Tree	{ return STRING_CONSTANT ; } -
Code	{ return STRING_CONSTANT ; } -
Distance : 17

========================================================================


========================================================================
Example Number: 99
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Short . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Short})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return ( reportMatcher ) returnZero () ; }
Code	{ return ( reportMatcher ) returnZero () ; }
Distance : 9

1
Tree	{ return ( Any.ANY ) reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ return ( Any.ANY ) reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 8

2
Tree	{ return ( returnZero ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( returnZero ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

3
Tree	{ reportMatcher ( reportMatcher ) ; return false ; }
Code	{ reportMatcher ( reportMatcher ) ; return false ; }
Distance : 11

4
Tree	{ return ( returnZero ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( returnZero ) reportMatcher ( Any.ANY ) ; }
Distance : 11

5
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher = InstanceOf . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher = InstanceOf . returnZero () ; }
Distance : 9

6
Tree	{ return reportMatcher ( Any.ANY ) . < returnZero > Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnZero > Any.ANY () ; }
Distance : 9

7
Tree	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; }
Distance : 11

8
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

9
Tree	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) ; }
Distance : 12

10
Tree	{ return ( Any.ANY ) reportMatcher ( reportMatcher ) ; }
Code	{ return ( Any.ANY ) reportMatcher ( reportMatcher ) ; }
Distance : 11

11
Tree	{ reportMatcher ( reportMatcher ) ; this . returnZero = Any.ANY ; }
Code	{ reportMatcher ( reportMatcher ) ; this . returnZero = Any.ANY ; }
Distance : 11

12
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

13
Tree	{ return this . reportMatcher ; }
Code	{ return this . reportMatcher ; }
Distance : 12

14
Tree	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

15
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Short = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Short = false ; }
Distance : 11

16
Tree	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

17
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; returnZero = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; returnZero = false ; }
Distance : 11

18
Tree	{ reportMatcher ( Any.ANY ) ; returnZero = InstanceOf . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnZero = InstanceOf . returnZero () ; }
Distance : 9

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

20
Tree	{ reportMatcher ( reportMatcher ) ; return null ; }
Code	{ reportMatcher ( reportMatcher ) ; return null ; }
Distance : 11

21
Tree	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; super }
Code	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; super }
Distance : 13

22
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

23
Tree	{ reportMatcher ( Short ) ; return false ; }
Code	{ reportMatcher ( Short ) ; return false ; }
Distance : 10

24
Tree	{ return Any.ANY ( Any.ANY ) ; }
Code	{ return Any.ANY ( Any.ANY ) ; }
Distance : 11

25
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

26
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

27
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

28
Tree	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) ; }
Distance : 12

29
Tree	{ return ( reportMatcher ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( reportMatcher ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

30
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

31
Tree	{ return this . returnZero ; }
Code	{ return this . returnZero ; }
Distance : 11

32
Tree	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

33
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

34
Tree	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

35
Tree	{ reportMatcher ( returnZero ) ; return null ; }
Code	{ reportMatcher ( returnZero ) ; return null ; }
Distance : 11

36
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = Any.ANY ; }
Distance : 11

37
Tree	{ reportMatcher ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Distance : 11

38
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . returnZero = reportMatcher ; }
Distance : 11

39
Tree	{ super ( InstanceOf ) ; }
Code	{ super ( InstanceOf ) ; }
Distance : 11

40
Tree	{ reportMatcher ( Any.ANY ) ; returnZero = reportMatcher . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnZero = reportMatcher . returnZero () ; }
Distance : 9

41
Tree	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) ; }
Distance : 12

42
Tree	{ reportMatcher ( reportMatcher ) . returnZero () ; this . returnZero = returnZero ; }
Code	{ reportMatcher ( reportMatcher ) . returnZero () ; this . returnZero = returnZero ; }
Distance : 11

43
Tree	{ return ( reportMatcher ) returnZero ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) returnZero ( Any.ANY ) ; }
Distance : 11

44
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; InstanceOf = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; InstanceOf = false ; }
Distance : 11

45
Tree	{ return reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ return reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 7

46
Tree	{ return reportMatcher ( Any.ANY ) . < returnZero > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnZero > returnZero () ; }
Distance : 8

47
Tree	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 9

48
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

49
Tree	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

50
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

51
Tree	{ return ( reportMatcher ) reportMatcher () ; }
Code	{ return ( reportMatcher ) reportMatcher () ; }
Distance : 10

52
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = Any.ANY ; }
Distance : 11

53
Tree	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) . returnZero () ; }
Code	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) . returnZero () ; }
Distance : 9

54
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = returnZero ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = returnZero ; }
Distance : 11

55
Tree	{ reportMatcher ( Short ) ; return null ; }
Code	{ reportMatcher ( Short ) ; return null ; }
Distance : 10

56
Tree	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

57
Tree	{ return ( InstanceOf ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( InstanceOf ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 7

58
Tree	{ return ( InstanceOf ) returnZero ( Any.ANY ) ; }
Code	{ return ( InstanceOf ) returnZero ( Any.ANY ) ; }
Distance : 10

59
Tree	{ return reportMatcher ( InstanceOf ) ; }
Code	{ return reportMatcher ( InstanceOf ) ; }
Distance : 9

60
Tree	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; }
Distance : 12

61
Tree	{ Any.ANY ( Any.ANY ) ; return false ; }
Code	{ Any.ANY ( Any.ANY ) ; return false ; }
Distance : 12

62
Tree	{ return Any.ANY ( reportMatcher ) ; }
Code	{ return Any.ANY ( reportMatcher ) ; }
Distance : 11

63
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = reportMatcher ; }
Distance : 11

64
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

65
Tree	{ Any.ANY ( Any.ANY ) ; return null ; }
Code	{ Any.ANY ( Any.ANY ) ; return null ; }
Distance : 12

66
Tree	{ return ( reportMatcher ) reportMatcher ( reportMatcher ) ; }
Code	{ return ( reportMatcher ) reportMatcher ( reportMatcher ) ; }
Distance : 11

67
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 14

68
Tree	{ return this . Short ; }
Code	{ return this . Short ; }
Distance : 12

69
Tree	{ return reportMatcher ( returnZero ) . returnZero () ; }
Code	{ return reportMatcher ( returnZero ) . returnZero () ; }
Distance : 7

70
Tree	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) . returnZero () ; }
Code	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) . returnZero () ; }
Distance : 8

71
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = InstanceOf ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = InstanceOf ; }
Distance : 11

72
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

73
Tree	{ reportMatcher ( anyShort ) ; return null ; }
Code	{ reportMatcher ( anyShort ) ; return null ; }
Distance : 11

74
Tree	{ return ( InstanceOf ) returnZero () ; }
Code	{ return ( InstanceOf ) returnZero () ; }
Distance : 8

75
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

76
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

77
Tree	{ return ( Any.ANY ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( Any.ANY ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

78
Tree	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Distance : 8

79
Tree	{ return ( Any.ANY ) returnZero ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) returnZero ( Any.ANY ) ; }
Distance : 11

80
Tree	{ return this . reportMatcher ; } Math
Code	{ return this . reportMatcher ; } Math
Distance : 13

81
Tree	{ return ( InstanceOf ) reportMatcher () ; }
Code	{ return ( InstanceOf ) reportMatcher () ; }
Distance : 9

82
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

83
Tree	{ return reportMatcher ( reportMatcher ) . < returnZero > returnZero () ; }
Code	{ return reportMatcher ( reportMatcher ) . < returnZero > returnZero () ; }
Distance : 8

84
Tree	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Distance : 11

85
Tree	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) ; super }
Distance : 12

86
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = Short ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = Short ; }
Distance : 11

87
Tree	{ return this . reportMatcher ; } i
Code	{ return this . reportMatcher ; } i
Distance : 13

88
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

89
Tree	{ return this . reportMatcher ; } options
Code	{ return this . reportMatcher ; } options
Distance : 13

90
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; returnZero = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; returnZero = false ; }
Distance : 11

91
Tree	{ return reportMatcher ( InstanceOf ) . returnZero () ; }
Code	{ return reportMatcher ( InstanceOf ) . returnZero () ; }
Distance : 6

92
Tree	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) ; }
Distance : 11

93
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Distance : 11

94
Tree	{ super ( reportMatcher ) ; } Math
Code	{ super ( reportMatcher ) ; } Math
Distance : 13

95
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = InstanceOf ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = InstanceOf ; }
Distance : 11

96
Tree	{ return reportMatcher ( Any.ANY ) . < returnZero > InstanceOf () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnZero > InstanceOf () ; }
Distance : 9

97
Tree	{ return ( Any.ANY ) reportMatcher () ; }
Code	{ return ( Any.ANY ) reportMatcher () ; }
Distance : 10

98
Tree	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

99
Tree	{ Any.ANY ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ Any.ANY ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

100
Tree	{ return reportMatcher ( Any.ANY ) . < reportMatcher > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < reportMatcher > returnZero () ; }
Distance : 8

101
Tree	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) ; super }
Code	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) ; super }
Distance : 13

102
Tree	{ reportMatcher ( returnZero ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( returnZero ) ; return NUMBER_CONSTANT ; }
Distance : 11

103
Tree	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

104
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; anyShort = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; anyShort = false ; }
Distance : 11

105
Tree	{ reportMatcher ( InstanceOf ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( InstanceOf ) ; return NUMBER_CONSTANT ; }
Distance : 10

106
Tree	{ return reportMatcher ( anyShort ) . returnZero () ; }
Code	{ return reportMatcher ( anyShort ) . returnZero () ; }
Distance : 7

107
Tree	{ reportMatcher ( reportMatcher ) . returnZero () ; returnZero = false ; }
Code	{ reportMatcher ( reportMatcher ) . returnZero () ; returnZero = false ; }
Distance : 11

108
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = Short ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = Short ; }
Distance : 11

109
Tree	{ return Any.ANY ( Any.ANY ) . returnZero () ; }
Code	{ return Any.ANY ( Any.ANY ) . returnZero () ; }
Distance : 8

110
Tree	{ return ( returnZero ) reportMatcher () ; }
Code	{ return ( returnZero ) reportMatcher () ; }
Distance : 10

111
Tree	{ return reportMatcher ( Any.ANY ) . < InstanceOf > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < InstanceOf > returnZero () ; }
Distance : 8

112
Tree	{ return reportMatcher ( Any.ANY ) . < returnZero > anyShort () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnZero > anyShort () ; }
Distance : 9

113
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = returnZero ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = returnZero ; }
Distance : 10

114
Tree	{ reportMatcher ( anyShort ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( anyShort ) ; return NUMBER_CONSTANT ; }
Distance : 11

115
Tree	{ super ( reportMatcher ) ; } i
Code	{ super ( reportMatcher ) ; } i
Distance : 13

116
Tree	{ super ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; }
Distance : 12

117
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 14

118
Tree	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = Any.ANY ; }
Distance : 11

119
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 14

120
Tree	{ reportMatcher ( InstanceOf ) . returnZero () ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( InstanceOf ) . returnZero () ; this . returnZero = reportMatcher ; }
Distance : 10

121
Tree	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

122
Tree	{ reportMatcher ( reportMatcher ) ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( reportMatcher ) ; this . returnZero = reportMatcher ; }
Distance : 11

123
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Matchers = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Matchers = false ; }
Distance : 11

124
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 14

125
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = reportMatcher ; }
Distance : 11

126
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

127
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

128
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

129
Tree	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

130
Tree	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 9

131
Tree	{ return this . InstanceOf ; }
Code	{ return this . InstanceOf ; }
Distance : 12

132
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

133
Tree	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) ; }
Distance : 11

134
Tree	{ return ( reportMatcher ) Any.ANY () ; }
Code	{ return ( reportMatcher ) Any.ANY () ; }
Distance : 10

135
Tree	{ returnZero ( Any.ANY ) ; return false ; }
Code	{ returnZero ( Any.ANY ) ; return false ; }
Distance : 12

136
Tree	{ super ( Short ) ; }
Code	{ super ( Short ) ; }
Distance : 11

137
Tree	{ super ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; }
Distance : 12

138
Tree	{ return reportMatcher ( reportMatcher ) ; }
Code	{ return reportMatcher ( reportMatcher ) ; }
Distance : 10

139
Tree	{ return reportMatcher ( Any.ANY ) . < Any.ANY > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Any.ANY > returnZero () ; }
Distance : 8

140
Tree	{ return ( Any.ANY ) Any.ANY () ; }
Code	{ return ( Any.ANY ) Any.ANY () ; }
Distance : 10

141
Tree	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 12

142
Tree	{ return this . Any.ANY ; }
Code	{ return this . Any.ANY ; }
Distance : 12

143
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

144
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

145
Tree	{ InstanceOf ( Any.ANY ) ; return null ; }
Code	{ InstanceOf ( Any.ANY ) ; return null ; }
Distance : 11

146
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher = Any.ANY . returnZero () ; }
Distance : 9

147
Tree	{ reportMatcher ( Any.ANY ) ; this . reportMatcher = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . reportMatcher = Any.ANY ; }
Distance : 11

148
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

149
Tree	{ reportMatcher ( Any.ANY ) ; Any.ANY = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Any.ANY = Any.ANY . returnZero () ; }
Distance : 9

150
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; reportMatcher = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; reportMatcher = false ; }
Distance : 11

151
Tree	{ super ( reportMatcher ) ; } options
Code	{ super ( reportMatcher ) ; } options
Distance : 13

152
Tree	{ super ( returnZero ) ; }
Code	{ super ( returnZero ) ; }
Distance : 12

153
Tree	{ return reportMatcher ( returnZero ) ; }
Code	{ return reportMatcher ( returnZero ) ; }
Distance : 10

154
Tree	{ return reportMatcher ( anyShort ) ; }
Code	{ return reportMatcher ( anyShort ) ; }
Distance : 10

155
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

156
Tree	{ reportMatcher ( reportMatcher ) . returnZero () ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( reportMatcher ) . returnZero () ; this . returnZero = reportMatcher ; }
Distance : 11

157
Tree	{ InstanceOf ( Any.ANY ) ; return false ; }
Code	{ InstanceOf ( Any.ANY ) ; return false ; }
Distance : 11

158
Tree	{ return reportMatcher ( Any.ANY ) . < reportMatcher > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < reportMatcher > reportMatcher () ; }
Distance : 9

159
Tree	{ InstanceOf ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ InstanceOf ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

160
Tree	{ reportMatcher ( Any.ANY ) ; Any.ANY = reportMatcher . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Any.ANY = reportMatcher . returnZero () ; }
Distance : 9

161
Tree	{ return InstanceOf ( Any.ANY ) ; }
Code	{ return InstanceOf ( Any.ANY ) ; }
Distance : 10

162
Tree	{ return ( reportMatcher ) reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ return ( reportMatcher ) reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 8

163
Tree	{ super ( anyShort ) ; }
Code	{ super ( anyShort ) ; }
Distance : 12

164
Tree	{ return reportMatcher ( Any.ANY ) . < returnZero > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnZero > reportMatcher () ; }
Distance : 9

165
Tree	{ return this . Matchers ; }
Code	{ return this . Matchers ; }
Distance : 12

166
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

167
Tree	{ return InstanceOf ( Any.ANY ) . returnZero () ; }
Code	{ return InstanceOf ( Any.ANY ) . returnZero () ; }
Distance : 7

168
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Distance : 11

169
Tree	{ reportMatcher ( InstanceOf ) . returnZero () ; returnZero = false ; }
Code	{ reportMatcher ( InstanceOf ) . returnZero () ; returnZero = false ; }
Distance : 10

170
Tree	{ reportMatcher ( InstanceOf ) ; this . returnZero = Any.ANY ; }
Code	{ reportMatcher ( InstanceOf ) ; this . returnZero = Any.ANY ; }
Distance : 10

171
Tree	{ reportMatcher ( anyShort ) ; return false ; }
Code	{ reportMatcher ( anyShort ) ; return false ; }
Distance : 11

172
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher = reportMatcher . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher = reportMatcher . returnZero () ; }
Distance : 9

173
Tree	{ return ( Any.ANY ) returnZero () ; }
Code	{ return ( Any.ANY ) returnZero () ; }
Distance : 9

174
Tree	{ reportMatcher ( Short ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Short ) ; return NUMBER_CONSTANT ; }
Distance : 10

175
Tree	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

176
Tree	{ reportMatcher ( returnZero ) ; return false ; }
Code	{ reportMatcher ( returnZero ) ; return false ; }
Distance : 11

177
Tree	{ InstanceOf ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Code	{ InstanceOf ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Distance : 11

178
Tree	{ return returnZero ( Any.ANY ) ; }
Code	{ return returnZero ( Any.ANY ) ; }
Distance : 11

179
Tree	{ reportMatcher ( InstanceOf ) ; return false ; }
Code	{ reportMatcher ( InstanceOf ) ; return false ; }
Distance : 10

180
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

181
Tree	{ reportMatcher ( InstanceOf ) ; return null ; }
Code	{ reportMatcher ( InstanceOf ) ; return null ; }
Distance : 10

182
Tree	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) ; super }
Code	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) ; super }
Distance : 13

183
Tree	{ return ( returnZero ) returnZero () ; }
Code	{ return ( returnZero ) returnZero () ; }
Distance : 9

184
Tree	{ reportMatcher ( Any.ANY ) ; returnZero = returnZero . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnZero = returnZero . returnZero () ; }
Distance : 9

185
Tree	{ return this . anyShort ; }
Code	{ return this . anyShort ; }
Distance : 12

186
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

187
Tree	{ reportMatcher ( reportMatcher ) ; returnZero = reportMatcher . returnZero () ; }
Code	{ reportMatcher ( reportMatcher ) ; returnZero = reportMatcher . returnZero () ; }
Distance : 9

188
Tree	{ return reportMatcher ( Short ) ; }
Code	{ return reportMatcher ( Short ) ; }
Distance : 9

189
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

190
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

191
Tree	{ reportMatcher ( Any.ANY ) ; returnZero = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnZero = Any.ANY . returnZero () ; }
Distance : 9

192
Tree	{ return reportMatcher ( Short ) . returnZero () ; }
Code	{ return reportMatcher ( Short ) . returnZero () ; }
Distance : 6

193
Tree	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) ; }
Distance : 12

194
Tree	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) ; }
Distance : 10

195
Tree	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

196
Tree	{ super ( Matchers ) ; }
Code	{ super ( Matchers ) ; }
Distance : 12

197
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = anyShort ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = anyShort ; }
Distance : 11

198
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

199
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

========================================================================


========================================================================
Example Number: 100
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Double . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Double})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return reportMatcher ( Any.ANY ) . < returnZero > Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnZero > Any.ANY () ; }
Distance : 9

1
Tree	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) ; }
Distance : 12

2
Tree	{ return ( reportMatcher ) returnZero () ; }
Code	{ return ( reportMatcher ) returnZero () ; }
Distance : 9

3
Tree	{ return Any.ANY ( Any.ANY ) ; }
Code	{ return Any.ANY ( Any.ANY ) ; }
Distance : 11

4
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Double = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Double = false ; }
Distance : 11

5
Tree	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

6
Tree	{ reportMatcher ( anyDouble ) ; return null ; }
Code	{ reportMatcher ( anyDouble ) ; return null ; }
Distance : 11

7
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

8
Tree	{ return ( Any.ANY ) reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ return ( Any.ANY ) reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 8

9
Tree	{ return ( Any.ANY ) reportMatcher ( reportMatcher ) ; }
Code	{ return ( Any.ANY ) reportMatcher ( reportMatcher ) ; }
Distance : 11

10
Tree	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; }
Distance : 11

11
Tree	{ reportMatcher ( reportMatcher ) ; return false ; }
Code	{ reportMatcher ( reportMatcher ) ; return false ; }
Distance : 11

12
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

13
Tree	{ return this . reportMatcher ; }
Code	{ return this . reportMatcher ; }
Distance : 12

14
Tree	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

15
Tree	{ reportMatcher ( reportMatcher ) ; this . returnZero = Any.ANY ; }
Code	{ reportMatcher ( reportMatcher ) ; this . returnZero = Any.ANY ; }
Distance : 11

16
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher = InstanceOf . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher = InstanceOf . returnZero () ; }
Distance : 9

17
Tree	{ return ( returnZero ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( returnZero ) reportMatcher ( Any.ANY ) ; }
Distance : 11

18
Tree	{ return ( returnZero ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( returnZero ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

20
Tree	{ reportMatcher ( reportMatcher ) ; return null ; }
Code	{ reportMatcher ( reportMatcher ) ; return null ; }
Distance : 11

21
Tree	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; super }
Code	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; super }
Distance : 13

22
Tree	{ return ( reportMatcher ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( reportMatcher ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

23
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; InstanceOf = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; InstanceOf = false ; }
Distance : 11

24
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

25
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

26
Tree	{ super ( anyDouble ) ; }
Code	{ super ( anyDouble ) ; }
Distance : 12

27
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

28
Tree	{ return reportMatcher ( InstanceOf ) ; }
Code	{ return reportMatcher ( InstanceOf ) ; }
Distance : 9

29
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

30
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

31
Tree	{ return this . returnZero ; }
Code	{ return this . returnZero ; }
Distance : 11

32
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

33
Tree	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

34
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

35
Tree	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

36
Tree	{ reportMatcher ( returnZero ) ; return null ; }
Code	{ reportMatcher ( returnZero ) ; return null ; }
Distance : 11

37
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = Any.ANY ; }
Distance : 11

38
Tree	{ reportMatcher ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Distance : 11

39
Tree	{ return anyDouble ( Any.ANY ) . returnZero () ; }
Code	{ return anyDouble ( Any.ANY ) . returnZero () ; }
Distance : 8

40
Tree	{ return ( reportMatcher ) returnZero ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) returnZero ( Any.ANY ) ; }
Distance : 11

41
Tree	{ reportMatcher ( Any.ANY ) ; returnZero = reportMatcher . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnZero = reportMatcher . returnZero () ; }
Distance : 9

42
Tree	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 9

43
Tree	{ super ( InstanceOf ) ; }
Code	{ super ( InstanceOf ) ; }
Distance : 11

44
Tree	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) ; }
Distance : 12

45
Tree	{ return reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ return reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 7

46
Tree	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

47
Tree	{ return Any.ANY ( reportMatcher ) ; }
Code	{ return Any.ANY ( reportMatcher ) ; }
Distance : 11

48
Tree	{ return reportMatcher ( Any.ANY ) . < returnZero > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnZero > returnZero () ; }
Distance : 8

49
Tree	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) ; }
Distance : 12

50
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

51
Tree	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

52
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = Any.ANY ; }
Distance : 11

53
Tree	{ return ( reportMatcher ) reportMatcher () ; }
Code	{ return ( reportMatcher ) reportMatcher () ; }
Distance : 10

54
Tree	{ return ( InstanceOf ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( InstanceOf ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 7

55
Tree	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) . returnZero () ; }
Code	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) . returnZero () ; }
Distance : 9

56
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = returnZero ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = returnZero ; }
Distance : 11

57
Tree	{ Any.ANY ( Any.ANY ) ; return false ; }
Code	{ Any.ANY ( Any.ANY ) ; return false ; }
Distance : 12

58
Tree	{ return ( InstanceOf ) returnZero ( Any.ANY ) ; }
Code	{ return ( InstanceOf ) returnZero ( Any.ANY ) ; }
Distance : 10

59
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = reportMatcher ; }
Distance : 11

60
Tree	{ return ( InstanceOf ) reportMatcher () ; }
Code	{ return ( InstanceOf ) reportMatcher () ; }
Distance : 9

61
Tree	{ return ( reportMatcher ) reportMatcher ( reportMatcher ) ; }
Code	{ return ( reportMatcher ) reportMatcher ( reportMatcher ) ; }
Distance : 11

62
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

63
Tree	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; }
Distance : 12

64
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

65
Tree	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Distance : 11

66
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

67
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

68
Tree	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) ; super }
Distance : 12

69
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

70
Tree	{ reportMatcher ( InstanceOf ) ; return false ; }
Code	{ reportMatcher ( InstanceOf ) ; return false ; }
Distance : 10

71
Tree	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) . returnZero () ; }
Code	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) . returnZero () ; }
Distance : 8

72
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = InstanceOf ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = InstanceOf ; }
Distance : 11

73
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; returnZero = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; returnZero = false ; }
Distance : 11

74
Tree	{ return reportMatcher ( returnZero ) . returnZero () ; }
Code	{ return reportMatcher ( returnZero ) . returnZero () ; }
Distance : 7

75
Tree	{ return ( InstanceOf ) returnZero () ; }
Code	{ return ( InstanceOf ) returnZero () ; }
Distance : 8

76
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

77
Tree	{ return reportMatcher ( InstanceOf ) . returnZero () ; }
Code	{ return reportMatcher ( InstanceOf ) . returnZero () ; }
Distance : 6

78
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

79
Tree	{ return ( Any.ANY ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( Any.ANY ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

80
Tree	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Distance : 8

81
Tree	{ return ( Any.ANY ) returnZero ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) returnZero ( Any.ANY ) ; }
Distance : 11

82
Tree	{ return ( reportMatcher ) reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ return ( reportMatcher ) reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 8

83
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

84
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

85
Tree	{ return reportMatcher ( reportMatcher ) . < returnZero > returnZero () ; }
Code	{ return reportMatcher ( reportMatcher ) . < returnZero > returnZero () ; }
Distance : 8

86
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

87
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

88
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

89
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; returnZero = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; returnZero = false ; }
Distance : 11

90
Tree	{ reportMatcher ( InstanceOf ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( InstanceOf ) ; return NUMBER_CONSTANT ; }
Distance : 10

91
Tree	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) ; }
Distance : 11

92
Tree	{ return reportMatcher ( returnZero ) ; }
Code	{ return reportMatcher ( returnZero ) ; }
Distance : 10

93
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Distance : 11

94
Tree	{ super ( reportMatcher ) ; } Math
Code	{ super ( reportMatcher ) ; } Math
Distance : 13

95
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = InstanceOf ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = InstanceOf ; }
Distance : 11

96
Tree	{ reportMatcher ( returnZero ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( returnZero ) ; return NUMBER_CONSTANT ; }
Distance : 11

97
Tree	{ return ( Any.ANY ) reportMatcher () ; }
Code	{ return ( Any.ANY ) reportMatcher () ; }
Distance : 10

98
Tree	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

99
Tree	{ reportMatcher ( InstanceOf ) . returnZero () ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( InstanceOf ) . returnZero () ; this . returnZero = reportMatcher ; }
Distance : 10

100
Tree	{ return reportMatcher ( Any.ANY ) . < reportMatcher > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < reportMatcher > returnZero () ; }
Distance : 8

101
Tree	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) ; super }
Code	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) ; super }
Distance : 13

102
Tree	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = Any.ANY ; }
Distance : 11

103
Tree	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

104
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Matchers = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Matchers = false ; }
Distance : 11

105
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = returnZero ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = returnZero ; }
Distance : 10

106
Tree	{ reportMatcher ( reportMatcher ) ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( reportMatcher ) ; this . returnZero = reportMatcher ; }
Distance : 11

107
Tree	{ reportMatcher ( anyDouble ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( anyDouble ) ; return NUMBER_CONSTANT ; }
Distance : 11

108
Tree	{ return reportMatcher ( anyDouble ) . returnZero () ; }
Code	{ return reportMatcher ( anyDouble ) . returnZero () ; }
Distance : 7

109
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

110
Tree	{ return Any.ANY ( Any.ANY ) . returnZero () ; }
Code	{ return Any.ANY ( Any.ANY ) . returnZero () ; }
Distance : 8

111
Tree	{ return ( reportMatcher ) Any.ANY () ; }
Code	{ return ( reportMatcher ) Any.ANY () ; }
Distance : 10

112
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

113
Tree	{ return reportMatcher ( reportMatcher ) ; }
Code	{ return reportMatcher ( reportMatcher ) ; }
Distance : 10

114
Tree	{ return reportMatcher ( Any.ANY ) . < Any.ANY > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Any.ANY > returnZero () ; }
Distance : 8

115
Tree	{ reportMatcher ( InstanceOf ) . returnZero () ; this . returnZero = returnZero ; }
Code	{ reportMatcher ( InstanceOf ) . returnZero () ; this . returnZero = returnZero ; }
Distance : 10

116
Tree	{ super ( reportMatcher ) ; } i
Code	{ super ( reportMatcher ) ; } i
Distance : 13

117
Tree	{ super ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; }
Distance : 12

118
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 14

119
Tree	{ return ( Any.ANY ) Any.ANY () ; }
Code	{ return ( Any.ANY ) Any.ANY () ; }
Distance : 10

120
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 14

121
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

122
Tree	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

123
Tree	{ reportMatcher ( reportMatcher ) . returnZero () ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( reportMatcher ) . returnZero () ; this . returnZero = reportMatcher ; }
Distance : 11

124
Tree	{ InstanceOf ( Any.ANY ) ; return false ; }
Code	{ InstanceOf ( Any.ANY ) ; return false ; }
Distance : 11

125
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = reportMatcher ; }
Distance : 11

126
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

127
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = anyDouble ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = anyDouble ; }
Distance : 11

128
Tree	{ return this . reportMatcher ; } Math
Code	{ return this . reportMatcher ; } Math
Distance : 13

129
Tree	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

130
Tree	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 9

131
Tree	{ return this . InstanceOf ; }
Code	{ return this . InstanceOf ; }
Distance : 12

132
Tree	{ return this . reportMatcher ; } i
Code	{ return this . reportMatcher ; } i
Distance : 13

133
Tree	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) ; }
Distance : 11

134
Tree	{ reportMatcher ( Any.ANY ) ; this . reportMatcher = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . reportMatcher = Any.ANY ; }
Distance : 11

135
Tree	{ return this . Matchers ; }
Code	{ return this . Matchers ; }
Distance : 12

136
Tree	{ reportMatcher ( Double ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Double ) ; return NUMBER_CONSTANT ; }
Distance : 10

137
Tree	{ super ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; }
Distance : 12

138
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; reportMatcher = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; reportMatcher = false ; }
Distance : 11

139
Tree	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

140
Tree	{ return InstanceOf ( Any.ANY ) . returnZero () ; }
Code	{ return InstanceOf ( Any.ANY ) . returnZero () ; }
Distance : 7

141
Tree	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 12

142
Tree	{ return this . Any.ANY ; }
Code	{ return this . Any.ANY ; }
Distance : 12

143
Tree	{ return reportMatcher ( Any.ANY ) . < returnZero > anyDouble () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnZero > anyDouble () ; }
Distance : 9

144
Tree	{ reportMatcher ( InstanceOf ) . returnZero () ; returnZero = false ; }
Code	{ reportMatcher ( InstanceOf ) . returnZero () ; returnZero = false ; }
Distance : 10

145
Tree	{ InstanceOf ( Any.ANY ) ; return null ; }
Code	{ InstanceOf ( Any.ANY ) ; return null ; }
Distance : 11

146
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher = Any.ANY . returnZero () ; }
Distance : 9

147
Tree	{ reportMatcher ( Any.ANY ) ; Any.ANY = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Any.ANY = Any.ANY . returnZero () ; }
Distance : 9

148
Tree	{ return this . reportMatcher ; } options
Code	{ return this . reportMatcher ; } options
Distance : 13

149
Tree	{ return reportMatcher ( Any.ANY ) . < reportMatcher > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < reportMatcher > reportMatcher () ; }
Distance : 9

150
Tree	{ return ( returnZero ) reportMatcher () ; }
Code	{ return ( returnZero ) reportMatcher () ; }
Distance : 10

151
Tree	{ super ( reportMatcher ) ; } options
Code	{ super ( reportMatcher ) ; } options
Distance : 13

152
Tree	{ super ( returnZero ) ; }
Code	{ super ( returnZero ) ; }
Distance : 12

153
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Distance : 11

154
Tree	{ super ( Double ) ; }
Code	{ super ( Double ) ; }
Distance : 11

155
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

156
Tree	{ return ( returnZero ) returnZero () ; }
Code	{ return ( returnZero ) returnZero () ; }
Distance : 9

157
Tree	{ reportMatcher ( returnZero ) ; return false ; }
Code	{ reportMatcher ( returnZero ) ; return false ; }
Distance : 11

158
Tree	{ InstanceOf ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ InstanceOf ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

159
Tree	{ reportMatcher ( Any.ANY ) ; returnZero = returnZero . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnZero = returnZero . returnZero () ; }
Distance : 9

160
Tree	{ return this . anyDouble ; }
Code	{ return this . anyDouble ; }
Distance : 12

161
Tree	{ anyDouble ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ anyDouble ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

162
Tree	{ Any.ANY ( Any.ANY ) ; return null ; }
Code	{ Any.ANY ( Any.ANY ) ; return null ; }
Distance : 12

163
Tree	{ return anyDouble ( Any.ANY ) ; }
Code	{ return anyDouble ( Any.ANY ) ; }
Distance : 11

164
Tree	{ return reportMatcher ( Any.ANY ) . < returnZero > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnZero > reportMatcher () ; }
Distance : 9

165
Tree	{ return returnZero ( Any.ANY ) ; }
Code	{ return returnZero ( Any.ANY ) ; }
Distance : 11

166
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

167
Tree	{ Any.ANY ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ Any.ANY ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

168
Tree	{ return reportMatcher ( anyDouble ) ; }
Code	{ return reportMatcher ( anyDouble ) ; }
Distance : 10

169
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; anyDouble = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; anyDouble = false ; }
Distance : 11

170
Tree	{ reportMatcher ( Any.ANY ) ; Any.ANY = reportMatcher . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Any.ANY = reportMatcher . returnZero () ; }
Distance : 9

171
Tree	{ returnZero ( Any.ANY ) ; return false ; }
Code	{ returnZero ( Any.ANY ) ; return false ; }
Distance : 12

172
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher = reportMatcher . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher = reportMatcher . returnZero () ; }
Distance : 9

173
Tree	{ return ( Any.ANY ) returnZero () ; }
Code	{ return ( Any.ANY ) returnZero () ; }
Distance : 9

174
Tree	{ reportMatcher ( InstanceOf ) ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( InstanceOf ) ; this . returnZero = reportMatcher ; }
Distance : 10

175
Tree	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) ; }
Distance : 12

176
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . returnZero = reportMatcher ; }
Distance : 11

177
Tree	{ return this . Double ; }
Code	{ return this . Double ; }
Distance : 12

178
Tree	{ reportMatcher ( Double ) ; return false ; }
Code	{ reportMatcher ( Double ) ; return false ; }
Distance : 10

179
Tree	{ reportMatcher ( InstanceOf ) ; this . returnZero = Any.ANY ; }
Code	{ reportMatcher ( InstanceOf ) ; this . returnZero = Any.ANY ; }
Distance : 10

180
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

181
Tree	{ reportMatcher ( InstanceOf ) ; return null ; }
Code	{ reportMatcher ( InstanceOf ) ; return null ; }
Distance : 10

182
Tree	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) ; super }
Code	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) ; super }
Distance : 13

183
Tree	{ reportMatcher ( reportMatcher ) . returnZero () ; returnZero = false ; }
Code	{ reportMatcher ( reportMatcher ) . returnZero () ; returnZero = false ; }
Distance : 11

184
Tree	{ reportMatcher ( reportMatcher ) ; returnZero = reportMatcher . returnZero () ; }
Code	{ reportMatcher ( reportMatcher ) ; returnZero = reportMatcher . returnZero () ; }
Distance : 9

185
Tree	{ reportMatcher ( reportMatcher ) . returnZero () ; this . returnZero = returnZero ; }
Code	{ reportMatcher ( reportMatcher ) . returnZero () ; this . returnZero = returnZero ; }
Distance : 11

186
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

187
Tree	{ return reportMatcher ( Any.ANY ) . < returnZero > InstanceOf () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnZero > InstanceOf () ; }
Distance : 9

188
Tree	{ return InstanceOf ( Any.ANY ) ; }
Code	{ return InstanceOf ( Any.ANY ) ; }
Distance : 10

189
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

190
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

191
Tree	{ reportMatcher ( Any.ANY ) ; returnZero = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnZero = Any.ANY . returnZero () ; }
Distance : 9

192
Tree	{ return reportMatcher ( Any.ANY ) . < InstanceOf > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < InstanceOf > returnZero () ; }
Distance : 8

193
Tree	{ reportMatcher ( Any.ANY ) ; returnZero = InstanceOf . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnZero = InstanceOf . returnZero () ; }
Distance : 9

194
Tree	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) ; }
Distance : 10

195
Tree	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

196
Tree	{ super ( Matchers ) ; }
Code	{ super ( Matchers ) ; }
Distance : 12

197
Tree	{ reportMatcher ( anyDouble ) ; return false ; }
Code	{ reportMatcher ( anyDouble ) ; return false ; }
Distance : 11

198
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 14

199
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 14

========================================================================


========================================================================
Example Number: 101
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Float . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Float})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; }
Distance : 11

1
Tree	{ return ( Any.ANY ) reportMatcher ( reportMatcher ) ; }
Code	{ return ( Any.ANY ) reportMatcher ( reportMatcher ) ; }
Distance : 11

2
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

3
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

4
Tree	{ Any.ANY ( Any.ANY ) ; return false ; }
Code	{ Any.ANY ( Any.ANY ) ; return false ; }
Distance : 12

5
Tree	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

6
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Float ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

7
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

8
Tree	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) ; }
Distance : 12

9
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

10
Tree	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

11
Tree	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) ; }
Distance : 12

12
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Float ) reportMatcher ( Any.ANY ) ; }
Distance : 10

13
Tree	{ reportMatcher ( Any.ANY ) ; returnZero = InstanceOf . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnZero = InstanceOf . returnZero () ; }
Distance : 9

14
Tree	{ return this . Float ; }
Code	{ return this . Float ; }
Distance : 12

15
Tree	{ return reportMatcher ( Any.ANY ) . < returnZero > Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnZero > Any.ANY () ; }
Distance : 9

16
Tree	{ return ( Any.ANY ) reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ return ( Any.ANY ) reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 8

17
Tree	{ return this . reportMatcher ; }
Code	{ return this . reportMatcher ; }
Distance : 12

18
Tree	{ return ( reportMatcher ) returnZero () ; }
Code	{ return ( reportMatcher ) returnZero () ; }
Distance : 9

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

20
Tree	{ reportMatcher ( reportMatcher ) ; return null ; }
Code	{ reportMatcher ( reportMatcher ) ; return null ; }
Distance : 11

21
Tree	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; super }
Code	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; super }
Distance : 13

22
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

23
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; returnZero = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; returnZero = false ; }
Distance : 11

24
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

25
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

26
Tree	{ return ( reportMatcher ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( reportMatcher ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

27
Tree	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

28
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

29
Tree	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

30
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

31
Tree	{ reportMatcher ( returnZero ) ; return null ; }
Code	{ reportMatcher ( returnZero ) ; return null ; }
Distance : 11

32
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

33
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

34
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = Any.ANY ; }
Distance : 11

35
Tree	{ InstanceOf ( Any.ANY ) ; return false ; }
Code	{ InstanceOf ( Any.ANY ) ; return false ; }
Distance : 11

36
Tree	{ reportMatcher ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Distance : 11

37
Tree	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) ; }
Distance : 12

38
Tree	{ return this . returnZero ; }
Code	{ return this . returnZero ; }
Distance : 11

39
Tree	{ return ( reportMatcher ) returnZero ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) returnZero ( Any.ANY ) ; }
Distance : 11

40
Tree	{ return reportMatcher ( Any.ANY ) . < returnZero > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnZero > returnZero () ; }
Distance : 8

41
Tree	{ reportMatcher ( Any.ANY ) ; returnZero = reportMatcher . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnZero = reportMatcher . returnZero () ; }
Distance : 9

42
Tree	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 9

43
Tree	{ return reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ return reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 7

44
Tree	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

45
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

46
Tree	{ return ( reportMatcher ) reportMatcher () ; }
Code	{ return ( reportMatcher ) reportMatcher () ; }
Distance : 10

47
Tree	{ super ( InstanceOf ) ; }
Code	{ super ( InstanceOf ) ; }
Distance : 11

48
Tree	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) . returnZero () ; }
Code	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) . returnZero () ; }
Distance : 9

49
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = returnZero ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = returnZero ; }
Distance : 11

50
Tree	{ reportMatcher ( Float ) ; return null ; }
Code	{ reportMatcher ( Float ) ; return null ; }
Distance : 10

51
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = Any.ANY ; }
Distance : 11

52
Tree	{ reportMatcher ( anyFloat ) ; return null ; }
Code	{ reportMatcher ( anyFloat ) ; return null ; }
Distance : 11

53
Tree	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

54
Tree	{ return ( InstanceOf ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( InstanceOf ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 7

55
Tree	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

56
Tree	{ reportMatcher ( InstanceOf ) . returnZero () ; returnZero = false ; }
Code	{ reportMatcher ( InstanceOf ) . returnZero () ; returnZero = false ; }
Distance : 10

57
Tree	{ return Float ( Any.ANY ) ; }
Code	{ return Float ( Any.ANY ) ; }
Distance : 11

58
Tree	{ reportMatcher ( returnZero ) ; return false ; }
Code	{ reportMatcher ( returnZero ) ; return false ; }
Distance : 11

59
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = reportMatcher ; }
Distance : 11

60
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = anyFloat ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = anyFloat ; }
Distance : 11

61
Tree	{ return ( reportMatcher ) reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ return ( reportMatcher ) reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 8

62
Tree	{ reportMatcher ( Float ) ; return false ; }
Code	{ reportMatcher ( Float ) ; return false ; }
Distance : 10

63
Tree	{ return ( returnZero ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( returnZero ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

64
Tree	{ reportMatcher ( reportMatcher ) ; return false ; }
Code	{ reportMatcher ( reportMatcher ) ; return false ; }
Distance : 11

65
Tree	{ reportMatcher ( anyFloat ) ; return false ; }
Code	{ reportMatcher ( anyFloat ) ; return false ; }
Distance : 11

66
Tree	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; }
Distance : 12

67
Tree	{ return reportMatcher ( anyFloat ) . returnZero () ; }
Code	{ return reportMatcher ( anyFloat ) . returnZero () ; }
Distance : 7

68
Tree	{ return ( returnZero ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( returnZero ) reportMatcher ( Any.ANY ) ; }
Distance : 11

69
Tree	{ Any.ANY ( Any.ANY ) ; return null ; }
Code	{ Any.ANY ( Any.ANY ) ; return null ; }
Distance : 12

70
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

71
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = Float ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = Float ; }
Distance : 11

73
Tree	{ return Any.ANY ( Any.ANY ) . returnZero () ; }
Code	{ return Any.ANY ( Any.ANY ) . returnZero () ; }
Distance : 8

74
Tree	{ return ( Any.ANY ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( Any.ANY ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

75
Tree	{ return ( InstanceOf ) returnZero ( Any.ANY ) ; }
Code	{ return ( InstanceOf ) returnZero ( Any.ANY ) ; }
Distance : 10

76
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

77
Tree	{ super ( returnZero ) ; }
Code	{ super ( returnZero ) ; }
Distance : 12

78
Tree	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) ; }
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; Any.ANY = reportMatcher . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Any.ANY = reportMatcher . returnZero () ; }
Distance : 9

80
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

81
Tree	{ reportMatcher ( InstanceOf ) ; this . returnZero = Any.ANY ; }
Code	{ reportMatcher ( InstanceOf ) ; this . returnZero = Any.ANY ; }
Distance : 10

82
Tree	{ super ( reportMatcher ) ; } i
Code	{ super ( reportMatcher ) ; } i
Distance : 13

83
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; returnZero = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; returnZero = false ; }
Distance : 11

84
Tree	{ return ( Any.ANY ) returnZero ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) returnZero ( Any.ANY ) ; }
Distance : 11

85
Tree	{ return ( reportMatcher ) reportMatcher ( reportMatcher ) ; }
Code	{ return ( reportMatcher ) reportMatcher ( reportMatcher ) ; }
Distance : 11

86
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher = InstanceOf . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher = InstanceOf . returnZero () ; }
Distance : 9

87
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Distance : 11

88
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

89
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

90
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

91
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = InstanceOf ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = InstanceOf ; }
Distance : 11

92
Tree	{ return ( Any.ANY ) reportMatcher () ; }
Code	{ return ( Any.ANY ) reportMatcher () ; }
Distance : 10

93
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

94
Tree	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Distance : 11

95
Tree	{ return reportMatcher ( Any.ANY ) . < reportMatcher > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < reportMatcher > returnZero () ; }
Distance : 8

96
Tree	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

97
Tree	{ reportMatcher ( Any.ANY ) ; this . reportMatcher = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . reportMatcher = Any.ANY ; }
Distance : 11

98
Tree	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

99
Tree	{ reportMatcher ( reportMatcher ) . returnZero () ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( reportMatcher ) . returnZero () ; this . returnZero = reportMatcher ; }
Distance : 11

100
Tree	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) ; super }
Distance : 12

101
Tree	{ reportMatcher ( Any.ANY ) ; Any.ANY = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Any.ANY = Any.ANY . returnZero () ; }
Distance : 9

102
Tree	{ reportMatcher ( anyFloat ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( anyFloat ) ; return NUMBER_CONSTANT ; }
Distance : 11

103
Tree	{ return ( Float ) reportMatcher () ; }
Code	{ return ( Float ) reportMatcher () ; }
Distance : 9

104
Tree	{ return reportMatcher ( Float ) ; }
Code	{ return reportMatcher ( Float ) ; }
Distance : 9

105
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = InstanceOf ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = InstanceOf ; }
Distance : 11

106
Tree	{ return reportMatcher ( Any.ANY ) . < reportMatcher > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < reportMatcher > reportMatcher () ; }
Distance : 9

107
Tree	{ return reportMatcher ( reportMatcher ) . < returnZero > returnZero () ; }
Code	{ return reportMatcher ( reportMatcher ) . < returnZero > returnZero () ; }
Distance : 8

108
Tree	{ return InstanceOf ( Any.ANY ) . returnZero () ; }
Code	{ return InstanceOf ( Any.ANY ) . returnZero () ; }
Distance : 7

109
Tree	{ super ( Float ) ; }
Code	{ super ( Float ) ; }
Distance : 11

110
Tree	{ reportMatcher ( InstanceOf ) ; return false ; }
Code	{ reportMatcher ( InstanceOf ) ; return false ; }
Distance : 10

111
Tree	{ return reportMatcher ( InstanceOf ) . returnZero () ; }
Code	{ return reportMatcher ( InstanceOf ) . returnZero () ; }
Distance : 6

112
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . returnZero = reportMatcher ; }
Distance : 11

113
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

114
Tree	{ super ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; }
Distance : 12

115
Tree	{ super ( reportMatcher ) ; } options
Code	{ super ( reportMatcher ) ; } options
Distance : 13

116
Tree	{ return ( Float ) returnZero () ; }
Code	{ return ( Float ) returnZero () ; }
Distance : 8

117
Tree	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

118
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

119
Tree	{ Any.ANY ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ Any.ANY ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

120
Tree	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

121
Tree	{ InstanceOf ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ InstanceOf ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

122
Tree	{ return this . anyFloat ; }
Code	{ return this . anyFloat ; }
Distance : 12

123
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 14

124
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = reportMatcher ; }
Distance : 11

125
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 14

126
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

127
Tree	{ reportMatcher ( reportMatcher ) . returnZero () ; this . returnZero = returnZero ; }
Code	{ reportMatcher ( reportMatcher ) . returnZero () ; this . returnZero = returnZero ; }
Distance : 11

128
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 14

129
Tree	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

130
Tree	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 9

131
Tree	{ return this . InstanceOf ; }
Code	{ return this . InstanceOf ; }
Distance : 12

132
Tree	{ return this . reportMatcher ; } Math
Code	{ return this . reportMatcher ; } Math
Distance : 13

133
Tree	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) ; }
Distance : 11

134
Tree	{ return reportMatcher ( Any.ANY ) . < returnZero > anyFloat () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnZero > anyFloat () ; }
Distance : 9

135
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

136
Tree	{ return reportMatcher ( returnZero ) ; }
Code	{ return reportMatcher ( returnZero ) ; }
Distance : 10

137
Tree	{ super ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; }
Distance : 12

138
Tree	{ return reportMatcher ( returnZero ) . returnZero () ; }
Code	{ return reportMatcher ( returnZero ) . returnZero () ; }
Distance : 7

139
Tree	{ reportMatcher ( InstanceOf ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( InstanceOf ) ; return NUMBER_CONSTANT ; }
Distance : 10

140
Tree	{ reportMatcher ( Any.ANY ) ; returnZero = returnZero . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnZero = returnZero . returnZero () ; }
Distance : 9

141
Tree	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 12

142
Tree	{ return this . Any.ANY ; }
Code	{ return this . Any.ANY ; }
Distance : 12

143
Tree	{ return reportMatcher ( reportMatcher ) ; }
Code	{ return reportMatcher ( reportMatcher ) ; }
Distance : 10

144
Tree	{ reportMatcher ( reportMatcher ) . returnZero () ; returnZero = false ; }
Code	{ reportMatcher ( reportMatcher ) . returnZero () ; returnZero = false ; }
Distance : 11

145
Tree	{ InstanceOf ( Any.ANY ) ; return null ; }
Code	{ InstanceOf ( Any.ANY ) ; return null ; }
Distance : 11

146
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher = Any.ANY . returnZero () ; }
Distance : 9

147
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; reportMatcher = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; reportMatcher = false ; }
Distance : 11

148
Tree	{ return this . reportMatcher ; } i
Code	{ return this . reportMatcher ; } i
Distance : 13

149
Tree	{ return ( returnZero ) reportMatcher () ; }
Code	{ return ( returnZero ) reportMatcher () ; }
Distance : 10

150
Tree	{ return reportMatcher ( Any.ANY ) . < Float > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Float > returnZero () ; }
Distance : 8

151
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

152
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = Float ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = Float ; }
Distance : 11

153
Tree	{ return reportMatcher ( anyFloat ) ; }
Code	{ return reportMatcher ( anyFloat ) ; }
Distance : 10

154
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Distance : 11

155
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

156
Tree	{ reportMatcher ( reportMatcher ) ; returnZero = reportMatcher . returnZero () ; }
Code	{ reportMatcher ( reportMatcher ) ; returnZero = reportMatcher . returnZero () ; }
Distance : 9

157
Tree	{ reportMatcher ( InstanceOf ) . returnZero () ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( InstanceOf ) . returnZero () ; this . returnZero = reportMatcher ; }
Distance : 10

158
Tree	{ return reportMatcher ( Any.ANY ) . < InstanceOf > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < InstanceOf > returnZero () ; }
Distance : 8

159
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = anyFloat ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = anyFloat ; }
Distance : 11

160
Tree	{ return ( InstanceOf ) returnZero () ; }
Code	{ return ( InstanceOf ) returnZero () ; }
Distance : 8

161
Tree	{ returnZero ( Any.ANY ) ; return false ; }
Code	{ returnZero ( Any.ANY ) ; return false ; }
Distance : 12

162
Tree	{ return ( InstanceOf ) reportMatcher () ; }
Code	{ return ( InstanceOf ) reportMatcher () ; }
Distance : 9

163
Tree	{ super ( anyFloat ) ; }
Code	{ super ( anyFloat ) ; }
Distance : 12

164
Tree	{ return reportMatcher ( Any.ANY ) . < returnZero > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnZero > reportMatcher () ; }
Distance : 9

165
Tree	{ return InstanceOf ( Any.ANY ) ; }
Code	{ return InstanceOf ( Any.ANY ) ; }
Distance : 10

166
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

167
Tree	{ reportMatcher ( returnZero ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( returnZero ) ; return NUMBER_CONSTANT ; }
Distance : 11

168
Tree	{ return Any.ANY ( Any.ANY ) ; }
Code	{ return Any.ANY ( Any.ANY ) ; }
Distance : 11

169
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Float = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Float = false ; }
Distance : 11

170
Tree	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) ; super }
Code	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) ; super }
Distance : 13

171
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; InstanceOf = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; InstanceOf = false ; }
Distance : 11

172
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher = reportMatcher . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher = reportMatcher . returnZero () ; }
Distance : 9

173
Tree	{ return ( Any.ANY ) returnZero () ; }
Code	{ return ( Any.ANY ) returnZero () ; }
Distance : 9

174
Tree	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = Any.ANY ; }
Distance : 11

175
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = returnZero ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = returnZero ; }
Distance : 10

176
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Matchers = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Matchers = false ; }
Distance : 11

177
Tree	{ return this . Matchers ; }
Code	{ return this . Matchers ; }
Distance : 12

178
Tree	{ return returnZero ( Any.ANY ) ; }
Code	{ return returnZero ( Any.ANY ) ; }
Distance : 11

179
Tree	{ return reportMatcher ( Float ) . returnZero () ; }
Code	{ return reportMatcher ( Float ) . returnZero () ; }
Distance : 6

180
Tree	{ return this . reportMatcher ; } options
Code	{ return this . reportMatcher ; } options
Distance : 13

181
Tree	{ reportMatcher ( InstanceOf ) ; return null ; }
Code	{ reportMatcher ( InstanceOf ) ; return null ; }
Distance : 10

182
Tree	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) ; super }
Code	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) ; super }
Distance : 13

183
Tree	{ reportMatcher ( Float ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Float ) ; return NUMBER_CONSTANT ; }
Distance : 10

184
Tree	{ return ( reportMatcher ) Any.ANY () ; }
Code	{ return ( reportMatcher ) Any.ANY () ; }
Distance : 10

185
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; anyFloat = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; anyFloat = false ; }
Distance : 11

186
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

187
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

188
Tree	{ Float ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ Float ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

189
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

190
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

191
Tree	{ reportMatcher ( Any.ANY ) ; returnZero = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnZero = Any.ANY . returnZero () ; }
Distance : 9

192
Tree	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Distance : 8

193
Tree	{ return reportMatcher ( Any.ANY ) . < Any.ANY > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Any.ANY > returnZero () ; }
Distance : 8

194
Tree	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) ; }
Distance : 10

195
Tree	{ reportMatcher ( reportMatcher ) ; this . returnZero = Any.ANY ; }
Code	{ reportMatcher ( reportMatcher ) ; this . returnZero = Any.ANY ; }
Distance : 11

196
Tree	{ super ( Matchers ) ; }
Code	{ super ( Matchers ) ; }
Distance : 12

197
Tree	{ return reportMatcher ( InstanceOf ) ; }
Code	{ return reportMatcher ( InstanceOf ) ; }
Distance : 9

198
Tree	{ super ( reportMatcher ) ; } Math
Code	{ super ( reportMatcher ) ; } Math
Distance : 13

199
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 14

========================================================================


========================================================================
Example Number: 102
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Long . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Long})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) ; }
Distance : 12

1
Tree	{ return ( Any.ANY ) reportMatcher ( reportMatcher ) ; }
Code	{ return ( Any.ANY ) reportMatcher ( reportMatcher ) ; }
Distance : 11

2
Tree	{ return ( Any.ANY ) reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ return ( Any.ANY ) reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 8

3
Tree	{ return reportMatcher ( Any.ANY ) . < returnZero > Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnZero > Any.ANY () ; }
Distance : 9

4
Tree	{ reportMatcher ( Any.ANY ) ; returnZero = InstanceOf . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnZero = InstanceOf . returnZero () ; }
Distance : 9

5
Tree	{ reportMatcher ( reportMatcher ) ; return false ; }
Code	{ reportMatcher ( reportMatcher ) ; return false ; }
Distance : 11

6
Tree	{ return ( returnZero ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( returnZero ) reportMatcher ( Any.ANY ) ; }
Distance : 11

7
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher = InstanceOf . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher = InstanceOf . returnZero () ; }
Distance : 9

8
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; returnZero = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; returnZero = false ; }
Distance : 11

9
Tree	{ reportMatcher ( Long ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Long ) ; return NUMBER_CONSTANT ; }
Distance : 10

10
Tree	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

11
Tree	{ return ( reportMatcher ) returnZero () ; }
Code	{ return ( reportMatcher ) returnZero () ; }
Distance : 9

12
Tree	{ reportMatcher ( reportMatcher ) ; this . returnZero = Any.ANY ; }
Code	{ reportMatcher ( reportMatcher ) ; this . returnZero = Any.ANY ; }
Distance : 11

13
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

14
Tree	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; }
Distance : 11

15
Tree	{ return ( returnZero ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( returnZero ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

16
Tree	{ return this . reportMatcher ; }
Code	{ return this . reportMatcher ; }
Distance : 12

17
Tree	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

18
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

20
Tree	{ reportMatcher ( reportMatcher ) ; return null ; }
Code	{ reportMatcher ( reportMatcher ) ; return null ; }
Distance : 11

21
Tree	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; super }
Code	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; super }
Distance : 13

22
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

23
Tree	{ reportMatcher ( InstanceOf ) . returnZero () ; returnZero = false ; }
Code	{ reportMatcher ( InstanceOf ) . returnZero () ; returnZero = false ; }
Distance : 10

24
Tree	{ return reportMatcher ( anyLong ) ; }
Code	{ return reportMatcher ( anyLong ) ; }
Distance : 10

25
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

26
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

27
Tree	{ return ( reportMatcher ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( reportMatcher ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

28
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

29
Tree	{ return this . returnZero ; }
Code	{ return this . returnZero ; }
Distance : 11

30
Tree	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) ; }
Distance : 12

31
Tree	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) ; super }
Code	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) ; super }
Distance : 13

32
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

33
Tree	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

34
Tree	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

35
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

36
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = Any.ANY ; }
Distance : 11

37
Tree	{ reportMatcher ( returnZero ) ; return false ; }
Code	{ reportMatcher ( returnZero ) ; return false ; }
Distance : 11

38
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; anyLong = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; anyLong = false ; }
Distance : 11

39
Tree	{ reportMatcher ( returnZero ) ; return null ; }
Code	{ reportMatcher ( returnZero ) ; return null ; }
Distance : 11

40
Tree	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) ; }
Distance : 12

41
Tree	{ reportMatcher ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Distance : 11

42
Tree	{ return ( reportMatcher ) returnZero ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) returnZero ( Any.ANY ) ; }
Distance : 11

43
Tree	{ return reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ return reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 7

44
Tree	{ return reportMatcher ( Any.ANY ) . < returnZero > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnZero > returnZero () ; }
Distance : 8

45
Tree	{ reportMatcher ( Any.ANY ) ; returnZero = reportMatcher . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnZero = reportMatcher . returnZero () ; }
Distance : 9

46
Tree	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 9

47
Tree	{ super ( InstanceOf ) ; }
Code	{ super ( InstanceOf ) ; }
Distance : 11

48
Tree	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

49
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = Any.ANY ; }
Distance : 11

50
Tree	{ return ( reportMatcher ) reportMatcher () ; }
Code	{ return ( reportMatcher ) reportMatcher () ; }
Distance : 10

51
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = returnZero ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = returnZero ; }
Distance : 11

52
Tree	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) . returnZero () ; }
Code	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) . returnZero () ; }
Distance : 9

53
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

54
Tree	{ return ( InstanceOf ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( InstanceOf ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 7

55
Tree	{ return Any.ANY ( Any.ANY ) ; }
Code	{ return Any.ANY ( Any.ANY ) ; }
Distance : 11

56
Tree	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

57
Tree	{ return ( InstanceOf ) returnZero ( Any.ANY ) ; }
Code	{ return ( InstanceOf ) returnZero ( Any.ANY ) ; }
Distance : 10

58
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . returnZero = reportMatcher ; }
Distance : 11

59
Tree	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; }
Distance : 12

60
Tree	{ return anyLong ( Any.ANY ) ; }
Code	{ return anyLong ( Any.ANY ) ; }
Distance : 11

61
Tree	{ super ( reportMatcher ) ; } options
Code	{ super ( reportMatcher ) ; } options
Distance : 13

62
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = reportMatcher ; }
Distance : 11

63
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

64
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; InstanceOf = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; InstanceOf = false ; }
Distance : 11

65
Tree	{ Any.ANY ( Any.ANY ) ; return null ; }
Code	{ Any.ANY ( Any.ANY ) ; return null ; }
Distance : 12

66
Tree	{ return ( reportMatcher ) reportMatcher ( reportMatcher ) ; }
Code	{ return ( reportMatcher ) reportMatcher ( reportMatcher ) ; }
Distance : 11

67
Tree	{ reportMatcher ( InstanceOf ) ; this . returnZero = Any.ANY ; }
Code	{ reportMatcher ( InstanceOf ) ; this . returnZero = Any.ANY ; }
Distance : 10

68
Tree	{ reportMatcher ( reportMatcher ) . returnZero () ; this . returnZero = returnZero ; }
Code	{ reportMatcher ( reportMatcher ) . returnZero () ; this . returnZero = returnZero ; }
Distance : 11

69
Tree	{ reportMatcher ( InstanceOf ) ; return false ; }
Code	{ reportMatcher ( InstanceOf ) ; return false ; }
Distance : 10

70
Tree	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) . returnZero () ; }
Code	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) . returnZero () ; }
Distance : 8

71
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = InstanceOf ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = InstanceOf ; }
Distance : 11

72
Tree	{ return reportMatcher ( InstanceOf ) ; }
Code	{ return reportMatcher ( InstanceOf ) ; }
Distance : 9

73
Tree	{ Any.ANY ( Any.ANY ) ; return false ; }
Code	{ Any.ANY ( Any.ANY ) ; return false ; }
Distance : 12

74
Tree	{ return reportMatcher ( returnZero ) . returnZero () ; }
Code	{ return reportMatcher ( returnZero ) . returnZero () ; }
Distance : 7

75
Tree	{ return reportMatcher ( anyLong ) . returnZero () ; }
Code	{ return reportMatcher ( anyLong ) . returnZero () ; }
Distance : 7

76
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

77
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

78
Tree	{ return ( Any.ANY ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( Any.ANY ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

79
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = Long ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = Long ; }
Distance : 11

80
Tree	{ return ( Any.ANY ) returnZero ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) returnZero ( Any.ANY ) ; }
Distance : 11

81
Tree	{ return ( InstanceOf ) reportMatcher () ; }
Code	{ return ( InstanceOf ) reportMatcher () ; }
Distance : 9

82
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

83
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

84
Tree	{ super ( reportMatcher ) ; } Math
Code	{ super ( reportMatcher ) ; } Math
Distance : 13

85
Tree	{ return this . reportMatcher ; } i
Code	{ return this . reportMatcher ; } i
Distance : 13

86
Tree	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) ; super }
Distance : 12

87
Tree	{ super ( reportMatcher ) ; } i
Code	{ super ( reportMatcher ) ; } i
Distance : 13

88
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; returnZero = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; returnZero = false ; }
Distance : 11

89
Tree	{ return reportMatcher ( InstanceOf ) . returnZero () ; }
Code	{ return reportMatcher ( InstanceOf ) . returnZero () ; }
Distance : 6

90
Tree	{ return ( InstanceOf ) returnZero () ; }
Code	{ return ( InstanceOf ) returnZero () ; }
Distance : 8

91
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Distance : 11

92
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

93
Tree	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Distance : 11

94
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = InstanceOf ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = InstanceOf ; }
Distance : 11

95
Tree	{ return reportMatcher ( Any.ANY ) . < returnZero > InstanceOf () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnZero > InstanceOf () ; }
Distance : 9

96
Tree	{ return ( Any.ANY ) reportMatcher () ; }
Code	{ return ( Any.ANY ) reportMatcher () ; }
Distance : 10

97
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 14

98
Tree	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

99
Tree	{ return ( returnZero ) returnZero () ; }
Code	{ return ( returnZero ) returnZero () ; }
Distance : 9

100
Tree	{ return reportMatcher ( Any.ANY ) . < reportMatcher > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < reportMatcher > returnZero () ; }
Distance : 8

101
Tree	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) ; }
Distance : 11

102
Tree	{ reportMatcher ( returnZero ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( returnZero ) ; return NUMBER_CONSTANT ; }
Distance : 11

103
Tree	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

104
Tree	{ Any.ANY ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ Any.ANY ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

105
Tree	{ reportMatcher ( InstanceOf ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( InstanceOf ) ; return NUMBER_CONSTANT ; }
Distance : 10

106
Tree	{ return reportMatcher ( Any.ANY ) . < returnZero > anyLong () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnZero > anyLong () ; }
Distance : 9

107
Tree	{ reportMatcher ( reportMatcher ) . returnZero () ; returnZero = false ; }
Code	{ reportMatcher ( reportMatcher ) . returnZero () ; returnZero = false ; }
Distance : 11

108
Tree	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Distance : 8

109
Tree	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) ; super }
Code	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) ; super }
Distance : 13

110
Tree	{ return reportMatcher ( Any.ANY ) . < InstanceOf > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < InstanceOf > returnZero () ; }
Distance : 8

111
Tree	{ return ( reportMatcher ) Any.ANY () ; }
Code	{ return ( reportMatcher ) Any.ANY () ; }
Distance : 10

112
Tree	{ return reportMatcher ( reportMatcher ) . < returnZero > returnZero () ; }
Code	{ return reportMatcher ( reportMatcher ) . < returnZero > returnZero () ; }
Distance : 8

113
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = returnZero ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = returnZero ; }
Distance : 10

114
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

115
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 14

116
Tree	{ super ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; }
Distance : 12

117
Tree	{ return this . reportMatcher ; } Math
Code	{ return this . reportMatcher ; } Math
Distance : 13

118
Tree	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = Any.ANY ; }
Distance : 11

119
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

120
Tree	{ reportMatcher ( InstanceOf ) . returnZero () ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( InstanceOf ) . returnZero () ; this . returnZero = reportMatcher ; }
Distance : 10

121
Tree	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

122
Tree	{ reportMatcher ( reportMatcher ) ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( reportMatcher ) ; this . returnZero = reportMatcher ; }
Distance : 11

123
Tree	{ return this . Long ; }
Code	{ return this . Long ; }
Distance : 12

124
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = reportMatcher ; }
Distance : 11

125
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

126
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Long = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Long = false ; }
Distance : 11

127
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

128
Tree	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

129
Tree	{ reportMatcher ( anyLong ) ; return null ; }
Code	{ reportMatcher ( anyLong ) ; return null ; }
Distance : 11

130
Tree	{ return this . InstanceOf ; }
Code	{ return this . InstanceOf ; }
Distance : 12

131
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

132
Tree	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 9

133
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

134
Tree	{ reportMatcher ( Long ) ; return false ; }
Code	{ reportMatcher ( Long ) ; return false ; }
Distance : 10

135
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 14

136
Tree	{ super ( Long ) ; }
Code	{ super ( Long ) ; }
Distance : 11

137
Tree	{ super ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; }
Distance : 12

138
Tree	{ return reportMatcher ( reportMatcher ) ; }
Code	{ return reportMatcher ( reportMatcher ) ; }
Distance : 10

139
Tree	{ return reportMatcher ( Any.ANY ) . < Any.ANY > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Any.ANY > returnZero () ; }
Distance : 8

140
Tree	{ return this . anyLong ; }
Code	{ return this . anyLong ; }
Distance : 12

141
Tree	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) ; }
Distance : 11

142
Tree	{ return this . Any.ANY ; }
Code	{ return this . Any.ANY ; }
Distance : 12

143
Tree	{ reportMatcher ( Any.ANY ) ; this . reportMatcher = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . reportMatcher = Any.ANY ; }
Distance : 11

144
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Matchers = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Matchers = false ; }
Distance : 11

145
Tree	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 12

146
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher = Any.ANY . returnZero () ; }
Distance : 9

147
Tree	{ reportMatcher ( Any.ANY ) ; Any.ANY = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Any.ANY = Any.ANY . returnZero () ; }
Distance : 9

148
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 14

149
Tree	{ return reportMatcher ( Any.ANY ) . < reportMatcher > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < reportMatcher > reportMatcher () ; }
Distance : 9

150
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; reportMatcher = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; reportMatcher = false ; }
Distance : 11

151
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

152
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = Long ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = Long ; }
Distance : 11

153
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

154
Tree	{ returnZero ( Any.ANY ) ; return false ; }
Code	{ returnZero ( Any.ANY ) ; return false ; }
Distance : 12

155
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

156
Tree	{ return ( Any.ANY ) Any.ANY () ; }
Code	{ return ( Any.ANY ) Any.ANY () ; }
Distance : 10

157
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = anyLong ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = anyLong ; }
Distance : 11

158
Tree	{ reportMatcher ( anyLong ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( anyLong ) ; return NUMBER_CONSTANT ; }
Distance : 11

159
Tree	{ InstanceOf ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ InstanceOf ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

160
Tree	{ return Any.ANY ( Any.ANY ) . returnZero () ; }
Code	{ return Any.ANY ( Any.ANY ) . returnZero () ; }
Distance : 8

161
Tree	{ return InstanceOf ( Any.ANY ) ; }
Code	{ return InstanceOf ( Any.ANY ) ; }
Distance : 10

162
Tree	{ return ( reportMatcher ) reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ return ( reportMatcher ) reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 8

163
Tree	{ return reportMatcher ( Long ) ; }
Code	{ return reportMatcher ( Long ) ; }
Distance : 9

164
Tree	{ return reportMatcher ( Any.ANY ) . < returnZero > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnZero > reportMatcher () ; }
Distance : 9

165
Tree	{ return this . Matchers ; }
Code	{ return this . Matchers ; }
Distance : 12

166
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

167
Tree	{ reportMatcher ( reportMatcher ) . returnZero () ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( reportMatcher ) . returnZero () ; this . returnZero = reportMatcher ; }
Distance : 11

168
Tree	{ return reportMatcher ( returnZero ) ; }
Code	{ return reportMatcher ( returnZero ) ; }
Distance : 10

169
Tree	{ reportMatcher ( anyLong ) ; return false ; }
Code	{ reportMatcher ( anyLong ) ; return false ; }
Distance : 11

170
Tree	{ super ( returnZero ) ; }
Code	{ super ( returnZero ) ; }
Distance : 12

171
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Distance : 11

172
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher = reportMatcher . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher = reportMatcher . returnZero () ; }
Distance : 9

173
Tree	{ InstanceOf ( Any.ANY ) ; return null ; }
Code	{ InstanceOf ( Any.ANY ) ; return null ; }
Distance : 11

174
Tree	{ return InstanceOf ( Any.ANY ) . returnZero () ; }
Code	{ return InstanceOf ( Any.ANY ) . returnZero () ; }
Distance : 7

175
Tree	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

176
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

177
Tree	{ InstanceOf ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Code	{ InstanceOf ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Distance : 11

178
Tree	{ return returnZero ( Any.ANY ) ; }
Code	{ return returnZero ( Any.ANY ) ; }
Distance : 11

179
Tree	{ reportMatcher ( Any.ANY ) ; Any.ANY = reportMatcher . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Any.ANY = reportMatcher . returnZero () ; }
Distance : 9

180
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

181
Tree	{ reportMatcher ( InstanceOf ) ; return null ; }
Code	{ reportMatcher ( InstanceOf ) ; return null ; }
Distance : 10

182
Tree	{ return ( Any.ANY ) returnZero () ; }
Code	{ return ( Any.ANY ) returnZero () ; }
Distance : 9

183
Tree	{ return reportMatcher ( Long ) . returnZero () ; }
Code	{ return reportMatcher ( Long ) . returnZero () ; }
Distance : 6

184
Tree	{ reportMatcher ( Any.ANY ) ; returnZero = returnZero . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnZero = returnZero . returnZero () ; }
Distance : 9

185
Tree	{ InstanceOf ( Any.ANY ) ; return false ; }
Code	{ InstanceOf ( Any.ANY ) ; return false ; }
Distance : 11

186
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

187
Tree	{ reportMatcher ( reportMatcher ) ; returnZero = reportMatcher . returnZero () ; }
Code	{ reportMatcher ( reportMatcher ) ; returnZero = reportMatcher . returnZero () ; }
Distance : 9

188
Tree	{ super ( anyLong ) ; }
Code	{ super ( anyLong ) ; }
Distance : 12

189
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

190
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

191
Tree	{ reportMatcher ( Any.ANY ) ; returnZero = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnZero = Any.ANY . returnZero () ; }
Distance : 9

192
Tree	{ return ( returnZero ) reportMatcher () ; }
Code	{ return ( returnZero ) reportMatcher () ; }
Distance : 10

193
Tree	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) ; }
Distance : 12

194
Tree	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) ; }
Distance : 10

195
Tree	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

196
Tree	{ super ( Matchers ) ; }
Code	{ super ( Matchers ) ; }
Distance : 12

197
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

198
Tree	{ return this . reportMatcher ; } options
Code	{ return this . reportMatcher ; } options
Distance : 13

199
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

========================================================================


========================================================================
Example Number: 103
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Integer . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Integer})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return reportMatcher ( Any.ANY ) . < Any.ANY > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Any.ANY > returnZero () ; }
Distance : 8

1
Tree	{ return reportMatcher ( Any.ANY ) . < returnZero > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnZero > reportMatcher () ; }
Distance : 9

2
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

3
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; returnZero = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; returnZero = false ; }
Distance : 11

4
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

5
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

6
Tree	{ reportMatcher ( InstanceOf ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( InstanceOf ) ; return NUMBER_CONSTANT ; }
Distance : 10

7
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = returnZero ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = returnZero ; }
Distance : 10

8
Tree	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; }
Distance : 11

9
Tree	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

10
Tree	{ return reportMatcher ( Any.ANY ) . < Integer > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Integer > returnZero () ; }
Distance : 8

11
Tree	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) ; }
Distance : 12

12
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

13
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

14
Tree	{ return this . reportMatcher ; }
Code	{ return this . reportMatcher ; }
Distance : 12

15
Tree	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

16
Tree	{ reportMatcher ( Any.ANY ) ; returnZero = InstanceOf . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnZero = InstanceOf . returnZero () ; }
Distance : 9

17
Tree	{ return ( Any.ANY ) reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ return ( Any.ANY ) reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 8

18
Tree	{ return reportMatcher ( Any.ANY ) . < returnZero > Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnZero > Any.ANY () ; }
Distance : 9

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

20
Tree	{ reportMatcher ( reportMatcher ) ; return null ; }
Code	{ reportMatcher ( reportMatcher ) ; return null ; }
Distance : 11

21
Tree	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) ; }
Distance : 12

22
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

23
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

24
Tree	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

25
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; anyInt = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; anyInt = false ; }
Distance : 11

26
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

27
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

28
Tree	{ return ( reportMatcher ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( reportMatcher ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

29
Tree	{ return this . returnZero ; }
Code	{ return this . returnZero ; }
Distance : 11

30
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

31
Tree	{ return ( reportMatcher ) returnZero () ; }
Code	{ return ( reportMatcher ) returnZero () ; }
Distance : 9

32
Tree	{ InstanceOf ( Any.ANY ) ; return null ; }
Code	{ InstanceOf ( Any.ANY ) ; return null ; }
Distance : 11

33
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

34
Tree	{ return ( Any.ANY ) returnZero () ; }
Code	{ return ( Any.ANY ) returnZero () ; }
Distance : 9

35
Tree	{ reportMatcher ( InstanceOf ) . returnZero () ; returnZero = false ; }
Code	{ reportMatcher ( InstanceOf ) . returnZero () ; returnZero = false ; }
Distance : 10

36
Tree	{ reportMatcher ( returnZero ) ; return false ; }
Code	{ reportMatcher ( returnZero ) ; return false ; }
Distance : 11

37
Tree	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) ; super }
Code	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) ; super }
Distance : 13

38
Tree	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; super }
Code	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; super }
Distance : 13

39
Tree	{ return ( reportMatcher ) returnZero ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) returnZero ( Any.ANY ) ; }
Distance : 11

40
Tree	{ return reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ return reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 7

41
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = Any.ANY ; }
Distance : 11

42
Tree	{ reportMatcher ( Any.ANY ) ; returnZero = reportMatcher . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnZero = reportMatcher . returnZero () ; }
Distance : 9

43
Tree	{ return reportMatcher ( Any.ANY ) . < returnZero > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnZero > returnZero () ; }
Distance : 8

44
Tree	{ reportMatcher ( anyInt ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( anyInt ) ; return NUMBER_CONSTANT ; }
Distance : 11

45
Tree	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 9

46
Tree	{ return Any.ANY ( reportMatcher ) ; }
Code	{ return Any.ANY ( reportMatcher ) ; }
Distance : 11

47
Tree	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

48
Tree	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

49
Tree	{ reportMatcher ( returnZero ) ; return null ; }
Code	{ reportMatcher ( returnZero ) ; return null ; }
Distance : 11

50
Tree	{ return ( reportMatcher ) reportMatcher () ; }
Code	{ return ( reportMatcher ) reportMatcher () ; }
Distance : 10

51
Tree	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

52
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

53
Tree	{ reportMatcher ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Distance : 11

54
Tree	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) ; }
Distance : 12

55
Tree	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

56
Tree	{ super ( InstanceOf ) ; }
Code	{ super ( InstanceOf ) ; }
Distance : 11

57
Tree	{ return reportMatcher ( anyInt ) . returnZero () ; }
Code	{ return reportMatcher ( anyInt ) . returnZero () ; }
Distance : 7

58
Tree	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) . returnZero () ; }
Code	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) . returnZero () ; }
Distance : 9

59
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

60
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = reportMatcher ; }
Distance : 11

61
Tree	{ return ( InstanceOf ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( InstanceOf ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 7

62
Tree	{ return ( InstanceOf ) returnZero ( Any.ANY ) ; }
Code	{ return ( InstanceOf ) returnZero ( Any.ANY ) ; }
Distance : 10

63
Tree	{ reportMatcher ( InstanceOf ) . returnZero () ; this . returnZero = Integer ; }
Code	{ reportMatcher ( InstanceOf ) . returnZero () ; this . returnZero = Integer ; }
Distance : 10

64
Tree	{ return Any.ANY ( Any.ANY ) . returnZero () ; }
Code	{ return Any.ANY ( Any.ANY ) . returnZero () ; }
Distance : 8

65
Tree	{ reportMatcher ( reportMatcher ) ; this . returnZero = Any.ANY ; }
Code	{ reportMatcher ( reportMatcher ) ; this . returnZero = Any.ANY ; }
Distance : 11

66
Tree	{ return this . anyInt ; }
Code	{ return this . anyInt ; }
Distance : 12

67
Tree	{ super ( returnZero ) ; }
Code	{ super ( returnZero ) ; }
Distance : 12

68
Tree	{ return ( Integer ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( Integer ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

69
Tree	{ return ( InstanceOf ) reportMatcher () ; }
Code	{ return ( InstanceOf ) reportMatcher () ; }
Distance : 9

70
Tree	{ reportMatcher ( Integer ) . returnZero () ; returnZero = false ; }
Code	{ reportMatcher ( Integer ) . returnZero () ; returnZero = false ; }
Distance : 11

71
Tree	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) ; }
Distance : 12

72
Tree	{ reportMatcher ( reportMatcher ) ; return false ; }
Code	{ reportMatcher ( reportMatcher ) ; return false ; }
Distance : 11

73
Tree	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; }
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; Any.ANY = reportMatcher . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Any.ANY = reportMatcher . returnZero () ; }
Distance : 9

75
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = Integer ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = Integer ; }
Distance : 11

76
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = Any.ANY ; }
Distance : 11

78
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

79
Tree	{ reportMatcher ( InstanceOf ) ; this . returnZero = Any.ANY ; }
Code	{ reportMatcher ( InstanceOf ) ; this . returnZero = Any.ANY ; }
Distance : 10

80
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

81
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

82
Tree	{ return reportMatcher ( Integer ) ; }
Code	{ return reportMatcher ( Integer ) ; }
Distance : 9

83
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

84
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

85
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; returnZero = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; returnZero = false ; }
Distance : 11

86
Tree	{ return ( reportMatcher ) reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ return ( reportMatcher ) reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 8

87
Tree	{ return ( Integer ) reportMatcher () ; }
Code	{ return ( Integer ) reportMatcher () ; }
Distance : 9

88
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Distance : 11

89
Tree	{ super ( reportMatcher ) ; } Math
Code	{ super ( reportMatcher ) ; } Math
Distance : 13

90
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

91
Tree	{ return ( Any.ANY ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( Any.ANY ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

92
Tree	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Distance : 11

93
Tree	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) ; }
Distance : 10

94
Tree	{ return ( Integer ) returnZero ( Any.ANY ) ; }
Code	{ return ( Integer ) returnZero ( Any.ANY ) ; }
Distance : 10

95
Tree	{ reportMatcher ( Any.ANY ) ; this . reportMatcher = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . reportMatcher = Any.ANY ; }
Distance : 11

96
Tree	{ return ( Any.ANY ) returnZero ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) returnZero ( Any.ANY ) ; }
Distance : 11

97
Tree	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

98
Tree	{ return InstanceOf ( Any.ANY ) . returnZero () ; }
Code	{ return InstanceOf ( Any.ANY ) . returnZero () ; }
Distance : 7

99
Tree	{ Any.ANY ( Any.ANY ) ; return null ; }
Code	{ Any.ANY ( Any.ANY ) ; return null ; }
Distance : 12

100
Tree	{ reportMatcher ( Any.ANY ) ; Any.ANY = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Any.ANY = Any.ANY . returnZero () ; }
Distance : 9

101
Tree	{ reportMatcher ( Integer ) ; return false ; }
Code	{ reportMatcher ( Integer ) ; return false ; }
Distance : 10

102
Tree	{ reportMatcher ( InstanceOf ) ; return false ; }
Code	{ reportMatcher ( InstanceOf ) ; return false ; }
Distance : 10

103
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher = InstanceOf . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher = InstanceOf . returnZero () ; }
Distance : 9

104
Tree	{ return reportMatcher ( reportMatcher ) . < returnZero > returnZero () ; }
Code	{ return reportMatcher ( reportMatcher ) . < returnZero > returnZero () ; }
Distance : 8

105
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Integer = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Integer = false ; }
Distance : 11

106
Tree	{ return reportMatcher ( reportMatcher ) ; }
Code	{ return reportMatcher ( reportMatcher ) ; }
Distance : 10

107
Tree	{ return reportMatcher ( returnZero ) . returnZero () ; }
Code	{ return reportMatcher ( returnZero ) . returnZero () ; }
Distance : 7

108
Tree	{ return reportMatcher ( Integer ) . returnZero () ; }
Code	{ return reportMatcher ( Integer ) . returnZero () ; }
Distance : 6

109
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . returnZero = reportMatcher ; }
Distance : 11

110
Tree	{ super ( reportMatcher ) ; } i
Code	{ super ( reportMatcher ) ; } i
Distance : 13

111
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = Integer ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = Integer ; }
Distance : 11

112
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

113
Tree	{ return reportMatcher ( Any.ANY ) . < reportMatcher > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < reportMatcher > reportMatcher () ; }
Distance : 9

114
Tree	{ super ( reportMatcher ) ; } options
Code	{ super ( reportMatcher ) ; } options
Distance : 13

115
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 14

116
Tree	{ Any.ANY ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ Any.ANY ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

117
Tree	{ return ( Any.ANY ) reportMatcher () ; }
Code	{ return ( Any.ANY ) reportMatcher () ; }
Distance : 10

118
Tree	{ InstanceOf ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ InstanceOf ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

119
Tree	{ reportMatcher ( reportMatcher ) . returnZero () ; returnZero = false ; }
Code	{ reportMatcher ( reportMatcher ) . returnZero () ; returnZero = false ; }
Distance : 11

120
Tree	{ reportMatcher ( Any.ANY ) ; returnZero = returnZero . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnZero = returnZero . returnZero () ; }
Distance : 9

121
Tree	{ reportMatcher ( InstanceOf ) . returnZero () ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( InstanceOf ) . returnZero () ; this . returnZero = reportMatcher ; }
Distance : 10

122
Tree	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

123
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

124
Tree	{ return reportMatcher ( InstanceOf ) ; }
Code	{ return reportMatcher ( InstanceOf ) ; }
Distance : 9

125
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 14

126
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = InstanceOf ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = InstanceOf ; }
Distance : 11

127
Tree	{ return reportMatcher ( Any.ANY ) . < reportMatcher > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < reportMatcher > returnZero () ; }
Distance : 8

128
Tree	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

129
Tree	{ return this . reportMatcher ; } Math
Code	{ return this . reportMatcher ; } Math
Distance : 13

130
Tree	{ super ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; }
Distance : 12

131
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; reportMatcher = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; reportMatcher = false ; }
Distance : 11

132
Tree	{ returnZero ( Any.ANY ) ; return false ; }
Code	{ returnZero ( Any.ANY ) ; return false ; }
Distance : 12

133
Tree	{ reportMatcher ( anyInt ) ; return false ; }
Code	{ reportMatcher ( anyInt ) ; return false ; }
Distance : 11

134
Tree	{ super ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; }
Distance : 12

135
Tree	{ reportMatcher ( Integer ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Integer ) ; return NUMBER_CONSTANT ; }
Distance : 10

136
Tree	{ return ( reportMatcher ) reportMatcher ( reportMatcher ) ; }
Code	{ return ( reportMatcher ) reportMatcher ( reportMatcher ) ; }
Distance : 11

137
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

138
Tree	{ return reportMatcher ( Any.ANY ) . < returnZero > InstanceOf () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnZero > InstanceOf () ; }
Distance : 9

139
Tree	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

140
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = reportMatcher ; }
Distance : 11

141
Tree	{ return ( Integer ) returnZero () ; }
Code	{ return ( Integer ) returnZero () ; }
Distance : 8

142
Tree	{ super ( Integer ) ; }
Code	{ super ( Integer ) ; }
Distance : 11

143
Tree	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 9

144
Tree	{ return this . InstanceOf ; }
Code	{ return this . InstanceOf ; }
Distance : 12

145
Tree	{ return ( returnZero ) reportMatcher () ; }
Code	{ return ( returnZero ) reportMatcher () ; }
Distance : 10

146
Tree	{ return this . reportMatcher ; } i
Code	{ return this . reportMatcher ; } i
Distance : 13

147
Tree	{ return reportMatcher ( Any.ANY ) . < InstanceOf > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < InstanceOf > returnZero () ; }
Distance : 8

148
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

149
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

150
Tree	{ return this . reportMatcher ; } options
Code	{ return this . reportMatcher ; } options
Distance : 13

151
Tree	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

152
Tree	{ return Any.ANY ( Any.ANY ) ; }
Code	{ return Any.ANY ( Any.ANY ) ; }
Distance : 11

153
Tree	{ super ( anyInt ) ; }
Code	{ super ( anyInt ) ; }
Distance : 12

154
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher = Any.ANY . returnZero () ; }
Distance : 9

155
Tree	{ reportMatcher ( returnZero ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( returnZero ) ; return NUMBER_CONSTANT ; }
Distance : 11

156
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Matchers = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Matchers = false ; }
Distance : 11

157
Tree	{ return ( reportMatcher ) Any.ANY () ; }
Code	{ return ( reportMatcher ) Any.ANY () ; }
Distance : 10

158
Tree	{ return this . Any.ANY ; }
Code	{ return this . Any.ANY ; }
Distance : 12

159
Tree	{ reportMatcher ( Any.ANY ) ; Integer = reportMatcher . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Integer = reportMatcher . returnZero () ; }
Distance : 8

160
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = InstanceOf ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = InstanceOf ; }
Distance : 11

161
Tree	{ return InstanceOf ( Any.ANY ) ; }
Code	{ return InstanceOf ( Any.ANY ) ; }
Distance : 10

162
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) ; }
Distance : 10

163
Tree	{ Integer ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ Integer ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

164
Tree	{ reportMatcher ( Integer ) ; return null ; }
Code	{ reportMatcher ( Integer ) ; return null ; }
Distance : 10

165
Tree	{ return this . Matchers ; }
Code	{ return this . Matchers ; }
Distance : 12

166
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

167
Tree	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = Any.ANY ; }
Distance : 11

168
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; InstanceOf = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; InstanceOf = false ; }
Distance : 11

169
Tree	{ reportMatcher ( reportMatcher ) . returnZero () ; this . returnZero = Integer ; }
Code	{ reportMatcher ( reportMatcher ) . returnZero () ; this . returnZero = Integer ; }
Distance : 11

170
Tree	{ return ( InstanceOf ) returnZero () ; }
Code	{ return ( InstanceOf ) returnZero () ; }
Distance : 8

171
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

172
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher = reportMatcher . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher = reportMatcher . returnZero () ; }
Distance : 9

173
Tree	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) ; }
Distance : 11

174
Tree	{ reportMatcher ( reportMatcher ) ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( reportMatcher ) ; this . returnZero = reportMatcher ; }
Distance : 11

175
Tree	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) ; super }
Distance : 12

176
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

177
Tree	{ return reportMatcher ( anyInt ) ; }
Code	{ return reportMatcher ( anyInt ) ; }
Distance : 10

178
Tree	{ return returnZero ( Any.ANY ) ; }
Code	{ return returnZero ( Any.ANY ) ; }
Distance : 11

179
Tree	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) ; super }
Code	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) ; super }
Distance : 13

180
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 14

181
Tree	{ reportMatcher ( InstanceOf ) ; return null ; }
Code	{ reportMatcher ( InstanceOf ) ; return null ; }
Distance : 10

182
Tree	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 12

183
Tree	{ reportMatcher ( reportMatcher ) . returnZero () ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( reportMatcher ) . returnZero () ; this . returnZero = reportMatcher ; }
Distance : 11

184
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

185
Tree	{ InstanceOf ( Any.ANY ) ; return false ; }
Code	{ InstanceOf ( Any.ANY ) ; return false ; }
Distance : 11

186
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 14

187
Tree	{ return this . Integer ; }
Code	{ return this . Integer ; }
Distance : 12

188
Tree	{ return reportMatcher ( returnZero ) ; }
Code	{ return reportMatcher ( returnZero ) ; }
Distance : 10

189
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

190
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

191
Tree	{ reportMatcher ( Any.ANY ) ; returnZero = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnZero = Any.ANY . returnZero () ; }
Distance : 9

192
Tree	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Distance : 8

193
Tree	{ return reportMatcher ( InstanceOf ) . returnZero () ; }
Code	{ return reportMatcher ( InstanceOf ) . returnZero () ; }
Distance : 6

194
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = returnZero ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = returnZero ; }
Distance : 11

195
Tree	{ return ( Any.ANY ) reportMatcher ( reportMatcher ) ; }
Code	{ return ( Any.ANY ) reportMatcher ( reportMatcher ) ; }
Distance : 11

196
Tree	{ super ( Matchers ) ; }
Code	{ super ( Matchers ) ; }
Distance : 12

197
Tree	{ Any.ANY ( Any.ANY ) ; return false ; }
Code	{ Any.ANY ( Any.ANY ) ; return false ; }
Distance : 12

198
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

199
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

========================================================================


========================================================================
Example Number: 104
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnChar () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Character . class ) ) . returnChar () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnChar}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Character})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnChar}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super ( InstanceOf ) ; }
Code	{ super ( InstanceOf ) ; }
Distance : 11

1
Tree	{ super ( reportMatcher ) ; returnChar ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; returnChar ( reportMatcher ) ; }
Distance : 12

2
Tree	{ super ( anyChar ) ; }
Code	{ super ( anyChar ) ; }
Distance : 12

3
Tree	{ reportMatcher ( reportMatcher ) . returnChar () ; this . returnChar = Any.ANY ; }
Code	{ reportMatcher ( reportMatcher ) . returnChar () ; this . returnChar = Any.ANY ; }
Distance : 11

4
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

5
Tree	{ return reportMatcher ( reportMatcher ) ; }
Code	{ return reportMatcher ( reportMatcher ) ; }
Distance : 10

6
Tree	{ reportMatcher ( InstanceOf ) ; this . returnChar = Any.ANY ; }
Code	{ reportMatcher ( InstanceOf ) ; this . returnChar = Any.ANY ; }
Distance : 10

7
Tree	{ reportMatcher ( reportMatcher ) ; returnChar = reportMatcher . returnChar () ; }
Code	{ reportMatcher ( reportMatcher ) ; returnChar = reportMatcher . returnChar () ; }
Distance : 9

8
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; this . returnChar = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; this . returnChar = Any.ANY ; }
Distance : 11

9
Tree	{ return this . reportMatcher ; }
Code	{ return this . reportMatcher ; }
Distance : 12

10
Tree	{ super ( reportMatcher ) ; returnChar ( Any.ANY ) . returnChar () ; }
Code	{ super ( reportMatcher ) ; returnChar ( Any.ANY ) . returnChar () ; }
Distance : 9

11
Tree	{ super ( Any.ANY ) ; returnChar ( reportMatcher ) ; }
Code	{ super ( Any.ANY ) ; returnChar ( reportMatcher ) ; }
Distance : 12

12
Tree	{ super ( Any.ANY ) ; returnChar ( reportMatcher ) . returnChar () ; }
Code	{ super ( Any.ANY ) ; returnChar ( reportMatcher ) . returnChar () ; }
Distance : 9

13
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; }
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; }
Distance : 12

14
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; }
Code	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; }
Distance : 9

15
Tree	{ return this . anyChar ; }
Code	{ return this . anyChar ; }
Distance : 12

16
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

17
Tree	{ reportMatcher ( Any.ANY ) ; this . returnChar = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnChar = Any.ANY ; }
Distance : 11

18
Tree	{ super ( reportMatcher ) ; returnChar ( Any.ANY ) ; throw }
Code	{ super ( reportMatcher ) ; returnChar ( Any.ANY ) ; throw }
Distance : 13

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

20
Tree	{ super ( reportMatcher ) ; returnChar ( reportMatcher ) . returnChar () ; }
Code	{ super ( reportMatcher ) ; returnChar ( reportMatcher ) . returnChar () ; }
Distance : 9

21
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; }
Distance : 7

22
Tree	{ return reportMatcher ( Any.ANY ) . < returnChar > returnChar () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnChar > returnChar () ; }
Distance : 8

23
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; this . returnChar = anyChar ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; this . returnChar = anyChar ; }
Distance : 11

24
Tree	{ reportMatcher ( anyChar ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( anyChar ) ; return NUMBER_CONSTANT ; }
Distance : 11

25
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

26
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

27
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Distance : 11

28
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

29
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; returnChar = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; returnChar = false ; }
Distance : 11

30
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

31
Tree	{ return reportMatcher ( reportMatcher ) . returnChar () ; }
Code	{ return reportMatcher ( reportMatcher ) . returnChar () ; }
Distance : 7

32
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . returnChar = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . returnChar = reportMatcher ; }
Distance : 11

33
Tree	{ super ( Any.ANY ) ; returnChar ( Any.ANY ) ; super }
Code	{ super ( Any.ANY ) ; returnChar ( Any.ANY ) ; super }
Distance : 13

34
Tree	{ reportMatcher ( Any.ANY ) ; returnChar = InstanceOf . returnChar () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnChar = InstanceOf . returnChar () ; }
Distance : 9

35
Tree	{ return ( Any.ANY ) returnChar () ; }
Code	{ return ( Any.ANY ) returnChar () ; }
Distance : 9

36
Tree	{ reportMatcher ( Any.ANY ) ; this . returnChar = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnChar = reportMatcher ; }
Distance : 11

37
Tree	{ super ( reportMatcher ) ; returnChar ( Any.ANY ) ; super }
Code	{ super ( reportMatcher ) ; returnChar ( Any.ANY ) ; super }
Distance : 13

38
Tree	{ return this . Any.ANY ; }
Code	{ return this . Any.ANY ; }
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

40
Tree	{ return ( Any.ANY ) returnChar ( Any.ANY ) . returnChar () ; }
Code	{ return ( Any.ANY ) returnChar ( Any.ANY ) . returnChar () ; }
Distance : 8

41
Tree	{ return reportMatcher ( InstanceOf ) . returnChar () ; }
Code	{ return reportMatcher ( InstanceOf ) . returnChar () ; }
Distance : 6

42
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

43
Tree	{ super ( returnChar ) ; }
Code	{ super ( returnChar ) ; }
Distance : 12

44
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

45
Tree	{ return reportMatcher ( reportMatcher ) . < returnChar > returnChar () ; }
Code	{ return reportMatcher ( reportMatcher ) . < returnChar > returnChar () ; }
Distance : 8

46
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

47
Tree	{ reportMatcher ( reportMatcher ) ; return null ; }
Code	{ reportMatcher ( reportMatcher ) ; return null ; }
Distance : 11

48
Tree	{ reportMatcher ( InstanceOf ) ; return null ; }
Code	{ reportMatcher ( InstanceOf ) ; return null ; }
Distance : 10

49
Tree	{ return ( Any.ANY ) Any.ANY () ; }
Code	{ return ( Any.ANY ) Any.ANY () ; }
Distance : 10

50
Tree	{ reportMatcher ( InstanceOf ) . returnChar () ; returnChar = false ; }
Code	{ reportMatcher ( InstanceOf ) . returnChar () ; returnChar = false ; }
Distance : 10

51
Tree	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; }
Distance : 11

52
Tree	{ super ( reportMatcher ) ; returnChar ( InstanceOf ) . returnChar () ; }
Code	{ super ( reportMatcher ) ; returnChar ( InstanceOf ) . returnChar () ; }
Distance : 9

53
Tree	{ return Any.ANY ( Any.ANY ) . returnChar () ; }
Code	{ return Any.ANY ( Any.ANY ) . returnChar () ; }
Distance : 8

54
Tree	{ return ( InstanceOf ) returnChar () ; }
Code	{ return ( InstanceOf ) returnChar () ; }
Distance : 8

55
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

56
Tree	{ reportMatcher ( anyChar ) ; return null ; }
Code	{ reportMatcher ( anyChar ) ; return null ; }
Distance : 11

57
Tree	{ InstanceOf ( Any.ANY ) ; return false ; }
Code	{ InstanceOf ( Any.ANY ) ; return false ; }
Distance : 11

58
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . returnChar () ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . returnChar () ; }
Distance : 9

59
Tree	{ super ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; }
Distance : 12

60
Tree	{ InstanceOf ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ InstanceOf ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

61
Tree	{ reportMatcher ( reportMatcher ) ; this . returnChar = Any.ANY ; }
Code	{ reportMatcher ( reportMatcher ) ; this . returnChar = Any.ANY ; }
Distance : 11

62
Tree	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) . returnChar () ; }
Code	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) . returnChar () ; }
Distance : 8

63
Tree	{ return returnChar ( Any.ANY ) ; }
Code	{ return returnChar ( Any.ANY ) ; }
Distance : 11

64
Tree	{ return ( Character ) returnChar () ; }
Code	{ return ( Character ) returnChar () ; }
Distance : 8

65
Tree	{ return reportMatcher ( Any.ANY ) . < anyChar > returnChar () ; }
Code	{ return reportMatcher ( Any.ANY ) . < anyChar > returnChar () ; }
Distance : 8

66
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; this . returnChar = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; this . returnChar = reportMatcher ; }
Distance : 11

67
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 14

68
Tree	{ reportMatcher ( InstanceOf ) ; return false ; }
Code	{ reportMatcher ( InstanceOf ) ; return false ; }
Distance : 10

69
Tree	{ return ( Any.ANY ) returnChar ( reportMatcher ) ; }
Code	{ return ( Any.ANY ) returnChar ( reportMatcher ) ; }
Distance : 11

70
Tree	{ super ( reportMatcher ) ; } i
Code	{ super ( reportMatcher ) ; } i
Distance : 13

71
Tree	{ super ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; }
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) ; returnChar = Any.ANY . returnChar () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnChar = Any.ANY . returnChar () ; }
Distance : 9

73
Tree	{ return this . Character ; }
Code	{ return this . Character ; }
Distance : 12

74
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

75
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher = reportMatcher . returnChar () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher = reportMatcher . returnChar () ; }
Distance : 9

76
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; reportMatcher = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; reportMatcher = false ; }
Distance : 11

77
Tree	{ return ( Any.ANY ) returnChar ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) returnChar ( Any.ANY ) ; }
Distance : 11

78
Tree	{ return ( Character ) returnChar ( Any.ANY ) . returnChar () ; }
Code	{ return ( Character ) returnChar ( Any.ANY ) . returnChar () ; }
Distance : 8

79
Tree	{ return ( reportMatcher ) returnChar ( reportMatcher ) . returnChar () ; }
Code	{ return ( reportMatcher ) returnChar ( reportMatcher ) . returnChar () ; }
Distance : 8

80
Tree	{ Any.ANY ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ Any.ANY ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

81
Tree	{ InstanceOf ( Any.ANY ) ; return null ; }
Code	{ InstanceOf ( Any.ANY ) ; return null ; }
Distance : 11

82
Tree	{ return ( reportMatcher ) Any.ANY () ; }
Code	{ return ( reportMatcher ) Any.ANY () ; }
Distance : 10

83
Tree	{ reportMatcher ( Any.ANY ) ; returnChar = reportMatcher . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnChar = reportMatcher . reportMatcher () ; }
Distance : 10

84
Tree	{ super ( Any.ANY ) ; returnChar ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; returnChar ( Any.ANY ) ; }
Distance : 12

85
Tree	{ return reportMatcher ( InstanceOf ) ; }
Code	{ return reportMatcher ( InstanceOf ) ; }
Distance : 9

86
Tree	{ return reportMatcher ( returnChar ) ; }
Code	{ return reportMatcher ( returnChar ) ; }
Distance : 10

87
Tree	{ return reportMatcher ( anyChar ) ; }
Code	{ return reportMatcher ( anyChar ) ; }
Distance : 10

88
Tree	{ reportMatcher ( Any.ANY ) ; this . returnChar = Character ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnChar = Character ; }
Distance : 11

89
Tree	{ reportMatcher ( reportMatcher ) . returnChar () ; this . returnChar = reportMatcher ; }
Code	{ reportMatcher ( reportMatcher ) . returnChar () ; this . returnChar = reportMatcher ; }
Distance : 11

90
Tree	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) . returnChar () ; }
Code	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) . returnChar () ; }
Distance : 7

91
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; this . returnChar = InstanceOf ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; this . returnChar = InstanceOf ; }
Distance : 11

92
Tree	{ return ( Character ) returnChar ( Any.ANY ) ; }
Code	{ return ( Character ) returnChar ( Any.ANY ) ; }
Distance : 10

93
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

94
Tree	{ Any.ANY ( Any.ANY ) . returnChar () ; returnChar = false ; }
Code	{ Any.ANY ( Any.ANY ) . returnChar () ; returnChar = false ; }
Distance : 12

95
Tree	{ return ( reportMatcher ) reportMatcher () ; }
Code	{ return ( reportMatcher ) reportMatcher () ; }
Distance : 10

96
Tree	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) . returnChar () ; }
Code	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) . returnChar () ; }
Distance : 8

97
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

98
Tree	{ reportMatcher ( InstanceOf ) ; this . returnChar = reportMatcher ; }
Code	{ reportMatcher ( InstanceOf ) ; this . returnChar = reportMatcher ; }
Distance : 10

99
Tree	{ reportMatcher ( Character ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Character ) ; return NUMBER_CONSTANT ; }
Distance : 10

100
Tree	{ return ( Any.ANY ) reportMatcher () ; }
Code	{ return ( Any.ANY ) reportMatcher () ; }
Distance : 10

101
Tree	{ return reportMatcher ( Any.ANY ) . < Any.ANY > returnChar () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Any.ANY > returnChar () ; }
Distance : 8

102
Tree	{ return ( reportMatcher ) anyChar () ; }
Code	{ return ( reportMatcher ) anyChar () ; }
Distance : 10

103
Tree	{ Character ( Any.ANY ) ; return false ; }
Code	{ Character ( Any.ANY ) ; return false ; }
Distance : 12

104
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; this . returnChar = returnChar ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; this . returnChar = returnChar ; }
Distance : 11

105
Tree	{ return InstanceOf ( Any.ANY ) ; }
Code	{ return InstanceOf ( Any.ANY ) ; }
Distance : 10

106
Tree	{ reportMatcher ( Any.ANY ) ; this . returnChar = returnChar ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnChar = returnChar ; }
Distance : 10

107
Tree	{ reportMatcher ( reportMatcher ) ; this . returnChar = reportMatcher ; }
Code	{ reportMatcher ( reportMatcher ) ; this . returnChar = reportMatcher ; }
Distance : 11

108
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) . returnChar () ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) . returnChar () ; }
Distance : 9

109
Tree	{ return ( reportMatcher ) returnChar ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) returnChar ( Any.ANY ) ; }
Distance : 11

110
Tree	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Distance : 11

111
Tree	{ super ( reportMatcher ) ; returnChar ( Any.ANY ) ; return }
Code	{ super ( reportMatcher ) ; returnChar ( Any.ANY ) ; return }
Distance : 13

112
Tree	{ reportMatcher ( InstanceOf ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( InstanceOf ) ; return NUMBER_CONSTANT ; }
Distance : 10

113
Tree	{ return InstanceOf ( Any.ANY ) . returnChar () ; }
Code	{ return InstanceOf ( Any.ANY ) . returnChar () ; }
Distance : 7

114
Tree	{ return reportMatcher ( Character ) ; }
Code	{ return reportMatcher ( Character ) ; }
Distance : 9

115
Tree	{ reportMatcher ( InstanceOf ) ; returnChar = reportMatcher . returnChar () ; }
Code	{ reportMatcher ( InstanceOf ) ; returnChar = reportMatcher . returnChar () ; }
Distance : 8

116
Tree	{ Any.ANY ( Any.ANY ) ; return false ; }
Code	{ Any.ANY ( Any.ANY ) ; return false ; }
Distance : 12

117
Tree	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Distance : 8

118
Tree	{ super ( InstanceOf ) ; returnChar ( Any.ANY ) ; }
Code	{ super ( InstanceOf ) ; returnChar ( Any.ANY ) ; }
Distance : 11

119
Tree	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) ; }
Distance : 11

120
Tree	{ super ( reportMatcher ) ; } options
Code	{ super ( reportMatcher ) ; } options
Distance : 13

121
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

122
Tree	{ reportMatcher ( InstanceOf ) . returnChar () ; this . returnChar = reportMatcher ; }
Code	{ reportMatcher ( InstanceOf ) . returnChar () ; this . returnChar = reportMatcher ; }
Distance : 10

123
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

124
Tree	{ reportMatcher ( Any.ANY ) ; this . returnChar = InstanceOf ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnChar = InstanceOf ; }
Distance : 11

125
Tree	{ super ( Any.ANY ) ; returnChar ( Any.ANY ) . returnChar () ; }
Code	{ super ( Any.ANY ) ; returnChar ( Any.ANY ) . returnChar () ; }
Distance : 9

126
Tree	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) ; }
Distance : 10

127
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 14

128
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

129
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

130
Tree	{ reportMatcher ( anyChar ) ; return false ; }
Code	{ reportMatcher ( anyChar ) ; return false ; }
Distance : 11

131
Tree	{ super ( InstanceOf ) ; returnChar ( Any.ANY ) . returnChar () ; }
Code	{ super ( InstanceOf ) ; returnChar ( Any.ANY ) . returnChar () ; }
Distance : 8

132
Tree	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) . returnChar () ; }
Code	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) . returnChar () ; }
Distance : 8

133
Tree	{ reportMatcher ( reportMatcher ) ; returnChar = Any.ANY . returnChar () ; }
Code	{ reportMatcher ( reportMatcher ) ; returnChar = Any.ANY . returnChar () ; }
Distance : 9

134
Tree	{ return ( reportMatcher ) returnChar ( reportMatcher ) ; }
Code	{ return ( reportMatcher ) returnChar ( reportMatcher ) ; }
Distance : 11

135
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

136
Tree	{ reportMatcher ( returnChar ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( returnChar ) ; return NUMBER_CONSTANT ; }
Distance : 11

137
Tree	{ return Any.ANY ( Any.ANY ) ; }
Code	{ return Any.ANY ( Any.ANY ) ; }
Distance : 11

138
Tree	{ reportMatcher ( returnChar ) ; return null ; }
Code	{ reportMatcher ( returnChar ) ; return null ; }
Distance : 11

139
Tree	{ return ( Any.ANY ) returnChar ( reportMatcher ) . returnChar () ; }
Code	{ return ( Any.ANY ) returnChar ( reportMatcher ) . returnChar () ; }
Distance : 8

140
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; Any.ANY = false ; }
Distance : 11

141
Tree	{ return ( InstanceOf ) reportMatcher () ; }
Code	{ return ( InstanceOf ) reportMatcher () ; }
Distance : 9

142
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . returnChar () ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . returnChar () ; }
Distance : 8

143
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 14

144
Tree	{ super ( reportMatcher ) ; returnChar ( reportMatcher ) ; super }
Code	{ super ( reportMatcher ) ; returnChar ( reportMatcher ) ; super }
Distance : 13

145
Tree	{ returnChar ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnChar ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

146
Tree	{ return ( reportMatcher ) returnChar () ; }
Code	{ return ( reportMatcher ) returnChar () ; }
Distance : 9

147
Tree	{ return reportMatcher ( returnChar ) . returnChar () ; }
Code	{ return reportMatcher ( returnChar ) . returnChar () ; }
Distance : 7

148
Tree	{ return this . InstanceOf ; }
Code	{ return this . InstanceOf ; }
Distance : 12

149
Tree	{ return reportMatcher ( Any.ANY ) . < reportMatcher > returnChar () ; }
Code	{ return reportMatcher ( Any.ANY ) . < reportMatcher > returnChar () ; }
Distance : 8

150
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 14

151
Tree	{ reportMatcher ( reportMatcher ) . returnChar () ; returnChar = false ; }
Code	{ reportMatcher ( reportMatcher ) . returnChar () ; returnChar = false ; }
Distance : 11

152
Tree	{ reportMatcher ( returnChar ) . returnChar () ; returnChar = false ; }
Code	{ reportMatcher ( returnChar ) . returnChar () ; returnChar = false ; }
Distance : 11

153
Tree	{ return reportMatcher ( Any.ANY ) . < returnChar > Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnChar > Any.ANY () ; }
Distance : 9

154
Tree	{ super ( reportMatcher ) ; returnChar ( Any.ANY ) ; return; }
Code	{ super ( reportMatcher ) ; returnChar ( Any.ANY ) ; return; }
Distance : 13

155
Tree	{ reportMatcher ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Distance : 11

156
Tree	{ return this . reportMatcher ; } Math
Code	{ return this . reportMatcher ; } Math
Distance : 13

157
Tree	{ return this . Matchers ; }
Code	{ return this . Matchers ; }
Distance : 12

158
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher = Any.ANY . returnChar () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher = Any.ANY . returnChar () ; }
Distance : 9

159
Tree	{ return reportMatcher ( Any.ANY ) . < returnChar > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnChar > reportMatcher () ; }
Distance : 9

160
Tree	{ return reportMatcher ( Character ) . returnChar () ; }
Code	{ return reportMatcher ( Character ) . returnChar () ; }
Distance : 6

161
Tree	{ super ( Matchers ) ; }
Code	{ super ( Matchers ) ; }
Distance : 12

162
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; this . returnChar = Character ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; this . returnChar = Character ; }
Distance : 11

163
Tree	{ return ( reportMatcher ) returnChar ( Any.ANY ) . returnChar () ; }
Code	{ return ( reportMatcher ) returnChar ( Any.ANY ) . returnChar () ; }
Distance : 8

164
Tree	{ return this . reportMatcher ; } i
Code	{ return this . reportMatcher ; } i
Distance : 13

165
Tree	{ return reportMatcher ( Any.ANY ) . < returnChar > anyChar () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnChar > anyChar () ; }
Distance : 9

166
Tree	{ super ( InstanceOf ) ; returnChar ( Any.ANY ) ; super }
Code	{ super ( InstanceOf ) ; returnChar ( Any.ANY ) ; super }
Distance : 12

167
Tree	{ reportMatcher ( reportMatcher ) ; return false ; }
Code	{ reportMatcher ( reportMatcher ) ; return false ; }
Distance : 11

168
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

169
Tree	{ return reportMatcher ( Any.ANY ) . < InstanceOf > returnChar () ; }
Code	{ return reportMatcher ( Any.ANY ) . < InstanceOf > returnChar () ; }
Distance : 8

170
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

171
Tree	{ Character ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ Character ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

172
Tree	{ return Character ( Any.ANY ) ; }
Code	{ return Character ( Any.ANY ) ; }
Distance : 11

173
Tree	{ super ( Character ) ; }
Code	{ super ( Character ) ; }
Distance : 11

174
Tree	{ InstanceOf ( Any.ANY ) . returnChar () ; returnChar = false ; }
Code	{ InstanceOf ( Any.ANY ) . returnChar () ; returnChar = false ; }
Distance : 12

175
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; returnChar = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; returnChar = true ; }
Distance : 11

176
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

177
Tree	{ return this . reportMatcher ; } options
Code	{ return this . reportMatcher ; } options
Distance : 13

178
Tree	{ reportMatcher ( Character ) ; return false ; }
Code	{ reportMatcher ( Character ) ; return false ; }
Distance : 10

179
Tree	{ super ( reportMatcher ) ; returnChar ( Any.ANY ) ; if }
Code	{ super ( reportMatcher ) ; returnChar ( Any.ANY ) ; if }
Distance : 13

180
Tree	{ super ( reportMatcher ) ; returnChar ( InstanceOf ) ; }
Code	{ super ( reportMatcher ) ; returnChar ( InstanceOf ) ; }
Distance : 12

181
Tree	{ InstanceOf ( Any.ANY ) ; this . returnChar = Any.ANY ; }
Code	{ InstanceOf ( Any.ANY ) ; this . returnChar = Any.ANY ; }
Distance : 11

182
Tree	{ Any.ANY ( Any.ANY ) ; return null ; }
Code	{ Any.ANY ( Any.ANY ) ; return null ; }
Distance : 12

183
Tree	{ reportMatcher ( Any.ANY ) ; returnChar = reportMatcher . returnChar () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnChar = reportMatcher . returnChar () ; }
Distance : 9

184
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

185
Tree	{ return this . returnChar ; }
Code	{ return this . returnChar ; }
Distance : 11

186
Tree	{ return reportMatcher ( Any.ANY ) . < Character > returnChar () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Character > returnChar () ; }
Distance : 8

187
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

188
Tree	{ super ( Any.ANY ) ; returnChar ( Any.ANY ) ; throw }
Code	{ super ( Any.ANY ) ; returnChar ( Any.ANY ) ; throw }
Distance : 13

189
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

190
Tree	{ return reportMatcher ( anyChar ) . returnChar () ; }
Code	{ return reportMatcher ( anyChar ) . returnChar () ; }
Distance : 7

191
Tree	{ reportMatcher ( InstanceOf ) ; returnChar = Any.ANY . returnChar () ; }
Code	{ reportMatcher ( InstanceOf ) ; returnChar = Any.ANY . returnChar () ; }
Distance : 8

192
Tree	{ super ( reportMatcher ) ; returnChar ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; returnChar ( Any.ANY ) ; }
Distance : 12

193
Tree	{ return ( InstanceOf ) returnChar ( Any.ANY ) ; }
Code	{ return ( InstanceOf ) returnChar ( Any.ANY ) ; }
Distance : 10

194
Tree	{ reportMatcher ( Character ) ; return null ; }
Code	{ reportMatcher ( Character ) ; return null ; }
Distance : 10

195
Tree	{ return ( InstanceOf ) returnChar ( Any.ANY ) . returnChar () ; }
Code	{ return ( InstanceOf ) returnChar ( Any.ANY ) . returnChar () ; }
Distance : 7

196
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; returnChar = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; returnChar = false ; }
Distance : 11

197
Tree	{ reportMatcher ( returnChar ) ; return false ; }
Code	{ reportMatcher ( returnChar ) ; return false ; }
Distance : 11

198
Tree	{ super ( reportMatcher ) ; } Math
Code	{ super ( reportMatcher ) ; } Math
Distance : 13

199
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

========================================================================


========================================================================
Example Number: 105
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Byte . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Byte})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

1
Tree	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) ; }
Distance : 12

2
Tree	{ return ( Any.ANY ) reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ return ( Any.ANY ) reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 8

3
Tree	{ return ( Any.ANY ) reportMatcher ( reportMatcher ) ; }
Code	{ return ( Any.ANY ) reportMatcher ( reportMatcher ) ; }
Distance : 11

4
Tree	{ reportMatcher ( reportMatcher ) ; this . returnZero = Any.ANY ; }
Code	{ reportMatcher ( reportMatcher ) ; this . returnZero = Any.ANY ; }
Distance : 11

5
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; returnZero = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; returnZero = false ; }
Distance : 11

6
Tree	{ return this . anyByte ; }
Code	{ return this . anyByte ; }
Distance : 12

7
Tree	{ reportMatcher ( InstanceOf ) . returnZero () ; this . returnZero = returnZero ; }
Code	{ reportMatcher ( InstanceOf ) . returnZero () ; this . returnZero = returnZero ; }
Distance : 10

8
Tree	{ return ( reportMatcher ) returnZero () ; }
Code	{ return ( reportMatcher ) returnZero () ; }
Distance : 9

9
Tree	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) ; }
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) ; returnZero = InstanceOf . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnZero = InstanceOf . returnZero () ; }
Distance : 9

11
Tree	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; }
Distance : 11

12
Tree	{ reportMatcher ( anyByte ) ; return null ; }
Code	{ reportMatcher ( anyByte ) ; return null ; }
Distance : 11

13
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = Byte ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = Byte ; }
Distance : 11

14
Tree	{ return ( returnZero ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( returnZero ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

15
Tree	{ return reportMatcher ( Any.ANY ) . < returnZero > Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnZero > Any.ANY () ; }
Distance : 9

16
Tree	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

17
Tree	{ return this . reportMatcher ; }
Code	{ return this . reportMatcher ; }
Distance : 12

18
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

20
Tree	{ reportMatcher ( reportMatcher ) ; return null ; }
Code	{ reportMatcher ( reportMatcher ) ; return null ; }
Distance : 11

21
Tree	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; super }
Code	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; super }
Distance : 13

22
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

23
Tree	{ reportMatcher ( anyByte ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( anyByte ) ; return NUMBER_CONSTANT ; }
Distance : 11

24
Tree	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

25
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

26
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

27
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

28
Tree	{ return ( reportMatcher ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( reportMatcher ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

29
Tree	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) ; super }
Code	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) ; super }
Distance : 13

30
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

31
Tree	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

32
Tree	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

33
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

34
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = Any.ANY ; }
Distance : 11

35
Tree	{ return this . returnZero ; }
Code	{ return this . returnZero ; }
Distance : 11

36
Tree	{ reportMatcher ( returnZero ) ; return false ; }
Code	{ reportMatcher ( returnZero ) ; return false ; }
Distance : 11

37
Tree	{ reportMatcher ( Any.ANY ) ; returnZero = reportMatcher . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnZero = reportMatcher . returnZero () ; }
Distance : 9

38
Tree	{ reportMatcher ( anyByte ) ; return false ; }
Code	{ reportMatcher ( anyByte ) ; return false ; }
Distance : 11

39
Tree	{ reportMatcher ( returnZero ) ; return null ; }
Code	{ reportMatcher ( returnZero ) ; return null ; }
Distance : 11

40
Tree	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) ; }
Distance : 12

41
Tree	{ return ( reportMatcher ) returnZero ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) returnZero ( Any.ANY ) ; }
Distance : 11

42
Tree	{ reportMatcher ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Distance : 11

43
Tree	{ return reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ return reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 7

44
Tree	{ super ( InstanceOf ) ; }
Code	{ super ( InstanceOf ) ; }
Distance : 11

45
Tree	{ return reportMatcher ( Any.ANY ) . < returnZero > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnZero > returnZero () ; }
Distance : 8

46
Tree	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 9

47
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

48
Tree	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

49
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . returnZero = reportMatcher ; }
Distance : 11

50
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = Any.ANY ; }
Distance : 11

51
Tree	{ return ( reportMatcher ) reportMatcher () ; }
Code	{ return ( reportMatcher ) reportMatcher () ; }
Distance : 10

52
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = returnZero ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = returnZero ; }
Distance : 11

53
Tree	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) . returnZero () ; }
Code	{ super ( reportMatcher ) ; returnZero ( reportMatcher ) . returnZero () ; }
Distance : 9

54
Tree	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) ; }
Distance : 12

55
Tree	{ return ( InstanceOf ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( InstanceOf ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 7

56
Tree	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

57
Tree	{ return ( InstanceOf ) returnZero ( Any.ANY ) ; }
Code	{ return ( InstanceOf ) returnZero ( Any.ANY ) ; }
Distance : 10

58
Tree	{ reportMatcher ( reportMatcher ) . returnZero () ; this . returnZero = returnZero ; }
Code	{ reportMatcher ( reportMatcher ) . returnZero () ; this . returnZero = returnZero ; }
Distance : 11

59
Tree	{ super ( returnZero ) ; }
Code	{ super ( returnZero ) ; }
Distance : 12

60
Tree	{ return reportMatcher ( Byte ) ; }
Code	{ return reportMatcher ( Byte ) ; }
Distance : 9

61
Tree	{ return Byte ( Any.ANY ) ; }
Code	{ return Byte ( Any.ANY ) ; }
Distance : 11

62
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = reportMatcher ; }
Distance : 11

63
Tree	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; }
Distance : 12

64
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

65
Tree	{ Any.ANY ( Any.ANY ) ; return null ; }
Code	{ Any.ANY ( Any.ANY ) ; return null ; }
Distance : 12

66
Tree	{ return ( reportMatcher ) reportMatcher ( reportMatcher ) ; }
Code	{ return ( reportMatcher ) reportMatcher ( reportMatcher ) ; }
Distance : 11

67
Tree	{ return reportMatcher ( InstanceOf ) ; }
Code	{ return reportMatcher ( InstanceOf ) ; }
Distance : 9

68
Tree	{ reportMatcher ( Any.ANY ) ; Any.ANY = reportMatcher . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Any.ANY = reportMatcher . returnZero () ; }
Distance : 9

69
Tree	{ return ( returnZero ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( returnZero ) reportMatcher ( Any.ANY ) ; }
Distance : 11

70
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher = InstanceOf . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher = InstanceOf . returnZero () ; }
Distance : 9

71
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; anyByte = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; anyByte = false ; }
Distance : 11

72
Tree	{ Any.ANY ( Any.ANY ) ; return false ; }
Code	{ Any.ANY ( Any.ANY ) ; return false ; }
Distance : 12

73
Tree	{ reportMatcher ( InstanceOf ) ; this . returnZero = Any.ANY ; }
Code	{ reportMatcher ( InstanceOf ) ; this . returnZero = Any.ANY ; }
Distance : 10

74
Tree	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

75
Tree	{ super ( reportMatcher ) ; } options
Code	{ super ( reportMatcher ) ; } options
Distance : 13

76
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

77
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

78
Tree	{ return ( Any.ANY ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( Any.ANY ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

79
Tree	{ reportMatcher ( InstanceOf ) ; return false ; }
Code	{ reportMatcher ( InstanceOf ) ; return false ; }
Distance : 10

80
Tree	{ return ( Any.ANY ) returnZero ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) returnZero ( Any.ANY ) ; }
Distance : 11

81
Tree	{ return ( InstanceOf ) reportMatcher () ; }
Code	{ return ( InstanceOf ) reportMatcher () ; }
Distance : 9

82
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

83
Tree	{ return reportMatcher ( returnZero ) . returnZero () ; }
Code	{ return reportMatcher ( returnZero ) . returnZero () ; }
Distance : 7

84
Tree	{ super ( reportMatcher ) ; } i
Code	{ super ( reportMatcher ) ; } i
Distance : 13

85
Tree	{ super ( reportMatcher ) ; } Math
Code	{ super ( reportMatcher ) ; } Math
Distance : 13

86
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; returnZero = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; returnZero = false ; }
Distance : 11

87
Tree	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) ; super }
Distance : 12

88
Tree	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) . returnZero () ; }
Code	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) . returnZero () ; }
Distance : 8

89
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Distance : 11

90
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

91
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

92
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = InstanceOf ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = InstanceOf ; }
Distance : 11

93
Tree	{ reportMatcher ( reportMatcher ) ; returnZero = reportMatcher . returnZero () ; }
Code	{ reportMatcher ( reportMatcher ) ; returnZero = reportMatcher . returnZero () ; }
Distance : 9

94
Tree	{ return ( Any.ANY ) reportMatcher () ; }
Code	{ return ( Any.ANY ) reportMatcher () ; }
Distance : 10

95
Tree	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Distance : 11

96
Tree	{ return reportMatcher ( Any.ANY ) . < returnZero > anyByte () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnZero > anyByte () ; }
Distance : 9

97
Tree	{ return reportMatcher ( Any.ANY ) . < reportMatcher > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < reportMatcher > returnZero () ; }
Distance : 8

98
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = InstanceOf ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = InstanceOf ; }
Distance : 11

99
Tree	{ return reportMatcher ( Any.ANY ) . < returnZero > InstanceOf () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnZero > InstanceOf () ; }
Distance : 9

100
Tree	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( Any.ANY ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

101
Tree	{ Any.ANY ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ Any.ANY ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

102
Tree	{ return reportMatcher ( InstanceOf ) . returnZero () ; }
Code	{ return reportMatcher ( InstanceOf ) . returnZero () ; }
Distance : 6

103
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

104
Tree	{ reportMatcher ( InstanceOf ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( InstanceOf ) ; return NUMBER_CONSTANT ; }
Distance : 10

105
Tree	{ reportMatcher ( returnZero ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( returnZero ) ; return NUMBER_CONSTANT ; }
Distance : 11

106
Tree	{ reportMatcher ( reportMatcher ) . returnZero () ; returnZero = false ; }
Code	{ reportMatcher ( reportMatcher ) . returnZero () ; returnZero = false ; }
Distance : 11

107
Tree	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Distance : 8

108
Tree	{ return ( InstanceOf ) returnZero () ; }
Code	{ return ( InstanceOf ) returnZero () ; }
Distance : 8

109
Tree	{ return reportMatcher ( Any.ANY ) . < InstanceOf > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < InstanceOf > returnZero () ; }
Distance : 8

110
Tree	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( reportMatcher ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

111
Tree	{ return ( reportMatcher ) Any.ANY () ; }
Code	{ return ( reportMatcher ) Any.ANY () ; }
Distance : 10

112
Tree	{ return reportMatcher ( reportMatcher ) . < returnZero > returnZero () ; }
Code	{ return reportMatcher ( reportMatcher ) . < returnZero > returnZero () ; }
Distance : 8

113
Tree	{ reportMatcher ( Any.ANY ) ; this . returnZero = returnZero ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnZero = returnZero ; }
Distance : 10

114
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Byte = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Byte = false ; }
Distance : 11

115
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

116
Tree	{ super ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; }
Distance : 12

117
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

118
Tree	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = Any.ANY ; }
Distance : 11

119
Tree	{ return this . reportMatcher ; } options
Code	{ return this . reportMatcher ; } options
Distance : 13

120
Tree	{ reportMatcher ( InstanceOf ) . returnZero () ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( InstanceOf ) . returnZero () ; this . returnZero = reportMatcher ; }
Distance : 10

121
Tree	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

122
Tree	{ reportMatcher ( reportMatcher ) ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( reportMatcher ) ; this . returnZero = reportMatcher ; }
Distance : 11

123
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Matchers = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Matchers = false ; }
Distance : 11

124
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = reportMatcher ; }
Distance : 11

125
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

126
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

127
Tree	{ return this . reportMatcher ; } i
Code	{ return this . reportMatcher ; } i
Distance : 13

128
Tree	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

129
Tree	{ reportMatcher ( Byte ) ; return null ; }
Code	{ reportMatcher ( Byte ) ; return null ; }
Distance : 10

130
Tree	{ return this . InstanceOf ; }
Code	{ return this . InstanceOf ; }
Distance : 12

131
Tree	{ return this . reportMatcher ; } Math
Code	{ return this . reportMatcher ; } Math
Distance : 13

132
Tree	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 9

133
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

134
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Distance : 11

135
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

136
Tree	{ returnZero ( Any.ANY ) ; return false ; }
Code	{ returnZero ( Any.ANY ) ; return false ; }
Distance : 12

137
Tree	{ super ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; }
Distance : 12

138
Tree	{ return reportMatcher ( reportMatcher ) ; }
Code	{ return reportMatcher ( reportMatcher ) ; }
Distance : 10

139
Tree	{ return reportMatcher ( Any.ANY ) . < Any.ANY > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Any.ANY > returnZero () ; }
Distance : 8

140
Tree	{ return ( Any.ANY ) Any.ANY () ; }
Code	{ return ( Any.ANY ) Any.ANY () ; }
Distance : 10

141
Tree	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( InstanceOf ) ; returnZero ( Any.ANY ) ; }
Distance : 11

142
Tree	{ return this . Any.ANY ; }
Code	{ return this . Any.ANY ; }
Distance : 12

143
Tree	{ reportMatcher ( Any.ANY ) ; this . reportMatcher = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . reportMatcher = Any.ANY ; }
Distance : 11

144
Tree	{ super ( Byte ) ; }
Code	{ super ( Byte ) ; }
Distance : 11

145
Tree	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 12

146
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher = Any.ANY . returnZero () ; }
Distance : 9

147
Tree	{ return reportMatcher ( anyByte ) . returnZero () ; }
Code	{ return reportMatcher ( anyByte ) . returnZero () ; }
Distance : 7

148
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

149
Tree	{ reportMatcher ( Any.ANY ) ; Any.ANY = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Any.ANY = Any.ANY . returnZero () ; }
Distance : 9

150
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; reportMatcher = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; reportMatcher = false ; }
Distance : 11

151
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

152
Tree	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) ; }
Distance : 11

153
Tree	{ return Any.ANY ( Any.ANY ) ; }
Code	{ return Any.ANY ( Any.ANY ) ; }
Distance : 11

154
Tree	{ return reportMatcher ( anyByte ) ; }
Code	{ return reportMatcher ( anyByte ) ; }
Distance : 10

155
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

156
Tree	{ return ( Byte ) reportMatcher () ; }
Code	{ return ( Byte ) reportMatcher () ; }
Distance : 9

157
Tree	{ reportMatcher ( Byte ) ; return false ; }
Code	{ reportMatcher ( Byte ) ; return false ; }
Distance : 10

158
Tree	{ return reportMatcher ( Any.ANY ) . < reportMatcher > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < reportMatcher > reportMatcher () ; }
Distance : 9

159
Tree	{ reportMatcher ( Byte ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Byte ) ; return NUMBER_CONSTANT ; }
Distance : 10

160
Tree	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) ; super }
Code	{ super ( Any.ANY ) ; reportMatcher ( reportMatcher ) ; super }
Distance : 13

161
Tree	{ return InstanceOf ( Any.ANY ) ; }
Code	{ return InstanceOf ( Any.ANY ) ; }
Distance : 10

162
Tree	{ return ( reportMatcher ) reportMatcher ( reportMatcher ) . returnZero () ; }
Code	{ return ( reportMatcher ) reportMatcher ( reportMatcher ) . returnZero () ; }
Distance : 8

163
Tree	{ super ( anyByte ) ; }
Code	{ super ( anyByte ) ; }
Distance : 12

164
Tree	{ return reportMatcher ( Any.ANY ) . < returnZero > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnZero > reportMatcher () ; }
Distance : 9

165
Tree	{ return this . Matchers ; }
Code	{ return this . Matchers ; }
Distance : 12

166
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 14

167
Tree	{ reportMatcher ( reportMatcher ) . returnZero () ; this . returnZero = reportMatcher ; }
Code	{ reportMatcher ( reportMatcher ) . returnZero () ; this . returnZero = reportMatcher ; }
Distance : 11

168
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; InstanceOf = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; InstanceOf = false ; }
Distance : 11

169
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

170
Tree	{ return reportMatcher ( Byte ) . returnZero () ; }
Code	{ return reportMatcher ( Byte ) . returnZero () ; }
Distance : 6

171
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

172
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher = reportMatcher . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher = reportMatcher . returnZero () ; }
Distance : 9

173
Tree	{ InstanceOf ( Any.ANY ) ; return null ; }
Code	{ InstanceOf ( Any.ANY ) ; return null ; }
Distance : 11

174
Tree	{ return InstanceOf ( Any.ANY ) . returnZero () ; }
Code	{ return InstanceOf ( Any.ANY ) . returnZero () ; }
Distance : 7

175
Tree	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( returnZero ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

176
Tree	{ InstanceOf ( Any.ANY ) ; return false ; }
Code	{ InstanceOf ( Any.ANY ) ; return false ; }
Distance : 11

177
Tree	{ InstanceOf ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Code	{ InstanceOf ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Distance : 11

178
Tree	{ return returnZero ( Any.ANY ) ; }
Code	{ return returnZero ( Any.ANY ) ; }
Distance : 11

179
Tree	{ return Any.ANY ( Any.ANY ) . returnZero () ; }
Code	{ return Any.ANY ( Any.ANY ) . returnZero () ; }
Distance : 8

180
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

181
Tree	{ reportMatcher ( InstanceOf ) ; return null ; }
Code	{ reportMatcher ( InstanceOf ) ; return null ; }
Distance : 10

182
Tree	{ return ( Any.ANY ) returnZero () ; }
Code	{ return ( Any.ANY ) returnZero () ; }
Distance : 9

183
Tree	{ return this . Byte ; }
Code	{ return this . Byte ; }
Distance : 12

184
Tree	{ InstanceOf ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ InstanceOf ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

185
Tree	{ reportMatcher ( InstanceOf ) . returnZero () ; returnZero = false ; }
Code	{ reportMatcher ( InstanceOf ) . returnZero () ; returnZero = false ; }
Distance : 10

186
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 14

187
Tree	{ reportMatcher ( Any.ANY ) ; returnZero = returnZero . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnZero = returnZero . returnZero () ; }
Distance : 9

188
Tree	{ return reportMatcher ( returnZero ) ; }
Code	{ return reportMatcher ( returnZero ) ; }
Distance : 10

189
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

190
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

191
Tree	{ reportMatcher ( Any.ANY ) ; returnZero = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnZero = Any.ANY . returnZero () ; }
Distance : 9

192
Tree	{ return ( returnZero ) reportMatcher () ; }
Code	{ return ( returnZero ) reportMatcher () ; }
Distance : 10

193
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = Byte ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . returnZero = Byte ; }
Distance : 11

194
Tree	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) ; }
Distance : 10

195
Tree	{ reportMatcher ( reportMatcher ) ; return false ; }
Code	{ reportMatcher ( reportMatcher ) ; return false ; }
Distance : 11

196
Tree	{ super ( Matchers ) ; }
Code	{ super ( Matchers ) ; }
Distance : 12

197
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

198
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 14

199
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 14

========================================================================


========================================================================
Example Number: 106
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnFalse () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Boolean . class ) ) . returnFalse () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnFalse}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Boolean})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnFalse}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super ( reportMatcher ) ; returnFalse ( Any.ANY ) ; try }
Code	{ super ( reportMatcher ) ; returnFalse ( Any.ANY ) ; try }
Distance : 13

1
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; Any.ANY = false ; }
Distance : 11

2
Tree	{ reportMatcher ( reportMatcher ) . returnFalse () ; returnFalse = false ; }
Code	{ reportMatcher ( reportMatcher ) . returnFalse () ; returnFalse = false ; }
Distance : 11

3
Tree	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) . returnFalse () ; }
Code	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) . returnFalse () ; }
Distance : 7

4
Tree	{ return ( reportMatcher ) returnFalse ( reportMatcher ) ; }
Code	{ return ( reportMatcher ) returnFalse ( reportMatcher ) ; }
Distance : 11

5
Tree	{ reportMatcher ( Any.ANY ) ; returnFalse = reportMatcher . returnFalse () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnFalse = reportMatcher . returnFalse () ; }
Distance : 9

6
Tree	{ return ( reportMatcher ) returnFalse ( reportMatcher ) . returnFalse () ; }
Code	{ return ( reportMatcher ) returnFalse ( reportMatcher ) . returnFalse () ; }
Distance : 8

7
Tree	{ return this . Boolean ; }
Code	{ return this . Boolean ; }
Distance : 12

8
Tree	{ return ( Any.ANY ) reportMatcher () ; }
Code	{ return ( Any.ANY ) reportMatcher () ; }
Distance : 10

9
Tree	{ reportMatcher ( anyBoolean ) ; return null ; }
Code	{ reportMatcher ( anyBoolean ) ; return null ; }
Distance : 11

10
Tree	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) . returnFalse () ; }
Code	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) . returnFalse () ; }
Distance : 8

11
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; InstanceOf = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; InstanceOf = false ; }
Distance : 11

12
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) . returnFalse () ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) . returnFalse () ; }
Distance : 9

13
Tree	{ super ( reportMatcher ) ; returnFalse ( Any.ANY ) ; StringBuffer }
Code	{ super ( reportMatcher ) ; returnFalse ( Any.ANY ) ; StringBuffer }
Distance : 13

14
Tree	{ super ( reportMatcher ) ; returnFalse ( Any.ANY ) ; Args }
Code	{ super ( reportMatcher ) ; returnFalse ( Any.ANY ) ; Args }
Distance : 13

15
Tree	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( InstanceOf ) reportMatcher ( Any.ANY ) ; }
Distance : 10

16
Tree	{ super ( reportMatcher ) ; returnFalse ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; returnFalse ( Any.ANY ) ; }
Distance : 12

17
Tree	{ return ( reportMatcher ) returnFalse ( Any.ANY ) . returnFalse () ; }
Code	{ return ( reportMatcher ) returnFalse ( Any.ANY ) . returnFalse () ; }
Distance : 8

18
Tree	{ return ( reportMatcher ) returnFalse ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) returnFalse ( Any.ANY ) ; }
Distance : 11

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

20
Tree	{ InstanceOf ( Any.ANY ) ; return null ; }
Code	{ InstanceOf ( Any.ANY ) ; return null ; }
Distance : 11

21
Tree	{ reportMatcher ( reportMatcher ) ; return null ; }
Code	{ reportMatcher ( reportMatcher ) ; return null ; }
Distance : 11

22
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; }
Distance : 7

23
Tree	{ super ( InstanceOf ) ; returnFalse ( Any.ANY ) . returnFalse () ; }
Code	{ super ( InstanceOf ) ; returnFalse ( Any.ANY ) . returnFalse () ; }
Distance : 8

24
Tree	{ Boolean ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ Boolean ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

25
Tree	{ return reportMatcher ( Boolean ) . < returnFalse > returnFalse () ; }
Code	{ return reportMatcher ( Boolean ) . < returnFalse > returnFalse () ; }
Distance : 8

26
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

27
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

28
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

29
Tree	{ super ( reportMatcher ) ; returnFalse ( Any.ANY ) . returnFalse () ; }
Code	{ super ( reportMatcher ) ; returnFalse ( Any.ANY ) . returnFalse () ; }
Distance : 9

30
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . returnFalse = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . returnFalse = Any.ANY ; }
Distance : 11

31
Tree	{ super ( Any.ANY ) ; returnFalse ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; returnFalse ( Any.ANY ) ; }
Distance : 12

32
Tree	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . Any.ANY () ; }
Distance : 8

33
Tree	{ reportMatcher ( Any.ANY ) ; returnFalse = returnFalse . returnFalse () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnFalse = returnFalse . returnFalse () ; }
Distance : 9

34
Tree	{ super ( reportMatcher ) ; returnFalse ( Any.ANY ) ; returnFalse }
Code	{ super ( reportMatcher ) ; returnFalse ( Any.ANY ) ; returnFalse }
Distance : 12

35
Tree	{ super ( reportMatcher ) ; returnFalse ( Any.ANY ) ; return }
Code	{ super ( reportMatcher ) ; returnFalse ( Any.ANY ) ; return }
Distance : 13

36
Tree	{ reportMatcher ( Any.ANY ) ; Boolean = Any.ANY . returnFalse () ; }
Code	{ reportMatcher ( Any.ANY ) ; Boolean = Any.ANY . returnFalse () ; }
Distance : 8

37
Tree	{ return ( InstanceOf ) returnFalse () ; }
Code	{ return ( InstanceOf ) returnFalse () ; }
Distance : 8

38
Tree	{ reportMatcher ( InstanceOf ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( InstanceOf ) ; return NUMBER_CONSTANT ; }
Distance : 10

39
Tree	{ return reportMatcher ( InstanceOf ) . returnFalse () ; }
Code	{ return reportMatcher ( InstanceOf ) . returnFalse () ; }
Distance : 6

40
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

41
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . returnFalse = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . returnFalse = reportMatcher ; }
Distance : 11

42
Tree	{ return reportMatcher ( Boolean ) . returnFalse () ; }
Code	{ return reportMatcher ( Boolean ) . returnFalse () ; }
Distance : 6

43
Tree	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; returnFalse = Any.ANY . returnFalse () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnFalse = Any.ANY . returnFalse () ; }
Distance : 9

45
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

46
Tree	{ reportMatcher ( anyBoolean ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( anyBoolean ) ; return NUMBER_CONSTANT ; }
Distance : 11

47
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

48
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

49
Tree	{ return reportMatcher ( reportMatcher ) . < returnFalse > returnFalse () ; }
Code	{ return reportMatcher ( reportMatcher ) . < returnFalse > returnFalse () ; }
Distance : 8

50
Tree	{ super ( InstanceOf ) ; returnFalse ( Any.ANY ) ; }
Code	{ super ( InstanceOf ) ; returnFalse ( Any.ANY ) ; }
Distance : 11

51
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) ; }
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) ; }
Distance : 10

52
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . returnFalse = returnFalse ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . returnFalse = returnFalse ; }
Distance : 11

53
Tree	{ return ( Any.ANY ) returnFalse () ; }
Code	{ return ( Any.ANY ) returnFalse () ; }
Distance : 9

54
Tree	{ reportMatcher ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( reportMatcher ) ; return NUMBER_CONSTANT ; }
Distance : 11

55
Tree	{ reportMatcher ( Boolean ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Boolean ) ; return NUMBER_CONSTANT ; }
Distance : 10

56
Tree	{ return this . Any.ANY ; }
Code	{ return this . Any.ANY ; }
Distance : 12

57
Tree	{ reportMatcher ( InstanceOf ) ; return false ; }
Code	{ reportMatcher ( InstanceOf ) ; return false ; }
Distance : 10

58
Tree	{ reportMatcher ( Any.ANY ) ; this . returnFalse = returnFalse ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnFalse = returnFalse ; }
Distance : 10

59
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

60
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

61
Tree	{ return ( reportMatcher ) returnFalse () ; }
Code	{ return ( reportMatcher ) returnFalse () ; }
Distance : 9

62
Tree	{ super ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; }
Distance : 12

63
Tree	{ reportMatcher ( Any.ANY ) ; this . returnFalse = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnFalse = reportMatcher ; }
Distance : 11

64
Tree	{ return reportMatcher ( Any.ANY ) . Boolean () ; }
Code	{ return reportMatcher ( Any.ANY ) . Boolean () ; }
Distance : 8

65
Tree	{ return reportMatcher ( Any.ANY ) . < Boolean > returnFalse () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Boolean > returnFalse () ; }
Distance : 8

66
Tree	{ reportMatcher ( anyBoolean ) ; return false ; }
Code	{ reportMatcher ( anyBoolean ) ; return false ; }
Distance : 11

67
Tree	{ reportMatcher ( Boolean ) ; return null ; }
Code	{ reportMatcher ( Boolean ) ; return null ; }
Distance : 10

68
Tree	{ return this . returnFalse ; }
Code	{ return this . returnFalse ; }
Distance : 11

69
Tree	{ return reportMatcher ( InstanceOf ) ; }
Code	{ return reportMatcher ( InstanceOf ) ; }
Distance : 9

70
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . returnFalse = InstanceOf ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . returnFalse = InstanceOf ; }
Distance : 11

71
Tree	{ return returnFalse ( Any.ANY ) ; }
Code	{ return returnFalse ( Any.ANY ) ; }
Distance : 11

72
Tree	{ reportMatcher ( reportMatcher ) ; return false ; }
Code	{ reportMatcher ( reportMatcher ) ; return false ; }
Distance : 11

73
Tree	{ return reportMatcher ( reportMatcher ) . returnFalse () ; }
Code	{ return reportMatcher ( reportMatcher ) . returnFalse () ; }
Distance : 7

74
Tree	{ return ( InstanceOf ) reportMatcher () ; }
Code	{ return ( InstanceOf ) reportMatcher () ; }
Distance : 9

75
Tree	{ super ( reportMatcher ) ; } options
Code	{ super ( reportMatcher ) ; } options
Distance : 13

76
Tree	{ Any.ANY ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ Any.ANY ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; anyBoolean = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; anyBoolean = false ; }
Distance : 11

78
Tree	{ Any.ANY ( Any.ANY ) ; return false ; }
Code	{ Any.ANY ( Any.ANY ) ; return false ; }
Distance : 12

79
Tree	{ return ( reportMatcher ) reportMatcher () ; }
Code	{ return ( reportMatcher ) reportMatcher () ; }
Distance : 10

80
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; returnFalse }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) ; returnFalse }
Distance : 12

81
Tree	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) ; }
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; reportMatcher = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; reportMatcher = false ; }
Distance : 11

83
Tree	{ return ( Boolean ) returnFalse () ; }
Code	{ return ( Boolean ) returnFalse () ; }
Distance : 8

84
Tree	{ super ( Boolean ) ; }
Code	{ super ( Boolean ) ; }
Distance : 11

85
Tree	{ return reportMatcher ( Any.ANY ) . < returnFalse > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnFalse > reportMatcher () ; }
Distance : 9

86
Tree	{ reportMatcher ( InstanceOf ) ; return null ; }
Code	{ reportMatcher ( InstanceOf ) ; return null ; }
Distance : 10

87
Tree	{ return ( InstanceOf ) returnFalse ( Any.ANY ) . returnFalse () ; }
Code	{ return ( InstanceOf ) returnFalse ( Any.ANY ) . returnFalse () ; }
Distance : 7

88
Tree	{ reportMatcher ( Any.ANY ) ; this . returnFalse = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnFalse = Any.ANY ; }
Distance : 11

89
Tree	{ return reportMatcher ( Any.ANY ) . < InstanceOf > returnFalse () ; }
Code	{ return reportMatcher ( Any.ANY ) . < InstanceOf > returnFalse () ; }
Distance : 8

90
Tree	{ super ( reportMatcher ) ; Any.ANY ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; Any.ANY ( Any.ANY ) ; }
Distance : 12

91
Tree	{ return reportMatcher ( reportMatcher ) ; }
Code	{ return reportMatcher ( reportMatcher ) ; }
Distance : 10

92
Tree	{ return this . InstanceOf ; }
Code	{ return this . InstanceOf ; }
Distance : 12

93
Tree	{ return this . reportMatcher ; }
Code	{ return this . reportMatcher ; }
Distance : 12

94
Tree	{ super ( Any.ANY ) ; returnFalse ( Any.ANY ) ; returnFalse }
Code	{ super ( Any.ANY ) ; returnFalse ( Any.ANY ) ; returnFalse }
Distance : 12

95
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) . returnFalse () ; }
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) . returnFalse () ; }
Distance : 8

96
Tree	{ return ( Any.ANY ) returnFalse ( Any.ANY ) . returnFalse () ; }
Code	{ return ( Any.ANY ) returnFalse ( Any.ANY ) . returnFalse () ; }
Distance : 8

97
Tree	{ super ( reportMatcher ) ; } i
Code	{ super ( reportMatcher ) ; } i
Distance : 13

98
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . returnFalse () ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) . returnFalse () ; }
Distance : 8

99
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

100
Tree	{ reportMatcher ( reportMatcher ) ; this . returnFalse = Any.ANY ; }
Code	{ reportMatcher ( reportMatcher ) ; this . returnFalse = Any.ANY ; }
Distance : 11

101
Tree	{ InstanceOf ( Any.ANY ) ; return false ; }
Code	{ InstanceOf ( Any.ANY ) ; return false ; }
Distance : 11

102
Tree	{ return NUMBER_CONSTANT ; } -
Code	{ return NUMBER_CONSTANT ; } -
Distance : 14

103
Tree	{ reportMatcher ( InstanceOf ) . returnFalse () ; this . returnFalse = reportMatcher ; }
Code	{ reportMatcher ( InstanceOf ) . returnFalse () ; this . returnFalse = reportMatcher ; }
Distance : 10

104
Tree	{ reportMatcher ( reportMatcher ) ; returnFalse = Any.ANY . returnFalse () ; }
Code	{ reportMatcher ( reportMatcher ) ; returnFalse = Any.ANY . returnFalse () ; }
Distance : 9

105
Tree	{ return this . anyBoolean ; }
Code	{ return this . anyBoolean ; }
Distance : 12

106
Tree	{ reportMatcher ( Boolean ) ; return false ; }
Code	{ reportMatcher ( Boolean ) ; return false ; }
Distance : 10

107
Tree	{ reportMatcher ( Boolean ) . returnFalse () ; this . returnFalse = reportMatcher ; }
Code	{ reportMatcher ( Boolean ) . returnFalse () ; this . returnFalse = reportMatcher ; }
Distance : 11

108
Tree	{ super ( anyBoolean ) ; }
Code	{ super ( anyBoolean ) ; }
Distance : 12

109
Tree	{ return ( InstanceOf ) returnFalse ( Any.ANY ) ; }
Code	{ return ( InstanceOf ) returnFalse ( Any.ANY ) ; }
Distance : 10

110
Tree	{ super ( reportMatcher ) ; } Math
Code	{ super ( reportMatcher ) ; } Math
Distance : 13

111
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

112
Tree	{ InstanceOf ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ InstanceOf ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

113
Tree	{ return ( Any.ANY ) returnFalse ( reportMatcher ) . returnFalse () ; }
Code	{ return ( Any.ANY ) returnFalse ( reportMatcher ) . returnFalse () ; }
Distance : 8

114
Tree	{ return ( Any.ANY ) returnFalse ( reportMatcher ) ; }
Code	{ return ( Any.ANY ) returnFalse ( reportMatcher ) ; }
Distance : 11

115
Tree	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) reportMatcher ( Any.ANY ) ; }
Distance : 11

116
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

117
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher = Any.ANY . returnFalse () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher = Any.ANY . returnFalse () ; }
Distance : 9

118
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; Boolean = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; Boolean = false ; }
Distance : 11

119
Tree	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = returnFalse ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = returnFalse ; }
Distance : 10

120
Tree	{ reportMatcher ( Any.ANY ) ; returnFalse = InstanceOf . returnFalse () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnFalse = InstanceOf . returnFalse () ; }
Distance : 9

121
Tree	{ reportMatcher ( InstanceOf ) ; this . returnFalse = Any.ANY ; }
Code	{ reportMatcher ( InstanceOf ) ; this . returnFalse = Any.ANY ; }
Distance : 10

122
Tree	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) ; }
Distance : 11

123
Tree	{ return NUMBER_CONSTANT ; } [
Code	{ return NUMBER_CONSTANT ; } [
Distance : 14

124
Tree	{ return reportMatcher ( anyBoolean ) . returnFalse () ; }
Code	{ return reportMatcher ( anyBoolean ) . returnFalse () ; }
Distance : 7

125
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

126
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

127
Tree	{ super ( reportMatcher ) ; returnFalse ( Any.ANY ) ; returnFor }
Code	{ super ( reportMatcher ) ; returnFalse ( Any.ANY ) ; returnFor }
Distance : 13

128
Tree	{ return null ; } i
Code	{ return null ; } i
Distance : 14

129
Tree	{ return ( Any.ANY ) returnFalse ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) returnFalse ( Any.ANY ) ; }
Distance : 11

130
Tree	{ return reportMatcher ( Any.ANY ) . < reportMatcher > returnFalse () ; }
Code	{ return reportMatcher ( Any.ANY ) . < reportMatcher > returnFalse () ; }
Distance : 8

131
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

132
Tree	{ return reportMatcher ( anyBoolean ) ; }
Code	{ return reportMatcher ( anyBoolean ) ; }
Distance : 10

133
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher = returnFalse . returnFalse () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher = returnFalse . returnFalse () ; }
Distance : 9

134
Tree	{ Boolean ( Any.ANY ) ; return false ; }
Code	{ Boolean ( Any.ANY ) ; return false ; }
Distance : 12

135
Tree	{ return InstanceOf ( Any.ANY ) ; }
Code	{ return InstanceOf ( Any.ANY ) ; }
Distance : 10

136
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

137
Tree	{ return reportMatcher ( returnFalse ) ; }
Code	{ return reportMatcher ( returnFalse ) ; }
Distance : 10

138
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

139
Tree	{ reportMatcher ( Any.ANY ) ; this . returnFalse = Boolean ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnFalse = Boolean ; }
Distance : 11

140
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . returnFalse = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . returnFalse = reportMatcher ; }
Distance : 11

141
Tree	{ super ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; }
Distance : 12

142
Tree	{ reportMatcher ( returnFalse ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( returnFalse ) ; return NUMBER_CONSTANT ; }
Distance : 11

143
Tree	{ return null ; } value
Code	{ return null ; } value
Distance : 14

144
Tree	{ reportMatcher ( Any.ANY ) ; returnFalse = Boolean . returnFalse () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnFalse = Boolean . returnFalse () ; }
Distance : 9

145
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

146
Tree	{ return reportMatcher ( Any.ANY ) . < Any.ANY > returnFalse () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Any.ANY > returnFalse () ; }
Distance : 8

147
Tree	{ returnFalse ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnFalse ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

148
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . returnFalse = Boolean ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . returnFalse = Boolean ; }
Distance : 11

149
Tree	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) . returnFalse () ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( reportMatcher ) . returnFalse () ; }
Distance : 9

150
Tree	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) . returnFalse () ; }
Code	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) . returnFalse () ; }
Distance : 8

151
Tree	{ super ( reportMatcher ) ; Any.ANY ( Any.ANY ) . returnFalse () ; }
Code	{ super ( reportMatcher ) ; Any.ANY ( Any.ANY ) . returnFalse () ; }
Distance : 9

152
Tree	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . returnFalse () ; }
Code	{ super ( reportMatcher ) ; reportMatcher ( Any.ANY ) . returnFalse () ; }
Distance : 9

153
Tree	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) . returnFalse () ; }
Code	{ super ( InstanceOf ) ; reportMatcher ( Any.ANY ) . returnFalse () ; }
Distance : 8

154
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; Matchers = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; Matchers = false ; }
Distance : 11

155
Tree	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Any.ANY ) reportMatcher ( Any.ANY ) ; }
Distance : 11

156
Tree	{ return ( Any.ANY ) Any.ANY () ; }
Code	{ return ( Any.ANY ) Any.ANY () ; }
Distance : 10

157
Tree	{ super ( Any.ANY ) ; returnFalse ( reportMatcher ) . returnFalse () ; }
Code	{ super ( Any.ANY ) ; returnFalse ( reportMatcher ) . returnFalse () ; }
Distance : 9

158
Tree	{ super ( reportMatcher ) ; returnFalse ( Any.ANY ) ; reportMatcher }
Code	{ super ( reportMatcher ) ; returnFalse ( Any.ANY ) ; reportMatcher }
Distance : 13

159
Tree	{ return reportMatcher ( Any.ANY ) . < returnFalse > Any.ANY () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnFalse > Any.ANY () ; }
Distance : 9

160
Tree	{ reportMatcher ( reportMatcher ) . returnFalse () ; this . returnFalse = reportMatcher ; }
Code	{ reportMatcher ( reportMatcher ) . returnFalse () ; this . returnFalse = reportMatcher ; }
Distance : 11

161
Tree	{ super ( returnFalse ) ; }
Code	{ super ( returnFalse ) ; }
Distance : 12

162
Tree	{ return reportMatcher ( Any.ANY ) . < returnFalse > anyBoolean () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnFalse > anyBoolean () ; }
Distance : 9

163
Tree	{ reportMatcher ( InstanceOf ) . returnFalse () ; returnFalse = false ; }
Code	{ reportMatcher ( InstanceOf ) . returnFalse () ; returnFalse = false ; }
Distance : 10

164
Tree	{ super ( Any.ANY ) ; returnFalse ( reportMatcher ) ; }
Code	{ super ( Any.ANY ) ; returnFalse ( reportMatcher ) ; }
Distance : 12

165
Tree	{ reportMatcher ( Any.ANY ) ; this . returnFalse = InstanceOf ; }
Code	{ reportMatcher ( Any.ANY ) ; this . returnFalse = InstanceOf ; }
Distance : 11

166
Tree	{ Any.ANY ( Any.ANY ) ; return null ; }
Code	{ Any.ANY ( Any.ANY ) ; return null ; }
Distance : 12

167
Tree	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Any.ANY = Any.ANY ; }
Distance : 11

168
Tree	{ return InstanceOf ( Any.ANY ) . returnFalse () ; }
Code	{ return InstanceOf ( Any.ANY ) . returnFalse () ; }
Distance : 7

169
Tree	{ return this . Matchers ; }
Code	{ return this . Matchers ; }
Distance : 12

170
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

171
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

172
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Any.ANY = reportMatcher ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Any.ANY = reportMatcher ; }
Distance : 12

173
Tree	{ reportMatcher ( reportMatcher ) ; this . returnFalse = returnFalse ; }
Code	{ reportMatcher ( reportMatcher ) ; this . returnFalse = returnFalse ; }
Distance : 10

174
Tree	{ return Any.ANY ( Any.ANY ) . returnFalse () ; }
Code	{ return Any.ANY ( Any.ANY ) . returnFalse () ; }
Distance : 8

175
Tree	{ return this . reportMatcher ; } Math
Code	{ return this . reportMatcher ; } Math
Distance : 13

176
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

177
Tree	{ super ( reportMatcher ) ; returnFalse ( Any.ANY ) ; nullNotPermitted }
Code	{ super ( reportMatcher ) ; returnFalse ( Any.ANY ) ; nullNotPermitted }
Distance : 13

178
Tree	{ reportMatcher ( returnFalse ) ; return false ; }
Code	{ reportMatcher ( returnFalse ) ; return false ; }
Distance : 11

179
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

180
Tree	{ return Boolean ( Any.ANY ) ; }
Code	{ return Boolean ( Any.ANY ) ; }
Distance : 11

181
Tree	{ super ( Matchers ) ; }
Code	{ super ( Matchers ) ; }
Distance : 12

182
Tree	{ super ( reportMatcher ) ; returnFalse ( reportMatcher ) . returnFalse () ; }
Code	{ super ( reportMatcher ) ; returnFalse ( reportMatcher ) . returnFalse () ; }
Distance : 9

183
Tree	{ return this . reportMatcher ; } options
Code	{ return this . reportMatcher ; } options
Distance : 13

184
Tree	{ super ( Any.ANY ) ; returnFalse ( Any.ANY ) . returnFalse () ; }
Code	{ super ( Any.ANY ) ; returnFalse ( Any.ANY ) . returnFalse () ; }
Distance : 9

185
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; returnFalse = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; returnFalse = false ; }
Distance : 11

186
Tree	{ return this . reportMatcher ; } i
Code	{ return this . reportMatcher ; } i
Distance : 13

187
Tree	{ return reportMatcher ( Boolean ) ; }
Code	{ return reportMatcher ( Boolean ) ; }
Distance : 9

188
Tree	{ return ( Boolean ) reportMatcher () ; }
Code	{ return ( Boolean ) reportMatcher () ; }
Distance : 9

189
Tree	{ reportMatcher ( Any.ANY ) ; Any.ANY = Any.ANY . returnFalse () ; }
Code	{ reportMatcher ( Any.ANY ) ; Any.ANY = Any.ANY . returnFalse () ; }
Distance : 9

190
Tree	{ return ( reportMatcher ) Any.ANY () ; }
Code	{ return ( reportMatcher ) Any.ANY () ; }
Distance : 10

191
Tree	{ reportMatcher ( Boolean ) . returnFalse () ; returnFalse = false ; }
Code	{ reportMatcher ( Boolean ) . returnFalse () ; returnFalse = false ; }
Distance : 11

192
Tree	{ return reportMatcher ( Any.ANY ) . < returnFalse > returnFalse () ; }
Code	{ return reportMatcher ( Any.ANY ) . < returnFalse > returnFalse () ; }
Distance : 8

193
Tree	{ super ( reportMatcher ) ; returnFalse ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; returnFalse ( reportMatcher ) ; }
Distance : 12

194
Tree	{ super ( InstanceOf ) ; }
Code	{ super ( InstanceOf ) ; }
Distance : 11

195
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

196
Tree	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) Any.ANY ( Any.ANY ) ; }
Distance : 11

197
Tree	{ return Any.ANY ( Any.ANY ) ; }
Code	{ return Any.ANY ( Any.ANY ) ; }
Distance : 11

198
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

199
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

========================================================================


========================================================================
Example Number: 107
Parent Code is: 
catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
-------------------------------------------------------------------------------
Child code is: 
catch ( AssertionError e ) { error = handleVerifyException ( e ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (12 (331{val=catch}) (214{val=(}) (44 (43 (40{val=org.mockito.exceptions.verification.junit.ArgumentsAreDifferent})) (800{val=e})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=error}) (204{val==}) (32 (802{val=handleVerifyException}) (214{val=(}) (800{val=e}) (215{val=)}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (12 (331{val=catch}) (214{val=(}) (44 (43 (801{val=AssertionError})) (800{val=e})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=error}) (204{val==}) (32 (802{val=handleVerifyException}) (214{val=(}) (800{val=e}) (215{val=)}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/5/parent/src_org_mockito_internal_verification_VerificationOverTimeImpl.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 5

1
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Distance : 1

2
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException . handleVerifyException () ; }
Distance : 4

3
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Distance : 1

4
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Distance : 2

5
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException . handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException . handleVerifyException ( e , e ) ; }
Distance : 5

6
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) . AssertionError () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) . AssertionError () ; }
Distance : 4

7
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( MockitoAssertionError ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( MockitoAssertionError ( e ) ) ; }
Distance : 9

8
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 6

9
Tree	catch ( MockitoAssertionError e ) { error = handleVerifyException ( e ) . error () ; }
Code	catch ( MockitoAssertionError e ) { error = handleVerifyException ( e ) . error () ; }
Distance : 4

10
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . error ( handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . error ( handleVerifyException ( e ) ) ; }
Distance : 8

11
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , false ) ; }
Distance : 3

12
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , e ) ; }
Distance : 3

13
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { MockitoAssertionError ( STRING_CONSTANT + e + STRING_CONSTANT , error . e () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { MockitoAssertionError ( STRING_CONSTANT + e + STRING_CONSTANT , error . e () ) ; }
Distance : 12

14
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , error . handleVerifyException () ) ; }
Distance : 12

15
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; }
Distance : 5

16
Tree	catch ( MockitoAssertionError e ) { error = handleVerifyException ( e ) . handleVerifyException () ; }
Code	catch ( MockitoAssertionError e ) { error = handleVerifyException ( e ) . handleVerifyException () ; }
Distance : 4

17
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( verify ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( verify ) ; }
Distance : 2

18
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . e ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . e ) ; }
Distance : 6

19
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e ( e ) , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e ( e ) , false ) ; }
Distance : 9

20
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) . error () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) . error () ; }
Distance : 4

21
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Distance : 3

22
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent isCounting e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent isCounting e ) { error = handleVerifyException ( e ) ; }
Distance : 3

23
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e . handleVerifyException () ; }
Distance : 5

24
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . verify ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . verify ) ; }
Distance : 6

25
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e ) ) ; }
Distance : 7

26
Tree	catch ( MockitoAssertionError e ) { error = handleVerifyException ( e , false ) ; }
Code	catch ( MockitoAssertionError e ) { error = handleVerifyException ( e , false ) ; }
Distance : 3

27
Tree	catch ( final MockitoAssertionError e ) { error = handleVerifyException ( e ) ; }
Code	catch ( final MockitoAssertionError e ) { error = handleVerifyException ( e ) ; }
Distance : 2

28
Tree	catch ( final handleVerifyException e ) { error = handleVerifyException ( e ) ; }
Code	catch ( final handleVerifyException e ) { error = handleVerifyException ( e ) ; }
Distance : 2

29
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MockitoAssertionError . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MockitoAssertionError . handleVerifyException () ; }
Distance : 5

30
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , MockitoAssertionError ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , MockitoAssertionError ( e ) ) ; }
Distance : 6

31
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . isCounting ( MockitoAssertionError ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . isCounting ( MockitoAssertionError ( e ) ) ; }
Distance : 9

32
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MockitoAssertionError . handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MockitoAssertionError . handleVerifyException ( e , e ) ; }
Distance : 5

33
Tree	catch ( MockitoAssertionError e ) { error = handleVerifyException ( e , e ) ; }
Code	catch ( MockitoAssertionError e ) { error = handleVerifyException ( e , e ) ; }
Distance : 3

34
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + verify ( e ) , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + verify ( e ) , false ) ; }
Distance : 9

35
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e , error ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e , error ( e ) ) ; }
Distance : 7

36
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , isCounting ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , isCounting ( e ) ) ; }
Distance : 6

37
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . handleVerifyException () ; }
Distance : 6

38
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = org.mockito.exceptions.verification.junit.ArgumentsAreDifferent . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = org.mockito.exceptions.verification.junit.ArgumentsAreDifferent . handleVerifyException () ; }
Distance : 5

39
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException . isCounting () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException . isCounting () ; }
Distance : 4

40
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e ) ; }
Distance : 2

41
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , MockitoAssertionError ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , MockitoAssertionError ( e ) ) ; }
Distance : 7

42
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = org.mockito.exceptions.verification.junit.ArgumentsAreDifferent . handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = org.mockito.exceptions.verification.junit.ArgumentsAreDifferent . handleVerifyException ( e , e ) ; }
Distance : 5

43
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; }
Distance : 2

44
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException . org.mockito.exceptions.verification.junit.ArgumentsAreDifferent () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException . org.mockito.exceptions.verification.junit.ArgumentsAreDifferent () ; }
Distance : 4

45
Tree	catch ( handleVerifyException e ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( handleVerifyException e ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 5

46
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException . isCounting ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException . isCounting ( e , e ) ; }
Distance : 5

47
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = returnOnSuccess ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = returnOnSuccess ( e ) ; }
Distance : 2

48
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , error . e () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , error . e () ) ; }
Distance : 10

49
Tree	catch ( MockitoAssertionError e ) { error = handleVerifyException ( e ) ; }
Code	catch ( MockitoAssertionError e ) { error = handleVerifyException ( e ) ; }
Distance : 1

50
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , error ) ; }
Distance : 3

51
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , AssertionError ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , AssertionError ) ; }
Distance : 3

52
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , error . verify () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , error . verify () ) ; }
Distance : 10

53
Tree	catch ( final handleVerifyException e ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( final handleVerifyException e ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 6

54
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( verify ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( verify ) ; }
Distance : 3

55
Tree	catch ( handleVerifyException e ) { error = handleVerifyException ( e ) ; }
Code	catch ( handleVerifyException e ) { error = handleVerifyException ( e ) ; }
Distance : 1

56
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { verify = handleVerifyException ( e , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { verify = handleVerifyException ( e , this . error ) ; }
Distance : 6

57
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e ) ; }
Distance : 2

58
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { verify = handleVerifyException ( e , this . error ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { verify = handleVerifyException ( e , this . error ) ; }
Distance : 7

59
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . verify ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . verify ) ; }
Distance : 5

60
Tree	catch ( handleVerifyException e ) { error = handleVerifyException ( e , false ) ; }
Code	catch ( handleVerifyException e ) { error = handleVerifyException ( e , false ) ; }
Distance : 3

61
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e , error ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e , error ( e ) ) ; }
Distance : 6

62
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e ) ) ; }
Distance : 6

63
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException . MockitoAssertionError () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException . MockitoAssertionError () ; }
Distance : 4

64
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Distance : 6

65
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e , this . error ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e , this . error ) ; }
Distance : 7

66
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException . MockitoAssertionError ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException . MockitoAssertionError ( e , e ) ; }
Distance : 5

67
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) . handleVerifyException () ; }
Distance : 4

68
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e ( e ) ; }
Distance : 2

69
Tree	catch ( isCounting e ) { error = handleVerifyException ( e ) ; }
Code	catch ( isCounting e ) { error = handleVerifyException ( e ) ; }
Distance : 1

70
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = delegate . handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = delegate . handleVerifyException ( e , e ) ; }
Distance : 5

71
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; }
Distance : 3

72
Tree	catch ( handleVerifyException e ) { error = handleVerifyException ( e , e ) ; }
Code	catch ( handleVerifyException e ) { error = handleVerifyException ( e , e ) ; }
Distance : 3

73
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { verify = handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { verify = handleVerifyException ( e , e ) ; }
Distance : 4

74
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MockitoAssertionError ( e , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MockitoAssertionError ( e , false ) ; }
Distance : 4

75
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { MockitoAssertionError ( e , error ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { MockitoAssertionError ( e , error ( e ) ) ; }
Distance : 7

76
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , error ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , error ( e ) ) ; }
Distance : 7

77
Tree	catch ( MockitoAssertionError e ) { error = handleVerifyException . handleVerifyException ( e , e ) ; }
Code	catch ( MockitoAssertionError e ) { error = handleVerifyException . handleVerifyException ( e , e ) ; }
Distance : 5

78
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MockitoAssertionError ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MockitoAssertionError ( e , e ) ; }
Distance : 4

79
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , MockitoAssertionError ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , MockitoAssertionError ( e ) ) ; }
Distance : 6

80
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; }
Distance : 6

81
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) . verify () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) . verify () ; }
Distance : 4

82
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . error () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . error () ; }
Distance : 6

83
Tree	catch ( MockitoAssertionError e ) { error = handleVerifyException ( e , error ( e ) ) ; }
Code	catch ( MockitoAssertionError e ) { error = handleVerifyException ( e , error ( e ) ) ; }
Distance : 6

84
Tree	catch ( MockitoAssertionError e ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( MockitoAssertionError e ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 5

85
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . start ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . start ) ; }
Distance : 5

86
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . start ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . start ) ; }
Distance : 6

87
Tree	catch ( MockitoAssertionError e ) { error = handleVerifyException ( NUMBER_CONSTANT , MockitoAssertionError ( e ) ) ; }
Code	catch ( MockitoAssertionError e ) { error = handleVerifyException ( NUMBER_CONSTANT , MockitoAssertionError ( e ) ) ; }
Distance : 6

88
Tree	catch ( MockitoAssertionError e ) { error = handleVerifyException ( e ) ; }
Code	catch ( MockitoAssertionError e ) { error = handleVerifyException ( e ) ; }
Distance : 1

89
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; }
Distance : 2

90
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . e ) ; }
Distance : 5

91
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = delegate . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = delegate . handleVerifyException () ; }
Distance : 5

92
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MockitoAssertionError ( e , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MockitoAssertionError ( e , this . error ) ; }
Distance : 6

93
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e , this . error ) ; }
Distance : 6

94
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e ) ) ; }
Distance : 6

95
Tree	catch ( MockitoAssertionError e ) { error = handleVerifyException . handleVerifyException () ; }
Code	catch ( MockitoAssertionError e ) { error = handleVerifyException . handleVerifyException () ; }
Distance : 4

96
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e , e ) ; }
Distance : 5

97
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e , this . error ) ; }
Distance : 6

98
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( STRING_CONSTANT + e ( e ) , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( STRING_CONSTANT + e ( e ) , false ) ; }
Distance : 8

99
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , error ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , error ( e ) ) ; }
Distance : 6

100
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { verify = handleVerifyException ( e ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { verify = handleVerifyException ( e ) ; }
Distance : 3

101
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MockitoAssertionError ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MockitoAssertionError ( e ) ; }
Distance : 2

102
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException . handleVerifyException ( verify , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException . handleVerifyException ( verify , e ) ; }
Distance : 5

103
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e ) ; }
Distance : 3

104
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( STRING_CONSTANT + verify ( e ) , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( STRING_CONSTANT + verify ( e ) , false ) ; }
Distance : 8

105
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , error . isCounting () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , error . isCounting () ) ; }
Distance : 12

106
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , error . e () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , error . e () ) ; }
Distance : 12

107
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , verify ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , verify ) ; }
Distance : 3

108
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e , handleVerifyException ( e ) ) ; }
Distance : 5

109
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . handleVerifyException ( MockitoAssertionError ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . handleVerifyException ( MockitoAssertionError ( e ) ) ; }
Distance : 8

110
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e , MockitoAssertionError ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e , MockitoAssertionError ( e ) ) ; }
Distance : 6

111
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , error . isCounting () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , error . isCounting () ) ; }
Distance : 10

112
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , timer ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , timer ( e ) ) ; }
Distance : 6

113
Tree	catch ( MockitoAssertionError e ) { handleVerifyException ( e , error ( e ) ) ; }
Code	catch ( MockitoAssertionError e ) { handleVerifyException ( e , error ( e ) ) ; }
Distance : 7

114
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , false ) ; }
Distance : 8

115
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , verify ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , verify ( e ) ) ; }
Distance : 6

116
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e ) ; }
Distance : 2

117
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = isCounting ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = isCounting ( e ) ; }
Distance : 2

118
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . isCounting () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . isCounting () ; }
Distance : 6

119
Tree	catch ( final isCounting e ) { error = handleVerifyException ( e ) ; }
Code	catch ( final isCounting e ) { error = handleVerifyException ( e ) ; }
Distance : 2

120
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e ) ; }
Distance : 3

121
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( STRING_CONSTANT + MockitoAssertionError ( e ) , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( STRING_CONSTANT + MockitoAssertionError ( e ) , false ) ; }
Distance : 8

122
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Distance : 8

123
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( STRING_CONSTANT + e , error . e () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( STRING_CONSTANT + e , error . e () ) ; }
Distance : 9

124
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( STRING_CONSTANT + e + STRING_CONSTANT , error . e () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( STRING_CONSTANT + e + STRING_CONSTANT , error . e () ) ; }
Distance : 11

125
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { verify = handleVerifyException ( e , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { verify = handleVerifyException ( e , false ) ; }
Distance : 4

126
Tree	catch ( isCounting e ) { error = handleVerifyException ( e , false ) ; }
Code	catch ( isCounting e ) { error = handleVerifyException ( e , false ) ; }
Distance : 3

127
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , error . AssertionError () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , error . AssertionError () ) ; }
Distance : 10

128
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e , false ) ; }
Distance : 4

129
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e ) , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e ) , false ) ; }
Distance : 9

130
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MockitoAssertionError ( e , this . error ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MockitoAssertionError ( e , this . error ) ; }
Distance : 7

131
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Distance : 6

132
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) . MockitoAssertionError () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) . MockitoAssertionError () ; }
Distance : 4

133
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { verify = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { verify = handleVerifyException ( e ) ; }
Distance : 2

134
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e ) ) ; }
Distance : 6

135
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( STRING_CONSTANT + e , error . verify () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( STRING_CONSTANT + e , error . verify () ) ; }
Distance : 9

136
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MockitoAssertionError ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MockitoAssertionError ( e ) ; }
Distance : 2

137
Tree	catch ( final MockitoAssertionError e ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( final MockitoAssertionError e ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 6

138
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e . handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e . handleVerifyException ( e , e ) ; }
Distance : 5

139
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + MockitoAssertionError ( e ) , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + MockitoAssertionError ( e ) , false ) ; }
Distance : 9

140
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . org.mockito.exceptions.verification.junit.ArgumentsAreDifferent () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . org.mockito.exceptions.verification.junit.ArgumentsAreDifferent () ; }
Distance : 6

141
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( STRING_CONSTANT + isCounting ( e ) , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( STRING_CONSTANT + isCounting ( e ) , false ) ; }
Distance : 8

142
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . MockitoAssertionError () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . MockitoAssertionError () ; }
Distance : 6

143
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e ) . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e ) . handleVerifyException () ; }
Distance : 7

144
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , returnOnSuccess ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , returnOnSuccess ( e ) ) ; }
Distance : 6

145
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( STRING_CONSTANT + e , error . isCounting () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( STRING_CONSTANT + e , error . isCounting () ) ; }
Distance : 9

146
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . MockitoAssertionError ( handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . MockitoAssertionError ( handleVerifyException ( e ) ) ; }
Distance : 8

147
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . MockitoAssertionError () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . MockitoAssertionError () ; }
Distance : 6

148
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , isCounting ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , isCounting ( e ) ) ; }
Distance : 6

149
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . handleVerifyException ( error ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . handleVerifyException ( error ( e ) ) ; }
Distance : 8

150
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + isCounting ( e ) , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + isCounting ( e ) , false ) ; }
Distance : 9

151
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = AssertionError ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = AssertionError ( e ) ; }
Distance : 2

152
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . error () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . error () ; }
Distance : 6

153
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) . org.mockito.exceptions.verification.junit.ArgumentsAreDifferent () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) . org.mockito.exceptions.verification.junit.ArgumentsAreDifferent () ; }
Distance : 4

154
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) . isCounting () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) . isCounting () ; }
Distance : 4

155
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . handleVerifyException ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . handleVerifyException ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e ) ) ; }
Distance : 8

156
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , delegate ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , delegate ( e ) ) ; }
Distance : 6

157
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , error . verify () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , error . verify () ) ; }
Distance : 12

158
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( STRING_CONSTANT + e + STRING_CONSTANT , error . e () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( STRING_CONSTANT + e + STRING_CONSTANT , error . e () ) ; }
Distance : 12

159
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) . = () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) . = () ; }
Distance : 4

160
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException () ; }
Distance : 6

161
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent AssertionError e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent AssertionError e ) { error = handleVerifyException ( e ) ; }
Distance : 2

162
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , error . AssertionError () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , error . AssertionError () ) ; }
Distance : 12

163
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , returnOnSuccess ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , returnOnSuccess ( e ) ) ; }
Distance : 6

164
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . MockitoAssertionError ( MockitoAssertionError ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . MockitoAssertionError ( MockitoAssertionError ( e ) ) ; }
Distance : 9

165
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent timer e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent timer e ) { error = handleVerifyException ( e ) ; }
Distance : 3

166
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e e ) { handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e e ) { handleVerifyException ( e ) ; }
Distance : 5

167
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent AssertionError e ) { handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent AssertionError e ) { handleVerifyException ( e ) ; }
Distance : 4

168
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent MockitoAssertionError e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent MockitoAssertionError e ) { error = handleVerifyException ( e ) ; }
Distance : 3

169
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e handleVerifyException e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e handleVerifyException e ) { error = handleVerifyException ( e ) ; }
Distance : 3

170
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MockitoAssertionError ( e ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MockitoAssertionError ( e ) ; }
Distance : 3

171
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) ; }
Distance : 5

172
Tree	catch ( MockitoAssertionError e e e ) { error = handleVerifyException ( e ) ; }
Code	catch ( MockitoAssertionError e e e ) { error = handleVerifyException ( e ) ; }
Distance : 3

173
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error e ) { error = handleVerifyException ( e ) ; }
Distance : 3

174
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e MockitoAssertionError e ) { handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e MockitoAssertionError e ) { handleVerifyException ( e ) ; }
Distance : 5

175
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent handleVerifyException e ) { handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent handleVerifyException e ) { handleVerifyException ( e ) ; }
Distance : 5

176
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e , false ) ; }
Distance : 4

177
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( STRING_CONSTANT + e + STRING_CONSTANT , error . verify () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( STRING_CONSTANT + e + STRING_CONSTANT , error . verify () ) ; }
Distance : 11

178
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . error ( MockitoAssertionError ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . error ( MockitoAssertionError ( e ) ) ; }
Distance : 9

179
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e e ) { error ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e e ) { error ( e ) ; }
Distance : 5

180
Tree	catch ( MockitoAssertionError e ) { error = handleVerifyException ( NUMBER_CONSTANT , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e ) ) ; }
Code	catch ( MockitoAssertionError e ) { error = handleVerifyException ( NUMBER_CONSTANT , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e ) ) ; }
Distance : 6

181
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( e , e ) ; }
Distance : 4

182
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , error . data () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , error . data () ) ; }
Distance : 10

183
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , AssertionError ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , AssertionError ( e ) ) ; }
Distance : 6

184
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent verify e ) { handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent verify e ) { handleVerifyException ( e ) ; }
Distance : 5

185
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , false ) ; }
Distance : 4

186
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent isCounting e ) { handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent isCounting e ) { handleVerifyException ( e ) ; }
Distance : 5

187
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent timer e ) { handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent timer e ) { handleVerifyException ( e ) ; }
Distance : 5

188
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e , e ) ; }
Distance : 4

189
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { MockitoAssertionError ( e ) . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { MockitoAssertionError ( e ) . handleVerifyException () ; }
Distance : 7

190
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e e ) { error = handleVerifyException ( e ) ; }
Distance : 3

191
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = delegate ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = delegate ( e ) ; }
Distance : 2

192
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , error ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , error ( e ) ) ; }
Distance : 6

193
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e , this . error ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e , this . error ) ; }
Distance : 7

194
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , e . verify () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , e . verify () ) ; }
Distance : 10

195
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( verify , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( verify , false ) ; }
Distance : 4

196
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , e . e () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , e . e () ) ; }
Distance : 10

197
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( STRING_CONSTANT + e + STRING_CONSTANT , error . isCounting () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( STRING_CONSTANT + e + STRING_CONSTANT , error . isCounting () ) ; }
Distance : 11

198
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e verify e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e verify e ) { error = handleVerifyException ( e ) ; }
Distance : 3

199
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) ; }
Distance : 5

========================================================================


========================================================================
Example Number: 108
Parent Code is: 
new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
-------------------------------------------------------------------------------
Child code is: 
new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + safelyGetMockName ( undesired . getMock () ) + STRING_CONSTANT , undesired . getLocation () ) )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (14 (304{val=new}) (43 (801{val=VerificationInOrderFailure})) (214{val=(}) (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (215{val=)})) (215{val=)})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (14 (304{val=new}) (43 (801{val=VerificationInOrderFailure})) (214{val=(}) (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (802{val=safelyGetMockName}) (214{val=(}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (215{val=)})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (215{val=)})) (215{val=)})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/4/parent/src_org_mockito_exceptions_Reporter.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getLocation () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getLocation () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Distance : 14

1
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Distance : 14

2
Tree	new VerificationInOrderFailure ( new join ( join . join ( join . getLocation () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( join . getLocation () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Distance : 18

3
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Distance : 11

4
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( Invocation ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( Invocation ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

5
Tree	new VerificationInOrderFailure ( new join ( join . join ( Invocation . join () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( Invocation . join () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Distance : 18

6
Tree	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( getLocation ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( getLocation ) )
Distance : 18

7
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( join ) ) , STRING_CONSTANT , VerificationInOrderFailure . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( join ) ) , STRING_CONSTANT , VerificationInOrderFailure . getLocation () , undesired ) )
Distance : 13

8
Tree	new VerificationInOrderFailure ( new join [] { undesired . join () , STRING_CONSTANT } , undesired . getLocation () )
Code	new VerificationInOrderFailure ( new join [] { undesired . join () , STRING_CONSTANT } , undesired . getLocation () )
Distance : 16

9
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join . getMock () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join . getMock () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Distance : 14

10
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( noMoreInteractionsWantedInOrder ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( noMoreInteractionsWantedInOrder ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

11
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getLocation () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getLocation () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Distance : 14

12
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . undesired () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . undesired () , undesired . getLocation () ) , undesired ) )
Distance : 11

13
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( join ) ) , STRING_CONSTANT , undesired . undesired () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( join ) ) , STRING_CONSTANT , undesired . undesired () , undesired ) )
Distance : 13

14
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Distance : 14

15
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( getMock . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( getMock . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 11

16
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Distance : 14

17
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 11

18
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( join , undesired . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( join , undesired . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

19
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName ( STRING_CONSTANT ) , undesired ) )
Distance : 13

20
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( getLocation . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( getLocation . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 11

21
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new VerificationInOrderFailure () . getLocation ( join , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new VerificationInOrderFailure () . getLocation ( join , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

22
Tree	new VerificationInOrderFailure ( new join ( join . join () , undesired . getLocation ( getMock . getLocation () , undesired . getLocation () ) ) , CHAR_CONS )
Code	new VerificationInOrderFailure ( new join ( join . join () , undesired . getLocation ( getMock . getLocation () , undesired . getLocation () ) ) , CHAR_CONS )
Distance : 16

23
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( join , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , class , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( join , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , class , undesired ) )
Distance : 16

24
Tree	new VerificationInOrderFailure ( new join ( join . join () , undesired . getLocation ( safelyGetMockName . getLocation () , undesired . getLocation () ) ) , CHAR_CONS )
Code	new VerificationInOrderFailure ( new join ( join . join () , undesired . getLocation ( safelyGetMockName . getLocation () , undesired . getLocation () ) ) , CHAR_CONS )
Distance : 16

25
Tree	new VerificationInOrderFailure ( join , new LocationImpl ( join . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , extends )
Code	new VerificationInOrderFailure ( join , new LocationImpl ( join . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , extends )
Distance : 18

26
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 11

27
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( getMock . getLocation () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( getMock . getLocation () , undesired . getLocation () ) , undesired ) )
Distance : 12

28
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( Invocation ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( Invocation ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 13

29
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Distance : 13

30
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName ( undesired ) , undesired ) )
Distance : 13

31
Tree	new VerificationInOrderFailure ( join , new LocationImpl ( join . join () , undesired . getLocation ( getMock . getLocation () , undesired . getLocation () ) ) , false , false )
Code	new VerificationInOrderFailure ( join , new LocationImpl ( join . join () , undesired . getLocation ( getMock . getLocation () , undesired . getLocation () ) ) , false , false )
Distance : 19

32
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . undesired ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . undesired ( undesired ) , undesired ) )
Distance : 13

33
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

34
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( join ) ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( join ) ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 13

35
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . safelyGetMockName ( join ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . safelyGetMockName ( join ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 12

36
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Distance : 16

37
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () . safelyGetMockName ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () . safelyGetMockName ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

38
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join ( join , undesired . getLocation () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join ( join , undesired . getLocation () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

39
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . getLocation ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . getLocation ( undesired ) , undesired ) )
Distance : 12

40
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( join ) ) , STRING_CONSTANT , undesired . undesired () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( join ) ) , STRING_CONSTANT , undesired . undesired () , undesired ) )
Distance : 13

41
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . undesired ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . undesired ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 15

42
Tree	new VerificationInOrderFailure ( new join [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , CHAR_CONS )
Code	new VerificationInOrderFailure ( new join [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , CHAR_CONS )
Distance : 16

43
Tree	new VerificationInOrderFailure ( new join ( join . join () , undesired . getLocation ( join . getLocation () , undesired . getLocation () ) ) , false )
Code	new VerificationInOrderFailure ( new join ( join . join () , undesired . getLocation ( join . getLocation () , undesired . getLocation () ) ) , false )
Distance : 16

44
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 16

45
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getLocation () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getLocation () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 15

46
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () ) , STRING_CONSTANT , undesired . getMock ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () ) , STRING_CONSTANT , undesired . getMock ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Distance : 16

47
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . getLocation ( safelyGetMockName , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . getLocation ( safelyGetMockName , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

48
Tree	new VerificationInOrderFailure ( join , new LocationImpl ( join . join () , undesired . getLocation ( safelyGetMockName . getLocation () , undesired . getLocation () ) ) , false , CHAR_CONS )
Code	new VerificationInOrderFailure ( join , new LocationImpl ( join . join () , undesired . getLocation ( safelyGetMockName . getLocation () , undesired . getLocation () ) ) , false , CHAR_CONS )
Distance : 19

49
Tree	new VerificationInOrderFailure ( new join [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , class )
Code	new VerificationInOrderFailure ( new join [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , class )
Distance : 16

50
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . getLocation ( Invocation , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . getLocation ( Invocation , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

51
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( join , undesired . getLocation () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( join , undesired . getLocation () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

52
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 15

53
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () ) , STRING_CONSTANT , undesired . safelyGetMockName ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () ) , STRING_CONSTANT , undesired . safelyGetMockName ( undesired ) , undesired ) )
Distance : 14

54
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( join , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , true , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( join , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , true , undesired ) )
Distance : 16

55
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 14

56
Tree	new LocationImpl ( new join [] { LocationImpl . join () , STRING_CONSTANT } , undesired . getLocation () )
Code	new LocationImpl ( new join [] { LocationImpl . join () , STRING_CONSTANT } , undesired . getLocation () )
Distance : 18

57
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

58
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( join , getLocation . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( join , getLocation . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 16

59
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join . join () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join . join () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Distance : 15

60
Tree	new VerificationInOrderFailure ( new join ( join . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , super )
Code	new VerificationInOrderFailure ( new join ( join . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , super )
Distance : 15

61
Tree	new VerificationInOrderFailure ( join , new LocationImpl ( join . join () , undesired . getLocation ( safelyGetMockName . getLocation () , undesired . getLocation () ) ) , false , super )
Code	new VerificationInOrderFailure ( join , new LocationImpl ( join . join () , undesired . getLocation ( safelyGetMockName . getLocation () , undesired . getLocation () ) ) , false , super )
Distance : 19

62
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Invocation ( join ( join ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Invocation ( join ( join ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

63
Tree	new VerificationInOrderFailure ( new join [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , throw )
Code	new VerificationInOrderFailure ( new join [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , throw )
Distance : 16

64
Tree	new VerificationInOrderFailure ( new join [] { LocationImpl . join () , STRING_CONSTANT } , getLocation . getLocation () )
Code	new VerificationInOrderFailure ( new join [] { LocationImpl . join () , STRING_CONSTANT } , getLocation . getLocation () )
Distance : 18

65
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join ( join . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , super , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join ( join . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , super , undesired ) )
Distance : 17

66
Tree	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( getMock ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( getMock ) )
Distance : 18

67
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( join , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , else , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( join , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , else , undesired ) )
Distance : 16

68
Tree	new VerificationInOrderFailure ( join , new LocationImpl ( join . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , CHAR_CONS )
Code	new VerificationInOrderFailure ( join , new LocationImpl ( join . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , CHAR_CONS )
Distance : 18

69
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 15

70
Tree	new VerificationInOrderFailure ( new join [] { STRING_CONSTANT , undesired . undesired () , undesired . getLocation () } , super )
Code	new VerificationInOrderFailure ( new join [] { STRING_CONSTANT , undesired . undesired () , undesired . getLocation () } , super )
Distance : 17

71
Tree	new VerificationInOrderFailure ( new join [] { STRING_CONSTANT , undesired . safelyGetMockName () , undesired . getLocation () } , super )
Code	new VerificationInOrderFailure ( new join [] { STRING_CONSTANT , undesired . safelyGetMockName () , undesired . getLocation () } , super )
Distance : 17

72
Tree	new VerificationInOrderFailure ( new join [] { STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () } , super )
Code	new VerificationInOrderFailure ( new join [] { STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () } , super )
Distance : 17

73
Tree	new VerificationInOrderFailure ( join , new LocationImpl ( join . join () , undesired . getLocation ( safelyGetMockName . getLocation () , undesired . getLocation () ) ) , false , false )
Code	new VerificationInOrderFailure ( join , new LocationImpl ( join . join () , undesired . getLocation ( safelyGetMockName . getLocation () , undesired . getLocation () ) ) , false , false )
Distance : 19

74
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Invocation ( new LocationImpl () . getLocation ( join , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Invocation ( new LocationImpl () . getLocation ( join , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

75
Tree	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS , this ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS , this ) )
Distance : 19

76
Tree	new VerificationInOrderFailure ( join , new LocationImpl ( join . join () , undesired . getLocation ( getMock . getLocation () , undesired . getLocation () ) ) , false , CHAR_CONS )
Code	new VerificationInOrderFailure ( join , new LocationImpl ( join . join () , undesired . getLocation ( getMock . getLocation () , undesired . getLocation () ) ) , false , CHAR_CONS )
Distance : 19

77
Tree	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( false , this ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( false , this ) )
Distance : 19

78
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( Invocation , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , super , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( Invocation , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , super , undesired ) )
Distance : 16

79
Tree	new VerificationInOrderFailure ( new join [] { LocationImpl . join () , STRING_CONSTANT } , VerificationInOrderFailure . getLocation () )
Code	new VerificationInOrderFailure ( new join [] { LocationImpl . join () , STRING_CONSTANT } , VerificationInOrderFailure . getLocation () )
Distance : 18

80
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () . getMock ( join ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () . getMock ( join ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

81
Tree	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( long , this ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( long , this ) )
Distance : 19

82
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( LocationImpl ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( LocationImpl ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

83
Tree	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS ) )
Distance : 18

84
Tree	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( float , this ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( float , this ) )
Distance : 19

85
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( join ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( join ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 13

86
Tree	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( ! , this ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( ! , this ) )
Distance : 19

87
Tree	new VerificationInOrderFailure ( new join [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , else )
Code	new VerificationInOrderFailure ( new join [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , else )
Distance : 16

88
Tree	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( false ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( false ) )
Distance : 18

89
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join ( join ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join ( join ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 13

90
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join ( join . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join ( join . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 17

91
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () . safelyGetMockName ( join ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () . safelyGetMockName ( join ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

92
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( join , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , CHAR_CONS , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( join , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , CHAR_CONS , undesired ) )
Distance : 16

93
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

94
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( join . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , super , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( join . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , super , undesired ) )
Distance : 17

95
Tree	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( byte ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( byte ) )
Distance : 18

96
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join ( join . join () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join ( join . join () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 17

97
Tree	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( byte , this ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( byte , this ) )
Distance : 19

98
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

99
Tree	new VerificationInOrderFailure ( new join ( join . join ( join . join () , getMock . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( join . join () , getMock . getLocation () ) ) . getLocation ( undesired ) )
Distance : 19

100
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () . getMock ( join ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () . getMock ( join ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

101
Tree	new VerificationInOrderFailure ( new join ( join . join () , undesired . getLocation ( getMock . getLocation () , undesired . getLocation () ) ) , false )
Code	new VerificationInOrderFailure ( new join ( join . join () , undesired . getLocation ( getMock . getLocation () , undesired . getLocation () ) ) , false )
Distance : 16

102
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () . getMock ( getMock ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () . getMock ( getMock ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

103
Tree	new VerificationInOrderFailure ( new join ( join . join () , undesired . getLocation ( safelyGetMockName . getLocation () , undesired . getLocation () ) ) , false )
Code	new VerificationInOrderFailure ( new join ( join . join () , undesired . getLocation ( safelyGetMockName . getLocation () , undesired . getLocation () ) ) , false )
Distance : 16

104
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . undesired () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . undesired () , undesired ) )
Distance : 10

105
Tree	new VerificationInOrderFailure ( new join ( join . join ( join . safelyGetMockName () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( join . safelyGetMockName () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Distance : 18

106
Tree	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Distance : 18

107
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Distance : 14

108
Tree	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( this , this ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( this , this ) )
Distance : 19

109
Tree	new VerificationInOrderFailure ( new join ( join . join ( join . join () , getLocation . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( join . join () , getLocation . getLocation () ) ) . getLocation ( undesired ) )
Distance : 19

110
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () . getLocation ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () . getLocation ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

111
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join ( join ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join ( join ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

112
Tree	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( this ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( this ) )
Distance : 18

113
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 9

114
Tree	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( super , this ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( super , this ) )
Distance : 19

115
Tree	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( long ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( long ) )
Distance : 18

116
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () . getMock ( join ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () . getMock ( join ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

117
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 15

118
Tree	new VerificationInOrderFailure ( new join ( join . join ( safelyGetMockName . join () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( safelyGetMockName . join () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Distance : 18

119
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getLocation ( join , undesired . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getLocation ( join , undesired . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

120
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () . safelyGetMockName ( join ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () . safelyGetMockName ( join ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

121
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new Invocation () . getLocation ( join , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new Invocation () . getLocation ( join , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

122
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( Invocation , undesired . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( Invocation , undesired . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

123
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () . safelyGetMockName ( getMock ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () . safelyGetMockName ( getMock ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

124
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () . getMock ( join ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () . getMock ( join ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

125
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () . getMock ( getMock ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () . getMock ( getMock ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

126
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . getLocation ( LocationImpl , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . getLocation ( LocationImpl , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

127
Tree	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( char , this ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( char , this ) )
Distance : 19

128
Tree	new VerificationInOrderFailure ( new join [] { LocationImpl . join () , STRING_CONSTANT } , undesired . getLocation () )
Code	new VerificationInOrderFailure ( new join [] { LocationImpl . join () , STRING_CONSTANT } , undesired . getLocation () )
Distance : 17

129
Tree	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( final , this ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( final , this ) )
Distance : 19

130
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( join ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( join ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

131
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getLocation () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getLocation () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

132
Tree	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( super ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( super ) )
Distance : 18

133
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getLocation ( join ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getLocation ( join ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 13

134
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () . join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () . join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

135
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . safelyGetMockName ( join , undesired . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . safelyGetMockName ( join , undesired . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

136
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () . safelyGetMockName ( join ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () . safelyGetMockName ( join ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

137
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( join , getMock . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( join , getMock . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

138
Tree	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( float ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( float ) )
Distance : 18

139
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () . getLocation ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () . getLocation ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

140
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join . getMock ( join , undesired . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join . getMock ( join , undesired . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

141
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () . getLocation ( join ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () . getLocation ( join ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

142
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 10

143
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( join , getLocation . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( join , getLocation . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

144
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 11

145
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( getLocation . getLocation () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( getLocation . getLocation () , undesired . getLocation () ) , undesired ) )
Distance : 12

146
Tree	new VerificationInOrderFailure ( new join ( join . join () , undesired . getLocation ( getMock . getLocation () , undesired . getLocation () ) ) , super )
Code	new VerificationInOrderFailure ( new join ( join . join () , undesired . getLocation ( getMock . getLocation () , undesired . getLocation () ) ) , super )
Distance : 16

147
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Invocation () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Invocation () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 11

148
Tree	new VerificationInOrderFailure ( new join ( join . join () , undesired . getLocation ( safelyGetMockName . getLocation () , undesired . getLocation () ) ) , super )
Code	new VerificationInOrderFailure ( new join ( join . join () , undesired . getLocation ( safelyGetMockName . getLocation () , undesired . getLocation () ) ) , super )
Distance : 16

149
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 12

150
Tree	new VerificationInOrderFailure ( new join ( join . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false )
Code	new VerificationInOrderFailure ( new join ( join . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false )
Distance : 15

151
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( Invocation , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( Invocation , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 16

152
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( join , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( join , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 16

153
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () . safelyGetMockName ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () . safelyGetMockName ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

154
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( join . join () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( join . join () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 17

155
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( safelyGetMockName ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( safelyGetMockName ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

156
Tree	new VerificationInOrderFailure ( join , new LocationImpl ( join . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , super )
Code	new VerificationInOrderFailure ( join , new LocationImpl ( join . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , super )
Distance : 18

157
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 10

158
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join ( join , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join ( join , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 17

159
Tree	new VerificationInOrderFailure ( new join [] { STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () } , false )
Code	new VerificationInOrderFailure ( new join [] { STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () } , false )
Distance : 17

160
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join ( join . join () , undesired . getLocation () ) ) , STRING_CONSTANT , super , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join ( join . join () , undesired . getLocation () ) ) , STRING_CONSTANT , super , undesired ) )
Distance : 17

161
Tree	new VerificationInOrderFailure ( new join [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , super )
Code	new VerificationInOrderFailure ( new join [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , super )
Distance : 16

162
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( join . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , CHAR_CONS , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( join . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , CHAR_CONS , undesired ) )
Distance : 17

163
Tree	new VerificationInOrderFailure ( join , new LocationImpl ( join . join () , undesired . getLocation ( getMock . getLocation () , undesired . getLocation () ) ) , false , super )
Code	new VerificationInOrderFailure ( join , new LocationImpl ( join . join () , undesired . getLocation ( getMock . getLocation () , undesired . getLocation () ) ) , false , super )
Distance : 19

164
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 15

165
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join ( join ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join ( join ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

166
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( join . join () , undesired . getLocation () ) ) , STRING_CONSTANT , CHAR_CONS , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( join . join () , undesired . getLocation () ) ) , STRING_CONSTANT , CHAR_CONS , undesired ) )
Distance : 17

167
Tree	new VerificationInOrderFailure ( new join ( join . join () , undesired . getLocation ( getLocation . getLocation () , undesired . getLocation () ) ) , false )
Code	new VerificationInOrderFailure ( new join ( join . join () , undesired . getLocation ( getLocation . getLocation () , undesired . getLocation () ) ) , false )
Distance : 16

168
Tree	new VerificationInOrderFailure ( join , new LocationImpl ( join . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , false )
Code	new VerificationInOrderFailure ( join , new LocationImpl ( join . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , false )
Distance : 18

169
Tree	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( char ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( char ) )
Distance : 18

170
Tree	new VerificationInOrderFailure ( new join [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , false )
Code	new VerificationInOrderFailure ( new join [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , false )
Distance : 16

171
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Distance : 13

172
Tree	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( ! ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( ! ) )
Distance : 18

173
Tree	new VerificationInOrderFailure ( new join [] { getLocation . join () , STRING_CONSTANT } , undesired . getLocation () )
Code	new VerificationInOrderFailure ( new join [] { getLocation . join () , STRING_CONSTANT } , undesired . getLocation () )
Distance : 17

174
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join ( join ) ) , STRING_CONSTANT , undesired . undesired () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join ( join ) ) , STRING_CONSTANT , undesired . undesired () , undesired ) )
Distance : 13

175
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . undesired ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . undesired ( STRING_CONSTANT ) , undesired ) )
Distance : 13

176
Tree	new VerificationInOrderFailure ( new join [] { VerificationInOrderFailure . join () , STRING_CONSTANT } , undesired . getLocation () )
Code	new VerificationInOrderFailure ( new join [] { VerificationInOrderFailure . join () , STRING_CONSTANT } , undesired . getLocation () )
Distance : 17

177
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( join . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( join . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 17

178
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

179
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 10

180
Tree	new VerificationInOrderFailure ( new join [] { noMoreInteractionsWantedInOrder . join () , STRING_CONSTANT } , undesired . getLocation () )
Code	new VerificationInOrderFailure ( new join [] { noMoreInteractionsWantedInOrder . join () , STRING_CONSTANT } , undesired . getLocation () )
Distance : 17

181
Tree	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( final ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( join . join () , undesired . getLocation () ) ) . getLocation ( final ) )
Distance : 18

182
Tree	new VerificationInOrderFailure ( new join [] { Invocation . join () , STRING_CONSTANT } , undesired . getLocation () )
Code	new VerificationInOrderFailure ( new join [] { Invocation . join () , STRING_CONSTANT } , undesired . getLocation () )
Distance : 17

183
Tree	new VerificationInOrderFailure ( new join ( join . join ( join . getMock () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new join ( join . join ( join . getMock () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Distance : 18

184
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . getLocation ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock () ) , STRING_CONSTANT , undesired . getLocation ( STRING_CONSTANT ) , undesired ) )
Distance : 12

185
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join ( join , undesired . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join ( join , undesired . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

186
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () . getLocation ( join ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () . getLocation ( join ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

187
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( new LocationImpl () . getLocation ( join , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( new LocationImpl () . getLocation ( join , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

188
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () ) , STRING_CONSTANT , undesired . safelyGetMockName ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () ) , STRING_CONSTANT , undesired . safelyGetMockName ( STRING_CONSTANT ) , undesired ) )
Distance : 14

189
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . getLocation ( join , getLocation ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . getLocation ( join , getLocation ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

190
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( join ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( join ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

191
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () . safelyGetMockName ( join ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () . safelyGetMockName ( join ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

192
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . join () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Distance : 14

193
Tree	new VerificationInOrderFailure ( new join [] { join . join () , STRING_CONSTANT } , undesired . getLocation () )
Code	new VerificationInOrderFailure ( new join [] { join . join () , STRING_CONSTANT } , undesired . getLocation () )
Distance : 17

194
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Distance : 12

195
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( join . join () , undesired . getLocation () ) ) , STRING_CONSTANT , super , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join . getMock ( join . join () , undesired . getLocation () ) ) , STRING_CONSTANT , super , undesired ) )
Distance : 17

196
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( join , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , super , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( join , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , super , undesired ) )
Distance : 16

197
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . getLocation ( join , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . getLocation ( join , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

198
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . getLocation ( join , getMock ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . getLocation ( join , getMock ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

199
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join . join () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join . join () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Distance : 15

========================================================================


========================================================================
Example Number: 109
Parent Code is: 
join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () , scenario )
-------------------------------------------------------------------------------
Child code is: 
join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + safelyGetMockName ( undesired . getMock () ) + STRING_CONSTANT , undesired . getLocation () , scenario )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (234{val=,}) (800{val=scenario}) (215{val=)})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (802{val=safelyGetMockName}) (214{val=(}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (215{val=)})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (234{val=,}) (800{val=scenario}) (215{val=)})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/4/parent/src_org_mockito_exceptions_Reporter.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , false , STRING_CONSTANT )
Distance : 23

1
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Distance : 23

2
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( getLocation ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( getLocation ) , false , STRING_CONSTANT )
Distance : 20

3
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Distance : 23

4
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( getLocation ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( getLocation ) , false , STRING_CONSTANT )
Distance : 20

5
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( LocationImpl ) , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( LocationImpl ) , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

6
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( LocationImpl ) , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( LocationImpl ) , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

7
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new undesired ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new undesired ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 23

8
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new getLocation () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new getLocation () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Distance : 15

9
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . undesired ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . undesired ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

10
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new noMoreInteractionsWanted ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new noMoreInteractionsWanted ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

11
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new getLocation ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new getLocation ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 20

12
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new undesired ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new undesired ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 23

13
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new undesired () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new undesired () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 21

14
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new getLocation ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new getLocation ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 20

15
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new getMock ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new getMock ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

16
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new getMock ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new getMock ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

17
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

18
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 20

19
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new undesired () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new undesired () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

20
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new undesired () , STRING_CONSTANT , undesired . getLocation () . getLocation ( scenario ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new undesired () , STRING_CONSTANT , undesired . getLocation () . getLocation ( scenario ) , false , STRING_CONSTANT )
Distance : 20

21
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( safelyGetMockName ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( safelyGetMockName ) , false , STRING_CONSTANT )
Distance : 20

22
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new undesired () , STRING_CONSTANT , undesired . getLocation () . getLocation ( scenario ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new undesired () , STRING_CONSTANT , undesired . getLocation () . getLocation ( scenario ) , false , STRING_CONSTANT )
Distance : 20

23
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( getMock ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( getMock ) , false , STRING_CONSTANT )
Distance : 20

24
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new undesired () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new undesired () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

25
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new getMock () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new getMock () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

26
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Distance : 22

27
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , super , STRING_CONSTANT )
Distance : 22

28
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( getMock ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( getMock ) , false , STRING_CONSTANT )
Distance : 20

29
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation () , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation () , super , STRING_CONSTANT )
Distance : 18

30
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . undesired ( undesired ) , new scenario ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . undesired ( undesired ) , new scenario ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 20

31
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Distance : 22

32
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new undesired () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new undesired () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 21

33
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 20

34
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . undesired () , new scenario ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . undesired () , new scenario ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

35
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation () , class , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation () , class , STRING_CONSTANT )
Distance : 15

36
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 19

37
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new undesired () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new undesired () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 21

38
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 23

39
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new getMock () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new getMock () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Distance : 14

40
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 20

41
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation () , class , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation () , class , STRING_CONSTANT )
Distance : 15

42
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Distance : 18

43
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation () , false , STRING_CONSTANT )
Distance : 18

44
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation () , class , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation () , class , STRING_CONSTANT )
Distance : 18

45
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , false , STRING_CONSTANT )
Distance : 22

46
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , CHAR_CONS , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , CHAR_CONS , super , STRING_CONSTANT )
Distance : 22

47
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new getMock () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new getMock () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

48
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 22

49
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation () , class , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation () , class , STRING_CONSTANT )
Distance : 18

50
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new getMock () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new getMock () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

51
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Distance : 18

52
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation () , false , STRING_CONSTANT )
Distance : 18

53
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 20

54
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , false , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , false , false , STRING_CONSTANT )
Distance : 22

55
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new undesired () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new undesired () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Distance : 18

56
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , CHAR_CONS , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , CHAR_CONS , false , STRING_CONSTANT )
Distance : 22

57
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new getMock () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new getMock () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Distance : 14

58
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new undesired ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new undesired ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

59
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( safelyGetMockName ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( safelyGetMockName ) , false , STRING_CONSTANT )
Distance : 20

60
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new getLocation () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new getLocation () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

61
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 19

62
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( safelyGetMockName ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( safelyGetMockName ) , false , STRING_CONSTANT )
Distance : 20

63
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( scenario ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( scenario ) , false , STRING_CONSTANT )
Distance : 20

64
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 19

65
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Distance : 21

66
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new undesired () , STRING_CONSTANT , undesired . getLocation () . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new undesired () , STRING_CONSTANT , undesired . getLocation () . getLocation () , false , STRING_CONSTANT )
Distance : 18

67
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( Invocation ) , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( Invocation ) , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

68
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation () , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation () , CHAR_CONS , STRING_CONSTANT )
Distance : 15

69
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( getMock ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( getMock ) , false , STRING_CONSTANT )
Distance : 20

70
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 20

71
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new undesired () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new undesired () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 21

72
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( scenario ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( scenario ) , false , STRING_CONSTANT )
Distance : 20

73
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new getMock ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new getMock ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

74
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new getMock ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new getMock ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

75
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 14

76
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new getLocation ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new getLocation ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

77
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Distance : 23

78
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new noMoreInteractionsWanted () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new noMoreInteractionsWanted () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

79
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new undesired () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new undesired () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 23

80
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Distance : 21

81
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new getLocation ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new getLocation ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

82
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 14

83
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new getLocation () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new getLocation () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

84
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( join ) , new undesired () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( join ) , new undesired () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

85
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 23

86
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( Invocation ) , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( Invocation ) , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

87
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 23

88
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , CHAR_CONS , STRING_CONSTANT )
Distance : 20

89
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new undesired () , STRING_CONSTANT , undesired . getLocation () . getLocation ( getLocation ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new undesired () , STRING_CONSTANT , undesired . getLocation () . getLocation ( getLocation ) , false , STRING_CONSTANT )
Distance : 20

90
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , false , STRING_CONSTANT )
Distance : 20

91
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new undesired ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new undesired ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

92
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new getLocation () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new getLocation () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

93
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 22

94
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 14

95
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( getMock ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( getMock ) , false , STRING_CONSTANT )
Distance : 20

96
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new undesired ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new undesired ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 20

97
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( scenario ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( scenario ) , false , STRING_CONSTANT )
Distance : 20

98
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , CHAR_CONS , STRING_CONSTANT )
Distance : 22

99
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . undesired () , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . undesired () , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

100
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , class , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , class , super , STRING_CONSTANT )
Distance : 22

101
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new undesired ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new undesired ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 20

102
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new undesired () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new undesired () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Distance : 15

103
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Distance : 23

104
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new getLocation () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new getLocation () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

105
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , CHAR_CONS , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , CHAR_CONS , CHAR_CONS , STRING_CONSTANT )
Distance : 22

106
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , false , STRING_CONSTANT )
Distance : 23

107
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( join ) , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( join ) , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

108
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , LocationImpl () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , LocationImpl () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 14

109
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Distance : 22

110
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Distance : 22

111
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 22

112
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new undesired () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new undesired () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Distance : 15

113
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 23

114
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new undesired () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new undesired () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 23

115
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( join ) , new undesired () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( join ) , new undesired () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

116
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 20

117
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 21

118
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new getMock () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new getMock () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

119
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation () , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation () , super , STRING_CONSTANT )
Distance : 18

120
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 21

121
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Distance : 20

122
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 19

123
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , false , STRING_CONSTANT )
Distance : 20

124
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Distance : 20

125
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , false , STRING_CONSTANT )
Distance : 20

126
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 20

127
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( join ) , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( join ) , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

128
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Distance : 22

129
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Distance : 20

130
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Distance : 20

131
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , LocationImpl () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , LocationImpl () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 13

132
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 21

133
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , LocationImpl ( LocationImpl ) , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , LocationImpl ( LocationImpl ) , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

134
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , LocationImpl ( LocationImpl ) , new undesired () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , LocationImpl ( LocationImpl ) , new undesired () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

135
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new undesired () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new undesired () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 19

136
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new undesired () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new undesired () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 19

137
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , scenario . getLocation () , STRING_CONSTANT )
Distance : 20

138
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 21

139
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new undesired () , STRING_CONSTANT , undesired . getLocation () . getLocation ( getLocation ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new undesired () , STRING_CONSTANT , undesired . getLocation () . getLocation ( getLocation ) , false , STRING_CONSTANT )
Distance : 20

140
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( scenario ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( scenario ) , false , STRING_CONSTANT )
Distance : 20

141
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , NoInteractionsWanted () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , NoInteractionsWanted () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 14

142
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Distance : 20

143
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Distance : 24

144
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( getLocation ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( getLocation ) , false , STRING_CONSTANT )
Distance : 20

145
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Distance : 20

146
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( getLocation ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( getLocation ) , false , STRING_CONSTANT )
Distance : 20

147
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , join ( LocationImpl ) , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , join ( LocationImpl ) , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

148
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , invocations () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , invocations () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 14

149
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 18

150
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Distance : 24

151
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 18

152
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 16

153
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

154
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 16

155
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new undesired () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new undesired () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Distance : 22

156
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 18

157
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , join ( LocationImpl ) , new undesired () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , join ( LocationImpl ) , new undesired () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

158
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , scenario . getLocation () , STRING_CONSTANT )
Distance : 20

159
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new undesired () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new undesired () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Distance : 22

160
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , scenario () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , scenario () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 14

161
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

162
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

163
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 21

164
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 17

165
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 18

166
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

167
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation ( LocationImpl ) , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation ( LocationImpl ) , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

168
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 20

169
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , LocationImpl ( invocations ) , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , LocationImpl ( invocations ) , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

170
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 20

171
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , LocationImpl ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , LocationImpl ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

172
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

173
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

174
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new undesired () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new undesired () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 19

175
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 14

176
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Distance : 15

177
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 18

178
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Distance : 15

179
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new undesired () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new undesired () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 22

180
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new undesired () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new undesired () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 22

181
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( LocationImpl ) , new undesired () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( LocationImpl ) , new undesired () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

182
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new undesired () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new undesired () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

183
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( LocationImpl ) , new undesired () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( LocationImpl ) , new undesired () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

184
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , LocationImpl () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , LocationImpl () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 14

185
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation ( LocationImpl ) , new undesired () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation ( LocationImpl ) , new undesired () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

186
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new undesired () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new undesired () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

187
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 19

188
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 19

189
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 17

190
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new undesired () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new undesired () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 19

191
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario () , STRING_CONSTANT , safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario () , STRING_CONSTANT , safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 18

192
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new scenario () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 21

193
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( safelyGetMockName ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , undesired . getLocation () . getLocation ( safelyGetMockName ) , false , STRING_CONSTANT )
Distance : 20

194
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new scenario () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Distance : 18

195
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new scenario () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Distance : 18

196
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , LocationImpl ( invocations ) , new undesired () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , LocationImpl ( invocations ) , new undesired () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

197
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , LocationImpl ( undesired ) , new undesired () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , LocationImpl ( undesired ) , new undesired () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

198
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , join ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , join ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 19

199
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new scenario () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Distance : 20

========================================================================


========================================================================
Example Number: 110
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

1
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

2
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

3
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , convertLocalToUTC ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , convertLocalToUTC ) ;
Distance : 4

4
Tree	return iField . convertLocalToUTC ( localInstant ) ;
Code	return iField . convertLocalToUTC ( localInstant ) ;
Distance : 5

5
Tree	return iZone != instant ;
Code	return iZone != instant ;
Distance : 8

6
Tree	return convertLocalToUTC ( localInstant , offset ) ;
Code	return convertLocalToUTC ( localInstant , offset ) ;
Distance : 5

7
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

8
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

9
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

10
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

11
Tree	return iField != iZone ;
Code	return iField != iZone ;
Distance : 10

12
Tree	return ( ( localInstant ) this ) . localInstant ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . localInstant ( localInstant , iZone ) ;
Distance : 10

13
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

14
Tree	return iZone . iZone ( localInstant ) ;
Code	return iZone . iZone ( localInstant ) ;
Distance : 5

15
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

16
Tree	return ! iZone && ! iZone . offset () ;
Code	return ! iZone && ! iZone . offset () ;
Distance : 10

17
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Distance : 4

18
Tree	return iField . localInstant ( STRING_CONSTANT , localInstant ) ;
Code	return iField . localInstant ( STRING_CONSTANT , localInstant ) ;
Distance : 6

19
Tree	return iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Code	return iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 5

20
Tree	return iZone != null iZone ? ;
Code	return iZone != null iZone ? ;
Distance : 9

21
Tree	return convertLocalToUTC ( localInstant , convertLocalToUTC , false ) ;
Code	return convertLocalToUTC ( localInstant , convertLocalToUTC , false ) ;
Distance : 4

22
Tree	return localInstant ( localInstant , localInstant , localInstant , iZone ) ;
Code	return localInstant ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

23
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

24
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

25
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , , ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , , ) ;
Distance : 8

26
Tree	return iZone != iField ;
Code	return iZone != iField ;
Distance : 9

27
Tree	return iZone . convertLocalToUTC ( iZone ) ;
Code	return iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

28
Tree	return iZone . localInstant ( localInstant ) ;
Code	return iZone . localInstant ( localInstant ) ;
Distance : 5

29
Tree	return iZone != offset ;
Code	return iZone != offset ;
Distance : 9

30
Tree	return iZone . localInstant ( localInstant , instant , null ) ;
Code	return iZone . localInstant ( localInstant , instant , null ) ;
Distance : 3

31
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Distance : 6

32
Tree	return localInstant ( localInstant , localInstant , false ) ;
Code	return localInstant ( localInstant , localInstant , false ) ;
Distance : 5

33
Tree	return ! iZone && ! iField . localInstant () ;
Code	return ! iZone && ! iField . localInstant () ;
Distance : 10

34
Tree	return ! iZone . localInstant ( localInstant ) && ^ ;
Code	return ! iZone . localInstant ( localInstant ) && ^ ;
Distance : 7

35
Tree	return iZone . iZone ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . iZone ( STRING_CONSTANT , localInstant ) ;
Distance : 5

36
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Distance : 9

37
Tree	return convertLocalToUTC ( iZone , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( iZone , STRING_CONSTANT , iZone ) ;
Distance : 5

38
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Distance : 6

39
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , offset ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , offset ) ;
Distance : 9

40
Tree	return convertLocalToUTC ( localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , false ) ;
Distance : 4

41
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

42
Tree	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , iZone ) ;
Distance : 10

43
Tree	return iField . convertLocalToUTC ( this , localInstant ) ;
Code	return iField . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

44
Tree	return iZone != instant ;
Code	return iZone != instant ;
Distance : 8

45
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

46
Tree	return localInstant ( localInstant , STRING_CONSTANT , iField ) ;
Code	return localInstant ( localInstant , STRING_CONSTANT , iField ) ;
Distance : 5

47
Tree	return convertLocalToUTC ( convertLocalToUTC , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( convertLocalToUTC , STRING_CONSTANT , iZone ) ;
Distance : 5

48
Tree	return iZone . convertLocalToUTC ( null , localInstant , offset , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , offset , null ) ;
Distance : 4

49
Tree	return iZone . localInstant ( localInstant , iZone , null ) ;
Code	return iZone . localInstant ( localInstant , iZone , null ) ;
Distance : 3

50
Tree	return localInstant != iZone ;
Code	return localInstant != iZone ;
Distance : 9

51
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

52
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Distance : 6

53
Tree	return convertLocalToUTC ( localInstant , localInstant , convertLocalToUTC ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , convertLocalToUTC ) ;
Distance : 4

54
Tree	return iZone . localInstant ( null , localInstant , iZone , null ) ;
Code	return iZone . localInstant ( null , localInstant , iZone , null ) ;
Distance : 5

55
Tree	return iZone . convertLocalToUTC ( convertLocalToUTC , false ) ;
Code	return iZone . convertLocalToUTC ( convertLocalToUTC , false ) ;
Distance : 3

56
Tree	return instant != iZone ;
Code	return instant != iZone ;
Distance : 10

57
Tree	return ! iZone && ! iField . convertLocalToUTC () ;
Code	return ! iZone && ! iField . convertLocalToUTC () ;
Distance : 10

58
Tree	return iZone . localInstant ( localInstant , localInstant , null ) ;
Code	return iZone . localInstant ( localInstant , localInstant , null ) ;
Distance : 3

59
Tree	return localInstant ( localInstant , iZone ) ;
Code	return localInstant ( localInstant , iZone ) ;
Distance : 6

60
Tree	return convertLocalToUTC ( localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone ) ;
Distance : 5

61
Tree	return localInstant ( localInstant , localInstant ) ;
Code	return localInstant ( localInstant , localInstant ) ;
Distance : 6

62
Tree	return iZone . localInstant ( this , convertLocalToUTC ) ;
Code	return iZone . localInstant ( this , convertLocalToUTC ) ;
Distance : 5

63
Tree	return ! instant && ! iZone . convertLocalToUTC () ;
Code	return ! instant && ! iZone . convertLocalToUTC () ;
Distance : 10

64
Tree	return iZone . localInstant ( iZone , false ) ;
Code	return iZone . localInstant ( iZone , false ) ;
Distance : 4

65
Tree	return iZone . convertLocalToUTC ( iZone ) ;
Code	return iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

66
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

67
Tree	return iZone . localInstant ( null , localInstant , localInstant , null ) ;
Code	return iZone . localInstant ( null , localInstant , localInstant , null ) ;
Distance : 5

68
Tree	return convertLocalToUTC ( localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , instant ) ;
Distance : 4

69
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

70
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iField ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iField ) ;
Distance : 4

71
Tree	return iZone != localInstant ;
Code	return iZone != localInstant ;
Distance : 8

72
Tree	return iZone != iField ;
Code	return iZone != iField ;
Distance : 9

73
Tree	return iZone != convertLocalToUTC ;
Code	return iZone != convertLocalToUTC ;
Distance : 8

74
Tree	return iZone . localInstant ( localInstant , false ) ;
Code	return iZone . localInstant ( localInstant , false ) ;
Distance : 3

75
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

76
Tree	return iField . localInstant ( localInstant , false ) ;
Code	return iField . localInstant ( localInstant , false ) ;
Distance : 4

77
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && extends ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && extends ;
Distance : 6

78
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Distance : 4

79
Tree	return iField . localInstant ( localInstant ) ;
Code	return iField . localInstant ( localInstant ) ;
Distance : 6

80
Tree	return ! iField && ! iZone . localInstant () ;
Code	return ! iField && ! iZone . localInstant () ;
Distance : 10

81
Tree	return iField . convertLocalToUTC ( localInstant , localInstant , null ) ;
Code	return iField . convertLocalToUTC ( localInstant , localInstant , null ) ;
Distance : 3

82
Tree	return ! iField && ! iZone . convertLocalToUTC () ;
Code	return ! iField && ! iZone . convertLocalToUTC () ;
Distance : 10

83
Tree	return localInstant ( localInstant , instant ) ;
Code	return localInstant ( localInstant , instant ) ;
Distance : 5

84
Tree	return localInstant ( localInstant , localInstant , localInstant ) ;
Code	return localInstant ( localInstant , localInstant , localInstant ) ;
Distance : 5

85
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

86
Tree	return iZone . convertLocalToUTC ( this , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 4

87
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

88
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && % ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && % ;
Distance : 6

89
Tree	return iZone . iZone ( localInstant ) ;
Code	return iZone . iZone ( localInstant ) ;
Distance : 5

90
Tree	return localInstant ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return localInstant ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 5

91
Tree	return iField != iField ;
Code	return iField != iField ;
Distance : 10

92
Tree	return iZone . iZone ( this , localInstant ) ;
Code	return iZone . iZone ( this , localInstant ) ;
Distance : 5

93
Tree	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Distance : 2

94
Tree	return iZone . convertLocalToUTC ( this , instant ) ;
Code	return iZone . convertLocalToUTC ( this , instant ) ;
Distance : 3

95
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

96
Tree	return iField . localInstant ( localInstant ) ;
Code	return iField . localInstant ( localInstant ) ;
Distance : 6

97
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Distance : 6

98
Tree	return iZone . convertLocalToUTC ( localInstant , convertLocalToUTC , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , convertLocalToUTC , null ) ;
Distance : 2

99
Tree	return convertLocalToUTC ( localInstant , offset , false ) ;
Code	return convertLocalToUTC ( localInstant , offset , false ) ;
Distance : 4

100
Tree	return iZone . convertLocalToUTC ( localInstant , offset , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , offset , null ) ;
Distance : 2

101
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iField ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iField ) ;
Distance : 9

102
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 4

103
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

104
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

105
Tree	return iField . localInstant ( this , localInstant ) ;
Code	return iField . localInstant ( this , localInstant ) ;
Distance : 6

106
Tree	return iZone . localInstant ( convertLocalToUTC ) ;
Code	return iZone . localInstant ( convertLocalToUTC ) ;
Distance : 6

107
Tree	return ! iZone . localInstant ( localInstant ) && <= ;
Code	return ! iZone . localInstant ( localInstant ) && <= ;
Distance : 7

108
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

109
Tree	return instant != iZone ;
Code	return instant != iZone ;
Distance : 10

110
Tree	return iZone . localInstant ( this , localInstant ) ;
Code	return iZone . localInstant ( this , localInstant ) ;
Distance : 5

111
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Distance : 6

112
Tree	return localInstant ( localInstant , instant , false ) ;
Code	return localInstant ( localInstant , instant , false ) ;
Distance : 5

113
Tree	return iField . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iField . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

114
Tree	return convertLocalToUTC ( localInstant , localInstant , convertLocalToUTC , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , convertLocalToUTC , iZone ) ;
Distance : 6

115
Tree	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Distance : 4

116
Tree	return ( ( localInstant ) convertLocalToUTC ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) convertLocalToUTC ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

117
Tree	return convertLocalToUTC ( convertLocalToUTC , localInstant ) ;
Code	return convertLocalToUTC ( convertLocalToUTC , localInstant ) ;
Distance : 6

118
Tree	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Distance : 2

119
Tree	return iZone . localInstant ( convertLocalToUTC , false ) ;
Code	return iZone . localInstant ( convertLocalToUTC , false ) ;
Distance : 4

120
Tree	return convertLocalToUTC ( convertLocalToUTC , localInstant , false ) ;
Code	return convertLocalToUTC ( convertLocalToUTC , localInstant , false ) ;
Distance : 5

121
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

122
Tree	return iZone . convertLocalToUTC ( null , localInstant , convertLocalToUTC , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , convertLocalToUTC , null ) ;
Distance : 4

123
Tree	return iField . convertLocalToUTC ( localInstant ) ;
Code	return iField . convertLocalToUTC ( localInstant ) ;
Distance : 5

124
Tree	return ( ( localInstant ) this ) . localInstant ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . localInstant ( localInstant , localInstant ) ;
Distance : 10

125
Tree	return iZone ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return iZone ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

126
Tree	return localInstant ( convertLocalToUTC , STRING_CONSTANT , iZone ) ;
Code	return localInstant ( convertLocalToUTC , STRING_CONSTANT , iZone ) ;
Distance : 6

127
Tree	return iZone . localInstant ( iZone ) ;
Code	return iZone . localInstant ( iZone ) ;
Distance : 6

128
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

129
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , offset ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , offset ) ;
Distance : 9

130
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

131
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

132
Tree	return ! iZone . localInstant ( localInstant ) && : ;
Code	return ! iZone . localInstant ( localInstant ) && : ;
Distance : 7

133
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , instant ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , instant ) ;
Distance : 3

134
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , false ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , false ) ;
Distance : 8

135
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Distance : 9

136
Tree	return NUMBER_CONSTANT / offset ;
Code	return NUMBER_CONSTANT / offset ;
Distance : 10

137
Tree	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , localInstant ) ;
Distance : 10

138
Tree	return iZone != offset ;
Code	return iZone != offset ;
Distance : 9

139
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

140
Tree	return iZone . convertLocalToUTC ( this , convertLocalToUTC ) ;
Code	return iZone . convertLocalToUTC ( this , convertLocalToUTC ) ;
Distance : 4

141
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

142
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

143
Tree	return iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Code	return iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 5

144
Tree	return iField != iZone ;
Code	return iField != iZone ;
Distance : 10

145
Tree	return convertLocalToUTC ( localInstant , localInstant , offset ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , offset ) ;
Distance : 4

146
Tree	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , offset ) ;
Code	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , offset ) ;
Distance : 10

147
Tree	return ! iZone && ! iZone . iZone () ;
Code	return ! iZone && ! iZone . iZone () ;
Distance : 10

148
Tree	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Distance : 4

149
Tree	return NUMBER_CONSTANT / iField ;
Code	return NUMBER_CONSTANT / iField ;
Distance : 10

150
Tree	return iZone != null iZone / ;
Code	return iZone != null iZone / ;
Distance : 9

151
Tree	return NUMBER_CONSTANT / convertLocalToUTC ;
Code	return NUMBER_CONSTANT / convertLocalToUTC ;
Distance : 9

152
Tree	return localInstant != iZone ;
Code	return localInstant != iZone ;
Distance : 9

153
Tree	return localInstant ( localInstant , iZone , localInstant , iZone ) ;
Code	return localInstant ( localInstant , iZone , localInstant , iZone ) ;
Distance : 7

154
Tree	return localInstant ( localInstant , iZone , localInstant ) ;
Code	return localInstant ( localInstant , iZone , localInstant ) ;
Distance : 5

155
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

156
Tree	return iZone . localInstant ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . localInstant ( STRING_CONSTANT , localInstant ) ;
Distance : 5

157
Tree	return convertLocalToUTC ( localInstant , localInstant , offset , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , offset , iZone ) ;
Distance : 6

158
Tree	return convertLocalToUTC ( localInstant , instant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant , localInstant , iZone ) ;
Distance : 6

159
Tree	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Distance : 5

160
Tree	return convertLocalToUTC ( localInstant , instant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , instant , localInstant ) ;
Distance : 4

161
Tree	return iZone != null return instanceof ;
Code	return iZone != null return instanceof ;
Distance : 9

162
Tree	return iField . convertLocalToUTC ( localInstant , false ) ;
Code	return iField . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

163
Tree	return iZone != null iZone extends ;
Code	return iZone != null iZone extends ;
Distance : 9

164
Tree	return iZone . iZone ( localInstant , localInstant , null ) ;
Code	return iZone . iZone ( localInstant , localInstant , null ) ;
Distance : 3

165
Tree	return ! iZone && ! iZone . localInstant () ;
Code	return ! iZone && ! iZone . localInstant () ;
Distance : 10

166
Tree	return ! iZone . localInstant ( localInstant ) && & ;
Code	return ! iZone . localInstant ( localInstant ) && & ;
Distance : 7

167
Tree	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Distance : 4

168
Tree	return iZone . iZone ( localInstant , false ) ;
Code	return iZone . iZone ( localInstant , false ) ;
Distance : 3

169
Tree	return iZone . localInstant ( localInstant ) ;
Code	return iZone . localInstant ( localInstant ) ;
Distance : 5

170
Tree	return iZone . convertLocalToUTC ( null , iZone , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , iZone , null ) ;
Distance : 5

171
Tree	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Distance : 4

172
Tree	return iZone != null iZone & ;
Code	return iZone != null iZone & ;
Distance : 9

173
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Distance : 6

174
Tree	return iZone != null iZone throws ;
Code	return iZone != null iZone throws ;
Distance : 9

175
Tree	return iZone != null iZone + ;
Code	return iZone != null iZone + ;
Distance : 9

176
Tree	return convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Code	return convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Distance : 5

177
Tree	return iZone != localInstant ;
Code	return iZone != localInstant ;
Distance : 8

178
Tree	return iZone != null iZone += ;
Code	return iZone != null iZone += ;
Distance : 9

179
Tree	return iZone . localInstant ( STRING_CONSTANT , convertLocalToUTC ) ;
Code	return iZone . localInstant ( STRING_CONSTANT , convertLocalToUTC ) ;
Distance : 5

180
Tree	return NUMBER_CONSTANT / instant ;
Code	return NUMBER_CONSTANT / instant ;
Distance : 9

181
Tree	return iField != null iZone ? ;
Code	return iField != null iZone ? ;
Distance : 10

182
Tree	return iZone . localInstant ( convertLocalToUTC ) ;
Code	return iZone . localInstant ( convertLocalToUTC ) ;
Distance : 6

183
Tree	return NUMBER_CONSTANT / iZone ; i
Code	return NUMBER_CONSTANT / iZone ; i
Distance : 11

184
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Distance : 4

185
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

186
Tree	return localInstant ( localInstant , iZone , false ) ;
Code	return localInstant ( localInstant , iZone , false ) ;
Distance : 5

187
Tree	return localInstant ( localInstant , localInstant , iZone ) ;
Code	return localInstant ( localInstant , localInstant , iZone ) ;
Distance : 5

188
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Distance : 2

189
Tree	return localInstant ( localInstant , localInstant , iZone , iZone ) ;
Code	return localInstant ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

190
Tree	return NUMBER_CONSTANT / localInstant ;
Code	return NUMBER_CONSTANT / localInstant ;
Distance : 9

191
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

192
Tree	return iZone . localInstant ( iZone ) ;
Code	return iZone . localInstant ( iZone ) ;
Distance : 6

193
Tree	return iZone . localInstant ( null , localInstant , offset , null ) ;
Code	return iZone . localInstant ( null , localInstant , offset , null ) ;
Distance : 5

194
Tree	return NUMBER_CONSTANT / iZone ; options
Code	return NUMBER_CONSTANT / iZone ; options
Distance : 11

195
Tree	return iZone != null iZone <> ;
Code	return iZone != null iZone <> ;
Distance : 9

196
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

197
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

198
Tree	return NUMBER_CONSTANT / iZone ; Math
Code	return NUMBER_CONSTANT / iZone ; Math
Distance : 11

199
Tree	return convertLocalToUTC ( localInstant , instant , false ) ;
Code	return convertLocalToUTC ( localInstant , instant , false ) ;
Distance : 4

========================================================================


========================================================================
Example Number: 111
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

1
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

2
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

3
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , convertLocalToUTC ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , convertLocalToUTC ) ;
Distance : 4

4
Tree	return iField . convertLocalToUTC ( localInstant ) ;
Code	return iField . convertLocalToUTC ( localInstant ) ;
Distance : 5

5
Tree	return iZone != instant ;
Code	return iZone != instant ;
Distance : 8

6
Tree	return convertLocalToUTC ( localInstant , offset ) ;
Code	return convertLocalToUTC ( localInstant , offset ) ;
Distance : 5

7
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

8
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

9
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

10
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

11
Tree	return iField != iZone ;
Code	return iField != iZone ;
Distance : 10

12
Tree	return ( ( localInstant ) this ) . localInstant ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . localInstant ( localInstant , iZone ) ;
Distance : 10

13
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

14
Tree	return iZone . iZone ( localInstant ) ;
Code	return iZone . iZone ( localInstant ) ;
Distance : 5

15
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

16
Tree	return ! iZone && ! iZone . offset () ;
Code	return ! iZone && ! iZone . offset () ;
Distance : 10

17
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Distance : 4

18
Tree	return iField . localInstant ( STRING_CONSTANT , localInstant ) ;
Code	return iField . localInstant ( STRING_CONSTANT , localInstant ) ;
Distance : 6

19
Tree	return iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Code	return iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 5

20
Tree	return iZone != null iZone ? ;
Code	return iZone != null iZone ? ;
Distance : 9

21
Tree	return convertLocalToUTC ( localInstant , convertLocalToUTC , false ) ;
Code	return convertLocalToUTC ( localInstant , convertLocalToUTC , false ) ;
Distance : 4

22
Tree	return localInstant ( localInstant , localInstant , localInstant , iZone ) ;
Code	return localInstant ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

23
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

24
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

25
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , , ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , , ) ;
Distance : 8

26
Tree	return iZone != iField ;
Code	return iZone != iField ;
Distance : 9

27
Tree	return iZone . convertLocalToUTC ( iZone ) ;
Code	return iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

28
Tree	return iZone . localInstant ( localInstant ) ;
Code	return iZone . localInstant ( localInstant ) ;
Distance : 5

29
Tree	return iZone != offset ;
Code	return iZone != offset ;
Distance : 9

30
Tree	return iZone . localInstant ( localInstant , instant , null ) ;
Code	return iZone . localInstant ( localInstant , instant , null ) ;
Distance : 3

31
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Distance : 6

32
Tree	return localInstant ( localInstant , localInstant , false ) ;
Code	return localInstant ( localInstant , localInstant , false ) ;
Distance : 5

33
Tree	return ! iZone && ! iField . localInstant () ;
Code	return ! iZone && ! iField . localInstant () ;
Distance : 10

34
Tree	return ! iZone . localInstant ( localInstant ) && ^ ;
Code	return ! iZone . localInstant ( localInstant ) && ^ ;
Distance : 7

35
Tree	return iZone . iZone ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . iZone ( STRING_CONSTANT , localInstant ) ;
Distance : 5

36
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Distance : 9

37
Tree	return convertLocalToUTC ( iZone , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( iZone , STRING_CONSTANT , iZone ) ;
Distance : 5

38
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Distance : 6

39
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , offset ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , offset ) ;
Distance : 9

40
Tree	return convertLocalToUTC ( localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , false ) ;
Distance : 4

41
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

42
Tree	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , iZone ) ;
Distance : 10

43
Tree	return iField . convertLocalToUTC ( this , localInstant ) ;
Code	return iField . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

44
Tree	return iZone != instant ;
Code	return iZone != instant ;
Distance : 8

45
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

46
Tree	return localInstant ( localInstant , STRING_CONSTANT , iField ) ;
Code	return localInstant ( localInstant , STRING_CONSTANT , iField ) ;
Distance : 5

47
Tree	return convertLocalToUTC ( convertLocalToUTC , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( convertLocalToUTC , STRING_CONSTANT , iZone ) ;
Distance : 5

48
Tree	return iZone . convertLocalToUTC ( null , localInstant , offset , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , offset , null ) ;
Distance : 4

49
Tree	return iZone . localInstant ( localInstant , iZone , null ) ;
Code	return iZone . localInstant ( localInstant , iZone , null ) ;
Distance : 3

50
Tree	return localInstant != iZone ;
Code	return localInstant != iZone ;
Distance : 9

51
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

52
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Distance : 6

53
Tree	return convertLocalToUTC ( localInstant , localInstant , convertLocalToUTC ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , convertLocalToUTC ) ;
Distance : 4

54
Tree	return iZone . localInstant ( null , localInstant , iZone , null ) ;
Code	return iZone . localInstant ( null , localInstant , iZone , null ) ;
Distance : 5

55
Tree	return iZone . convertLocalToUTC ( convertLocalToUTC , false ) ;
Code	return iZone . convertLocalToUTC ( convertLocalToUTC , false ) ;
Distance : 3

56
Tree	return instant != iZone ;
Code	return instant != iZone ;
Distance : 10

57
Tree	return ! iZone && ! iField . convertLocalToUTC () ;
Code	return ! iZone && ! iField . convertLocalToUTC () ;
Distance : 10

58
Tree	return iZone . localInstant ( localInstant , localInstant , null ) ;
Code	return iZone . localInstant ( localInstant , localInstant , null ) ;
Distance : 3

59
Tree	return localInstant ( localInstant , iZone ) ;
Code	return localInstant ( localInstant , iZone ) ;
Distance : 6

60
Tree	return convertLocalToUTC ( localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone ) ;
Distance : 5

61
Tree	return localInstant ( localInstant , localInstant ) ;
Code	return localInstant ( localInstant , localInstant ) ;
Distance : 6

62
Tree	return iZone . localInstant ( this , convertLocalToUTC ) ;
Code	return iZone . localInstant ( this , convertLocalToUTC ) ;
Distance : 5

63
Tree	return ! instant && ! iZone . convertLocalToUTC () ;
Code	return ! instant && ! iZone . convertLocalToUTC () ;
Distance : 10

64
Tree	return iZone . localInstant ( iZone , false ) ;
Code	return iZone . localInstant ( iZone , false ) ;
Distance : 4

65
Tree	return iZone . convertLocalToUTC ( iZone ) ;
Code	return iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

66
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

67
Tree	return iZone . localInstant ( null , localInstant , localInstant , null ) ;
Code	return iZone . localInstant ( null , localInstant , localInstant , null ) ;
Distance : 5

68
Tree	return convertLocalToUTC ( localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , instant ) ;
Distance : 4

69
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

70
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iField ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iField ) ;
Distance : 4

71
Tree	return iZone != localInstant ;
Code	return iZone != localInstant ;
Distance : 8

72
Tree	return iZone != iField ;
Code	return iZone != iField ;
Distance : 9

73
Tree	return iZone != convertLocalToUTC ;
Code	return iZone != convertLocalToUTC ;
Distance : 8

74
Tree	return iZone . localInstant ( localInstant , false ) ;
Code	return iZone . localInstant ( localInstant , false ) ;
Distance : 3

75
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

76
Tree	return iField . localInstant ( localInstant , false ) ;
Code	return iField . localInstant ( localInstant , false ) ;
Distance : 4

77
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && extends ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && extends ;
Distance : 6

78
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Distance : 4

79
Tree	return iField . localInstant ( localInstant ) ;
Code	return iField . localInstant ( localInstant ) ;
Distance : 6

80
Tree	return ! iField && ! iZone . localInstant () ;
Code	return ! iField && ! iZone . localInstant () ;
Distance : 10

81
Tree	return iField . convertLocalToUTC ( localInstant , localInstant , null ) ;
Code	return iField . convertLocalToUTC ( localInstant , localInstant , null ) ;
Distance : 3

82
Tree	return ! iField && ! iZone . convertLocalToUTC () ;
Code	return ! iField && ! iZone . convertLocalToUTC () ;
Distance : 10

83
Tree	return localInstant ( localInstant , instant ) ;
Code	return localInstant ( localInstant , instant ) ;
Distance : 5

84
Tree	return localInstant ( localInstant , localInstant , localInstant ) ;
Code	return localInstant ( localInstant , localInstant , localInstant ) ;
Distance : 5

85
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

86
Tree	return iZone . convertLocalToUTC ( this , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 4

87
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

88
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && % ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && % ;
Distance : 6

89
Tree	return iZone . iZone ( localInstant ) ;
Code	return iZone . iZone ( localInstant ) ;
Distance : 5

90
Tree	return localInstant ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return localInstant ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 5

91
Tree	return iField != iField ;
Code	return iField != iField ;
Distance : 10

92
Tree	return iZone . iZone ( this , localInstant ) ;
Code	return iZone . iZone ( this , localInstant ) ;
Distance : 5

93
Tree	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Distance : 2

94
Tree	return iZone . convertLocalToUTC ( this , instant ) ;
Code	return iZone . convertLocalToUTC ( this , instant ) ;
Distance : 3

95
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

96
Tree	return iField . localInstant ( localInstant ) ;
Code	return iField . localInstant ( localInstant ) ;
Distance : 6

97
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Distance : 6

98
Tree	return iZone . convertLocalToUTC ( localInstant , convertLocalToUTC , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , convertLocalToUTC , null ) ;
Distance : 2

99
Tree	return convertLocalToUTC ( localInstant , offset , false ) ;
Code	return convertLocalToUTC ( localInstant , offset , false ) ;
Distance : 4

100
Tree	return iZone . convertLocalToUTC ( localInstant , offset , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , offset , null ) ;
Distance : 2

101
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iField ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iField ) ;
Distance : 9

102
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 4

103
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

104
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

105
Tree	return iField . localInstant ( this , localInstant ) ;
Code	return iField . localInstant ( this , localInstant ) ;
Distance : 6

106
Tree	return iZone . localInstant ( convertLocalToUTC ) ;
Code	return iZone . localInstant ( convertLocalToUTC ) ;
Distance : 6

107
Tree	return ! iZone . localInstant ( localInstant ) && <= ;
Code	return ! iZone . localInstant ( localInstant ) && <= ;
Distance : 7

108
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

109
Tree	return instant != iZone ;
Code	return instant != iZone ;
Distance : 10

110
Tree	return iZone . localInstant ( this , localInstant ) ;
Code	return iZone . localInstant ( this , localInstant ) ;
Distance : 5

111
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Distance : 6

112
Tree	return localInstant ( localInstant , instant , false ) ;
Code	return localInstant ( localInstant , instant , false ) ;
Distance : 5

113
Tree	return iField . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iField . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

114
Tree	return convertLocalToUTC ( localInstant , localInstant , convertLocalToUTC , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , convertLocalToUTC , iZone ) ;
Distance : 6

115
Tree	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Distance : 4

116
Tree	return ( ( localInstant ) convertLocalToUTC ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) convertLocalToUTC ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

117
Tree	return convertLocalToUTC ( convertLocalToUTC , localInstant ) ;
Code	return convertLocalToUTC ( convertLocalToUTC , localInstant ) ;
Distance : 6

118
Tree	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Distance : 2

119
Tree	return iZone . localInstant ( convertLocalToUTC , false ) ;
Code	return iZone . localInstant ( convertLocalToUTC , false ) ;
Distance : 4

120
Tree	return convertLocalToUTC ( convertLocalToUTC , localInstant , false ) ;
Code	return convertLocalToUTC ( convertLocalToUTC , localInstant , false ) ;
Distance : 5

121
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

122
Tree	return iZone . convertLocalToUTC ( null , localInstant , convertLocalToUTC , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , convertLocalToUTC , null ) ;
Distance : 4

123
Tree	return iField . convertLocalToUTC ( localInstant ) ;
Code	return iField . convertLocalToUTC ( localInstant ) ;
Distance : 5

124
Tree	return ( ( localInstant ) this ) . localInstant ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . localInstant ( localInstant , localInstant ) ;
Distance : 10

125
Tree	return iZone ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return iZone ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

126
Tree	return localInstant ( convertLocalToUTC , STRING_CONSTANT , iZone ) ;
Code	return localInstant ( convertLocalToUTC , STRING_CONSTANT , iZone ) ;
Distance : 6

127
Tree	return iZone . localInstant ( iZone ) ;
Code	return iZone . localInstant ( iZone ) ;
Distance : 6

128
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

129
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , offset ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , offset ) ;
Distance : 9

130
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

131
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

132
Tree	return ! iZone . localInstant ( localInstant ) && : ;
Code	return ! iZone . localInstant ( localInstant ) && : ;
Distance : 7

133
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , instant ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , instant ) ;
Distance : 3

134
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , , ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , , ) ;
Distance : 8

135
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Distance : 9

136
Tree	return NUMBER_CONSTANT / offset ;
Code	return NUMBER_CONSTANT / offset ;
Distance : 10

137
Tree	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , localInstant ) ;
Distance : 10

138
Tree	return iZone != offset ;
Code	return iZone != offset ;
Distance : 9

139
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

140
Tree	return iZone . convertLocalToUTC ( this , convertLocalToUTC ) ;
Code	return iZone . convertLocalToUTC ( this , convertLocalToUTC ) ;
Distance : 4

141
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

142
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

143
Tree	return iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Code	return iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 5

144
Tree	return iField != iZone ;
Code	return iField != iZone ;
Distance : 10

145
Tree	return convertLocalToUTC ( localInstant , localInstant , offset ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , offset ) ;
Distance : 4

146
Tree	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , offset ) ;
Code	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , offset ) ;
Distance : 10

147
Tree	return ! iZone && ! iZone . iZone () ;
Code	return ! iZone && ! iZone . iZone () ;
Distance : 10

148
Tree	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Distance : 4

149
Tree	return NUMBER_CONSTANT / iField ;
Code	return NUMBER_CONSTANT / iField ;
Distance : 10

150
Tree	return iZone != null iZone / ;
Code	return iZone != null iZone / ;
Distance : 9

151
Tree	return NUMBER_CONSTANT / convertLocalToUTC ;
Code	return NUMBER_CONSTANT / convertLocalToUTC ;
Distance : 9

152
Tree	return localInstant != iZone ;
Code	return localInstant != iZone ;
Distance : 9

153
Tree	return localInstant ( localInstant , iZone , localInstant , iZone ) ;
Code	return localInstant ( localInstant , iZone , localInstant , iZone ) ;
Distance : 7

154
Tree	return localInstant ( localInstant , iZone , localInstant ) ;
Code	return localInstant ( localInstant , iZone , localInstant ) ;
Distance : 5

155
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

156
Tree	return iZone . localInstant ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . localInstant ( STRING_CONSTANT , localInstant ) ;
Distance : 5

157
Tree	return convertLocalToUTC ( localInstant , localInstant , offset , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , offset , iZone ) ;
Distance : 6

158
Tree	return convertLocalToUTC ( localInstant , instant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant , localInstant , iZone ) ;
Distance : 6

159
Tree	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Distance : 5

160
Tree	return convertLocalToUTC ( localInstant , instant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , instant , localInstant ) ;
Distance : 4

161
Tree	return iZone != null iZone instanceof ;
Code	return iZone != null iZone instanceof ;
Distance : 9

162
Tree	return iField . convertLocalToUTC ( localInstant , false ) ;
Code	return iField . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

163
Tree	return iZone != null iZone extends ;
Code	return iZone != null iZone extends ;
Distance : 9

164
Tree	return iZone . iZone ( localInstant , localInstant , null ) ;
Code	return iZone . iZone ( localInstant , localInstant , null ) ;
Distance : 3

165
Tree	return ! iZone && ! iZone . localInstant () ;
Code	return ! iZone && ! iZone . localInstant () ;
Distance : 10

166
Tree	return ! iZone . localInstant ( localInstant ) && & ;
Code	return ! iZone . localInstant ( localInstant ) && & ;
Distance : 7

167
Tree	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Distance : 4

168
Tree	return iZone . iZone ( localInstant , false ) ;
Code	return iZone . iZone ( localInstant , false ) ;
Distance : 3

169
Tree	return iZone . localInstant ( localInstant ) ;
Code	return iZone . localInstant ( localInstant ) ;
Distance : 5

170
Tree	return iZone . convertLocalToUTC ( null , iZone , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , iZone , null ) ;
Distance : 5

171
Tree	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Distance : 4

172
Tree	return iZone != null iZone & ;
Code	return iZone != null iZone & ;
Distance : 9

173
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Distance : 6

174
Tree	return iZone != null iZone throws ;
Code	return iZone != null iZone throws ;
Distance : 9

175
Tree	return iZone != null iZone + ;
Code	return iZone != null iZone + ;
Distance : 9

176
Tree	return convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Code	return convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Distance : 5

177
Tree	return iZone != localInstant ;
Code	return iZone != localInstant ;
Distance : 8

178
Tree	return iZone != null iZone += ;
Code	return iZone != null iZone += ;
Distance : 9

179
Tree	return iZone . localInstant ( STRING_CONSTANT , convertLocalToUTC ) ;
Code	return iZone . localInstant ( STRING_CONSTANT , convertLocalToUTC ) ;
Distance : 5

180
Tree	return NUMBER_CONSTANT / instant ;
Code	return NUMBER_CONSTANT / instant ;
Distance : 9

181
Tree	return iField != null iZone ? ;
Code	return iField != null iZone ? ;
Distance : 10

182
Tree	return iZone . localInstant ( convertLocalToUTC ) ;
Code	return iZone . localInstant ( convertLocalToUTC ) ;
Distance : 6

183
Tree	return NUMBER_CONSTANT / iZone ; i
Code	return NUMBER_CONSTANT / iZone ; i
Distance : 11

184
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Distance : 4

185
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

186
Tree	return localInstant ( localInstant , iZone , false ) ;
Code	return localInstant ( localInstant , iZone , false ) ;
Distance : 5

187
Tree	return localInstant ( localInstant , localInstant , iZone ) ;
Code	return localInstant ( localInstant , localInstant , iZone ) ;
Distance : 5

188
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Distance : 2

189
Tree	return localInstant ( localInstant , localInstant , iZone , iZone ) ;
Code	return localInstant ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

190
Tree	return NUMBER_CONSTANT / localInstant ;
Code	return NUMBER_CONSTANT / localInstant ;
Distance : 9

191
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

192
Tree	return iZone . localInstant ( iZone ) ;
Code	return iZone . localInstant ( iZone ) ;
Distance : 6

193
Tree	return iZone . localInstant ( null , localInstant , offset , null ) ;
Code	return iZone . localInstant ( null , localInstant , offset , null ) ;
Distance : 5

194
Tree	return NUMBER_CONSTANT / iZone ; options
Code	return NUMBER_CONSTANT / iZone ; options
Distance : 11

195
Tree	return iZone != null iZone <> ;
Code	return iZone != null iZone <> ;
Distance : 9

196
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

197
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

198
Tree	return NUMBER_CONSTANT / iZone ; Math
Code	return NUMBER_CONSTANT / iZone ; Math
Distance : 11

199
Tree	return convertLocalToUTC ( localInstant , instant , false ) ;
Code	return convertLocalToUTC ( localInstant , instant , false ) ;
Distance : 4

========================================================================


========================================================================
Example Number: 112
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return iZone . iZone ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . iZone ( STRING_CONSTANT , localInstant ) ;
Distance : 5

1
Tree	return convertLocalToUTC ( localInstant , locale , false ) ;
Code	return convertLocalToUTC ( localInstant , locale , false ) ;
Distance : 4

2
Tree	return iZone . convertLocalToUTC ( localInstant , text , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , text , null ) ;
Distance : 2

3
Tree	return locale != iZone ;
Code	return locale != iZone ;
Distance : 10

4
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

5
Tree	return ! iZone && ! iField . convertLocalToUTC () ;
Code	return ! iZone && ! iField . convertLocalToUTC () ;
Distance : 10

6
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , locale ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , locale ) ;
Distance : 9

7
Tree	return localInstant ( localInstant , iZone ) ;
Code	return localInstant ( localInstant , iZone ) ;
Distance : 6

8
Tree	return iZone . localInstant ( iZone ) ;
Code	return iZone . localInstant ( iZone ) ;
Distance : 6

9
Tree	return convertLocalToUTC ( localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , instant ) ;
Distance : 4

10
Tree	return iZone . localInstant ( localInstant ) ;
Code	return iZone . localInstant ( localInstant ) ;
Distance : 5

11
Tree	return iField != iZone ;
Code	return iField != iZone ;
Distance : 10

12
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

13
Tree	return iZone . iZone ( localInstant ) ;
Code	return iZone . iZone ( localInstant ) ;
Distance : 5

14
Tree	return iZone . localInstant ( localInstant , iZone , null ) ;
Code	return iZone . localInstant ( localInstant , iZone , null ) ;
Distance : 3

15
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

16
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

17
Tree	return iZone != iField ;
Code	return iZone != iField ;
Distance : 9

18
Tree	return ! iZone && ! locale . convertLocalToUTC () ;
Code	return ! iZone && ! locale . convertLocalToUTC () ;
Distance : 10

19
Tree	return convertLocalToUTC ( iZone , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( iZone , STRING_CONSTANT , iZone ) ;
Distance : 5

20
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

21
Tree	return convertLocalToUTC ( localInstant , text ) ;
Code	return convertLocalToUTC ( localInstant , text ) ;
Distance : 5

22
Tree	return convertLocalToUTC ( localInstant , locale ) ;
Code	return convertLocalToUTC ( localInstant , locale ) ;
Distance : 5

23
Tree	return iZone . localInstant ( convertLocalToUTC ) ;
Code	return iZone . localInstant ( convertLocalToUTC ) ;
Distance : 6

24
Tree	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Distance : 2

25
Tree	return ! iField && ! iZone . convertLocalToUTC () ;
Code	return ! iField && ! iZone . convertLocalToUTC () ;
Distance : 10

26
Tree	return iZone != iField ;
Code	return iZone != iField ;
Distance : 9

27
Tree	return iZone . localInstant ( localInstant ) ;
Code	return iZone . localInstant ( localInstant ) ;
Distance : 5

28
Tree	return convertLocalToUTC ( localInstant , text , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , text , localInstant , iZone ) ;
Distance : 6

29
Tree	return localInstant ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return localInstant ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 5

30
Tree	return localInstant ( localInstant , STRING_CONSTANT , iField ) ;
Code	return localInstant ( localInstant , STRING_CONSTANT , iField ) ;
Distance : 5

31
Tree	return iZone . convertLocalToUTC ( iZone ) ;
Code	return iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

32
Tree	return iZone . iZone ( this , localInstant ) ;
Code	return iZone . iZone ( this , localInstant ) ;
Distance : 5

33
Tree	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Distance : 4

34
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

35
Tree	return iZone . localInstant ( null , localInstant , localInstant , null ) ;
Code	return iZone . localInstant ( null , localInstant , localInstant , null ) ;
Distance : 5

36
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Distance : 4

37
Tree	return convertLocalToUTC ( localInstant , text , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , text , localInstant ) ;
Distance : 4

38
Tree	return iZone != localInstant ;
Code	return iZone != localInstant ;
Distance : 8

39
Tree	return ! iField && ! iZone . localInstant () ;
Code	return ! iField && ! iZone . localInstant () ;
Distance : 10

40
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , text ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , text ) ;
Distance : 4

41
Tree	return localInstant ( localInstant , localInstant , false ) ;
Code	return localInstant ( localInstant , localInstant , false ) ;
Distance : 5

42
Tree	return iZone . convertLocalToUTC ( localInstant , locale , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , locale , null ) ;
Distance : 2

43
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Distance : 6

44
Tree	return localInstant ( localInstant , localInstant , localInstant ) ;
Code	return localInstant ( localInstant , localInstant , localInstant ) ;
Distance : 5

45
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

46
Tree	return iZone . convertLocalToUTC ( this , instant ) ;
Code	return iZone . convertLocalToUTC ( this , instant ) ;
Distance : 3

47
Tree	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , localInstant ) ;
Distance : 10

48
Tree	return ! iZone . localInstant ( localInstant ) && <= ;
Code	return ! iZone . localInstant ( localInstant ) && <= ;
Distance : 7

49
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Distance : 6

50
Tree	return iField . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iField . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

51
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

52
Tree	return iZone . localInstant ( convertLocalToUTC ) ;
Code	return iZone . localInstant ( convertLocalToUTC ) ;
Distance : 6

53
Tree	return ! iZone && ! iZone . iZone () ;
Code	return ! iZone && ! iZone . iZone () ;
Distance : 10

54
Tree	return ! locale && ! iZone . convertLocalToUTC () ;
Code	return ! locale && ! iZone . convertLocalToUTC () ;
Distance : 10

55
Tree	return ! iZone . localInstant ( localInstant ) && : ;
Code	return ! iZone . localInstant ( localInstant ) && : ;
Distance : 7

56
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

57
Tree	return localInstant != iZone ;
Code	return localInstant != iZone ;
Distance : 9

58
Tree	return ! iZone . localInstant ( localInstant ) && & ;
Code	return ! iZone . localInstant ( localInstant ) && & ;
Distance : 7

59
Tree	return iField . convertLocalToUTC ( this , localInstant ) ;
Code	return iField . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

60
Tree	return iZone != . ;
Code	return iZone != . ;
Distance : 9

61
Tree	return NUMBER_CONSTANT / text ;
Code	return NUMBER_CONSTANT / text ;
Distance : 10

62
Tree	return iZone . convertLocalToUTC ( null , localInstant , text , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , text , null ) ;
Distance : 4

63
Tree	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , text ) ;
Code	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , text ) ;
Distance : 10

64
Tree	return convertLocalToUTC ( localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , false ) ;
Distance : 4

65
Tree	return localInstant ( localInstant , text ) ;
Code	return localInstant ( localInstant , text ) ;
Distance : 6

66
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

67
Tree	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Distance : 4

68
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , convertLocalToUTC ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , convertLocalToUTC ) ;
Distance : 4

69
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

70
Tree	return iZone ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return iZone ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

71
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , text ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , text ) ;
Distance : 9

72
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

73
Tree	return iField . convertLocalToUTC ( localInstant ) ;
Code	return iField . convertLocalToUTC ( localInstant ) ;
Distance : 5

74
Tree	return iField . localInstant ( localInstant , false ) ;
Code	return iField . localInstant ( localInstant , false ) ;
Distance : 4

75
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Distance : 6

76
Tree	return NUMBER_CONSTANT / instant ;
Code	return NUMBER_CONSTANT / instant ;
Distance : 9

77
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

78
Tree	return iZone . convertLocalToUTC ( convertLocalToUTC , false ) ;
Code	return iZone . convertLocalToUTC ( convertLocalToUTC , false ) ;
Distance : 3

79
Tree	return iZone . localInstant ( STRING_CONSTANT , text ) ;
Code	return iZone . localInstant ( STRING_CONSTANT , text ) ;
Distance : 5

80
Tree	return iField . localInstant ( this , localInstant ) ;
Code	return iField . localInstant ( this , localInstant ) ;
Distance : 6

81
Tree	return iZone != convertLocalToUTC ;
Code	return iZone != convertLocalToUTC ;
Distance : 8

82
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

83
Tree	return iZone . localInstant ( convertLocalToUTC , false ) ;
Code	return iZone . localInstant ( convertLocalToUTC , false ) ;
Distance : 4

84
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Distance : 6

85
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

86
Tree	return ( ( localInstant ) this ) . localInstant ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . localInstant ( localInstant , iZone ) ;
Distance : 10

87
Tree	return iZone != null iZone ? ;
Code	return iZone != null iZone ? ;
Distance : 9

88
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , locale ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , locale ) ;
Distance : 9

89
Tree	return convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Code	return convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Distance : 5

90
Tree	return localInstant ( localInstant , localInstant ) ;
Code	return localInstant ( localInstant , localInstant ) ;
Distance : 6

91
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

92
Tree	return iZone . convertLocalToUTC ( this , convertLocalToUTC ) ;
Code	return iZone . convertLocalToUTC ( this , convertLocalToUTC ) ;
Distance : 4

93
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

94
Tree	return iZone != localInstant ;
Code	return iZone != localInstant ;
Distance : 8

95
Tree	return locale != iZone ;
Code	return locale != iZone ;
Distance : 10

96
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

97
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

98
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

99
Tree	return ( ( localInstant ) this ) . localInstant ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . localInstant ( localInstant , localInstant ) ;
Distance : 10

100
Tree	return iZone != instant ;
Code	return iZone != instant ;
Distance : 8

101
Tree	return localInstant ( localInstant , iZone , false ) ;
Code	return localInstant ( localInstant , iZone , false ) ;
Distance : 5

102
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , locale ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , locale ) ;
Distance : 4

103
Tree	return iZone . localInstant ( localInstant , false ) ;
Code	return iZone . localInstant ( localInstant , false ) ;
Distance : 3

104
Tree	return NUMBER_CONSTANT / localInstant ;
Code	return NUMBER_CONSTANT / localInstant ;
Distance : 9

105
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iField ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iField ) ;
Distance : 4

106
Tree	return NUMBER_CONSTANT / locale ;
Code	return NUMBER_CONSTANT / locale ;
Distance : 10

107
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

108
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

109
Tree	return ( ( localInstant ) this ) . localInstant ( localInstant , text ) ;
Code	return ( ( localInstant ) this ) . localInstant ( localInstant , text ) ;
Distance : 10

110
Tree	return convertLocalToUTC ( localInstant , localInstant , convertLocalToUTC ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , convertLocalToUTC ) ;
Distance : 4

111
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

112
Tree	return iField . convertLocalToUTC ( localInstant ) ;
Code	return iField . convertLocalToUTC ( localInstant ) ;
Distance : 5

113
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

114
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Distance : 9

115
Tree	return iField . localInstant ( STRING_CONSTANT , localInstant ) ;
Code	return iField . localInstant ( STRING_CONSTANT , localInstant ) ;
Distance : 6

116
Tree	return iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Code	return iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 5

117
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , text ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , text ) ;
Distance : 9

118
Tree	return NUMBER_CONSTANT / Locale ;
Code	return NUMBER_CONSTANT / Locale ;
Distance : 10

119
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

120
Tree	return iField != iField ;
Code	return iField != iField ;
Distance : 10

121
Tree	return convertLocalToUTC ( localInstant , instant , false ) ;
Code	return convertLocalToUTC ( localInstant , instant , false ) ;
Distance : 4

122
Tree	return convertLocalToUTC ( localInstant , text , iZone ) ;
Code	return convertLocalToUTC ( localInstant , text , iZone ) ;
Distance : 4

123
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Distance : 4

124
Tree	return text != iZone ;
Code	return text != iZone ;
Distance : 10

125
Tree	return iField . localInstant ( localInstant ) ;
Code	return iField . localInstant ( localInstant ) ;
Distance : 6

126
Tree	return convertLocalToUTC ( localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone ) ;
Distance : 5

127
Tree	return localInstant ( localInstant , text , false ) ;
Code	return localInstant ( localInstant , text , false ) ;
Distance : 5

128
Tree	return iZone . localInstant ( null , localInstant , iZone , null ) ;
Code	return iZone . localInstant ( null , localInstant , iZone , null ) ;
Distance : 5

129
Tree	return iZone . localInstant ( localInstant , text , null ) ;
Code	return iZone . localInstant ( localInstant , text , null ) ;
Distance : 3

130
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

131
Tree	return iZone . convertLocalToUTC ( this , text ) ;
Code	return iZone . convertLocalToUTC ( this , text ) ;
Distance : 4

132
Tree	return iZone . localInstant ( this , localInstant ) ;
Code	return iZone . localInstant ( this , localInstant ) ;
Distance : 5

133
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

134
Tree	return iField . localInstant ( localInstant ) ;
Code	return iField . localInstant ( localInstant ) ;
Distance : 6

135
Tree	return convertLocalToUTC ( localInstant , text , false ) ;
Code	return convertLocalToUTC ( localInstant , text , false ) ;
Distance : 4

136
Tree	return localInstant ( localInstant , localInstant , iZone ) ;
Code	return localInstant ( localInstant , localInstant , iZone ) ;
Distance : 5

137
Tree	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Distance : 2

138
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Distance : 2

139
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

140
Tree	return iField != iZone ;
Code	return iField != iZone ;
Distance : 10

141
Tree	return iZone . localInstant ( iZone , false ) ;
Code	return iZone . localInstant ( iZone , false ) ;
Distance : 4

142
Tree	return iField . convertLocalToUTC ( localInstant , localInstant , null ) ;
Code	return iField . convertLocalToUTC ( localInstant , localInstant , null ) ;
Distance : 3

143
Tree	return convertLocalToUTC ( text , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( text , STRING_CONSTANT , iZone ) ;
Distance : 5

144
Tree	return iZone . convertLocalToUTC ( iZone ) ;
Code	return iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

145
Tree	return iZone != null iZone + ;
Code	return iZone != null iZone + ;
Distance : 9

146
Tree	return convertLocalToUTC ( localInstant , localInstant , convertLocalToUTC , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , convertLocalToUTC , iZone ) ;
Distance : 6

147
Tree	return NUMBER_CONSTANT / set ;
Code	return NUMBER_CONSTANT / set ;
Distance : 10

148
Tree	return convertLocalToUTC ( convertLocalToUTC , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( convertLocalToUTC , STRING_CONSTANT , iZone ) ;
Distance : 5

149
Tree	return localInstant ( localInstant , localInstant , localInstant , iZone ) ;
Code	return localInstant ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

150
Tree	return NUMBER_CONSTANT / iField ;
Code	return NUMBER_CONSTANT / iField ;
Distance : 10

151
Tree	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Distance : 4

152
Tree	return ! iZone && ! iField . localInstant () ;
Code	return ! iZone && ! iField . localInstant () ;
Distance : 10

153
Tree	return localInstant ( localInstant , localInstant , iZone , iZone ) ;
Code	return localInstant ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

154
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , , ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , , ) ;
Distance : 8

155
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

156
Tree	return ( ( localInstant ) convertLocalToUTC ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) convertLocalToUTC ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

157
Tree	return iZone . convertLocalToUTC ( null , localInstant , convertLocalToUTC , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , convertLocalToUTC , null ) ;
Distance : 4

158
Tree	return iZone . localInstant ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . localInstant ( STRING_CONSTANT , localInstant ) ;
Distance : 5

159
Tree	return iZone != null iZone instanceof ;
Code	return iZone != null iZone instanceof ;
Distance : 9

160
Tree	return convertLocalToUTC ( localInstant , text , convertLocalToUTC ) ;
Code	return convertLocalToUTC ( localInstant , text , convertLocalToUTC ) ;
Distance : 4

161
Tree	return convertLocalToUTC ( localInstant , text , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , text , iZone , iZone ) ;
Distance : 6

162
Tree	return iZone . localInstant ( localInstant , instant , null ) ;
Code	return iZone . localInstant ( localInstant , instant , null ) ;
Distance : 3

163
Tree	return iField . convertLocalToUTC ( localInstant , false ) ;
Code	return iField . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

164
Tree	return ! iZone . localInstant ( localInstant ) && ^ ;
Code	return ! iZone . localInstant ( localInstant ) && ^ ;
Distance : 7

165
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Distance : 6

166
Tree	return ! iZone && ! iZone . localInstant () ;
Code	return ! iZone && ! iZone . localInstant () ;
Distance : 10

167
Tree	return iZone . iZone ( localInstant , false ) ;
Code	return iZone . iZone ( localInstant , false ) ;
Distance : 3

168
Tree	return iZone != null iZone / ;
Code	return iZone != null iZone / ;
Distance : 9

169
Tree	return iZone != instant ;
Code	return iZone != instant ;
Distance : 8

170
Tree	return convertLocalToUTC ( localInstant , text , convertLocalToUTC , iZone ) ;
Code	return convertLocalToUTC ( localInstant , text , convertLocalToUTC , iZone ) ;
Distance : 6

171
Tree	return NUMBER_CONSTANT / convertLocalToUTC ;
Code	return NUMBER_CONSTANT / convertLocalToUTC ;
Distance : 9

172
Tree	return iZone != null iZone <> ;
Code	return iZone != null iZone <> ;
Distance : 9

173
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Distance : 9

174
Tree	return iZone . iZone ( localInstant ) ;
Code	return iZone . iZone ( localInstant ) ;
Distance : 5

175
Tree	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , iZone ) ;
Distance : 10

176
Tree	return iZone != locale ;
Code	return iZone != locale ;
Distance : 9

177
Tree	return iZone != null iZone extends ;
Code	return iZone != null iZone extends ;
Distance : 9

178
Tree	return localInstant != iZone ;
Code	return localInstant != iZone ;
Distance : 9

179
Tree	return iZone != locale ;
Code	return iZone != locale ;
Distance : 9

180
Tree	return iZone != null iZone & ;
Code	return iZone != null iZone & ;
Distance : 9

181
Tree	return iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Code	return iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 5

182
Tree	return iZone != null iZone throws ;
Code	return iZone != null iZone throws ;
Distance : 9

183
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 4

184
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

185
Tree	return iZone . convertLocalToUTC ( this , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 4

186
Tree	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Distance : 5

187
Tree	return localInstant ( localInstant , text , localInstant ) ;
Code	return localInstant ( localInstant , text , localInstant ) ;
Distance : 5

188
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && extends ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && extends ;
Distance : 6

189
Tree	return localInstant ( localInstant , text , localInstant , iZone ) ;
Code	return localInstant ( localInstant , text , localInstant , iZone ) ;
Distance : 7

190
Tree	return convertLocalToUTC ( localInstant , convertLocalToUTC , false ) ;
Code	return convertLocalToUTC ( localInstant , convertLocalToUTC , false ) ;
Distance : 4

191
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Distance : 4

192
Tree	return iZone . localInstant ( iZone ) ;
Code	return iZone . localInstant ( iZone ) ;
Distance : 6

193
Tree	return iZone . localInstant ( null , localInstant , text , null ) ;
Code	return iZone . localInstant ( null , localInstant , text , null ) ;
Distance : 5

194
Tree	return iZone != null iZone += ;
Code	return iZone != null iZone += ;
Distance : 9

195
Tree	return iZone . convertLocalToUTC ( null , text , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , text , localInstant , null ) ;
Distance : 5

196
Tree	return iZone . localInstant ( localInstant , localInstant , null ) ;
Code	return iZone . localInstant ( localInstant , localInstant , null ) ;
Distance : 3

197
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

198
Tree	return iField != null iZone ? ;
Code	return iField != null iZone ? ;
Distance : 10

199
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && % ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && % ;
Distance : 6

========================================================================


========================================================================
Example Number: 113
Parent Code is: 
long result = iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
long result = iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=long}) (59 (800{val=result}) (204{val==}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=long}) (59 (800{val=result}) (204{val==}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	long result = getType ;
Code	long result = getType ;
Distance : 10

1
Tree	long result = iZone . convertLocalToUTC ( convertLocalToUTC , false ) ;
Code	long result = iZone . convertLocalToUTC ( convertLocalToUTC , false ) ;
Distance : 3

2
Tree	long result = get ;
Code	long result = get ;
Distance : 10

3
Tree	long result = iField . convertLocalToUTC ( this , localInstant ) ;
Code	long result = iField . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

4
Tree	long result = iZone . convertLocalToUTC ( localInstant . get () , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant . get () , NUMBER_CONSTANT ) ;
Distance : 4

5
Tree	long result = localInstant ( localInstant , localInstant , false ) ;
Code	long result = localInstant ( localInstant , localInstant , false ) ;
Distance : 5

6
Tree	long result = iField . convertLocalToUTC ( localInstant ) ;
Code	long result = iField . convertLocalToUTC ( localInstant ) ;
Distance : 5

7
Tree	long result = iZone . localInstant ( localInstant , localInstant ) ;
Code	long result = iZone . localInstant ( localInstant , localInstant ) ;
Distance : 4

8
Tree	double result = iZone ;
Code	double result = iZone ;
Distance : 10

9
Tree	long result = iZone . localInstant ( this , localInstant , NUMBER_CONSTANT ) ;
Code	long result = iZone . localInstant ( this , localInstant , NUMBER_CONSTANT ) ;
Distance : 4

10
Tree	long result = iField . getID ( localInstant , false ) ;
Code	long result = iField . getID ( localInstant , false ) ;
Distance : 4

11
Tree	long result = iZone . localInstant ( this , localInstant ) ;
Code	long result = iZone . localInstant ( this , localInstant ) ;
Distance : 5

12
Tree	long result = iZone . convertLocalToUTC ( localInstant , new get ( localInstant ) ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , new get ( localInstant ) ) ;
Distance : 5

13
Tree	long result = iField . getID ( NUMBER_CONSTANT , localInstant ) ;
Code	long result = iField . getID ( NUMBER_CONSTANT , localInstant ) ;
Distance : 6

14
Tree	long result = iZone . convertLocalToUTC ( localInstant , new IllegalFieldValueException ( localInstant ) ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , new IllegalFieldValueException ( localInstant ) ) ;
Distance : 5

15
Tree	long result = iZone . getID ( localInstant , new Instant ( localInstant ) ) ;
Code	long result = iZone . getID ( localInstant , new Instant ( localInstant ) ) ;
Distance : 6

16
Tree	long result = iZone . convertLocalToUTC ( localInstant . localInstant () , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant . localInstant () , NUMBER_CONSTANT ) ;
Distance : 4

17
Tree	long result = getID ( localInstant , localInstant , Integer , iZone , null ) ;
Code	long result = getID ( localInstant , localInstant , Integer , iZone , null ) ;
Distance : 8

18
Tree	long result = iZone . get ( localInstant , false ) ;
Code	long result = iZone . get ( localInstant , false ) ;
Distance : 3

19
Tree	long result = localInstant ;
Code	long result = localInstant ;
Distance : 9

20
Tree	long result = iZone . localInstant ( localInstant ) ;
Code	long result = iZone . localInstant ( localInstant ) ;
Distance : 5

21
Tree	long result = iZone . convertLocalToUTC ( localInstant , new convertLocalToUTC ( localInstant ) ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , new convertLocalToUTC ( localInstant ) ) ;
Distance : 5

22
Tree	long result = iZone . convertLocalToUTC ( localInstant . getType () , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant . getType () , NUMBER_CONSTANT ) ;
Distance : 4

23
Tree	long result = convertLocalToUTC ( convertLocalToUTC , NUMBER_CONSTANT , iZone , result , iZone , iZone ) ;
Code	long result = convertLocalToUTC ( convertLocalToUTC , NUMBER_CONSTANT , iZone , result , iZone , iZone ) ;
Distance : 10

24
Tree	long result = iZone . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Distance : 3

25
Tree	long result = iZone . get ( NUMBER_CONSTANT , localInstant ) ;
Code	long result = iZone . get ( NUMBER_CONSTANT , localInstant ) ;
Distance : 5

26
Tree	long result = iZone . localInstant ( this , localInstant , get () , iZone ) ;
Code	long result = iZone . localInstant ( this , localInstant , get () , iZone ) ;
Distance : 6

27
Tree	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , value , iZone , iZone ) ;
Code	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , value , iZone , iZone ) ;
Distance : 10

28
Tree	long result = iZone . convertLocalToUTC ( localInstant , iZone ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 3

29
Tree	long result = iZone . localInstant ( localInstant , new Instant ( localInstant ) ) ;
Code	long result = iZone . localInstant ( localInstant , new Instant ( localInstant ) ) ;
Distance : 6

30
Tree	long result = iField . convertLocalToUTC ( localInstant ) ;
Code	long result = iField . convertLocalToUTC ( localInstant ) ;
Distance : 5

31
Tree	long result = convertLocalToUTC ( localInstant , localInstant , value , iZone , null ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , value , iZone , null ) ;
Distance : 8

32
Tree	long result = iZone . localInstant ( localInstant , localInstant ) ;
Code	long result = iZone . localInstant ( localInstant , localInstant ) ;
Distance : 4

33
Tree	long result = convertLocalToUTC ( localInstant , localInstant , getID , iZone , null ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , getID , iZone , null ) ;
Distance : 8

34
Tree	long result = iZone . getID ( localInstant , new localInstant ( localInstant ) ) ;
Code	long result = iZone . getID ( localInstant , new localInstant ( localInstant ) ) ;
Distance : 6

35
Tree	long result = iZone . localInstant ( NUMBER_CONSTANT , localInstant ) ;
Code	long result = iZone . localInstant ( NUMBER_CONSTANT , localInstant ) ;
Distance : 5

36
Tree	long result = convertLocalToUTC ( localInstant , localInstant , get , iZone , null ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , get , iZone , null ) ;
Distance : 8

37
Tree	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , value ) ;
Code	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , value ) ;
Distance : 4

38
Tree	long result = convertLocalToUTC ( localInstant , localInstant , iZone , iZone , null ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , iZone , iZone , null ) ;
Distance : 8

39
Tree	long result = iZone . convertLocalToUTC ( localInstant , new localInstant ( localInstant ) ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , new localInstant ( localInstant ) ) ;
Distance : 5

40
Tree	long result = iZone . getID ( localInstant , localInstant ) ;
Code	long result = iZone . getID ( localInstant , localInstant ) ;
Distance : 4

41
Tree	long result = set ;
Code	long result = set ;
Distance : 10

42
Tree	long result = iZone . convertLocalToUTC ( localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

43
Tree	long result = iZone . convertLocalToUTC ( localInstant , instant ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , instant ) ;
Distance : 2

44
Tree	long result = convertLocalToUTC ( convertLocalToUTC , localInstant , false ) ;
Code	long result = convertLocalToUTC ( convertLocalToUTC , localInstant , false ) ;
Distance : 5

45
Tree	long result = iField . convertLocalToUTC ( localInstant , false ) ;
Code	long result = iField . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

46
Tree	long result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	long result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

47
Tree	long result = iZone . getID ( localInstant ) ;
Code	long result = iZone . getID ( localInstant ) ;
Distance : 5

48
Tree	final long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	final long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

49
Tree	long result = iField . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Code	long result = iField . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Distance : 5

50
Tree	long result = iZone . getID ( this , localInstant , NUMBER_CONSTANT ) ;
Code	long result = iZone . getID ( this , localInstant , NUMBER_CONSTANT ) ;
Distance : 4

51
Tree	long result = iZone . getID ( localInstant ) ;
Code	long result = iZone . getID ( localInstant ) ;
Distance : 5

52
Tree	long result = iZone . convertLocalToUTC ( localInstant , get ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , get ) ;
Distance : 3

53
Tree	long result = iZone . getID ( localInstant ) ;
Code	long result = iZone . getID ( localInstant ) ;
Distance : 5

54
Tree	long result = localInstant ( localInstant , localInstant , Integer , iZone , null ) ;
Code	long result = localInstant ( localInstant , localInstant , Integer , iZone , null ) ;
Distance : 8

55
Tree	long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

56
Tree	long result = iZone . convertLocalToUTC ( localInstant , Integer ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , Integer ) ;
Distance : 3

57
Tree	long result = iZone . getID ( localInstant , get ) ;
Code	long result = iZone . getID ( localInstant , get ) ;
Distance : 4

58
Tree	long result = iZone . getID ( localInstant , Integer ) ;
Code	long result = iZone . getID ( localInstant , Integer ) ;
Distance : 4

59
Tree	final long result = iField . convertLocalToUTC ( localInstant , false ) ;
Code	final long result = iField . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

60
Tree	long result = convertLocalToUTC ( localInstant , localInstant , instant , iZone , null ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , instant , iZone , null ) ;
Distance : 7

61
Tree	long result = iZone . getID ( this , localInstant ) ;
Code	long result = iZone . getID ( this , localInstant ) ;
Distance : 5

62
Tree	final long result = iZone . localInstant ( localInstant , false ) ;
Code	final long result = iZone . localInstant ( localInstant , false ) ;
Distance : 4

63
Tree	final long result = iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Code	final long result = iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 4

64
Tree	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , instant , result , iZone , iZone ) ;
Code	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , instant , result , iZone , iZone ) ;
Distance : 9

65
Tree	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Code	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Distance : 4

66
Tree	long result = convertLocalToUTC ( localInstant , localInstant , result , iZone , null ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , result , iZone , null ) ;
Distance : 8

67
Tree	long result = iZone ;
Code	long result = iZone ;
Distance : 9

68
Tree	long result = iZone . localInstant ( localInstant ) ;
Code	long result = iZone . localInstant ( localInstant ) ;
Distance : 5

69
Tree	long result = iField . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Code	long result = iField . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Distance : 4

70
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , Integer , convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , Integer , convertLocalToUTC () ) ;
Distance : 5

71
Tree	long result = iField . getID ( localInstant ) ;
Code	long result = iField . getID ( localInstant ) ;
Distance : 6

72
Tree	long result = iZone . convertLocalToUTC ( this , convertLocalToUTC , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( this , convertLocalToUTC , NUMBER_CONSTANT ) ;
Distance : 3

73
Tree	long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

74
Tree	long result = localInstant ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , iZone ) ;
Code	long result = localInstant ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , iZone ) ;
Distance : 11

75
Tree	long result = iZone . convertLocalToUTC ( localInstant , new Instant ( localInstant ) ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , new Instant ( localInstant ) ) ;
Distance : 5

76
Tree	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , Integer ) ;
Code	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , Integer ) ;
Distance : 4

77
Tree	long result = iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Code	long result = iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 5

78
Tree	long result = iZone . getID ( localInstant , new get ( localInstant ) ) ;
Code	long result = iZone . getID ( localInstant , new get ( localInstant ) ) ;
Distance : 6

79
Tree	long result = iZone . convertLocalToUTC ( get ) ;
Code	long result = iZone . convertLocalToUTC ( get ) ;
Distance : 5

80
Tree	long result = iField . getID ( localInstant ) ;
Code	long result = iField . getID ( localInstant ) ;
Distance : 6

81
Tree	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Distance : 4

82
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 3

83
Tree	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iField , result , iZone , iZone ) ;
Code	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iField , result , iZone , iZone ) ;
Distance : 10

84
Tree	long result = iField ;
Code	long result = iField ;
Distance : 10

85
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , Integer , localInstant () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , Integer , localInstant () ) ;
Distance : 5

86
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , getID () , iZone ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , getID () , iZone ) ;
Distance : 5

87
Tree	long result = iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Code	long result = iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 5

88
Tree	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , Integer , iZone , iZone ) ;
Code	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , Integer , iZone , iZone ) ;
Distance : 10

89
Tree	long result = iZone . getID ( localInstant . get () , NUMBER_CONSTANT ) ;
Code	long result = iZone . getID ( localInstant . get () , NUMBER_CONSTANT ) ;
Distance : 5

90
Tree	long result = iField . getID ( this , localInstant ) ;
Code	long result = iField . getID ( this , localInstant ) ;
Distance : 6

91
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , localInstant () , iZone ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , localInstant () , iZone ) ;
Distance : 5

92
Tree	long result = convertLocalToUTC ( localInstant , value , false ) ;
Code	long result = convertLocalToUTC ( localInstant , value , false ) ;
Distance : 4

93
Tree	long result = iZone . getID ( localInstant , false ) ;
Code	long result = iZone . getID ( localInstant , false ) ;
Distance : 3

94
Tree	long result = iZone . localInstant ( localInstant , new localInstant ( localInstant ) ) ;
Code	long result = iZone . localInstant ( localInstant , new localInstant ( localInstant ) ) ;
Distance : 6

95
Tree	long result = convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

96
Tree	long result = iZone . getID ( NUMBER_CONSTANT , localInstant ) ;
Code	long result = iZone . getID ( NUMBER_CONSTANT , localInstant ) ;
Distance : 5

97
Tree	long result = iZone . convertLocalToUTC ( this , value , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( this , value , NUMBER_CONSTANT ) ;
Distance : 3

98
Tree	long result = iZone . iZone ( localInstant ) ;
Code	long result = iZone . iZone ( localInstant ) ;
Distance : 5

99
Tree	long result = iZone . getID ( localInstant , localInstant , Integer , convertLocalToUTC () ) ;
Code	long result = iZone . getID ( localInstant , localInstant , Integer , convertLocalToUTC () ) ;
Distance : 6

100
Tree	final long result = iZone . get ( localInstant , false ) ;
Code	final long result = iZone . get ( localInstant , false ) ;
Distance : 4

101
Tree	long result = iField . getID ( this , localInstant , NUMBER_CONSTANT ) ;
Code	long result = iField . getID ( this , localInstant , NUMBER_CONSTANT ) ;
Distance : 5

102
Tree	boolean result = iZone ;
Code	boolean result = iZone ;
Distance : 10

103
Tree	long result = iZone . getID ( this , localInstant , get () , iZone ) ;
Code	long result = iZone . getID ( this , localInstant , get () , iZone ) ;
Distance : 6

104
Tree	long result = iZone . localInstant ( localInstant . localInstant () , NUMBER_CONSTANT ) ;
Code	long result = iZone . localInstant ( localInstant . localInstant () , NUMBER_CONSTANT ) ;
Distance : 5

105
Tree	long result = iField . convertLocalToUTC ( this , localInstant , get () , iZone ) ;
Code	long result = iField . convertLocalToUTC ( this , localInstant , get () , iZone ) ;
Distance : 6

106
Tree	long result = iZone . convertLocalToUTC ( localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

107
Tree	long result = iZone . convertLocalToUTC ( localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

108
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , Integer , getID () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , Integer , getID () ) ;
Distance : 5

109
Tree	long result = iZone . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Distance : 3

110
Tree	final long result = iZone . convertLocalToUTC ( localInstant , get ) ;
Code	final long result = iZone . convertLocalToUTC ( localInstant , get ) ;
Distance : 4

111
Tree	long result = iField . getID ( localInstant , localInstant ) ;
Code	long result = iField . getID ( localInstant , localInstant ) ;
Distance : 5

112
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , convertLocalToUTC () ) ;
Distance : 5

113
Tree	long result = iZone . getID ( localInstant , value ) ;
Code	long result = iZone . getID ( localInstant , value ) ;
Distance : 4

114
Tree	long result = iZone . getID ( get ) ;
Code	long result = iZone . getID ( get ) ;
Distance : 6

115
Tree	long result = iZone . localInstant ( localInstant . get () , NUMBER_CONSTANT ) ;
Code	long result = iZone . localInstant ( localInstant . get () , NUMBER_CONSTANT ) ;
Distance : 5

116
Tree	long result = getID ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , iZone ) ;
Code	long result = getID ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , iZone ) ;
Distance : 11

117
Tree	final long result = iField . localInstant ( localInstant , false ) ;
Code	final long result = iField . localInstant ( localInstant , false ) ;
Distance : 5

118
Tree	long result = getID ( localInstant , localInstant , false ) ;
Code	long result = getID ( localInstant , localInstant , false ) ;
Distance : 5

119
Tree	long result = iField . localInstant ( localInstant , false ) ;
Code	long result = iField . localInstant ( localInstant , false ) ;
Distance : 4

120
Tree	long result = iZone . get ( this , localInstant , NUMBER_CONSTANT ) ;
Code	long result = iZone . get ( this , localInstant , NUMBER_CONSTANT ) ;
Distance : 4

121
Tree	long result = iZone . localInstant ( localInstant ) ;
Code	long result = iZone . localInstant ( localInstant ) ;
Distance : 5

122
Tree	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , iZone ) ;
Code	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , iZone ) ;
Distance : 10

123
Tree	long result = iZone . convertLocalToUTC ( localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

124
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Distance : 3

125
Tree	long result = convertLocalToUTC ( localInstant , Integer , false ) ;
Code	long result = convertLocalToUTC ( localInstant , Integer , false ) ;
Distance : 4

126
Tree	long result = iZone . convertLocalToUTC ( this , convertLocalToUTC ) ;
Code	long result = iZone . convertLocalToUTC ( this , convertLocalToUTC ) ;
Distance : 4

127
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , getType () , iZone ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , getType () , iZone ) ;
Distance : 5

128
Tree	long result = iZone . convertLocalToUTC ( this , instant , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( this , instant , NUMBER_CONSTANT ) ;
Distance : 3

129
Tree	final long result = iZone . getID ( localInstant , false ) ;
Code	final long result = iZone . getID ( localInstant , false ) ;
Distance : 4

130
Tree	long result = iZone . convertLocalToUTC ( iZone ) ;
Code	long result = iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

131
Tree	final long result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	final long result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 4

132
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , get () , iZone ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , get () , iZone ) ;
Distance : 5

133
Tree	long result = convertLocalToUTC ( localInstant , localInstant , localInstant , iZone , null ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , localInstant , iZone , null ) ;
Distance : 8

134
Tree	long result = iZone . getID ( localInstant , localInstant ) ;
Code	long result = iZone . getID ( localInstant , localInstant ) ;
Distance : 4

135
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 3

136
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , iZone ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , iZone ) ;
Distance : 5

137
Tree	long result = iZone . convertLocalToUTC ( localInstant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Distance : 4

138
Tree	long result = convertLocalToUTC ( localInstant , convertLocalToUTC , false ) ;
Code	long result = convertLocalToUTC ( localInstant , convertLocalToUTC , false ) ;
Distance : 4

139
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , get () , localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , get () , localInstant ) ;
Distance : 5

140
Tree	long result = iZone . convertLocalToUTC ( localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

141
Tree	long result = iZone . get ( localInstant ) ;
Code	long result = iZone . get ( localInstant ) ;
Distance : 5

142
Tree	long result = iZone . convertLocalToUTC ( this , iZone , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( this , iZone , NUMBER_CONSTANT ) ;
Distance : 3

143
Tree	long result = instant ;
Code	long result = instant ;
Distance : 9

144
Tree	long result = iZone . localInstant ( localInstant , false ) ;
Code	long result = iZone . localInstant ( localInstant , false ) ;
Distance : 3

145
Tree	long result = iZone . convertLocalToUTC ( this , value ) ;
Code	long result = iZone . convertLocalToUTC ( this , value ) ;
Distance : 4

146
Tree	long result = convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

147
Tree	long result = convertLocalToUTC ( localInstant , localInstant , Integer , iZone , null ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , Integer , iZone , null ) ;
Distance : 8

148
Tree	final long result = iZone . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Code	final long result = iZone . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Distance : 4

149
Tree	long result = iZone . convertLocalToUTC ( localInstant , value ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , value ) ;
Distance : 3

150
Tree	final long result = iZone . getID ( localInstant , Integer ) ;
Code	final long result = iZone . getID ( localInstant , Integer ) ;
Distance : 5

151
Tree	final long result = iZone . convertLocalToUTC ( localInstant , Integer ) ;
Code	final long result = iZone . convertLocalToUTC ( localInstant , Integer ) ;
Distance : 4

152
Tree	long result = convertLocalToUTC ( localInstant , result , false ) ;
Code	long result = convertLocalToUTC ( localInstant , result , false ) ;
Distance : 4

153
Tree	final long result = iZone . localInstant ( localInstant , localInstant ) ;
Code	final long result = iZone . localInstant ( localInstant , localInstant ) ;
Distance : 5

154
Tree	long result = iZone . convertLocalToUTC ( this , convertLocalToUTC , get () , iZone ) ;
Code	long result = iZone . convertLocalToUTC ( this , convertLocalToUTC , get () , iZone ) ;
Distance : 6

155
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , Integer , iZone . localInstant () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , Integer , iZone . localInstant () ) ;
Distance : 7

156
Tree	long result = iZone . getID ( localInstant . localInstant () , NUMBER_CONSTANT ) ;
Code	long result = iZone . getID ( localInstant . localInstant () , NUMBER_CONSTANT ) ;
Distance : 5

157
Tree	long result = iZone . getID ( localInstant , localInstant , Integer , iZone . convertLocalToUTC () ) ;
Code	long result = iZone . getID ( localInstant , localInstant , Integer , iZone . convertLocalToUTC () ) ;
Distance : 8

158
Tree	long result = iZone . convertLocalToUTC ( iZone ) ;
Code	long result = iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

159
Tree	long result = iField . localInstant ( localInstant ) ;
Code	long result = iField . localInstant ( localInstant ) ;
Distance : 6

160
Tree	long result = iZone . getID ( localInstant , localInstant , Integer , getID () ) ;
Code	long result = iZone . getID ( localInstant , localInstant , Integer , getID () ) ;
Distance : 6

161
Tree	long result = iField . getID ( localInstant ) ;
Code	long result = iField . getID ( localInstant ) ;
Distance : 6

162
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , Integer , iZone . getID () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , Integer , iZone . getID () ) ;
Distance : 7

163
Tree	long result = iField . convertLocalToUTC ( localInstant ) ;
Code	long result = iField . convertLocalToUTC ( localInstant ) ;
Distance : 5

164
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , iZone . convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , iZone . convertLocalToUTC () ) ;
Distance : 7

165
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , getID () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , getID () ) ;
Distance : 5

166
Tree	long result = iZone . getID ( convertLocalToUTC ) ;
Code	long result = iZone . getID ( convertLocalToUTC ) ;
Distance : 6

167
Tree	long result = iZone . getID ( localInstant , localInstant , Integer , iZone . getID () ) ;
Code	long result = iZone . getID ( localInstant , localInstant , Integer , iZone . getID () ) ;
Distance : 8

168
Tree	long result = iField . convertLocalToUTC ( localInstant . get () , NUMBER_CONSTANT ) ;
Code	long result = iField . convertLocalToUTC ( localInstant . get () , NUMBER_CONSTANT ) ;
Distance : 5

169
Tree	long result = iZone . get ( this , localInstant ) ;
Code	long result = iZone . get ( this , localInstant ) ;
Distance : 5

170
Tree	final long result = iZone . getID ( localInstant , localInstant ) ;
Code	final long result = iZone . getID ( localInstant , localInstant ) ;
Distance : 5

171
Tree	long result = iZone . getID ( localInstant , localInstant , Integer , localInstant () ) ;
Code	long result = iZone . getID ( localInstant , localInstant , Integer , localInstant () ) ;
Distance : 6

172
Tree	long result = iZone . convertLocalToUTC ( this , iZone ) ;
Code	long result = iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 4

173
Tree	long result = iZone . convertLocalToUTC ( localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

174
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , iZone , convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , iZone , convertLocalToUTC () ) ;
Distance : 5

175
Tree	long result = iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Code	long result = iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 5

176
Tree	long result = iZone . convertLocalToUTC ( this , instant ) ;
Code	long result = iZone . convertLocalToUTC ( this , instant ) ;
Distance : 3

177
Tree	final long result = iField . getID ( localInstant , false ) ;
Code	final long result = iField . getID ( localInstant , false ) ;
Distance : 5

178
Tree	long result = iZone . convertLocalToUTC ( this , localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

179
Tree	long result = iField . convertLocalToUTC ( localInstant , localInstant ) ;
Code	long result = iField . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 4

180
Tree	long result = DateTimeFormat ;
Code	long result = DateTimeFormat ;
Distance : 10

181
Tree	public long result = iZone . getID ( localInstant , false ) ;
Code	public long result = iZone . getID ( localInstant , false ) ;
Distance : 4

182
Tree	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , convertLocalToUTC ) ;
Code	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , convertLocalToUTC ) ;
Distance : 4

183
Tree	long result = iZone . convertLocalToUTC ( localInstant . value () , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant . value () , NUMBER_CONSTANT ) ;
Distance : 4

184
Tree	final long result = iZone . convertLocalToUTC ( localInstant , iZone ) ;
Code	final long result = iZone . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 4

185
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , Integer , iZone . convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , Integer , iZone . convertLocalToUTC () ) ;
Distance : 7

186
Tree	long result = convertLocalToUTC ( localInstant , iZone , false ) ;
Code	long result = convertLocalToUTC ( localInstant , iZone , false ) ;
Distance : 4

187
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , iZone , iZone . convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , iZone , iZone . convertLocalToUTC () ) ;
Distance : 7

188
Tree	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , iZone ) ;
Code	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , iZone ) ;
Distance : 10

189
Tree	long result = iZone . localInstant ( localInstant , localInstant , Integer , convertLocalToUTC () ) ;
Code	long result = iZone . localInstant ( localInstant , localInstant , Integer , convertLocalToUTC () ) ;
Distance : 6

190
Tree	long result = iZone . convertLocalToUTC ( localInstant , Integer ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , Integer ) ;
Distance : 3

191
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , iZone . getID () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , iZone . getID () ) ;
Distance : 7

192
Tree	long result = localInstant ( localInstant , NUMBER_CONSTANT , iZone , Integer , iZone , iZone ) ;
Code	long result = localInstant ( localInstant , NUMBER_CONSTANT , iZone , Integer , iZone , iZone ) ;
Distance : 11

193
Tree	long result = iZone . convertLocalToUTC ( localInstant , iZone ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 3

194
Tree	final long result = iZone . convertLocalToUTC ( localInstant , instant ) ;
Code	final long result = iZone . convertLocalToUTC ( localInstant , instant ) ;
Distance : 3

195
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , iZone , iZone . getID () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , iZone , iZone . getID () ) ;
Distance : 7

196
Tree	long result = iField . localInstant ( localInstant ) ;
Code	long result = iField . localInstant ( localInstant ) ;
Distance : 6

197
Tree	final long result = iZone . getID ( localInstant , get ) ;
Code	final long result = iZone . getID ( localInstant , get ) ;
Distance : 5

198
Tree	long result = iZone . localInstant ( localInstant , localInstant , Integer , iZone . convertLocalToUTC () ) ;
Code	long result = iZone . localInstant ( localInstant , localInstant , Integer , iZone . convertLocalToUTC () ) ;
Distance : 8

199
Tree	public long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	public long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

========================================================================


========================================================================
Example Number: 114
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

1
Tree	return iField . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iField . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

2
Tree	return NUMBER_CONSTANT / instant ;
Code	return NUMBER_CONSTANT / instant ;
Distance : 9

3
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Distance : 2

4
Tree	return addWrapField ( localInstant , value , false ) ;
Code	return addWrapField ( localInstant , value , false ) ;
Distance : 5

5
Tree	return iZone . iZone ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . iZone ( STRING_CONSTANT , localInstant ) ;
Distance : 5

6
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , value ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , value ) ;
Distance : 4

7
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , value ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , value ) ;
Distance : 9

8
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

9
Tree	return iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Code	return iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 5

10
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Distance : 4

11
Tree	return ! iZone && ! iField . convertLocalToUTC () ;
Code	return ! iZone && ! iField . convertLocalToUTC () ;
Distance : 10

12
Tree	return convertLocalToUTC ( iZone , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( iZone , STRING_CONSTANT , iZone ) ;
Distance : 5

13
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

14
Tree	return addWrapField ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return addWrapField ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 5

15
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , offset ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , offset ) ;
Distance : 9

16
Tree	return ! iZone && ! iZone . localInstant () ;
Code	return ! iZone && ! iZone . localInstant () ;
Distance : 10

17
Tree	return NUMBER_CONSTANT / addWrapField ;
Code	return NUMBER_CONSTANT / addWrapField ;
Distance : 10

18
Tree	return localInstant ( localInstant , STRING_CONSTANT , iField ) ;
Code	return localInstant ( localInstant , STRING_CONSTANT , iField ) ;
Distance : 5

19
Tree	return iZone . iZone ( localInstant , false ) ;
Code	return iZone . iZone ( localInstant , false ) ;
Distance : 3

20
Tree	return ! iField && ! iZone . addWrapField () ;
Code	return ! iField && ! iZone . addWrapField () ;
Distance : 10

21
Tree	return ( ( localInstant ) localInstant ) . addWrapField ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . addWrapField ( localInstant , localInstant ) ;
Distance : 10

22
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

23
Tree	return ( ( localInstant ) this ) . addWrapField ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . addWrapField ( localInstant , iZone ) ;
Distance : 10

24
Tree	return iZone . addWrapField ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . addWrapField ( STRING_CONSTANT , localInstant ) ;
Distance : 5

25
Tree	return iZone . localInstant ( localInstant ) ;
Code	return iZone . localInstant ( localInstant ) ;
Distance : 5

26
Tree	return iZone . localInstant ( null , localInstant , localInstant , null ) ;
Code	return iZone . localInstant ( null , localInstant , localInstant , null ) ;
Distance : 5

27
Tree	return iField != iZone ;
Code	return iField != iZone ;
Distance : 10

28
Tree	return iZone . iZone ( localInstant ) ;
Code	return iZone . iZone ( localInstant ) ;
Distance : 5

29
Tree	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Distance : 2

30
Tree	return iZone . addWrapField ( localInstant , iZone , null ) ;
Code	return iZone . addWrapField ( localInstant , iZone , null ) ;
Distance : 3

31
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Distance : 4

32
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

33
Tree	return iZone . localInstant ( localInstant , value , null ) ;
Code	return iZone . localInstant ( localInstant , value , null ) ;
Distance : 3

34
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

35
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

36
Tree	return addWrapField ( localInstant , value ) ;
Code	return addWrapField ( localInstant , value ) ;
Distance : 6

37
Tree	return localInstant ( localInstant , iZone , false ) ;
Code	return localInstant ( localInstant , iZone , false ) ;
Distance : 5

38
Tree	return ! iZone . addWrapField ( localInstant ) && <= ;
Code	return ! iZone . addWrapField ( localInstant ) && <= ;
Distance : 7

39
Tree	return iZone . addWrapField ( localInstant ) ;
Code	return iZone . addWrapField ( localInstant ) ;
Distance : 5

40
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , value ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , value ) ;
Distance : 9

41
Tree	return iZone . convertLocalToUTC ( this , value ) ;
Code	return iZone . convertLocalToUTC ( this , value ) ;
Distance : 4

42
Tree	return iZone . convertLocalToUTC ( iZone ) ;
Code	return iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

43
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

44
Tree	return iZone . addWrapField ( null , localInstant , localInstant , null ) ;
Code	return iZone . addWrapField ( null , localInstant , localInstant , null ) ;
Distance : 5

45
Tree	return iField . convertLocalToUTC ( this , localInstant ) ;
Code	return iField . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

46
Tree	return iZone != iField ;
Code	return iZone != iField ;
Distance : 9

47
Tree	return convertLocalToUTC ( localInstant , instant , false ) ;
Code	return convertLocalToUTC ( localInstant , instant , false ) ;
Distance : 4

48
Tree	return iZone != addWrapField ;
Code	return iZone != addWrapField ;
Distance : 9

49
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && extends ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && extends ;
Distance : 6

50
Tree	return iZone . convertLocalToUTC ( convertLocalToUTC , false ) ;
Code	return iZone . convertLocalToUTC ( convertLocalToUTC , false ) ;
Distance : 3

51
Tree	return ! iField && ! iZone . convertLocalToUTC () ;
Code	return ! iField && ! iZone . convertLocalToUTC () ;
Distance : 10

52
Tree	return NUMBER_CONSTANT / value ;
Code	return NUMBER_CONSTANT / value ;
Distance : 10

53
Tree	return localInstant ( localInstant , value ) ;
Code	return localInstant ( localInstant , value ) ;
Distance : 6

54
Tree	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , localInstant ) ;
Distance : 10

55
Tree	return localInstant ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return localInstant ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 5

56
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

57
Tree	return iZone . localInstant ( localInstant ) ;
Code	return iZone . localInstant ( localInstant ) ;
Distance : 5

58
Tree	return iZone != localInstant ;
Code	return iZone != localInstant ;
Distance : 8

59
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

60
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

61
Tree	return NUMBER_CONSTANT / offset ;
Code	return NUMBER_CONSTANT / offset ;
Distance : 10

62
Tree	return iZone . convertLocalToUTC ( addWrapField , false ) ;
Code	return iZone . convertLocalToUTC ( addWrapField , false ) ;
Distance : 3

63
Tree	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Distance : 4

64
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

65
Tree	return ! iField && ! iZone . localInstant () ;
Code	return ! iField && ! iZone . localInstant () ;
Distance : 10

66
Tree	return iZone . localInstant ( localInstant , false ) ;
Code	return iZone . localInstant ( localInstant , false ) ;
Distance : 3

67
Tree	return localInstant ( localInstant , localInstant , localInstant ) ;
Code	return localInstant ( localInstant , localInstant , localInstant ) ;
Distance : 5

68
Tree	return iZone . convertLocalToUTC ( this , convertLocalToUTC ) ;
Code	return iZone . convertLocalToUTC ( this , convertLocalToUTC ) ;
Distance : 4

69
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

70
Tree	return ! iZone && ! iField . addWrapField () ;
Code	return ! iZone && ! iField . addWrapField () ;
Distance : 10

71
Tree	return ( ( localInstant ) this ) . localInstant ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . localInstant ( localInstant , iZone ) ;
Distance : 10

72
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

73
Tree	return convertLocalToUTC ( localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , false ) ;
Distance : 4

74
Tree	return iZone != iField ;
Code	return iZone != iField ;
Distance : 9

75
Tree	return localInstant ( localInstant , iZone ) ;
Code	return localInstant ( localInstant , iZone ) ;
Distance : 6

76
Tree	return addWrapField ( localInstant , localInstant , false ) ;
Code	return addWrapField ( localInstant , localInstant , false ) ;
Distance : 5

77
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

78
Tree	return ! iZone . addWrapField ( localInstant ) && : ;
Code	return ! iZone . addWrapField ( localInstant ) && : ;
Distance : 7

79
Tree	return convertLocalToUTC ( localInstant , value ) ;
Code	return convertLocalToUTC ( localInstant , value ) ;
Distance : 5

80
Tree	return localInstant ( localInstant , localInstant , false ) ;
Code	return localInstant ( localInstant , localInstant , false ) ;
Distance : 5

81
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , addWrapField ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , addWrapField ) ;
Distance : 4

82
Tree	return iZone . convertLocalToUTC ( this , addWrapField ) ;
Code	return iZone . convertLocalToUTC ( this , addWrapField ) ;
Distance : 4

83
Tree	return iZone . iZone ( this , localInstant ) ;
Code	return iZone . iZone ( this , localInstant ) ;
Distance : 5

84
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Distance : 6

85
Tree	return convertLocalToUTC ( localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone ) ;
Distance : 5

86
Tree	return iZone != null iZone ? ;
Code	return iZone != null iZone ? ;
Distance : 9

87
Tree	return iField . convertLocalToUTC ( localInstant ) ;
Code	return iField . convertLocalToUTC ( localInstant ) ;
Distance : 5

88
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Distance : 6

89
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Distance : 6

90
Tree	return convertLocalToUTC ( localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , instant ) ;
Distance : 4

91
Tree	return localInstant ( localInstant , localInstant ) ;
Code	return localInstant ( localInstant , localInstant ) ;
Distance : 6

92
Tree	return addWrapField ( localInstant , localInstant ) ;
Code	return addWrapField ( localInstant , localInstant ) ;
Distance : 6

93
Tree	return iZone . iZone ( localInstant ) ;
Code	return iZone . iZone ( localInstant ) ;
Distance : 5

94
Tree	return localInstant != iZone ;
Code	return localInstant != iZone ;
Distance : 9

95
Tree	return iZone . addWrapField ( localInstant , false ) ;
Code	return iZone . addWrapField ( localInstant , false ) ;
Distance : 3

96
Tree	return ! iZone && ! iZone . iZone () ;
Code	return ! iZone && ! iZone . iZone () ;
Distance : 10

97
Tree	return iZone . localInstant ( this , value ) ;
Code	return iZone . localInstant ( this , value ) ;
Distance : 5

98
Tree	return iZone . localInstant ( localInstant , localInstant , null ) ;
Code	return iZone . localInstant ( localInstant , localInstant , null ) ;
Distance : 3

99
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

100
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Distance : 9

101
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

102
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iField ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iField ) ;
Distance : 4

103
Tree	return iZone != addWrapField ;
Code	return iZone != addWrapField ;
Distance : 9

104
Tree	return iField . localInstant ( localInstant , false ) ;
Code	return iField . localInstant ( localInstant , false ) ;
Distance : 4

105
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , convertLocalToUTC ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , convertLocalToUTC ) ;
Distance : 4

106
Tree	return iZone . convertLocalToUTC ( localInstant , offset , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , offset , null ) ;
Distance : 2

107
Tree	return iZone != convertLocalToUTC ;
Code	return iZone != convertLocalToUTC ;
Distance : 8

108
Tree	return iField . convertLocalToUTC ( localInstant ) ;
Code	return iField . convertLocalToUTC ( localInstant ) ;
Distance : 5

109
Tree	return addWrapField != iZone ;
Code	return addWrapField != iZone ;
Distance : 10

110
Tree	return ( ( localInstant ) this ) . addWrapField ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . addWrapField ( localInstant , localInstant ) ;
Distance : 10

111
Tree	return convertLocalToUTC ( convertLocalToUTC , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( convertLocalToUTC , STRING_CONSTANT , iZone ) ;
Distance : 5

112
Tree	return convertLocalToUTC ( addWrapField , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( addWrapField , STRING_CONSTANT , iZone ) ;
Distance : 5

113
Tree	return NUMBER_CONSTANT / localInstant ;
Code	return NUMBER_CONSTANT / localInstant ;
Distance : 9

114
Tree	return iZone != instant ;
Code	return iZone != instant ;
Distance : 8

115
Tree	return ( ( localInstant ) this ) . localInstant ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . localInstant ( localInstant , localInstant ) ;
Distance : 10

116
Tree	return iField != iField ;
Code	return iField != iField ;
Distance : 10

117
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && % ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && % ;
Distance : 6

118
Tree	return iZone ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return iZone ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

119
Tree	return ( ( localInstant ) localInstant ) . addWrapField ( localInstant , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . addWrapField ( localInstant , iZone ) ;
Distance : 10

120
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

121
Tree	return ! iZone . addWrapField ( localInstant ) && ^ ;
Code	return ! iZone . addWrapField ( localInstant ) && ^ ;
Distance : 7

122
Tree	return iField . localInstant ( localInstant ) ;
Code	return iField . localInstant ( localInstant ) ;
Distance : 6

123
Tree	return iZone . convertLocalToUTC ( localInstant , value , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , value , null ) ;
Distance : 2

124
Tree	return iField . localInstant ( localInstant ) ;
Code	return iField . localInstant ( localInstant ) ;
Distance : 6

125
Tree	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Distance : 2

126
Tree	return localInstant ( localInstant , localInstant , localInstant , iZone ) ;
Code	return localInstant ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

127
Tree	return convertLocalToUTC ( localInstant , value , false ) ;
Code	return convertLocalToUTC ( localInstant , value , false ) ;
Distance : 4

128
Tree	return iZone . localInstant ( this , localInstant ) ;
Code	return iZone . localInstant ( this , localInstant ) ;
Distance : 5

129
Tree	return iZone . addWrapField ( localInstant , localInstant , null ) ;
Code	return iZone . addWrapField ( localInstant , localInstant , null ) ;
Distance : 3

130
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

131
Tree	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , iZone ) ;
Distance : 10

132
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

133
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

134
Tree	return convertLocalToUTC ( localInstant , offset , false ) ;
Code	return convertLocalToUTC ( localInstant , offset , false ) ;
Distance : 4

135
Tree	return instant != iZone ;
Code	return instant != iZone ;
Distance : 10

136
Tree	return ! iZone && ! iZone . addWrapField () ;
Code	return ! iZone && ! iZone . addWrapField () ;
Distance : 10

137
Tree	return iZone . convertLocalToUTC ( null , localInstant , offset , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , offset , null ) ;
Distance : 4

138
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

139
Tree	return convertLocalToUTC ( localInstant , localInstant , convertLocalToUTC ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , convertLocalToUTC ) ;
Distance : 4

140
Tree	return iZone . localInstant ( null , localInstant , iZone , null ) ;
Code	return iZone . localInstant ( null , localInstant , iZone , null ) ;
Distance : 5

141
Tree	return iField . localInstant ( STRING_CONSTANT , localInstant ) ;
Code	return iField . localInstant ( STRING_CONSTANT , localInstant ) ;
Distance : 6

142
Tree	return iZone . localInstant ( localInstant , iZone , null ) ;
Code	return iZone . localInstant ( localInstant , iZone , null ) ;
Distance : 3

143
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

144
Tree	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Distance : 5

145
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

146
Tree	return convertLocalToUTC ( localInstant , value , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , value , localInstant ) ;
Distance : 4

147
Tree	return localInstant ( localInstant , localInstant , iZone ) ;
Code	return localInstant ( localInstant , localInstant , iZone ) ;
Distance : 5

148
Tree	return iZone . convertLocalToUTC ( null , localInstant , value , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , value , null ) ;
Distance : 4

149
Tree	return convertLocalToUTC ( localInstant , localInstant , convertLocalToUTC , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , convertLocalToUTC , iZone ) ;
Distance : 6

150
Tree	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Distance : 4

151
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

152
Tree	return iField != iZone ;
Code	return iField != iZone ;
Distance : 10

153
Tree	return convertLocalToUTC ( localInstant , localInstant , offset , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , offset , iZone ) ;
Distance : 6

154
Tree	return iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Code	return iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 5

155
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Distance : 4

156
Tree	return NUMBER_CONSTANT / iField ;
Code	return NUMBER_CONSTANT / iField ;
Distance : 10

157
Tree	return ! iZone . localInstant ( localInstant ) && <= ;
Code	return ! iZone . localInstant ( localInstant ) && <= ;
Distance : 7

158
Tree	return iZone . addWrapField ( null , localInstant , iZone , null ) ;
Code	return iZone . addWrapField ( null , localInstant , iZone , null ) ;
Distance : 5

159
Tree	return convertLocalToUTC ( localInstant , value , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , value , localInstant , iZone ) ;
Distance : 6

160
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Distance : 6

161
Tree	return iZone . localInstant ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . localInstant ( STRING_CONSTANT , localInstant ) ;
Distance : 5

162
Tree	return iField . convertLocalToUTC ( localInstant , false ) ;
Code	return iField . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

163
Tree	return convertLocalToUTC ( localInstant , localInstant , offset ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , offset ) ;
Distance : 4

164
Tree	return iZone . convertLocalToUTC ( iZone ) ;
Code	return iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

165
Tree	return iZone != null iZone instanceof ;
Code	return iZone != null iZone instanceof ;
Distance : 9

166
Tree	return convertLocalToUTC ( localInstant , value , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , value , iZone , iZone ) ;
Distance : 6

167
Tree	return iZone != null iZone / ;
Code	return iZone != null iZone / ;
Distance : 9

168
Tree	return iZone != null iZone <> ;
Code	return iZone != null iZone <> ;
Distance : 9

169
Tree	return convertLocalToUTC ( localInstant , offset ) ;
Code	return convertLocalToUTC ( localInstant , offset ) ;
Distance : 5

170
Tree	return addWrapField ( localInstant , localInstant , localInstant , iZone ) ;
Code	return addWrapField ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

171
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

172
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Distance : 6

173
Tree	return NUMBER_CONSTANT / convertLocalToUTC ;
Code	return NUMBER_CONSTANT / convertLocalToUTC ;
Distance : 9

174
Tree	return iZone != null iZone extends ;
Code	return iZone != null iZone extends ;
Distance : 9

175
Tree	return iZone != instant ;
Code	return iZone != instant ;
Distance : 8

176
Tree	return iZone != localInstant ;
Code	return iZone != localInstant ;
Distance : 8

177
Tree	return iZone . localInstant ( iZone ) ;
Code	return iZone . localInstant ( iZone ) ;
Distance : 6

178
Tree	return iZone != null iZone & ;
Code	return iZone != null iZone & ;
Distance : 9

179
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

180
Tree	return iZone != null iZone throws ;
Code	return iZone != null iZone throws ;
Distance : 9

181
Tree	return localInstant != iZone ;
Code	return localInstant != iZone ;
Distance : 9

182
Tree	return iZone . addWrapField ( this , localInstant ) ;
Code	return iZone . addWrapField ( this , localInstant ) ;
Distance : 5

183
Tree	return iZone . addWrapField ( localInstant ) ;
Code	return iZone . addWrapField ( localInstant ) ;
Distance : 5

184
Tree	return addWrapField ( localInstant , localInstant , localInstant ) ;
Code	return addWrapField ( localInstant , localInstant , localInstant ) ;
Distance : 5

185
Tree	return localInstant ( localInstant , value , false ) ;
Code	return localInstant ( localInstant , value , false ) ;
Distance : 5

186
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , offset ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , offset ) ;
Distance : 9

187
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Distance : 9

188
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

189
Tree	return iZone != offset ;
Code	return iZone != offset ;
Distance : 9

190
Tree	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Distance : 4

191
Tree	return convertLocalToUTC ( localInstant , value , iZone ) ;
Code	return convertLocalToUTC ( localInstant , value , iZone ) ;
Distance : 4

192
Tree	return iZone != null iZone + ;
Code	return iZone != null iZone + ;
Distance : 9

193
Tree	return iZone != null return += ;
Code	return iZone != null return += ;
Distance : 9

194
Tree	return iField != null iZone ? ;
Code	return iField != null iZone ? ;
Distance : 10

195
Tree	return localInstant ( localInstant , localInstant , iZone , iZone ) ;
Code	return localInstant ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

196
Tree	return iZone . convertLocalToUTC ( addWrapField ) ;
Code	return iZone . convertLocalToUTC ( addWrapField ) ;
Distance : 5

197
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

198
Tree	return NUMBER_CONSTANT / iZone ; wanted
Code	return NUMBER_CONSTANT / iZone ; wanted
Distance : 11

199
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

========================================================================


========================================================================
Example Number: 115
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

1
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

2
Tree	return localInstant ( localInstant , iZone ) ;
Code	return localInstant ( localInstant , iZone ) ;
Distance : 6

3
Tree	return convertLocalToUTC ( localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , instant ) ;
Distance : 4

4
Tree	return iZone . iZone ( localInstant ) ;
Code	return iZone . iZone ( localInstant ) ;
Distance : 5

5
Tree	return ! iZone && ! iZone . iZone () ;
Code	return ! iZone && ! iZone . iZone () ;
Distance : 10

6
Tree	return ! iZone . localInstant ( localInstant ) && & ;
Code	return ! iZone . localInstant ( localInstant ) && & ;
Distance : 7

7
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , convertLocalToUTC ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , convertLocalToUTC ) ;
Distance : 4

8
Tree	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Distance : 2

9
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

10
Tree	return iField != iZone ;
Code	return iField != iZone ;
Distance : 10

11
Tree	return iField . convertLocalToUTC ( localInstant ) ;
Code	return iField . convertLocalToUTC ( localInstant ) ;
Distance : 5

12
Tree	return value != iZone ;
Code	return value != iZone ;
Distance : 10

13
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

14
Tree	return NUMBER_CONSTANT / offset ;
Code	return NUMBER_CONSTANT / offset ;
Distance : 10

15
Tree	return iZone != instant ;
Code	return iZone != instant ;
Distance : 8

16
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , value ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , value ) ;
Distance : 9

17
Tree	return localInstant ( localInstant , localInstant , localInstant ) ;
Code	return localInstant ( localInstant , localInstant , localInstant ) ;
Distance : 5

18
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

19
Tree	return convertLocalToUTC ( localInstant , offset ) ;
Code	return convertLocalToUTC ( localInstant , offset ) ;
Distance : 5

20
Tree	return iZone . convertLocalToUTC ( localInstant , offset , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , offset , null ) ;
Distance : 2

21
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

22
Tree	return convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Code	return convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Distance : 5

23
Tree	return iZone . convertLocalToUTC ( this , value ) ;
Code	return iZone . convertLocalToUTC ( this , value ) ;
Distance : 4

24
Tree	return NUMBER_CONSTANT / value ;
Code	return NUMBER_CONSTANT / value ;
Distance : 10

25
Tree	return iZone ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return iZone ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

26
Tree	return iZone != iField ;
Code	return iZone != iField ;
Distance : 9

27
Tree	return NUMBER_CONSTANT / localInstant ;
Code	return NUMBER_CONSTANT / localInstant ;
Distance : 9

28
Tree	return iField . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iField . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

29
Tree	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , localInstant ) ;
Distance : 10

30
Tree	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Distance : 4

31
Tree	return iZone . iZone ( this , localInstant ) ;
Code	return iZone . iZone ( this , localInstant ) ;
Distance : 5

32
Tree	return ! iZone . localInstant ( localInstant ) && : ;
Code	return ! iZone . localInstant ( localInstant ) && : ;
Distance : 7

33
Tree	return iZone . localInstant ( localInstant ) ;
Code	return iZone . localInstant ( localInstant ) ;
Distance : 5

34
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

35
Tree	return localInstant ( localInstant , localInstant , false ) ;
Code	return localInstant ( localInstant , localInstant , false ) ;
Distance : 5

36
Tree	return iField . localInstant ( STRING_CONSTANT , localInstant ) ;
Code	return iField . localInstant ( STRING_CONSTANT , localInstant ) ;
Distance : 6

37
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Distance : 6

38
Tree	return iZone != null iZone ? ;
Code	return iZone != null iZone ? ;
Distance : 9

39
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Distance : 9

40
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

41
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

42
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

43
Tree	return convertLocalToUTC ( localInstant , value , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , value , localInstant ) ;
Distance : 4

44
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

45
Tree	return iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Code	return iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 5

46
Tree	return NUMBER_CONSTANT / instant ;
Code	return NUMBER_CONSTANT / instant ;
Distance : 9

47
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Distance : 6

48
Tree	return iZone . convertLocalToUTC ( null , localInstant , value , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , value , null ) ;
Distance : 4

49
Tree	return iZone . convertLocalToUTC ( iZone ) ;
Code	return iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

50
Tree	return convertLocalToUTC ( localInstant , value , false ) ;
Code	return convertLocalToUTC ( localInstant , value , false ) ;
Distance : 4

51
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Distance : 4

52
Tree	return iField . convertLocalToUTC ( this , localInstant ) ;
Code	return iField . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

53
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Distance : 2

54
Tree	return ! iZone && ! iField . localInstant () ;
Code	return ! iZone && ! iField . localInstant () ;
Distance : 10

55
Tree	return ! iZone . localInstant ( localInstant ) && ^ ;
Code	return ! iZone . localInstant ( localInstant ) && ^ ;
Distance : 7

56
Tree	return convertLocalToUTC ( localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , false ) ;
Distance : 4

57
Tree	return iZone . iZone ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . iZone ( STRING_CONSTANT , localInstant ) ;
Distance : 5

58
Tree	return convertLocalToUTC ( convertLocalToUTC , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( convertLocalToUTC , STRING_CONSTANT , iZone ) ;
Distance : 5

59
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

60
Tree	return iZone . localInstant ( localInstant , iZone , null ) ;
Code	return iZone . localInstant ( localInstant , iZone , null ) ;
Distance : 3

61
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , value ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , value ) ;
Distance : 4

62
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

63
Tree	return iZone . convertLocalToUTC ( convertLocalToUTC , false ) ;
Code	return iZone . convertLocalToUTC ( convertLocalToUTC , false ) ;
Distance : 3

64
Tree	return iZone != instant ;
Code	return iZone != instant ;
Distance : 8

65
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

66
Tree	return iZone . localInstant ( localInstant , false ) ;
Code	return iZone . localInstant ( localInstant , false ) ;
Distance : 3

67
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Distance : 6

68
Tree	return ( ( localInstant ) this ) . localInstant ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . localInstant ( localInstant , iZone ) ;
Distance : 10

69
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

70
Tree	return iField . localInstant ( this , localInstant ) ;
Code	return iField . localInstant ( this , localInstant ) ;
Distance : 6

71
Tree	return convertLocalToUTC ( iZone , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( iZone , STRING_CONSTANT , iZone ) ;
Distance : 5

72
Tree	return iZone != convertLocalToUTC ;
Code	return iZone != convertLocalToUTC ;
Distance : 8

73
Tree	return iZone != offset ;
Code	return iZone != offset ;
Distance : 9

74
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

75
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , value ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , value ) ;
Distance : 9

76
Tree	return localInstant ( localInstant , localInstant , localInstant , iZone ) ;
Code	return localInstant ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

77
Tree	return iZone != localInstant ;
Code	return iZone != localInstant ;
Distance : 8

78
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , offset ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , offset ) ;
Distance : 9

79
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

80
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

81
Tree	return localInstant ( localInstant , STRING_CONSTANT , iField ) ;
Code	return localInstant ( localInstant , STRING_CONSTANT , iField ) ;
Distance : 5

82
Tree	return localInstant != iZone ;
Code	return localInstant != iZone ;
Distance : 9

83
Tree	return iZone . convertLocalToUTC ( this , convertLocalToUTC ) ;
Code	return iZone . convertLocalToUTC ( this , convertLocalToUTC ) ;
Distance : 4

84
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Distance : 6

85
Tree	return iZone . iZone ( localInstant ) ;
Code	return iZone . iZone ( localInstant ) ;
Distance : 5

86
Tree	return convertLocalToUTC ( localInstant , convertLocalToUTC , false ) ;
Code	return convertLocalToUTC ( localInstant , convertLocalToUTC , false ) ;
Distance : 4

87
Tree	return convertLocalToUTC ( localInstant , value ) ;
Code	return convertLocalToUTC ( localInstant , value ) ;
Distance : 5

88
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

89
Tree	return localInstant ( localInstant , value , false ) ;
Code	return localInstant ( localInstant , value , false ) ;
Distance : 5

90
Tree	return iZone != iField ;
Code	return iZone != iField ;
Distance : 9

91
Tree	return ( ( localInstant ) this ) . localInstant ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . localInstant ( localInstant , localInstant ) ;
Distance : 10

92
Tree	return localInstant ( localInstant , iZone , false ) ;
Code	return localInstant ( localInstant , iZone , false ) ;
Distance : 5

93
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

94
Tree	return localInstant ( localInstant , localInstant ) ;
Code	return localInstant ( localInstant , localInstant ) ;
Distance : 6

95
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iField ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iField ) ;
Distance : 4

96
Tree	return convertLocalToUTC ( localInstant , instant , false ) ;
Code	return convertLocalToUTC ( localInstant , instant , false ) ;
Distance : 4

97
Tree	return iZone . localInstant ( null , localInstant , localInstant , null ) ;
Code	return iZone . localInstant ( null , localInstant , localInstant , null ) ;
Distance : 5

98
Tree	return ( ( localInstant ) this ) . add ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . add ( localInstant , localInstant ) ;
Distance : 10

99
Tree	return iField . localInstant ( localInstant ) ;
Code	return iField . localInstant ( localInstant ) ;
Distance : 6

100
Tree	return iField . localInstant ( localInstant , false ) ;
Code	return iField . localInstant ( localInstant , false ) ;
Distance : 4

101
Tree	return convertLocalToUTC ( localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone ) ;
Distance : 5

102
Tree	return iZone . localInstant ( iZone , false ) ;
Code	return iZone . localInstant ( iZone , false ) ;
Distance : 4

103
Tree	return iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Code	return iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 5

104
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && extends ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && extends ;
Distance : 6

105
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

106
Tree	return iField != iField ;
Code	return iField != iField ;
Distance : 10

107
Tree	return iZone . localInstant ( this , localInstant ) ;
Code	return iZone . localInstant ( this , localInstant ) ;
Distance : 5

108
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , , ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , , ) ;
Distance : 8

109
Tree	return iZone . convertLocalToUTC ( iZone ) ;
Code	return iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

110
Tree	return ! iField && ! iZone . convertLocalToUTC () ;
Code	return ! iField && ! iZone . convertLocalToUTC () ;
Distance : 10

111
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Distance : 6

112
Tree	return iZone . localInstant ( STRING_CONSTANT , value ) ;
Code	return iZone . localInstant ( STRING_CONSTANT , value ) ;
Distance : 5

113
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Distance : 4

114
Tree	return iZone . localInstant ( this , value ) ;
Code	return iZone . localInstant ( this , value ) ;
Distance : 5

115
Tree	return iZone != localInstant ;
Code	return iZone != localInstant ;
Distance : 8

116
Tree	return iField . localInstant ( localInstant ) ;
Code	return iField . localInstant ( localInstant ) ;
Distance : 6

117
Tree	return add ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return add ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 5

118
Tree	return ! iField && ! iZone . localInstant () ;
Code	return ! iField && ! iZone . localInstant () ;
Distance : 10

119
Tree	return iZone . localInstant ( localInstant , localInstant , null ) ;
Code	return iZone . localInstant ( localInstant , localInstant , null ) ;
Distance : 3

120
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Distance : 4

121
Tree	return iZone . localInstant ( localInstant , instant , null ) ;
Code	return iZone . localInstant ( localInstant , instant , null ) ;
Distance : 3

122
Tree	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Distance : 2

123
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

124
Tree	return iZone . convertLocalToUTC ( value ) ;
Code	return iZone . convertLocalToUTC ( value ) ;
Distance : 5

125
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

126
Tree	return ! iZone && ! iZone . add () ;
Code	return ! iZone && ! iZone . add () ;
Distance : 10

127
Tree	return localInstant ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return localInstant ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 5

128
Tree	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , iZone ) ;
Distance : 10

129
Tree	return iZone . convertLocalToUTC ( null , localInstant , offset , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , offset , null ) ;
Distance : 4

130
Tree	return convertLocalToUTC ( localInstant , localInstant , convertLocalToUTC ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , convertLocalToUTC ) ;
Distance : 4

131
Tree	return iZone . localInstant ( iZone ) ;
Code	return iZone . localInstant ( iZone ) ;
Distance : 6

132
Tree	return ! iZone && ! iZone . value () ;
Code	return ! iZone && ! iZone . value () ;
Distance : 10

133
Tree	return iZone . convertLocalToUTC ( localInstant , value , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , value , null ) ;
Distance : 2

134
Tree	return instant != iZone ;
Code	return instant != iZone ;
Distance : 10

135
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

136
Tree	return iZone . convertLocalToUTC ( value , false ) ;
Code	return iZone . convertLocalToUTC ( value , false ) ;
Distance : 3

137
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

138
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

139
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

140
Tree	return iField != iZone ;
Code	return iField != iZone ;
Distance : 10

141
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Distance : 9

142
Tree	return ! iZone && ! iField . convertLocalToUTC () ;
Code	return ! iZone && ! iField . convertLocalToUTC () ;
Distance : 10

143
Tree	return instant != iZone ;
Code	return instant != iZone ;
Distance : 10

144
Tree	return NUMBER_CONSTANT / iField ;
Code	return NUMBER_CONSTANT / iField ;
Distance : 10

145
Tree	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Distance : 5

146
Tree	return localInstant ( localInstant , localInstant , iZone ) ;
Code	return localInstant ( localInstant , localInstant , iZone ) ;
Distance : 5

147
Tree	return convertLocalToUTC ( localInstant , localInstant , convertLocalToUTC , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , convertLocalToUTC , iZone ) ;
Distance : 6

148
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 4

149
Tree	return iZone != null iZone / ;
Code	return iZone != null iZone / ;
Distance : 9

150
Tree	return iZone . localInstant ( localInstant , value , null ) ;
Code	return iZone . localInstant ( localInstant , value , null ) ;
Distance : 3

151
Tree	return iZone . localInstant ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . localInstant ( STRING_CONSTANT , localInstant ) ;
Distance : 5

152
Tree	return NUMBER_CONSTANT / convertLocalToUTC ;
Code	return NUMBER_CONSTANT / convertLocalToUTC ;
Distance : 9

153
Tree	return convertLocalToUTC ( localInstant , value , iZone ) ;
Code	return convertLocalToUTC ( localInstant , value , iZone ) ;
Distance : 4

154
Tree	return convertLocalToUTC ( localInstant , value , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , value , iZone , iZone ) ;
Distance : 6

155
Tree	return iZone . localInstant ( null , localInstant , iZone , null ) ;
Code	return iZone . localInstant ( null , localInstant , iZone , null ) ;
Distance : 5

156
Tree	return convertLocalToUTC ( value , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( value , STRING_CONSTANT , iZone ) ;
Distance : 5

157
Tree	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Distance : 4

158
Tree	return iZone != null iZone + ;
Code	return iZone != null iZone + ;
Distance : 9

159
Tree	return iField . convertLocalToUTC ( localInstant , false ) ;
Code	return iField . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

160
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Distance : 6

161
Tree	return iZone != null iZone <> ;
Code	return iZone != null iZone <> ;
Distance : 9

162
Tree	return iField . convertLocalToUTC ( localInstant , localInstant , null ) ;
Code	return iField . convertLocalToUTC ( localInstant , localInstant , null ) ;
Distance : 3

163
Tree	return ! iZone && ! iZone . localInstant () ;
Code	return ! iZone && ! iZone . localInstant () ;
Distance : 10

164
Tree	return localInstant ( localInstant , value ) ;
Code	return localInstant ( localInstant , value ) ;
Distance : 6

165
Tree	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Distance : 4

166
Tree	return ( ( localInstant ) convertLocalToUTC ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) convertLocalToUTC ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

167
Tree	return iZone . iZone ( localInstant , false ) ;
Code	return iZone . iZone ( localInstant , false ) ;
Distance : 3

168
Tree	return iZone . localInstant ( localInstant ) ;
Code	return iZone . localInstant ( localInstant ) ;
Distance : 5

169
Tree	return localInstant ( localInstant , localInstant , iZone , iZone ) ;
Code	return localInstant ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

170
Tree	return iZone . localInstant ( iZone ) ;
Code	return iZone . localInstant ( iZone ) ;
Distance : 6

171
Tree	return iZone != null iZone extends ;
Code	return iZone != null iZone extends ;
Distance : 9

172
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , , ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , , ) ;
Distance : 8

173
Tree	return iZone != null iZone & ;
Code	return iZone != null iZone & ;
Distance : 9

174
Tree	return iZone . convertLocalToUTC ( null , localInstant , convertLocalToUTC , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , convertLocalToUTC , null ) ;
Distance : 4

175
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

176
Tree	return iZone . convertLocalToUTC ( this , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 4

177
Tree	return convertLocalToUTC ( localInstant , localInstant , offset , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , offset , iZone ) ;
Distance : 6

178
Tree	return iZone != null iZone throws ;
Code	return iZone != null iZone throws ;
Distance : 9

179
Tree	return localInstant != iZone ;
Code	return localInstant != iZone ;
Distance : 9

180
Tree	return convertLocalToUTC ( localInstant , offset , false ) ;
Code	return convertLocalToUTC ( localInstant , offset , false ) ;
Distance : 4

181
Tree	return iZone != null iZone += ;
Code	return iZone != null iZone += ;
Distance : 9

182
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

183
Tree	return iField != null iZone ? ;
Code	return iField != null iZone ? ;
Distance : 10

184
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , offset ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , offset ) ;
Distance : 9

185
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

186
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && % ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && % ;
Distance : 6

187
Tree	return convertLocalToUTC ( localInstant , value , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , value , localInstant , iZone ) ;
Distance : 6

188
Tree	return ! iZone . localInstant ( localInstant ) && <= ;
Code	return ! iZone . localInstant ( localInstant ) && <= ;
Distance : 7

189
Tree	return convertLocalToUTC ( localInstant , localInstant , offset ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , offset ) ;
Distance : 4

190
Tree	return iField . convertLocalToUTC ( localInstant ) ;
Code	return iField . convertLocalToUTC ( localInstant ) ;
Distance : 5

191
Tree	return iZone . localInstant ( convertLocalToUTC ) ;
Code	return iZone . localInstant ( convertLocalToUTC ) ;
Distance : 6

192
Tree	return iZone != value ;
Code	return iZone != value ;
Distance : 9

193
Tree	return iZone != null iZone instanceof ;
Code	return iZone != null iZone instanceof ;
Distance : 9

194
Tree	return NUMBER_CONSTANT / add ;
Code	return NUMBER_CONSTANT / add ;
Distance : 10

195
Tree	return iZone . convertLocalToUTC ( null , iZone , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , iZone , null ) ;
Distance : 5

196
Tree	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Distance : 4

197
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

198
Tree	return NUMBER_CONSTANT / iZone ; wanted
Code	return NUMBER_CONSTANT / iZone ; wanted
Distance : 11

199
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

========================================================================


========================================================================
Example Number: 116
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

1
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

2
Tree	return localInstant ( localInstant , iZone ) ;
Code	return localInstant ( localInstant , iZone ) ;
Distance : 6

3
Tree	return convertLocalToUTC ( localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , instant ) ;
Distance : 4

4
Tree	return iZone . iZone ( localInstant ) ;
Code	return iZone . iZone ( localInstant ) ;
Distance : 5

5
Tree	return ! iZone && ! iZone . iZone () ;
Code	return ! iZone && ! iZone . iZone () ;
Distance : 10

6
Tree	return ! iZone . localInstant ( localInstant ) && & ;
Code	return ! iZone . localInstant ( localInstant ) && & ;
Distance : 7

7
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , convertLocalToUTC ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , convertLocalToUTC ) ;
Distance : 4

8
Tree	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Distance : 2

9
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

10
Tree	return iField != iZone ;
Code	return iField != iZone ;
Distance : 10

11
Tree	return iField . convertLocalToUTC ( localInstant ) ;
Code	return iField . convertLocalToUTC ( localInstant ) ;
Distance : 5

12
Tree	return value != iZone ;
Code	return value != iZone ;
Distance : 10

13
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

14
Tree	return NUMBER_CONSTANT / offset ;
Code	return NUMBER_CONSTANT / offset ;
Distance : 10

15
Tree	return iZone != instant ;
Code	return iZone != instant ;
Distance : 8

16
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , value ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , value ) ;
Distance : 9

17
Tree	return localInstant ( localInstant , localInstant , localInstant ) ;
Code	return localInstant ( localInstant , localInstant , localInstant ) ;
Distance : 5

18
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

19
Tree	return convertLocalToUTC ( localInstant , offset ) ;
Code	return convertLocalToUTC ( localInstant , offset ) ;
Distance : 5

20
Tree	return iZone . convertLocalToUTC ( localInstant , offset , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , offset , null ) ;
Distance : 2

21
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

22
Tree	return convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Code	return convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Distance : 5

23
Tree	return iZone . convertLocalToUTC ( this , value ) ;
Code	return iZone . convertLocalToUTC ( this , value ) ;
Distance : 4

24
Tree	return NUMBER_CONSTANT / value ;
Code	return NUMBER_CONSTANT / value ;
Distance : 10

25
Tree	return iZone ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return iZone ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

26
Tree	return iZone != iField ;
Code	return iZone != iField ;
Distance : 9

27
Tree	return NUMBER_CONSTANT / localInstant ;
Code	return NUMBER_CONSTANT / localInstant ;
Distance : 9

28
Tree	return iField . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iField . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

29
Tree	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , localInstant ) ;
Distance : 10

30
Tree	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Distance : 4

31
Tree	return iZone . iZone ( this , localInstant ) ;
Code	return iZone . iZone ( this , localInstant ) ;
Distance : 5

32
Tree	return ! iZone . localInstant ( localInstant ) && : ;
Code	return ! iZone . localInstant ( localInstant ) && : ;
Distance : 7

33
Tree	return iZone . localInstant ( localInstant ) ;
Code	return iZone . localInstant ( localInstant ) ;
Distance : 5

34
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

35
Tree	return localInstant ( localInstant , localInstant , false ) ;
Code	return localInstant ( localInstant , localInstant , false ) ;
Distance : 5

36
Tree	return iField . localInstant ( STRING_CONSTANT , localInstant ) ;
Code	return iField . localInstant ( STRING_CONSTANT , localInstant ) ;
Distance : 6

37
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Distance : 6

38
Tree	return iZone != null iZone ? ;
Code	return iZone != null iZone ? ;
Distance : 9

39
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Distance : 9

40
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

41
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

42
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

43
Tree	return convertLocalToUTC ( localInstant , value , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , value , localInstant ) ;
Distance : 4

44
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

45
Tree	return iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Code	return iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 5

46
Tree	return NUMBER_CONSTANT / instant ;
Code	return NUMBER_CONSTANT / instant ;
Distance : 9

47
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Distance : 6

48
Tree	return iZone . convertLocalToUTC ( null , localInstant , value , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , value , null ) ;
Distance : 4

49
Tree	return iZone . convertLocalToUTC ( iZone ) ;
Code	return iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

50
Tree	return convertLocalToUTC ( localInstant , value , false ) ;
Code	return convertLocalToUTC ( localInstant , value , false ) ;
Distance : 4

51
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Distance : 4

52
Tree	return iField . convertLocalToUTC ( this , localInstant ) ;
Code	return iField . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

53
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Distance : 2

54
Tree	return ! iZone && ! iField . localInstant () ;
Code	return ! iZone && ! iField . localInstant () ;
Distance : 10

55
Tree	return ! iZone . localInstant ( localInstant ) && ^ ;
Code	return ! iZone . localInstant ( localInstant ) && ^ ;
Distance : 7

56
Tree	return convertLocalToUTC ( localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , false ) ;
Distance : 4

57
Tree	return iZone . iZone ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . iZone ( STRING_CONSTANT , localInstant ) ;
Distance : 5

58
Tree	return convertLocalToUTC ( convertLocalToUTC , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( convertLocalToUTC , STRING_CONSTANT , iZone ) ;
Distance : 5

59
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

60
Tree	return iZone . localInstant ( localInstant , iZone , null ) ;
Code	return iZone . localInstant ( localInstant , iZone , null ) ;
Distance : 3

61
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , value ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , value ) ;
Distance : 4

62
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

63
Tree	return iZone . convertLocalToUTC ( convertLocalToUTC , false ) ;
Code	return iZone . convertLocalToUTC ( convertLocalToUTC , false ) ;
Distance : 3

64
Tree	return iZone != instant ;
Code	return iZone != instant ;
Distance : 8

65
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

66
Tree	return iZone . localInstant ( localInstant , false ) ;
Code	return iZone . localInstant ( localInstant , false ) ;
Distance : 3

67
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Distance : 6

68
Tree	return ( ( localInstant ) this ) . localInstant ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . localInstant ( localInstant , iZone ) ;
Distance : 10

69
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

70
Tree	return iField . localInstant ( this , localInstant ) ;
Code	return iField . localInstant ( this , localInstant ) ;
Distance : 6

71
Tree	return convertLocalToUTC ( iZone , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( iZone , STRING_CONSTANT , iZone ) ;
Distance : 5

72
Tree	return iZone != convertLocalToUTC ;
Code	return iZone != convertLocalToUTC ;
Distance : 8

73
Tree	return iZone != offset ;
Code	return iZone != offset ;
Distance : 9

74
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

75
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , value ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , value ) ;
Distance : 9

76
Tree	return localInstant ( localInstant , localInstant , localInstant , iZone ) ;
Code	return localInstant ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

77
Tree	return iZone != localInstant ;
Code	return iZone != localInstant ;
Distance : 8

78
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , offset ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , offset ) ;
Distance : 9

79
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

80
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

81
Tree	return localInstant ( localInstant , STRING_CONSTANT , iField ) ;
Code	return localInstant ( localInstant , STRING_CONSTANT , iField ) ;
Distance : 5

82
Tree	return localInstant != iZone ;
Code	return localInstant != iZone ;
Distance : 9

83
Tree	return iZone . convertLocalToUTC ( this , convertLocalToUTC ) ;
Code	return iZone . convertLocalToUTC ( this , convertLocalToUTC ) ;
Distance : 4

84
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Distance : 6

85
Tree	return iZone . iZone ( localInstant ) ;
Code	return iZone . iZone ( localInstant ) ;
Distance : 5

86
Tree	return convertLocalToUTC ( localInstant , convertLocalToUTC , false ) ;
Code	return convertLocalToUTC ( localInstant , convertLocalToUTC , false ) ;
Distance : 4

87
Tree	return convertLocalToUTC ( localInstant , value ) ;
Code	return convertLocalToUTC ( localInstant , value ) ;
Distance : 5

88
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

89
Tree	return localInstant ( localInstant , value , false ) ;
Code	return localInstant ( localInstant , value , false ) ;
Distance : 5

90
Tree	return iZone != iField ;
Code	return iZone != iField ;
Distance : 9

91
Tree	return ( ( localInstant ) this ) . localInstant ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . localInstant ( localInstant , localInstant ) ;
Distance : 10

92
Tree	return localInstant ( localInstant , iZone , false ) ;
Code	return localInstant ( localInstant , iZone , false ) ;
Distance : 5

93
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

94
Tree	return localInstant ( localInstant , localInstant ) ;
Code	return localInstant ( localInstant , localInstant ) ;
Distance : 6

95
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iField ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iField ) ;
Distance : 4

96
Tree	return convertLocalToUTC ( localInstant , instant , false ) ;
Code	return convertLocalToUTC ( localInstant , instant , false ) ;
Distance : 4

97
Tree	return iZone . localInstant ( null , localInstant , localInstant , null ) ;
Code	return iZone . localInstant ( null , localInstant , localInstant , null ) ;
Distance : 5

98
Tree	return ( ( localInstant ) this ) . add ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . add ( localInstant , localInstant ) ;
Distance : 10

99
Tree	return iField . localInstant ( localInstant ) ;
Code	return iField . localInstant ( localInstant ) ;
Distance : 6

100
Tree	return iField . localInstant ( localInstant , false ) ;
Code	return iField . localInstant ( localInstant , false ) ;
Distance : 4

101
Tree	return convertLocalToUTC ( localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone ) ;
Distance : 5

102
Tree	return iZone . localInstant ( iZone , false ) ;
Code	return iZone . localInstant ( iZone , false ) ;
Distance : 4

103
Tree	return iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Code	return iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 5

104
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && extends ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && extends ;
Distance : 6

105
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

106
Tree	return iField != iField ;
Code	return iField != iField ;
Distance : 10

107
Tree	return iZone . localInstant ( this , localInstant ) ;
Code	return iZone . localInstant ( this , localInstant ) ;
Distance : 5

108
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , false ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , false ) ;
Distance : 8

109
Tree	return iZone . convertLocalToUTC ( iZone ) ;
Code	return iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

110
Tree	return ! iField && ! iZone . convertLocalToUTC () ;
Code	return ! iField && ! iZone . convertLocalToUTC () ;
Distance : 10

111
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Distance : 6

112
Tree	return iZone . localInstant ( STRING_CONSTANT , value ) ;
Code	return iZone . localInstant ( STRING_CONSTANT , value ) ;
Distance : 5

113
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Distance : 4

114
Tree	return iZone . localInstant ( this , value ) ;
Code	return iZone . localInstant ( this , value ) ;
Distance : 5

115
Tree	return iZone != localInstant ;
Code	return iZone != localInstant ;
Distance : 8

116
Tree	return iField . localInstant ( localInstant ) ;
Code	return iField . localInstant ( localInstant ) ;
Distance : 6

117
Tree	return add ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return add ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 5

118
Tree	return ! iField && ! iZone . localInstant () ;
Code	return ! iField && ! iZone . localInstant () ;
Distance : 10

119
Tree	return iZone . localInstant ( localInstant , localInstant , null ) ;
Code	return iZone . localInstant ( localInstant , localInstant , null ) ;
Distance : 3

120
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Distance : 4

121
Tree	return iZone . localInstant ( localInstant , instant , null ) ;
Code	return iZone . localInstant ( localInstant , instant , null ) ;
Distance : 3

122
Tree	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Distance : 2

123
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

124
Tree	return iZone . convertLocalToUTC ( value ) ;
Code	return iZone . convertLocalToUTC ( value ) ;
Distance : 5

125
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

126
Tree	return ! iZone && ! iZone . add () ;
Code	return ! iZone && ! iZone . add () ;
Distance : 10

127
Tree	return localInstant ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return localInstant ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 5

128
Tree	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . localInstant ( localInstant , iZone ) ;
Distance : 10

129
Tree	return iZone . convertLocalToUTC ( null , localInstant , offset , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , offset , null ) ;
Distance : 4

130
Tree	return convertLocalToUTC ( localInstant , localInstant , convertLocalToUTC ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , convertLocalToUTC ) ;
Distance : 4

131
Tree	return iZone . localInstant ( iZone ) ;
Code	return iZone . localInstant ( iZone ) ;
Distance : 6

132
Tree	return ! iZone && ! iZone . value () ;
Code	return ! iZone && ! iZone . value () ;
Distance : 10

133
Tree	return iZone . convertLocalToUTC ( localInstant , value , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , value , null ) ;
Distance : 2

134
Tree	return instant != iZone ;
Code	return instant != iZone ;
Distance : 10

135
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

136
Tree	return iZone . convertLocalToUTC ( value , false ) ;
Code	return iZone . convertLocalToUTC ( value , false ) ;
Distance : 3

137
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

138
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

139
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

140
Tree	return iField != iZone ;
Code	return iField != iZone ;
Distance : 10

141
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , convertLocalToUTC ) ;
Distance : 9

142
Tree	return ! iZone && ! iField . convertLocalToUTC () ;
Code	return ! iZone && ! iField . convertLocalToUTC () ;
Distance : 10

143
Tree	return instant != iZone ;
Code	return instant != iZone ;
Distance : 10

144
Tree	return NUMBER_CONSTANT / iField ;
Code	return NUMBER_CONSTANT / iField ;
Distance : 10

145
Tree	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Distance : 5

146
Tree	return localInstant ( localInstant , localInstant , iZone ) ;
Code	return localInstant ( localInstant , localInstant , iZone ) ;
Distance : 5

147
Tree	return convertLocalToUTC ( localInstant , localInstant , convertLocalToUTC , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , convertLocalToUTC , iZone ) ;
Distance : 6

148
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 4

149
Tree	return iZone != null iZone / ;
Code	return iZone != null iZone / ;
Distance : 9

150
Tree	return iZone . localInstant ( localInstant , value , null ) ;
Code	return iZone . localInstant ( localInstant , value , null ) ;
Distance : 3

151
Tree	return iZone . localInstant ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . localInstant ( STRING_CONSTANT , localInstant ) ;
Distance : 5

152
Tree	return NUMBER_CONSTANT / convertLocalToUTC ;
Code	return NUMBER_CONSTANT / convertLocalToUTC ;
Distance : 9

153
Tree	return convertLocalToUTC ( localInstant , value , iZone ) ;
Code	return convertLocalToUTC ( localInstant , value , iZone ) ;
Distance : 4

154
Tree	return convertLocalToUTC ( localInstant , value , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , value , iZone , iZone ) ;
Distance : 6

155
Tree	return iZone . localInstant ( null , localInstant , iZone , null ) ;
Code	return iZone . localInstant ( null , localInstant , iZone , null ) ;
Distance : 5

156
Tree	return convertLocalToUTC ( value , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( value , STRING_CONSTANT , iZone ) ;
Distance : 5

157
Tree	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Distance : 4

158
Tree	return iZone != null iZone + ;
Code	return iZone != null iZone + ;
Distance : 9

159
Tree	return iField . convertLocalToUTC ( localInstant , false ) ;
Code	return iField . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

160
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Distance : 6

161
Tree	return iZone != null iZone <> ;
Code	return iZone != null iZone <> ;
Distance : 9

162
Tree	return iField . convertLocalToUTC ( localInstant , localInstant , null ) ;
Code	return iField . convertLocalToUTC ( localInstant , localInstant , null ) ;
Distance : 3

163
Tree	return ! iZone && ! iZone . localInstant () ;
Code	return ! iZone && ! iZone . localInstant () ;
Distance : 10

164
Tree	return localInstant ( localInstant , value ) ;
Code	return localInstant ( localInstant , value ) ;
Distance : 6

165
Tree	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Distance : 4

166
Tree	return ( ( localInstant ) convertLocalToUTC ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) convertLocalToUTC ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

167
Tree	return iZone . iZone ( localInstant , false ) ;
Code	return iZone . iZone ( localInstant , false ) ;
Distance : 3

168
Tree	return iZone . localInstant ( localInstant ) ;
Code	return iZone . localInstant ( localInstant ) ;
Distance : 5

169
Tree	return localInstant ( localInstant , localInstant , iZone , iZone ) ;
Code	return localInstant ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

170
Tree	return iZone . localInstant ( iZone ) ;
Code	return iZone . localInstant ( iZone ) ;
Distance : 6

171
Tree	return iZone != null iZone extends ;
Code	return iZone != null iZone extends ;
Distance : 9

172
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , , ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , , ) ;
Distance : 8

173
Tree	return iZone != null iZone & ;
Code	return iZone != null iZone & ;
Distance : 9

174
Tree	return iZone . convertLocalToUTC ( null , localInstant , convertLocalToUTC , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , convertLocalToUTC , null ) ;
Distance : 4

175
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

176
Tree	return iZone . convertLocalToUTC ( this , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 4

177
Tree	return convertLocalToUTC ( localInstant , localInstant , offset , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , offset , iZone ) ;
Distance : 6

178
Tree	return iZone != null iZone throws ;
Code	return iZone != null iZone throws ;
Distance : 9

179
Tree	return localInstant != iZone ;
Code	return localInstant != iZone ;
Distance : 9

180
Tree	return convertLocalToUTC ( localInstant , offset , false ) ;
Code	return convertLocalToUTC ( localInstant , offset , false ) ;
Distance : 4

181
Tree	return iZone != null iZone += ;
Code	return iZone != null iZone += ;
Distance : 9

182
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

183
Tree	return iField != null iZone ? ;
Code	return iField != null iZone ? ;
Distance : 10

184
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , offset ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , offset ) ;
Distance : 9

185
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

186
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && % ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && % ;
Distance : 6

187
Tree	return convertLocalToUTC ( localInstant , value , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , value , localInstant , iZone ) ;
Distance : 6

188
Tree	return ! iZone . localInstant ( localInstant ) && <= ;
Code	return ! iZone . localInstant ( localInstant ) && <= ;
Distance : 7

189
Tree	return convertLocalToUTC ( localInstant , localInstant , offset ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , offset ) ;
Distance : 4

190
Tree	return iField . convertLocalToUTC ( localInstant ) ;
Code	return iField . convertLocalToUTC ( localInstant ) ;
Distance : 5

191
Tree	return iZone . localInstant ( convertLocalToUTC ) ;
Code	return iZone . localInstant ( convertLocalToUTC ) ;
Distance : 6

192
Tree	return iZone != value ;
Code	return iZone != value ;
Distance : 9

193
Tree	return iZone != null iZone instanceof ;
Code	return iZone != null iZone instanceof ;
Distance : 9

194
Tree	return NUMBER_CONSTANT / add ;
Code	return NUMBER_CONSTANT / add ;
Distance : 10

195
Tree	return iZone . convertLocalToUTC ( null , iZone , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , iZone , null ) ;
Distance : 5

196
Tree	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Distance : 4

197
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

198
Tree	return NUMBER_CONSTANT / iZone ; wanted
Code	return NUMBER_CONSTANT / iZone ; wanted
Distance : 11

199
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

========================================================================


========================================================================
Example Number: 117
Parent Code is: 
Partial newPartial = new Partial ( iChronology , newTypes , newValues ) ;
-------------------------------------------------------------------------------
Child code is: 
Partial newPartial = new Partial ( newTypes , newValues , iChronology ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Partial})) (59 (800{val=newPartial}) (204{val==}) (14 (304{val=new}) (43 (801{val=Partial})) (214{val=(}) (800{val=iChronology}) (234{val=,}) (800{val=newTypes}) (234{val=,}) (800{val=newValues}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Partial})) (59 (800{val=newPartial}) (204{val==}) (14 (304{val=new}) (43 (801{val=Partial})) (214{val=(}) (800{val=newTypes}) (234{val=,}) (800{val=newValues}) (234{val=,}) (800{val=iChronology}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/4/parent/src_main_java_org_joda_time_Partial.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	getValues compare = new getValues ( iChronology , getValues , false ) ;
Code	getValues compare = new getValues ( iChronology , getValues , false ) ;
Distance : 6

1
Tree	getValues compare = getValues . getValues ( iChronology , NUMBER_CONSTANT ) ;
Code	getValues compare = getValues . getValues ( iChronology , NUMBER_CONSTANT ) ;
Distance : 9

2
Tree	getValues compare = getValues . getValues ( DateTimeFieldType , NUMBER_CONSTANT ) ;
Code	getValues compare = getValues . getValues ( DateTimeFieldType , NUMBER_CONSTANT ) ;
Distance : 9

3
Tree	getValues newValues = getValues . getValues ( getDurationType , NUMBER_CONSTANT ) ;
Code	getValues newValues = getValues . getValues ( getDurationType , NUMBER_CONSTANT ) ;
Distance : 9

4
Tree	getValues compare = new with ( iChronology , getValues , newValues , newValues ) ;
Code	getValues compare = new with ( iChronology , getValues , newValues , newValues ) ;
Distance : 7

5
Tree	getValues newValues = Partial . getValues ( iChronology , NUMBER_CONSTANT ) ;
Code	getValues newValues = Partial . getValues ( iChronology , NUMBER_CONSTANT ) ;
Distance : 8

6
Tree	getValues newValues = Partial . getValues ( DateTimeFieldType , NUMBER_CONSTANT ) ;
Code	getValues newValues = Partial . getValues ( DateTimeFieldType , NUMBER_CONSTANT ) ;
Distance : 8

7
Tree	getValues compare = new Partial ( iChronology , DateTimeFieldType , newValues , newValues ) ;
Code	getValues compare = new Partial ( iChronology , DateTimeFieldType , newValues , newValues ) ;
Distance : 6

8
Tree	getValues newValues = new Partial ( iChronology , getValues , false ) ;
Code	getValues newValues = new Partial ( iChronology , getValues , false ) ;
Distance : 5

9
Tree	getValues compare = new getValues ( iChronology , DateTimeFieldType , newValues , newValues ) ;
Code	getValues compare = new getValues ( iChronology , DateTimeFieldType , newValues , newValues ) ;
Distance : 7

10
Tree	getValues compare = new newValues ( iChronology , getValues , newValues , newValues , null ) ;
Code	getValues compare = new newValues ( iChronology , getValues , newValues , newValues , null ) ;
Distance : 9

11
Tree	getValues newValues = new with ( iChronology , getValues , newValues , newValues , null ) ;
Code	getValues newValues = new with ( iChronology , getValues , newValues , newValues , null ) ;
Distance : 9

12
Tree	getValues newValues = new Partial ( iChronology . getDurationType () , DateTimeFieldType , newValues ) ;
Code	getValues newValues = new Partial ( iChronology . getDurationType () , DateTimeFieldType , newValues ) ;
Distance : 8

13
Tree	getValues newValues = new getValues ( iChronology . getDurationType () , DateTimeFieldType , newValues ) ;
Code	getValues newValues = new getValues ( iChronology . getDurationType () , DateTimeFieldType , newValues ) ;
Distance : 9

14
Tree	getValues compare = new with ( iChronology . getDurationType () , DateTimeFieldType , newValues ) ;
Code	getValues compare = new with ( iChronology . getDurationType () , DateTimeFieldType , newValues ) ;
Distance : 9

15
Tree	getValues compare = new Partial ( iChronology , getValues , newValues . newValues () ) ;
Code	getValues compare = new Partial ( iChronology , getValues , newValues . newValues () ) ;
Distance : 8

16
Tree	getValues compare = new getValues ( iChronology , getValues , newValues . newValues () ) ;
Code	getValues compare = new getValues ( iChronology , getValues , newValues . newValues () ) ;
Distance : 9

17
Tree	getValues compare = new set ( iChronology . getDurationType () , DateTimeFieldType , newValues ) ;
Code	getValues compare = new set ( iChronology . getDurationType () , DateTimeFieldType , newValues ) ;
Distance : 9

18
Tree	getValues compare = new newValues ( iChronology . getDurationType () , DateTimeFieldType , newValues ) ;
Code	getValues compare = new newValues ( iChronology . getDurationType () , DateTimeFieldType , newValues ) ;
Distance : 9

19
Tree	getValues newValues = new with ( iChronology . getDurationType () , DateTimeFieldType , newValues ) ;
Code	getValues newValues = new with ( iChronology . getDurationType () , DateTimeFieldType , newValues ) ;
Distance : 9

20
Tree	getValues newValues = new with ( iChronology , getValues , newValues , null ) ;
Code	getValues newValues = new with ( iChronology , getValues , newValues , null ) ;
Distance : 7

21
Tree	getValues compare = new Partial ( iChronology , getValues , newValues , newValues ) ;
Code	getValues compare = new Partial ( iChronology , getValues , newValues , newValues ) ;
Distance : 6

22
Tree	getValues compare = new getValues ( iChronology , getValues , newValues , newValues ) ;
Code	getValues compare = new getValues ( iChronology , getValues , newValues , newValues ) ;
Distance : 7

23
Tree	getValues compare = getValues . getValues ( getDurationType , NUMBER_CONSTANT ) ;
Code	getValues compare = getValues . getValues ( getDurationType , NUMBER_CONSTANT ) ;
Distance : 9

24
Tree	getValues compare = Partial . getValues ( iChronology , NUMBER_CONSTANT ) ;
Code	getValues compare = Partial . getValues ( iChronology , NUMBER_CONSTANT ) ;
Distance : 8

25
Tree	getValues compare = Partial . getValues ( DateTimeFieldType , NUMBER_CONSTANT ) ;
Code	getValues compare = Partial . getValues ( DateTimeFieldType , NUMBER_CONSTANT ) ;
Distance : 8

26
Tree	getValues newValues = new Partial ( iChronology , getValues , newValues , newValues , null ) ;
Code	getValues newValues = new Partial ( iChronology , getValues , newValues , newValues , null ) ;
Distance : 8

27
Tree	getValues compare = new set ( iChronology , getValues , false ) ;
Code	getValues compare = new set ( iChronology , getValues , false ) ;
Distance : 6

28
Tree	getValues newValues = Partial . getValues ( getDurationType , NUMBER_CONSTANT ) ;
Code	getValues newValues = Partial . getValues ( getDurationType , NUMBER_CONSTANT ) ;
Distance : 8

29
Tree	getValues newValues = new Partial ( iChronology , getValues , newValues , newValues ) ;
Code	getValues newValues = new Partial ( iChronology , getValues , newValues , newValues ) ;
Distance : 6

30
Tree	getValues newValues = new getValues ( iChronology , getValues , newValues , newValues , null ) ;
Code	getValues newValues = new getValues ( iChronology , getValues , newValues , newValues , null ) ;
Distance : 9

31
Tree	getValues compare = new getValues ( iChronology , getValues , newValues , newValues . getValue () ) ;
Code	getValues compare = new getValues ( iChronology , getValues , newValues , newValues . getValue () ) ;
Distance : 10

32
Tree	getValues compare = new Partial ( DateTimeFieldType , getValues , false ) ;
Code	getValues compare = new Partial ( DateTimeFieldType , getValues , false ) ;
Distance : 5

33
Tree	getValues newValues = new getValues ( iChronology , getValues , newValues , newValues ) ;
Code	getValues newValues = new getValues ( iChronology , getValues , newValues , newValues ) ;
Distance : 7

34
Tree	getValues compare = new Partial ( iChronology , getValues , false ) ;
Code	getValues compare = new Partial ( iChronology , getValues , false ) ;
Distance : 5

35
Tree	getValues compare = new getValues ( DateTimeFieldType , getValues , false ) ;
Code	getValues compare = new getValues ( DateTimeFieldType , getValues , false ) ;
Distance : 6

36
Tree	getValues newValues = new Partial ( iChronology , getValues , newValues , newValues . getDurationType () ) ;
Code	getValues newValues = new Partial ( iChronology , getValues , newValues , newValues . getDurationType () ) ;
Distance : 9

37
Tree	getValues newValues = new getValues ( iChronology , getValues , newValues , newValues . getDurationType () ) ;
Code	getValues newValues = new getValues ( iChronology , getValues , newValues , newValues . getDurationType () ) ;
Distance : 10

38
Tree	getValues compare = new with ( iChronology , getValues , newValues ) ;
Code	getValues compare = new with ( iChronology , getValues , newValues ) ;
Distance : 6

39
Tree	getValues compare = new newValues ( NUMBER_CONSTANT , NUMBER_CONSTANT , newValues , NUMBER_CONSTANT , NUMBER_CONSTANT , newValues ) ;
Code	getValues compare = new newValues ( NUMBER_CONSTANT , NUMBER_CONSTANT , newValues , NUMBER_CONSTANT , NUMBER_CONSTANT , newValues ) ;
Distance : 11

40
Tree	getValues compare = new Partial ( iChronology , getValues , newValues , this . iChronology . getDurationType () ) ;
Code	getValues compare = new Partial ( iChronology , getValues , newValues , this . iChronology . getDurationType () ) ;
Distance : 10

41
Tree	getValues newValues = new with ( NUMBER_CONSTANT , NUMBER_CONSTANT , newValues , NUMBER_CONSTANT , NUMBER_CONSTANT , newValues ) ;
Code	getValues newValues = new with ( NUMBER_CONSTANT , NUMBER_CONSTANT , newValues , NUMBER_CONSTANT , NUMBER_CONSTANT , newValues ) ;
Distance : 11

42
Tree	getValues getValues = new getValues ( NUMBER_CONSTANT , NUMBER_CONSTANT , newValues , NUMBER_CONSTANT , NUMBER_CONSTANT , newValues ) ;
Code	getValues getValues = new getValues ( NUMBER_CONSTANT , NUMBER_CONSTANT , newValues , NUMBER_CONSTANT , NUMBER_CONSTANT , newValues ) ;
Distance : 11

43
Tree	getValues getValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , newValues , NUMBER_CONSTANT , NUMBER_CONSTANT , newValues ) ;
Code	getValues getValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , newValues , NUMBER_CONSTANT , NUMBER_CONSTANT , newValues ) ;
Distance : 10

44
Tree	getValues compare = new getValues ( iChronology , getValues , newValues , this . iChronology . getDurationType () ) ;
Code	getValues compare = new getValues ( iChronology , getValues , newValues , this . iChronology . getDurationType () ) ;
Distance : 11

45
Tree	getValues newValues = new Partial ( iChronology , getValues , newValues , this . iChronology . getDurationType () ) ;
Code	getValues newValues = new Partial ( iChronology , getValues , newValues , this . iChronology . getDurationType () ) ;
Distance : 10

46
Tree	getValues compare = new newValues ( iChronology , getValues , false ) ;
Code	getValues compare = new newValues ( iChronology , getValues , false ) ;
Distance : 6

47
Tree	getValues newValues = new getValues ( iChronology , getValues , newValues , this . iChronology . getDurationType () ) ;
Code	getValues newValues = new getValues ( iChronology , getValues , newValues , this . iChronology . getDurationType () ) ;
Distance : 11

48
Tree	getValues compare = new Partial ( iChronology , DateTimeFieldType , newValues ) ;
Code	getValues compare = new Partial ( iChronology , DateTimeFieldType , newValues ) ;
Distance : 5

49
Tree	getValues newValues = new with ( iChronology , getValues , false ) ;
Code	getValues newValues = new with ( iChronology , getValues , false ) ;
Distance : 6

50
Tree	getValues newValues = new getValues ( iChronology , getValues ) ;
Code	getValues newValues = new getValues ( iChronology , getValues ) ;
Distance : 7

51
Tree	getValues compare = new set ( iChronology , new getValues ( this ) ) ;
Code	getValues compare = new set ( iChronology , new getValues ( this ) ) ;
Distance : 9

52
Tree	getValues compare = new with ( iChronology , getValues , newValues , this . iChronology . getDurationType () ) ;
Code	getValues compare = new with ( iChronology , getValues , newValues , this . iChronology . getDurationType () ) ;
Distance : 11

53
Tree	getValues compare = new Partial ( iChronology , getValues , newValues , this . iChronology . newValues () ) ;
Code	getValues compare = new Partial ( iChronology , getValues , newValues , this . iChronology . newValues () ) ;
Distance : 10

54
Tree	getValues compare = new with ( iChronology , getValues ) ;
Code	getValues compare = new with ( iChronology , getValues ) ;
Distance : 7

55
Tree	getValues compare = new newValues ( iChronology , new getValues ( this ) ) ;
Code	getValues compare = new newValues ( iChronology , new getValues ( this ) ) ;
Distance : 9

56
Tree	getValues compare = new getValues ( iChronology , getValues , newValues , this . iChronology . newValues () ) ;
Code	getValues compare = new getValues ( iChronology , getValues , newValues , this . iChronology . newValues () ) ;
Distance : 11

57
Tree	getValues compare = new set ( iChronology , getValues , newValues ) ;
Code	getValues compare = new set ( iChronology , getValues , newValues ) ;
Distance : 6

58
Tree	getValues newValues = new Partial ( iChronology , new getValues ( iChronology ) ) ;
Code	getValues newValues = new Partial ( iChronology , new getValues ( iChronology ) ) ;
Distance : 7

59
Tree	getValues compare = new getValues ( iChronology , DateTimeFieldType , newValues ) ;
Code	getValues compare = new getValues ( iChronology , DateTimeFieldType , newValues ) ;
Distance : 6

60
Tree	getValues compare = new Partial ( iChronology , DateTimeFieldType , newValues , this . iChronology . getDurationType () ) ;
Code	getValues compare = new Partial ( iChronology , DateTimeFieldType , newValues , this . iChronology . getDurationType () ) ;
Distance : 10

61
Tree	getValues newValues = new with ( iChronology , new getValues ( this ) ) ;
Code	getValues newValues = new with ( iChronology , new getValues ( this ) ) ;
Distance : 9

62
Tree	getValues compare = new set ( iChronology , getValues , newValues , newValues ) ;
Code	getValues compare = new set ( iChronology , getValues , newValues , newValues ) ;
Distance : 7

63
Tree	getValues compare = new set ( iChronology , getValues , newValues , this . iChronology . getDurationType () ) ;
Code	getValues compare = new set ( iChronology , getValues , newValues , this . iChronology . getDurationType () ) ;
Distance : 11

64
Tree	getValues compare = new Partial ( iChronology , getValues , newValues , newValues , null ) ;
Code	getValues compare = new Partial ( iChronology , getValues , newValues , newValues , null ) ;
Distance : 8

65
Tree	getValues compare = new getValues ( iChronology , DateTimeFieldType , newValues , this . iChronology . getDurationType () ) ;
Code	getValues compare = new getValues ( iChronology , DateTimeFieldType , newValues , this . iChronology . getDurationType () ) ;
Distance : 11

66
Tree	getValues compare = new newValues ( iChronology , getValues , newValues ) ;
Code	getValues compare = new newValues ( iChronology , getValues , newValues ) ;
Distance : 6

67
Tree	getValues newValues = new getValues ( iChronology , new getValues ( iChronology ) ) ;
Code	getValues newValues = new getValues ( iChronology , new getValues ( iChronology ) ) ;
Distance : 8

68
Tree	getValues newValues = new with ( iChronology , getValues , newValues ) ;
Code	getValues newValues = new with ( iChronology , getValues , newValues ) ;
Distance : 6

69
Tree	getValues newValues = new getValues ( iChronology , getValues , false ) ;
Code	getValues newValues = new getValues ( iChronology , getValues , false ) ;
Distance : 6

70
Tree	getValues compare = new getValues ( iChronology , getValues , newValues , newValues , null ) ;
Code	getValues compare = new getValues ( iChronology , getValues , newValues , newValues , null ) ;
Distance : 9

71
Tree	getValues getValues = new Partial ( iChronology , new getValues ( this ) ) ;
Code	getValues getValues = new Partial ( iChronology , new getValues ( this ) ) ;
Distance : 8

72
Tree	getValues compare = new Partial ( iChronology , getValues , newValues , newValues . getDurationType () ) ;
Code	getValues compare = new Partial ( iChronology , getValues , newValues , newValues . getDurationType () ) ;
Distance : 9

73
Tree	getValues compare = new Partial ( iChronology . getDurationType () , DateTimeFieldType , newValues ) ;
Code	getValues compare = new Partial ( iChronology . getDurationType () , DateTimeFieldType , newValues ) ;
Distance : 8

74
Tree	getValues compare = new with ( iChronology , getValues , newValues , newValues , null ) ;
Code	getValues compare = new with ( iChronology , getValues , newValues , newValues , null ) ;
Distance : 9

75
Tree	getValues compare = new newValues ( iChronology , getValues , newValues , newValues ) ;
Code	getValues compare = new newValues ( iChronology , getValues , newValues , newValues ) ;
Distance : 7

76
Tree	getValues compare = new with ( iChronology , getValues , newValues , newValues . getDurationType () ) ;
Code	getValues compare = new with ( iChronology , getValues , newValues , newValues . getDurationType () ) ;
Distance : 10

77
Tree	getValues compare = new getValues ( iChronology . getDurationType () , DateTimeFieldType , newValues ) ;
Code	getValues compare = new getValues ( iChronology . getDurationType () , DateTimeFieldType , newValues ) ;
Distance : 9

78
Tree	getValues newValues = new Partial ( iChronology , getValues , newValues , newValues . getValue () ) ;
Code	getValues newValues = new Partial ( iChronology , getValues , newValues , newValues . getValue () ) ;
Distance : 9

79
Tree	getValues compare = new Partial ( iChronology , DateTimeFieldType ) ;
Code	getValues compare = new Partial ( iChronology , DateTimeFieldType ) ;
Distance : 6

80
Tree	getValues getValues = new getValues ( iChronology , new getValues ( this ) ) ;
Code	getValues getValues = new getValues ( iChronology , new getValues ( this ) ) ;
Distance : 9

81
Tree	getValues compare = new getValues ( iChronology , getValues , newValues , newValues . getDurationType () ) ;
Code	getValues compare = new getValues ( iChronology , getValues , newValues , newValues . getDurationType () ) ;
Distance : 10

82
Tree	getValues newValues = new with ( iChronology , getValues , newValues , newValues ) ;
Code	getValues newValues = new with ( iChronology , getValues , newValues , newValues ) ;
Distance : 7

83
Tree	getValues newValues = new getValues ( iChronology , getValues , newValues , newValues . getValue () ) ;
Code	getValues newValues = new getValues ( iChronology , getValues , newValues , newValues . getValue () ) ;
Distance : 10

84
Tree	getValues compare = new Partial ( iChronology , DateTimeFieldType , newValues , newValues , null ) ;
Code	getValues compare = new Partial ( iChronology , DateTimeFieldType , newValues , newValues , null ) ;
Distance : 8

85
Tree	getValues compare = new getValues ( iChronology , DateTimeFieldType , newValues , newValues , null ) ;
Code	getValues compare = new getValues ( iChronology , DateTimeFieldType , newValues , newValues , null ) ;
Distance : 9

86
Tree	getValues compare = new set ( iChronology , getValues , newValues , newValues , null ) ;
Code	getValues compare = new set ( iChronology , getValues , newValues , newValues , null ) ;
Distance : 9

87
Tree	getValues compare = new with ( iChronology , getValues , false ) ;
Code	getValues compare = new with ( iChronology , getValues , false ) ;
Distance : 6

88
Tree	getValues compare = new Partial ( iChronology , getValues , newValues , newValues . getValue () ) ;
Code	getValues compare = new Partial ( iChronology , getValues , newValues , newValues . getValue () ) ;
Distance : 9

89
Tree	getValues compare = new getValues ( NUMBER_CONSTANT , NUMBER_CONSTANT , newValues , NUMBER_CONSTANT , NUMBER_CONSTANT , newValues ) ;
Code	getValues compare = new getValues ( NUMBER_CONSTANT , NUMBER_CONSTANT , newValues , NUMBER_CONSTANT , NUMBER_CONSTANT , newValues ) ;
Distance : 11

90
Tree	getValues compare = new Partial ( iChronology , DateTimeFieldType , newValues , newValues . getDurationType () ) ;
Code	getValues compare = new Partial ( iChronology , DateTimeFieldType , newValues , newValues . getDurationType () ) ;
Distance : 9

91
Tree	getValues compare = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , newValues , NUMBER_CONSTANT , NUMBER_CONSTANT , newValues ) ;
Code	getValues compare = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , newValues , NUMBER_CONSTANT , NUMBER_CONSTANT , newValues ) ;
Distance : 10

92
Tree	getValues newValues = new Partial ( iChronology , getValues , newValues . newValues () ) ;
Code	getValues newValues = new Partial ( iChronology , getValues , newValues . newValues () ) ;
Distance : 8

93
Tree	getValues newValues = new getValues ( iChronology , getValues , newValues . newValues () ) ;
Code	getValues newValues = new getValues ( iChronology , getValues , newValues . newValues () ) ;
Distance : 9

94
Tree	getValues compare = new Partial ( iChronology , getValues , newValues ) ;
Code	getValues compare = new Partial ( iChronology , getValues , newValues ) ;
Distance : 5

95
Tree	getValues compare = new getValues ( iChronology , getValues , newValues ) ;
Code	getValues compare = new getValues ( iChronology , getValues , newValues ) ;
Distance : 6

96
Tree	getValues getValues = new Partial ( iChronology . getDurationType () , DateTimeFieldType , newValues ) ;
Code	getValues getValues = new Partial ( iChronology . getDurationType () , DateTimeFieldType , newValues ) ;
Distance : 8

97
Tree	getValues newValues = new getValues ( NUMBER_CONSTANT , NUMBER_CONSTANT , newValues , NUMBER_CONSTANT , NUMBER_CONSTANT , newValues ) ;
Code	getValues newValues = new getValues ( NUMBER_CONSTANT , NUMBER_CONSTANT , newValues , NUMBER_CONSTANT , NUMBER_CONSTANT , newValues ) ;
Distance : 11

98
Tree	getValues getValues = new getValues ( iChronology . getDurationType () , DateTimeFieldType , newValues ) ;
Code	getValues getValues = new getValues ( iChronology . getDurationType () , DateTimeFieldType , newValues ) ;
Distance : 9

99
Tree	getValues compare = new with ( iChronology , getValues , newValues . newValues () ) ;
Code	getValues compare = new with ( iChronology , getValues , newValues . newValues () ) ;
Distance : 9

100
Tree	getValues compare = new Partial ( iChronology , DateTimeFieldType , newValues . newValues () ) ;
Code	getValues compare = new Partial ( iChronology , DateTimeFieldType , newValues . newValues () ) ;
Distance : 8

101
Tree	getValues newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , newValues , NUMBER_CONSTANT , NUMBER_CONSTANT , newValues ) ;
Code	getValues newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , newValues , NUMBER_CONSTANT , NUMBER_CONSTANT , newValues ) ;
Distance : 10

102
Tree	getValues compare = new set ( iChronology , getValues , newValues . newValues () ) ;
Code	getValues compare = new set ( iChronology , getValues , newValues . newValues () ) ;
Distance : 9

103
Tree	getValues compare = new getValues ( iChronology , DateTimeFieldType , newValues . newValues () ) ;
Code	getValues compare = new getValues ( iChronology , DateTimeFieldType , newValues . newValues () ) ;
Distance : 9

104
Tree	getValues newValues = new Partial ( iChronology , getValues , newValues ) ;
Code	getValues newValues = new Partial ( iChronology , getValues , newValues ) ;
Distance : 5

105
Tree	getValues compare = new with ( NUMBER_CONSTANT , NUMBER_CONSTANT , newValues , NUMBER_CONSTANT , NUMBER_CONSTANT , newValues ) ;
Code	getValues compare = new with ( NUMBER_CONSTANT , NUMBER_CONSTANT , newValues , NUMBER_CONSTANT , NUMBER_CONSTANT , newValues ) ;
Distance : 11

106
Tree	getValues compare = new newValues ( iChronology , getValues , newValues . newValues () ) ;
Code	getValues compare = new newValues ( iChronology , getValues , newValues . newValues () ) ;
Distance : 9

107
Tree	getValues newValues = new getValues ( iChronology , getValues , newValues ) ;
Code	getValues newValues = new getValues ( iChronology , getValues , newValues ) ;
Distance : 6

108
Tree	getValues newValues = new with ( iChronology , getValues , newValues . newValues () ) ;
Code	getValues newValues = new with ( iChronology , getValues , newValues . newValues () ) ;
Distance : 9

109
Tree	getValues compare = new set ( NUMBER_CONSTANT , NUMBER_CONSTANT , newValues , NUMBER_CONSTANT , NUMBER_CONSTANT , newValues ) ;
Code	getValues compare = new set ( NUMBER_CONSTANT , NUMBER_CONSTANT , newValues , NUMBER_CONSTANT , NUMBER_CONSTANT , newValues ) ;
Distance : 11

110
Tree	getValues compare = new Partial ( iChronology , new getValues ( this ) ) ;
Code	getValues compare = new Partial ( iChronology , new getValues ( this ) ) ;
Distance : 8

111
Tree	getValues compare = new getValues ( iChronology , new getValues ( this ) ) ;
Code	getValues compare = new getValues ( iChronology , new getValues ( this ) ) ;
Distance : 9

112
Tree	getValues compare = new Partial ( iChronology , getValues ) ;
Code	getValues compare = new Partial ( iChronology , getValues ) ;
Distance : 6

113
Tree	getValues compare = new getValues ( iChronology , getValues ) ;
Code	getValues compare = new getValues ( iChronology , getValues ) ;
Distance : 7

114
Tree	getValues newValues = new Partial ( iChronology , new getValues ( this ) ) ;
Code	getValues newValues = new Partial ( iChronology , new getValues ( this ) ) ;
Distance : 8

115
Tree	getValues compare = new Partial ( iChronology , getValues , newValues , getDurationType () ) ;
Code	getValues compare = new Partial ( iChronology , getValues , newValues , getDurationType () ) ;
Distance : 7

116
Tree	getValues compare = new getValues ( iChronology , getValues , newValues , getDurationType () ) ;
Code	getValues compare = new getValues ( iChronology , getValues , newValues , getDurationType () ) ;
Distance : 8

117
Tree	getValues newValues = new getValues ( iChronology , new getValues ( this ) ) ;
Code	getValues newValues = new getValues ( iChronology , new getValues ( this ) ) ;
Distance : 9

118
Tree	getValues compare = new Partial ( iChronology , DateTimeFieldType , newValues , null ) ;
Code	getValues compare = new Partial ( iChronology , DateTimeFieldType , newValues , null ) ;
Distance : 6

119
Tree	getValues compare = new Partial ( iChronology , DateTimeFieldType , newValues , newValues () ) ;
Code	getValues compare = new Partial ( iChronology , DateTimeFieldType , newValues , newValues () ) ;
Distance : 7

120
Tree	getValues compare = new getValues ( iChronology , DateTimeFieldType ) ;
Code	getValues compare = new getValues ( iChronology , DateTimeFieldType ) ;
Distance : 7

121
Tree	getValues compare = new set ( iChronology , getValues , newValues , null ) ;
Code	getValues compare = new set ( iChronology , getValues , newValues , null ) ;
Distance : 7

122
Tree	getValues compare = new set ( iChronology , getValues ) ;
Code	getValues compare = new set ( iChronology , getValues ) ;
Distance : 7

123
Tree	getValues compare = new Partial ( iChronology , new getValues ( iChronology ) ) ;
Code	getValues compare = new Partial ( iChronology , new getValues ( iChronology ) ) ;
Distance : 7

124
Tree	getValues compare = new with ( iChronology , new getValues ( iChronology ) ) ;
Code	getValues compare = new with ( iChronology , new getValues ( iChronology ) ) ;
Distance : 8

125
Tree	getValues compare = new getValues ( iChronology , new getValues ( iChronology ) ) ;
Code	getValues compare = new getValues ( iChronology , new getValues ( iChronology ) ) ;
Distance : 8

126
Tree	getValues compare = new newValues ( iChronology , getValues ) ;
Code	getValues compare = new newValues ( iChronology , getValues ) ;
Distance : 7

127
Tree	getValues compare = new getValues ( iChronology , DateTimeFieldType , newValues , null ) ;
Code	getValues compare = new getValues ( iChronology , DateTimeFieldType , newValues , null ) ;
Distance : 7

128
Tree	getValues newValues = new with ( iChronology , getValues ) ;
Code	getValues newValues = new with ( iChronology , getValues ) ;
Distance : 7

129
Tree	getValues compare = new getValues ( iChronology , DateTimeFieldType , newValues , newValues () ) ;
Code	getValues compare = new getValues ( iChronology , DateTimeFieldType , newValues , newValues () ) ;
Distance : 8

130
Tree	getValues compare = new set ( iChronology , getValues , newValues , newValues () ) ;
Code	getValues compare = new set ( iChronology , getValues , newValues , newValues () ) ;
Distance : 8

131
Tree	getValues compare = new set ( iChronology , new getValues ( iChronology ) ) ;
Code	getValues compare = new set ( iChronology , new getValues ( iChronology ) ) ;
Distance : 8

132
Tree	getValues compare = new with ( iChronology , new getValues ( this ) ) ;
Code	getValues compare = new with ( iChronology , new getValues ( this ) ) ;
Distance : 9

133
Tree	getValues newValues = new Partial ( iChronology , getValues ) ;
Code	getValues newValues = new Partial ( iChronology , getValues ) ;
Distance : 6

134
Tree	getValues compare = new newValues ( iChronology , new getValues ( iChronology ) ) ;
Code	getValues compare = new newValues ( iChronology , new getValues ( iChronology ) ) ;
Distance : 8

135
Tree	getValues newValues = new with ( iChronology , new getValues ( iChronology ) ) ;
Code	getValues newValues = new with ( iChronology , new getValues ( iChronology ) ) ;
Distance : 8

136
Tree	getValues compare = new newValues ( iChronology , getValues , newValues , null ) ;
Code	getValues compare = new newValues ( iChronology , getValues , newValues , null ) ;
Distance : 7

137
Tree	getValues compare = Partial . getValues ( getDurationType , NUMBER_CONSTANT ) ;
Code	getValues compare = Partial . getValues ( getDurationType , NUMBER_CONSTANT ) ;
Distance : 8

138
Tree	getValues getValues = new Partial ( iChronology , new getValues ( iChronology ) ) ;
Code	getValues getValues = new Partial ( iChronology , new getValues ( iChronology ) ) ;
Distance : 7

139
Tree	getValues getValues = new getValues ( iChronology , new getValues ( iChronology ) ) ;
Code	getValues getValues = new getValues ( iChronology , new getValues ( iChronology ) ) ;
Distance : 8

140
Tree	getValues compare = new Partial ( iChronology , getValues , newValues , newValues . getDurationType ( iChronology ) ) ;
Code	getValues compare = new Partial ( iChronology , getValues , newValues , newValues . getDurationType ( iChronology ) ) ;
Distance : 10

141
Tree	getValues compare = new getValues ( iChronology , getValues , newValues , newValues . getDurationType ( iChronology ) ) ;
Code	getValues compare = new getValues ( iChronology , getValues , newValues , newValues . getDurationType ( iChronology ) ) ;
Distance : 11

142
Tree	getValues compare = new Partial ( iChronology , getValues , newValues , newValues . getValue ( iChronology ) ) ;
Code	getValues compare = new Partial ( iChronology , getValues , newValues , newValues . getValue ( iChronology ) ) ;
Distance : 10

143
Tree	getValues compare = new getValues ( iChronology , getValues , newValues , newValues . getValue ( iChronology ) ) ;
Code	getValues compare = new getValues ( iChronology , getValues , newValues , newValues . getValue ( iChronology ) ) ;
Distance : 11

144
Tree	getValues newValues = new Partial ( iChronology , getValues , newValues , newValues . getDurationType ( iChronology ) ) ;
Code	getValues newValues = new Partial ( iChronology , getValues , newValues , newValues . getDurationType ( iChronology ) ) ;
Distance : 10

145
Tree	getValues compare = new set ( iChronology , this , newValues ) ;
Code	getValues compare = new set ( iChronology , this , newValues ) ;
Distance : 6

146
Tree	getValues compare = new newValues ( iChronology , this , newValues ) ;
Code	getValues compare = new newValues ( iChronology , this , newValues ) ;
Distance : 6

147
Tree	getValues compare = new set ( this , iChronology , newValues , newValues ) ;
Code	getValues compare = new set ( this , iChronology , newValues , newValues ) ;
Distance : 7

148
Tree	getValues newValues = new with ( iChronology , this , newValues ) ;
Code	getValues newValues = new with ( iChronology , this , newValues ) ;
Distance : 6

149
Tree	getValues newValues = new getValues ( iChronology , getValues , newValues , newValues . getDurationType ( iChronology ) ) ;
Code	getValues newValues = new getValues ( iChronology , getValues , newValues , newValues . getDurationType ( iChronology ) ) ;
Distance : 11

150
Tree	getValues getValues = new Partial ( iChronology , this , newValues ) ;
Code	getValues getValues = new Partial ( iChronology , this , newValues ) ;
Distance : 5

151
Tree	getValues compare = new with ( iChronology , getValues , newValues , newValues . getDurationType ( iChronology ) ) ;
Code	getValues compare = new with ( iChronology , getValues , newValues , newValues . getDurationType ( iChronology ) ) ;
Distance : 11

152
Tree	getValues getValues = new getValues ( iChronology , this , newValues ) ;
Code	getValues getValues = new getValues ( iChronology , this , newValues ) ;
Distance : 6

153
Tree	getValues newValues = new Partial ( iChronology , getValues , newValues , newValues . getValue ( iChronology ) ) ;
Code	getValues newValues = new Partial ( iChronology , getValues , newValues , newValues . getValue ( iChronology ) ) ;
Distance : 10

154
Tree	getValues compare = new newValues ( this , iChronology , newValues , newValues ) ;
Code	getValues compare = new newValues ( this , iChronology , newValues , newValues ) ;
Distance : 7

155
Tree	getValues newValues = new with ( this , iChronology , newValues , newValues ) ;
Code	getValues newValues = new with ( this , iChronology , newValues , newValues ) ;
Distance : 7

156
Tree	getValues newValues = new getValues ( iChronology , getValues , newValues , newValues . getValue ( iChronology ) ) ;
Code	getValues newValues = new getValues ( iChronology , getValues , newValues , newValues . getValue ( iChronology ) ) ;
Distance : 11

157
Tree	getValues compare = new Partial ( iChronology , DateTimeFieldType , newValues , newValues . getDurationType ( iChronology ) ) ;
Code	getValues compare = new Partial ( iChronology , DateTimeFieldType , newValues , newValues . getDurationType ( iChronology ) ) ;
Distance : 10

158
Tree	getValues getValues = new Partial ( this , iChronology , newValues , newValues ) ;
Code	getValues getValues = new Partial ( this , iChronology , newValues , newValues ) ;
Distance : 6

159
Tree	getValues getValues = new getValues ( this , iChronology , newValues , newValues ) ;
Code	getValues getValues = new getValues ( this , iChronology , newValues , newValues ) ;
Distance : 7

160
Tree	getValues compare = new newValues ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Code	getValues compare = new newValues ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Distance : 7

161
Tree	getValues newValues = new with ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Code	getValues newValues = new with ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Distance : 7

162
Tree	getValues compare = new with ( NUMBER_CONSTANT , iChronology . newValues () ) ;
Code	getValues compare = new with ( NUMBER_CONSTANT , iChronology . newValues () ) ;
Distance : 8

163
Tree	getValues getValues = new Partial ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Code	getValues getValues = new Partial ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Distance : 6

164
Tree	getValues getValues = new getValues ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Code	getValues getValues = new getValues ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Distance : 7

165
Tree	getValues compare = new Partial ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Code	getValues compare = new Partial ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Distance : 6

166
Tree	getValues compare = new getValues ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Code	getValues compare = new getValues ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Distance : 7

167
Tree	getValues compare = new Partial ( NUMBER_CONSTANT , iChronology . getDurationType () ) ;
Code	getValues compare = new Partial ( NUMBER_CONSTANT , iChronology . getDurationType () ) ;
Distance : 7

168
Tree	getValues newValues = new Partial ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Code	getValues newValues = new Partial ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Distance : 6

169
Tree	getValues compare = new Partial ( NUMBER_CONSTANT , iChronology . newValues () ) ;
Code	getValues compare = new Partial ( NUMBER_CONSTANT , iChronology . newValues () ) ;
Distance : 7

170
Tree	getValues newValues = new getValues ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Code	getValues newValues = new getValues ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Distance : 7

171
Tree	getValues compare = new set ( NUMBER_CONSTANT , iChronology . newValues () ) ;
Code	getValues compare = new set ( NUMBER_CONSTANT , iChronology . newValues () ) ;
Distance : 8

172
Tree	getValues compare = new getValues ( NUMBER_CONSTANT , iChronology . getDurationType () ) ;
Code	getValues compare = new getValues ( NUMBER_CONSTANT , iChronology . getDurationType () ) ;
Distance : 8

173
Tree	getValues compare = new getValues ( NUMBER_CONSTANT , iChronology . newValues () ) ;
Code	getValues compare = new getValues ( NUMBER_CONSTANT , iChronology . newValues () ) ;
Distance : 8

174
Tree	getValues compare = new newValues ( NUMBER_CONSTANT , iChronology . newValues () ) ;
Code	getValues compare = new newValues ( NUMBER_CONSTANT , iChronology . newValues () ) ;
Distance : 8

175
Tree	getValues compare = new with ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Code	getValues compare = new with ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Distance : 7

176
Tree	getValues newValues = new with ( NUMBER_CONSTANT , iChronology . newValues () ) ;
Code	getValues newValues = new with ( NUMBER_CONSTANT , iChronology . newValues () ) ;
Distance : 8

177
Tree	getValues newValues = new Partial ( NUMBER_CONSTANT , iChronology . newValues () ) ;
Code	getValues newValues = new Partial ( NUMBER_CONSTANT , iChronology . newValues () ) ;
Distance : 7

178
Tree	getValues newValues = new getValues ( NUMBER_CONSTANT , iChronology . newValues () ) ;
Code	getValues newValues = new getValues ( NUMBER_CONSTANT , iChronology . newValues () ) ;
Distance : 8

179
Tree	getValues compare = new set ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Code	getValues compare = new set ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Distance : 7

180
Tree	getValues compare = new Partial ( iChronology , this , newValues ) ;
Code	getValues compare = new Partial ( iChronology , this , newValues ) ;
Distance : 5

181
Tree	getValues compare = new getValues ( iChronology , this , newValues ) ;
Code	getValues compare = new getValues ( iChronology , this , newValues ) ;
Distance : 6

182
Tree	getValues compare = new Partial ( this , iChronology , newValues , newValues ) ;
Code	getValues compare = new Partial ( this , iChronology , newValues , newValues ) ;
Distance : 6

183
Tree	getValues compare = new getValues ( this , iChronology , newValues , newValues ) ;
Code	getValues compare = new getValues ( this , iChronology , newValues , newValues ) ;
Distance : 7

184
Tree	getValues compare = new Partial ( iChronology , getValues , newValues , null ) ;
Code	getValues compare = new Partial ( iChronology , getValues , newValues , null ) ;
Distance : 6

185
Tree	getValues compare = new Partial ( iChronology , getValues , newValues , newValues () ) ;
Code	getValues compare = new Partial ( iChronology , getValues , newValues , newValues () ) ;
Distance : 7

186
Tree	getValues compare = new getValues ( iChronology , getValues , newValues , null ) ;
Code	getValues compare = new getValues ( iChronology , getValues , newValues , null ) ;
Distance : 7

187
Tree	getValues newValues = new Partial ( iChronology , this , newValues ) ;
Code	getValues newValues = new Partial ( iChronology , this , newValues ) ;
Distance : 5

188
Tree	getValues compare = new getValues ( iChronology , getValues , newValues , newValues () ) ;
Code	getValues compare = new getValues ( iChronology , getValues , newValues , newValues () ) ;
Distance : 8

189
Tree	getValues newValues = new Partial ( iChronology , getValues , newValues , null ) ;
Code	getValues newValues = new Partial ( iChronology , getValues , newValues , null ) ;
Distance : 6

190
Tree	getValues newValues = new getValues ( iChronology , this , newValues ) ;
Code	getValues newValues = new getValues ( iChronology , this , newValues ) ;
Distance : 6

191
Tree	getValues newValues = new getValues ( iChronology , getValues , newValues , null ) ;
Code	getValues newValues = new getValues ( iChronology , getValues , newValues , null ) ;
Distance : 7

192
Tree	getValues newValues = new Partial ( this , iChronology , newValues , newValues ) ;
Code	getValues newValues = new Partial ( this , iChronology , newValues , newValues ) ;
Distance : 6

193
Tree	getValues newValues = new getValues ( this , iChronology , newValues , newValues ) ;
Code	getValues newValues = new getValues ( this , iChronology , newValues , newValues ) ;
Distance : 7

194
Tree	getValues newValues = new Partial ( iChronology , getValues , newValues , newValues () ) ;
Code	getValues newValues = new Partial ( iChronology , getValues , newValues , newValues () ) ;
Distance : 7

195
Tree	getValues newValues = new getValues ( iChronology , getValues , newValues , newValues () ) ;
Code	getValues newValues = new getValues ( iChronology , getValues , newValues , newValues () ) ;
Distance : 8

196
Tree	getValues compare = new with ( iChronology , this , newValues ) ;
Code	getValues compare = new with ( iChronology , this , newValues ) ;
Distance : 6

197
Tree	getValues compare = new with ( this , iChronology , newValues , newValues ) ;
Code	getValues compare = new with ( this , iChronology , newValues , newValues ) ;
Distance : 7

198
Tree	getValues compare = new with ( iChronology , getValues , newValues , null ) ;
Code	getValues compare = new with ( iChronology , getValues , newValues , null ) ;
Distance : 7

199
Tree	getValues compare = new with ( iChronology , getValues , newValues , newValues () ) ;
Code	getValues compare = new with ( iChronology , getValues , newValues , newValues () ) ;
Distance : 8

========================================================================


