========================================================================
Example Number: 1
Parent Code is: 
( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
-------------------------------------------------------------------------------
Child code is: 
( int ) ( ( v - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (11 (214{val=(}) (39{val=int}) (215{val=)}) (36 (214{val=(}) (27 (27 (36 (214{val=(}) (27 (800{val=value}) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)})) (203{val=/}) (36 (214{val=(}) (27 (22 (315{val=this}) (235{val=.}) (800{val=upperBound})) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)}))) (202{val=*}) (34{val=NUMBER_CONSTANT})) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (11 (214{val=(}) (39{val=int}) (215{val=)}) (36 (214{val=(}) (27 (27 (36 (214{val=(}) (27 (800{val=v}) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)})) (203{val=/}) (36 (214{val=(}) (27 (22 (315{val=this}) (235{val=.}) (800{val=upperBound})) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)}))) (202{val=*}) (34{val=NUMBER_CONSTANT})) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/24/parent/source_org_jfree_chart_renderer_GrayPaintScale.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 12
Wrong
========================================================================
False

0
Tree	flag
Code	flag
Distance : 24

1
Tree	calendar
Code	calendar
Distance : 24

2
Tree	this
Code	this
Distance : 23

3
Tree	int
Code	int
Distance : 23

4
Tree	( value / value - - )
Code	( value / value - - )
Distance : 20

5
Tree	( value / value - ] )
Code	( value / value - ] )
Distance : 20

6
Tree	( int / value - - )
Code	( int / value - - )
Distance : 19

7
Tree	( value / value - ? )
Code	( value / value - ? )
Distance : 20

8
Tree	( int ) ( ( int - this . lowerBound ) / ( this . lowerBound - this . value ) * NUMBER_CONSTANT )
Code	( int ) ( ( int - this . lowerBound ) / ( this . lowerBound - this . value ) * NUMBER_CONSTANT )
Distance : 3

9
Tree	( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . value ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . value ) * NUMBER_CONSTANT )
Distance : 2

10
Tree	( int ) ( ( int - this . upperBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( int - this . upperBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

11
Tree	( int ) ( ( value - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

========================================================================


========================================================================
Example Number: 2
Parent Code is: 
{ super ( paint , stroke , paint , stroke , alpha ) ; this . value = value ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( paint , stroke , outlinePaint , outlineStroke , alpha ) ; this . value = value ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=alpha}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=value})) (204{val==}) (800{val=value})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=outlinePaint}) (234{val=,}) (800{val=outlineStroke}) (234{val=,}) (800{val=alpha}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=value})) (204{val==}) (800{val=value})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/20/parent/source_org_jfree_chart_plot_ValueMarker.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 120
Wrong
========================================================================
False

0
Tree	{ super ( stroke ) ; this . value = paint ; }
Code	{ super ( stroke ) ; this . value = paint ; }
Distance : 9

1
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = paint ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = paint ; }
Distance : 9

2
Tree	{ super ( STRING_CONSTANT ) ; this . value = paint ; }
Code	{ super ( STRING_CONSTANT ) ; this . value = paint ; }
Distance : 10

3
Tree	{ super ( paint ) ; this . value = paint ; }
Code	{ super ( paint ) ; this . value = paint ; }
Distance : 9

4
Tree	{ super ( paint , stroke , outlineStroke ) ; this . value = paint . clone () ; }
Code	{ super ( paint , stroke , outlineStroke ) ; this . value = paint . clone () ; }
Distance : 8

5
Tree	{ super ( stroke , stroke , outlineStroke ) ; this . value = paint . valueOf () ; }
Code	{ super ( stroke , stroke , outlineStroke ) ; this . value = paint . valueOf () ; }
Distance : 9

6
Tree	{ super ( stroke , paint , outlineStroke , stroke ) ; this . value = paint ; }
Code	{ super ( stroke , paint , outlineStroke , stroke ) ; this . value = paint ; }
Distance : 5

7
Tree	{ super ( paint , stroke , outlineStroke , stroke ) ; this . value = paint ; }
Code	{ super ( paint , stroke , outlineStroke , stroke ) ; this . value = paint ; }
Distance : 4

8
Tree	{ super ( stroke ? ] : Year.MAXIMUM_YEAR ) ; this . value = paint ; }
Code	{ super ( stroke ? ] : Year.MAXIMUM_YEAR ) ; this . value = paint ; }
Distance : 9

9
Tree	{ super ( stroke ? Year.MINIMUM_YEAR : Year.MAXIMUM_YEAR ) ; this . value = paint ; }
Code	{ super ( stroke ? Year.MINIMUM_YEAR : Year.MAXIMUM_YEAR ) ; this . value = paint ; }
Distance : 9

10
Tree	{ super ( stroke ? BasicStroke : Year.MAXIMUM_YEAR ) ; this . value = paint ; }
Code	{ super ( stroke ? BasicStroke : Year.MAXIMUM_YEAR ) ; this . value = paint ; }
Distance : 9

11
Tree	{ super ( stroke , paint ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( stroke , paint ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 13

12
Tree	{ super ( STRING_CONSTANT ) ; this . value = stroke ; }
Code	{ super ( STRING_CONSTANT ) ; this . value = stroke ; }
Distance : 10

13
Tree	{ super ( stroke ) ; this . value = Color.RED ( paint ) ; }
Code	{ super ( stroke ) ; this . value = Color.RED ( paint ) ; }
Distance : 12

14
Tree	{ super ( stroke ) ; this . value = new GeneralPath ( stroke ) ; }
Code	{ super ( stroke ) ; this . value = new GeneralPath ( stroke ) ; }
Distance : 13

15
Tree	{ super ( stroke , paint ) ; }
Code	{ super ( stroke , paint ) ; }
Distance : 13

16
Tree	{ super ( stroke ) ; this . value = new GeneralPath ( outlineStroke ) ; }
Code	{ super ( stroke ) ; this . value = new GeneralPath ( outlineStroke ) ; }
Distance : 13

17
Tree	{ super ( [] , stroke , outlineStroke ) ; this . value = paint ; }
Code	{ super ( [] , stroke , outlineStroke ) ; this . value = paint ; }
Distance : 6

18
Tree	{ super ( stroke , stroke ) ; this . value = paint . clone () ; }
Code	{ super ( stroke , stroke ) ; this . value = paint . clone () ; }
Distance : 11

19
Tree	{ super ( stroke ? [] : Year.MAXIMUM_YEAR ) ; this . value = paint ; }
Code	{ super ( stroke ? [] : Year.MAXIMUM_YEAR ) ; this . value = paint ; }
Distance : 9

20
Tree	{ super ( null , stroke , stroke , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Code	{ super ( null , stroke , stroke , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Distance : 6

21
Tree	{ super ( stroke , outlineStroke ) ; }
Code	{ super ( stroke , outlineStroke ) ; }
Distance : 12

22
Tree	{ super ( stroke , paint ) ; this . value = paint . clone () ; }
Code	{ super ( stroke , paint ) ; this . value = paint . clone () ; }
Distance : 11

23
Tree	{ super ( paint , stroke ) ; this . value = paint . clone () ; }
Code	{ super ( paint , stroke ) ; this . value = paint . clone () ; }
Distance : 10

24
Tree	{ super ( paint , stroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( paint , stroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 10

25
Tree	{ super ( STRING_CONSTANT ) ; this . outlineStroke = paint ; }
Code	{ super ( STRING_CONSTANT ) ; this . outlineStroke = paint ; }
Distance : 11

26
Tree	{ super ( stroke , stroke , value ) ; this . value = paint ; }
Code	{ super ( stroke , stroke , value ) ; this . value = paint ; }
Distance : 7

27
Tree	{ super ( stroke , stroke ) ; this . value = paint . valueOf () ; }
Code	{ super ( stroke , stroke ) ; this . value = paint . valueOf () ; }
Distance : 11

28
Tree	{ super ( stroke , stroke ) ; this . value = paint ; }
Code	{ super ( stroke , stroke ) ; this . value = paint ; }
Distance : 8

29
Tree	{ super ( SeriesException , stroke , outlineStroke ) ; this . value = paint ; }
Code	{ super ( SeriesException , stroke , outlineStroke ) ; this . value = paint ; }
Distance : 6

30
Tree	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = paint . valueOf () ; }
Code	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = paint . valueOf () ; }
Distance : 8

31
Tree	{ super ( stroke , stroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( stroke , stroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 11

32
Tree	{ super ( value ) ; this . value = paint ; }
Code	{ super ( value ) ; this . value = paint ; }
Distance : 10

33
Tree	{ super ( stroke ) ; this . value = paint . clone () ; }
Code	{ super ( stroke ) ; this . value = paint . clone () ; }
Distance : 12

34
Tree	{ super ( outlinePaint ) ; this . value = paint ; }
Code	{ super ( outlinePaint ) ; this . value = paint ; }
Distance : 9

35
Tree	{ super ( stroke ) ; this . value = paint ; false }
Code	{ super ( stroke ) ; this . value = paint ; false }
Distance : 10

36
Tree	{ super ( [ , stroke , outlineStroke ) ; this . value = paint ; }
Code	{ super ( [ , stroke , outlineStroke ) ; this . value = paint ; }
Distance : 6

37
Tree	{ super ( null , stroke , outlinePaint , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Code	{ super ( null , stroke , outlinePaint , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Distance : 5

38
Tree	{ super ( stroke ) ; this . value = new GeneralPath ( paint ) ; }
Code	{ super ( stroke ) ; this . value = new GeneralPath ( paint ) ; }
Distance : 13

39
Tree	{ super ( stroke . getX () , stroke ) ; this . value = paint ; }
Code	{ super ( stroke . getX () , stroke ) ; this . value = paint ; }
Distance : 8

40
Tree	{ super ( paint ) ; this . value = paint . clone () ; }
Code	{ super ( paint ) ; this . value = paint . clone () ; }
Distance : 12

41
Tree	{ super ( stroke , paint , outlineStroke ) ; this . value = paint ; }
Code	{ super ( stroke , paint , outlineStroke ) ; this . value = paint ; }
Distance : 6

42
Tree	{ super ( stroke . class () , stroke ) ; this . value = paint ; }
Code	{ super ( stroke . class () , stroke ) ; this . value = paint ; }
Distance : 8

43
Tree	{ super ( paint , stroke ) ; }
Code	{ super ( paint , stroke ) ; }
Distance : 12

44
Tree	{ super ( value ) ; this . value = paint . clone () ; }
Code	{ super ( value ) ; this . value = paint . clone () ; }
Distance : 13

45
Tree	{ super ( [] , stroke ) ; this . value = paint ; }
Code	{ super ( [] , stroke ) ; this . value = paint ; }
Distance : 8

46
Tree	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 8

47
Tree	{ super ( paint ) ; this . value = paint ; if }
Code	{ super ( paint ) ; this . value = paint ; if }
Distance : 10

48
Tree	{ super ( stroke , paint , outlineStroke , stroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( stroke , paint , outlineStroke , stroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 8

49
Tree	{ super ( paint , stroke , outlineStroke , stroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( paint , stroke , outlineStroke , stroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 7

50
Tree	{ super ( stroke , stroke , outlineStroke ) ; this . value = paint . clone () ; }
Code	{ super ( stroke , stroke , outlineStroke ) ; this . value = paint . clone () ; }
Distance : 9

51
Tree	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = paint ; }
Code	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = paint ; }
Distance : 5

52
Tree	{ super ( SeriesException , stroke ) ; this . value = paint ; }
Code	{ super ( SeriesException , stroke ) ; this . value = paint ; }
Distance : 8

53
Tree	{ super ( stroke , paint , outlineStroke ) ; this . value = paint . clone () ; }
Code	{ super ( stroke , paint , outlineStroke ) ; this . value = paint . clone () ; }
Distance : 9

54
Tree	{ super ( stroke , stroke , outlineStroke , outlineStroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( stroke , stroke , outlineStroke , outlineStroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 8

55
Tree	{ super ( stroke ) ; this . value = new GeneralPath [ NUMBER_CONSTANT ] ; }
Code	{ super ( stroke ) ; this . value = new GeneralPath [ NUMBER_CONSTANT ] ; }
Distance : 13

56
Tree	{ super ( stroke , stroke ) ; this . value = new int [] { outlineStroke } ; }
Code	{ super ( stroke , stroke ) ; this . value = new int [] { outlineStroke } ; }
Distance : 13

57
Tree	{ super ( value != null ? outlineStroke : outlineStroke ) ; this . value = paint ; }
Code	{ super ( value != null ? outlineStroke : outlineStroke ) ; this . value = paint ; }
Distance : 9

58
Tree	{ super ( stroke ) ; this . value = getDefaultShadowsVisible ( stroke ) ; }
Code	{ super ( stroke ) ; this . value = getDefaultShadowsVisible ( stroke ) ; }
Distance : 12

59
Tree	{ super ( null , stroke , paint , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Code	{ super ( null , stroke , paint , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Distance : 6

60
Tree	{ super ( paint ) ; this . value = new GeneralPath [ NUMBER_CONSTANT ] ; }
Code	{ super ( paint ) ; this . value = new GeneralPath [ NUMBER_CONSTANT ] ; }
Distance : 13

61
Tree	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 10

62
Tree	{ super ( stroke , stroke ) ; }
Code	{ super ( stroke , stroke ) ; }
Distance : 13

63
Tree	{ super ( stroke , stroke , outlineStroke , outlineStroke ) ; this . value = paint ; }
Code	{ super ( stroke , stroke , outlineStroke , outlineStroke ) ; this . value = paint ; }
Distance : 5

64
Tree	{ super ( outlinePaint != null ? outlineStroke : outlineStroke ) ; this . value = paint ; }
Code	{ super ( outlinePaint != null ? outlineStroke : outlineStroke ) ; this . value = paint ; }
Distance : 9

65
Tree	{ super ( stroke ) ; this . value = new HashMap [ NUMBER_CONSTANT ] ; }
Code	{ super ( stroke ) ; this . value = new HashMap [ NUMBER_CONSTANT ] ; }
Distance : 13

66
Tree	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = new double [] { outlineStroke } ; }
Code	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = new double [] { outlineStroke } ; }
Distance : 10

67
Tree	{ super ( stroke , outlineStroke ) ; this . value = paint ; }
Code	{ super ( stroke , outlineStroke ) ; this . value = paint ; }
Distance : 7

68
Tree	{ super ( stroke , paint , outlineStroke , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( stroke , paint , outlineStroke , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 10

69
Tree	{ super ( stroke ) ; this . value = new java.util.ArrayList [ NUMBER_CONSTANT ] ; }
Code	{ super ( stroke ) ; this . value = new java.util.ArrayList [ NUMBER_CONSTANT ] ; }
Distance : 13

70
Tree	{ super ( stroke ) ; this . value = new GeneralPath ( outlinePaint ) ; }
Code	{ super ( stroke ) ; this . value = new GeneralPath ( outlinePaint ) ; }
Distance : 13

71
Tree	{ super ( stroke ) ; this . value = paint ; super }
Code	{ super ( stroke ) ; this . value = paint ; super }
Distance : 10

72
Tree	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = new int [] { outlineStroke } ; }
Code	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = new int [] { outlineStroke } ; }
Distance : 10

73
Tree	{ super ( stroke . valueOf () , stroke ) ; this . value = paint ; }
Code	{ super ( stroke . valueOf () , stroke ) ; this . value = paint ; }
Distance : 8

74
Tree	{ super ( stroke , paint ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( stroke , paint ) ; this . value = Color.RED ( stroke ) ; }
Distance : 11

75
Tree	{ super ( paint , stroke , outlineStroke ) ; this . value = paint ; }
Code	{ super ( paint , stroke , outlineStroke ) ; this . value = paint ; }
Distance : 5

76
Tree	{ super ( stroke ) ; this . value = new double [] { outlineStroke } ; }
Code	{ super ( stroke ) ; this . value = new double [] { outlineStroke } ; }
Distance : 14

77
Tree	{ super ( stroke , outlineStroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( stroke , outlineStroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 10

78
Tree	{ super ( stroke ) ; this . value = new int [] { outlineStroke } ; }
Code	{ super ( stroke ) ; this . value = new int [] { outlineStroke } ; }
Distance : 14

79
Tree	{ super ( stroke , paint , outlineStroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( stroke , paint , outlineStroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 9

80
Tree	{ super ( paint != null ? outlineStroke : outlineStroke ) ; this . value = paint ; }
Code	{ super ( paint != null ? outlineStroke : outlineStroke ) ; this . value = paint ; }
Distance : 8

81
Tree	{ super ( stroke ) ; this . value = paint ; if }
Code	{ super ( stroke ) ; this . value = paint ; if }
Distance : 10

82
Tree	{ super ( stroke ) ; this . value = new long [] { outlineStroke } ; }
Code	{ super ( stroke ) ; this . value = new long [] { outlineStroke } ; }
Distance : 14

83
Tree	{ super ( stroke ) ; this . value = paint . valueOf () ; }
Code	{ super ( stroke ) ; this . value = paint . valueOf () ; }
Distance : 12

84
Tree	{ super ( stroke , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( stroke , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 13

85
Tree	{ super ( [ , stroke ) ; this . value = paint ; }
Code	{ super ( [ , stroke ) ; this . value = paint ; }
Distance : 8

86
Tree	{ super ( stroke != null ? outlineStroke : outlineStroke ) ; this . value = paint ; }
Code	{ super ( stroke != null ? outlineStroke : outlineStroke ) ; this . value = paint ; }
Distance : 8

87
Tree	{ super ( stroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( stroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 12

88
Tree	{ super ( super , stroke ) ; this . value = paint ; }
Code	{ super ( super , stroke ) ; this . value = paint ; }
Distance : 8

89
Tree	{ super ( stroke , stroke , outlineStroke ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( stroke , stroke , outlineStroke ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 11

90
Tree	{ super ( stroke , paint , outlineStroke , stroke ) ; this . value = paint . clone () ; }
Code	{ super ( stroke , paint , outlineStroke , stroke ) ; this . value = paint . clone () ; }
Distance : 8

91
Tree	{ super ( stroke , stroke , outlineStroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( stroke , stroke , outlineStroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 9

92
Tree	{ super ( stroke , stroke , outlineStroke ) ; this . value = new double [] { outlineStroke } ; }
Code	{ super ( stroke , stroke , outlineStroke ) ; this . value = new double [] { outlineStroke } ; }
Distance : 11

93
Tree	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = paint . clone () ; }
Code	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = paint . clone () ; }
Distance : 8

94
Tree	{ super ( stroke , paint , outlineStroke ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( stroke , paint , outlineStroke ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 11

95
Tree	{ super ( super , stroke , outlineStroke ) ; this . value = paint ; }
Code	{ super ( super , stroke , outlineStroke ) ; this . value = paint ; }
Distance : 6

96
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = stroke ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = stroke ; }
Distance : 9

97
Tree	{ super ( stroke , paint ) ; this . value = paint ; }
Code	{ super ( stroke , paint ) ; this . value = paint ; }
Distance : 8

98
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . stroke = paint ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . stroke = paint ; }
Distance : 10

99
Tree	{ super ( stroke , stroke , outlineStroke ) ; this . value = new int [] { outlineStroke } ; }
Code	{ super ( stroke , stroke , outlineStroke ) ; this . value = new int [] { outlineStroke } ; }
Distance : 11

100
Tree	{ super ( paint ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( paint ) ; this . value = Color.RED ( stroke ) ; }
Distance : 12

101
Tree	{ super ( [ , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( [ , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 13

102
Tree	{ super ( paint , stroke ) ; this . value = paint ; }
Code	{ super ( paint , stroke ) ; this . value = paint ; }
Distance : 7

103
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . outlineStroke = paint ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . outlineStroke = paint ; }
Distance : 10

104
Tree	{ super ( paint , stroke , outlineStroke , stroke ) ; this . value = paint . clone () ; }
Code	{ super ( paint , stroke , outlineStroke , stroke ) ; this . value = paint . clone () ; }
Distance : 7

105
Tree	{ super ( STRING_CONSTANT ) ; this . stroke = paint ; }
Code	{ super ( STRING_CONSTANT ) ; this . stroke = paint ; }
Distance : 11

106
Tree	{ super ( stroke , stroke ) ; this . value = new double [] { outlineStroke } ; }
Code	{ super ( stroke , stroke ) ; this . value = new double [] { outlineStroke } ; }
Distance : 13

107
Tree	{ super ( paint , stroke , outlineStroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( paint , stroke , outlineStroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 8

108
Tree	{ super ( null , stroke , outlineStroke , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Code	{ super ( null , stroke , outlineStroke , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Distance : 6

109
Tree	{ super ( stroke , stroke , value ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( stroke , stroke , value ) ; this . value = Color.RED ( stroke ) ; }
Distance : 10

110
Tree	{ super ( [ , stroke ) ; this . value = new double [] { outlineStroke } ; }
Code	{ super ( [ , stroke ) ; this . value = new double [] { outlineStroke } ; }
Distance : 13

111
Tree	{ super ( stroke , stroke , outlineStroke ) ; this . value = paint ; }
Code	{ super ( stroke , stroke , outlineStroke ) ; this . value = paint ; }
Distance : 6

112
Tree	{ super ( super , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( super , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 13

113
Tree	{ super ( paint , stroke , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Code	{ super ( paint , stroke , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Distance : 4

114
Tree	{ super ( [] , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( [] , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 13

115
Tree	{ super ( stroke , stroke , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Code	{ super ( stroke , stroke , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Distance : 5

116
Tree	{ super ( stroke . min () , stroke ) ; this . value = paint ; }
Code	{ super ( stroke . min () , stroke ) ; this . value = paint ; }
Distance : 8

117
Tree	{ super ( stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 14

118
Tree	{ super ( stroke , paint , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Code	{ super ( stroke , paint , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Distance : 6

119
Tree	{ super ( stroke , stroke , outlineStroke , stroke , outlineStroke ) ; this . value = paint ; }
Code	{ super ( stroke , stroke , outlineStroke , stroke , outlineStroke ) ; this . value = paint ; }
Distance : 5

========================================================================


========================================================================
Example Number: 3
Parent Code is: 
if ( index < NUMBER_CONSTANT ) { return; }
-------------------------------------------------------------------------------
Child code is: 
if ( index < NUMBER_CONSTANT ) { throw new UnknownKeyException ( STRING_CONSTANT + key + STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=index}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (500{val=return;}) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=index}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=UnknownKeyException})) (214{val=(}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (800{val=key}) (200{val=+}) (45{val=STRING_CONSTANT})) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/18/parent/source_org_jfree_data_DefaultKeyedValues.java
-------------------------------------------------------------------------------
Edit Distance : 11
-------------------------------------------------------------------------------
Cadidate List Length : 136
Wrong
========================================================================
False

0
Tree	if ( index != null ) { return; }
Code	if ( index != null ) { return; }
Distance : 13

1
Tree	if ( index . getVisibleSeriesArray ( index ) ) { return; }
Code	if ( index . getVisibleSeriesArray ( index ) ) { return; }
Distance : 14

2
Tree	if ( index . calculatePieDatasetTotal ( index ) ) { return; }
Code	if ( index . calculatePieDatasetTotal ( index ) ) { return; }
Distance : 14

3
Tree	if ( index < NUMBER_CONSTANT ) { return; }
Code	if ( index < NUMBER_CONSTANT ) { return; }
Distance : 11

4
Tree	if ( Color.GRAY () == null ) { return; }
Code	if ( Color.GRAY () == null ) { return; }
Distance : 15

5
Tree	if ( index . calculateColumnTotal () == null ) { return; }
Code	if ( index . calculateColumnTotal () == null ) { return; }
Distance : 15

6
Tree	if ( index != that.legendArea ) { return; }
Code	if ( index != that.legendArea ) { return; }
Distance : 13

7
Tree	if ( ! getLabelFont ( index ) ) { return; }
Code	if ( ! getLabelFont ( index ) ) { return; }
Distance : 15

8
Tree	if ( key != null ) { return; }
Code	if ( key != null ) { return; }
Distance : 14

9
Tree	if ( index . getVisibleSeriesArray ( index ) == null ) { return; }
Code	if ( index . getVisibleSeriesArray ( index ) == null ) { return; }
Distance : 14

10
Tree	if ( ! SeriesException () ) { return; }
Code	if ( ! SeriesException () ) { return; }
Distance : 14

11
Tree	if ( index <= NUMBER_CONSTANT ) { return; }
Code	if ( index <= NUMBER_CONSTANT ) { return; }
Distance : 12

12
Tree	if ( index . getVisibleSeriesArray () ) { return; }
Code	if ( index . getVisibleSeriesArray () ) { return; }
Distance : 14

13
Tree	if ( ! key . isOrsonPDFAvailable ( STRING_CONSTANT , key ) ) { return; }
Code	if ( ! key . isOrsonPDFAvailable ( STRING_CONSTANT , key ) ) { return; }
Distance : 13

14
Tree	if ( ! index . isEmptyOrNull ( STRING_CONSTANT , key ) ) { return; }
Code	if ( ! index . isEmptyOrNull ( STRING_CONSTANT , key ) ) { return; }
Distance : 13

15
Tree	if ( index . getVisibleSeriesArray ( index ) > index ) { return; }
Code	if ( index . getVisibleSeriesArray ( index ) > index ) { return; }
Distance : 14

16
Tree	if ( this == index ) { super(); }
Code	if ( this == index ) { super(); }
Distance : 14

17
Tree	if ( index . defaultOutlinePaint ( index ) ) { return; }
Code	if ( index . defaultOutlinePaint ( index ) ) { return; }
Distance : 14

18
Tree	if ( index . calculateColumnTotal ( index ) == null ) { return; }
Code	if ( index . calculateColumnTotal ( index ) == null ) { return; }
Distance : 14

19
Tree	if ( index . calculatePieDatasetTotal () ) { return; }
Code	if ( index . calculatePieDatasetTotal () ) { return; }
Distance : 14

20
Tree	if ( index . that.zValues ( index , false ) ) { return; }
Code	if ( index . that.zValues ( index , false ) ) { return; }
Distance : 14

21
Tree	if ( ! index . isEmptyOrNull () ) { return; }
Code	if ( ! index . isEmptyOrNull () ) { return; }
Distance : 15

22
Tree	if ( ! key . isOrsonPDFAvailable () ) { return; }
Code	if ( ! key . isOrsonPDFAvailable () ) { return; }
Distance : 16

23
Tree	if ( index . calculateColumnTotal ( index ) ) { return; }
Code	if ( index . calculateColumnTotal ( index ) ) { return; }
Distance : 14

24
Tree	if ( ! index . isOrsonPDFAvailable ( index ) ) { return; }
Code	if ( ! index . isOrsonPDFAvailable ( index ) ) { return; }
Distance : 15

25
Tree	if ( Color.BLACK () == null ) { return; }
Code	if ( Color.BLACK () == null ) { return; }
Distance : 15

26
Tree	if ( Color.ORANGE != null ) { return; }
Code	if ( Color.ORANGE != null ) { return; }
Distance : 14

27
Tree	if ( ! getLabelFont ( STRING_CONSTANT ) ) { return; }
Code	if ( ! getLabelFont ( STRING_CONSTANT ) ) { return; }
Distance : 14

28
Tree	if ( ! hasUniqueID ( index ) ) { return; }
Code	if ( ! hasUniqueID ( index ) ) { return; }
Distance : 15

29
Tree	if ( Color.GRAY ( index ) ) { return; }
Code	if ( Color.GRAY ( index ) ) { return; }
Distance : 15

30
Tree	if ( index . that.zValues () ) { return; }
Code	if ( index . that.zValues () ) { return; }
Distance : 14

31
Tree	if ( index != null && index < NUMBER_CONSTANT ) { return; }
Code	if ( index != null && index < NUMBER_CONSTANT ) { return; }
Distance : 15

32
Tree	if ( Color.BLACK () ) { return; }
Code	if ( Color.BLACK () ) { return; }
Distance : 14

33
Tree	if ( Color.GRAY () ) { return; }
Code	if ( Color.GRAY () ) { return; }
Distance : 14

34
Tree	if ( ! getLabelFont () ) { return; }
Code	if ( ! getLabelFont () ) { return; }
Distance : 14

35
Tree	if ( index != key ) { super(); }
Code	if ( index != key ) { super(); }
Distance : 13

36
Tree	if ( index < NUMBER_CONSTANT ) { super(); }
Code	if ( index < NUMBER_CONSTANT ) { super(); }
Distance : 11

37
Tree	if ( index < NUMBER_CONSTANT ) { null }
Code	if ( index < NUMBER_CONSTANT ) { null }
Distance : 11

38
Tree	if ( ! index ) { super(); }
Code	if ( ! index ) { super(); }
Distance : 14

39
Tree	if ( Color.GRAY != null ) { return; }
Code	if ( Color.GRAY != null ) { return; }
Distance : 14

40
Tree	if ( index != null ) { super(); }
Code	if ( index != null ) { super(); }
Distance : 13

41
Tree	if ( ! key ( index ) ) { return; }
Code	if ( ! key ( index ) ) { return; }
Distance : 15

42
Tree	if ( index < NUMBER_CONSTANT ) { index = null ; null }
Code	if ( index < NUMBER_CONSTANT ) { index = null ; null }
Distance : 11

43
Tree	if ( index . calculatePieDatasetTotal ( index , false ) ) { return; }
Code	if ( index . calculatePieDatasetTotal ( index , false ) ) { return; }
Distance : 14

44
Tree	if ( index . getVisibleSeriesArray () == null ) { return; }
Code	if ( index . getVisibleSeriesArray () == null ) { return; }
Distance : 15

45
Tree	if ( ! key . isOrsonPDFAvailable ( index , true ) ) { return; }
Code	if ( ! key . isOrsonPDFAvailable ( index , true ) ) { return; }
Distance : 15

46
Tree	if ( index < NUMBER_CONSTANT ) { key = null ; null }
Code	if ( index < NUMBER_CONSTANT ) { key = null ; null }
Distance : 10

47
Tree	if ( index . defaultOutlinePaint () == null ) { return; }
Code	if ( index . defaultOutlinePaint () == null ) { return; }
Distance : 15

48
Tree	if ( isRangeCrosshairVisible ( index ) ) { return; }
Code	if ( isRangeCrosshairVisible ( index ) ) { return; }
Distance : 15

49
Tree	if ( ! key . isOrsonPDFAvailable ( NUMBER_CONSTANT ) ) { return; }
Code	if ( ! key . isOrsonPDFAvailable ( NUMBER_CONSTANT ) ) { return; }
Distance : 15

50
Tree	if ( index < NUMBER_CONSTANT ) { throw index . findZBounds ( index , index , key ) ; }
Code	if ( index < NUMBER_CONSTANT ) { throw index . findZBounds ( index , index , key ) ; }
Distance : 8

51
Tree	if ( index . calculateColumnTotal () ) { return; }
Code	if ( index . calculateColumnTotal () ) { return; }
Distance : 14

52
Tree	if ( ! index . isNaN ( NUMBER_CONSTANT ) ) { return; }
Code	if ( ! index . isNaN ( NUMBER_CONSTANT ) ) { return; }
Distance : 15

53
Tree	if ( Color.BLACK ( index ) ) { return; }
Code	if ( Color.BLACK ( index ) ) { return; }
Distance : 15

54
Tree	if ( float () ) { return; }
Code	if ( float () ) { return; }
Distance : 14

55
Tree	if ( ! index ( index ) ) { super(); }
Code	if ( ! index ( index ) ) { super(); }
Distance : 15

56
Tree	if ( index . getVisibleSeriesArray ( index , false ) ) { return; }
Code	if ( index . getVisibleSeriesArray ( index , false ) ) { return; }
Distance : 14

57
Tree	if ( index . calculateColumnTotal ( index , false ) ) { return; }
Code	if ( index . calculateColumnTotal ( index , false ) ) { return; }
Distance : 14

58
Tree	if ( index != index ) { super(); }
Code	if ( index != index ) { super(); }
Distance : 13

59
Tree	if ( index < NUMBER_CONSTANT ) { throw index . defaultOutlinePaint ( Color.BLACK , index , key ) ; }
Code	if ( index < NUMBER_CONSTANT ) { throw index . defaultOutlinePaint ( Color.BLACK , index , key ) ; }
Distance : 8

60
Tree	if ( ! key ) { return; }
Code	if ( ! key ) { return; }
Distance : 14

61
Tree	if ( index . calculatePieDatasetTotal ( index ) == null ) { return; }
Code	if ( index . calculatePieDatasetTotal ( index ) == null ) { return; }
Distance : 14

62
Tree	if ( ! index . isNaN ( index ) ) { return; }
Code	if ( ! index . isNaN ( index ) ) { return; }
Distance : 15

63
Tree	if ( index . that.zValues ( index ) == null ) { return; }
Code	if ( index . that.zValues ( index ) == null ) { return; }
Distance : 14

64
Tree	if ( index != null && index < NUMBER_CONSTANT ) { super(); }
Code	if ( index != null && index < NUMBER_CONSTANT ) { super(); }
Distance : 15

65
Tree	if ( ! hasUniqueID ( index , key ) ) { return; }
Code	if ( ! hasUniqueID ( index , key ) ) { return; }
Distance : 14

66
Tree	if ( index != that.zValues ) { return; }
Code	if ( index != that.zValues ) { return; }
Distance : 13

67
Tree	if ( ! index . isOrsonPDFAvailable ( index , true ) ) { return; }
Code	if ( ! index . isOrsonPDFAvailable ( index , true ) ) { return; }
Distance : 15

68
Tree	if ( index > index ) { return; }
Code	if ( index > index ) { return; }
Distance : 13

69
Tree	if ( ! hasUniqueID ( STRING_CONSTANT ) ) { return; }
Code	if ( ! hasUniqueID ( STRING_CONSTANT ) ) { return; }
Distance : 14

70
Tree	if ( ! index . isOrsonPDFAvailable ( STRING_CONSTANT , key ) ) { return; }
Code	if ( ! index . isOrsonPDFAvailable ( STRING_CONSTANT , key ) ) { return; }
Distance : 13

71
Tree	if ( index > index ) { super(); }
Code	if ( index > index ) { super(); }
Distance : 13

72
Tree	if ( ! index . isOrsonPDFAvailable ( NUMBER_CONSTANT ) ) { return; }
Code	if ( ! index . isOrsonPDFAvailable ( NUMBER_CONSTANT ) ) { return; }
Distance : 15

73
Tree	if ( index > key ) { return; }
Code	if ( index > key ) { return; }
Distance : 13

74
Tree	if ( this == index ) { return; }
Code	if ( this == index ) { return; }
Distance : 14

75
Tree	if ( ! key ( index ) ) { super(); }
Code	if ( ! key ( index ) ) { super(); }
Distance : 15

76
Tree	if ( index != null return; index . iterateDomainBounds ( index ) ) { return; }
Code	if ( index != null return; index . iterateDomainBounds ( index ) ) { return; }
Distance : 14

77
Tree	if ( index < NUMBER_CONSTANT ) { index = null ; return; }
Code	if ( index < NUMBER_CONSTANT ) { index = null ; return; }
Distance : 11

78
Tree	if ( index >= NUMBER_CONSTANT ) { super(); }
Code	if ( index >= NUMBER_CONSTANT ) { super(); }
Distance : 12

79
Tree	if ( index != null ) { return; }
Code	if ( index != null ) { return; }
Distance : 13

80
Tree	if ( ! IllegalArgumentException ( index , key ) ) { return; }
Code	if ( ! IllegalArgumentException ( index , key ) ) { return; }
Distance : 14

81
Tree	if ( index . that.zValues ( index ) > index ) { return; }
Code	if ( index . that.zValues ( index ) > index ) { return; }
Distance : 14

82
Tree	if ( ! IllegalArgumentException ( STRING_CONSTANT ) ) { return; }
Code	if ( ! IllegalArgumentException ( STRING_CONSTANT ) ) { return; }
Distance : 14

83
Tree	if ( ! index . isOrsonPDFAvailable ( index , false ) ) { return; }
Code	if ( ! index . isOrsonPDFAvailable ( index , false ) ) { return; }
Distance : 15

84
Tree	if ( index < NUMBER_CONSTANT ) { key = null ; return; }
Code	if ( index < NUMBER_CONSTANT ) { key = null ; return; }
Distance : 10

85
Tree	if ( index < NUMBER_CONSTANT ) { throw index . findZBounds ( Color.BLACK , index , key ) ; }
Code	if ( index < NUMBER_CONSTANT ) { throw index . findZBounds ( Color.BLACK , index , key ) ; }
Distance : 8

86
Tree	if ( this == key ) { super(); }
Code	if ( this == key ) { super(); }
Distance : 14

87
Tree	if ( float ( index ) ) { return; }
Code	if ( float ( index ) ) { return; }
Distance : 15

88
Tree	if ( ! SeriesException ( STRING_CONSTANT ) ) { return; }
Code	if ( ! SeriesException ( STRING_CONSTANT ) ) { return; }
Distance : 14

89
Tree	if ( index != null return; index . isEmptyOrNull ( index ) ) { return; }
Code	if ( index != null return; index . isEmptyOrNull ( index ) ) { return; }
Distance : 14

90
Tree	if ( index != null return; index . findZBounds ( index ) ) { return; }
Code	if ( index != null return; index . findZBounds ( index ) ) { return; }
Distance : 14

91
Tree	if ( index < NUMBER_CONSTANT ) { throw index . findZBounds ( Color.GRAY , index , key ) ; }
Code	if ( index < NUMBER_CONSTANT ) { throw index . findZBounds ( Color.GRAY , index , key ) ; }
Distance : 8

92
Tree	if ( key >= NUMBER_CONSTANT ) { return; }
Code	if ( key >= NUMBER_CONSTANT ) { return; }
Distance : 13

93
Tree	if ( index != >= ) { return; }
Code	if ( index != >= ) { return; }
Distance : 13

94
Tree	if ( index . calculatePieDatasetTotal () == null ) { return; }
Code	if ( index . calculatePieDatasetTotal () == null ) { return; }
Distance : 15

95
Tree	if ( index != key ) { return; }
Code	if ( index != key ) { return; }
Distance : 13

96
Tree	if ( ! SeriesException ( index ) ) { return; }
Code	if ( ! SeriesException ( index ) ) { return; }
Distance : 15

97
Tree	if ( float () == null ) { return; }
Code	if ( float () == null ) { return; }
Distance : 15

98
Tree	if ( isRangeCrosshairVisible () ) { return; }
Code	if ( isRangeCrosshairVisible () ) { return; }
Distance : 14

99
Tree	if ( ! index . isOrsonPDFAvailable () ) { return; }
Code	if ( ! index . isOrsonPDFAvailable () ) { return; }
Distance : 15

100
Tree	if ( ! index . isEmptyOrNull ( index , true ) ) { return; }
Code	if ( ! index . isEmptyOrNull ( index , true ) ) { return; }
Distance : 15

101
Tree	if ( index <= NUMBER_CONSTANT ) { super(); }
Code	if ( index <= NUMBER_CONSTANT ) { super(); }
Distance : 12

102
Tree	if ( ! index ( index ) ) { return; }
Code	if ( ! index ( index ) ) { return; }
Distance : 15

103
Tree	if ( index != Year.MINIMUM_YEAR ) { return; }
Code	if ( index != Year.MINIMUM_YEAR ) { return; }
Distance : 13

104
Tree	if ( ! IllegalArgumentException () ) { return; }
Code	if ( ! IllegalArgumentException () ) { return; }
Distance : 14

105
Tree	if ( ! index . isEmptyOrNull ( NUMBER_CONSTANT ) ) { return; }
Code	if ( ! index . isEmptyOrNull ( NUMBER_CONSTANT ) ) { return; }
Distance : 15

106
Tree	if ( isRangeCrosshairVisible () == null ) { return; }
Code	if ( isRangeCrosshairVisible () == null ) { return; }
Distance : 15

107
Tree	if ( index <= NUMBER_CONSTANT ) { null }
Code	if ( index <= NUMBER_CONSTANT ) { null }
Distance : 12

108
Tree	if ( key < NUMBER_CONSTANT ) { return; }
Code	if ( key < NUMBER_CONSTANT ) { return; }
Distance : 12

109
Tree	if ( ! IllegalArgumentException ( index ) ) { return; }
Code	if ( ! IllegalArgumentException ( index ) ) { return; }
Distance : 15

110
Tree	if ( index > key ) { super(); }
Code	if ( index > key ) { super(); }
Distance : 13

111
Tree	if ( key <= NUMBER_CONSTANT ) { return; }
Code	if ( key <= NUMBER_CONSTANT ) { return; }
Distance : 13

112
Tree	if ( ! hasUniqueID () ) { return; }
Code	if ( ! hasUniqueID () ) { return; }
Distance : 14

113
Tree	if ( index >= NUMBER_CONSTANT ) { return; }
Code	if ( index >= NUMBER_CONSTANT ) { return; }
Distance : 12

114
Tree	if ( index >= NUMBER_CONSTANT ) { null }
Code	if ( index >= NUMBER_CONSTANT ) { null }
Distance : 12

115
Tree	if ( index != index ) { return; }
Code	if ( index != index ) { return; }
Distance : 13

116
Tree	if ( ! index . isEmptyOrNull ( index ) ) { return; }
Code	if ( ! index . isEmptyOrNull ( index ) ) { return; }
Distance : 15

117
Tree	if ( Color.BLACK != null ) { return; }
Code	if ( Color.BLACK != null ) { return; }
Distance : 14

118
Tree	if ( ! SeriesException ( index , key ) ) { return; }
Code	if ( ! SeriesException ( index , key ) ) { return; }
Distance : 14

119
Tree	if ( ! key ) { super(); }
Code	if ( ! key ) { super(); }
Distance : 14

120
Tree	if ( ! key . isOrsonPDFAvailable ( index ) ) { return; }
Code	if ( ! key . isOrsonPDFAvailable ( index ) ) { return; }
Distance : 15

121
Tree	if ( ! index . isNaN () ) { return; }
Code	if ( ! index . isNaN () ) { return; }
Distance : 15

122
Tree	if ( ! index ) { return; }
Code	if ( ! index ) { return; }
Distance : 14

123
Tree	if ( ! Year.MINIMUM_YEAR ( index , key ) ) { return; }
Code	if ( ! Year.MINIMUM_YEAR ( index , key ) ) { return; }
Distance : 14

124
Tree	if ( this == key ) { return; }
Code	if ( this == key ) { return; }
Distance : 14

125
Tree	if ( index != null ) { null }
Code	if ( index != null ) { null }
Distance : 13

126
Tree	if ( index != null && key < NUMBER_CONSTANT ) { return; }
Code	if ( index != null && key < NUMBER_CONSTANT ) { return; }
Distance : 14

127
Tree	if ( index < NUMBER_CONSTANT ) { null }
Code	if ( index < NUMBER_CONSTANT ) { null }
Distance : 11

128
Tree	if ( index . calculatePieDatasetTotal ( index ) > index ) { return; }
Code	if ( index . calculatePieDatasetTotal ( index ) > index ) { return; }
Distance : 14

129
Tree	if ( index < NUMBER_CONSTANT ) { return; }
Code	if ( index < NUMBER_CONSTANT ) { return; }
Distance : 11

130
Tree	if ( index . calculateColumnTotal ( index ) > index ) { return; }
Code	if ( index . calculateColumnTotal ( index ) > index ) { return; }
Distance : 14

131
Tree	if ( ! index . isNaN ( STRING_CONSTANT , key ) ) { return; }
Code	if ( ! index . isNaN ( STRING_CONSTANT , key ) ) { return; }
Distance : 13

132
Tree	if ( index < NUMBER_CONSTANT ) { super(); }
Code	if ( index < NUMBER_CONSTANT ) { super(); }
Distance : 11

133
Tree	if ( key < NUMBER_CONSTANT ) { return; }
Code	if ( key < NUMBER_CONSTANT ) { return; }
Distance : 12

134
Tree	if ( key != null && index < NUMBER_CONSTANT ) { return; }
Code	if ( key != null && index < NUMBER_CONSTANT ) { return; }
Distance : 15

135
Tree	if ( index != null return; index . defaultOutlinePaint ( index ) ) { return; }
Code	if ( index != null return; index . defaultOutlinePaint ( index ) ) { return; }
Distance : 14

========================================================================


========================================================================
Example Number: 4
Parent Code is: 
if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( categoryKeys.length != getCategoryCount () ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (40{val=categoryKeys.length}) (242{val=!=}) (22 (2 (22 (315{val=this}) (235{val=.}) (801{val=startData})) (221{val=[}) (34{val=NUMBER_CONSTANT}) (222{val=]})) (235{val=.}) (800{val=length}))) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (40{val=categoryKeys.length}) (242{val=!=}) (32 (802{val=getCategoryCount}) (216{val=()}))) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/16/parent/source_org_jfree_data_category_DefaultIntervalCategoryDataset.java
-------------------------------------------------------------------------------
Edit Distance : 8
-------------------------------------------------------------------------------
Cadidate List Length : 68
Wrong
========================================================================
False

0
Tree	if ( length * length . if ( - NUMBER_CONSTANT ) != IllegalArgumentException ) { throw new IllegalArgumentException ( if ) ; }
Code	if ( length * length . if ( - NUMBER_CONSTANT ) != IllegalArgumentException ) { throw new IllegalArgumentException ( if ) ; }
Distance : 12

1
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } Color.RED
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } Color.RED
Distance : 19

2
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != if ) { throw length . ( ( != , length , length ) ; } public
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != if ) { throw length . ( ( != , length , length ) ; } public
Distance : 20

3
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != throw ) { throw length . IllegalArgumentException ( if , length , length ) ; } SerialUtilities
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != throw ) { throw length . IllegalArgumentException ( if , length , length ) ; } SerialUtilities
Distance : 19

4
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . new ( categoryKeys.length , length , length ) ; } Color.RED
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . new ( categoryKeys.length , length , length ) ; } Color.RED
Distance : 20

5
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . != ( categoryKeys.length , length , length ) ; } public
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . != ( categoryKeys.length , length , length ) ; } public
Distance : 20

6
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . throw ( != , length , length ) ; } SerialUtilities
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . throw ( != , length , length ) ; } SerialUtilities
Distance : 20

7
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . categoryKeys.length ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . categoryKeys.length ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

8
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 13

9
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , startData , throw ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , startData , throw ) ; }
Distance : 17

10
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( if , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( if , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

11
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

12
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . new ( categoryKeys.length , length , length ) ; } public
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . new ( categoryKeys.length , length , length ) ; } public
Distance : 22

13
Tree	if ( length * length . if ( - NUMBER_CONSTANT ) != IllegalArgumentException ) { throw new IllegalArgumentException ( if ) ; } readPaint
Code	if ( length * length . if ( - NUMBER_CONSTANT ) != IllegalArgumentException ) { throw new IllegalArgumentException ( if ) ; } readPaint
Distance : 13

14
Tree	if ( length * length . if ( - NUMBER_CONSTANT ) != != ) { throw new IllegalArgumentException ( this ) ; } deepClone
Code	if ( length * length . if ( - NUMBER_CONSTANT ) != != ) { throw new IllegalArgumentException ( this ) ; } deepClone
Distance : 13

15
Tree	if ( ( length / length < NUMBER_CONSTANT ) == if ) { throw length . categoryKeys.length ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) == if ) { throw length . categoryKeys.length ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 22

16
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != this ) { throw length . IllegalArgumentException ( ( , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } public
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != this ) { throw length . IllegalArgumentException ( ( , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } public
Distance : 24

17
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } SerialUtilities
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } SerialUtilities
Distance : 24

18
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . != ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } SerialUtilities
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . != ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } SerialUtilities
Distance : 25

19
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; }
Distance : 22

20
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . != ( != , length , length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . != ( != , length , length ) ; }
Distance : 21

21
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( if , length , length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( if , length , length ) ; }
Distance : 18

22
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( != , length , length ) ; } Color.RED
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( != , length , length ) ; } Color.RED
Distance : 21

23
Tree	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) +
Code	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) +
Distance : 16

24
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , new , throw ) ; } SerialUtilities
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , new , throw ) ; } SerialUtilities
Distance : 18

25
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Color.RED
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Color.RED
Distance : 24

26
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } public
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } public
Distance : 24

27
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . != ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } SerialUtilities
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . != ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } SerialUtilities
Distance : 25

28
Tree	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != != ) /
Code	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != != ) /
Distance : 16

29
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != if ) { throw length . categoryKeys.length ( STRING_CONSTANT , length , categoryKeys.length ) ; } public
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != if ) { throw length . categoryKeys.length ( STRING_CONSTANT , length , categoryKeys.length ) ; } public
Distance : 19

30
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . != ( STRING_CONSTANT , length , != ) ; } SerialUtilities
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . != ( STRING_CONSTANT , length , != ) ; } SerialUtilities
Distance : 19

31
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != throw ) { throw length . if ( STRING_CONSTANT , length , length ) ; } SerialUtilities
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != throw ) { throw length . if ( STRING_CONSTANT , length , length ) ; } SerialUtilities
Distance : 19

32
Tree	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . categoryKeys.length ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . categoryKeys.length ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 22

33
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != if ) { throw length . ( ( STRING_CONSTANT , length , length ) ; } public
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != if ) { throw length . ( ( STRING_CONSTANT , length , length ) ; } public
Distance : 19

34
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != throw ) { throw length . categoryKeys.length ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } SerialUtilities
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != throw ) { throw length . categoryKeys.length ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } SerialUtilities
Distance : 25

35
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . != ( categoryKeys.length , length , length , length , length ) ; } SerialUtilities
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . != ( categoryKeys.length , length , length , length , length ) ; } SerialUtilities
Distance : 24

36
Tree	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != this ) else
Code	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != this ) else
Distance : 16

37
Tree	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) {}
Code	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) {}
Distance : 16

38
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , startData , throw ) ; } SerialUtilities
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , startData , throw ) ; } SerialUtilities
Distance : 18

39
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , throw ) ; } public
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , throw ) ; } public
Distance : 18

40
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != categoryKeys.length ) { throw length . categoryKeys.length ( STRING_CONSTANT ) ; } public
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != categoryKeys.length ) { throw length . categoryKeys.length ( STRING_CONSTANT ) ; } public
Distance : 15

41
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != if ) { throw length . != ( STRING_CONSTANT ) ; } SerialUtilities
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != if ) { throw length . != ( STRING_CONSTANT ) ; } SerialUtilities
Distance : 15

42
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . != ( != , length , length , length , length ) ; } Color.RED
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . != ( != , length , length , length , length ) ; } Color.RED
Distance : 24

43
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != throw ) { throw length . != ( STRING_CONSTANT , length , length ) ; } Color.RED
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != throw ) { throw length . != ( STRING_CONSTANT , length , length ) ; } Color.RED
Distance : 19

44
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . if ( categoryKeys.length , length , length ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . if ( categoryKeys.length , length , length ) ; }
Distance : 19

45
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , != , if ) ; } Color.RED
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , != , if ) ; } Color.RED
Distance : 18

46
Tree	if ( length * length . categoryKeys.length ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( if ) ; }
Code	if ( length * length . categoryKeys.length ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( if ) ; }
Distance : 11

47
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != throw ) { throw length . categoryKeys.length ( STRING_CONSTANT ) ; } Color.RED
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != throw ) { throw length . categoryKeys.length ( STRING_CONSTANT ) ; } Color.RED
Distance : 15

48
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != categoryKeys.length ) { throw length . categoryKeys.length ( categoryKeys.length , length , length , length , length ) ; } public
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != categoryKeys.length ) { throw length . categoryKeys.length ( categoryKeys.length , length , length , length , length ) ; } public
Distance : 24

49
Tree	if ( categoryKeys.length != this . categoryKeys.length [ NUMBER_CONSTANT ] . length ) { throw new != ( STRING_CONSTANT ) ; }
Code	if ( categoryKeys.length != this . categoryKeys.length [ NUMBER_CONSTANT ] . length ) { throw new != ( STRING_CONSTANT ) ; }
Distance : 9

50
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . throw ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } public
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . throw ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } public
Distance : 25

51
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , throw ) ; } Color.RED
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , throw ) ; } Color.RED
Distance : 18

52
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( != , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( != , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

53
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( if , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Color.RED
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( if , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Color.RED
Distance : 24

54
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . throw ( != , length , length ) ; } SerialUtilities
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . throw ( != , length , length ) ; } SerialUtilities
Distance : 22

55
Tree	if ( ( != this . IllegalArgumentException [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( ( != this . IllegalArgumentException [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 9

56
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . != ( != , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } public
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . != ( != , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } public
Distance : 25

57
Tree	if ( ( != this . categoryKeys.length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( ( != this . categoryKeys.length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 9

58
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . != ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Color.RED
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . != ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Color.RED
Distance : 25

59
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . != ( STRING_CONSTANT , this , throw ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . != ( STRING_CONSTANT , this , throw ) ; }
Distance : 18

60
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . != ( STRING_CONSTANT , startData , throw ) ; } public
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . != ( STRING_CONSTANT , startData , throw ) ; } public
Distance : 19

61
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . if ( STRING_CONSTANT , length , length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . if ( STRING_CONSTANT , length , length ) ; }
Distance : 18

62
Tree	if ( ( length / length < NUMBER_CONSTANT ) == return; ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) == return; ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 21

63
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , throw ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , throw ) ; }
Distance : 17

64
Tree	if ( . != this . IllegalArgumentException [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( . != this . IllegalArgumentException [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 9

65
Tree	if ( ( length / length < NUMBER_CONSTANT ) == super(); ) { throw length . new ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) == super(); ) { throw length . new ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 22

66
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Color.RED
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Color.RED
Distance : 24

67
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . != ( STRING_CONSTANT , != , throw ) ; } Color.RED
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . != ( STRING_CONSTANT , != , throw ) ; } Color.RED
Distance : 19

========================================================================


========================================================================
Example Number: 5
Parent Code is: 
this . dataset = dataset ;
-------------------------------------------------------------------------------
Child code is: 
setDataset ( dataset ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=dataset})) (204{val==}) (800{val=dataset})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (802{val=setDataset}) (214{val=(}) (800{val=dataset}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/12/parent/source_org_jfree_chart_plot_MultiplePiePlot.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 188
Correct
========================================================================
True

0
Tree	this . dataset = dataset ;
Code	this . dataset = dataset ;
Distance : 4

1
Tree	this . dataset = Color.BLACK ;
Code	this . dataset = Color.BLACK ;
Distance : 4

2
Tree	this . dataset = true ;
Code	this . dataset = true ;
Distance : 4

3
Tree	this . dataset = dataset ; SerialUtilities
Code	this . dataset = dataset ; SerialUtilities
Distance : 5

4
Tree	( = setDataset () ;
Code	( = setDataset () ;
Distance : 4

5
Tree	dataset = new java.util.ArrayList ( dataset ) ;
Code	dataset = new java.util.ArrayList ( dataset ) ;
Distance : 4

6
Tree	dataset = new Range < () ;
Code	dataset = new Range < () ;
Distance : 6

7
Tree	this . dataset = dataset . setDataset ( dataset ) ; Color.RED
Code	this . dataset = dataset . setDataset ( dataset ) ; Color.RED
Distance : 7

8
Tree	dataset = dataset . setDataset ( dataset ) ; SerialUtilities
Code	dataset = dataset . setDataset ( dataset ) ; SerialUtilities
Distance : 5

9
Tree	dataset . setDataset ( this , dataset ) ; SerialUtilities
Code	dataset . setDataset ( this , dataset ) ; SerialUtilities
Distance : 5

10
Tree	this . dataset . setDataset () ;
Code	this . dataset . setDataset () ;
Distance : 5

11
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ; public
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ; public
Distance : 5

12
Tree	this . dataset = true ;
Code	this . dataset = true ;
Distance : 4

13
Tree	dataset = dataset . setDataset ( dataset ) ; Color.RED
Code	dataset = dataset . setDataset ( dataset ) ; Color.RED
Distance : 5

14
Tree	this . dataset . setDataset ( dataset ) ;
Code	this . dataset . setDataset ( dataset ) ;
Distance : 4

15
Tree	String = setDataset () ;
Code	String = setDataset () ;
Distance : 4

16
Tree	dataset Color.BLACK dataset ;
Code	dataset Color.BLACK dataset ;
Distance : 3

17
Tree	dataset = new Range ( dataset ) ;
Code	dataset = new Range ( dataset ) ;
Distance : 4

18
Tree	XYDataset = true ;
Code	XYDataset = true ;
Distance : 4

19
Tree	String = dataset ;
Code	String = dataset ;
Distance : 3

20
Tree	dataset = return; ;
Code	dataset = return; ;
Distance : 4

21
Tree	dataset . setDataset ( dataset ) ;
Code	dataset . setDataset ( dataset ) ;
Distance : 2

22
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ; Color.RED
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ; Color.RED
Distance : 5

23
Tree	dataset = this . dataset . setDataset () ; SerialUtilities
Code	dataset = this . dataset . setDataset () ; SerialUtilities
Distance : 8

24
Tree	dataset index dataset ;
Code	dataset index dataset ;
Distance : 3

25
Tree	dataset . setDataset ( this , dataset ) ;
Code	dataset . setDataset ( this , dataset ) ;
Distance : 4

26
Tree	dataset = dataset . setDataset ( Color.RED ) ;
Code	dataset = dataset . setDataset ( Color.RED ) ;
Distance : 5

27
Tree	this . dataset = new Range ( dataset ) . setDataset ( dataset ) ;
Code	this . dataset = new Range ( dataset ) . setDataset ( dataset ) ;
Distance : 10

28
Tree	this . dataset = return; ;
Code	this . dataset = return; ;
Distance : 4

29
Tree	dataset = dataset . setDataset () ;
Code	dataset = dataset . setDataset () ;
Distance : 5

30
Tree	dataset = Color.RED ;
Code	dataset = Color.RED ;
Distance : 4

31
Tree	this . dataset = false ;
Code	this . dataset = false ;
Distance : 4

32
Tree	this . dataset = dataset ( dataset ) ;
Code	this . dataset = dataset ( dataset ) ;
Distance : 5

33
Tree	XYDataset = dataset ;
Code	XYDataset = dataset ;
Distance : 3

34
Tree	XYDataset = null ;
Code	XYDataset = null ;
Distance : 4

35
Tree	dataset = dataset . setDataset ( i , dataset ) ;
Code	dataset = dataset . setDataset ( i , dataset ) ;
Distance : 6

36
Tree	final = ( dataset ) dataset . setDataset () ;
Code	final = ( dataset ) dataset . setDataset () ;
Distance : 6

37
Tree	dataset = dataset . setDataset ( Color.RED , dataset ) ;
Code	dataset = dataset . setDataset ( Color.RED , dataset ) ;
Distance : 6

38
Tree	dataset = dataset . setDataset ( dataset ) ;
Code	dataset = dataset . setDataset ( dataset ) ;
Distance : 4

39
Tree	dataset = dataset . setDataset ( Color.YELLOW , dataset ) ;
Code	dataset = dataset . setDataset ( Color.YELLOW , dataset ) ;
Distance : 6

40
Tree	dataset = dataset . setDataset ( starts , dataset ) ;
Code	dataset = dataset . setDataset ( starts , dataset ) ;
Distance : 6

41
Tree	( = ( dataset ) dataset . setDataset () ;
Code	( = ( dataset ) dataset . setDataset () ;
Distance : 6

42
Tree	this . dataset = new MarkerChangeEvent ( dataset ) . setDataset ( dataset ) ;
Code	this . dataset = new MarkerChangeEvent ( dataset ) . setDataset ( dataset ) ;
Distance : 10

43
Tree	this . dataset = dataset . setDataset ( dataset , true ) ;
Code	this . dataset = dataset . setDataset ( dataset , true ) ;
Distance : 8

44
Tree	dataset = setDataset () ;
Code	dataset = setDataset () ;
Distance : 4

45
Tree	put = new ArrayList < () ;
Code	put = new ArrayList < () ;
Distance : 6

46
Tree	setDataset ( dataset , STRING_CONSTANT ) ; SerialUtilities
Code	setDataset ( dataset , STRING_CONSTANT ) ; SerialUtilities
Distance : 3

47
Tree	dataset = dataset . setDataset ( i ) ;
Code	dataset = dataset . setDataset ( i ) ;
Distance : 5

48
Tree	final = true ;
Code	final = true ;
Distance : 4

49
Tree	dataset = true ; deepClone
Code	dataset = true ; deepClone
Distance : 5

50
Tree	setDataset ( dataset ) ;
Code	setDataset ( dataset ) ;
Distance : 0

51
Tree	put = setDataset () ;
Code	put = setDataset () ;
Distance : 4

52
Tree	this . dataset = null ;
Code	this . dataset = null ;
Distance : 4

53
Tree	dataset = setDataset () ; public
Code	dataset = setDataset () ; public
Distance : 5

54
Tree	this . dataset = true ; deepClone
Code	this . dataset = true ; deepClone
Distance : 5

55
Tree	dataset = this . dataset ; Color.RED
Code	dataset = this . dataset ; Color.RED
Distance : 6

56
Tree	this . dataset . setDataset () ; SerialUtilities
Code	this . dataset . setDataset () ; SerialUtilities
Distance : 6

57
Tree	setDataset ( dataset , STRING_CONSTANT ) ; Color.RED
Code	setDataset ( dataset , STRING_CONSTANT ) ; Color.RED
Distance : 3

58
Tree	dataset = ( dataset ) dataset . setDataset () ; Color.RED
Code	dataset = ( dataset ) dataset . setDataset () ; Color.RED
Distance : 7

59
Tree	dataset = setDataset () ; SerialUtilities
Code	dataset = setDataset () ; SerialUtilities
Distance : 5

60
Tree	dataset = true ; readPaint
Code	dataset = true ; readPaint
Distance : 5

61
Tree	dataset = this . dataset . setDataset () ; public
Code	dataset = this . dataset . setDataset () ; public
Distance : 8

62
Tree	dataset = ( dataset ) dataset . setDataset () ; public
Code	dataset = ( dataset ) dataset . setDataset () ; public
Distance : 7

63
Tree	this . setDataset () ; SerialUtilities
Code	this . setDataset () ; SerialUtilities
Distance : 5

64
Tree	this . setDataset () ; public
Code	this . setDataset () ; public
Distance : 5

65
Tree	this . dataset = dataset ( dataset ) ; public
Code	this . dataset = dataset ( dataset ) ; public
Distance : 6

66
Tree	dataset = NUMBER_CONSTANT ; Color.RED
Code	dataset = NUMBER_CONSTANT ; Color.RED
Distance : 5

67
Tree	dataset = NUMBER_CONSTANT ; public
Code	dataset = NUMBER_CONSTANT ; public
Distance : 5

68
Tree	dataset = dataset . setDataset () ; SerialUtilities
Code	dataset = dataset . setDataset () ; SerialUtilities
Distance : 6

69
Tree	final = new ArrayList < () ;
Code	final = new ArrayList < () ;
Distance : 6

70
Tree	this . dataset . setDataset ( dataset ) ; SerialUtilities
Code	this . dataset . setDataset ( dataset ) ; SerialUtilities
Distance : 5

71
Tree	this . dataset = dataset ; Color.RED
Code	this . dataset = dataset ; Color.RED
Distance : 5

72
Tree	this . dataset = dataset ; public
Code	this . dataset = dataset ; public
Distance : 5

73
Tree	dataset = setDataset () ; Color.RED
Code	dataset = setDataset () ; Color.RED
Distance : 5

74
Tree	this . dataset . setDataset () ; public
Code	this . dataset . setDataset () ; public
Distance : 6

75
Tree	dataset = NUMBER_CONSTANT ; SerialUtilities
Code	dataset = NUMBER_CONSTANT ; SerialUtilities
Distance : 5

76
Tree	dataset = this . dataset . setDataset () ; Color.RED
Code	dataset = this . dataset . setDataset () ; Color.RED
Distance : 8

77
Tree	setDataset () ; SerialUtilities
Code	setDataset () ; SerialUtilities
Distance : 4

78
Tree	dataset . setDataset () ; Color.RED
Code	dataset . setDataset () ; Color.RED
Distance : 5

79
Tree	dataset false dataset ;
Code	dataset false dataset ;
Distance : 3

80
Tree	dataset . setDataset () ; SerialUtilities
Code	dataset . setDataset () ; SerialUtilities
Distance : 5

81
Tree	this . dataset . setDataset ( dataset ) ; Color.RED
Code	this . dataset . setDataset ( dataset ) ; Color.RED
Distance : 5

82
Tree	dataset = dataset . setDataset () ; Color.RED
Code	dataset = dataset . setDataset () ; Color.RED
Distance : 6

83
Tree	setDataset () ; Color.RED
Code	setDataset () ; Color.RED
Distance : 4

84
Tree	this . dataset . setDataset ( dataset ) ; public
Code	this . dataset . setDataset ( dataset ) ; public
Distance : 5

85
Tree	dataset = new ArrayList < () ;
Code	dataset = new ArrayList < () ;
Distance : 6

86
Tree	setDataset ( dataset ) ;
Code	setDataset ( dataset ) ;
Distance : 0

87
Tree	this . dataset = new ArrayList ( dataset ) ;
Code	this . dataset = new ArrayList ( dataset ) ;
Distance : 6

88
Tree	dataset = Color.BLACK ;
Code	dataset = Color.BLACK ;
Distance : 4

89
Tree	this . dataset = new Range ( dataset ) ;
Code	this . dataset = new Range ( dataset ) ;
Distance : 6

90
Tree	dataset = true ;
Code	dataset = true ;
Distance : 4

91
Tree	this . dataset = dataset . setDataset () ;
Code	this . dataset = dataset . setDataset () ;
Distance : 7

92
Tree	final = null ;
Code	final = null ;
Distance : 4

93
Tree	this . setDataset () ;
Code	this . setDataset () ;
Distance : 4

94
Tree	final = setDataset () ;
Code	final = setDataset () ;
Distance : 4

95
Tree	this . dataset = dataset ; public
Code	this . dataset = dataset ; public
Distance : 5

96
Tree	dataset = this . dataset . setDataset () ;
Code	dataset = this . dataset . setDataset () ;
Distance : 7

97
Tree	this . dataset = dataset ; Color.RED
Code	this . dataset = dataset ; Color.RED
Distance : 5

98
Tree	setDataset ( dataset , STRING_CONSTANT ) ; public
Code	setDataset ( dataset , STRING_CONSTANT ) ; public
Distance : 3

99
Tree	String = true ;
Code	String = true ;
Distance : 4

100
Tree	dataset = this . dataset ;
Code	dataset = this . dataset ;
Distance : 5

101
Tree	this . dataset = Color.GRAY ;
Code	this . dataset = Color.GRAY ;
Distance : 4

102
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ;
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ;
Distance : 4

103
Tree	dataset = null ;
Code	dataset = null ;
Distance : 4

104
Tree	setDataset () ;
Code	setDataset () ;
Distance : 3

105
Tree	setDataset ( dataset , STRING_CONSTANT ) ;
Code	setDataset ( dataset , STRING_CONSTANT ) ;
Distance : 2

106
Tree	this . dataset = dataset . setDataset ( dataset ) ; SerialUtilities
Code	this . dataset = dataset . setDataset ( dataset ) ; SerialUtilities
Distance : 7

107
Tree	String = ( dataset ) dataset . setDataset () ;
Code	String = ( dataset ) dataset . setDataset () ;
Distance : 6

108
Tree	this . dataset = new MarkerChangeEvent ( dataset ) ;
Code	this . dataset = new MarkerChangeEvent ( dataset ) ;
Distance : 6

109
Tree	dataset . setDataset () ; public
Code	dataset . setDataset () ; public
Distance : 5

110
Tree	setDataset ( MarkerChangeEvent ) ;
Code	setDataset ( MarkerChangeEvent ) ;
Distance : 1

111
Tree	dataset = new MarkerChangeEvent ( dataset ) ;
Code	dataset = new MarkerChangeEvent ( dataset ) ;
Distance : 4

112
Tree	this . dataset = dataset ( dataset ) ; SerialUtilities
Code	this . dataset = dataset ( dataset ) ; SerialUtilities
Distance : 6

113
Tree	this . dataset = dataset . setDataset () ; Color.RED
Code	this . dataset = dataset . setDataset () ; Color.RED
Distance : 8

114
Tree	put = true ;
Code	put = true ;
Distance : 4

115
Tree	dataset true dataset ;
Code	dataset true dataset ;
Distance : 3

116
Tree	dataset = dataset . setDataset ( dataset ) ; public
Code	dataset = dataset . setDataset ( dataset ) ; public
Distance : 5

117
Tree	this . dataset = setDataset ( dataset ) ; Color.RED
Code	this . dataset = setDataset ( dataset ) ; Color.RED
Distance : 5

118
Tree	this . dataset = dataset . setDataset () ; SerialUtilities
Code	this . dataset = dataset . setDataset () ; SerialUtilities
Distance : 8

119
Tree	dataset . setDataset () ;
Code	dataset . setDataset () ;
Distance : 4

120
Tree	dataset = Color.GRAY ;
Code	dataset = Color.GRAY ;
Distance : 4

121
Tree	this . dataset = new ArrayList ( dataset ) . setDataset ( dataset ) ;
Code	this . dataset = new ArrayList ( dataset ) . setDataset ( dataset ) ;
Distance : 10

122
Tree	dataset . setDataset ( dataset ) ; Color.RED
Code	dataset . setDataset ( dataset ) ; Color.RED
Distance : 3

123
Tree	this . dataset = new StandardPieToolTipGenerator ( dataset ) ;
Code	this . dataset = new StandardPieToolTipGenerator ( dataset ) ;
Distance : 6

124
Tree	setDataset ( RendererChangeEvent ) ;
Code	setDataset ( RendererChangeEvent ) ;
Distance : 1

125
Tree	dataset = dataset ; SerialUtilities
Code	dataset = dataset ; SerialUtilities
Distance : 4

126
Tree	dataset = dataset . setDataset () ; public
Code	dataset = dataset . setDataset () ; public
Distance : 6

127
Tree	dataset = new ArrayList ( dataset ) ;
Code	dataset = new ArrayList ( dataset ) ;
Distance : 4

128
Tree	dataset = new java.util.ArrayList < () ;
Code	dataset = new java.util.ArrayList < () ;
Distance : 6

129
Tree	setDataset ( dataset ) ; SerialUtilities
Code	setDataset ( dataset ) ; SerialUtilities
Distance : 1

130
Tree	this . dataset = dataset . setDataset ( dataset , false ) ;
Code	this . dataset = dataset . setDataset ( dataset , false ) ;
Distance : 8

131
Tree	dataset . setDataset ( dataset ) ; public
Code	dataset . setDataset ( dataset ) ; public
Distance : 3

132
Tree	dataset = false ;
Code	dataset = false ;
Distance : 4

133
Tree	this . dataset = ( dataset ) dataset . setDataset () ; Color.RED
Code	this . dataset = ( dataset ) dataset . setDataset () ; Color.RED
Distance : 9

134
Tree	dataset = Color.GREEN ;
Code	dataset = Color.GREEN ;
Distance : 4

135
Tree	dataset . setDataset ( dataset ) ; SerialUtilities
Code	dataset . setDataset ( dataset ) ; SerialUtilities
Distance : 3

136
Tree	setDataset () ; public
Code	setDataset () ; public
Distance : 4

137
Tree	this . dataset = ( dataset ) dataset . setDataset () ; public
Code	this . dataset = ( dataset ) dataset . setDataset () ; public
Distance : 9

138
Tree	setDataset ( dataset ) ; public
Code	setDataset ( dataset ) ; public
Distance : 1

139
Tree	this . dataset = setDataset ( dataset ) ;
Code	this . dataset = setDataset ( dataset ) ;
Distance : 4

140
Tree	dataset = ( dataset ) dataset . setDataset () ; SerialUtilities
Code	dataset = ( dataset ) dataset . setDataset () ; SerialUtilities
Distance : 7

141
Tree	setDataset ( dataset ) ; Color.RED
Code	setDataset ( dataset ) ; Color.RED
Distance : 1

142
Tree	dataset = this . dataset ; SerialUtilities
Code	dataset = this . dataset ; SerialUtilities
Distance : 6

143
Tree	dataset = dataset ;
Code	dataset = dataset ;
Distance : 3

144
Tree	this . dataset = dataset . setDataset ( dataset ) ;
Code	this . dataset = dataset . setDataset ( dataset ) ;
Distance : 6

145
Tree	dataset = this . dataset ; public
Code	dataset = this . dataset ; public
Distance : 6

146
Tree	dataset = dataset . setDataset ( Color.YELLOW ) ;
Code	dataset = dataset . setDataset ( Color.YELLOW ) ;
Distance : 5

147
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ; SerialUtilities
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ; SerialUtilities
Distance : 5

148
Tree	this . dataset = dataset ; SerialUtilities
Code	this . dataset = dataset ; SerialUtilities
Distance : 5

149
Tree	this . dataset = ( dataset ) dataset . setDataset () ; SerialUtilities
Code	this . dataset = ( dataset ) dataset . setDataset () ; SerialUtilities
Distance : 9

150
Tree	dataset = NUMBER_CONSTANT / dataset ; Color.RED
Code	dataset = NUMBER_CONSTANT / dataset ; Color.RED
Distance : 6

151
Tree	this . dataset = dataset . setDataset ( dataset , false ) ; deepClone
Code	this . dataset = dataset . setDataset ( dataset , false ) ; deepClone
Distance : 9

152
Tree	this . setDataset () ; Color.RED
Code	this . setDataset () ; Color.RED
Distance : 5

153
Tree	dataset = dataset ; public
Code	dataset = dataset ; public
Distance : 4

154
Tree	dataset . setDataset ( this , dataset ) ; Color.RED
Code	dataset . setDataset ( this , dataset ) ; Color.RED
Distance : 5

155
Tree	dataset = NUMBER_CONSTANT / dataset ;
Code	dataset = NUMBER_CONSTANT / dataset ;
Distance : 5

156
Tree	dataset = NUMBER_CONSTANT / dataset ; SerialUtilities
Code	dataset = NUMBER_CONSTANT / dataset ; SerialUtilities
Distance : 6

157
Tree	final = dataset ;
Code	final = dataset ;
Distance : 3

158
Tree	dataset = new MarkerChangeEvent < () ;
Code	dataset = new MarkerChangeEvent < () ;
Distance : 6

159
Tree	this . dataset = dataset . setDataset ( dataset , false ) ; readPaint
Code	this . dataset = dataset . setDataset ( dataset , false ) ; readPaint
Distance : 9

160
Tree	dataset = NUMBER_CONSTANT / dataset ; public
Code	dataset = NUMBER_CONSTANT / dataset ; public
Distance : 6

161
Tree	this . dataset = true ; readPaint
Code	this . dataset = true ; readPaint
Distance : 5

162
Tree	dataset = dataset . setDataset ( starts ) ;
Code	dataset = dataset . setDataset ( starts ) ;
Distance : 5

163
Tree	put = null ;
Code	put = null ;
Distance : 4

164
Tree	dataset = NUMBER_CONSTANT ;
Code	dataset = NUMBER_CONSTANT ;
Distance : 4

165
Tree	this . dataset = = ;
Code	this . dataset = = ;
Distance : 4

166
Tree	this . dataset = Color.RED ;
Code	this . dataset = Color.RED ;
Distance : 4

167
Tree	this . dataset = setDataset ( dataset ) ; SerialUtilities
Code	this . dataset = setDataset ( dataset ) ; SerialUtilities
Distance : 5

168
Tree	setDataset ( LegendItem ) ;
Code	setDataset ( LegendItem ) ;
Distance : 1

169
Tree	dataset = dataset ; Color.RED
Code	dataset = dataset ; Color.RED
Distance : 4

170
Tree	this . dataset = new StandardPieToolTipGenerator ( dataset ) . setDataset ( dataset ) ;
Code	this . dataset = new StandardPieToolTipGenerator ( dataset ) . setDataset ( dataset ) ;
Distance : 10

171
Tree	this . dataset = ( dataset ) dataset . setDataset () ;
Code	this . dataset = ( dataset ) dataset . setDataset () ;
Distance : 8

172
Tree	dataset = . ;
Code	dataset = . ;
Distance : 4

173
Tree	put = dataset ;
Code	put = dataset ;
Distance : 3

174
Tree	XYDataset = new ArrayList < () ;
Code	XYDataset = new ArrayList < () ;
Distance : 6

175
Tree	String = new ArrayList < () ;
Code	String = new ArrayList < () ;
Distance : 6

176
Tree	String = null ;
Code	String = null ;
Distance : 4

177
Tree	this . dataset = dataset . setDataset () ; public
Code	this . dataset = dataset . setDataset () ; public
Distance : 8

178
Tree	this . dataset = setDataset ( dataset ) ; public
Code	this . dataset = setDataset ( dataset ) ; public
Distance : 5

179
Tree	dataset . setDataset ( this , dataset ) ; public
Code	dataset . setDataset ( this , dataset ) ; public
Distance : 5

180
Tree	this . dataset = super(); ;
Code	this . dataset = super(); ;
Distance : 4

181
Tree	dataset = ( dataset ) dataset . setDataset () ;
Code	dataset = ( dataset ) dataset . setDataset () ;
Distance : 6

182
Tree	dataset = super(); ;
Code	dataset = super(); ;
Distance : 4

183
Tree	put = ( dataset ) dataset . setDataset () ;
Code	put = ( dataset ) dataset . setDataset () ;
Distance : 6

184
Tree	this . dataset = dataset . setDataset ( dataset ) ; public
Code	this . dataset = dataset . setDataset ( dataset ) ; public
Distance : 7

185
Tree	this . dataset = dataset ;
Code	this . dataset = dataset ;
Distance : 4

186
Tree	this . dataset = dataset ( dataset ) ; Color.RED
Code	this . dataset = dataset ( dataset ) ; Color.RED
Distance : 6

187
Tree	this . dataset . setDataset () ; Color.RED
Code	this . dataset . setDataset () ; Color.RED
Distance : 6

========================================================================


========================================================================
Example Number: 6
Parent Code is: 
PathIterator iterator2 = p1 . getPathIterator ( null ) ;
-------------------------------------------------------------------------------
Child code is: 
PathIterator iterator2 = p2 . getPathIterator ( null ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=PathIterator})) (59 (800{val=iterator2}) (204{val==}) (32 (800{val=p1}) (235{val=.}) (802{val=getPathIterator}) (214{val=(}) (500{val=null}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=PathIterator})) (59 (800{val=iterator2}) (204{val==}) (32 (800{val=p2}) (235{val=.}) (802{val=getPathIterator}) (214{val=(}) (500{val=null}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/11/parent/source_org_jfree_chart_util_ShapeUtilities.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 152
Wrong
========================================================================
False

0
Tree	iterator2 p2 = p1 . iterator2 ( iterator2 ) ;
Code	iterator2 p2 = p1 . iterator2 ( iterator2 ) ;
Distance : 5

1
Tree	iterator2 p1 ;
Code	iterator2 p1 ;
Distance : 8

2
Tree	iterator2 p2 = XYBubbleRenderer . PathIterator ( NUMBER_CONSTANT ) ;
Code	iterator2 p2 = XYBubbleRenderer . PathIterator ( NUMBER_CONSTANT ) ;
Distance : 5

3
Tree	iterator2 iterator2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	iterator2 iterator2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

4
Tree	iterator2 iterator2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	iterator2 iterator2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 16

5
Tree	iterator2 iterator2 = p2 . iterator2 ( STRING_CONSTANT , true ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( STRING_CONSTANT , true ) ;
Distance : 5

6
Tree	iterator2 p2 = p1 . iterator2 () ;
Code	iterator2 p2 = p1 . iterator2 () ;
Distance : 7

7
Tree	iterator2 iterator2 ;
Code	iterator2 iterator2 ;
Distance : 8

8
Tree	iterator2 p2 ;
Code	iterator2 p2 ;
Distance : 7

9
Tree	iterator2 p2 = PathIterator ( this . p2 ) ;
Code	iterator2 p2 = PathIterator ( this . p2 ) ;
Distance : 7

10
Tree	iterator2 p2 = p2 . iterator2 ( ( PathIterator [] ) super(); ) ;
Code	iterator2 p2 = p2 . iterator2 ( ( PathIterator [] ) super(); ) ;
Distance : 8

11
Tree	iterator2 p2 = p2 . iterator2 ( ( PathIterator [] ) return; ) ;
Code	iterator2 p2 = p2 . iterator2 ( ( PathIterator [] ) return; ) ;
Distance : 8

12
Tree	iterator2 iterator2 = p2 . iterator2 ( ( PathIterator [] ) PathIterator ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( ( PathIterator [] ) PathIterator ) ;
Distance : 7

13
Tree	protected iterator2 p2 = p2 . PathIterator ( ( PathIterator [] ) null ) ;
Code	protected iterator2 p2 = p2 . PathIterator ( ( PathIterator [] ) null ) ;
Distance : 7

14
Tree	protected iterator2 p2 = p2 . iterator2 ( ( iterator2 [] ) return; ) ;
Code	protected iterator2 p2 = p2 . iterator2 ( ( iterator2 [] ) return; ) ;
Distance : 8

15
Tree	iterator2 iterator2 = p1 . iterator2 ( iterator2 , this . PathIterator ) ;
Code	iterator2 iterator2 = p1 . iterator2 ( iterator2 , this . PathIterator ) ;
Distance : 8

16
Tree	iterator2 p2 = p2 . iterator2 ( PathIterator , null ) ;
Code	iterator2 p2 = p2 . iterator2 ( PathIterator , null ) ;
Distance : 5

17
Tree	iterator2 p2 = this . p2 . iterator2 () ;
Code	iterator2 p2 = this . p2 . iterator2 () ;
Distance : 7

18
Tree	iterator2 p2 = PathIterator ( PathIterator . PathIterator ( null ) ) ;
Code	iterator2 p2 = PathIterator ( PathIterator . PathIterator ( null ) ) ;
Distance : 7

19
Tree	static iterator2 p2 = p2 . PathIterator ( iterator2 ) ;
Code	static iterator2 p2 = p2 . PathIterator ( iterator2 ) ;
Distance : 4

20
Tree	iterator2 iterator2 = p1 . PathIterator ( iterator2 ) ;
Code	iterator2 iterator2 = p1 . PathIterator ( iterator2 ) ;
Distance : 4

21
Tree	iterator2 p2 = p2 . iterator2 ( null , null ) ;
Code	iterator2 p2 = p2 . iterator2 ( null , null ) ;
Distance : 5

22
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 , p2 . PathIterator ( null ) ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 , p2 . PathIterator ( null ) ) ;
Distance : 10

23
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 , p2 . PathIterator ( super(); ) ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 , p2 . PathIterator ( super(); ) ) ;
Distance : 11

24
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 , iterator2 . PathIterator ( iterator2 ) ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 , iterator2 . PathIterator ( iterator2 ) ) ;
Distance : 11

25
Tree	iterator2 iterator2 = p2 . iterator2 ( this . PathIterator ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( this . PathIterator ) ;
Distance : 5

26
Tree	iterator2 p2 = PathIterator ( p2 ) ;
Code	iterator2 p2 = PathIterator ( p2 ) ;
Distance : 5

27
Tree	iterator2 p2 = p2 . iterator2 ( super(); ) ;
Code	iterator2 p2 = p2 . iterator2 ( super(); ) ;
Distance : 4

28
Tree	protected iterator2 p2 = p2 . iterator2 ( iterator2 ) ;
Code	protected iterator2 p2 = p2 . iterator2 ( iterator2 ) ;
Distance : 4

29
Tree	iterator2 p1 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	iterator2 p1 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

30
Tree	protected iterator2 p2 = p2 . iterator2 ( super(); ) ;
Code	protected iterator2 p2 = p2 . iterator2 ( super(); ) ;
Distance : 4

31
Tree	iterator2 p2 = p1 . PathIterator ( iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	iterator2 p2 = p1 . PathIterator ( iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 14

32
Tree	iterator2 p1 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	iterator2 p1 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 17

33
Tree	iterator2 iterator2 = p2 . iterator2 ( iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

34
Tree	PathIterator p2 = PathIterator ( p1 ) ;
Code	PathIterator p2 = PathIterator ( p1 ) ;
Distance : 5

35
Tree	iterator2 p2 = p2 . iterator2 ( super(); ) ;
Code	iterator2 p2 = p2 . iterator2 ( super(); ) ;
Distance : 4

36
Tree	iterator2 iterator2 = p2 . iterator2 ( null ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( null ) ;
Distance : 2

37
Tree	iterator2 p2 = PathIterator ( NUMBER_CONSTANT ) ; deepClone
Code	iterator2 p2 = PathIterator ( NUMBER_CONSTANT ) ; deepClone
Distance : 6

38
Tree	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; deepClone
Code	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; deepClone
Distance : 12

39
Tree	PathIterator p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	PathIterator p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

40
Tree	iterator2 p2 = PathIterator ( PathIterator ) ;
Code	iterator2 p2 = PathIterator ( PathIterator ) ;
Distance : 5

41
Tree	iterator2 p2 = PathIterator ( DateTickUnitType.DAY ) ;
Code	iterator2 p2 = PathIterator ( DateTickUnitType.DAY ) ;
Distance : 5

42
Tree	iterator2 p2 = this . iterator2 . PathIterator () ;
Code	iterator2 p2 = this . iterator2 . PathIterator () ;
Distance : 7

43
Tree	iterator2 p2 ; deepClone
Code	iterator2 p2 ; deepClone
Distance : 8

44
Tree	PathIterator p2 = p2 . iterator2 ( iterator2 ) ;
Code	PathIterator p2 = p2 . iterator2 ( iterator2 ) ;
Distance : 3

45
Tree	iterator2 p2 = PathIterator ( PathIterator . PathIterator ( iterator2 ) ) ;
Code	iterator2 p2 = PathIterator ( PathIterator . PathIterator ( iterator2 ) ) ;
Distance : 8

46
Tree	iterator2 iterator2 = p2 . iterator2 ( iterator2 , null ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( iterator2 , null ) ;
Distance : 4

47
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 ) ;
Distance : 4

48
Tree	iterator2 iterator2 = p1 . iterator2 () ;
Code	iterator2 iterator2 = p1 . iterator2 () ;
Distance : 6

49
Tree	iterator2 p2 = p2 . iterator2 ( this . PathIterator ) ;
Code	iterator2 p2 = p2 . iterator2 ( this . PathIterator ) ;
Distance : 6

50
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 . PathIterator ( null ) ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 . PathIterator ( null ) ) ;
Distance : 8

51
Tree	iterator2 iterator2 = p2 . iterator2 ( iterator2 . class ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( iterator2 . class ) ;
Distance : 5

52
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 13

53
Tree	iterator2 p2 = p2 . iterator2 ( super(); , null ) ;
Code	iterator2 p2 = p2 . iterator2 ( super(); , null ) ;
Distance : 5

54
Tree	protected iterator2 p2 = p2 . PathIterator ( null ) ;
Code	protected iterator2 p2 = p2 . PathIterator ( null ) ;
Distance : 3

55
Tree	iterator2 p2 = PathIterator ( PathIterator . PathIterator ( super(); ) ) ;
Code	iterator2 p2 = PathIterator ( PathIterator . PathIterator ( super(); ) ) ;
Distance : 8

56
Tree	protected iterator2 p2 = p2 . PathIterator ( ( PathIterator [] ) PathIterator ) ;
Code	protected iterator2 p2 = p2 . PathIterator ( ( PathIterator [] ) PathIterator ) ;
Distance : 8

57
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 . PathIterator ( PathIterator ) ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 . PathIterator ( PathIterator ) ) ;
Distance : 9

58
Tree	iterator2 iterator2 = p2 . iterator2 ( ( PathIterator ) return; ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( ( PathIterator ) return; ) ;
Distance : 6

59
Tree	iterator2 p2 = p2 . iterator2 ( ( PathIterator ) return; ) ;
Code	iterator2 p2 = p2 . iterator2 ( ( PathIterator ) return; ) ;
Distance : 7

60
Tree	iterator2 iterator2 = p1 . iterator2 ( iterator2 . class ) ;
Code	iterator2 iterator2 = p1 . iterator2 ( iterator2 . class ) ;
Distance : 6

61
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 , Locale.UK ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 , Locale.UK ) ;
Distance : 6

62
Tree	iterator2 p2 = PathIterator ( NUMBER_CONSTANT ) ;
Code	iterator2 p2 = PathIterator ( NUMBER_CONSTANT ) ;
Distance : 5

63
Tree	iterator2 p2 = p2 . iterator2 ( ( long ) NUMBER_CONSTANT ) ;
Code	iterator2 p2 = p2 . iterator2 ( ( long ) NUMBER_CONSTANT ) ;
Distance : 7

64
Tree	PathIterator p2 = p2 . iterator2 ( iterator2 . class ) ;
Code	PathIterator p2 = p2 . iterator2 ( iterator2 . class ) ;
Distance : 5

65
Tree	iterator2 iterator2 = PathIterator ( PathIterator . PathIterator ( null ) ) ;
Code	iterator2 iterator2 = PathIterator ( PathIterator . PathIterator ( null ) ) ;
Distance : 6

66
Tree	iterator2 iterator2 = p2 . iterator2 ( iterator2 . PathIterator ( null ) ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( iterator2 . PathIterator ( null ) ) ;
Distance : 7

67
Tree	iterator2 p2 = p2 . iterator2 ( ( PathIterator ) super(); ) ;
Code	iterator2 p2 = p2 . iterator2 ( ( PathIterator ) super(); ) ;
Distance : 7

68
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 , getLowerMargin ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 , getLowerMargin ) ;
Distance : 6

69
Tree	iterator2 iterator2 = p2 . iterator2 () ;
Code	iterator2 iterator2 = p2 . iterator2 () ;
Distance : 5

70
Tree	iterator2 p2 = p2 . iterator2 ( null ) ;
Code	iterator2 p2 = p2 . iterator2 ( null ) ;
Distance : 3

71
Tree	iterator2 p2 = p1 . iterator2 ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	iterator2 p2 = p1 . iterator2 ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

72
Tree	iterator2 iterator2 = PathIterator ( iterator2 ) ;
Code	iterator2 iterator2 = PathIterator ( iterator2 ) ;
Distance : 5

73
Tree	iterator2 p2 = p2 . iterator2 ( PathIterator ) ;
Code	iterator2 p2 = p2 . iterator2 ( PathIterator ) ;
Distance : 4

74
Tree	iterator2 p1 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	iterator2 p1 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

75
Tree	iterator2 iterator2 = p2 . iterator2 ( iterator2 , this . PathIterator ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( iterator2 , this . PathIterator ) ;
Distance : 7

76
Tree	iterator2 p2 = p2 . iterator2 ( CompositeTitle ) ;
Code	iterator2 p2 = p2 . iterator2 ( CompositeTitle ) ;
Distance : 4

77
Tree	iterator2 p2 = p2 . iterator2 ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	iterator2 p2 = p2 . iterator2 ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

78
Tree	iterator2 p2 = p1 . PathIterator ( iterator2 . PathIterator ( null ) ) ;
Code	iterator2 p2 = p1 . PathIterator ( iterator2 . PathIterator ( null ) ) ;
Distance : 9

79
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 , p2 . PathIterator ( iterator2 ) ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 , p2 . PathIterator ( iterator2 ) ) ;
Distance : 11

80
Tree	iterator2 p2 = p2 . PathIterator ( iterator2 , this . PathIterator ) ;
Code	iterator2 p2 = p2 . PathIterator ( iterator2 , this . PathIterator ) ;
Distance : 8

81
Tree	iterator2 iterator2 = PathIterator ( ( PathIterator [] ) return; ) ;
Code	iterator2 iterator2 = PathIterator ( ( PathIterator [] ) return; ) ;
Distance : 8

82
Tree	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

83
Tree	iterator2 iterator2 = p2 . iterator2 ( null ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( null ) ;
Distance : 2

84
Tree	PathIterator p2 = p1 . iterator2 ( iterator2 , this . iterator2 ) ;
Code	PathIterator p2 = p1 . iterator2 ( iterator2 , this . iterator2 ) ;
Distance : 8

85
Tree	iterator2 p2 = PathIterator ( Color.RED ) ;
Code	iterator2 p2 = PathIterator ( Color.RED ) ;
Distance : 5

86
Tree	iterator2 p2 = p1 . iterator2 ( iterator2 , null ) ;
Code	iterator2 p2 = p1 . iterator2 ( iterator2 , null ) ;
Distance : 6

87
Tree	iterator2 iterator2 = p1 . iterator2 ( NUMBER_CONSTANT ) ;
Code	iterator2 iterator2 = p1 . iterator2 ( NUMBER_CONSTANT ) ;
Distance : 4

88
Tree	iterator2 iterator2 = p1 . iterator2 ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	iterator2 iterator2 = p1 . iterator2 ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

89
Tree	iterator2 iterator2 = p2 . iterator2 ( iterator2 ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( iterator2 ) ;
Distance : 3

90
Tree	iterator2 p2 = this . iterator2 . iterator2 ( p2 ) ;
Code	iterator2 p2 = this . iterator2 . iterator2 ( p2 ) ;
Distance : 7

91
Tree	iterator2 iterator2 = this . iterator2 . PathIterator () ;
Code	iterator2 iterator2 = this . iterator2 . PathIterator () ;
Distance : 6

92
Tree	iterator2 iterator2 = PathIterator ( ( PathIterator [] ) null ) ;
Code	iterator2 iterator2 = PathIterator ( ( PathIterator [] ) null ) ;
Distance : 7

93
Tree	iterator2 p1 = PathIterator ( NUMBER_CONSTANT ) ;
Code	iterator2 p1 = PathIterator ( NUMBER_CONSTANT ) ;
Distance : 6

94
Tree	protected iterator2 p2 = p2 . iterator2 ( ( iterator2 [] ) super(); ) ;
Code	protected iterator2 p2 = p2 . iterator2 ( ( iterator2 [] ) super(); ) ;
Distance : 8

95
Tree	iterator2 p2 = PathIterator ( getKey ) ;
Code	iterator2 p2 = PathIterator ( getKey ) ;
Distance : 5

96
Tree	iterator2 iterator2 = p1 . iterator2 ( this . PathIterator ) ;
Code	iterator2 iterator2 = p1 . iterator2 ( this . PathIterator ) ;
Distance : 6

97
Tree	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; deepClone
Code	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; deepClone
Distance : 18

98
Tree	iterator2 iterator2 = PathIterator ( DateTickUnitType.DAY ) ;
Code	iterator2 iterator2 = PathIterator ( DateTickUnitType.DAY ) ;
Distance : 5

99
Tree	iterator2 iterator2 = p2 . iterator2 ( NUMBER_CONSTANT ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( NUMBER_CONSTANT ) ;
Distance : 3

100
Tree	iterator2 p2 = p1 . iterator2 ( NUMBER_CONSTANT ) ;
Code	iterator2 p2 = p1 . iterator2 ( NUMBER_CONSTANT ) ;
Distance : 5

101
Tree	iterator2 p2 = p2 . iterator2 ( null ) ;
Code	iterator2 p2 = p2 . iterator2 ( null ) ;
Distance : 3

102
Tree	iterator2 p2 = p2 . p2 ( iterator2 ) ;
Code	iterator2 p2 = p2 . p2 ( iterator2 ) ;
Distance : 4

103
Tree	iterator2 p2 = p2 . iterator2 ( PathIterator ) ;
Code	iterator2 p2 = p2 . iterator2 ( PathIterator ) ;
Distance : 4

104
Tree	iterator2 p2 = p2 . iterator2 ( NUMBER_CONSTANT ) ;
Code	iterator2 p2 = p2 . iterator2 ( NUMBER_CONSTANT ) ;
Distance : 4

105
Tree	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; deepClone
Code	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; deepClone
Distance : 16

106
Tree	iterator2 p2 = Color.GRAY . PathIterator ( STRING_CONSTANT ) ;
Code	iterator2 p2 = Color.GRAY . PathIterator ( STRING_CONSTANT ) ;
Distance : 5

107
Tree	iterator2 p2 = p1 . iterator2 ( this . PathIterator ) ;
Code	iterator2 p2 = p1 . iterator2 ( this . PathIterator ) ;
Distance : 7

108
Tree	iterator2 p2 = p2 . iterator2 ( ( p1 ) return; ) ;
Code	iterator2 p2 = p2 . iterator2 ( ( p1 ) return; ) ;
Distance : 7

109
Tree	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 17

110
Tree	iterator2 p2 = p2 . iterator2 ( ( float ) NUMBER_CONSTANT ) ;
Code	iterator2 p2 = p2 . iterator2 ( ( float ) NUMBER_CONSTANT ) ;
Distance : 7

111
Tree	iterator2 iterator2 = PathIterator ( this . PathIterator ) ;
Code	iterator2 iterator2 = PathIterator ( this . PathIterator ) ;
Distance : 6

112
Tree	iterator2 iterator2 = p2 . iterator2 ( null , null ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( null , null ) ;
Distance : 4

113
Tree	iterator2 p2 = iterateToFindZBounds . PathIterator ( STRING_CONSTANT ) ;
Code	iterator2 p2 = iterateToFindZBounds . PathIterator ( STRING_CONSTANT ) ;
Distance : 5

114
Tree	iterator2 p2 = p2 . iterator2 ( baseName ) ;
Code	iterator2 p2 = p2 . iterator2 ( baseName ) ;
Distance : 4

115
Tree	iterator2 p2 = p2 . iterator2 ( ( PathIterator [] ) PathIterator ) ;
Code	iterator2 p2 = p2 . iterator2 ( ( PathIterator [] ) PathIterator ) ;
Distance : 8

116
Tree	iterator2 iterator2 = p2 . iterator2 ( iterator2 ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( iterator2 ) ;
Distance : 3

117
Tree	iterator2 p2 = PathIterator ( this . PathIterator ) ;
Code	iterator2 p2 = PathIterator ( this . PathIterator ) ;
Distance : 7

118
Tree	iterator2 p2 = p2 . PathIterator ( STRING_CONSTANT , false ) ;
Code	iterator2 p2 = p2 . PathIterator ( STRING_CONSTANT , false ) ;
Distance : 6

119
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 , null ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 , null ) ;
Distance : 5

120
Tree	iterator2 p2 = this . p1 . iterator2 () ;
Code	iterator2 p2 = this . p1 . iterator2 () ;
Distance : 7

121
Tree	iterator2 p2 = this . iterator2 . PathIterator ( iterator2 ) ;
Code	iterator2 p2 = this . iterator2 . PathIterator ( iterator2 ) ;
Distance : 7

122
Tree	iterator2 p2 = p2 . iterator2 ( STRING_CONSTANT ) ;
Code	iterator2 p2 = p2 . iterator2 ( STRING_CONSTANT ) ;
Distance : 4

123
Tree	iterator2 iterator2 = PathIterator ( NUMBER_CONSTANT ) ;
Code	iterator2 iterator2 = PathIterator ( NUMBER_CONSTANT ) ;
Distance : 5

124
Tree	iterator2 iterator2 = p2 . iterator2 ( ( float ) NUMBER_CONSTANT ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( ( float ) NUMBER_CONSTANT ) ;
Distance : 6

125
Tree	iterator2 p2 = p1 . PathIterator ( ( float ) NUMBER_CONSTANT ) ;
Code	iterator2 p2 = p1 . PathIterator ( ( float ) NUMBER_CONSTANT ) ;
Distance : 8

126
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 , float ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 , float ) ;
Distance : 6

127
Tree	iterator2 p2 = p1 . iterator2 ( iterator2 ) ;
Code	iterator2 p2 = p1 . iterator2 ( iterator2 ) ;
Distance : 5

128
Tree	iterator2 p2 = p2 . PathIterator () ;
Code	iterator2 p2 = p2 . PathIterator () ;
Distance : 6

129
Tree	iterator2 p2 = p2 . PathIterator ( STRING_CONSTANT , true ) ;
Code	iterator2 p2 = p2 . PathIterator ( STRING_CONSTANT , true ) ;
Distance : 6

130
Tree	iterator2 p2 = getRawDataItem . PathIterator ( STRING_CONSTANT ) ;
Code	iterator2 p2 = getRawDataItem . PathIterator ( STRING_CONSTANT ) ;
Distance : 5

131
Tree	iterator2 p2 = p2 . iterator2 ( baseResourceClass ) ;
Code	iterator2 p2 = p2 . iterator2 ( baseResourceClass ) ;
Distance : 4

132
Tree	iterator2 p2 = PathIterator ( this . p1 ) ;
Code	iterator2 p2 = PathIterator ( this . p1 ) ;
Distance : 7

133
Tree	iterator2 p2 = p1 . iterator2 ( iterator2 . class ) ;
Code	iterator2 p2 = p1 . iterator2 ( iterator2 . class ) ;
Distance : 7

134
Tree	iterator2 iterator2 = p1 . iterator2 ( iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	iterator2 iterator2 = p1 . iterator2 ( iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 13

135
Tree	iterator2 iterator2 = p1 . iterator2 ( iterator2 , null ) ;
Code	iterator2 iterator2 = p1 . iterator2 ( iterator2 , null ) ;
Distance : 5

136
Tree	iterator2 p2 = Color.GRAY . PathIterator ( NUMBER_CONSTANT ) ;
Code	iterator2 p2 = Color.GRAY . PathIterator ( NUMBER_CONSTANT ) ;
Distance : 5

137
Tree	PathIterator p2 = iterateToFindZBounds . iterator2 ( NUMBER_CONSTANT ) ;
Code	PathIterator p2 = iterateToFindZBounds . iterator2 ( NUMBER_CONSTANT ) ;
Distance : 4

138
Tree	iterator2 iterator2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	iterator2 iterator2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

139
Tree	iterator2 p2 = getRawDataItem . iterator2 ( NUMBER_CONSTANT ) ;
Code	iterator2 p2 = getRawDataItem . iterator2 ( NUMBER_CONSTANT ) ;
Distance : 5

140
Tree	iterator2 p2 = p1 . iterator2 ( STRING_CONSTANT ) ;
Code	iterator2 p2 = p1 . iterator2 ( STRING_CONSTANT ) ;
Distance : 5

141
Tree	iterator2 iterator2 = p1 . PathIterator ( STRING_CONSTANT ) ;
Code	iterator2 iterator2 = p1 . PathIterator ( STRING_CONSTANT ) ;
Distance : 4

142
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 , TextFragment.DEFAULT_FONT ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 , TextFragment.DEFAULT_FONT ) ;
Distance : 6

143
Tree	iterator2 iterator2 = p2 . PathIterator ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	iterator2 iterator2 = p2 . PathIterator ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

144
Tree	PathIterator p2 = XYBubbleRenderer . PathIterator ( STRING_CONSTANT ) ;
Code	PathIterator p2 = XYBubbleRenderer . PathIterator ( STRING_CONSTANT ) ;
Distance : 4

145
Tree	iterator2 iterator2 = this . iterator2 . PathIterator ( iterator2 ) ;
Code	iterator2 iterator2 = this . iterator2 . PathIterator ( iterator2 ) ;
Distance : 6

146
Tree	iterator2 p2 = PathIterator ( ( PathIterator [] ) return; ) ;
Code	iterator2 p2 = PathIterator ( ( PathIterator [] ) return; ) ;
Distance : 9

147
Tree	iterator2 p2 = PathIterator ( ( PathIterator [] ) null ) ;
Code	iterator2 p2 = PathIterator ( ( PathIterator [] ) null ) ;
Distance : 8

148
Tree	iterator2 p2 = this . iterator2 . iterator2 ( p1 ) ;
Code	iterator2 p2 = this . iterator2 . iterator2 ( p1 ) ;
Distance : 7

149
Tree	iterator2 p2 = p2 . iterator2 ( info1 ) ;
Code	iterator2 p2 = p2 . iterator2 ( info1 ) ;
Distance : 4

150
Tree	iterator2 iterator2 = p2 . iterator2 ( STRING_CONSTANT , false ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( STRING_CONSTANT , false ) ;
Distance : 5

151
Tree	iterator2 iterator2 = p2 . iterator2 ( STRING_CONSTANT ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( STRING_CONSTANT ) ;
Distance : 3

========================================================================


========================================================================
Example Number: 7
Parent Code is: 
{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; }
-------------------------------------------------------------------------------
Child code is: 
{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (800{val=toolTipText}) (200{val=+}) (45{val=STRING_CONSTANT})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=ImageMapUtilities}) (235{val=.}) (802{val=htmlEscape}) (214{val=(}) (800{val=toolTipText}) (215{val=)})) (200{val=+}) (45{val=STRING_CONSTANT})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/10/parent/source_org_jfree_chart_imagemap_StandardToolTipTagFragmentGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 176
Correct
========================================================================
True

0
Tree	{ return false ; }
Code	{ return false ; }
Distance : 10

1
Tree	{ return createStandardDateTickUnits ; }
Code	{ return createStandardDateTickUnits ; }
Distance : 10

2
Tree	{ return getRawDataItem [ toolTipText ] . htmlEscape () ; }
Code	{ return getRawDataItem [ toolTipText ] . htmlEscape () ; }
Distance : 9

3
Tree	{ return NUMBER_CONSTANT * ( ; }
Code	{ return NUMBER_CONSTANT * ( ; }
Distance : 9

4
Tree	{ return ImageMapUtilities . htmlEscape ( RenderingHints.KEY_TEXT_ANTIALIASING ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( RenderingHints.KEY_TEXT_ANTIALIASING ) ; }
Distance : 5

5
Tree	{ return throw [ toolTipText ] . htmlEscape () ; }
Code	{ return throw [ toolTipText ] . htmlEscape () ; }
Distance : 9

6
Tree	{ return ! htmlEscape ( toolTipText ) ; }
Code	{ return ! htmlEscape ( toolTipText ) ; }
Distance : 6

7
Tree	{ return htmlEscape ( toolTipText , toolTipText , null , false , true ) ; }
Code	{ return htmlEscape ( toolTipText , toolTipText , null , false , true ) ; }
Distance : 12

8
Tree	{ return toolTipText . htmlEscape ( toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText ) ; }
Distance : 5

9
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Distance : 1

10
Tree	{ return getDataset . htmlEscape ( toolTipText ) ; }
Code	{ return getDataset . htmlEscape ( toolTipText ) ; }
Distance : 5

11
Tree	{ return super [ ImageMapUtilities ] . htmlEscape () ; }
Code	{ return super [ ImageMapUtilities ] . htmlEscape () ; }
Distance : 8

12
Tree	{ return getRawDataItem ; }
Code	{ return getRawDataItem ; }
Distance : 10

13
Tree	{ return ImageMapUtilities ; } deepClone
Code	{ return ImageMapUtilities ; } deepClone
Distance : 10

14
Tree	{ return ImageMapUtilities ; } readPaint
Code	{ return ImageMapUtilities ; } readPaint
Distance : 10

15
Tree	{ return super ; }
Code	{ return super ; }
Distance : 10

16
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new BasicStroke () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new BasicStroke () ) + STRING_CONSTANT ; }
Distance : 4

17
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new toolTipText ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new toolTipText ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 4

18
Tree	{ return ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) ; }
Distance : 6

19
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ; }
Distance : 5

20
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText ) ; }
Distance : 4

21
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( Color.RED , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( Color.RED , toolTipText ) + STRING_CONSTANT ; }
Distance : 2

22
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 5

23
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new BasicStroke.CAP_ROUND () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new BasicStroke.CAP_ROUND () ) + STRING_CONSTANT ; }
Distance : 3

24
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( state.workingLine , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( state.workingLine , toolTipText ) + STRING_CONSTANT ; }
Distance : 2

25
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new BasicStroke ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new BasicStroke ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 6

26
Tree	{ return htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 7

27
Tree	{ return NUMBER_CONSTANT * ; ; }
Code	{ return NUMBER_CONSTANT * ; ; }
Distance : 10

28
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Distance : 4

29
Tree	{ return htmlEscape ( toolTipText , null , ImageMapUtilities ) ; }
Code	{ return htmlEscape ( toolTipText , null , ImageMapUtilities ) ; }
Distance : 9

30
Tree	{ return this ; } SerialUtilities
Code	{ return this ; } SerialUtilities
Distance : 11

31
Tree	{ return htmlEscape ( toolTipText , null , toolTipText ) ; }
Code	{ return htmlEscape ( toolTipText , null , toolTipText ) ; }
Distance : 8

32
Tree	{ throw new Integer ( toolTipText ) ; }
Code	{ throw new Integer ( toolTipText ) ; }
Distance : 8

33
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText ) ; }
Distance : 4

34
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new MarkerChangeEvent () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new MarkerChangeEvent () ) + STRING_CONSTANT ; }
Distance : 3

35
Tree	{ return htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 7

36
Tree	{ return ! toolTipText . htmlEscape ( toolTipText ) ; }
Code	{ return ! toolTipText . htmlEscape ( toolTipText ) ; }
Distance : 5

37
Tree	{ return toolTipText ; }
Code	{ return toolTipText ; }
Distance : 9

38
Tree	{ return ( int ) toolTipText ( toolTipText , toolTipText ) ; }
Code	{ return ( int ) toolTipText ( toolTipText , toolTipText ) ; }
Distance : 8

39
Tree	{ return ( double ) ImageMapUtilities ( toolTipText , toolTipText ) ; }
Code	{ return ( double ) ImageMapUtilities ( toolTipText , toolTipText ) ; }
Distance : 8

40
Tree	{ return ImageMapUtilities . htmlEscape ( BasicStroke.JOIN_BEVEL , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( BasicStroke.JOIN_BEVEL , toolTipText ) ; }
Distance : 6

41
Tree	{ return createStandardDateTickUnits . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return createStandardDateTickUnits . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

42
Tree	{ return getDataset . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return getDataset . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

43
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , false ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , false ) ; }
Distance : 5

44
Tree	{ return super . htmlEscape ( toolTipText ) ; }
Code	{ return super . htmlEscape ( toolTipText ) ; }
Distance : 5

45
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new Double ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new Double ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 6

46
Tree	{ throw new SeriesException ( toolTipText ) ; }
Code	{ throw new SeriesException ( toolTipText ) ; }
Distance : 8

47
Tree	{ return super [ toolTipText ] . htmlEscape () ; }
Code	{ return super [ toolTipText ] . htmlEscape () ; }
Distance : 9

48
Tree	{ return createStandardDateTickUnits . htmlEscape ( toolTipText ) ; }
Code	{ return createStandardDateTickUnits . htmlEscape ( toolTipText ) ; }
Distance : 5

49
Tree	{ return ImageMapUtilities . htmlEscape ( state.workingLine , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( state.workingLine , toolTipText ) ; }
Distance : 6

50
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , null , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , null , toolTipText ) ; }
Distance : 7

51
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 6

52
Tree	{ return ! ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ! ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 6

53
Tree	{ return htmlEscape () . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return htmlEscape () . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 7

54
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText . htmlEscape ( toolTipText ) ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText . htmlEscape ( toolTipText ) ) ; }
Distance : 9

55
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape ( ImageMapUtilities ) ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape ( ImageMapUtilities ) ) ; }
Distance : 10

56
Tree	{ return ( int ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( int ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

57
Tree	{ return ( double ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( double ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

58
Tree	{ return ImageMapUtilities . htmlEscape ( BasicStroke.CAP_ROUND ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( BasicStroke.CAP_ROUND ) ; }
Distance : 5

59
Tree	{ return htmlEscape ( toolTipText , toolTipText , null , false , false ) ; }
Code	{ return htmlEscape ( toolTipText , toolTipText , null , false , false ) ; }
Distance : 12

60
Tree	{ return ! ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ! ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 5

61
Tree	{ return ( double ) ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( double ) ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

62
Tree	{ return getRawDataItem . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return getRawDataItem . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

63
Tree	{ return ! htmlEscape ( toolTipText ) ; } deepClone
Code	{ return ! htmlEscape ( toolTipText ) ; } deepClone
Distance : 7

64
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , BasicStroke.JOIN_BEVEL ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , BasicStroke.JOIN_BEVEL ) ; }
Distance : 5

65
Tree	{ return htmlEscape ( this , ImageMapUtilities . htmlEscape ( toolTipText ) ) ; }
Code	{ return htmlEscape ( this , ImageMapUtilities . htmlEscape ( toolTipText ) ) ; }
Distance : 6

66
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( BasicStroke.CAP_ROUND , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( BasicStroke.CAP_ROUND , toolTipText ) + STRING_CONSTANT ; }
Distance : 2

67
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , new BasicStroke () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , new BasicStroke () ) + STRING_CONSTANT ; }
Distance : 5

68
Tree	{ return ( double ) toolTipText ( toolTipText , toolTipText ) ; }
Code	{ return ( double ) toolTipText ( toolTipText , toolTipText ) ; }
Distance : 8

69
Tree	{ return ! ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return ! ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ; }
Distance : 5

70
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , true ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , true ) ; }
Distance : 5

71
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Distance : 3

72
Tree	{ return STRING_CONSTANT ; } SerialUtilities
Code	{ return STRING_CONSTANT ; } SerialUtilities
Distance : 10

73
Tree	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

74
Tree	{ return htmlEscape ( this , toolTipText . htmlEscape ( toolTipText ) ) ; }
Code	{ return htmlEscape ( this , toolTipText . htmlEscape ( toolTipText ) ) ; }
Distance : 7

75
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 2

76
Tree	{ return this ; } Color.RED
Code	{ return this ; } Color.RED
Distance : 11

77
Tree	{ return new GeneralPath ( toolTipText ) ; }
Code	{ return new GeneralPath ( toolTipText ) ; }
Distance : 7

78
Tree	{ return new Year ( toolTipText ) ; }
Code	{ return new Year ( toolTipText ) ; }
Distance : 7

79
Tree	{ return ! htmlEscape ( toolTipText ) ; } readPaint
Code	{ return ! htmlEscape ( toolTipText ) ; } readPaint
Distance : 7

80
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape ( toolTipText ) ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape ( toolTipText ) ) ; }
Distance : 9

81
Tree	{ return ! ImageMapUtilities ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ! ImageMapUtilities ( ImageMapUtilities , toolTipText ) ; }
Distance : 7

82
Tree	{ return ! toolTipText ( toolTipText , toolTipText ) ; }
Code	{ return ! toolTipText ( toolTipText , toolTipText ) ; }
Distance : 8

83
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 1

84
Tree	{ return ! ImageMapUtilities ( toolTipText , toolTipText ) ; }
Code	{ return ! ImageMapUtilities ( toolTipText , toolTipText ) ; }
Distance : 7

85
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities ) ; }
Distance : 6

86
Tree	{ return toolTipText . htmlEscape ( toolTipText ) . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText ) . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 9

87
Tree	{ return htmlEscape ( this , toolTipText . htmlEscape ( ImageMapUtilities ) ) ; }
Code	{ return htmlEscape ( this , toolTipText . htmlEscape ( ImageMapUtilities ) ) ; }
Distance : 8

88
Tree	{ throw new RuntimeException ( toolTipText ) ; }
Code	{ throw new RuntimeException ( toolTipText ) ; }
Distance : 8

89
Tree	{ return htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

90
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new Integer () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new Integer () ) + STRING_CONSTANT ; }
Distance : 4

91
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new BasicStroke.CAP_ROUND ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new BasicStroke.CAP_ROUND ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 4

92
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new DialLayerChangeEvent ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new DialLayerChangeEvent ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 4

93
Tree	{ return NUMBER_CONSTANT * Year.MAXIMUM_YEAR ; }
Code	{ return NUMBER_CONSTANT * Year.MAXIMUM_YEAR ; }
Distance : 10

94
Tree	{ return ImageMapUtilities . htmlEscape ( BasicStroke.CAP_ROUND , BasicStroke.JOIN_BEVEL ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( BasicStroke.CAP_ROUND , BasicStroke.JOIN_BEVEL ) ; }
Distance : 6

95
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , getLowerMargin ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , getLowerMargin ) ; }
Distance : 5

96
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new toolTipText () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new toolTipText () ) + STRING_CONSTANT ; }
Distance : 2

97
Tree	{ return true ; }
Code	{ return true ; }
Distance : 10

98
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new Double () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new Double () ) + STRING_CONSTANT ; }
Distance : 4

99
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Distance : 2

100
Tree	{ return toolTipText . htmlEscape ( toolTipText ) . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText ) . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 10

101
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new DialLayerChangeEvent () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new DialLayerChangeEvent () ) + STRING_CONSTANT ; }
Distance : 3

102
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , new BasicStroke ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , new BasicStroke ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 7

103
Tree	{ return ! toolTipText . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return ! toolTipText . htmlEscape ( ImageMapUtilities ) ; }
Distance : 6

104
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 7

105
Tree	{ return htmlEscape () . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Code	{ return htmlEscape () . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Distance : 7

106
Tree	{ return toolTipText . htmlEscape ( toolTipText , null , ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , null , ImageMapUtilities ) ; }
Distance : 8

107
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Distance : 3

108
Tree	{ return getRawDataItem . htmlEscape ( toolTipText ) ; }
Code	{ return getRawDataItem . htmlEscape ( toolTipText ) ; }
Distance : 5

109
Tree	{ return htmlEscape ( this , ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ) ; }
Code	{ return htmlEscape ( this , ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ) ; }
Distance : 7

110
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 9

111
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText . htmlEscape ( ImageMapUtilities ) ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText . htmlEscape ( ImageMapUtilities ) ) ; }
Distance : 10

112
Tree	{ return htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Code	{ return htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Distance : 8

113
Tree	{ return ImageMapUtilities . htmlEscape ( RenderingHints.KEY_TEXT_ANTIALIASING , BasicStroke.JOIN_BEVEL ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( RenderingHints.KEY_TEXT_ANTIALIASING , BasicStroke.JOIN_BEVEL ) ; }
Distance : 6

114
Tree	{ return ( long ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( long ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

115
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

116
Tree	{ return ! htmlEscape ( ImageMapUtilities ) ; }
Code	{ return ! htmlEscape ( ImageMapUtilities ) ; }
Distance : 7

117
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 5

118
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText ) . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText ) . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 9

119
Tree	{ return ImageMapUtilities . htmlEscape ( BasicStroke.CAP_ROUND , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( BasicStroke.CAP_ROUND , toolTipText ) ; }
Distance : 6

120
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText ) + STRING_CONSTANT ; }
Distance : 2

121
Tree	{ return ImageMapUtilities ; }
Code	{ return ImageMapUtilities ; }
Distance : 9

122
Tree	{ return htmlEscape ( ImageMapUtilities , null , toolTipText ) ; }
Code	{ return htmlEscape ( ImageMapUtilities , null , toolTipText ) ; }
Distance : 7

123
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new Integer ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new Integer ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 6

124
Tree	{ return ! ImageMapUtilities . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return ! ImageMapUtilities . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 5

125
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 10

126
Tree	{ return null ; }
Code	{ return null ; }
Distance : 10

127
Tree	{ return ! ImageMapUtilities ( toolTipText , ImageMapUtilities ) ; }
Code	{ return ! ImageMapUtilities ( toolTipText , ImageMapUtilities ) ; }
Distance : 7

128
Tree	{ return getDataset ; }
Code	{ return getDataset ; }
Distance : 10

129
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 10

130
Tree	{ return new Integer ( toolTipText ) ; }
Code	{ return new Integer ( toolTipText ) ; }
Distance : 7

131
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new MarkerChangeEvent ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new MarkerChangeEvent ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 4

132
Tree	{ return NUMBER_CONSTANT * } ; }
Code	{ return NUMBER_CONSTANT * } ; }
Distance : 10

133
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , null , ImageMapUtilities ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , null , ImageMapUtilities ) ; }
Distance : 7

134
Tree	{ return ImageMapUtilities . htmlEscape () . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return ImageMapUtilities . htmlEscape () . htmlEscape ( ImageMapUtilities ) ; }
Distance : 7

135
Tree	{ return htmlEscape ( toolTipText , toolTipText , null , true , false ) ; }
Code	{ return htmlEscape ( toolTipText , toolTipText , null , true , false ) ; }
Distance : 12

136
Tree	{ return htmlEscape () . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return htmlEscape () . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 6

137
Tree	{ return toolTipText . htmlEscape ( toolTipText , false ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , false ) ; }
Distance : 6

138
Tree	{ return this ; } public
Code	{ return this ; } public
Distance : 11

139
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Distance : 2

140
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Distance : 0

141
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 9

142
Tree	{ return super . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return super . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

143
Tree	{ return this ; }
Code	{ return this ; }
Distance : 10

144
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText . htmlEscape () ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText . htmlEscape () ) ; }
Distance : 8

145
Tree	{ return htmlEscape ( ImageMapUtilities , null , ImageMapUtilities ) ; }
Code	{ return htmlEscape ( ImageMapUtilities , null , ImageMapUtilities ) ; }
Distance : 8

146
Tree	{ return ! toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ! toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

147
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , BasicStroke.JOIN_BEVEL ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , BasicStroke.JOIN_BEVEL ) ; }
Distance : 5

148
Tree	{ return htmlEscape ( toolTipText , toolTipText , null , true , true ) ; }
Code	{ return htmlEscape ( toolTipText , toolTipText , null , true , true ) ; }
Distance : 12

149
Tree	{ return ! ImageMapUtilities . htmlEscape ( toolTipText ) ; }
Code	{ return ! ImageMapUtilities . htmlEscape ( toolTipText ) ; }
Distance : 4

150
Tree	{ return toolTipText . htmlEscape () . htmlEscape ( toolTipText ) ; }
Code	{ return toolTipText . htmlEscape () . htmlEscape ( toolTipText ) ; }
Distance : 6

151
Tree	{ return new Range ( toolTipText ) ; }
Code	{ return new Range ( toolTipText ) ; }
Distance : 7

152
Tree	{ return STRING_CONSTANT + ImageMapUtilities + STRING_CONSTANT ; } readPaint
Code	{ return STRING_CONSTANT + ImageMapUtilities + STRING_CONSTANT ; } readPaint
Distance : 6

153
Tree	{ return toolTipText . htmlEscape ( toolTipText , true ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , true ) ; }
Distance : 6

154
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText . htmlEscape () ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText . htmlEscape () ) ; }
Distance : 8

155
Tree	{ return STRING_CONSTANT ; } Color.RED
Code	{ return STRING_CONSTANT ; } Color.RED
Distance : 10

156
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 5

157
Tree	{ return toolTipText . htmlEscape ( toolTipText , getLowerMargin ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , getLowerMargin ) ; }
Distance : 6

158
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 4

159
Tree	{ return STRING_CONSTANT + ImageMapUtilities + STRING_CONSTANT ; } deepClone
Code	{ return STRING_CONSTANT + ImageMapUtilities + STRING_CONSTANT ; } deepClone
Distance : 6

160
Tree	{ return toolTipText . htmlEscape () . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape () . htmlEscape ( ImageMapUtilities ) ; }
Distance : 7

161
Tree	{ return ( double ) toolTipText ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ( double ) toolTipText ( ImageMapUtilities , toolTipText ) ; }
Distance : 9

162
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 5

163
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape () ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape () ) ; }
Distance : 9

164
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 2

165
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText ) . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText ) . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 9

166
Tree	{ return toolTipText . htmlEscape ( toolTipText , null , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , null , toolTipText ) ; }
Distance : 8

167
Tree	{ throw new [] ( toolTipText ) ; }
Code	{ throw new [] ( toolTipText ) ; }
Distance : 8

168
Tree	{ return ImageMapUtilities . htmlEscape ( state.workingLine ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( state.workingLine ) ; }
Distance : 5

169
Tree	{ return ImageMapUtilities . htmlEscape ( state.workingLine , BasicStroke.JOIN_BEVEL ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( state.workingLine , BasicStroke.JOIN_BEVEL ) ; }
Distance : 6

170
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText . htmlEscape () ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText . htmlEscape () ) ; }
Distance : 9

171
Tree	{ return STRING_CONSTANT + ImageMapUtilities + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities + STRING_CONSTANT ; }
Distance : 5

172
Tree	{ return false ; } deepClone
Code	{ return false ; } deepClone
Distance : 11

173
Tree	{ return false ; } readPaint
Code	{ return false ; } readPaint
Distance : 11

174
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; }
Distance : 5

175
Tree	{ return STRING_CONSTANT ; } public
Code	{ return STRING_CONSTANT ; } public
Distance : 10

========================================================================


========================================================================
Example Number: 8
Parent Code is: 
{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ this ( time , zone , Locale . getDefault () ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (17 (315{val=this}) (214{val=(}) (800{val=time}) (234{val=,}) (40{val=RegularTimePeriod.DEFAULT_TIME_ZONE}) (234{val=,}) (32 (800{val=Locale}) (235{val=.}) (802{val=getDefault}) (216{val=()})) (215{val=)}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (17 (315{val=this}) (214{val=(}) (800{val=time}) (234{val=,}) (800{val=zone}) (234{val=,}) (32 (800{val=Locale}) (235{val=.}) (802{val=getDefault}) (216{val=()})) (215{val=)}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/8/parent/source_org_jfree_data_time_Week.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 84
Wrong
========================================================================
False

0
Tree	{ this ( time , false ) ; }
Code	{ this ( time , false ) ; }
Distance : 6

1
Tree	{ ; }
Code	{ ; }
Distance : 11

2
Tree	{ super ( STRING_CONSTANT ) ; time = time ; }
Code	{ super ( STRING_CONSTANT ) ; time = time ; }
Distance : 10

3
Tree	{ this ( time . getDefault () , Locale ) ; }
Code	{ this ( time . getDefault () , Locale ) ; }
Distance : 6

4
Tree	{ null time = time ; }
Code	{ null time = time ; }
Distance : 10

5
Tree	{ this ( time , true ) ; }
Code	{ this ( time , true ) ; }
Distance : 6

6
Tree	{ this ( time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time . getDefault () , Locale . getDefault () ) ; }
Distance : 3

7
Tree	{ this ( time , time , time , time . getDefault () ) ; }
Code	{ this ( time , time , time , time . getDefault () ) ; }
Distance : 4

8
Tree	{ super ( time , time , time , Locale . getDefault () ) ; time = time ; }
Code	{ super ( time , time , time , Locale . getDefault () ) ; time = time ; }
Distance : 8

9
Tree	{ super ( time , time , time , time . getDefault () ) ; time = time ; }
Code	{ super ( time , time , time , time . getDefault () ) ; time = time ; }
Distance : 9

10
Tree	{ this ( time , Locale , time ) ; }
Code	{ this ( time , Locale , time ) ; }
Distance : 5

11
Tree	{ this ( Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 4

12
Tree	{ super ( time , time . getDefault () ) ; Locale = time ; }
Code	{ super ( time , time . getDefault () ) ; Locale = time ; }
Distance : 8

13
Tree	{ super ( time , time , time , time . getDefault () ) ; }
Code	{ super ( time , time , time , time . getDefault () ) ; }
Distance : 5

14
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , Locale . getDefault () ) ; Locale = time ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , Locale . getDefault () ) ; Locale = time ; }
Distance : 7

15
Tree	{ Locale = time ; }
Code	{ Locale = time ; }
Distance : 10

16
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; if }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; if }
Distance : 6

17
Tree	{ this ( time . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time . getDefault () , zone . getDefault () ) ; }
Distance : 4

18
Tree	{ super ( time . getDefault () ) ; time = Locale ; }
Code	{ super ( time . getDefault () ) ; time = Locale ; }
Distance : 9

19
Tree	{ this ( time , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 4

20
Tree	{ super ( time , time , time , Locale . getDefault () ) ; }
Code	{ super ( time , time , time , Locale . getDefault () ) ; }
Distance : 4

21
Tree	{ this ( time , time , time , Locale . getDefault () ) ; }
Code	{ this ( time , time , time , Locale . getDefault () ) ; }
Distance : 3

22
Tree	{ super ( time , time , time , time . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , time , time , time . getDefault () ) ; Locale . getDefault () ; }
Distance : 10

23
Tree	{ super ( STRING_CONSTANT ) ; time = Locale ; }
Code	{ super ( STRING_CONSTANT ) ; time = Locale ; }
Distance : 10

24
Tree	{ super ( time , Locale , time , time . getDefault () ) ; }
Code	{ super ( time , Locale , time , time . getDefault () ) ; }
Distance : 5

25
Tree	{ super ( time , time , time , Locale . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , time , time , Locale . getDefault () ) ; Locale . getDefault () ; }
Distance : 9

26
Tree	{ this ( time , time , Locale , time . getDefault () ) ; }
Code	{ this ( time , time , Locale , time . getDefault () ) ; }
Distance : 3

27
Tree	{ this ( time , this , Locale . getDefault () ) ; }
Code	{ this ( time , this , Locale . getDefault () ) ; }
Distance : 1

28
Tree	{ this ( time , time , time . getDefault () ) ; }
Code	{ this ( time , time , time . getDefault () ) ; }
Distance : 2

29
Tree	{ this ( time , time , zone . getDefault () ) ; }
Code	{ this ( time , time , zone . getDefault () ) ; }
Distance : 2

30
Tree	{ this ( Locale , this , Locale . getDefault () ) ; }
Code	{ this ( Locale , this , Locale . getDefault () ) ; }
Distance : 2

31
Tree	{ this ( time , time , time , Locale , time , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , time , time , Locale , time , Locale , Locale . getDefault () ) ; }
Distance : 9

32
Tree	{ ; } Color.RED
Code	{ ; } Color.RED
Distance : 12

33
Tree	{ ; } public
Code	{ ; } public
Distance : 12

34
Tree	{ ; } SerialUtilities
Code	{ ; } SerialUtilities
Distance : 12

35
Tree	{ super ( time , Locale , time , Locale . getDefault () ) ; }
Code	{ super ( time , Locale , time , Locale . getDefault () ) ; }
Distance : 4

36
Tree	{ this ( time , time , time , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time , time , time . getDefault () , Locale . getDefault () ) ; }
Distance : 8

37
Tree	{ super ( time , null , null , Locale , Locale . getDefault () ) ; time = time ; }
Code	{ super ( time , null , null , Locale , Locale . getDefault () ) ; time = time ; }
Distance : 10

38
Tree	{ super ( time , null , null , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , null , null , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 10

39
Tree	{ this ( time , Locale , time , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , time , time . getDefault () , Locale . getDefault () ) ; }
Distance : 8

40
Tree	{ this ( time , zone , time ) ; }
Code	{ this ( time , zone , time ) ; }
Distance : 4

41
Tree	{ this ( time , Locale , time , time . getDefault () ) ; }
Code	{ this ( time , Locale , time , time . getDefault () ) ; }
Distance : 4

42
Tree	{ this ( time , time , time , time , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , time , time , time , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

43
Tree	{ super ( time . getDefault () ) ; Locale = time ; }
Code	{ super ( time . getDefault () ) ; Locale = time ; }
Distance : 9

44
Tree	{ super ( time , time , time , time . getDefault () ) ; Locale = time ; }
Code	{ super ( time , time , time , time . getDefault () ) ; Locale = time ; }
Distance : 9

45
Tree	{ super ( time , null , null , Locale , Locale . getDefault () ) ; zone = time ; }
Code	{ super ( time , null , null , Locale , Locale . getDefault () ) ; zone = time ; }
Distance : 10

46
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; else }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; else }
Distance : 6

47
Tree	{ return; time = time ; }
Code	{ return; time = time ; }
Distance : 10

48
Tree	{ this ( Locale , false ) ; }
Code	{ this ( Locale , false ) ; }
Distance : 7

49
Tree	{ super(); time = time ; }
Code	{ super(); time = time ; }
Distance : 10

50
Tree	{ super ( time , Locale . getDefault () ) ; time = time ; }
Code	{ super ( time , Locale . getDefault () ) ; time = time ; }
Distance : 7

51
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; XYBarRenderer.defaultBarPainter }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; XYBarRenderer.defaultBarPainter }
Distance : 6

52
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; time = time ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; time = time ; }
Distance : 8

53
Tree	{ this ( time , time , time , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time , time , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

54
Tree	{ super ( time , time , time , Locale . getDefault () ) ; Locale = time ; }
Code	{ super ( time , time , time , Locale . getDefault () ) ; Locale = time ; }
Distance : 8

55
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , Locale . getDefault () ) ; zone = time ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , Locale . getDefault () ) ; zone = time ; }
Distance : 7

56
Tree	{ this ( time . getDefault () , time ) ; }
Code	{ this ( time . getDefault () , time ) ; }
Distance : 6

57
Tree	{ this ( time , time , time ) ; }
Code	{ this ( time , time , time ) ; }
Distance : 5

58
Tree	{ super ( time , time . getDefault () ) ; time = time ; }
Code	{ super ( time , time . getDefault () ) ; time = time ; }
Distance : 8

59
Tree	{ super ( STRING_CONSTANT ) ; zone = time ; }
Code	{ super ( STRING_CONSTANT ) ; zone = time ; }
Distance : 10

60
Tree	{ time = Locale ; }
Code	{ time = Locale ; }
Distance : 9

61
Tree	{ super ( time , Locale , time , time . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , Locale , time , time . getDefault () ) ; Locale . getDefault () ; }
Distance : 10

62
Tree	{ this ( time , time , time , time , time , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , time , time , time , time , Locale , Locale . getDefault () ) ; }
Distance : 9

63
Tree	{ null Locale = time ; }
Code	{ null Locale = time ; }
Distance : 10

64
Tree	{ super ( time , null , null , Locale , Locale . getDefault () ) ; Locale = time ; }
Code	{ super ( time , null , null , Locale , Locale . getDefault () ) ; Locale = time ; }
Distance : 10

65
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; fireChangeEvent }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; fireChangeEvent }
Distance : 6

66
Tree	{ this ( time , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time . getDefault () , Locale . getDefault () ) ; }
Distance : 4

67
Tree	{ this ( Locale , true ) ; }
Code	{ this ( Locale , true ) ; }
Distance : 7

68
Tree	{ this ( time . getDefault () , zone ) ; }
Code	{ this ( time . getDefault () , zone ) ; }
Distance : 6

69
Tree	{ this ( time , time , Locale ) ; }
Code	{ this ( time , time , Locale ) ; }
Distance : 4

70
Tree	{ super ( time , Locale . getDefault () ) ; Locale = time ; }
Code	{ super ( time , Locale . getDefault () ) ; Locale = time ; }
Distance : 7

71
Tree	{ this ( time , time . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , time . getDefault () , zone . getDefault () ) ; }
Distance : 5

72
Tree	{ this ( time , zone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , zone . getDefault () , Locale . getDefault () ) ; }
Distance : 3

73
Tree	{ this ( time . getDefault () , time . getDefault () ) ; }
Code	{ this ( time . getDefault () , time . getDefault () ) ; }
Distance : 4

74
Tree	{ super ( time , time , time , time . getDefault () ) ; time . getDefault () ; }
Code	{ super ( time , time , time , time . getDefault () ) ; time . getDefault () ; }
Distance : 10

75
Tree	{ super ( time . getDefault () ) ; time = time ; }
Code	{ super ( time . getDefault () ) ; time = time ; }
Distance : 9

76
Tree	{ this ( Locale . getDefault () , Locale ) ; }
Code	{ this ( Locale . getDefault () , Locale ) ; }
Distance : 6

77
Tree	{ this ( time , time , Locale , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time , Locale , time . getDefault () , Locale . getDefault () ) ; }
Distance : 8

78
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , Locale . getDefault () ) ; time = time ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , Locale . getDefault () ) ; time = time ; }
Distance : 7

79
Tree	{ super ( STRING_CONSTANT ) ; Locale = time ; }
Code	{ super ( STRING_CONSTANT ) ; Locale = time ; }
Distance : 9

80
Tree	{ this ( time , time , time , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , time , time , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

81
Tree	{ super ( time . getDefault () ) ; zone = time ; }
Code	{ super ( time . getDefault () ) ; zone = time ; }
Distance : 9

82
Tree	{ time = time ; }
Code	{ time = time ; }
Distance : 10

83
Tree	{ zone = time ; }
Code	{ zone = time ; }
Distance : 10

========================================================================


========================================================================
Example Number: 9
Parent Code is: 
if ( dataset != null ) { return result ; }
-------------------------------------------------------------------------------
Child code is: 
if ( dataset == null ) { return result ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=dataset}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=result}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=dataset}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=result}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/1/parent/source_org_jfree_chart_renderer_category_AbstractCategoryItemRenderer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 160
Wrong
========================================================================
False

0
Tree	if ( result != null ) { return result ; }
Code	if ( result != null ) { return result ; }
Distance : 2

1
Tree	if ( result . isEmpty ( dataset ) ) { return result ; }
Code	if ( result . isEmpty ( dataset ) ) { return result ; }
Distance : 6

2
Tree	if ( result . put ( dataset ) ) { return result ; }
Code	if ( result . put ( dataset ) ) { return result ; }
Distance : 6

3
Tree	if ( result . put () ) { return result ; }
Code	if ( result . put () ) { return result ; }
Distance : 4

4
Tree	if ( result != null ) { return DomainOrder.DESCENDING ( STRING_CONSTANT ) ; }
Code	if ( result != null ) { return DomainOrder.DESCENDING ( STRING_CONSTANT ) ; }
Distance : 6

5
Tree	if ( result . put ( result ) ) { return result ; }
Code	if ( result . put ( result ) ) { return result ; }
Distance : 6

6
Tree	if ( ! XYDataset ( Year.MINIMUM_YEAR ) ) { return result ; }
Code	if ( ! XYDataset ( Year.MINIMUM_YEAR ) ) { return result ; }
Distance : 5

7
Tree	if ( result ( dataset ) ) { return result ; }
Code	if ( result ( dataset ) ) { return result ; }
Distance : 4

8
Tree	if ( result != null ) { return setDataset ( STRING_CONSTANT ) ; }
Code	if ( result != null ) { return setDataset ( STRING_CONSTANT ) ; }
Distance : 6

9
Tree	if ( result != null ) { return result . findRangeBounds ( dataset ) ; }
Code	if ( result != null ) { return result . findRangeBounds ( dataset ) ; }
Distance : 7

10
Tree	if ( d () ) { return result ; }
Code	if ( d () ) { return result ; }
Distance : 3

11
Tree	if ( result != null ) { return append ( STRING_CONSTANT ) ; }
Code	if ( result != null ) { return append ( STRING_CONSTANT ) ; }
Distance : 6

12
Tree	if ( dataset ( dataset ) ) { return result ; }
Code	if ( dataset ( dataset ) ) { return result ; }
Distance : 3

13
Tree	if ( result != null ) { return setDataset ( this , dataset ) ; }
Code	if ( result != null ) { return setDataset ( this , dataset ) ; }
Distance : 8

14
Tree	if ( result . isEmpty ( dataset , result ) ) { return result ; }
Code	if ( result . isEmpty ( dataset , result ) ) { return result ; }
Distance : 7

15
Tree	if ( ! DomainOrder ( dataset ) ) { return result ; }
Code	if ( ! DomainOrder ( dataset ) ) { return result ; }
Distance : 5

16
Tree	if ( result != null ) { return result ; }
Code	if ( result != null ) { return result ; }
Distance : 2

17
Tree	if ( result != null ) { return append ( this , dataset ) ; }
Code	if ( result != null ) { return append ( this , dataset ) ; }
Distance : 8

18
Tree	if ( d ( Color.GRAY ) ) { return result ; }
Code	if ( d ( Color.GRAY ) ) { return result ; }
Distance : 4

19
Tree	if ( ! Color.GRAY () ) { return result ; }
Code	if ( ! Color.GRAY () ) { return result ; }
Distance : 3

20
Tree	if ( result != null ) { return dataset ; }
Code	if ( result != null ) { return dataset ; }
Distance : 3

21
Tree	if ( ! ( Color.GRAY ) ) { return result ; }
Code	if ( ! ( Color.GRAY ) ) { return result ; }
Distance : 4

22
Tree	if ( new MarkerChangeEvent () . minY ( dataset ) ) { return result ; }
Code	if ( new MarkerChangeEvent () . minY ( dataset ) ) { return result ; }
Distance : 8

23
Tree	if ( result != null ) { return dataset ; }
Code	if ( result != null ) { return dataset ; }
Distance : 3

24
Tree	if ( d ( dataset , dataset ) ) { return result ; }
Code	if ( d ( dataset , dataset ) ) { return result ; }
Distance : 5

25
Tree	if ( result . isEmpty ( dataset , true ) ) { return result ; }
Code	if ( result . isEmpty ( dataset , true ) ) { return result ; }
Distance : 7

26
Tree	if ( result != null ) { return result . combine ( dataset ) ; }
Code	if ( result != null ) { return result . combine ( dataset ) ; }
Distance : 7

27
Tree	if ( this . labelType () ) { return result ; }
Code	if ( this . labelType () ) { return result ; }
Distance : 4

28
Tree	if ( new MarkerChangeEvent () . findZBounds ( dataset ) ) { return result ; }
Code	if ( new MarkerChangeEvent () . findZBounds ( dataset ) ) { return result ; }
Distance : 8

29
Tree	if ( result ( dataset , dataset ) ) { return result ; }
Code	if ( result ( dataset , dataset ) ) { return result ; }
Distance : 5

30
Tree	if ( result . isEmpty ( dataset , dataset ) ) { return result ; }
Code	if ( result . isEmpty ( dataset , dataset ) ) { return result ; }
Distance : 7

31
Tree	if ( d ( dataset , dataset , dataset ) ) { return result ; }
Code	if ( d ( dataset , dataset , dataset ) ) { return result ; }
Distance : 7

32
Tree	if ( this . minY () ) { return result ; }
Code	if ( this . minY () ) { return result ; }
Distance : 4

33
Tree	if ( result . isEmpty ( NUMBER_CONSTANT , dataset ) ) { return result ; }
Code	if ( result . isEmpty ( NUMBER_CONSTANT , dataset ) ) { return result ; }
Distance : 8

34
Tree	if ( dataset . dataset ( dataset ) ) { return result ; }
Code	if ( dataset . dataset ( dataset ) ) { return result ; }
Distance : 5

35
Tree	if ( ! ( dataset , dataset ) ) { return result ; }
Code	if ( ! ( dataset , dataset ) ) { return result ; }
Distance : 5

36
Tree	if ( result != null ) { return DomainOrder.DESCENDING ( this , dataset ) ; }
Code	if ( result != null ) { return DomainOrder.DESCENDING ( this , dataset ) ; }
Distance : 8

37
Tree	if ( result . put ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( result . put ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 6

38
Tree	if ( result ) { return result ; }
Code	if ( result ) { return result ; }
Distance : 3

39
Tree	if ( result != null ) { return this . result . dataset ; }
Code	if ( result != null ) { return this . result . dataset ; }
Distance : 6

40
Tree	if ( result . getDataset ( dataset ) ) { return result ; }
Code	if ( result . getDataset ( dataset ) ) { return result ; }
Distance : 6

41
Tree	if ( ! result . equal ( result ) ) { return result ; }
Code	if ( ! result . equal ( result ) ) { return result ; }
Distance : 7

42
Tree	if ( new MarkerChangeEvent ( dataset ) . hashCode ( result ) ) { return result ; }
Code	if ( new MarkerChangeEvent ( dataset ) . hashCode ( result ) ) { return result ; }
Distance : 9

43
Tree	if ( new MarkerChangeEvent ( dataset ) . getPeriod ( result ) ) { return result ; }
Code	if ( new MarkerChangeEvent ( dataset ) . getPeriod ( result ) ) { return result ; }
Distance : 9

44
Tree	if ( result . calculatePieDatasetTotal ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( result . calculatePieDatasetTotal ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 6

45
Tree	if ( ! () ) { return result ; }
Code	if ( ! () ) { return result ; }
Distance : 3

46
Tree	if ( ! XYDataset ( dataset ) ) { return result ; }
Code	if ( ! XYDataset ( dataset ) ) { return result ; }
Distance : 5

47
Tree	if ( result != null ) { return result . findRangeBounds ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( result != null ) { return result . findRangeBounds ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

48
Tree	if ( new DatasetUtils ( dataset ) . clone ( result ) ) { return result ; }
Code	if ( new DatasetUtils ( dataset ) . clone ( result ) ) { return result ; }
Distance : 9

49
Tree	if ( new MarkerChangeEvent () . findStackedRangeBounds ( dataset ) ) { return result ; }
Code	if ( new MarkerChangeEvent () . findStackedRangeBounds ( dataset ) ) { return result ; }
Distance : 8

50
Tree	if ( ! XYDataset ( Color.GRAY ) ) { return result ; }
Code	if ( ! XYDataset ( Color.GRAY ) ) { return result ; }
Distance : 5

51
Tree	if ( result != null ) { return getCategoryIndex ( this , dataset ) ; }
Code	if ( result != null ) { return getCategoryIndex ( this , dataset ) ; }
Distance : 8

52
Tree	if ( result != null ) { return result ; } else else
Code	if ( result != null ) { return result ; } else else
Distance : 4

53
Tree	if ( result != null ) { return this . result ; }
Code	if ( result != null ) { return this . result ; }
Distance : 4

54
Tree	if ( put ( dataset ) ) { return result ; }
Code	if ( put ( dataset ) ) { return result ; }
Distance : 4

55
Tree	if ( result != null ) { return this . dataset ; }
Code	if ( result != null ) { return this . dataset ; }
Distance : 5

56
Tree	if ( result . dataset ( result ) ) { return result ; }
Code	if ( result . dataset ( result ) ) { return result ; }
Distance : 5

57
Tree	if ( result != null ) { return getCategoryIndex ( STRING_CONSTANT ) ; }
Code	if ( result != null ) { return getCategoryIndex ( STRING_CONSTANT ) ; }
Distance : 6

58
Tree	if ( ! MarkerChangeEvent () ) { return result ; }
Code	if ( ! MarkerChangeEvent () ) { return result ; }
Distance : 3

59
Tree	if ( new MarkerChangeEvent () . minY ( result ) ) { return result ; }
Code	if ( new MarkerChangeEvent () . minY ( result ) ) { return result ; }
Distance : 8

60
Tree	if ( result ( dataset ) ) { return result ; }
Code	if ( result ( dataset ) ) { return result ; }
Distance : 4

61
Tree	if ( this . dataset . equal () ) { return result ; }
Code	if ( this . dataset . equal () ) { return result ; }
Distance : 5

62
Tree	if ( result () ) { return result ; }
Code	if ( result () ) { return result ; }
Distance : 3

63
Tree	if ( result . put ( dataset , true ) ) { return result ; }
Code	if ( result . put ( dataset , true ) ) { return result ; }
Distance : 7

64
Tree	if ( result . put ( dataset , result ) ) { return result ; }
Code	if ( result . put ( dataset , result ) ) { return result ; }
Distance : 7

65
Tree	if ( result != null ) { return result ; } else {
Code	if ( result != null ) { return result ; } else {
Distance : 4

66
Tree	if ( put ( dataset , dataset , true ) ) { return result ; }
Code	if ( put ( dataset , dataset , true ) ) { return result ; }
Distance : 7

67
Tree	if ( result != null ) { return result . findZBounds ( dataset ) ; }
Code	if ( result != null ) { return result . findZBounds ( dataset ) ; }
Distance : 7

68
Tree	if ( ! result . isEmpty ( result ) ) { return result ; }
Code	if ( ! result . isEmpty ( result ) ) { return result ; }
Distance : 7

69
Tree	if ( d ( dataset ) ) { return result ; }
Code	if ( d ( dataset ) ) { return result ; }
Distance : 4

70
Tree	if ( result != null && result . findZBounds ( result ) ) { return result ; }
Code	if ( result != null && result . findZBounds ( result ) ) { return result ; }
Distance : 9

71
Tree	if ( result . put ( NUMBER_CONSTANT , dataset ) ) { return result ; }
Code	if ( result . put ( NUMBER_CONSTANT , dataset ) ) { return result ; }
Distance : 8

72
Tree	if ( int ( dataset , dataset , dataset ) ) { return result ; }
Code	if ( int ( dataset , dataset , dataset ) ) { return result ; }
Distance : 7

73
Tree	if ( result != null ) { return result . findZBounds () ; }
Code	if ( result != null ) { return result . findZBounds () ; }
Distance : 5

74
Tree	if ( this . dataset . isEmpty () ) { return result ; }
Code	if ( this . dataset . isEmpty () ) { return result ; }
Distance : 5

75
Tree	if ( result . getDataset ( NUMBER_CONSTANT , dataset ) ) { return result ; }
Code	if ( result . getDataset ( NUMBER_CONSTANT , dataset ) ) { return result ; }
Distance : 8

76
Tree	if ( new MarkerChangeEvent ( dataset ) . clone ( result ) ) { return result ; }
Code	if ( new MarkerChangeEvent ( dataset ) . clone ( result ) ) { return result ; }
Distance : 9

77
Tree	if ( put ( dataset , dataset , dataset ) ) { return result ; }
Code	if ( put ( dataset , dataset , dataset ) ) { return result ; }
Distance : 7

78
Tree	if ( result != null && result . findStackedRangeBounds ( dataset ) ) { return result ; }
Code	if ( result != null && result . findStackedRangeBounds ( dataset ) ) { return result ; }
Distance : 9

79
Tree	if ( dataset . dataset ( result ) ) { return result ; }
Code	if ( dataset . dataset ( result ) ) { return result ; }
Distance : 5

80
Tree	if ( result != null ) { return result . findStackedRangeBounds () ; }
Code	if ( result != null ) { return result . findStackedRangeBounds () ; }
Distance : 5

81
Tree	if ( result != null ) { return result . findStackedRangeBounds ( dataset ) ; }
Code	if ( result != null ) { return result . findStackedRangeBounds ( dataset ) ; }
Distance : 7

82
Tree	if ( result != null ) { return result . findRangeBounds ( dataset , that.data ) ; }
Code	if ( result != null ) { return result . findRangeBounds ( dataset , that.data ) ; }
Distance : 9

83
Tree	if ( result != null ) { return result ; } else catch
Code	if ( result != null ) { return result ; } else catch
Distance : 4

84
Tree	if ( d ( TableXYDataset ) ) { return result ; }
Code	if ( d ( TableXYDataset ) ) { return result ; }
Distance : 4

85
Tree	if ( result . calculatePieDatasetTotal () ) { return result ; }
Code	if ( result . calculatePieDatasetTotal () ) { return result ; }
Distance : 4

86
Tree	if ( this . dataset . equal ( result ) ) { return result ; }
Code	if ( this . dataset . equal ( result ) ) { return result ; }
Distance : 7

87
Tree	if ( result != null ) { return result . findStackedRangeBounds ( dataset , Color.BLACK ) ; }
Code	if ( result != null ) { return result . findStackedRangeBounds ( dataset , Color.BLACK ) ; }
Distance : 9

88
Tree	if ( result != null ) { return result . findRangeBounds ( dataset , Color.BLACK ) ; }
Code	if ( result != null ) { return result . findRangeBounds ( dataset , Color.BLACK ) ; }
Distance : 9

89
Tree	if ( result . isEmpty ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( result . isEmpty ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 6

90
Tree	if ( ! MarkerChangeEvent ( dataset ) ) { return result ; }
Code	if ( ! MarkerChangeEvent ( dataset ) ) { return result ; }
Distance : 5

91
Tree	if ( ! XYDataset ( TableXYDataset ) ) { return result ; }
Code	if ( ! XYDataset ( TableXYDataset ) ) { return result ; }
Distance : 5

92
Tree	if ( this . dataset . getDataset () ) { return result ; }
Code	if ( this . dataset . getDataset () ) { return result ; }
Distance : 5

93
Tree	if ( result != null ) { return result . findZBounds ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( result != null ) { return result . findZBounds ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

94
Tree	if ( this . dataset . put () ) { return result ; }
Code	if ( this . dataset . put () ) { return result ; }
Distance : 5

95
Tree	if ( result . put ( dataset , false ) ) { return result ; }
Code	if ( result . put ( dataset , false ) ) { return result ; }
Distance : 7

96
Tree	if ( result . getDataset ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( result . getDataset ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 6

97
Tree	if ( result ) { return result ; } else else
Code	if ( result ) { return result ; } else else
Distance : 5

98
Tree	if ( result != null ) { return result . findRangeBounds () ; }
Code	if ( result != null ) { return result . findRangeBounds () ; }
Distance : 5

99
Tree	if ( ! DomainOrder () ) { return result ; }
Code	if ( ! DomainOrder () ) { return result ; }
Distance : 3

100
Tree	if ( dataset != null ) { return result ; }
Code	if ( dataset != null ) { return result ; }
Distance : 1

101
Tree	if ( ! ( dataset ) ) { return result ; }
Code	if ( ! ( dataset ) ) { return result ; }
Distance : 4

102
Tree	if ( result != null && result . findZBounds ( dataset ) ) { return result ; }
Code	if ( result != null && result . findZBounds ( dataset ) ) { return result ; }
Distance : 9

103
Tree	if ( this . dataset . isEmpty ( result ) ) { return result ; }
Code	if ( this . dataset . isEmpty ( result ) ) { return result ; }
Distance : 7

104
Tree	if ( ! XYDataset ( MarkerChangeEvent ) ) { return result ; }
Code	if ( ! XYDataset ( MarkerChangeEvent ) ) { return result ; }
Distance : 5

105
Tree	if ( result . isEmpty () ) { return result ; }
Code	if ( result . isEmpty () ) { return result ; }
Distance : 4

106
Tree	if ( result . dataset ( dataset ) ) { return result ; }
Code	if ( result . dataset ( dataset ) ) { return result ; }
Distance : 5

107
Tree	if ( result ) { return result ; } else {
Code	if ( result ) { return result ; } else {
Distance : 5

108
Tree	if ( put ( dataset , dataset ) ) { return result ; }
Code	if ( put ( dataset , dataset ) ) { return result ; }
Distance : 5

109
Tree	if ( result ( result ) ) { return result ; }
Code	if ( result ( result ) ) { return result ; }
Distance : 4

110
Tree	if ( ! XYDataset () ) { return result ; }
Code	if ( ! XYDataset () ) { return result ; }
Distance : 3

111
Tree	if ( this . dataset () ) { return result ; }
Code	if ( this . dataset () ) { return result ; }
Distance : 4

112
Tree	if ( result . getDataset () ) { return result ; }
Code	if ( result . getDataset () ) { return result ; }
Distance : 4

113
Tree	if ( dataset != null ) { return result ; }
Code	if ( dataset != null ) { return result ; }
Distance : 1

114
Tree	if ( result ) { return result ; } else catch
Code	if ( result ) { return result ; } else catch
Distance : 5

115
Tree	if ( this . dataset . getDataset ( result ) ) { return result ; }
Code	if ( this . dataset . getDataset ( result ) ) { return result ; }
Distance : 7

116
Tree	if ( put () ) { return result ; }
Code	if ( put () ) { return result ; }
Distance : 3

117
Tree	if ( result . put ( dataset , dataset ) ) { return result ; }
Code	if ( result . put ( dataset , dataset ) ) { return result ; }
Distance : 7

118
Tree	if ( result != null ) { return result . findStackedRangeBounds ( dataset , that.data ) ; }
Code	if ( result != null ) { return result . findStackedRangeBounds ( dataset , that.data ) ; }
Distance : 9

119
Tree	if ( result != null ) { return result . combine () ; }
Code	if ( result != null ) { return result . combine () ; }
Distance : 5

120
Tree	if ( result . put ( NUMBER_CONSTANT , result ) ) { return result ; }
Code	if ( result . put ( NUMBER_CONSTANT , result ) ) { return result ; }
Distance : 8

121
Tree	if ( result != null ) { return result . findStackedRangeBounds ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( result != null ) { return result . findStackedRangeBounds ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

122
Tree	if ( ! result . isEmptyOrNull ( result ) ) { return result ; }
Code	if ( ! result . isEmptyOrNull ( result ) ) { return result ; }
Distance : 7

123
Tree	if ( this . dataset . put ( result ) ) { return result ; }
Code	if ( this . dataset . put ( result ) ) { return result ; }
Distance : 7

124
Tree	if ( result != null ) { return result . combine ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( result != null ) { return result . combine ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

125
Tree	if ( result . isEmpty ( dataset , false ) ) { return result ; }
Code	if ( result . isEmpty ( dataset , false ) ) { return result ; }
Distance : 7

126
Tree	if ( result != null ) { return this . result . findRangeBounds () ; }
Code	if ( result != null ) { return this . result . findRangeBounds () ; }
Distance : 7

127
Tree	if ( result ( dataset , dataset , true ) ) { return result ; }
Code	if ( result ( dataset , dataset , true ) ) { return result ; }
Distance : 7

128
Tree	if ( d ( MarkerChangeEvent ) ) { return result ; }
Code	if ( d ( MarkerChangeEvent ) ) { return result ; }
Distance : 4

129
Tree	if ( result . put ( dataset ) ) { return this . result . result ; }
Code	if ( result . put ( dataset ) ) { return this . result . result ; }
Distance : 10

130
Tree	if ( ! ( dataset , dataset , true ) ) { return result ; }
Code	if ( ! ( dataset , dataset , true ) ) { return result ; }
Distance : 7

131
Tree	if ( result ) { return result ; } else if
Code	if ( result ) { return result ; } else if
Distance : 5

132
Tree	if ( this . isEmpty () ) { return result ; }
Code	if ( this . isEmpty () ) { return result ; }
Distance : 4

133
Tree	if ( result . put ( dataset ) ) { return this . result . dataset ; }
Code	if ( result . put ( dataset ) ) { return this . result . dataset ; }
Distance : 10

134
Tree	if ( result != null && result . findStackedRangeBounds ( result ) ) { return result ; }
Code	if ( result != null && result . findStackedRangeBounds ( result ) ) { return result ; }
Distance : 9

135
Tree	if ( ! Color.GRAY ( dataset ) ) { return result ; }
Code	if ( ! Color.GRAY ( dataset ) ) { return result ; }
Distance : 5

136
Tree	if ( result != null ) { return this . dataset . dataset ; }
Code	if ( result != null ) { return this . dataset . dataset ; }
Distance : 7

137
Tree	if ( ! result . equal ( dataset ) ) { return result ; }
Code	if ( ! result . equal ( dataset ) ) { return result ; }
Distance : 7

138
Tree	if ( result . isEmpty ( dataset ) ) { return this . result . dataset ; }
Code	if ( result . isEmpty ( dataset ) ) { return this . result . dataset ; }
Distance : 10

139
Tree	if ( result != null ) { return result ; } else if
Code	if ( result != null ) { return result ; } else if
Distance : 4

140
Tree	if ( result != null ) { return this . dataset . indexOf () ; }
Code	if ( result != null ) { return this . dataset . indexOf () ; }
Distance : 8

141
Tree	if ( dataset ) { return result ; }
Code	if ( dataset ) { return result ; }
Distance : 2

142
Tree	if ( d ( dataset , dataset , true ) ) { return result ; }
Code	if ( d ( dataset , dataset , true ) ) { return result ; }
Distance : 7

143
Tree	if ( result != null ) { return this . result . indexOf () ; }
Code	if ( result != null ) { return this . result . indexOf () ; }
Distance : 7

144
Tree	if ( result != null ) { return this . dataset . findRangeBounds () ; }
Code	if ( result != null ) { return this . dataset . findRangeBounds () ; }
Distance : 8

145
Tree	if ( result ( dataset , dataset , dataset ) ) { return result ; }
Code	if ( result ( dataset , dataset , dataset ) ) { return result ; }
Distance : 7

146
Tree	if ( result != null ) { return this . dataset . result ; }
Code	if ( result != null ) { return this . dataset . result ; }
Distance : 6

147
Tree	if ( result . isEmpty () ) { return this . dataset . dataset ; }
Code	if ( result . isEmpty () ) { return this . dataset . dataset ; }
Distance : 9

148
Tree	if ( dataset != null ) { return this . dataset ; }
Code	if ( dataset != null ) { return this . dataset ; }
Distance : 4

149
Tree	if ( result != return; ) { return result ; }
Code	if ( result != return; ) { return result ; }
Distance : 3

150
Tree	if ( dataset ( result ) ) { return result ; }
Code	if ( dataset ( result ) ) { return result ; }
Distance : 3

151
Tree	if ( result . put () ) { return this . dataset . dataset ; }
Code	if ( result . put () ) { return this . dataset . dataset ; }
Distance : 9

152
Tree	if ( result . getDataset ( dataset ) ) { return this . result . dataset ; }
Code	if ( result . getDataset ( dataset ) ) { return this . result . dataset ; }
Distance : 10

153
Tree	if ( result . put () ) { return this . result . dataset ; }
Code	if ( result . put () ) { return this . result . dataset ; }
Distance : 8

154
Tree	if ( result != null ) { return this . result . result ; }
Code	if ( result != null ) { return this . result . result ; }
Distance : 6

155
Tree	if ( result ) { return dataset ; }
Code	if ( result ) { return dataset ; }
Distance : 4

156
Tree	if ( dataset != null ) { return this . result ; }
Code	if ( dataset != null ) { return this . result ; }
Distance : 3

157
Tree	if ( result . isEmpty () ) { return this . result . dataset ; }
Code	if ( result . isEmpty () ) { return this . result . dataset ; }
Distance : 8

158
Tree	if ( dataset ) { return dataset ; }
Code	if ( dataset ) { return dataset ; }
Distance : 3

159
Tree	if ( result != return; ) { return result ; }
Code	if ( result != return; ) { return result ; }
Distance : 3

========================================================================


